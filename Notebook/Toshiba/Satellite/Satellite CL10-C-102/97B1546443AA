
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "TOSASU"  "TOSASU00"  0x01072009  "MSFT"   0x00000097
 02)  APIC  0x00000068  0x03  "TOSASU"  "TOSASU00"  0x01072009  "AMI "   0x00010013
 03)  SLIC  0x00000176  0x01  "TOSASU"  "TOSASU00"  0x01072009  "MSFT"   0x00000001
 04)  SSDT  0x00000290  0x01  "PmRef "  "Cpu0Tst "  0x00003000  "INTL"   0x20061109
 05)  TPM2  0x00000034  0x03  "      "  "Tpm2Tabl"  0x00000001  "AMI "   0x00000000
 06)  UEFI  0x00000042  0x01  "TOSASU"  "TOSASU00"  0x00000000  "    "   0x00000000
 07)  DSDT  0x0001D69F  0x02  "TOSASU"  "TOSASU00"  0x01072009  "INTL"   0x20120913
 08)  LPIT  0x00000104  0x01  "TOSASU"  "TOSASU00"  0x00000005  "MSFT"   0x0100000D
 09)  SSDT  0x0000017A  0x01  "PmRef "  "ApTst   "  0x00003000  "INTL"   0x20061109
 10)  FACP  0x0000010C  0x05  "TOSASU"  "TOSASU00"  0x01072009  "AMI "   0x00010013
 11)  FPDT  0x00000044  0x01  "TOSASU"  "TOSASU00"  0x01072009  "AMI "   0x00010013
 12)  SSDT  0x00000763  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20061109
 13)  MSDM  0x00000055  0x03  "TOSASU"  "TOSASU00"  0x06222004  "MSFT"   0x00010013
 14)  CSRT  0x0000014C  0x00  "INTEL "  "LANFORDC"  0x00000005  "MSFT"   0x0100000D
 15)  EXTF  0x00000053  0x00  " {    "  "        "  0x00000000  "MSFT"   0x00000001
 16)  FIDT  0x0000009C  0x01  "TOSASU"  "TOSASU00"  0x01072009  "AMI "   0x00010013
 17)  FACS  0x00000040  0x02
 18)  BGRT  0x00000038  0x00  "      "  "        "  0x00000000  "MSFT"   0x00000001
 19)  SSDT  0x00000652  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20061109
 20)  SSDT  0x0000008D  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20061109
 21)  SSDT  0x00000357  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20061109
 22)  SSDT  0x0000015F  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20061109

Found 22 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : FF
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 04 [Local APIC NMI]
[035h 0053   1]                       Length : 06
[036h 0054   1]                 Processor ID : 01
[037h 0055   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[039h 0057   1]         Interrupt Input LINT : 01

[03Ah 0058   1]                Subtable Type : 00 [Processor Local APIC]
[03Bh 0059   1]                       Length : 08
[03Ch 0060   1]                 Processor ID : 02
[03Dh 0061   1]                Local Apic ID : 04
[03Eh 0062   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[042h 0066   1]                Subtable Type : 04 [Local APIC NMI]
[043h 0067   1]                       Length : 06
[044h 0068   1]                 Processor ID : 02
[045h 0069   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[047h 0071   1]         Interrupt Input LINT : 01

[048h 0072   1]                Subtable Type : 01 [I/O APIC]
[049h 0073   1]                       Length : 0C
[04Ah 0074   1]                  I/O Apic ID : 00
[04Bh 0075   1]                     Reserved : 00
[04Ch 0076   4]                      Address : FEC00000
[050h 0080   4]                    Interrupt : 00000000

[054h 0084   1]                Subtable Type : 02 [Interrupt Source Override]
[055h 0085   1]                       Length : 0A
[056h 0086   1]                          Bus : 00
[057h 0087   1]                       Source : 00
[058h 0088   4]                    Interrupt : 00000002
[05Ch 0092   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[05Eh 0094   1]                Subtable Type : 02 [Interrupt Source Override]
[05Fh 0095   1]                       Length : 0A
[060h 0096   1]                          Bus : 00
[061h 0097   1]                       Source : 09
[062h 0098   4]                    Interrupt : 00000009
[066h 0102   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 03 FF 54 4F 53 41 53 55  // APICh.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 09 20 07 01 41 4D 49 20  // TOSASU00. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 04 06 01 05 00 01 00 08 02 04 01 00  // ................
    0040: 00 00 04 06 02 05 00 01 01 0C 00 00 00 00 C0 FE  // ................
    0050: 00 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    0060: 00 09 09 00 00 00 0D 00                          // ........


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 16
[00Ah 0010   6]                       Oem ID : ""
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000007951B018
[030h 0048   4]                Image OffsetX : 000001BE
[034h 0052   4]                Image OffsetY : 000000F5

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 00 16 00 00 00 00 00 00  // BGRT8...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 4D 53 46 54  // ............MSFT
    0020: 01 00 00 00 01 00 01 00 18 B0 51 79 00 00 00 00  // ..........Qy....
    0030: BE 01 00 00 F5 00 00 00                          // ........


CSRT
----
[000h 0000   4]                    Signature : "CSRT"    [Core System Resource Table]
[004h 0004   4]                 Table Length : 0000014C
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 36
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "LANFORDC"
[018h 0024   4]                 Oem Revision : 00000005
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0100000D


[024h 0036   4]                       Length : 00000088
[028h 0040   4]                    Vendor ID : 4C544E49
[02Ch 0044   4]                 Subvendor ID : 00000000
[030h 0048   2]                    Device ID : 9C60
[032h 0050   2]                 Subdevice ID : 0000
[034h 0052   2]                     Revision : 0002
[036h 0054   2]                     Reserved : 0000
[038h 0056   4]           Shared Info Length : 0000001C

[03Ch 0060   2]                Major Version : 0001
[03Eh 0062   2]                Minor Version : 0000
[040h 0064   4]        MMIO Base Address Low : FFFFC000
[044h 0068   4]       MMIO Base Address High : 00000000
[048h 0072   4]                GSI Interrupt : 0000002A
[04Ch 0076   1]           Interrupt Polarity : 02
[04Dh 0077   1]               Interrupt Mode : 00
[04Eh 0078   1]                 Num Channels : 06
[04Fh 0079   1]            DMA Address Width : 20
[050h 0080   2]            Base Request Line : 0000
[052h 0082   2]        Num Handshake Signals : 0010
[054h 0084   4]               Max Block Size : 00001000

[058h 0088   4]                       Length : 0000000C
[05Ch 0092   2]                         Type : 0003
[05Eh 0094   2]                      Subtype : 0001
[060h 0096   4]                          UID : 20495053

[064h 0100   4]                       Length : 0000000C
[068h 0104   2]                         Type : 0003
[06Ah 0106   2]                      Subtype : 0000
[06Ch 0108   4]                          UID : 30414843

[070h 0112   4]                       Length : 0000000C
[074h 0116   2]                         Type : 0003
[076h 0118   2]                      Subtype : 0000
[078h 0120   4]                          UID : 31414843

[07Ch 0124   4]                       Length : 0000000C
[080h 0128   2]                         Type : 0003
[082h 0130   2]                      Subtype : 0000
[084h 0132   4]                          UID : 32414843

[088h 0136   4]                       Length : 0000000C
[08Ch 0140   2]                         Type : 0003
[08Eh 0142   2]                      Subtype : 0000
[090h 0144   4]                          UID : 33414843

[094h 0148   4]                       Length : 0000000C
[098h 0152   2]                         Type : 0003
[09Ah 0154   2]                      Subtype : 0000
[09Ch 0156   4]                          UID : 34414843

[0A0h 0160   4]                       Length : 0000000C
[0A4h 0164   2]                         Type : 0003
[0A6h 0166   2]                      Subtype : 0000
[0A8h 0168   4]                          UID : 35414843

[0ACh 0172   4]                       Length : 000000A0
[0B0h 0176   4]                    Vendor ID : 4C544E49
[0B4h 0180   4]                 Subvendor ID : 00000000
[0B8h 0184   2]                    Device ID : 9C60
[0BAh 0186   2]                 Subdevice ID : 0000
[0BCh 0188   2]                     Revision : 0003
[0BEh 0190   2]                     Reserved : 0000
[0C0h 0192   4]           Shared Info Length : 0000001C

[0C4h 0196   2]                Major Version : 0001
[0C6h 0198   2]                Minor Version : 0000
[0C8h 0200   4]        MMIO Base Address Low : FFFFC000
[0CCh 0204   4]       MMIO Base Address High : 00000000
[0D0h 0208   4]                GSI Interrupt : 0000002B
[0D4h 0212   1]           Interrupt Polarity : 02
[0D5h 0213   1]               Interrupt Mode : 00
[0D6h 0214   1]                 Num Channels : 08
[0D7h 0215   1]            DMA Address Width : 20
[0D8h 0216   2]            Base Request Line : 0010
[0DAh 0218   2]        Num Handshake Signals : 0010
[0DCh 0220   4]               Max Block Size : 00001000

[0E0h 0224   4]                       Length : 0000000C
[0E4h 0228   2]                         Type : 0003
[0E6h 0230   2]                      Subtype : 0001
[0E8h 0232   4]                          UID : 20433249

[0ECh 0236   4]                       Length : 0000000C
[0F0h 0240   2]                         Type : 0003
[0F2h 0242   2]                      Subtype : 0000
[0F4h 0244   4]                          UID : 30414843

[0F8h 0248   4]                       Length : 0000000C
[0FCh 0252   2]                         Type : 0003
[0FEh 0254   2]                      Subtype : 0000
[100h 0256   4]                          UID : 31414843

[104h 0260   4]                       Length : 0000000C
[108h 0264   2]                         Type : 0003
[10Ah 0266   2]                      Subtype : 0000
[10Ch 0268   4]                          UID : 32414843

[110h 0272   4]                       Length : 0000000C
[114h 0276   2]                         Type : 0003
[116h 0278   2]                      Subtype : 0000
[118h 0280   4]                          UID : 33414843

[11Ch 0284   4]                       Length : 0000000C
[120h 0288   2]                         Type : 0003
[122h 0290   2]                      Subtype : 0000
[124h 0292   4]                          UID : 34414843

[128h 0296   4]                       Length : 0000000C
[12Ch 0300   2]                         Type : 0003
[12Eh 0302   2]                      Subtype : 0000
[130h 0304   4]                          UID : 35414843

[134h 0308   4]                       Length : 0000000C
[138h 0312   2]                         Type : 0003
[13Ah 0314   2]                      Subtype : 0000
[13Ch 0316   4]                          UID : 36414843

[140h 0320   4]                       Length : 0000000C
[144h 0324   2]                         Type : 0003
[146h 0326   2]                      Subtype : 0000
[148h 0328   4]                          UID : 37414843

Raw Table Data: Length 332 (0x14C)

    0000: 43 53 52 54 4C 01 00 00 00 36 49 4E 54 45 4C 20  // CSRTL....6INTEL 
    0010: 4C 41 4E 46 4F 52 44 43 05 00 00 00 4D 53 46 54  // LANFORDC....MSFT
    0020: 0D 00 00 01 88 00 00 00 49 4E 54 4C 00 00 00 00  // ........INTL....
    0030: 60 9C 00 00 02 00 00 00 1C 00 00 00 01 00 00 00  // `...............
    0040: 00 C0 FF FF 00 00 00 00 2A 00 00 00 02 00 06 20  // ........*...... 
    0050: 00 00 10 00 00 10 00 00 0C 00 00 00 03 00 01 00  // ................
    0060: 53 50 49 20 0C 00 00 00 03 00 00 00 43 48 41 30  // SPI ........CHA0
    0070: 0C 00 00 00 03 00 00 00 43 48 41 31 0C 00 00 00  // ........CHA1....
    0080: 03 00 00 00 43 48 41 32 0C 00 00 00 03 00 00 00  // ....CHA2........
    0090: 43 48 41 33 0C 00 00 00 03 00 00 00 43 48 41 34  // CHA3........CHA4
    00A0: 0C 00 00 00 03 00 00 00 43 48 41 35 A0 00 00 00  // ........CHA5....
    00B0: 49 4E 54 4C 00 00 00 00 60 9C 00 00 03 00 00 00  // INTL....`.......
    00C0: 1C 00 00 00 01 00 00 00 00 C0 FF FF 00 00 00 00  // ................
    00D0: 2B 00 00 00 02 00 08 20 10 00 10 00 00 10 00 00  // +...... ........
    00E0: 0C 00 00 00 03 00 01 00 49 32 43 20 0C 00 00 00  // ........I2C ....
    00F0: 03 00 00 00 43 48 41 30 0C 00 00 00 03 00 00 00  // ....CHA0........
    0100: 43 48 41 31 0C 00 00 00 03 00 00 00 43 48 41 32  // CHA1........CHA2
    0110: 0C 00 00 00 03 00 00 00 43 48 41 33 0C 00 00 00  // ........CHA3....
    0120: 03 00 00 00 43 48 41 34 0C 00 00 00 03 00 00 00  // ....CHA4........
    0130: 43 48 41 35 0C 00 00 00 03 00 00 00 43 48 41 36  // CHA5........CHA6
    0140: 0C 00 00 00 03 00 00 00 43 48 41 37              // ........CHA7


DSDT
----
DefinitionBlock ("", "DSDT", 2, "TOSASU", "TOSASU00", 0x01072009)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0.MPPC, UnknownObj)
    External (_SB_.PCI0.CTCD, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.CTCN, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.CTNL, IntObj)
    External (_SB_.PCI0.SBRG.TPM_.PTS_, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.TCHG, UnknownObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)

    Name (LAPB, 0xFEE00000)
    Name (CPVD, Zero)
    Name (GBA0, 0xFED80000)
    Name (GBA1, 0xFED88000)
    Name (GBA2, 0xFED90000)
    Name (GBA3, 0xFED98000)
    Name (ABTR, 0xFEB00000)
    Name (SMBS, 0xEFA0)
    Name (SMBL, 0x20)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x40)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (RCRB, 0xFED1C000)
    Name (RCRL, 0x4000)
    Name (SSEN, Zero)
    Name (SPM1, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0x7FF00000)
    Name (FTPM, 0x7FF00000)
    Name (AMDT, Zero)
    Name (TPMF, One)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x130FD041)
    Name (PEPM, Zero)
    Name (MBLF, 0x0A)
    Name (FHPP, Zero)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (PMCB, 0xFED03000)
    Name (PUNB, 0xFED06000)
    Name (IBAS, 0xFED08000)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x02)
    Name (DSLC, 0x03)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (PSSS, 0x2B)
    Name (SOOT, 0x35)
    Name (ESCS, 0x48)
    Name (SDGV, 0x1C)
    Name (ACPH, 0xDE)
    Name (FTBL, 0x04)
    Name (CHRB, 0x80)
    Name (CIRB, 0x82)
    Name (CRRB, 0x55)
    Scope (\)
    {
        Method (UXDV, 1, Serialized)
        {
        }

        Method (RRIO, 4, Serialized)
        {
        }

        Method (RDMA, 3, NotSerialized)
        {
        }
    }

    OperationRegion (GNVS, SystemMemory, 0x7B1AEA98, 0x0348)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        P80D,   32, 
        REVS,   8, 
        OSID,   8, 
        ADED,   8, 
        BDID,   8, 
        FBID,   8, 
        STEP,   8, 
        SOCS,   8, 
        Offset (0x18), 
        APIC,   8, 
        MPEN,   8, 
        PPMF,   32, 
        PWRS,   8, 
        Offset (0x29), 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IDMM,   8, 
        IDMS,   8, 
        IF1E,   8, 
        GSMI,   8, 
        PAVP,   8, 
        PVDR,   8, 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ISPA,   32, 
        ISPD,   8, 
        RCAM,   8, 
        ECAM,   8, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        HGMD,   8, 
        GBAS,   32, 
        XBAS,   32, 
        HGGP,   8, 
        DLPW,   16, 
        DLHR,   16, 
        HRCO,   32, 
        HRPO,   32, 
        HRAI,   8, 
        PECO,   32, 
        PEPO,   32, 
        PEAI,   8, 
        CPSP,   32, 
        EECP,   8, 
        EVCP,   16, 
        RPBA,   32, 
        DIDX,   32, 
        EDPV,   8, 
        Offset (0xB6), 
        TPMP,   8, 
        TM2E,   8, 
        TM2A,   32, 
        TM2L,   32, 
        DTPM,   8, 
        MORD,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        Offset (0xD2), 
        LPES,   8, 
        I0D3,   8, 
        I1D3,   8, 
        I2D3,   8, 
        I3D3,   8, 
        I4D3,   8, 
        I5D3,   8, 
        I6D3,   8, 
        CAMS,   8, 
        Offset (0xDC), 
        OTG0,   32, 
        OTG1,   32, 
        OTGM,   8, 
        LPE0,   32, 
        LPE1,   32, 
        LPE2,   32, 
        PFLV,   8, 
        XHCI,   8, 
        PMEN,   8, 
        USEL,   8, 
        BTHS,   8, 
        EMVR,   8, 
        GOAE,   8, 
        D10A,   32, 
        D10L,   32, 
        D11A,   32, 
        D11L,   32, 
        P10A,   32, 
        P10L,   32, 
        P11A,   32, 
        P11L,   32, 
        P20A,   32, 
        P20L,   32, 
        P21A,   32, 
        P21L,   32, 
        U10A,   32, 
        U10L,   32, 
        U11A,   32, 
        U11L,   32, 
        U20A,   32, 
        U20L,   32, 
        U21A,   32, 
        U21L,   32, 
        SP0A,   32, 
        SP0L,   32, 
        SP1A,   32, 
        SP1L,   32, 
        S20A,   32, 
        S20L,   32, 
        S21A,   32, 
        S21L,   32, 
        S30A,   32, 
        S30L,   32, 
        S31A,   32, 
        S31L,   32, 
        D20A,   32, 
        D20L,   32, 
        D21A,   32, 
        D21L,   32, 
        I10A,   32, 
        I10L,   32, 
        I11A,   32, 
        I11L,   32, 
        I20A,   32, 
        I20L,   32, 
        I21A,   32, 
        I21L,   32, 
        I30A,   32, 
        I30L,   32, 
        I31A,   32, 
        I31L,   32, 
        I40A,   32, 
        I40L,   32, 
        I41A,   32, 
        I41L,   32, 
        I50A,   32, 
        I50L,   32, 
        I51A,   32, 
        I51L,   32, 
        I60A,   32, 
        I60L,   32, 
        I61A,   32, 
        I61L,   32, 
        I70A,   32, 
        I70L,   32, 
        I71A,   32, 
        I71L,   32, 
        EM0A,   32, 
        EM0L,   32, 
        EM1A,   32, 
        EM1L,   32, 
        SI0A,   32, 
        SI0L,   32, 
        SI1A,   32, 
        SI1L,   32, 
        SD0A,   32, 
        SD0L,   32, 
        SD1A,   32, 
        SD1L,   32, 
        ISH0,   32, 
        ISH1,   32, 
        VS18,   16, 
        VD33,   16, 
        Offset (0x236), 
        Offset (0x238), 
        ITSA,   8, 
        S0IX,   8, 
        SDMD,   8, 
        ELLN,   8, 
        AUCD,   8, 
        BTMS,   8, 
        PMCT,   8, 
        PSSD,   8, 
        Offset (0x249), 
        OSCC,   8, 
        NEXP,   8, 
        GPIC,   8, 
        L01C,   8, 
        MODS,   8, 
        PB1E,   8, 
        PSDE,   8, 
        ISCT,   8, 
        LIDS,   8, 
        DSEN,   8, 
        ECON,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        CTYP,   8, 
        VFN0,   8, 
        STTV,   16, 
        BNUM,   8, 
        B0SC,   8, 
        B1SC,   8, 
        B0SS,   8, 
        B1SS,   8, 
        BCSL,   8, 
        DBAT,   8, 
        NATP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        W381,   8, 
        DPTE,   8, 
        THM0,   8, 
        THM1,   8, 
        THM2,   8, 
        THM3,   8, 
        THM4,   8, 
        CHGR,   8, 
        DDSP,   8, 
        DSOC,   8, 
        DPSR,   8, 
        DPCT,   32, 
        DPPT,   32, 
        DGC0,   32, 
        DGP0,   32, 
        DGC1,   32, 
        DGP1,   32, 
        DGC2,   32, 
        DGP2,   32, 
        DGC3,   32, 
        DGP3,   32, 
        DGC4,   32, 
        DGP4,   32, 
        DLPM,   8, 
        DSC0,   32, 
        DSC1,   32, 
        DSC2,   32, 
        DSC3,   32, 
        DSC4,   32, 
        DDBG,   8, 
        LPOE,   32, 
        LPPS,   32, 
        LPST,   32, 
        LPPC,   32, 
        LPPF,   32, 
        DPME,   8, 
        WWEN,   8, 
        WWCR,   32, 
        WWPS,   32, 
        RSVD,   8, 
        ABS0,   8, 
        ABS1,   8, 
        ABS2,   8, 
        ABS3,   8, 
        ABS4,   8, 
        ABS5,   8, 
        AMTE,   8, 
        ABC0,   8, 
        ABC1,   8, 
        ABC2,   8, 
        ABC3,   8, 
        ABC4,   8, 
        ABC5,   8, 
        DPHL,   8, 
        DPLL,   8, 
        NFCS,   8, 
        BMBD,   32, 
        FSAS,   8, 
        WIFD,   8, 
        DPPP,   8, 
        DPCP,   8, 
        DPAP,   8, 
        DGA0,   32, 
        DGS0,   32, 
        DGH0,   32, 
        DGA1,   32, 
        DGS1,   32, 
        DGH1,   32, 
        DGA2,   32, 
        DGS2,   32, 
        DGH2,   32, 
        SAAT,   32, 
        SACT,   32, 
        SAST,   32, 
        SAHT,   32, 
        SAPT,   32, 
        SCDD,   8, 
        ISPE,   8, 
        PAVB,   32, 
        PAVL,   32, 
        DRMB,   64, 
        EPBA,   32, 
        HYSS,   32
    }

    Name (SS1, One)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x4400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Method (ADBG, 1, Serialized)
    {
        Return (Zero)
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (PMED, 0, NotSerialized)
    {
        \_SB.PCI0.XHC1.PMES = One
        \_SB.PCI0.XHC1.PMEE = Zero
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            FindSetRightBit (Local0, PRWP [One])
        }

        Return (PRWP) /* \PRWP */
    }

    Scope (_SB)
    {
        Device (RTC0)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PR00, Package (0x1A)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }
        })
        Name (AR00, Package (0x1A)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Device (CHVC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (HBUS, PCI_Config, Zero, 0xFF)
                Field (HBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xD0), 
                    SMCR,   32, 
                    SMDR,   32, 
                    MCRX,   32, 
                    MCXX,   32
                }

                Method (RMBR, 2, Serialized)
                {
                    Local0 = ((Arg0 << 0x10) | (Arg1 << 0x08))
                    SMCR = (0x100000F0 | Local0)
                    Return (SMDR) /* \_SB_.PCI0.CHVC.SMDR */
                }

                Method (WMBR, 3, Serialized)
                {
                    SMDR = Arg2
                    Local0 = ((Arg0 << 0x10) | (Arg1 << 0x08))
                    SMCR = (0x110000F0 | Local0)
                }

                Method (RMBX, 6, Serialized)
                {
                    Local4 = (Arg3 & 0x07)
                    Local4 = (Local4 << 0x08)
                    Local5 = ((Arg4 << 0x03) | Arg5)
                    Local5 &= 0xFF
                    MCXX = (Local4 | Local5)
                    Local3 = (Arg1 & 0xFFFFFF00)
                    MCRX = Local3
                    Local0 = (Arg1 & 0xFF)
                    Local1 = ((Arg2 << 0x18) | (Arg0 << 0x10))
                    Local1 &= 0xFFFF0000
                    Local2 = ((Local0 << 0x08) | 0xF0)
                    Local2 &= 0xFFFF
                    SMCR = (Local1 | Local2)
                    Return (SMDR) /* \_SB_.PCI0.CHVC.SMDR */
                }

                Method (WMBX, 7, Serialized)
                {
                    Local4 = (Arg4 & 0x07)
                    Local4 = (Local4 << 0x08)
                    Local5 = ((Arg5 << 0x03) | Arg6)
                    Local5 &= 0xFF
                    MCXX = (Local4 | Local5)
                    Local3 = (Arg1 & 0xFFFFFF00)
                    MCRX = Local3
                    SMDR = Arg2
                    Local0 = (Arg1 & 0xFF)
                    Local1 = ((Arg3 << 0x18) | (Arg0 << 0x10))
                    Local1 &= 0xFFFF0000
                    Local2 = ((Local0 << 0x08) | 0xF0)
                    Local2 &= 0xFFFF
                    SMCR = (Local1 | Local2)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (FTSZ, 0x00100000)
                CreateDWordField (RES0, \_SB.PCI0._Y00._MIN, LPMN)  // _MIN: Minimum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y00._MAX, LPMX)  // _MAX: Maximum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y00._LEN, LPLN)  // _LEN: Length
                If (((LPE2 != Zero) && (LPED == Zero)))
                {
                    LPMN = LPE2 /* \LPE2 */
                    LPMX = (LPMN + LPLN) /* \_SB_.PCI0._CRS.LPLN */
                    LPMX -= One
                }
                Else
                {
                    LPMN = Zero
                    LPMX = Zero
                    LPLN = Zero
                }

                CreateDWordField (RES0, \_SB.PCI0._Y01._MIN, ISMN)  // _MIN: Minimum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y01._MAX, ISMX)  // _MAX: Maximum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y01._LEN, ISLN)  // _LEN: Length
                If ((ISPD == One))
                {
                    ISMN = ISPA /* \ISPA */
                    ISMX = (ISMN + ISLN) /* \_SB_.PCI0._CRS.ISLN */
                    ISMX -= One
                }
                Else
                {
                    ISMN = Zero
                    ISMX = Zero
                    ISLN = Zero
                }

                CreateDWordField (RES0, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                M1MN = (BMBD & 0xFF000000)
                M1LN = ((M1MX - M1MN) + One)
                Return (RES0) /* \_SB_.PCI0.RES0 */
            }

            Name (RES0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0077,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x006F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0070,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0078,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0C80,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x20000000,         // Range Minimum
                    0x201FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00200000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x7A000000,         // Range Minimum
                    0x7A3FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00400000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x60000000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
            })
            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & 0x02))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                OperationRegion (VSID, PCI_Config, Zero, 0x20)
                Field (VSID, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    CMST,   32, 
                    CLSS,   32
                }

                Method (PRST, 0, NotSerialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    ElseIf (((CLSS & 0xFFFFFF00) == 0x03000000))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (PCTG, Package (0x0A)
                {
                    0x64, 
                    0x28, 
                    0x0A, 
                    0x14, 
                    0x1E, 
                    0x28, 
                    0x37, 
                    0x46, 
                    0x55, 
                    0x64
                })
                Name (PCW8, Package (0x67) {})
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Method (SWHD, 1, Serialized)
                {
                }

                Method (GETD, 0, NotSerialized)
                {
                    Return (Zero)
                }

                Method (GNDD, 0, NotSerialized)
                {
                    Return (Zero)
                }

                Method (ADVD, 0, NotSerialized)
                {
                    Return (Zero)
                }

                Method (NATK, 0, NotSerialized)
                {
                    Return (One)
                }

                Method (MD2A, 1, NotSerialized)
                {
                    Return (Zero)
                }

                Method (UPBL, 0, NotSerialized)
                {
                    Notify (LCDD, 0x86) // Device-Specific
                }

                Method (DWBL, 0, NotSerialized)
                {
                    Notify (LCDD, 0x87) // Device-Specific
                }

                Method (GCBL, 1, NotSerialized)
                {
                    Return (Zero)
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x07)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If ((ISPE == One))
                    {
                        NDID = One
                    }
                    Else
                    {
                        NDID = Zero
                    }

                    If ((DIDL != Zero))
                    {
                        DID1 = SDDL (DIDL)
                    }

                    If ((DDL2 != Zero))
                    {
                        DID2 = SDDL (DDL2)
                    }

                    If ((DDL3 != Zero))
                    {
                        DID3 = SDDL (DDL3)
                    }

                    If ((DDL4 != Zero))
                    {
                        DID4 = SDDL (DDL4)
                    }

                    If ((DDL5 != Zero))
                    {
                        DID5 = SDDL (DDL5)
                    }

                    If ((DDL6 != Zero))
                    {
                        DID6 = SDDL (DDL6)
                    }

                    If ((DDL7 != Zero))
                    {
                        DID7 = SDDL (DDL7)
                    }

                    If ((DDL8 != Zero))
                    {
                        DID8 = SDDL (DDL8)
                    }

                    If ((NDID == One))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP1 [Zero] = 0x000222B8
                        }
                        Else
                        {
                            TMP1 [Zero] = (0x00010000 | DID1)
                        }

                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP2 [Zero] = (0x00010000 | DID1)
                            TMP2 [One] = 0x000222B8
                        }
                        Else
                        {
                            TMP2 [Zero] = (0x00010000 | DID1)
                            TMP2 [One] = (0x00010000 | DID2)
                        }

                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP3 [Zero] = (0x00010000 | DID1)
                            TMP3 [One] = (0x00010000 | DID2)
                            TMP3 [0x02] = 0x000222B8
                        }
                        Else
                        {
                            TMP3 [Zero] = (0x00010000 | DID1)
                            TMP3 [One] = (0x00010000 | DID2)
                            TMP3 [0x02] = (0x00010000 | DID3)
                        }

                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP4 [Zero] = (0x00010000 | DID1)
                            TMP4 [One] = (0x00010000 | DID2)
                            TMP4 [0x02] = (0x00010000 | DID3)
                            TMP4 [0x03] = 0x000222B8
                        }
                        Else
                        {
                            TMP4 [Zero] = (0x00010000 | DID1)
                            TMP4 [One] = (0x00010000 | DID2)
                            TMP4 [0x02] = (0x00010000 | DID3)
                            TMP4 [0x03] = (0x00010000 | DID4)
                        }

                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    If ((NDID == 0x05))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP5 [Zero] = (0x00010000 | DID1)
                            TMP5 [One] = (0x00010000 | DID2)
                            TMP5 [0x02] = (0x00010000 | DID3)
                            TMP5 [0x03] = (0x00010000 | DID4)
                            TMP5 [0x04] = 0x000222B8
                        }
                        Else
                        {
                            TMP5 [Zero] = (0x00010000 | DID1)
                            TMP5 [One] = (0x00010000 | DID2)
                            TMP5 [0x02] = (0x00010000 | DID3)
                            TMP5 [0x03] = (0x00010000 | DID4)
                            TMP5 [0x04] = (0x00010000 | DID5)
                        }

                        Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                    }

                    If ((NDID == 0x06))
                    {
                        Name (TMP6, Package (0x06)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP6 [Zero] = (0x00010000 | DID1)
                            TMP6 [One] = (0x00010000 | DID2)
                            TMP6 [0x02] = (0x00010000 | DID3)
                            TMP6 [0x03] = (0x00010000 | DID4)
                            TMP6 [0x04] = (0x00010000 | DID5)
                            TMP6 [0x05] = 0x000222B8
                        }
                        Else
                        {
                            TMP6 [Zero] = (0x00010000 | DID1)
                            TMP6 [One] = (0x00010000 | DID2)
                            TMP6 [0x02] = (0x00010000 | DID3)
                            TMP6 [0x03] = (0x00010000 | DID4)
                            TMP6 [0x04] = (0x00010000 | DID5)
                            TMP6 [0x05] = (0x00010000 | DID6)
                        }

                        Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                    }

                    If ((NDID == 0x07))
                    {
                        Name (TMP7, Package (0x07)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP7 [Zero] = (0x00010000 | DID1)
                            TMP7 [One] = (0x00010000 | DID2)
                            TMP7 [0x02] = (0x00010000 | DID3)
                            TMP7 [0x03] = (0x00010000 | DID4)
                            TMP7 [0x04] = (0x00010000 | DID5)
                            TMP7 [0x05] = (0x00010000 | DID6)
                            TMP7 [0x06] = 0x000222B8
                        }
                        Else
                        {
                            TMP7 [Zero] = (0x00010000 | DID1)
                            TMP7 [One] = (0x00010000 | DID2)
                            TMP7 [0x02] = (0x00010000 | DID3)
                            TMP7 [0x03] = (0x00010000 | DID4)
                            TMP7 [0x04] = (0x00010000 | DID5)
                            TMP7 [0x05] = (0x00010000 | DID6)
                            TMP7 [0x06] = (0x00010000 | DID7)
                        }

                        Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                    }

                    If ((NDID > 0x07))
                    {
                        Name (TMP8, Package (0x08)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        If ((ISPE == One))
                        {
                            TMP8 [Zero] = (0x00010000 | DID1)
                            TMP8 [One] = (0x00010000 | DID2)
                            TMP8 [0x02] = (0x00010000 | DID3)
                            TMP8 [0x03] = (0x00010000 | DID4)
                            TMP8 [0x04] = (0x00010000 | DID5)
                            TMP8 [0x05] = (0x00010000 | DID6)
                            TMP8 [0x06] = (0x00010000 | DID7)
                            TMP8 [0x07] = 0x000222B8
                        }
                        Else
                        {
                            TMP8 [Zero] = (0x00010000 | DID1)
                            TMP8 [One] = (0x00010000 | DID2)
                            TMP8 [0x02] = (0x00010000 | DID3)
                            TMP8 [0x03] = (0x00010000 | DID4)
                            TMP8 [0x04] = (0x00010000 | DID5)
                            TMP8 [0x05] = (0x00010000 | DID6)
                            TMP8 [0x06] = (0x00010000 | DID7)
                            TMP8 [0x07] = (0x00010000 | DID8)
                        }

                        Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                    }

                    Return (Package (0x02)
                    {
                        0x0400, 
                        0x000222B8
                    })
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID1) == 0x0400))
                        {
                            EDPV = One
                            DIDX = DID1 /* \DID1 */
                            Return (One)
                        }

                        If ((DID1 == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID1))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID2) == 0x0400))
                        {
                            EDPV = 0x02
                            DIDX = DID2 /* \DID2 */
                            Return (0x02)
                        }

                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID2))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID3) == 0x0400))
                        {
                            EDPV = 0x03
                            DIDX = DID3 /* \DID3 */
                            Return (0x03)
                        }

                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID3))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID4) == 0x0400))
                        {
                            EDPV = 0x04
                            DIDX = DID4 /* \DID4 */
                            Return (0x04)
                        }

                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID4))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID5) == 0x0400))
                        {
                            EDPV = 0x05
                            DIDX = DID5 /* \DID5 */
                            Return (0x05)
                        }

                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID5))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID6) == 0x0400))
                        {
                            EDPV = 0x06
                            DIDX = DID6 /* \DID6 */
                            Return (0x06)
                        }

                        If ((DID6 == Zero))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID6))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID6))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD07)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID7) == 0x0400))
                        {
                            EDPV = 0x07
                            DIDX = DID7 /* \DID7 */
                            Return (0x07)
                        }

                        If ((DID7 == Zero))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID7))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID7))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID7))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD08)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID8) == 0x0400))
                        {
                            EDPV = 0x08
                            DIDX = DID8 /* \DID8 */
                            Return (0x08)
                        }

                        If ((DID8 == Zero))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID8))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID8))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID8))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (LCDD)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((EDPV == Zero))
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return ((0xFFFF & DIDX))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((EDPV == Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (CDDS (DIDX))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DIDX))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If ((OSFG >= OSW8))
                        {
                            PCW8 [Zero] = 0x64
                            PCW8 [One] = 0x28
                            Local0 = Zero
                            While ((Local0 < 0x65))
                            {
                                PCW8 [(Local0 + 0x02)] = Local0
                                Local0++
                            }

                            Return (PCW8) /* \_SB_.PCI0.GFX0.PCW8 */
                        }

                        Return (PCTG) /* \_SB_.PCI0.GFX0.PCTG */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                        {
                            AINT (One, Arg0)
                            BRTL = Arg0
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (BRTL) /* \BRTL */
                    }
                }

                Method (SDDL, 1, NotSerialized)
                {
                    NDID++
                    Local0 = (Arg0 & 0x0F0F)
                    Local1 = (0x80000000 | Local0)
                    If ((DIDL == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL2 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL3 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL4 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL5 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL6 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL7 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL8 == Local0))
                    {
                        Return (Local1)
                    }

                    Return (Zero)
                }

                Method (CDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (0x1D)
                    }

                    If ((CADL == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL2 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL3 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL4 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL5 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL6 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL7 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL8 == Local0))
                    {
                        Return (0x1F)
                    }

                    Return (0x1D)
                }

                Method (NDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (Zero)
                    }

                    If ((NADL == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL2 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL3 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL4 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL5 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL6 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL7 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL8 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                OperationRegion (IGDP, PCI_Config, Zero, 0x0100)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    GVID,   32, 
                    Offset (0x10), 
                    MADR,   32, 
                    Offset (0x50), 
                        ,   1, 
                    GIVD,   1, 
                        ,   1, 
                    GUMA,   5, 
                    Offset (0x52), 
                    Offset (0x54), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x58), 
                    Offset (0x5C), 
                    GSTM,   32, 
                    Offset (0xE0), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xE4), 
                    ASLE,   8, 
                    Offset (0xE8), 
                    Offset (0xFC), 
                    ASLS,   32
                }

                Method (GTTM, 0, Serialized)
                {
                    If ((GVID == 0xFFFFFFFF))
                    {
                        Return (ABTR) /* \ABTR */
                    }
                    Else
                    {
                        Return (MADR) /* \_SB_.PCI0.GFX0.MADR */
                    }
                }

                OperationRegion (IGMM, SystemMemory, GTTM (), 0x3000)
                Field (IGMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x20C8), 
                        ,   4, 
                    DCFE,   4
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CAD1,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    Zero, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x06)
                {
                    Package (0x01)
                    {
                        0xA0
                    }, 

                    Package (0x01)
                    {
                        0xC8
                    }, 

                    Package (0x01)
                    {
                        0x010B
                    }, 

                    Package (0x01)
                    {
                        0x0140
                    }, 

                    Package (0x01)
                    {
                        0x0164
                    }, 

                    Package (0x01)
                    {
                        0x0190
                    }
                })
                Name (SUCC, One)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x0279
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            PARM = 0x0240
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM &= 0xEFFF0000
                            PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                            PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM = IPSC /* \IPSC */
                            PARM |= (IPAT << 0x08)
                            PARM += 0x0100
                            PARM |= (LIDS << 0x10)
                            PARM += 0x00010000
                            PARM |= (IBLC << 0x12)
                            PARM |= (IBIA << 0x14)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            PARM = ITVF /* \ITVF */
                            PARM |= (ITVM << 0x04)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= One
                            PARM |= (GMFN << One)
                            PARM |= 0x1800
                            PARM |= (IDMS << 0x11)
                            PARM |= (DerefOf (CDCT [DCFE]) << 0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = Zero
                            If (ISSC)
                            {
                                PARM |= 0x03
                            }

                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = Zero
                            If ((PFLV == FMBL))
                            {
                                PARM = 0x000F87FD
                            }

                            If ((PFLV == FDTP))
                            {
                                PARM = 0x000F87BD
                            }

                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            ITVF = (PARM & 0x0F)
                            ITVM = ((PARM & 0xF0) >> 0x04)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            If ((PARM == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            IBTT = (PARM & 0xFF)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            IPSC = (PARM & 0xFF)
                            If (((PARM >> 0x08) & 0xFF))
                            {
                                IPAT = ((PARM >> 0x08) & 0xFF)
                                IPAT--
                            }

                            IBLC = ((PARM >> 0x12) & 0x03)
                            IBIA = ((PARM >> 0x14) & 0x07)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            IF1E = ((PARM >> One) & One)
                            IDMS = ((PARM >> 0x11) & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = (LIDS << 0x08)
                            PARM += 0x0100
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            If ((PARM & One))
                            {
                                If (((PARM >> One) == One))
                                {
                                    ISSC = One
                                }
                                Else
                                {
                                    GESF = Zero
                                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                                }
                            }
                            Else
                            {
                                ISSC = Zero
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            PAVP = (PARM & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GVID != 0xFFFFFFFF))
                    {
                        If ((GEFC == 0x04))
                        {
                            GXFC = GBDA ()
                        }

                        If ((GEFC == 0x06))
                        {
                            GXFC = SBCB ()
                        }

                        GEFC = Zero
                        GSSE = Zero
                        SCIE = Zero
                    }

                    SCIS = One
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (One)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == Zero) && (Arg1 == Zero)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (GFX0, Arg1)
                        }
                    }

                    Notify (GFX0, 0x80) // Status Change
                    Return (Zero)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (One, Zero))
                }

                Method (GLID, 1, NotSerialized)
                {
                    CLID = Arg0
                    Return (GNOT (0x02, Zero))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, Zero))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (One << Arg0)))
                    {
                        Return (One)
                    }

                    If (PARD ())
                    {
                        Return (One)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == One))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                ElseIf ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = One
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                ElseIf ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                ElseIf ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    ElseIf ((Arg0 == One))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    ElseIf ((Arg0 == Zero))
                    {
                        ALSI = Arg1
                        ASLC = One
                    }
                    Else
                    {
                        Return (One)
                    }

                    ASLE = One
                    Return (Zero)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != Zero))
                    {
                        Return (!GSMI)
                    }

                    Return (Zero)
                }

                Device (ISP0)
                {
                    Name (_ADR, 0x22B8)  // _ADR: Address
                    Name (_DDN, "CHV ISP - 808622B8")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ISPA != Zero) && (ISPD == One)))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (SBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00400000,         // Address Length
                            _Y03)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (SBUF, \_SB.PCI0.GFX0.ISP0._Y03._BAS, B0BA)  // _BAS: Base Address
                        B0BA = ISPA /* \ISPA */
                        Return (SBUF) /* \_SB_.PCI0.GFX0.ISP0.SBUF */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == One))
                        {
                            Return (One)
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (ILBR, SystemMemory, IBAS, 0x8C)
                    Field (ILBR, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x08), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8, 
                        Offset (0x14), 
                        ULKM,   8, 
                        Offset (0x88), 
                            ,   4, 
                        UI4E,   1
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA) /* \_SB_.PRSA */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB) /* \_SB_.PRSB */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC) /* \_SB_.PRSC */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD) /* \_SB_.PRSD */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE) /* \_SB_.PRSE */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF) /* \_SB_.PRSF */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG) /* \_SB_.PRSG */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH) /* \_SB_.PRSH */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, Zero, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SRID,   8, 
                    Offset (0x80), 
                    C1EN,   1, 
                    Offset (0x84)
                }

                Scope (\_SB.PCI0.SBRG)
                {
                    Device (H_EC)
                    {
                        Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ECON = Zero
                            ^^^GFX0.CLID = 0x03
                            Return (Zero)
                        }

                        Name (B1CC, Zero)
                        Name (B1ST, Zero)
                        Name (B2CC, Zero)
                        Name (B2ST, Zero)
                        Name (RPWR, Zero)
                        Name (LIDS, One)
                        Name (LSTE, One)
                        Name (VPWR, Zero)
                        Name (S3WR, Zero)
                        Name (TMPR, Zero)
                        Name (LTMP, Zero)
                        Name (FNSL, Zero)
                        Name (FDCY, Zero)
                        Name (ECAV, Zero)
                        Name (TSSR, Zero)
                        Method (ECMD, 1, Serialized)
                        {
                            Return (0xFF)
                        }

                        Device (BAT0)
                        {
                            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                            Name (_UID, Zero)  // _UID: Unique ID
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (Zero)
                            }
                        }

                        Device (BAT1)
                        {
                            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                            Name (_UID, One)  // _UID: Unique ID
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (Zero)
                            }

                            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                            {
                                Name (PKG1, Package (0x04)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Return (PKG1) /* \_SB_.PCI0.SBRG.H_EC.BAT1._BST.PKG1 */
                            }
                        }

                        Device (BAT2)
                        {
                            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                            Name (_UID, 0x02)  // _UID: Unique ID
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (Zero)
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (Zero)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Return (One)
                        }
                    }
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                OperationRegion (PKBS, SystemIO, 0x60, 0x05)
                Field (PKBS, ByteAcc, Lock, Preserve)
                {
                    PKBD,   8, 
                    Offset (0x02), 
                    Offset (0x03), 
                    Offset (0x04), 
                    PKBC,   8
                }
            }

            Device (D005)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (D006)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
            }

            Device (D007)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (D008)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
            }

            Device (D009)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (D00A)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
            }

            Device (SATA)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
            }

            Device (XHC1)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (D00D)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
            }

            Device (XHC2)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (D00F)
            {
                Name (_ADR, 0x00180000)  // _ADR: Address
            }

            Device (D010)
            {
                Name (_ADR, 0x00180002)  // _ADR: Address
            }

            Device (D011)
            {
                Name (_ADR, 0x00180003)  // _ADR: Address
            }

            Device (D012)
            {
                Name (_ADR, 0x00180001)  // _ADR: Address
            }

            Device (D013)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }

            Device (D015)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
            }

            Device (D016)
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
            }

            Device (D017)
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
            }

            Device (D018)
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
                Field (SMPB, DWordAcc, NoLock, Preserve)
                {
                        ,   5, 
                    SBAR,   11
                }

                OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (SSXB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRXB, 1, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCON = 0x44
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRW, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT1 = (Arg2 & 0xFF)
                    DAT0 = ((Arg2 >> 0x08) & 0xFF)
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRDW, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (((DAT0 << 0x08) | DAT1))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (SBLW, 4, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Arg3
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = SizeOf (Arg2)
                    Local1 = Zero
                    HBDR = DerefOf (Arg2 [Zero])
                    HCON = 0x54
                    While ((SizeOf (Arg2) > Local1))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        HSTS = 0x80
                        Local1++
                        If ((SizeOf (Arg2) > Local1))
                        {
                            HBDR = DerefOf (Arg2 [Local1])
                        }
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SBLR, 3, Serialized)
                {
                    Name (TBUF, Buffer (0x0100) {})
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Arg2
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x54
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                    HSTS = 0x80
                    Local1 = One
                    While ((Local1 < DerefOf (TBUF [Zero])))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                        HSTS = 0x80
                        Local1++
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                    }

                    Return (Zero)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (One)
                            If ((Local0 == Zero))
                            {
                                Return (One)
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & One))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == Zero))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (One)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == Zero))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PPTS (Arg0)
            PPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        PWAK (Arg0)
        PMED ()
        \_SB.PWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (\)
    {
        OperationRegion (PMIO, SystemIO, PMBS, 0x46)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PWBS,   1, 
            Offset (0x20), 
                ,   13, 
            PMEB,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
                ,   4, 
            PSCI,   1, 
            SCIS,   1, 
                ,   17, 
            GP23,   1
        }

        OperationRegion (PMCR, SystemMemory, PMCB, 0x0100)
        Field (PMCR, DWordAcc, Lock, Preserve)
        {
            Offset (0x34), 
            L10D,   1, 
            L11D,   1, 
            L12D,   1, 
            L13D,   1, 
            L14D,   1, 
            L15D,   1, 
            L16D,   1, 
            L17D,   1, 
            SD1D,   1, 
            SD2D,   1, 
            SD3D,   1, 
                ,   1, 
                ,   1, 
            LPED,   1, 
            OTGD,   1, 
            Offset (0x36), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            L20D,   1, 
            L21D,   1, 
            L22D,   1, 
            L23D,   1, 
            L24D,   1, 
            L25D,   1, 
            L26D,   1, 
            L27D,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            ISHD,   1, 
            Offset (0x3C), 
            Offset (0x60), 
            CKC0,   2, 
            CKF0,   1, 
            Offset (0x64), 
            CKC1,   2, 
            CKF1,   1, 
            Offset (0x68), 
            CKC2,   2, 
            CKF2,   1, 
            Offset (0x6C), 
            CKC3,   2, 
            CKF3,   1, 
            Offset (0x70), 
            CKC4,   2, 
            CKF4,   1, 
            Offset (0x74), 
            CKC5,   2, 
            CKF5,   1, 
            Offset (0x78), 
            Offset (0xA0), 
            PMCD,   32, 
            Offset (0xC0), 
                ,   14, 
            XPME,   1, 
            Offset (0xEC), 
            PMCC,   32
        }

        OperationRegion (PPSC, SystemMemory, (PMCB + 0xA0), 0x08)
        Field (PPSC, DWordAcc, Lock, Preserve)
        {
            DM1P,   1, 
            PW1P,   1, 
            PW2P,   1, 
            UR1P,   1, 
            UR2P,   1, 
            SP1P,   1, 
            SP2P,   1, 
            SP3P,   1, 
            EMMP,   1, 
            SDI1,   1, 
            SDI2,   1, 
                ,   2, 
            LPEP,   1, 
                ,   1, 
            Offset (0x02), 
                ,   1, 
            SATP,   1, 
            USBP,   1, 
            SECP,   1, 
            PRP1,   1, 
            PRP2,   1, 
            PRP3,   1, 
            PRP4,   1, 
            DM2P,   1, 
            IC1P,   1, 
            IC2P,   1, 
            IC3P,   1, 
            IC4P,   1, 
            IC5P,   1, 
            IC6P,   1, 
            IC7P,   1, 
                ,   2, 
            ISHP,   1, 
            Offset (0x08)
        }
    }

    Scope (_SB.PCI0)
    {
        Scope (SATA)
        {
            OperationRegion (SATR, PCI_Config, 0x74, 0x04)
            Field (SATR, WordAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }
        }

        Scope (\_SB)
        {
            PowerResource (USBC, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }
            }
        }

        Scope (XHC1)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x04
            })
            Name (_S3D, 0x02)  // _S3D: S3 Device State
            Name (_S4D, 0x02)  // _S4D: S4 Device State
            Name (XFLT, Zero)
            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PMEB = One
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("ac340cb7-e901-45bf-b7e6-2b34ec931e23") /* Unknown UUID */))
                {
                    If ((Arg1 == 0x03))
                    {
                        XFLT = Arg1
                    }
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (_OSI ("Android"))
                {
                    Return (0x03)
                }

                If ((XFLT == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            OperationRegion (USBR, PCI_Config, Zero, 0x98)
            Field (USBR, WordAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   32, 
                Offset (0x74), 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (Package (0x01)
                {
                    USBC
                })
            }
        }

        Device (SDHA)
        {
            Name (_HID, "80860F14" /* Intel Baytrail SDIO/MMC Host Controller */)  // _HID: Hardware ID
            Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
            Name (_DDN, "Intel(R) eMMC Controller - 80862294")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y04)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000002D,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.SDHA._Y04._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.SDHA._Y04._LEN, B0LN)  // _LEN: Length
                B0BA = EM0A /* \EM0A */
                B0LN = EM0L /* \EM0L */
                Return (RBUF) /* \_SB_.PCI0.SDHA.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((EM0A == Zero) || (SD1D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, EM1A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Device (EMMD)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (PEMC)
        {
            Name (_ADR, 0x00100000)  // _ADR: Address
            OperationRegion (SDIO, PCI_Config, 0x84, 0x04)
            Field (SDIO, WordAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((EM0A == Zero) && (SD1D == Zero)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Device (CARD)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (SDHB)
        {
            Name (_ADR, 0x00110000)  // _ADR: Address
            Name (_HID, "INT33BB" /* Intel Baytrail SD Host Controller */)  // _HID: Hardware ID
            Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
            Name (_DDN, "Intel(R) SDIO Controller - 80862295")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_HRV, 0x02)  // _HRV: Hardware Revision
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                GPO1
            })
            Name (PSTS, Zero)
            Name (ABUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y05)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000002E,
                }
                GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0005
                    }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (ABUF, \_SB.PCI0.SDHB._Y05._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (ABUF, \_SB.PCI0.SDHB._Y05._LEN, B0LN)  // _LEN: Length
                B0BA = SI0A /* \SI0A */
                B0LN = SI0L /* \SI0L */
                Return (ABUF) /* \_SB_.PCI0.SDHB.ABUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((SI0A == Zero) || (SD2D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
                If ((PSTS == Zero))
                {
                    If ((^^^GPO1.AVBL == One))
                    {
                        ^^^GPO1.CWLE = One
                    }

                    PSTS = One
                }
            }

            OperationRegion (KEYS, SystemMemory, SI1A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (BRCM)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    GPO1
                })
                Name (_HID, "BCM43241")  // _HID: Hardware ID
                Name (_CID, "BCM43241")  // _CID: Compatible ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((WIFD == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    Zero, 
                    Zero
                })
                Name (_S4W, 0x02)  // _S4W: S4 Device Wake State
                Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Edge, ActiveHigh, ExclusiveAndWake, ,, )
                        {
                            0x00000035,
                        }
                        GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0015
                            }
                        GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0005
                            }
                    })
                    Return (RBUF) /* \_SB_.PCI0.SDHB.BRCM._CRS.RBUF */
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    If ((^^^^GPO1.AVBL == One))
                    {
                        ^^^^GPO1.CWLE = Zero
                    }

                    PSTS = Zero
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    If ((PSTS == Zero))
                    {
                        If ((^^^^GPO1.AVBL == One))
                        {
                            ^^^^GPO1.CWLE = One
                        }

                        PSTS = One
                    }
                }
            }

            Device (BRC1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    GPO1
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((WIFD == Zero))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    Zero, 
                    Zero
                })
                Name (_S4W, 0x02)  // _S4W: S4 Device Wake State
                Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Edge, ActiveHigh, ExclusiveAndWake, ,, )
                        {
                            0x00000035,
                        }
                    })
                    Return (RBUF) /* \_SB_.PCI0.SDHB.BRC1._CRS.RBUF */
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    If ((^^^^GPO1.AVBL == One))
                    {
                        ^^^^GPO1.CWLE = Zero
                    }

                    PSTS = Zero
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    If ((PSTS == Zero))
                    {
                        If ((^^^^GPO1.AVBL == One))
                        {
                            ^^^^GPO1.CWLE = One
                        }

                        PSTS = One
                    }
                }
            }

            Device (BRC2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (NAM, Buffer (0x14)
                    {
                        "\\_SB.PCI0.SDHB.BRC1"
                    })
                    Name (SPB, Buffer (0x0C)
                    {
                        /* 0000 */  0x8E, 0x1D, 0x00, 0x01, 0x00, 0xC0, 0x02, 0x00,  // ........
                        /* 0008 */  0x00, 0x01, 0x00, 0x00                           // ....
                    })
                    Name (END, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Concatenate (SPB, NAM, Local0)
                    Concatenate (Local0, END, Local1)
                    Return (Local1)
                }
            }
        }

        Device (SDHC)
        {
            Name (_ADR, 0x00120000)  // _ADR: Address
            Name (_HID, "80860F14" /* Intel Baytrail SDIO/MMC Host Controller */)  // _HID: Hardware ID
            Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
            Name (_HRV, One)  // _HRV: Hardware Revision
            Name (_DDN, "Intel(R) SD Card Controller - 80862296")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (ABUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y06)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000002F,
                }
                GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x2710,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0051
                    }
                GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0051
                    }
                GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0055
                    }
                GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x004E
                    }
            })
            Name (WBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y07)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000002F,
                }
                GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x2710,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0051
                    }
                GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0051
                    }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (ABUF, \_SB.PCI0.SDHC._Y06._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (ABUF, \_SB.PCI0.SDHC._Y06._LEN, B0LN)  // _LEN: Length
                B0BA = SD0A /* \SD0A */
                B0LN = SD0L /* \SD0L */
                CreateDWordField (WBUF, \_SB.PCI0.SDHC._Y07._BAS, B01A)  // _BAS: Base Address
                CreateDWordField (WBUF, \_SB.PCI0.SDHC._Y07._LEN, B01N)  // _LEN: Length
                B01A = SD0A /* \SD0A */
                B01N = SD0L /* \SD0L */
                If ((OSID == 0x02))
                {
                    Return (ABUF) /* \_SB_.PCI0.SDHC.ABUF */
                }

                Return (WBUF) /* \_SB_.PCI0.SDHC.WBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((SD0A == Zero) || (SD3D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
                Sleep (0x03E8)
            }

            OperationRegion (KEYS, SystemMemory, SD1A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                {
                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x04)
                            {
                                 0x1F, 0x00, 0x00, 0x00                           // ....
                            })
                        }

                        If ((Arg2 == One))
                        {
                            Sleep (0x05)
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x02)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Sleep (VS18)
                            Return (0x03)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Sleep (VD33)
                            Return (0x04)
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Return (Zero)
                }
            }
        }

        Device (GDM1)
        {
            Name (_HID, "INTL9C60" /* Intel Baytrail SOC DMA Controller */)  // _HID: Hardware ID
            Name (_DDN, "Intel(R) DMA Controller #1 - INTL9C60")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y08)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000002A,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.GDM1._Y08._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GDM1._Y08._LEN, B0LN)  // _LEN: Length
                B0BA = D10A /* \D10A */
                B0LN = D10L /* \D10L */
                Return (RBUF) /* \_SB_.PCI0.GDM1.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((D10A == Zero) || (L10D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If ((DM1P == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }
        }

        Device (GDM3)
        {
            Name (_HID, "INTL9C60" /* Intel Baytrail SOC DMA Controller */)  // _HID: Hardware ID
            Name (_DDN, "Intel(R) DMA Controller #2 - INTL9C60")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y09)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000002B,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.GDM3._Y09._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GDM3._Y09._LEN, B0LN)  // _LEN: Length
                B0BA = D20A /* \D20A */
                B0LN = D20L /* \D20L */
                Return (RBUF) /* \_SB_.PCI0.GDM3.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((D20A == Zero) || (L20D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If ((DM2P == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }
        }

        Device (PWM1)
        {
            Name (_HID, "80862288")  // _HID: Hardware ID
            Name (_CID, "80862288")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) PWM Controller #1 - 80862288")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y0A)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.PWM1._Y0A._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.PWM1._Y0A._LEN, B0LN)  // _LEN: Length
                B0BA = P10A /* \P10A */
                B0LN = P10L /* \P10L */
                Return (RBUF) /* \_SB_.PCI0.PWM1.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((P10A == Zero) || (L11D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, P11A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }
        }

        Device (PWM2)
        {
            Name (_HID, "80862288")  // _HID: Hardware ID
            Name (_CID, "80862288")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) PWM Controller #2 - 80862289")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y0B)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.PWM2._Y0B._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.PWM2._Y0B._LEN, B0LN)  // _LEN: Length
                B0BA = P20A /* \P20A */
                B0LN = P20L /* \P20L */
                Return (RBUF) /* \_SB_.PCI0.PWM2.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((P20A == Zero) || (L12D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, P21A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }
        }

        Device (URT1)
        {
            Name (_HID, "8086228A")  // _HID: Hardware ID
            Name (_CID, "8086228A")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) HS-UART Controller #1 - 8086228A")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y0C)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000027,
                }
                FixedDMA (0x0002, 0x0002, Width32bit, )
                FixedDMA (0x0003, 0x0003, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.URT1._Y0C._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.URT1._Y0C._LEN, B0LN)  // _LEN: Length
                B0BA = U10A /* \U10A */
                B0LN = U10L /* \U10L */
                Return (RBUF) /* \_SB_.PCI0.URT1.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((U10A == Zero) || (L13D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, U11A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (BTH0)
            {
                Name (_HID, "BCM2E1A")  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((_OSI ("Android") & (BDID != CHRB)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (UBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xFC, LittleEndian, ParityTypeNone, FlowControlNone,
                            0x0020, 0x0020, "\\_SB.PCIO.URT1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x003E
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0040
                            }
                        GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x003C
                            }
                    })
                    Return (UBUF) /* \_SB_.PCI0.URT1.BTH0._CRS.UBUF */
                }
            }

            Device (BTH1)
            {
                Name (_HID, "BCM2E64")  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((_OSI ("Android") | (BDID == CHRB)))
                    {
                        Return (Zero)
                    }

                    Return (0x0F)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xFC, LittleEndian, ParityTypeNone, FlowControlNone,
                            0x0020, 0x0020, "\\_SB.PCI0.URT1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x003C
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x003E
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0040
                            }
                    })
                    Return (BBUF) /* \_SB_.PCI0.URT1.BTH1._CRS.BBUF */
                }
            }
        }

        Device (URT2)
        {
            Name (_HID, "8086228A")  // _HID: Hardware ID
            Name (_CID, "8086228A")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) HS-UART Controller #2 - 8086228C")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y0D)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000028,
                }
                FixedDMA (0x0004, 0x0004, Width32bit, )
                FixedDMA (0x0005, 0x0005, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.URT2._Y0D._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.URT2._Y0D._LEN, B0LN)  // _LEN: Length
                B0BA = U20A /* \U20A */
                B0LN = U20L /* \U20L */
                Return (RBUF) /* \_SB_.PCI0.URT2.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((U20A == Zero) || (L14D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, U21A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (GPS0)
            {
                Name (_HID, "BCM4752")  // _HID: Hardware ID
                Name (_HRV, Zero)  // _HRV: Hardware Revision
                Name (UART, One)
                Name (ENAB, Zero)
                Name (HSTW, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((_OSI ("Android") & (BDID != CHRB)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (UBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xFC, LittleEndian, ParityTypeNone, FlowControlHardware,
                            0x0020, 0x0020, "\\_SB.PCI0.URT2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0007
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xFC, LittleEndian, ParityTypeNone, FlowControlHardware,
                            0x0020, 0x0020, "\\_SB.PCI0.URT2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0007
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                    })
                    If ((BDID == CRRB))
                    {
                        Return (RBUF) /* \_SB_.PCI0.URT2.GPS0._CRS.RBUF */
                    }

                    Return (UBUF) /* \_SB_.PCI0.URT2.GPS0._CRS.UBUF */
                }
            }

            Device (GPS1)
            {
                Name (_HID, "BCM4752")  // _HID: Hardware ID
                Name (_HRV, One)  // _HRV: Hardware Revision
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((_OSI ("Android") | (BDID == CHRB)))
                    {
                        Return (Zero)
                    }

                    Return (0x0F)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xFC, LittleEndian, ParityTypeNone, FlowControlHardware,
                            0x0020, 0x0020, "\\_SB.PCI0.URT2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                    })
                    Name (CBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xFC, LittleEndian, ParityTypeNone, FlowControlHardware,
                            0x0020, 0x0020, "\\_SB.PCI0.URT2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                    })
                    If ((BDID == CRRB))
                    {
                        Return (CBUF) /* \_SB_.PCI0.URT2.GPS1._CRS.CBUF */
                    }

                    Return (BBUF) /* \_SB_.PCI0.URT2.GPS1._CRS.BBUF */
                }
            }
        }

        Device (SPI1)
        {
            Name (_HID, "8086228E")  // _HID: Hardware ID
            Name (_CID, "8086228E")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) SPI Controller #1 - 8086228E")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y0E)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000029,
                }
                FixedDMA (0x0000, 0x0000, Width32bit, )
                FixedDMA (0x0001, 0x0001, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.SPI1._Y0E._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.SPI1._Y0E._LEN, B0LN)  // _LEN: Length
                B0BA = SP0A /* \SP0A */
                B0LN = SP0L /* \SP0L */
                Return (RBUF) /* \_SB_.PCI0.SPI1.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((SP0A == Zero) || (L15D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, SP1A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (FPNT)
            {
                Name (_HID, "AUTH2750" /* AuthenTec AES2750 */)  // _HID: Hardware ID
                Name (_DDN, "AuthenTec AES2750")  // _DDN: DOS Device Name
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (UBUF, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0001, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x007A1200, ClockPolarityLow,
                            ClockPhaseSecond, "\\_SB.PCI0.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, )
                        {
                            0x00000048,
                        }
                    })
                    Return (UBUF) /* \_SB_.PCI0.SPI1.FPNT._CRS.UBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }
        }

        Device (SPI2)
        {
            Name (_HID, "8086228E")  // _HID: Hardware ID
            Name (_CID, "8086228E")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) SPI Controller #2 - 80862290")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y0F)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000059,
                }
                FixedDMA (0x0006, 0x0006, Width32bit, )
                FixedDMA (0x0007, 0x0007, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.SPI2._Y0F._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.SPI2._Y0F._LEN, B0LN)  // _LEN: Length
                B0BA = S20A /* \S20A */
                B0LN = S20L /* \S20L */
                Return (RBUF) /* \_SB_.PCI0.SPI2.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((S20A == Zero) || (L16D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, S21A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }
        }

        Device (SPI3)
        {
            Name (_HID, "8086228E")  // _HID: Hardware ID
            Name (_CID, "8086228E")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) SPI Controller #3 - 808622AC")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y10)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000005A,
                }
                FixedDMA (0x0008, 0x0008, Width32bit, )
                FixedDMA (0x0009, 0x0009, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.SPI3._Y10._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.SPI3._Y10._LEN, B0LN)  // _LEN: Length
                B0BA = S30A /* \S30A */
                B0LN = S30L /* \S30L */
                Return (RBUF) /* \_SB_.PCI0.SPI3.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((S30A == Zero) || (L16D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, S31A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }
        }

        Device (NFC2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "NXP1002")  // _HID: Hardware ID
            Name (_CID, "NXP1002")  // _CID: Compatible ID
            Name (_DDN, "NXP NFC")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((NFCS == 0x02))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Method (CDSM, 5, Serialized)
        {
            If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }
                ElseIf ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Device (I2C1)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #1 - 808622C1")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000020,
                }
                FixedDMA (0x0010, 0x0000, Width32bit, )
                FixedDMA (0x0011, 0x0001, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C1._Y11._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C1._Y11._LEN, B0LN)  // _LEN: Length
                B0BA = I10A /* \I10A */
                B0LN = I10L /* \I10L */
                Return (RBUF) /* \_SB_.PCI0.I2C1.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I10A == Zero) || (L21D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I0D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I0D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I11A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (SHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "SMO91D0" /* Sensor Hub */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_DDN, "STM32F103RD")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    GPO2
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (CDSM (Arg0, Arg1, Arg2, Arg3, One))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((BDID == CHRB))
                    {
                        Return (Zero)
                    }

                    Return (0x0F)
                }

                OperationRegion (GPM2, SystemMemory, (GBA2 | 0x4820), 0x04)
                Field (GPM2, DWordAcc, Lock, Preserve)
                {
                        ,   1, 
                    SHD3,   1
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (_OSI ("Android"))
                    {
                        If ((^^^^GPO2.AVBL == One))
                        {
                            ^^^^GPO2.SHD3 = Zero
                        }
                    }
                    Else
                    {
                        SHD3 = Zero
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (_OSI ("Android"))
                    {
                        If ((^^^^GPO2.AVBL == One))
                        {
                            ^^^^GPO2.SHD3 = One
                        }
                    }
                    Else
                    {
                        SHD3 = One
                    }

                    Sleep (0x64)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0040, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                            "\\_SB.GPO2", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0016
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO2", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0013
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO2", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0010
                            }
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C1.SHUB._CRS.SBUF */
                }
            }
        }

        Device (I2C2)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #2 - 808622C2")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y12)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000021,
                }
                FixedDMA (0x0012, 0x0002, Width32bit, )
                FixedDMA (0x0013, 0x0003, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C2._Y12._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C2._Y12._LEN, B0LN)  // _LEN: Length
                B0BA = I20A /* \I20A */
                B0LN = I20L /* \I20L */
                Return (RBUF) /* \_SB_.PCI0.I2C2.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I20A == Zero) || (L22D == One)))
                {
                    Return (Zero)
                }

                If ((BDID == CRRB))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I1D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I1D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I21A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (RTEK)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "10EC5670")  // _HID: Hardware ID
                Name (_CID, "10EC5670")  // _CID: Compatible ID
                Name (_DDN, "RTEK Codec Controller ")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x001C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x004D
                            }
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C2.RTEK._CRS.SBUF */
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    CKC3 = Zero
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    CKC3 = One
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((LPES == 0x02))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }

            Device (IMP2)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "IMPJ0002")  // _HID: Hardware ID
                Name (_CID, "IMPJ0002")  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x006F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C2.IMP2._CRS.SBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((PSDE == One) & (BDID != CHRB)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }

            Device (IMP3)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "IMPJ0003")  // _HID: Hardware ID
                Name (_CID, "IMPJ0003")  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x006E, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C2.IMP3._CRS.SBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((PSDE == 0x02) & (BDID != CHRB)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Device (I2C3)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #3 - 808622C3")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y13)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000022,
                }
                FixedDMA (0x0014, 0x0004, Width32bit, )
                FixedDMA (0x0015, 0x0005, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C3._Y13._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C3._Y13._LEN, B0LN)  // _LEN: Length
                B0BA = I30A /* \I30A */
                B0LN = I30L /* \I30L */
                Return (RBUF) /* \_SB_.PCI0.I2C3.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I30A == Zero) || (L23D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I2D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I2D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I31A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            PowerResource (CLK0, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (CKC0) /* \CKC0 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    CKC0 = One
                    Sleep (0x05)
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    CKC0 = 0x02
                }
            }

            Device (CAMD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "INT33F7")  // _HID: Hardware ID
                Name (_CID, "INT33F7")  // _CID: Compatible ID
                Name (_SUB, "INTL0000")  // _SUB: Subsystem ID
                Name (_DDN, "OV2724")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    CLK0
                })
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x61, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // a.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDB) /* \_SB_.PCI0.I2C3.CAMD.PLDB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((CAMS == One) && (RCAM == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0035
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x002E
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0034
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0030
                            }
                        I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C3.CAMD._CRS.SBUF */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                    {
                        Return ("INT33F7")
                    }

                    If ((Arg0 == ToUUID ("3c62aaaa-d8e0-401a-84c3-fc05656fa28c") /* Unknown UUID */))
                    {
                        Return ("OV2724")
                    }

                    If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                    {
                        Return ("3SF201T2")
                    }

                    If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                    {
                        Return ("BSW_ITL_RVP")
                    }

                    If ((Arg0 == ToUUID ("ea3b7bd8-e09b-4239-ad6e-ed525f3f26ab") /* Unknown UUID */))
                    {
                        If ((BDID == CRRB))
                        {
                            Return (0x1011)
                        }

                        Return (0x1021)
                    }

                    If ((Arg0 == ToUUID ("b65ac492-9e30-4d60-b5b2-f497c790d9cf") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("e770ab0f-2644-4bab-8628-d62f1683fb9d") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("1ea54ab2-cd84-48cc-9dd4-7f594ec3b015") /* Unknown UUID */))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 == ToUUID ("75c9a639-5c8a-4a00-9f48-a9c3b5da789f") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("2fa9bb94-9c5d-4aeb-8e6e-27434f81e3d3") /* Unknown UUID */))
                    {
                        Return ("BSW")
                    }

                    If ((Arg0 == ToUUID ("647a6ca2-8b29-49ac-8806-d58b3d2d3ef5") /* Unknown UUID */))
                    {
                        Return ("FFD")
                    }

                    If ((Arg0 == ToUUID ("a6e922a1-f7b3-4399-b56a-406ae416843b") /* Unknown UUID */))
                    {
                        Return ("BSW")
                    }

                    If ((Arg0 == ToUUID ("5960313b-0ab0-4940-8840-2cafa420c015") /* Unknown UUID */))
                    {
                        Return ("INTEL")
                    }

                    If ((Arg0 == ToUUID ("f486d39f-d657-484b-84a6-42a565712b92") /* Unknown UUID */))
                    {
                        If ((BDID == CRRB))
                        {
                            Return (Buffer (0x20)
                            {
                                /* 0000 */  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x07, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            })
                        }

                        Return (Buffer (0x20)
                        {
                            /* 0000 */  0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x07, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        })
                    }

                    If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x02003600)
                        }
                    }

                    If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x04)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01003507)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01002E08)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x01003400)
                        }

                        If ((Arg2 == 0x05))
                        {
                            Return (0x01003001)
                        }
                    }

                    Return (Zero)
                }
            }
        }

        Device (I2C4)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #4 - 808622C4")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000023,
                }
                FixedDMA (0x0016, 0x0006, Width32bit, )
                FixedDMA (0x0017, 0x0007, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C4._Y14._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C4._Y14._LEN, B0LN)  // _LEN: Length
                B0BA = I40A /* \I40A */
                B0LN = I40L /* \I40L */
                Return (RBUF) /* \_SB_.PCI0.I2C4.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I40A == Zero) || (L24D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I3D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I3D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I41A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            PowerResource (CLK0, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (CKC0) /* \CKC0 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    CKC0 = One
                    Sleep (0x05)
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    CKC0 = 0x02
                }
            }

            PowerResource (CLK1, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (CKC1) /* \CKC1 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    CKC1 = One
                    Sleep (0x05)
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    CKC1 = 0x02
                }
            }

            Device (CAM1)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "INTCF1A" /* Sony IMX175 Camera Sensor */)  // _HID: Hardware ID
                Name (_CID, "INTCF1A" /* Sony IMX175 Camera Sensor */)  // _CID: Compatible ID
                Name (_SUB, "INTL0000")  // _SUB: Subsystem ID
                Name (_DDN, "Sony IMX175")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    CLK0
                })
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDB) /* \_SB_.PCI0.I2C4.CAM1.PLDB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((CAMS == One) && (RCAM == Zero)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0034
                            }
                        I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x000C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0054, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C4.CAM1._CRS.SBUF */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                    {
                        Return ("INTCF1A")
                    }

                    If ((Arg0 == ToUUID ("3c62aaaa-d8e0-401a-84c3-fc05656fa28c") /* Unknown UUID */))
                    {
                        Return ("IMX175")
                    }

                    If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                    {
                        Return ("13P2BA807")
                    }

                    If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                    {
                        Return ("INTEL_RVP")
                    }

                    If ((Arg0 == ToUUID ("918ab242-c37c-450a-9d0f-f47ab97c3dea") /* Unknown UUID */))
                    {
                        Return (0x0104)
                    }

                    If ((Arg0 == ToUUID ("ea3b7bd8-e09b-4239-ad6e-ed525f3f26ab") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    If ((Arg0 == ToUUID ("b65ac492-9e30-4d60-b5b2-f497c790d9cf") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("e770ab0f-2644-4bab-8628-d62f1683fb9d") /* Unknown UUID */))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 == ToUUID ("1ea54ab2-cd84-48cc-9dd4-7f594ec3b015") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("8dbe2651-70c1-4c6f-ac87-a37cb46e4af6") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("75c9a639-5c8a-4a00-9f48-a9c3b5da789f") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x03)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x04001000)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x04000C01)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x04005402)
                        }
                    }

                    If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01001800)
                        }
                    }

                    Return (Zero)
                }
            }

            Device (CAM2)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "INT33FB" /* MIPI-CSI Camera Sensor OV2722 */)  // _HID: Hardware ID
                Name (_CID, "INT33FB" /* MIPI-CSI Camera Sensor OV2722 */)  // _CID: Compatible ID
                Name (_SUB, "INTL0000")  // _SUB: Subsystem ID
                Name (_DDN, "OV2722")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    CLK1
                })
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x61, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // a.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDB) /* \_SB_.PCI0.I2C4.CAM2.PLDB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((CAMS == One) && (RCAM == Zero)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0036
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0032
                            }
                        I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C4.CAM2._CRS.SBUF */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                    {
                        Return ("INT33FB")
                    }

                    If ((Arg0 == ToUUID ("3c62aaaa-d8e0-401a-84c3-fc05656fa28c") /* Unknown UUID */))
                    {
                        Return ("OV2722")
                    }

                    If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                    {
                        Return ("12P2SF220")
                    }

                    If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                    {
                        Return ("INTEL_RVP")
                    }

                    If ((Arg0 == ToUUID ("918ab242-c37c-450a-9d0f-f47ab97c3dea") /* Unknown UUID */))
                    {
                        Return (0x0101)
                    }

                    If ((Arg0 == ToUUID ("ea3b7bd8-e09b-4239-ad6e-ed525f3f26ab") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("b65ac492-9e30-4d60-b5b2-f497c790d9cf") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("e770ab0f-2644-4bab-8628-d62f1683fb9d") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("1ea54ab2-cd84-48cc-9dd4-7f594ec3b015") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("8dbe2651-70c1-4c6f-ac87-a37cb46e4af6") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    If ((Arg0 == ToUUID ("75c9a639-5c8a-4a00-9f48-a9c3b5da789f") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x04003600)
                        }
                    }

                    If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x02)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01001600)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01001901)
                        }
                    }

                    Return (Zero)
                }
            }

            Device (STRA)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "INTCF1C")  // _HID: Hardware ID
                Name (_CID, "INTCF1C")  // _CID: Compatible ID
                Name (_SUB, "INTL0000")  // _SUB: Subsystem ID
                Name (_DDN, "Flash LM3554")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((CAMS == One) && (RCAM == Zero)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0038
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x002F
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0035
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x002E
                            }
                        I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C4.STRA._CRS.SBUF */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                    {
                        Return ("INTCF1C")
                    }

                    If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                    {
                        Return ("LM3554")
                    }

                    If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                    {
                        Return ("INTEL_RVP")
                    }

                    If ((Arg0 == ToUUID ("75c9a639-5c8a-4a00-9f48-a9c3b5da789f") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x04005300)
                        }
                    }

                    If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x04)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01001302)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01001403)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x01001001)
                        }

                        If ((Arg2 == 0x05))
                        {
                            Return (0x01001104)
                        }
                    }

                    Return (Zero)
                }
            }

            Device (CAM3)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "INT33BE" /* Camera Sensor OV5693 */)  // _HID: Hardware ID
                Name (_CID, "INT33BE" /* Camera Sensor OV5693 */)  // _CID: Compatible ID
                Name (_SUB, "INTL0000")  // _SUB: Subsystem ID
                Name (_DDN, "OV5693")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    CLK1
                })
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDB) /* \_SB_.PCI0.I2C4.CAM3.PLDB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((CAMS == One) && (RCAM == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0032
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0033
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0038
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x002D
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0031
                            }
                        I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x000C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0054, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0055, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0056, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0057, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C4.CAM3._CRS.SBUF */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                    {
                        Return ("INT33BE")
                    }

                    If ((Arg0 == ToUUID ("3c62aaaa-d8e0-401a-84c3-fc05656fa28c") /* Unknown UUID */))
                    {
                        Return ("OV5693")
                    }

                    If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                    {
                        Return ("13P2BA540")
                    }

                    If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                    {
                        Return ("BSW_ITL_RVP")
                    }

                    If ((Arg0 == ToUUID ("ea3b7bd8-e09b-4239-ad6e-ed525f3f26ab") /* Unknown UUID */))
                    {
                        Return (0x1020)
                    }

                    If ((Arg0 == ToUUID ("b65ac492-9e30-4d60-b5b2-f497c790d9cf") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("e770ab0f-2644-4bab-8628-d62f1683fb9d") /* Unknown UUID */))
                    {
                        Return (0x08)
                    }

                    If ((Arg0 == ToUUID ("1ea54ab2-cd84-48cc-9dd4-7f594ec3b015") /* Unknown UUID */))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 == ToUUID ("75c9a639-5c8a-4a00-9f48-a9c3b5da789f") /* Unknown UUID */))
                    {
                        Return ("AD5823")
                    }

                    If ((Arg0 == ToUUID ("2fa9bb94-9c5d-4aeb-8e6e-27434f81e3d3") /* Unknown UUID */))
                    {
                        Return ("BSW")
                    }

                    If ((Arg0 == ToUUID ("647a6ca2-8b29-49ac-8806-d58b3d2d3ef5") /* Unknown UUID */))
                    {
                        Return ("FFD")
                    }

                    If ((Arg0 == ToUUID ("a6e922a1-f7b3-4399-b56a-406ae416843b") /* Unknown UUID */))
                    {
                        Return ("BSW")
                    }

                    If ((Arg0 == ToUUID ("5960313b-0ab0-4940-8840-2cafa420c015") /* Unknown UUID */))
                    {
                        Return ("INTEL")
                    }

                    If ((Arg0 == ToUUID ("f486d39f-d657-484b-84a6-42a565712b92") /* Unknown UUID */))
                    {
                        Return (Buffer (0x20)
                        {
                            /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x02,  // ........
                            /* 0008 */  0x07, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        })
                    }

                    If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x06)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x04001000)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x04000C01)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x04005402)
                        }

                        If ((Arg2 == 0x05))
                        {
                            Return (0x04005503)
                        }

                        If ((Arg2 == 0x06))
                        {
                            Return (0x04005604)
                        }

                        If ((Arg2 == 0x07))
                        {
                            Return (0x04005705)
                        }
                    }

                    If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x05)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01003200)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01003301)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x01003807)
                        }

                        If ((Arg2 == 0x05))
                        {
                            Return (0x01002D08)
                        }

                        If ((Arg2 == 0x06))
                        {
                            Return (0x01003109)
                        }
                    }

                    Return (Zero)
                }
            }

            Device (STRB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "INTCF1C")  // _HID: Hardware ID
                Name (_CID, "INTCF1C")  // _CID: Compatible ID
                Name (_SUB, "INTL0000")  // _SUB: Subsystem ID
                Name (_DDN, "Flash LM3554")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((RCAM == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0036
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x002F
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0037
                            }
                        I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C4.STRB._CRS.SBUF */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                    {
                        Return ("INTCF1C")
                    }

                    If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                    {
                        Return ("LM3554")
                    }

                    If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                    {
                        Return ("BSW_ITL_RVP")
                    }

                    If ((Arg0 == ToUUID ("75c9a639-5c8a-4a00-9f48-a9c3b5da789f") /* Unknown UUID */))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x04005300)
                        }
                    }

                    If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x03)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01003601)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01002F02)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x01003705)
                        }
                    }

                    Return (Zero)
                }
            }
        }

        Device (I2C5)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #5 - 808622C5")  // _DDN: DOS Device Name
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y15)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000024,
                }
                FixedDMA (0x0018, 0x0000, Width32bit, )
                FixedDMA (0x0019, 0x0001, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C5._Y15._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C5._Y15._LEN, B0LN)  // _LEN: Length
                B0BA = I50A /* \I50A */
                B0LN = I50L /* \I50L */
                Return (RBUF) /* \_SB_.PCI0.I2C5.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I50A == Zero) || (L25D == One)))
                {
                    Return (Zero)
                }

                If ((BDID == CRRB))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I4D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I4D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I51A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (TPDC)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_HID, "MSFT0002")  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (CDSM (Arg0, Arg1, Arg2, Arg3, 0x20))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((BDID == CRRB))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (SBFI, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x004D
                            }
                    })
                    Return (SBFI) /* \_SB_.PCI0.I2C5.TPDC._CRS.SBFI */
                }
            }
        }

        Method (TPSC, 0, Serialized)
        {
            If ((^^GPO0.AVBL == One))
            {
                If ((BDID == CRRB))
                {
                    If ((^^GPO0.TSRR == Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((FBID == 0x02))
                {
                    If ((^^GPO0.TSR2 == Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((^^GPO0.TSRS == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Method (TPS3, 0, Serialized)
        {
            If ((^^GPO0.AVBL == One))
            {
                If ((BDID == CRRB))
                {
                    ^^GPO0.TSRR = Zero
                }
                ElseIf ((FBID == 0x02))
                {
                    ^^GPO0.TSR2 = Zero
                }
                Else
                {
                    ^^GPO0.TSRS = Zero
                }
            }
        }

        Method (TPS0, 0, Serialized)
        {
            If ((^^GPO0.AVBL == One))
            {
                If ((BDID == CRRB))
                {
                    ^^GPO0.TSRR = One
                }
                ElseIf ((FBID == 0x02))
                {
                    ^^GPO0.TSR2 = One
                }
                Else
                {
                    ^^GPO0.TSRS = One
                }
            }

            Sleep (0x64)
        }

        Method (TCRS, 1, Serialized)
        {
            Name (RSTL, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x004A, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C6",
                    0x00, ResourceConsumer, _Y16, Exclusive,
                    )
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPO0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x004B
                    }
                GpioInt (Level, ActiveLow, Shared, PullDefault, 0x0000,
                    "\\_SB.GPO0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x004C
                    }
            })
            CreateByteField (RSTL, \_SB.PCI0.TCRS._Y16._ADR, VAL0)  // _ADR: Address
            VAL0 = Arg0
            CreateByteField (RSTL, 0x38, VAL1)
            If ((BDID == CRRB))
            {
                VAL1 = 0x4B
            }
            ElseIf ((FBID == 0x02))
            {
                VAL1 = 0x4E
            }
            Else
            {
                VAL1 = 0x50
            }

            Return (RSTL) /* \_SB_.PCI0.TCRS.RSTL */
        }

        Device (I2C6)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #6 - 808622C6")  // _DDN: DOS Device Name
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y17)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000025,
                }
                FixedDMA (0x001A, 0x0002, Width32bit, )
                FixedDMA (0x001B, 0x0003, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C6._Y17._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C6._Y17._LEN, B0LN)  // _LEN: Length
                B0BA = I60A /* \I60A */
                B0LN = I60L /* \I60L */
                Return (RBUF) /* \_SB_.PCI0.I2C6.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I60A == Zero) || (L26D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I5D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I5D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I61A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (TSC0)
            {
                Name (_HID, "ATML7000")  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (HIDA, Zero)
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    GPO0
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (CDSM (Arg0, Arg1, Arg2, Arg3, HIDA))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((BDID == CHRB))
                    {
                        Return (Zero)
                    }

                    If ((ITSA == Zero))
                    {
                        If ((BDID == CRRB))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((ITSA == 0x4A))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                {
                    TPSC ()
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    TPS3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    TPS0 ()
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (TCRS (0x4A))
                }
            }

            Device (TCS1)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "ATML1000" /* Atmel Touchscreen Controller */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (HIDA, Zero)
                Name (_UID, One)  // _UID: Unique ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    GPO0
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (CDSM (Arg0, Arg1, Arg2, Arg3, HIDA))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((BDID == CHRB))
                    {
                        Return (Zero)
                    }

                    If ((ITSA == Zero))
                    {
                        If ((BDID == CRRB))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    If ((ITSA == 0x4C))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                {
                    TPSC ()
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    TPS3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    TPS0 ()
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (TCRS (0x4C))
                }
            }

            Device (TPD1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_HID, "MSFT0002")  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (CDSM (Arg0, Arg1, Arg2, Arg3, 0x20))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((BDID == CRRB) | (BDID == CHRB)))
                    {
                        Return (Zero)
                    }

                    Return (0x0F)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (SBFI, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C6",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x004D
                            }
                    })
                    Return (SBFI) /* \_SB_.PCI0.I2C6.TPD1._CRS.SBFI */
                }
            }
        }

        Device (I2C7)
        {
            Name (_HID, "808622C1")  // _HID: Hardware ID
            Name (_CID, "808622C1")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) I2C Controller #7 - 808622C7")  // _DDN: DOS Device Name
            Name (_UID, 0x07)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y18)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000026,
                }
                FixedDMA (0x001C, 0x0004, Width32bit, )
                FixedDMA (0x001D, 0x0005, Width32bit, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.I2C7._Y18._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.I2C7._Y18._LEN, B0LN)  // _LEN: Length
                B0BA = I70A /* \I70A */
                B0LN = I70L /* \I70L */
                Return (RBUF) /* \_SB_.PCI0.I2C7.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((I70A == Zero) || (L27D == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I6D3 == One))
                {
                    PSAT |= 0x03
                    PSAT |= Zero
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I6D3 == One))
                {
                    PSAT &= 0xFFFFFFFC
                    PSAT |= Zero
                }
            }

            OperationRegion (KEYS, SystemMemory, I71A, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (NFC1)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "NXP7471")  // _HID: Hardware ID
                Name (_CID, "NXP7471")  // _CID: Compatible ID
                Name (_DDN, "NXP NFC")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C7",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0017
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x001B
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0010
                            }
                    })
                    Return (SBUF) /* \_SB_.PCI0.I2C7.NFC1._CRS.SBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((NFCS == One) & (BDID != CHRB)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Scope (HDEF)
        {
            OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                DCKA,   1, 
                Offset (0x01), 
                DCKM,   1, 
                    ,   6, 
                DCKS,   1, 
                Offset (0x08), 
                Offset (0x09), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x04
            })
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }
        }

        Device (IISH)
        {
            Name (_HID, "808622D8")  // _HID: Hardware ID
            Name (_CID, "808622D8")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) Integrated Sensor Hub - 808622D8")  // _DDN: DOS Device Name
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y19)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1A)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000072,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.IISH._Y19._BAS, B0BA)  // _BAS: Base Address
                B0BA = ISH0 /* \ISH0 */
                CreateDWordField (RBUF, \_SB.PCI0.IISH._Y1A._BAS, B1BA)  // _BAS: Base Address
                B1BA = ISH1 /* \ISH1 */
                Return (RBUF) /* \_SB_.PCI0.IISH.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((ISH0 == Zero) || (ISHD == One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, ISH1, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }
        }

        Device (LPEA)
        {
            Name (_HID, "808622A8")  // _HID: Hardware ID
            Name (_CID, "808622A8")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) Low Power Audio Controller - 808622A8")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00200000,         // Address Length
                    _Y1B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1C)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00200000,         // Address Length
                    _Y1D)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000018,
                }
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000019,
                }
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000001A,
                }
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000001B,
                }
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000001C,
                }
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000001D,
                }
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x004D
                    }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.LPEA._Y1B._BAS, B0BA)  // _BAS: Base Address
                B0BA = LPE0 /* \LPE0 */
                CreateDWordField (RBUF, \_SB.PCI0.LPEA._Y1C._BAS, B1BA)  // _BAS: Base Address
                B1BA = LPE1 /* \LPE1 */
                CreateDWordField (RBUF, \_SB.PCI0.LPEA._Y1D._BAS, B2BA)  // _BAS: Base Address
                B2BA = LPE2 /* \LPE2 */
                Return (RBUF) /* \_SB_.PCI0.LPEA.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((LPE0 != Zero) && (LPED == Zero)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, LPE1, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }

            Device (ADMA)
            {
                Name (_HID, "ADMA22A8")  // _HID: Hardware ID
                Name (_CID, "ADMA22A8")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Audio  DMA0 - DMA0F28")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00200000,         // Address Length
                        _Y1E)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000018,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (RBUF, \_SB.PCI0.LPEA.ADMA._Y1E._BAS, B3BA)  // _BAS: Base Address
                    B3BA = LPE0 /* \LPE0 */
                    Return (RBUF) /* \_SB_.PCI0.LPEA.ADMA.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((OSID == 0x02) || (OSID == 0x03)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Device (AMCR)
        {
            Name (_HID, "AMCR22A8")  // _HID: Hardware ID
            Name (_CID, "AMCR22A8")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) Audio Machine Driver - AMCR0F28")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (_DEP, Package (0x02)  // _DEP: Dependencies
            {
                GPO2, 
                ^I2C2.RTEK
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x004D
                        }
                    GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0006
                        }
                    GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0006
                        }
                })
                Return (RBUF) /* \_SB_.PCI0.AMCR._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((LPES == 0x02))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (HAD0)
        {
            Name (_HID, "HAD022A8")  // _HID: Hardware ID
            Name (_CID, "HAD022A8")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) HDMI Audio Driver - HAD")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00065800,         // Address Base
                        0x00000140,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.HAD0._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ADED == One))
                {
                    If (((OSID == 0x02) || (OSID == 0x03)))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }
        }

        Device (UOTG)
        {
            Name (_HID, "808622B7")  // _HID: Hardware ID
            Name (_CID, "808622B7")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) USB On-The-Go Controller - 808622B7")  // _DDN: DOS Device Name
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00200000,         // Address Length
                    _Y1F)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y20)
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000001E,
                }
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000001F,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.UOTG._Y1F._BAS, B0BA)  // _BAS: Base Address
                B0BA = OTG0 /* \OTG0 */
                CreateDWordField (RBUF, \_SB.PCI0.UOTG._Y20._BAS, B1BA)  // _BAS: Base Address
                B1BA = OTG1 /* \OTG1 */
                If ((OTG0 != Zero))
                {
                    Return (RBUF) /* \_SB_.PCI0.UOTG.RBUF */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OTGD == One) || ((OTGM == One) || (OTG0 == Zero))))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                PSAT |= 0x03
                PSAT |= Zero
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                PSAT &= 0xFFFFFFFC
                PSAT |= Zero
            }

            OperationRegion (KEYS, SystemMemory, OTG1, 0x0100)
            Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
            {
                Offset (0x84), 
                PSAT,   32
            }
        }

        Device (SPRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y21)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y22)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y23)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y24)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y25)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y26)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y27)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y28)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y29)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y2A)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y2B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y2C)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y2D)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y2E)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y2F)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y30)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y31)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y32)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y33)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y21._BAS, BR01)  // _BAS: Base Address
                BR01 = EM1A /* \EM1A */
                If (((BR01 != Zero) && (BR01 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y21._LEN, LN01)  // _LEN: Length
                    LN01 = EM1L /* \EM1L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y22._BAS, BR02)  // _BAS: Base Address
                BR02 = SI1A /* \SI1A */
                If (((BR02 != Zero) && (BR02 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y22._LEN, LN02)  // _LEN: Length
                    LN02 = SI1L /* \SI1L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y23._BAS, BR03)  // _BAS: Base Address
                BR03 = SD1A /* \SD1A */
                If (((BR03 != Zero) && (BR03 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y23._LEN, LN03)  // _LEN: Length
                    LN03 = SD1L /* \SD1L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y24._BAS, BR04)  // _BAS: Base Address
                BR04 = D11A /* \D11A */
                If (((BR04 != Zero) && (BR04 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y24._LEN, LN04)  // _LEN: Length
                    LN04 = D11L /* \D11L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y25._BAS, BR05)  // _BAS: Base Address
                BR05 = P11A /* \P11A */
                If (((BR05 != Zero) && (BR05 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y25._LEN, LN05)  // _LEN: Length
                    LN05 = P11L /* \P11L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y26._BAS, BR06)  // _BAS: Base Address
                BR06 = P21A /* \P21A */
                If (((BR06 != Zero) && (BR06 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y26._LEN, LN06)  // _LEN: Length
                    LN06 = P21L /* \P21L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y27._BAS, BR07)  // _BAS: Base Address
                BR07 = U11A /* \U11A */
                If (((BR07 != Zero) && (BR07 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y27._LEN, LN07)  // _LEN: Length
                    LN07 = U11L /* \U11L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y28._BAS, BR08)  // _BAS: Base Address
                BR08 = U21A /* \U21A */
                If (((BR08 != Zero) && (BR08 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y28._LEN, LN08)  // _LEN: Length
                    LN08 = U21L /* \U21L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y29._BAS, BR09)  // _BAS: Base Address
                BR09 = SP1A /* \SP1A */
                If (((BR09 != Zero) && (BR09 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y29._LEN, LN09)  // _LEN: Length
                    LN09 = SP1L /* \SP1L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2A._BAS, BR10)  // _BAS: Base Address
                BR10 = S21A /* \S21A */
                If (((BR10 != Zero) && (BR10 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2A._LEN, LN10)  // _LEN: Length
                    LN10 = S21L /* \S21L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2B._BAS, BR11)  // _BAS: Base Address
                BR11 = S31A /* \S31A */
                If (((BR11 != Zero) && (BR11 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2B._LEN, LN11)  // _LEN: Length
                    LN11 = S31L /* \S31L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2C._BAS, BR12)  // _BAS: Base Address
                BR12 = D21A /* \D21A */
                If (((BR12 != Zero) && (BR12 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2C._LEN, LN12)  // _LEN: Length
                    LN12 = D21L /* \D21L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2D._BAS, BR13)  // _BAS: Base Address
                BR13 = I11A /* \I11A */
                If (((BR13 != Zero) && (BR13 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2D._LEN, LN13)  // _LEN: Length
                    LN13 = I11L /* \I11L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2E._BAS, BR14)  // _BAS: Base Address
                BR14 = I21A /* \I21A */
                If (((BR14 != Zero) && (BR14 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2E._LEN, LN14)  // _LEN: Length
                    LN14 = I21L /* \I21L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2F._BAS, BR15)  // _BAS: Base Address
                BR15 = I31A /* \I31A */
                If (((BR15 != Zero) && (BR15 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y2F._LEN, LN15)  // _LEN: Length
                    LN15 = I31L /* \I31L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y30._BAS, BR16)  // _BAS: Base Address
                BR16 = I41A /* \I41A */
                If (((BR16 != Zero) && (BR16 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y30._LEN, LN16)  // _LEN: Length
                    LN16 = I41L /* \I41L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y31._BAS, BR17)  // _BAS: Base Address
                BR17 = I51A /* \I51A */
                If (((BR17 != Zero) && (BR17 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y31._LEN, LN17)  // _LEN: Length
                    LN17 = I51L /* \I51L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y32._BAS, BR18)  // _BAS: Base Address
                BR18 = I61A /* \I61A */
                If (((BR18 != Zero) && (BR18 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y32._LEN, LN18)  // _LEN: Length
                    LN18 = I61L /* \I61L */
                }

                CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y33._BAS, BR19)  // _BAS: Base Address
                BR19 = I71A /* \I71A */
                If (((BR19 != Zero) && (BR19 != 0xFFFFF000)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SPRC._Y33._LEN, LN19)  // _LEN: Length
                    LN19 = I71L /* \I71L */
                }

                Return (RBUF) /* \_SB_.PCI0.SPRC.RBUF */
            }
        }

        Device (SEC0)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            OperationRegion (SECS, PCI_Config, 0x64, 0x04)
            Field (SECS, DWordAcc, NoLock, Preserve)
            {
                SHAD,   32
            }

            OperationRegion (PMEB, PCI_Config, 0x84, 0x04)
            Field (PMEB, WordAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y34)
                Memory32Fixed (ReadOnly,
                    0x00000000,         // Address Base
                    0x01000000,         // Address Length
                    _Y35)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (((OSYS == 0x07DF) && (PAVL != Zero)))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.SEC0._Y34._BAS, B0BA)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.SEC0._Y34._LEN, B0LN)  // _LEN: Length
                    CreateDWordField (RBUF, \_SB.PCI0.SEC0._Y35._BAS, DBAS)  // _BAS: Base Address
                    B0BA = PAVB /* \PAVB */
                    B0LN = PAVL /* \PAVL */
                    DBAS = DRMB /* \DRMB */
                    Return (RBUF) /* \_SB_.PCI0.SEC0.RBUF */
                }

                Return (Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (DerefOf (Arg3 [Zero]))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                    P8XH (Zero, 0x5D)
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }

                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((Arg0 == ToUUID ("ad27b3f7-13af-4fa3-93c9-eefd1f9d6ac7") /* Unknown UUID */))
                {
                    Switch (Arg2)
                    {
                        Case (Zero)
                        {
                            Return (0x03)
                        }
                        Case (One)
                        {
                            Return (DRMB) /* \DRMB */
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000000, 0x00) {}
        Processor (CPU1, 0x02, 0x00000000, 0x00) {}
        Processor (CPU2, 0x03, 0x00000000, 0x00) {}
        Processor (CPU3, 0x04, 0x00000000, 0x00) {}
    }

    Name (PICM, Zero)
    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }
        ElseIf ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }
        ElseIf ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }
        ElseIf ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    OperationRegion (SWC0, SystemIO, 0x0610, 0x0F)
    Field (SWC0, ByteAcc, NoLock, Preserve)
    {
        G1S,    8, 
        Offset (0x04), 
        G1E,    8, 
        Offset (0x0A), 
        G1S2,   8, 
        G1S3,   8
    }

    OperationRegion (SWC1, SystemIO, PMBS, 0x34)
    Field (SWC1, DWordAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        PM1E,   16, 
        Offset (0x20), 
        G0S,    32, 
        Offset (0x28), 
        G0EN,   32, 
        Offset (0x30), 
        SSMI,   32
    }

    OperationRegion (SCWS, SystemMemory, (GBA1 | 0x0200), 0x04)
    Field (SCWS, DWordAcc, Lock, Preserve)
    {
            ,   9, 
        SOCW,   1
    }

    OperationRegion (TPIS, SystemMemory, (GBA3 | 0x0204), 0x04)
    Field (TPIS, DWordAcc, Lock, Preserve)
    {
            ,   14, 
        PADW,   1
    }

    Method (PPTS, 1, NotSerialized)
    {
        SSEN = SSMI /* \SSMI */
        SPM1 = PM1E /* \PM1E */
        P80D = Zero
        P8XH (Zero, Arg0)
        XMIO = (XMMA & 0xFFFFFFF0)
        If (_OSI ("Android")) {}
        G1S3 = Ones
        G1S2 = Ones
        G1S = One
        G1E = One
        G0S = Ones
        SOCW = One
        PADW = One
        If (CondRefOf (TCGM))
        {
            \_SB.PCI0.SBRG.TPM.PTS (Arg0)
        }
    }

    Name (XMIO, Zero)
    OperationRegion (XPEB, SystemMemory, (PEBS + 0x000A0000), 0x78)
    Field (XPEB, DWordAcc, NoLock, Preserve)
    {
        Offset (0x04), 
            ,   1, 
        XMSE,   1, 
        Offset (0x10), 
        XMMA,   32, 
        Offset (0x74), 
        XHDX,   2
    }

    Method (XWAM, 1, Serialized)
    {
        If ((XPME == One))
        {
            If (((XMIO != Zero) && (XMIO != 0xFFFFFFF0)))
            {
                Local0 = XHDX /* \XHDX */
                Local1 = XMMA /* \XMMA */
                Local2 = XMSE /* \XMSE */
                XMMA = XMIO /* \XMIO */
                XHDX = Zero
                XMSE = One
                OperationRegion (XWAM, SystemMemory, (XMIO + 0x80A4), 0x04)
                Field (XWAM, DWordAcc, NoLock, Preserve)
                {
                        ,   28, 
                    PMEC,   1
                }

                PMEC = One
                PMEB = One
                XMSE = Local2
                XMMA = Local1
                XHDX = Local0
                P8XH (One, Arg0)
            }
        }
    }

    Name (LLID, Zero)
    Method (PWAK, 1, Serialized)
    {
        SSMI = SSEN /* \SSEN */
        PM1E = SPM1 /* \SPM1 */
        P8XH (One, 0xAB)
        If ((Arg0 == 0x03))
        {
            XWAM (0xAE)
        }

        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SEC0.SHAD = One
        }

        If (((BDID == CHRB) | (BDID == CIRB)))
        {
            PNOT ()
        }
        Else
        {
            BNUM = Zero
            BNUM |= ((\_SB.PCI0.SBRG.H_EC.B1ST & 0x08) >> 0x03)
            If ((BNUM == Zero))
            {
                If ((\_SB.PCI0.SBRG.H_EC.VPWR != PWRS))
                {
                    PWRS = \_SB.PCI0.SBRG.H_EC.VPWR
                    PNOT ()
                }
            }
            ElseIf ((\_SB.PCI0.SBRG.H_EC.RPWR != PWRS))
            {
                PWRS = \_SB.PCI0.SBRG.H_EC.RPWR
                PNOT ()
            }

            If ((PFLV == FMBL))
            {
                ECON = One
                LIDS = \_SB.PCI0.SBRG.H_EC.LSTE
                LLID = LIDS /* \LIDS */
                If ((Arg0 == 0x03))
                {
                    LLID |= 0x80
                }

                If (IGDS)
                {
                    P8XH (Zero, 0x0A)
                    If ((LIDS == Zero))
                    {
                        \_SB.PCI0.GFX0.CLID = 0x80000000
                    }

                    If ((LIDS == One))
                    {
                        \_SB.PCI0.GFX0.CLID = 0x80000003
                    }
                }

                Notify (\_SB.LID0, 0x80) // Status Change
                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    If ((PFLV == FMBL))
                    {
                        If ((Arg0 == 0x04))
                        {
                            PNOT ()
                        }
                    }

                    If ((CFGD & 0x01000000)) {}
                    If ((OSYS == 0x07D2))
                    {
                        If ((CFGD & One))
                        {
                            If ((\_PR.CPU0.MPPC > Zero))
                            {
                                \_PR.CPU0.MPPC -= One
                                PNOT ()
                                \_PR.CPU0.MPPC += One
                                PNOT ()
                            }
                            Else
                            {
                                \_PR.CPU0.MPPC += One
                                PNOT ()
                                \_PR.CPU0.MPPC -= One
                                PNOT ()
                            }
                        }
                    }
                }
            }
        }
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }

        If ((PFLV == FMBL))
        {
            If (((BDID != CHRB) & (BDID != CIRB)))
            {
                B1SC = \_SB.PCI0.SBRG.H_EC.B1CC
                B1SS = \_SB.PCI0.SBRG.H_EC.B1ST
                If ((OSYS >= 0x07D6))
                {
                    Notify (\_SB.PCI0.SBRG.H_EC.BAT0, 0x81) // Information Change
                    Notify (\_SB.PCI0.SBRG.H_EC.BAT1, 0x81) // Information Change
                }
                Else
                {
                    Notify (\_SB.PCI0.SBRG.H_EC.BAT0, 0x80) // Status Change
                    Notify (\_SB.PCI0.SBRG.H_EC.BAT1, 0x80) // Status Change
                }
            }
        }

        If ((DPTE == One))
        {
            If ((CHGR == One))
            {
                Notify (\_SB.TCHG, 0x80) // Status Change
            }
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((HGMD & 0x0F) != 0x02))
                        {
                            CAP0 &= 0x3B
                            STS0 |= 0x10
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Scope (PCI0)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                OSYS = 0x07D0
                If (CondRefOf (\_OSI, Local0))
                {
                    If (_OSI ("Windows 2001"))
                    {
                        OSYS = 0x07D1
                    }

                    If (_OSI ("Windows 2001 SP1"))
                    {
                        OSYS = 0x07D1
                    }

                    If (_OSI ("Windows 2001 SP2"))
                    {
                        OSYS = 0x07D2
                    }

                    If (_OSI ("Windows 2006"))
                    {
                        OSYS = 0x07D6
                    }

                    If (_OSI ("Windows 2009"))
                    {
                        OSYS = 0x07D9
                    }

                    If (_OSI ("Windows 2012"))
                    {
                        OSYS = 0x07DC
                    }

                    If (_OSI ("Windows 2013"))
                    {
                        OSYS = 0x07DD
                    }

                    If (_OSI ("Windows 2015"))
                    {
                        OSYS = 0x07DF
                    }

                    If ((OSYS == 0x07D9))
                    {
                        ^GFX0.GSES = One
                    }
                }

                PINI ()
            }

            Method (NHPG, 0, Serialized)
            {
            }

            Method (NPME, 0, Serialized)
            {
            }
        }

        Device (GPED)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT0002" /* Virtual GPIO Controller */)  // _HID: Hardware ID
            Name (_CID, "INT0002" /* Virtual GPIO Controller */)  // _CID: Compatible ID
            Name (_DDN, "Virtual GPIO controller")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (INST, One)
            Name (XTMP, Zero)
            OperationRegion (SCIS, SystemMemory, 0xFED030C0, 0x04)
            Field (SCIS, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                LHAD,   1, 
                LATA,   1, 
                LDIO,   1, 
                LARD,   1, 
                LIO1,   1, 
                LCEP,   1, 
                LANB,   1, 
                LHCI,   1, 
                LOTG,   1, 
                LECI,   1, 
                LHSI,   1
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("8b38b469-6f95-4b08-9b02-2defcc2d2c35") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return ((PMBS + 0x20))
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive, ,, )
                    {
                        0x00000009,
                    }
                })
                Return (RBUF) /* \_SB_.GPED._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS >= 0x07DD))
                {
                    If ((PB1E & One))
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }

            Method (_AEI, 0, Serialized)  // _AEI: ACPI Event Interrupts
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDown, 0x0000,
                        "\\_SB.GPED", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0002
                        }
                })
                Return (RBUF) /* \_SB_.GPED._AEI.RBUF */
            }

            Method (_E02, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
            {
                If ((PWBS == One))
                {
                    PWBS = One
                }

                If ((PMEB == One))
                {
                    PMEB = One
                }

                If ((^^PCI0.SATA.PMES == One))
                {
                    ^^PCI0.SATA.PMES = One
                    Notify (^^PCI0.SATA, 0x02) // Device Wake
                }

                If ((^^PCI0.HDEF.PMES == One))
                {
                    ^^PCI0.HDEF.PMES = One
                    Notify (^^PCI0.HDEF, 0x02) // Device Wake
                }

                If ((^^PCI0.XHC1.PMES == One))
                {
                    ^^PCI0.XHC1.PMES = One
                    Notify (^^PCI0.XHC1, 0x02) // Device Wake
                }
            }
        }

        Device (GPO0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT33FF")  // _HID: Hardware ID
            Name (_CID, "INT33FF")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) controller - SOUTHWEST")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED80000,         // Address Base
                        0x00008000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000031,
                    }
                })
                Return (RBUF) /* \_SB_.GPO0._CRS.RBUF */
            }

            OperationRegion (GPM0, SystemMemory, (GBA0 | 0x5800), 0x30)
            Field (GPM0, DWordAcc, Lock, Preserve)
            {
                    ,   1, 
                TSRR,   1, 
                Offset (0x18), 
                    ,   1, 
                TSR2,   1, 
                Offset (0x28), 
                    ,   1, 
                TSRS,   1
            }

            Name (AVBL, One)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == Zero))
                {
                    AVBL = Arg1
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Android"))
                {
                    AVBL = Zero
                }

                If ((GOAE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (GPO1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT33FF")  // _HID: Hardware ID
            Name (_CID, "INT33FF")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) controller - NORTH")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED88000,         // Address Base
                        0x00008000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000030,
                    }
                })
                Return (RBUF) /* \_SB_.GPO1._CRS.RBUF */
            }

            OperationRegion (GPM1, SystemMemory, (GBA1 | 0x4428), 0x04)
            Field (GPM1, DWordAcc, Lock, Preserve)
            {
                    ,   1, 
                CWLE,   1
            }

            Name (AVBL, One)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == Zero))
                {
                    AVBL = Arg1
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Android"))
                {
                    AVBL = Zero
                }

                If ((GOAE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (GPO2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT33FF")  // _HID: Hardware ID
            Name (_CID, "INT33FF")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) controller - EAST")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED90000,         // Address Base
                        0x00008000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000032,
                    }
                })
                Return (RBUF) /* \_SB_.GPO2._CRS.RBUF */
            }

            OperationRegion (GPM2, SystemMemory, (GBA2 | 0x4820), 0x04)
            Field (GPM2, DWordAcc, Lock, Preserve)
            {
                    ,   1, 
                SHD3,   1
            }

            Name (AVBL, One)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == Zero))
                {
                    AVBL = Arg1
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Android"))
                {
                    AVBL = Zero
                }

                If ((GOAE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (GPO3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT33FF")  // _HID: Hardware ID
            Name (_CID, "INT33FF")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) controller - SOUTHEAST")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED98000,         // Address Base
                        0x00008000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x0000005B,
                    }
                })
                Return (RBUF) /* \_SB_.GPO3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GOAE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (TBAD)
        {
            Name (_HID, "INTCFD9" /* Intel Baytrail SOC GPIO Controller */)  // _HID: Hardware ID
            Name (_CID, "PNP0C40" /* Standard Button Controller */)  // _CID: Compatible ID
            Name (_DDN, "Keyboard less system - 5 Button Array Device")  // _DDN: DOS Device Name
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveBoth, Exclusive, PullDefault, 0x1770,
                        "\\_SB.GPO0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0006
                        }
                    GpioInt (Edge, ActiveBoth, Exclusive, PullDefault, 0x1770,
                        "\\_SB.GPO0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0005
                        }
                    GpioInt (Edge, ActiveBoth, Exclusive, PullDefault, 0x1770,
                        "\\_SB.GPO0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0004
                        }
                    GpioInt (Edge, ActiveBoth, Exclusive, PullDefault, 0x1770,
                        "\\_SB.GPO0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0002
                        }
                })
                Return (RBUF) /* \_SB_.TBAD._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Debug = "Method _DSM for Button Device"
                If ((Arg0 == ToUUID ("dfbcf3c5-e7a5-44e6-9c1f-29c76f6e059c") /* Power Button Device */))
                {
                    Switch (Arg2)
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (0x03)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (MBID)
        {
            Name (_HID, "INT33BD" /* Intel Baytrail Mailbox Device */)  // _HID: Hardware ID
            Name (_CID, "INT33BD" /* Intel Baytrail Mailbox Device */)  // _CID: Compatible ID
            Name (_HRV, 0x02)  // _HRV: Hardware Revision
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xE00000D0,         // Address Base
                        0x0000000C,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.MBID._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            OperationRegion (REGS, 0x87, Zero, 0x30)
            Field (REGS, DWordAcc, NoLock, Preserve)
            {
                PORT,   32, 
                REG,    32, 
                DATA,   32, 
                MASK,   32, 
                BE,     32, 
                OP,     32
            }

            Name (AVBL, Zero)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x87))
                {
                    AVBL = Arg1
                }
            }

            Method (READ, 3, Serialized)
            {
                Local0 = 0xFFFFFFFF
                If ((AVBL == One))
                {
                    OP = Zero
                    PORT = Arg0
                    REG = Arg1
                    BE = Arg2
                    Local0 = DATA /* \_SB_.MBID.DATA */
                }

                Return (Local0)
            }

            Method (WRIT, 4, Serialized)
            {
                If ((AVBL == One))
                {
                    OP = One
                    PORT = Arg0
                    REG = Arg1
                    BE = Arg2
                    DATA = Arg3
                }
            }

            Method (MODI, 5, Serialized)
            {
                If ((AVBL == One))
                {
                    OP = 0x02
                    PORT = Arg0
                    REG = Arg1
                    BE = Arg2
                    DATA = Arg3
                    MASK = Arg4
                }
            }
        }

        Device (PIND)
        {
            Name (_HID, "INT3497")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Android"))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (PDAT, Package (0x03)
            {
                Package (0x02)
                {
                    "VOLUME_UP", 
                    Package (0x01)
                    {
                        0x02
                    }
                }, 

                Package (0x02)
                {
                    "VOLUME_DOWN", 
                    Package (0x01)
                    {
                        0x02
                    }
                }, 

                Package (0x02)
                {
                    "HOME_BUTTON", 
                    Package (0x01)
                    {
                        0x02
                    }
                }
            })
            Method (_IND, 0, Serialized)
            {
                Return (PDAT) /* \_SB_.PIND.PDAT */
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xE0000000,         // Address Base
                    0x10000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEA00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED01000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED03000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED06000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED08000,         // Address Base
                    0x00002000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED80000,         // Address Base
                    0x00040000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED1C000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.LCDD, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_TZ.THRM))
            {
                Notify (\_TZ.THRM, 0x80) // Thermal Status Change
            }
        }

        Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((BDID == CHRB) | (BDID == CIRB)))
            {
                GP23 = One
                If (CondRefOf (\_TZ.THRM))
                {
                    Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                }
            }
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            PSCI = One
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((RP1D == Zero))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((RP2D == Zero))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((RP3D == Zero))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((RP4D == Zero))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC1, 0x02) // Device Wake
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y36)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y37)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y38)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y39)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y36._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y36._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y37._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y37._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            ElseIf ((DTPT == One))
            {
                CreateDWordField (CRSD, \_SB.TPM._Y38._BAS, MTFE)  // _BAS: Base Address
                CreateDWordField (CRSD, \_SB.TPM._Y38._LEN, LTFE)  // _LEN: Length
                MTFE = 0xFED40000
                LTFE = 0x0880
                Return (CRSD) /* \_SB_.TPM_.CRSD */
            }
            ElseIf ((TTPF == One))
            {
                CreateDWordField (CRSI, \_SB.TPM._Y39._BAS, MTFD)  // _BAS: Base Address
                CreateDWordField (CRSI, \_SB.TPM._Y39._LEN, LTFD)  // _LEN: Length
                MTFD = 0xFED40000
                LTFD = 0x5000
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }
            ElseIf ((TTPF == Zero))
            {
                CreateDWordField (CRSI, \_SB.TPM._Y39._BAS, MTFF)  // _BAS: Base Address
                MTFF = TPMM /* \TPMM */
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        OperationRegion (TICR, SystemMemory, 0xE00D0000, 0x0100)
        Field (TICR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x8C), 
            STAT,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    STAT = One
                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.2")
                    }
                    Case (0x02)
                    {
                        ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xFF))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (One)
                        }

                        PPI1 [One] = TMF1 /* \TMF1 */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x2100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        PPI2 [One] = TMF1 /* \TMF1 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x3100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xF0))
                        {
                            TMF1 = OFST /* \OFST */
                            TMF1 |= 0x5100 /* \TMF1 */
                            SMI = TMF1 /* \TMF1 */
                            TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                            TMF1 >>= 0x08
                            If ((TMF1 == 0xFF))
                            {
                                PPI2 [0x02] = 0xFFFFFFF0
                                Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                            }
                        }
                        ElseIf ((TMF1 == 0xF1))
                        {
                            TMF1 = OFST /* \OFST */
                            TMF1 |= 0x5100 /* \TMF1 */
                            SMI = TMF1 /* \TMF1 */
                            TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                            TMF1 >>= 0x08
                            If ((TMF1 == 0xFF))
                            {
                                PPI2 [0x02] = 0xFFFFFFF1
                                Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                            }
                        }
                        Else
                        {
                            PPI2 [0x02] = TMF1 /* \TMF1 */
                        }

                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xF1))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }
                    Case (0x08)
                    {
                        ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x4300 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        Return (TMF1) /* \TMF1 */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x2200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        ToInteger (DerefOf (Arg3 [Zero]), TMF1) /* \TMF1 */
                        TMF1 <<= 0x08
                        TMF1 |= OFST /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        Return (Zero)
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    OperationRegion (IRNV, SystemMemory, 0xFFFF0000, 0xAA55)
    Field (IRNV, AnyAcc, Lock, Preserve)
    {
        INSC,   8
    }

    Scope (\)
    {
        Device (WMI0)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
        }
    }

    Scope (\)
    {
        Method (DIAG, 1, NotSerialized)
        {
            P8XH (Zero, Arg0)
        }

        OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
        Field (GPSC, ByteAcc, NoLock, Preserve)
        {
            SMCM,   8, 
            SMST,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMCM = Arg0
        }

        Method (ASMI, 1, Serialized)
        {
            \_SB.ALPR = Arg0
            SMCM = 0xA3
            Return (\_SB.ALPR)
        }

        Scope (_SB)
        {
            OperationRegion (\ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                EIND,   8, 
                EDAT,   8
            }

            IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                DASF,   8, 
                IKFG,   8, 
                RAMB,   32, 
                AVOL,   8, 
                LBTN,   8, 
                LBT2,   8, 
                SLPN,   8, 
                ALSL,   8, 
                ALAE,   1, 
                ALDE,   1, 
                ALSP,   1, 
                SYNA,   1, 
                ALPS,   1, 
                SIDE,   1, 
                PWBS,   1, 
                WFFG,   1, 
                WLDP,   1, 
                WRST,   1, 
                BTDP,   1, 
                BRST,   1, 
                WWDP,   1, 
                WWST,   1, 
                WRPS,   1, 
                BRPS,   1, 
                WMDP,   1, 
                WMST,   1, 
                Offset (0x4E), 
                UHDB,   8, 
                FBDP,   8, 
                SWD2,   1, 
                F9KP,   1, 
                LSDF,   6, 
                USBD,   16, 
                FDAY,   8, 
                FMON,   8, 
                FYER,   8, 
                FPRC,   8, 
                TCGF,   8, 
                CTPF,   4, 
                AG3F,   1, 
                Offset (0x59), 
                IEM1,   32, 
                IEM2,   32, 
                SFFG,   8, 
                SFAD,   32, 
                TOLD,   8, 
                CPWD,   8, 
                PHNV,   16, 
                TPOF,   8, 
                EXPC,   8, 
                FPOC,   8, 
                NOUP,   8, 
                W3DP,   1, 
                WUDP,   1, 
                DFBT,   1, 
                TPON,   1, 
                WOPE,   1, 
                LBUS,   1, 
                LFOS,   1, 
                Offset (0x6F), 
                HISD,   8, 
                TSB1,   8, 
                TSB2,   8, 
                TSB3,   8, 
                TSB4,   8, 
                TSB5,   8, 
                TSB6,   8, 
                TSB7,   8, 
                TSB8,   8, 
                TSB9,   8, 
                TSBA,   8, 
                TSBC,   8, 
                TSBD,   8
            }

            OperationRegion (RAMW, SystemMemory, RAMB, 0x0FF0)
            Field (RAMW, AnyAcc, NoLock, Preserve)
            {
                TRTY,   8, 
                FSFN,   8, 
                FSTA,   16, 
                FADR,   32, 
                FSIZ,   16, 
                GNBF,   32, 
                BIPA,   32, 
                RTCW,   16, 
                DBR1,   32, 
                DBR2,   32, 
                DBR3,   32, 
                DBR4,   32, 
                ACTD,   8, 
                AVLD,   8, 
                SETD,   8, 
                PADL,   16, 
                CADL,   16, 
                CSTE,   16, 
                NSTE,   16, 
                SSTE,   16, 
                SFUN,   8, 
                VGAF,   16, 
                LCDV,   32, 
                LCDR,   8, 
                VBIF,   16, 
                GCDF,   16, 
                AB00,   8, 
                AB01,   8, 
                AB02,   8, 
                AB03,   8, 
                AB04,   8, 
                AB05,   8, 
                AB06,   8, 
                AB07,   8, 
                AB08,   8, 
                AB09,   8, 
                AB0A,   8, 
                AB0B,   8, 
                AB0C,   8, 
                AB0D,   8, 
                AB0E,   8, 
                AB0F,   8, 
                AB10,   8, 
                AB11,   8, 
                AB12,   8, 
                AB13,   8, 
                AB14,   8, 
                AB15,   8, 
                AB16,   8, 
                AB17,   8, 
                AB18,   8, 
                AB19,   8, 
                AB1A,   8, 
                AB1B,   8, 
                AB1C,   8, 
                AB1D,   8, 
                AB1E,   8, 
                AB1F,   8, 
                DB00,   8, 
                DB01,   8, 
                DB02,   8, 
                DB03,   8, 
                DB04,   8, 
                DB05,   8, 
                DB06,   8, 
                DB07,   8, 
                DB08,   8, 
                DB09,   8, 
                DB0A,   8, 
                DB0B,   8, 
                DB0C,   8, 
                DB0D,   8, 
                DB0E,   8, 
                DB0F,   8, 
                DB10,   8, 
                DB11,   8, 
                DB12,   8, 
                DB13,   8, 
                DB14,   8, 
                DB15,   8, 
                DB16,   8, 
                DB17,   8, 
                DB18,   8, 
                DB19,   8, 
                DB1A,   8, 
                DB1B,   8, 
                DB1C,   8, 
                DB1D,   8, 
                DB1E,   8, 
                DB1F,   8, 
                ACPF,   8, 
                DCPF,   8, 
                DCP2,   8, 
                DCTP,   8, 
                TPSV,   8, 
                TAC0,   8, 
                TCRT,   8, 
                PPSV,   8, 
                LUXS,   8, 
                LUXL,   8, 
                LUXH,   8, 
                LUXF,   8, 
                PTIM,   8, 
                PTMP,   8, 
                QFAN,   8, 
                CPUN,   8, 
                CIST,   8, 
                CPUP,   16, 
                SLMT,   16, 
                PSTN,   16, 
                TJMX,   16, 
                SLPT,   8, 
                ALPR,   32, 
                IDES,   8, 
                HDDF,   8, 
                MNAM,   64, 
                OSVR,   32, 
                SGRQ,   32, 
                SGFN,   8, 
                SGMD,   8, 
                B0DP,   8, 
                B1DP,   8, 
                P2KS,   8, 
                P2MS,   8, 
                NRSN,   8, 
                CSMR,   8, 
                PDFE,   8, 
                PDCT,   32, 
                PDCO,   32, 
                PDHT,   32, 
                PDHO,   32, 
                PFDC,   32, 
                PFDH,   32, 
                WMIB,   32, 
                WMIS,   8, 
                MCFD,   8, 
                LDST,   8, 
                RDYB,   8, 
                LDOB,   8, 
                FBTE,   8, 
                LDEV,   8, 
                FLHP,   8, 
                VAFN,   16, 
                SSTK,   8, 
                MSRN,   32, 
                MSRH,   32, 
                MSRL,   32, 
                USCM,   8, 
                OSTP,   16, 
                HCEC,   8, 
                HLKP,   8, 
                ASFN,   8, 
                ADTE,   16, 
                ATME,   16, 
                ESTR,   8, 
                IPED,   8, 
                ILLD,   8, 
                CTJT,   8, 
                TBLG,   8, 
                TBCT,   8, 
                TBLN,   8, 
                TBWT,   8, 
                ODDV,   16, 
                ODDD,   16, 
                ODSV,   16, 
                ODSD,   16, 
                ODRV,   8, 
                HAPF,   8, 
                HPCM,   8, 
                HPDD,   8, 
                HAPD,   8, 
                BDVS,   32, 
                HWDT,   8, 
                PODS,   8, 
                EXDP,   8, 
                WOKB,   8, 
                USBL,   8, 
                SLMZ,   8, 
                WOLN,   8, 
                BILN,   8, 
                WLSW,   8, 
                IMLD,   8, 
                KBBL,   8, 
                KBLT,   8, 
                KBFZ,   8, 
                FNBT,   8, 
                FNBB,   8, 
                ESAT,   8, 
                SIFS,   8, 
                FSTB,   8, 
                PNPO,   8, 
                BTMU,   8, 
                USBX,   8, 
                BOTC,   8, 
                TPME,   8, 
                FUKM,   8, 
                SBTS,   8, 
                SMZS,   8, 
                UCMS,   8, 
                BTMS,   8, 
                BUPP,   8, 
                HSPP,   8, 
                BACS,   8, 
                DPOD,   8, 
                DEXD,   8, 
                DWOK,   8, 
                DUSL,   8, 
                DUSS,   8, 
                DSMZ,   8, 
                DWOL,   8, 
                DBIL,   8, 
                DWLS,   8, 
                DIML,   8, 
                DKBB,   8, 
                DKBL,   8, 
                DKBF,   8, 
                DFNT,   8, 
                DFNB,   8, 
                DESA,   8, 
                DSIF,   8, 
                DFST,   8, 
                DPNP,   8, 
                DBTM,   8, 
                DUSX,   8, 
                DBTC,   8, 
                DFKM,   8, 
                DUCM,   8, 
                RTCD,   8, 
                RTCH,   8, 
                RTCM,   8, 
                RTCS,   8, 
                STRT,   16, 
                STPT,   16, 
                WOLC,   8, 
                WWLC,   8, 
                CIRS,   8, 
                TVTE,   8, 
                PKIM,   8, 
                PKSK,   8, 
                TLXL,   16, 
                TLYL,   16, 
                FBDE,   8, 
                SBIL,   8, 
                SLNB,   8, 
                SODD,   8, 
                SCRT,   8, 
                SCSM,   8, 
                SSAI,   8, 
                IU3C,   8, 
                PLGO,   8, 
                PLG2,   32, 
                PLG3,   32, 
                PLG4,   32, 
                DPK1,   32, 
                DPK2,   32, 
                DPK3,   32, 
                DPK4,   32, 
                DPK5,   32, 
                DPK6,   32, 
                DPK7,   32, 
                DPK8,   32, 
                DPK9,   32, 
                DPKA,   32, 
                DPKB,   32, 
                DPKC,   32, 
                DPKD,   8, 
                DELK,   32, 
                DKSF,   8, 
                DKST,   16, 
                NVST,   8, 
                SMTB,   32, 
                SMHD,   32, 
                SMOF,   32, 
                SMRS,   32, 
                SMDD,   512, 
                BUOP,   8, 
                BULS,   32, 
                BULA,   32, 
                BULI,   32
            }
        }

        Name (OSFG, Zero)
        Name (OS9X, One)
        Name (OS98, 0x02)
        Name (OSME, 0x04)
        Name (OS2K, 0x08)
        Name (OSLX, 0x09)
        Name (OSXP, 0x10)
        Name (OSVT, 0x20)
        Name (OSW7, 0x40)
        Name (OSW8, 0x80)
        Name (OSWB, 0x0100)
        Name (OSWX, 0x0110)
        Method (MCTH, 2, NotSerialized)
        {
            If ((SizeOf (Arg0) < SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Local0 = (SizeOf (Arg0) + One)
            Name (BUF0, Buffer (Local0) {})
            Name (BUF1, Buffer (Local0) {})
            BUF0 = Arg0
            BUF1 = Arg1
            While (Local0)
            {
                Local0--
                If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                    )))
                {
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (MSOS, 0, NotSerialized)
        {
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2006"))
                {
                    OSFG = OSVT /* \OSVT */
                }

                If (_OSI ("Windows 2009"))
                {
                    OSFG = OSW7 /* \OSW7 */
                }

                If (_OSI ("Windows 2012"))
                {
                    OSFG = OSW8 /* \OSW8 */
                }

                If (_OSI ("Windows 2013"))
                {
                    OSFG = OSWB /* \OSWB */
                }

                If (_OSI ("Windows 2015"))
                {
                    OSFG = OSWX /* \OSWX */
                }

                \_SB.OSVR = OSFG /* \OSFG */
                Return (OSFG) /* \OSFG */
            }
            ElseIf (MCTH (_OS, "Microsoft Windows"))
            {
                OSFG = OS98 /* \OS98 */
            }
            ElseIf (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSFG = OSME /* \OSME */
            }
            ElseIf (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSFG = OS2K /* \OS2K */
            }
            Else
            {
                OSFG = OSXP /* \OSXP */
            }

            Return (OSFG) /* \OSFG */
        }

        Method (DBGR, 4, NotSerialized)
        {
            \_SB.DBR1 = Arg0
            \_SB.DBR2 = Arg1
            \_SB.DBR3 = Arg2
            \_SB.DBR4 = Arg3
            ASMI (0x80)
        }

        Name (ONAM, "PEGA")
        Method (ADVG, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.ADVD ())
            }

            Return (0x03)
        }

        Method (SWHG, 1, Serialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                \_SB.PCI0.GFX0.SWHD (Arg0)
                Return (One)
            }

            Return (Zero)
        }

        Method (NATK, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.NATK ())
            }

            Return (One)
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PINI, 0, NotSerialized)
        {
            MSOS ()
        }
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Name (ATKP, Zero)
        }

        Scope (\WMI0)
        {
            Method (BSTS, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (TMPR, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x37
                Return (Local0)
            }

            Method (SWBX, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (AIBX, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (OSVR, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (GPLV, 0, NotSerialized)
            {
                Return (\_SB.LBTN)
            }

            Method (SPLV, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (WLED, 1, NotSerialized)
            {
                OWLD (Arg0)
            }

            Method (BLED, 1, NotSerialized)
            {
                OBTD (Arg0)
            }

            Method (RSTS, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (SDSP, 1, NotSerialized)
            {
                SWHG (Arg0)
            }

            Method (GPID, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (ALSC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (ALSL, 1, NotSerialized)
            {
                Return (One)
            }

            Method (HWRS, 0, NotSerialized)
            {
                Return (OHWR ())
            }

            Method (GLCD, 0, NotSerialized)
            {
                Return (Zero)
            }

            Name (WAPF, Zero)
            Method (CWAP, 1, NotSerialized)
            {
                Return (One)
            }

            Method (QMOD, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (ANVI, 1, Serialized)
            {
                Return (Zero)
            }

            Method (PSTC, 1, Serialized)
            {
                Return (Zero)
            }

            Method (HKEY, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (KBFT, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (SMBB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (SMBW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (SMBK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ECRW, 1, Serialized)
            {
                Return (Zero)
            }

            Name (AEQV, Zero)
            Method (SAEQ, 1, Serialized)
            {
                AEQV = Arg0
                Return (Zero)
            }

            Method (GAEQ, 0, Serialized)
            {
                Return (AEQV) /* \WMI0.AEQV */
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (IEC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x77)  // _UID: Unique ID
            Name (CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                Memory32Fixed (ReadOnly,
                    0x00000000,         // Address Base
                    0x00000500,         // Address Length
                    _Y3A)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.PCI0.SBRG.IEC._Y3A._BAS, IB01)  // _BAS: Base Address
                IB01 = IEM1 /* \_SB_.IEM1 */
                Return (CRS) /* \_SB_.PCI0.SBRG.IEC_.CRS_ */
            }

            Mutex (MUEC, 0x00)
            Mutex (ASIO, 0x00)
            Name (ECFL, Ones)
            Method (ECAV, 0, NotSerialized)
            {
                ECFL = One
                Return (ECFL) /* \_SB_.PCI0.SBRG.IEC_.ECFL */
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)
            Field (ECOR, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                Offset (0x05), 
                CDTD,   8, 
                Offset (0x8A), 
                HKEN,   1
            }

            OperationRegion (ECW1, SystemMemory, IEM1, 0x80)
            Field (ECW1, ByteAcc, Lock, Preserve)
            {
                Offset (0x01), 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0R,   8, 
                EB1R,   8, 
                EB0T,   8, 
                EB1T,   8, 
                Offset (0x10), 
                B0PN,   16, 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0TM,   16, 
                B0C1,   16, 
                B0CV,   16, 
                Offset (0x30), 
                B1PN,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1TM,   16, 
                B1C1,   16, 
                B1CV,   16, 
                Offset (0x50), 
                B0DC,   16, 
                B0DV,   16, 
                B0SN,   16, 
                B0MD,   16, 
                B1DC,   16, 
                B1DV,   16, 
                B1SN,   16, 
                B1MD,   16, 
                TH1R,   8, 
                TH1L,   8, 
                TH0R,   8, 
                TH0L,   8, 
                ECRT,   8, 
                EPSV,   8, 
                EACT,   8, 
                TERR,   8, 
                F0TS,   16, 
                F1TS,   16, 
                F0CS,   8, 
                F1CS,   8, 
                PCPT,   16, 
                Offset (0x7A), 
                SYSC,   16
            }

            OperationRegion (ECW2, SystemMemory, IEM2, 0x0100)
            Field (ECW2, ByteAcc, Lock, Preserve)
            {
                ESEM,   8, 
                CMD1,   8, 
                CDT1,   8, 
                CDT2,   8, 
                CDT3,   8, 
                CDT4,   8, 
                CDT5,   8, 
                CDT6,   8, 
                CDT7,   8, 
                CDT8,   8, 
                CDT9,   8, 
                CD10,   8, 
                CD11,   8, 
                CD12,   8, 
                Offset (0x40), 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8, 
                EDA6,   8, 
                EDA7,   8, 
                EDA8,   8, 
                EDA9,   8, 
                ED10,   8, 
                ED11,   8, 
                ED12,   8
            }

            OperationRegion (ECWB, SystemMemory, IEM2, 0x0100)
            Field (ECWB, ByteAcc, Lock, Preserve)
            {
                ESEB,   8, 
                CMDB,   8, 
                CDTB,   256, 
                Offset (0x40), 
                BCNT,   8, 
                BDAT,   256
            }

            OperationRegion (NECB, SystemMemory, IEM2, 0x0100)
            Field (NECB, ByteAcc, Lock, Preserve)
            {
                Offset (0x40), 
                NBST,   8, 
                NBCN,   8, 
                NBDA,   256
            }

            OperationRegion (HMW1, SystemMemory, IEM2, 0x80)
            Field (HMW1, ByteAcc, Lock, Preserve)
            {
                ESMP,   8, 
                MCMD,   8, 
                MCDB,   496, 
                EHFD,   512
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSFG <= OSME))
                {
                    ECFL = One
                }
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECFL = Arg1
                }
            }
        }
    }

    Scope (WMI0)
    {
        Method (CPUX, 4, NotSerialized)
        {
            If ((Arg1 == 0x31))
            {
                If ((Arg2 == 0x02))
                {
                    GCPU (Arg0, Arg1, Arg2, Arg3)
                    Return (Zero)
                }

                If ((Arg2 == 0x03))
                {
                    SCPU (Arg0, Arg1, Arg2, Arg3)
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (GCPU, 4, NotSerialized)
        {
            OperationRegion (\F31A, SystemMemory, Arg0, 0x10)
            Field (F31A, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8, 
                PSIN,   16
            }

            PSIN = PSTC (Zero)
            STAS = 0x80
        }

        Method (SCPU, 4, NotSerialized)
        {
            OperationRegion (\F31B, SystemMemory, Arg0, 0x10)
            Field (F31B, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8, 
                PSTL,   8
            }

            If (PSTC (PSTL))
            {
                STAS = 0x82
                EROR = One
            }
            Else
            {
                STAS = 0x80
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (BDFR, 4, NotSerialized)
        {
            Local0 = Zero
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local0 += Arg3
            Return (Local0)
        }

        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        OperationRegion (PMIX, SystemIO, 0x0400, 0x80)
        Field (PMIX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x20), 
                ,   1, 
            PEHS,   1, 
                ,   7, 
            PEPS,   1, 
            BALS,   1, 
                ,   1, 
            Offset (0x30), 
                ,   4, 
            SLPE,   1, 
            APME,   1, 
                ,   7, 
            TCOE,   1, 
            PERE,   1, 
            Offset (0x32), 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x34), 
                ,   4, 
            SLPS,   1, 
            APMS,   1, 
                ,   7, 
            TCOS,   1, 
            PERS,   1, 
            Offset (0x36)
        }

        Name (MGNC, Package (0x3B)
        {
            0x4C38, 
            0x4C28, 
            0x4858, 
            0x5018, 
            0x5040, 
            0x5008, 
            0x5030, 
            0x5058, 
            0x5000, 
            0x5020, 
            0x5048, 
            0x5010, 
            0x5038, 
            0x5028, 
            0x5050, 
            0x4400, 
            0x4418, 
            0x4438, 
            0x4408, 
            0x4428, 
            0x4420, 
            0x4440, 
            0x4410, 
            0x4430, 
            0x4800, 
            0x4820, 
            0x4848, 
            0x4810, 
            0x4838, 
            0x4828, 
            0x4850, 
            0x4818, 
            0x5458, 
            0x5430, 
            0x5408, 
            0x5420, 
            0x5438, 
            0x5410, 
            0x5440, 
            0x5428, 
            0x5400, 
            0x5460, 
            0x5418, 
            0x5450, 
            0x5448, 
            0x4C10, 
            0x4808, 
            0x4830, 
            0x4840, 
            0x4860, 
            0x4C40, 
            0x4C50, 
            0x4C18, 
            0x4C08, 
            0x4C58, 
            0x4C48, 
            0x4C30, 
            0x4C20, 
            0x4C00
        })
        Name (MGEC, Package (0x18)
        {
            0x4830, 
            0x4818, 
            0x4848, 
            0x4800, 
            0x4838, 
            0x4820, 
            0x4850, 
            0x4808, 
            0x4840, 
            0x4828, 
            0x4858, 
            0x4810, 
            0x4420, 
            0x4408, 
            0x4428, 
            0x4440, 
            0x4438, 
            0x4418, 
            0x4400, 
            0x4448, 
            0x4430, 
            0x4450, 
            0x4458, 
            0x4410
        })
        Name (MGSE, Package (0x37)
        {
            0x4808, 
            0x4840, 
            0x4810, 
            0x4848, 
            0x4828, 
            0x4858, 
            0x5438, 
            0x5428, 
            0x5418, 
            0x5440, 
            0x5448, 
            0x5810, 
            0x5820, 
            0x5030, 
            0x5020, 
            0x5010, 
            0x5038, 
            0x5000, 
            0x5028, 
            0x5008, 
            0x5018, 
            0x4400, 
            0x4410, 
            0x4438, 
            0x4420, 
            0x4418, 
            0x4430, 
            0x5808, 
            0x5840, 
            0x4428, 
            0x4408, 
            0x5850, 
            0x5830, 
            0x4C08, 
            0x4C20, 
            0x4C28, 
            0x4C00, 
            0x4C18, 
            0x4C10, 
            0x5818, 
            0x4820, 
            0x4838, 
            0x4850, 
            0x4818, 
            0x4830, 
            0x4800, 
            0x5410, 
            0x5408, 
            0x5430, 
            0x5400, 
            0x5420, 
            0x5828, 
            0x5800, 
            0x5838, 
            0x5848
        })
        Name (MGSW, Package (0x38)
        {
            0x4410, 
            0x4430, 
            0x4420, 
            0x4438, 
            0x4408, 
            0x4428, 
            0x4400, 
            0x4418, 
            0x4C00, 
            0x4C38, 
            0x4C20, 
            0x4C08, 
            0x4C10, 
            0x4C30, 
            0x4C18, 
            0x4C28, 
            0x4818, 
            0x4800, 
            0x4808, 
            0x4828, 
            0x4838, 
            0x4820, 
            0x4810, 
            0x4830, 
            0x5428, 
            0x5408, 
            0x5418, 
            0x5400, 
            0x5430, 
            0x5410, 
            0x5438, 
            0x5420, 
            0x5028, 
            0x5008, 
            0x5018, 
            0x5000, 
            0x5030, 
            0x5010, 
            0x5020, 
            0x5038, 
            0x5C10, 
            0x5C30, 
            0x5C20, 
            0x5C38, 
            0x5C00, 
            0x5C08, 
            0x5C18, 
            0x5C28, 
            0x5800, 
            0x5808, 
            0x5818, 
            0x5828, 
            0x5810, 
            0x5820, 
            0x5830, 
            0x5838
        })
        Method (RGPL, 2, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            While ((Local0 < Arg1))
            {
                Local2 = (Arg0 + Local0)
                Local3 = RMIO (Local2)
                Local3 <<= Local0
                Local1 |= Local3
                Local0++
            }

            Return (Local1)
        }

        Method (RMIO, 1, Serialized)
        {
            If ((Arg0 < 0x40))
            {
                Local2 = (Arg0 - Zero)
                Local2 = DerefOf (MGNC [Local2])
                Local2 += 0x8000
            }
            ElseIf ((Arg0 < 0x60))
            {
                Local2 = (Arg0 - 0x40)
                Local2 = DerefOf (MGEC [Local2])
                Local2 += 0x00010000
            }
            ElseIf ((Arg0 < 0xA0))
            {
                Local2 = (Arg0 - 0x60)
                Local2 = DerefOf (MGSE [Local2])
                Local2 += 0x00018000
            }
            Else
            {
                Local2 = (Arg0 - 0xA0)
                Local2 = DerefOf (MGSW [Local2])
                Local2 += Zero
            }

            Local2 += 0xFED80000
            OperationRegion (RMIX, SystemMemory, Local2, 0x04)
            Field (RMIX, DWordAcc, NoLock, Preserve)
            {
                PADV,   32
            }

            If (((PADV & 0x03) != Zero))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SGPL, 3, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            While ((Local0 < Arg1))
            {
                Local2 = (Arg0 + Local0)
                Local3 = (Arg2 >> Local0)
                Local3 &= One
                WMIO (Local2, Local3)
                Local0++
            }
        }

        Method (WMIO, 2, Serialized)
        {
            If ((Arg0 < 0x40))
            {
                Local2 = (Arg0 - Zero)
                Local2 = DerefOf (MGNC [Local2])
                Local2 += 0x8000
            }
            ElseIf ((Arg0 < 0x60))
            {
                Local2 = (Arg0 - 0x40)
                Local2 = DerefOf (MGEC [Local2])
                Local2 += 0x00010000
            }
            ElseIf ((Arg0 < 0xA0))
            {
                Local2 = (Arg0 - 0x60)
                Local2 = DerefOf (MGSE [Local2])
                Local2 += 0x00018000
            }
            Else
            {
                Local2 = (Arg0 - 0xA0)
                Local2 = DerefOf (MGSW [Local2])
                Local2 += Zero
            }

            Local2 += 0xFED80000
            OperationRegion (RMOX, SystemMemory, Local2, 0x04)
            Field (RMOX, DWordAcc, NoLock, Preserve)
            {
                PADV,   32
            }

            If (Arg1)
            {
                PADV |= 0x02
            }
            Else
            {
                PADV &= 0xFFFFFFFD
            }
        }

        Method (RGPP, 1, Serialized)
        {
            If ((Arg0 < 0x40))
            {
                Local2 = (Arg0 - Zero)
                Local2 = DerefOf (MGNC [Local2])
                Local2 += 0x8000
            }
            ElseIf ((Arg0 < 0x60))
            {
                Local2 = (Arg0 - 0x40)
                Local2 = DerefOf (MGEC [Local2])
                Local2 += 0x00010000
            }
            ElseIf ((Arg0 < 0xA0))
            {
                Local2 = (Arg0 - 0x60)
                Local2 = DerefOf (MGSE [Local2])
                Local2 += 0x00018000
            }
            Else
            {
                Local2 = (Arg0 - 0xA0)
                Local2 = DerefOf (MGSW [Local2])
                Local2 += Zero
            }

            Local2 += 0xFED80000
            Local2 += 0x04
            OperationRegion (RMNX, SystemMemory, Local2, 0x04)
            Field (RMNX, DWordAcc, NoLock, Preserve)
            {
                PADV,   32
            }

            Local2 = (PADV & 0x03)
            If (((Local2 == One) || (Local2 == 0x03)))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (TGPP, 1, Serialized)
        {
        }

        Method (SGPP, 2, Serialized)
        {
        }

        Name (PMEW, Zero)
        Method (SBRS, 1, NotSerialized)
        {
            CPXS ()
        }

        Method (SBRW, 1, NotSerialized)
        {
        }

        Method (STRP, 1, NotSerialized)
        {
            If (Arg0)
            {
                SLPS = One
                SLPE = One
            }
            Else
            {
                SLPE = Zero
                SLPS = One
            }
        }

        Method (CPXS, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = 0x00010000
            Local2 = 0x000E0060
            Local3 = 0x000E00DC
            While ((Local0 < 0x04))
            {
                If ((\_SB.RDPE (Local2) == 0xFFFFFFFF))
                {
                    Local2 += 0x1000
                    Local3 += 0x1000
                    Local1 <<= One
                    Local0++
                    Continue
                }

                While ((\_SB.RDPE (Local2) & 0x00010000))
                {
                    Local4 = (\_SB.RDPE (Local2) | 0x00010000)
                    \_SB.WDPE (Local2, Local4)
                }

                While ((\_SB.RDPE (Local3) & 0x80000000))
                {
                    Local4 = (\_SB.RDPE (Local3) | 0x80000000)
                    \_SB.WDPE (Local3, Local4)
                }

                Local2 += 0x1000
                Local3 += 0x1000
                Local1 <<= One
                Local0++
            }

            While ((PEPS & One))
            {
                PEPS |= One
            }
        }
    }

    Scope (\)
    {
        OperationRegion (SMB0, SystemIO, 0xEFA0, 0x10)
        Field (SMB0, ByteAcc, NoLock, Preserve)
        {
            HSTS,   8, 
            SSTS,   8, 
            HSTC,   8, 
            HCMD,   8, 
            HADR,   8, 
            HDT0,   8, 
            HDT1,   8, 
            BLKD,   8, 
            SPEC,   8, 
            SRCV,   8, 
            SLVD,   16, 
            AUXS,   8, 
            AUXC,   8
        }

        Name (RBUF, Package (0x20) {})
        Method (HBSY, 0, NotSerialized)
        {
            Local0 = 0x000FFFFF
            While (Local0)
            {
                Local1 = (HSTS & One)
                If (!Local1)
                {
                    Return (Zero)
                }

                Local0--
            }

            Return (One)
        }

        Method (WTSB, 0, NotSerialized)
        {
            Local0 = 0x000FFFFF
            While (Local0)
            {
                Local0--
                Local1 = (HSTS & 0x1E)
                If ((Local1 == 0x02))
                {
                    Return (One)
                }

                If (Local1)
                {
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Mutex (P4SM, 0x00)
        Method (SBYT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            AUXC = Zero
            HADR = Arg0
            HCMD = Arg1
            HSTS = 0xFF
            HSTC = 0x44
            If (WTSB ())
            {
                Release (P4SM)
                Return (One)
            }
            Else
            {
                Release (P4SM)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (WBYT, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    HDT0 = Arg2
                    HSTS = 0xFF
                    HSTC = 0x48
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (WWRD, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    Local1 = (Arg2 & 0xFF)
                    Local2 = (Arg2 >> 0x08)
                    Local2 &= 0xFF
                    HDT0 = Local2
                    HDT1 = Local1
                    HSTS = 0xFF
                    HSTC = 0x4C
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (WBLK, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    Local1 = HSTC /* \HSTC */
                    Local2 = Arg2
                    Local1 = Zero
                    While (Local2)
                    {
                        BLKD = DerefOf (RBUF [Local1])
                        Local2--
                        Local1++
                    }

                    HDT0 = Arg2
                    Local1 = HSTC /* \HSTC */
                    HSTS = 0xFF
                    HSTC = 0x54
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RSBT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x44
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (HDT0) /* \HDT0 */
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RBYT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x48
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (HDT0) /* \HDT0 */
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RWRD, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x4C
                    If (WTSB ())
                    {
                        Local1 = HDT0 /* \HDT0 */
                        Local1 <<= 0x08
                        Local2 = HDT1 /* \HDT1 */
                        Local1 += Local2
                        Release (P4SM)
                        Return (Local1)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RBLK, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x54
                    If (WTSB ())
                    {
                        Local1 = HSTC /* \HSTC */
                        Local2 = HDT0 /* \HDT0 */
                        Local3 = Local2
                        RBUF = Zero
                        Local1 = Zero
                        While (Local2)
                        {
                            RBUF [Local1] = BLKD /* \BLKD */
                            Local2--
                            Local1++
                        }

                        Release (P4SM)
                        Return (Local3)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }
    }

    Scope (_SB.PCI0.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (HS01)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS01._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // a.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS01._PLD.PLDP */
                }
            }

            Device (HS02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS02._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS02._PLD.PLDP */
                }
            }

            Device (HS03)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS03._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS03._PLD.PLDP */
                }

                Device (CAM0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "FRONT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "RIGHT",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x0,
                            PLD_GroupPosition      = 0x0,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x0,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }
            }

            Device (HS04)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS04._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS04._PLD.PLDP */
                }
            }

            Device (HS05)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS05._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS05._PLD.PLDP */
                }
            }

            Device (HS06)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS06._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS06._PLD.PLDP */
                }
            }

            Device (HS07)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.HS07._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.HS07._PLD.PLDP */
                }
            }

            Device (SSP1)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.SSP1._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // a.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.SSP1._PLD.PLDP */
                }
            }

            Device (SSP2)
            {
                Name (_ADR, 0x09)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.SSP2._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.SSP2._PLD.PLDP */
                }
            }

            Device (SSP3)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.SSP3._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.SSP3._PLD.PLDP */
                }
            }

            Device (SSP4)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.SSP4._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.SSP4._PLD.PLDP */
                }
            }

            Device (SSP5)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.SSP5._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.SSP5._PLD.PLDP */
                }
            }

            Device (SSP6)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC1.RHUB.SSP6._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x60, 0x0C, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00   // `.......
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC1.RHUB.SSP6._PLD.PLDP */
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (AC0)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (^^SBRG.IEC.ACAP ())
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (ACAP, 0, Serialized)
        {
            Return (ACPF) /* \_SB_.ACPF */
        }
    }

    Scope (_SB.PCI0)
    {
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (B0DP)
                {
                    If (^^SBRG.IEC.BATP (Zero))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (LOW2, 0x012C)
            Name (DVOT, 0x0E)
            Name (PUNT, One)
            Name (LFCC, 0x1770)
            Name (PLFC, 0x1770)
            Name (NBIF, Package (0x0D)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                0x3C, 
                0x3C, 
                "M3N", 
                "  ", 
                "LIon", 
                "PEGA"
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (FBIF, 5, NotSerialized)
            {
                PUNT = Arg0
                Local1 = Arg1
                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= 0x0A
                    Local2 *= 0x0A
                }

                PBIF [Zero] = Arg0
                PBIF [One] = Local1
                PBIF [0x02] = Local2
                LFCC = Local2
                PBIF [0x03] = Arg3
                PBIF [0x04] = Arg4
                If ((OSFG < OSVT))
                {
                    Divide (Local1, 0x64, Local3, Local5)
                }
                Else
                {
                    Divide (Local2, 0x64, Local3, Local5)
                }

                Local6 = (Local5 * 0x0A)
                PBIF [0x05] = Local6
                Local6 = (Local5 * One)
                PBIF [0x06] = Local6
                LOW2 = Local6
                Divide (Local1, 0x64, Local3, Local7)
                PBIF [0x07] = Local7
                PBIF [0x08] = Local7
            }

            Method (CBIF, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Local0 = DerefOf (PBIF [0x04])
                    Local0 += 0x01F4
                    Divide (Local0, 0x03E8, Local1, DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBIF [Zero] = Zero
                    PBIF [One] = (DerefOf (PBIF [One]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBIF [0x02] = (DerefOf (PBIF [0x02]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBIF [0x05] = (DerefOf (PBIF [0x05]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBIF [0x06] = (DerefOf (PBIF [0x06]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBIF [0x07] = (DerefOf (PBIF [0x07]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBIF [0x08] = (DerefOf (PBIF [0x08]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                }
            }

            Method (_BIF, 0, Serialized)  // _BIF: Battery Information
            {
                If (!^^SBRG.IEC.BATP (Zero))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                If ((^^SBRG.IEC.GBTT (Zero) == 0xFF))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                PBIF [0x09] = ^^SBRG.IEC.BIF9 ()
                PBIF [0x0C] = ONAM /* \ONAM */
                Local0 = ^^SBRG.IEC.BIF0 (Zero)
                Local1 = ^^SBRG.IEC.BIF1 (Zero)
                Local2 = ^^SBRG.IEC.BIF2 (Zero)
                PLFC = Local2
                Local3 = ^^SBRG.IEC.BIF3 (Zero)
                Local4 = ^^SBRG.IEC.BIF4 (Zero)
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    FBIF (Local0, Local1, Local2, Local3, Local4)
                                    CBIF ()
                                }
                            }
                        }
                    }
                }

                If ((PUNT == Zero))
                {
                    Local2 *= 0x0A
                }

                LFCC = Local2
                Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
            }

            Method (FBST, 4, NotSerialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local0 = Zero
                If (^^SBRG.IEC.ACAP ())
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If (CHGS (Zero))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    Local0 = One
                }

                Local2 = (Arg0 & 0x0300)
                If (Local2)
                {
                    Local2 = (One << 0x02)
                    Local0 |= Local2
                }

                If ((Local1 >= 0x8000))
                {
                    Local1 = (0xFFFF - Local1)
                }

                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= DVOT /* \_SB_.PCI0.BAT0.DVOT */
                    Local2 *= 0x0A
                }

                Local3 = (Local0 & 0x02)
                If (!Local3)
                {
                    Local3 = (LFCC - Local2)
                    Divide (LFCC, 0xC8, Local4, Local5)
                    If ((Local3 < Local5))
                    {
                        Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                    }

                    If (((^^^VALZ.PKFG & 0x07) == Zero))
                    {
                        Divide (LFCC, 0x14, Local4, Local5)
                        Local4 = (LFCC - Local5)
                        If ((Local2 > Local4))
                        {
                            Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                        }
                    }
                }
                Else
                {
                    Divide (LFCC, 0xC8, Local4, Local5)
                    Local4 = (LFCC - Local5)
                    If ((Local2 > Local4))
                    {
                        Local2 = Local4
                    }
                }

                If (!^^SBRG.IEC.ACAP ())
                {
                    Divide (Local2, MBLF, Local3, Local4)
                    If ((Local1 < Local4))
                    {
                        Local1 = Local4
                    }
                }

                PBST [Zero] = Local0
                PBST [One] = Local1
                PBST [0x02] = Local2
                PBST [0x03] = Arg3
            }

            Method (CBST, 0, NotSerialized)
            {
                If (PUNT)
                {
                    PBST [One] = (DerefOf (PBST [One]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    PBST [0x02] = (DerefOf (PBST [0x02]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                }
            }

            Method (_BST, 0, Serialized)  // _BST: Battery Status
            {
                PBST [Zero] = Zero
                PBST [One] = Ones
                PBST [0x02] = Ones
                PBST [0x03] = Ones
                If (!^^SBRG.IEC.BATP (Zero))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If ((^^SBRG.IEC.GBTT (Zero) == 0xFF))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If (MES4)
                {
                    MES4--
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If ((^^SBRG.IEC.BIF2 (Zero) != PLFC))
                {
                    Notify (BAT0, 0x81) // Information Change
                }

                Local0 = ^^SBRG.IEC.BSTS (Zero)
                Local1 = ^^SBRG.IEC.BCRT (Zero)
                Local2 = ^^SBRG.IEC.BRCP (Zero)
                Local3 = ^^SBRG.IEC.BVOT (Zero)
                BATR ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                FBST (Local0, Local1, Local2, Local3)
                                CBST ()
                            }
                        }
                    }
                }

                Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (B0CR, Zero)
        Name (B1CR, Zero)
        Method (GGCC, 1, Serialized)
        {
            Local0 = ^SBRG.IEC.BCRT (Arg0)
            BATR ()
            If ((Local0 == Ones))
            {
                If (Arg0)
                {
                    Local0 = B1CR /* \_SB_.PCI0.B1CR */
                }
                Else
                {
                    Local0 = B0CR /* \_SB_.PCI0.B0CR */
                }
            }

            Local1 = (Local0 & 0x8000)
            If (Local1)
            {
                Local0 = Zero
            }

            If (Arg0)
            {
                B1CR = Local0
            }
            Else
            {
                B0CR = Local0
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Name (BADR, 0x0B)
        Name (CADR, 0x09)
        Name (SADR, 0x0A)
        Method (BIF0, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.IEC_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.IEC_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local1 = (Local0 >> 0x0F)
                    Local1 &= One
                    Local0 = (Local1 ^ One)
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF1, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Local0 = Ones
                    Return (Local0)
                }

                If (Arg0)
                {
                    Local0 = B1DC /* \_SB_.PCI0.SBRG.IEC_.B1DC */
                }
                Else
                {
                    Local0 = B0DC /* \_SB_.PCI0.SBRG.IEC_.B0DC */
                }

                Local0 &= 0xFFFF
                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF2, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1FC /* \_SB_.PCI0.SBRG.IEC_.B1FC */
                }
                Else
                {
                    Local0 = B0FC /* \_SB_.PCI0.SBRG.IEC_.B0FC */
                }

                Local0 &= 0xFFFF
                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF3, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.IEC_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.IEC_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local0 >>= 0x09
                    Local0 &= One
                    Local0 ^= One
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF4, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1DV /* \_SB_.PCI0.SBRG.IEC_.B1DV */
                }
                Else
                {
                    Local0 = B0DV /* \_SB_.PCI0.SBRG.IEC_.B0DV */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF9, 0, NotSerialized)
        {
            Name (BSTR, Buffer (0x20) {})
            If (BATP (One))
            {
                Local0 = SMBR (RDBL, BADR, 0x21, One)
            }

            If (BATP (Zero))
            {
                Local0 = SMBR (RDBL, BADR, 0x21, Zero)
            }

            If ((DerefOf (Local0 [Zero]) != Zero))
            {
                BSTR = MNAM /* \_SB_.MNAM */
                BSTR [0x04] = Zero
            }
            Else
            {
                BSTR = DerefOf (Local0 [0x02])
                BSTR [DerefOf (Local0 [One])] = Zero
            }

            Return (BSTR) /* \_SB_.PCI0.SBRG.IEC_.BIF9.BSTR */
        }

        Method (BIFA, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1SN /* \_SB_.PCI0.SBRG.IEC_.B1SN */
                }
                Else
                {
                    Local0 = B0SN /* \_SB_.PCI0.SBRG.IEC_.B0SN */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BSTS, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1ST /* \_SB_.PCI0.SBRG.IEC_.B1ST */
                }
                Else
                {
                    Local0 = B0ST /* \_SB_.PCI0.SBRG.IEC_.B0ST */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BCRT, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1CC /* \_SB_.PCI0.SBRG.IEC_.B1CC */
                }
                Else
                {
                    Local0 = B0CC /* \_SB_.PCI0.SBRG.IEC_.B0CC */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BRCP, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1RC /* \_SB_.PCI0.SBRG.IEC_.B1RC */
                }
                Else
                {
                    Local0 = B0RC /* \_SB_.PCI0.SBRG.IEC_.B0RC */
                }

                If ((Local0 == 0xFFFF))
                {
                    Local0 = Ones
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BVOT, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1VL /* \_SB_.PCI0.SBRG.IEC_.B1VL */
                }
                Else
                {
                    Local0 = B0VL /* \_SB_.PCI0.SBRG.IEC_.B0VL */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }
    }

    Scope (\)
    {
        Method (CHGS, 1, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.IEC.BCHG (Arg0)
            Return (Local0)
        }

        Name (BSLF, Zero)
        Method (BATS, 1, Serialized)
        {
            If (Arg0)
            {
                BSLF = One
            }
            Else
            {
                BSLF = Zero
            }
        }

        Method (BATR, 0, Serialized)
        {
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (BATP, 1, Serialized)
        {
            If (!(RRAM (0x0620) & 0x80))
            {
                Return (Zero)
            }

            If (Arg0)
            {
                Return (DCP2) /* \_SB_.DCP2 */
            }
            Else
            {
                Return (DCPF) /* \_SB_.DCPF */
            }
        }

        Method (NBAT, 1, NotSerialized)
        {
            If (BATP (Zero))
            {
                Notify (BAT0, Arg0)
            }
        }
    }

    Scope (\)
    {
        Name (MES4, Zero)
        Method (OEMS, 1, NotSerialized)
        {
            SBRS (Arg0)
            \_SB.PCI0.SBRG.IEC.EC0S (Arg0)
            \_SB.SLPN = Arg0
            \_SB.SLPT = Arg0
            DIAG ((Arg0 + 0xD0))
            If (Arg0)
            {
                STRP (One)
            }

            PRJS (Arg0)
            ISMI (0x9D)
        }

        Method (OEMW, 1, NotSerialized)
        {
            ISMI (0x9E)
            \_SB.SLPT = Zero
            \_SB.PCI0.SBRG.IEC.EC0W (Arg0)
            If ((Arg0 == 0x03)) {}
            SBRW (Arg0)
            If ((Arg0 == 0x04))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            PRJW (Arg0)
            DIAG ((Arg0 + 0xF0))
        }
    }

    Scope (WMI0)
    {
        Method (AGFN, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.GNBF)
            }

            Local0 = AGFB (Arg0)
            Local1 = ((Local0 >> 0x10) & 0xFFFF)
            Local0 &= 0xFFFF
            Local2 = GLEN (Arg0)
            If ((Local0 == One))
            {
                GVER (Arg0, Local2)
                STAS &= 0xFE
            }

            If ((Local0 == 0x02))
            {
                BSMI (Arg0)
                STAS &= 0xFE
            }

            AGLN (Arg0, Local0, Local1, Local2)
            OperationRegion (\PARM, SystemMemory, Arg0, 0x08)
            Field (PARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                STAS,   8, 
                EROR,   8
            }

            If ((STAS == One))
            {
                EROR = One
                STAS |= 0x02
            }

            STAS &= 0xFE
            STAS |= 0x80
            Return (Zero)
        }

        Method (AGFB, 1, NotSerialized)
        {
            OperationRegion (\PAR, SystemMemory, Arg0, 0x08)
            Field (PAR, DWordAcc, NoLock, Preserve)
            {
                FUNC,   32, 
                Offset (0x06), 
                STAS,   8, 
                EROR,   8
            }

            EROR = Zero
            STAS = One
            Return (FUNC) /* \WMI0.AGFB.FUNC */
        }

        Method (GLEN, 1, NotSerialized)
        {
            OperationRegion (\PARL, SystemMemory, Arg0, 0x08)
            Field (PARL, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                LEN,    16
            }

            Return (LEN) /* \WMI0.GLEN.LEN_ */
        }

        Method (GVER, 2, NotSerialized)
        {
            OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
            Field (FGVR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                APID,   16, 
                APRV,   32
            }

            If ((Arg1 < 0x0E))
            {
                Return (0x02)
            }

            If ((APID == One))
            {
                \_SB.PCI0.SBRG.IEC.PKEN (One)
            }

            Return (Zero)
        }

        Method (GENS, 1, NotSerialized)
        {
        }

        Method (GENW, 1, NotSerialized)
        {
            \_SB.RTCW = Zero
        }

        Method (BSMI, 1, Serialized)
        {
            \_SB.BIPA = Arg0
            ISMI (0xA1)
        }
    }

    Scope (WMI0)
    {
        Method (MF1X, 4, NotSerialized)
        {
            If (((Arg1 & 0xF0) != 0x10))
            {
                Return (Zero)
            }

            OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
            Field (FM1X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM1X,   8, 
                EM1X,   8
            }

            Local0 = One
            If ((Arg1 == 0x10))
            {
                Local0 = MF10 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x11))
            {
                Local0 = MF11 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x12))
            {
                Local0 = MF12 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x13))
            {
                Local0 = MF13 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x14))
            {
                Local0 = MF14 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x15))
            {
                Local0 = MF15 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x16))
            {
                Local0 = MF16 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x17))
            {
                Local0 = MF17 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x18))
            {
                Local0 = MF18 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x19))
            {
                Local0 = MF19 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x1A))
            {
                Local0 = MF1A (Arg0, Arg3, Arg2)
            }

            SM1X &= 0xFE
            If (Local0)
            {
                EM1X = Local0
                SM1X |= 0x02
            }

            SM1X |= 0x80
            Return (Zero)
        }

        Method (MF10, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G10V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = SRTC (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G10V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F100, SystemMemory, Arg0, Arg1)
            Field (F100, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (SRTC, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F101, SystemMemory, Arg0, Arg1)
            Field (F101, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DLTM,   16
            }

            \_SB.RTCW = DLTM /* \WMI0.SRTC.DLTM */
            Return (Zero)
        }

        Method (MF11, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G11V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GBAT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = ASBR (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = ASBE (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = BTCR (Arg0, Arg1)
            }

            If ((Arg2 == 0x80))
            {
                Local0 = GTSB (Arg0, Arg1)
            }

            If ((Arg2 == 0x81))
            {
                Local0 = GPST (Arg0, Arg1)
            }

            If ((Arg2 == 0x82))
            {
                Local0 = SBSM (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G11V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F110, SystemMemory, Arg0, Arg1)
            Field (F110, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GBAT, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F111, SystemMemory, Arg0, Arg1)
            Field (F111, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTTP,   8
            }

            BTNM = One
            BTTP = Zero
            Return (Zero)
        }

        Method (ASBR, 2, NotSerialized)
        {
            If ((Arg1 < 0x30))
            {
                Return (0x02)
            }

            OperationRegion (\F112, SystemMemory, Arg0, Arg1)
            Field (F112, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   16, 
                BLEN,   8, 
                BREV,   16, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            If ((BATN >= One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local0 = \_SB.PCI0.SBRG.IEC.SMBR (\_SB.PCI0.SBRG.IEC.RDWD, \_SB.PCI0.SBRG.IEC.BADR, REGS, BATN)
                BDAT = DerefOf (Local0 [0x02])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local0 = \_SB.PCI0.SBRG.IEC.SMBW (\_SB.PCI0.SBRG.IEC.WRWD, \_SB.PCI0.SBRG.IEC.BADR, REGS, BATN, 0x02, BDAT)
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x02))
            {
                Name (BKUF, Buffer (0x20) {})
                Local0 = \_SB.PCI0.SBRG.IEC.SMBR (\_SB.PCI0.SBRG.IEC.RDBL, \_SB.PCI0.SBRG.IEC.BADR, REGS, BATN)
                BKUF = DerefOf (Local0 [0x02])
                BLEN = DerefOf (Local0 [One])
                Local2 = DerefOf (Local0 [Zero])
                CreateDWordField (BKUF, Zero, DAT1)
                CreateDWordField (BKUF, 0x04, DAT2)
                CreateDWordField (BKUF, 0x08, DAT3)
                CreateDWordField (BKUF, 0x0C, DAT4)
                CreateDWordField (BKUF, 0x10, DAT5)
                CreateDWordField (BKUF, 0x14, DAT6)
                CreateDWordField (BKUF, 0x18, DAT7)
                CreateDWordField (BKUF, 0x1C, DAT8)
                BKUF = DerefOf (Local0 [0x02])
                BLK1 = DAT1 /* \WMI0.ASBR.DAT1 */
                BLK2 = DAT2 /* \WMI0.ASBR.DAT2 */
                BLK3 = DAT3 /* \WMI0.ASBR.DAT3 */
                BLK4 = DAT4 /* \WMI0.ASBR.DAT4 */
                BLK5 = DAT5 /* \WMI0.ASBR.DAT5 */
                BLK6 = DAT6 /* \WMI0.ASBR.DAT6 */
                BLK7 = DAT7 /* \WMI0.ASBR.DAT7 */
                BLK8 = DAT8 /* \WMI0.ASBR.DAT8 */
                BLEN = DerefOf (Local0 [One])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (ASBE, 2, Serialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F113, SystemMemory, Arg0, Arg1)
            Field (F113, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   8
            }

            If ((BATN > One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local2 = \_SB.PCI0.SBRG.IEC.RBEP (REGS)
                Local3 = (Local2 & 0xFF)
                BDAT = Local3
                Local2 >>= 0x08
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local2 = \_SB.PCI0.SBRG.IEC.WBEP (REGS, BDAT)
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (BTCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F114, SystemMemory, Arg0, Arg1)
            Field (F114, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BCDC,   8
            }

            SBTL (BCDC)
            Return (Zero)
        }

        Method (GTSB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0F))
            {
                Return (0x02)
            }

            OperationRegion (\F118, SystemMemory, Arg0, Arg1)
            Field (F118, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BAST,   16
            }

            Local0 = \_SB.PCI0.SBRG.IEC.SMBR (\_SB.PCI0.SBRG.IEC.RDWD, \_SB.PCI0.SBRG.IEC.BADR, 0x16, Zero)
            BAST = DerefOf (Local0 [0x02])
            Local1 = DerefOf (Local0 [Zero])
            Local1 &= 0x1F
            If (Local1)
            {
                Local1 += 0x10
            }

            Return (Local1)
        }

        Method (GPST, 2, NotSerialized)
        {
            If ((Arg1 < 0x0F))
            {
                Return (0x02)
            }

            OperationRegion (\F119, SystemMemory, Arg0, Arg1)
            Field (F119, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SORC,   8, 
                GPCT,   8
            }

            If (((SORC == Zero) | (SORC > 0x03)))
            {
                Return (One)
            }

            If ((SORC == One))
            {
                GPCT = \_SB.PCI0.SBRG.IEC.RPIN (0x02, 0x04)
            }
            ElseIf ((SORC == 0x02))
            {
                Local0 = \_SB.PCI0.SBRG.IEC.RPIN (0x02, 0x06)
                If (Local0)
                {
                    GPCT = Zero
                }
                Else
                {
                    GPCT = One
                }
            }

            Return (Zero)
        }

        Method (SBSM, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F1A3, SystemMemory, Arg0, Arg1)
            Field (F1A3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EABL,   8
            }

            If ((EABL == One))
            {
                PRJB ()
            }

            Return (Zero)
        }

        Method (MF12, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G12V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GLDI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = LDCR (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G12V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F120, SystemMemory, Arg0, Arg1)
            Field (F120, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GLDI, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F121, SystemMemory, Arg0, Arg1)
            Field (F121, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDI0,   32, 
                LDI1,   32
            }

            Local0 = Zero
            Local0 |= 0x10
            Local0 |= 0x20
            LDI0 = Local0
            Return (Zero)
        }

        Method (LDCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x0B))
            {
                Return (0x02)
            }

            OperationRegion (\F122, SystemMemory, Arg0, Arg1)
            Field (F122, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDNM,   8, 
                LCRT,   8
            }

            If ((LDNM == 0x04))
            {
                WLED (LCRT)
                Return (Zero)
            }

            If ((LDNM == 0x05))
            {
                BLED (LCRT)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (MF13, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G13V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GTSI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GTSV (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GVSN (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = GVSV (Arg0, Arg1)
            }

            If ((Arg2 == 0x05))
            {
                Local0 = GFNN (Arg0, Arg1)
            }

            If ((Arg2 == 0x06))
            {
                Local0 = GFNS (Arg0, Arg1)
            }

            If ((Arg2 == 0x07))
            {
                Local0 = SFNS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G13V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F130, SystemMemory, Arg0, Arg1)
            Field (F130, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GTSI, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F131, SystemMemory, Arg0, Arg1)
            Field (F131, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                THRI,   32
            }

            Local0 = Zero
            Local0 |= One
            If ((\_SB.CPUN >= One))
            {
                Local0 |= 0x0100
            }

            If ((\_SB.CPUN >= 0x02))
            {
                Local0 |= 0x0200
            }

            If ((\_SB.CPUN >= 0x03))
            {
                Local0 |= 0x0400
            }

            If ((\_SB.CPUN >= 0x04))
            {
                Local0 |= 0x0800
            }

            THRI = Local0
            Return (Zero)
        }

        Method (GTSV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F132, SystemMemory, Arg0, Arg1)
            Field (F132, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                TSNM,   8, 
                TSVL,   8, 
                TSST,   8
            }

            TSST = Zero
            If ((TSNM == Zero))
            {
                TSVL = \_TZ.RTMP ()
                Return (Zero)
            }

            If ((TSNM == 0x08))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x09))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x0A))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x0B))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (GVSN, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F133, SystemMemory, Arg0, Arg1)
            Field (F133, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NMVS,   8
            }

            NMVS = Zero
            Return (Zero)
        }

        Method (GVSV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0B))
            {
                Return (0x02)
            }

            OperationRegion (\F134, SystemMemory, Arg0, Arg1)
            Field (F134, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VSNM,   8, 
                VSVL,   16
            }

            If ((VSNM > Zero))
            {
                Return (0x10)
            }

            Return (Zero)
        }

        Method (GFNN, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F135, SystemMemory, Arg0, Arg1)
            Field (F135, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NMFN,   32
            }

            NMFN = One
            Return (Zero)
        }

        Method (GFNS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0D))
            {
                Return (0x02)
            }

            OperationRegion (\F136, SystemMemory, Arg0, Arg1)
            Field (F136, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNNM,   8, 
                GFNS,   32
            }

            If (((FNNM == Zero) | (FNNM > One)))
            {
                Return (0x10)
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (SFNS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F137, SystemMemory, Arg0, Arg1)
            Field (F137, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNNB,   8, 
                FNSP,   8
            }

            If ((FNNB > One))
            {
                Return (0x10)
            }

            \_SB.PCI0.SBRG.IEC.SFNV (FNNB, FNSP)
            Return (Zero)
        }

        Method (MF14, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G14V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GNBT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GBTS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G14V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F140, SystemMemory, Arg0, Arg1)
            Field (F140, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GNBT, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F141, SystemMemory, Arg0, Arg1)
            Field (F141, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NBBT,   8
            }

            NBBT = 0x05
            Return (Zero)
        }

        Method (GBTS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F142, SystemMemory, Arg0, Arg1)
            Field (F142, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTST,   8
            }

            Name (BTTB, Package (0x05)
            {
                Package (0x04)
                {
                    Zero, 
                    0x0C, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x0D, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x0E, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x0F, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x15, 
                    Zero, 
                    Zero
                }
            })
            If ((BTNM > 0x05))
            {
                Return (0x10)
            }

            Local0 = BTNM /* \WMI0.GBTS.BTNM */
            Local0--
            Local1 = DerefOf (BTTB [Local0])
            If ((DerefOf (Local1 [0x02]) == Zero))
            {
                Local2 = \_SB.PCI0.SBRG.IEC.RPIN (DerefOf (Local1 [Zero]), DerefOf (Local1 [One]
                    ))
            }

            If ((DerefOf (Local1 [One]) == One))
            {
                Local2 = RGPL (DerefOf (Local1 [Zero]), One)
            }

            If ((DerefOf (Local1 [One]) == 0x03)) {}
            If ((DerefOf (Local1 [0x02]) == Local2))
            {
                BTST = Zero
            }
            Else
            {
                BTST = One
            }

            Return (Zero)
        }

        Method (MF15, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G15V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GLDB (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = SLDB (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GDPI (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = SODP (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G15V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F150, SystemMemory, Arg0, Arg1)
            Field (F150, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GLDB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F151, SystemMemory, Arg0, Arg1)
            Field (F151, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LCDB,   8, 
                MLDB,   8
            }

            LCDB = GPLV ()
            MLDB = 0x07
            Return (Zero)
        }

        Method (SLDB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F152, SystemMemory, Arg0, Arg1)
            Field (F152, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LCDL,   8, 
                LTPE,   8
            }

            If ((LTPE == Zero))
            {
                If ((LCDL >= 0x08))
                {
                    Return (0x10)
                }

                SPLV (LCDL)
                Return (Zero)
            }

            If ((LTPE == One))
            {
                \_SB.PCI0.SBRG.IEC.SBRV (LCDL)
                Return (Zero)
            }

            Return (0x11)
        }

        Method (GDPI, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F153, SystemMemory, Arg0, Arg1)
            Field (F153, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ODPI,   32, 
                ODPC,   32, 
                ODAV,   32
            }

            Local0 = Zero
            Local0 |= One
            Local0 |= 0x02
            Local0 |= 0x10
            ODPI = Local0
            If (\_SB.PCI0.GFX0.PRST ())
            {
                \_SB.PCI0.GFX0.GETD ()
                Local0 = \_SB.ACTD
                ODAV = \_SB.PCI0.GFX0.MD2A (Local0)
                Local1 = \_SB.AVLD
                ODPC = \_SB.PCI0.GFX0.MD2A (Local1)
            }

            Return (Zero)
        }

        Method (SODP, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F154, SystemMemory, Arg0, Arg1)
            Field (F154, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ODPM,   32
            }

            Local0 = Zero
            Local0 |= One
            Local0 |= 0x02
            Local0 |= 0x10
            Local0 &= ODPM
            If ((Local0 == ODPM))
            {
                SDSP (ODPM)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (MF16, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G16V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = SFBD (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = LCMD (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = BSFN (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = PSSF (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G16V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F160, SystemMemory, Arg0, Arg1)
            Field (F160, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (SFBD, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F161, SystemMemory, Arg0, Arg1)
            Field (F161, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NXBD,   8
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (LCMD, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (BSFN, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (PSSF, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (MF17, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G17V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GMDL (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GBSI (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GECI (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G17V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F170, SystemMemory, Arg0, Arg1)
            Field (F170, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GMDL, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F171, SystemMemory, Arg0, Arg1)
            Field (F171, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                MLEN,   8, 
                MDL1,   32, 
                MDL2,   32, 
                MDL3,   32, 
                MDL4,   32
            }

            MDL1 = Zero
            MDL2 = Zero
            MDL3 = Zero
            MDL4 = Zero
            Name (BBUF, Buffer (0x10) {})
            CreateDWordField (BBUF, Zero, DAT1)
            CreateDWordField (BBUF, 0x04, DAT2)
            CreateDWordField (BBUF, 0x08, DAT3)
            CreateDWordField (BBUF, 0x0C, DAT4)
            Local0 = GBMN ()
            MLEN = SizeOf (Local0)
            BBUF = GBMN ()
            MDL1 = DAT1 /* \WMI0.GMDL.DAT1 */
            MDL2 = DAT2 /* \WMI0.GMDL.DAT2 */
            MDL3 = DAT3 /* \WMI0.GMDL.DAT3 */
            MDL4 = DAT4 /* \WMI0.GMDL.DAT4 */
            Return (Zero)
        }

        Method (GBSI, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F172, SystemMemory, Arg0, Arg1)
            Field (F172, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BLEN,   8, 
                BDL1,   32, 
                BDL2,   32, 
                BDL3,   32, 
                BDL4,   24, 
                YEAR,   32, 
                MON,    16, 
                DAY,    16
            }

            BDL1 = Zero
            BDL2 = Zero
            BDL3 = Zero
            BDL4 = Zero
            Name (BBUF, Buffer (0x10) {})
            CreateDWordField (BBUF, Zero, DAT1)
            CreateDWordField (BBUF, 0x04, DAT2)
            CreateDWordField (BBUF, 0x08, DAT3)
            CreateDWordField (BBUF, 0x0C, DAT4)
            Local0 = GBRV ()
            BLEN = SizeOf (Local0)
            BBUF = GBRV ()
            BDL1 = DAT1 /* \WMI0.GBSI.DAT1 */
            BDL2 = DAT2 /* \WMI0.GBSI.DAT2 */
            BDL3 = DAT3 /* \WMI0.GBSI.DAT3 */
            BDL4 = DAT4 /* \WMI0.GBSI.DAT4 */
            CreateWordField (BBUF, Zero, WRD0)
            BBUF = "2015"
            YEAR = DAT1 /* \WMI0.GBSI.DAT1 */
            BBUF = "08"
            MON = WRD0 /* \WMI0.GBSI.WRD0 */
            BBUF = "31"
            DAY = WRD0 /* \WMI0.GBSI.WRD0 */
            Return (Zero)
        }

        Method (GECI, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F173, SystemMemory, Arg0, Arg1)
            Field (F173, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ELEN,   8, 
                EDL1,   32, 
                EDL2,   32, 
                EDL3,   32, 
                EDL4,   32
            }

            EDL1 = Zero
            EDL2 = Zero
            EDL3 = Zero
            EDL4 = Zero
            BSMI (Arg0)
            Return (Zero)
        }

        Method (MF18, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G18V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GDVI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GDVS (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = SDPW (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G18V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F180, SystemMemory, Arg0, Arg1)
            Field (F180, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GDVI, 2, NotSerialized)
        {
            If ((Arg1 < 0x18))
            {
                Return (0x02)
            }

            OperationRegion (\F181, SystemMemory, Arg0, Arg1)
            Field (F181, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDI0,   32, 
                LDI1,   32
            }

            LDI0 = Zero
            Return (Zero)
        }

        Method (GDVS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F182, SystemMemory, Arg0, Arg1)
            Field (F182, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DNUM,   8, 
                DSTS,   8
            }

            Local0 = (One << DNUM) /* \WMI0.GDVS.DNUM */
            If (((Local0 & Zero) == Zero))
            {
                Return (0x10)
            }

            Return (Zero)
        }

        Method (SDPW, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F183, SystemMemory, Arg0, Arg1)
            Field (F183, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DNUM,   8, 
                DCTR,   8
            }

            Local0 = (One << DNUM) /* \WMI0.SDPW.DNUM */
            If (((Local0 & Zero) == Zero))
            {
                Return (0x10)
            }

            If ((DCTR > One))
            {
                Return (0x11)
            }

            Return (Zero)
        }

        Method (MF19, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G19V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = ACMS (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = CSIN (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G19V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F190, SystemMemory, Arg0, Arg1)
            Field (F190, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (ACMS, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (CSIN, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F192, SystemMemory, Arg0, Arg1)
            Field (F192, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                CMAX,   16
            }

            CMAX = 0x7F
            Return (Zero)
        }

        Method (MF1A, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G1AV (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GWDS (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = SWDS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G1AV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F1A0, SystemMemory, Arg0, Arg1)
            Field (F1A0, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GWDS, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F1A1, SystemMemory, Arg0, Arg1)
            Field (F1A1, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                WDS0,   32, 
                WDS1,   32
            }

            Local0 = Zero
            Local1 = Zero
            Local2 = Zero
            Local1 = RGPL (0x15, One)
            If (Local1)
            {
                Local0 |= 0x08
            }
            Else
            {
                Local0 &= 0xFFF7
            }

            If (\_SB.BTDP)
            {
                Local0 |= 0x10
            }

            Local1 = RGPL (0x14, One)
            If (Local1)
            {
                Local0 |= 0x20
            }
            Else
            {
                Local0 &= 0xFFDF
            }

            If (\_SB.WWDP)
            {
                Local0 |= 0x40
            }

            If (\_SB.WMDP)
            {
                Local0 |= 0x0100
            }

            WDS0 = Local0
            Return (Zero)
        }

        Method (SWDS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F1A2, SystemMemory, Arg0, Arg1)
            Field (F1A2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SWD0,   8, 
                SWD1,   8
            }

            Local0 = SWD0 /* \WMI0.SWDS.SWD0 */
            Local1 = (Local0 & One)
            Local1 >>= Zero
            OWLD (Local1)
            Local1 = (Local0 & 0x02)
            Local1 >>= One
            OBTD (Local1)
            Return (Zero)
        }
    }

    Scope (WMI0)
    {
        Method (AGLN, 4, NotSerialized)
        {
            CPUX (Arg0, Arg1, Arg2, Arg3)
            MF1X (Arg0, Arg1, Arg2, Arg3)
            \_SB.PCI0.SBRG.IEC.MF63 (Arg0, Arg1, Arg2, Arg3)
            \_SB.PCI0.SBRG.IEC.MF30 (Arg0, Arg1, Arg2, Arg3)
            HWSP (Arg0, Arg1, Arg2, Arg3)
            MF1F (Arg0, Arg1, Arg2, Arg3)
        }
    }

    Scope (WMI0)
    {
        Method (GBRV, 0, NotSerialized)
        {
            Local0 = "1.00"
            Return (Local0)
        }

        Method (GBMN, 0, NotSerialized)
        {
            Local0 = "MA30"
            Return (Local0)
        }
    }

    Scope (WMI0)
    {
        Name (_WDG, Buffer (0x01B8)
        {
            /* 0000 */  0x00, 0x24, 0x14, 0x39, 0xA3, 0xC6, 0xFA, 0x40,  // .$.9...@
            /* 0008 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0010 */  0x30, 0x30, 0x01, 0x01, 0x00, 0x24, 0x14, 0x49,  // 00...$.I
            /* 0018 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0020 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x31, 0x01, 0x01,  // R.A.01..
            /* 0028 */  0x00, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 0030 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0038 */  0x30, 0x32, 0x01, 0x01, 0x01, 0x24, 0x14, 0x49,  // 02...$.I
            /* 0040 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0048 */  0x52, 0x83, 0x41, 0x00, 0x31, 0x31, 0x01, 0x01,  // R.A.11..
            /* 0050 */  0x01, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 0058 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0060 */  0x31, 0x32, 0x01, 0x01, 0x02, 0x24, 0x14, 0x49,  // 12...$.I
            /* 0068 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0070 */  0x52, 0x83, 0x41, 0x00, 0x32, 0x31, 0x01, 0x01,  // R.A.21..
            /* 0078 */  0x02, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 0080 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0088 */  0x32, 0x32, 0x01, 0x01, 0x03, 0x24, 0x14, 0x49,  // 22...$.I
            /* 0090 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0098 */  0x52, 0x83, 0x41, 0x00, 0x33, 0x31, 0x01, 0x01,  // R.A.31..
            /* 00A0 */  0x03, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 00A8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 00B0 */  0x33, 0x32, 0x01, 0x01, 0x04, 0x24, 0x14, 0x49,  // 32...$.I
            /* 00B8 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 00C0 */  0x52, 0x83, 0x41, 0x00, 0x34, 0x31, 0x01, 0x01,  // R.A.41..
            /* 00C8 */  0x04, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 00D0 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 00D8 */  0x34, 0x32, 0x01, 0x01, 0x05, 0x24, 0x14, 0x49,  // 42...$.I
            /* 00E0 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 00E8 */  0x52, 0x83, 0x41, 0x00, 0x35, 0x31, 0x01, 0x01,  // R.A.51..
            /* 00F0 */  0x05, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 00F8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0100 */  0x35, 0x32, 0x01, 0x01, 0x06, 0x24, 0x14, 0x49,  // 52...$.I
            /* 0108 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0110 */  0x52, 0x83, 0x41, 0x00, 0x36, 0x31, 0x01, 0x01,  // R.A.61..
            /* 0118 */  0x06, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 0120 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0128 */  0x36, 0x32, 0x01, 0x01, 0x07, 0x24, 0x14, 0x49,  // 62...$.I
            /* 0130 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0138 */  0x52, 0x83, 0x41, 0x00, 0x37, 0x31, 0x01, 0x01,  // R.A.71..
            /* 0140 */  0x07, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
            /* 0148 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0150 */  0x37, 0x32, 0x01, 0x01, 0x00, 0x24, 0x14, 0x59,  // 72...$.Y
            /* 0158 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0160 */  0x52, 0x83, 0x41, 0x00, 0x80, 0x00, 0x01, 0x08,  // R.A.....
            /* 0168 */  0x00, 0x24, 0x14, 0x69, 0xA3, 0xC6, 0xFA, 0x40,  // .$.i...@
            /* 0170 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 0178 */  0x30, 0x35, 0x01, 0x02, 0x00, 0x24, 0x14, 0x79,  // 05...$.y
            /* 0180 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
            /* 0188 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x36, 0x01, 0x02,  // R.A.06..
            /* 0190 */  0x00, 0x24, 0x14, 0x89, 0xA3, 0xC6, 0xFA, 0x40,  // .$.....@
            /* 0198 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
            /* 01A0 */  0x30, 0x37, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // 07..!...
            /* 01A8 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
            /* 01B0 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x01   // ..).BA..
        })
        Name (EVCD, Zero)
        Method (WQ00, 1, NotSerialized)
        {
            Return (EVCD) /* \WMI0.EVCD */
        }

        OperationRegion (\WMIA, SystemMemory, \_SB.WMIB, 0x9000)
        Field (WMIA, AnyAcc, NoLock, Preserve)
        {
            WAG1,   2048, 
            WAG2,   2048, 
            WAG3,   2048, 
            WAG4,   2048, 
            WAG5,   2048, 
            WAG6,   2048, 
            WAG7,   2048, 
            WAG8,   2048, 
            Offset (0x1000), 
            WPD1,   32768, 
            WPD2,   32768, 
            WPD3,   32768, 
            WPD4,   32768, 
            WPD5,   32768, 
            WPD6,   32768, 
            WPD7,   32768, 
            WPD8,   32768
        }

        Method (WQ01, 1, NotSerialized)
        {
            Return (WAG1) /* \WMI0.WAG1 */
        }

        Method (WS01, 2, NotSerialized)
        {
            WAG1 = Arg1
            Return (Zero)
        }

        Method (WQ02, 1, NotSerialized)
        {
            Return (WPD1) /* \WMI0.WPD1 */
        }

        Method (WS02, 2, NotSerialized)
        {
            WPD1 = Arg1
            Return (Zero)
        }

        Method (WQ11, 1, NotSerialized)
        {
            Return (WAG2) /* \WMI0.WAG2 */
        }

        Method (WS11, 2, NotSerialized)
        {
            WAG2 = Arg1
            Return (Zero)
        }

        Method (WQ12, 1, NotSerialized)
        {
            Return (WPD2) /* \WMI0.WPD2 */
        }

        Method (WS12, 2, NotSerialized)
        {
            WPD2 = Arg1
            Return (Zero)
        }

        Method (WQ21, 1, NotSerialized)
        {
            Return (WAG3) /* \WMI0.WAG3 */
        }

        Method (WS21, 2, NotSerialized)
        {
            WAG3 = Arg1
            Return (Zero)
        }

        Method (WQ22, 1, NotSerialized)
        {
            Return (WPD3) /* \WMI0.WPD3 */
        }

        Method (WS22, 2, NotSerialized)
        {
            WPD3 = Arg1
            Return (Zero)
        }

        Method (WQ31, 1, NotSerialized)
        {
            Return (WAG4) /* \WMI0.WAG4 */
        }

        Method (WS31, 2, NotSerialized)
        {
            WAG4 = Arg1
            Return (Zero)
        }

        Method (WQ32, 1, NotSerialized)
        {
            Return (WPD4) /* \WMI0.WPD4 */
        }

        Method (WS32, 2, NotSerialized)
        {
            WPD4 = Arg1
            Return (Zero)
        }

        Method (WQ41, 1, NotSerialized)
        {
            Return (WAG5) /* \WMI0.WAG5 */
        }

        Method (WS41, 2, NotSerialized)
        {
            WAG5 = Arg1
            Return (Zero)
        }

        Method (WQ42, 1, NotSerialized)
        {
            Return (WPD5) /* \WMI0.WPD5 */
        }

        Method (WS42, 2, NotSerialized)
        {
            WPD5 = Arg1
            Return (Zero)
        }

        Method (WQ51, 1, NotSerialized)
        {
            Return (WAG6) /* \WMI0.WAG6 */
        }

        Method (WS51, 2, NotSerialized)
        {
            WAG6 = Arg1
            Return (Zero)
        }

        Method (WQ52, 1, NotSerialized)
        {
            Return (WPD6) /* \WMI0.WPD6 */
        }

        Method (WS52, 2, NotSerialized)
        {
            WPD6 = Arg1
            Return (Zero)
        }

        Method (WQ61, 1, NotSerialized)
        {
            Return (WAG7) /* \WMI0.WAG7 */
        }

        Method (WS61, 2, NotSerialized)
        {
            WAG7 = Arg1
            Return (Zero)
        }

        Method (WQ62, 1, NotSerialized)
        {
            Return (WPD7) /* \WMI0.WPD7 */
        }

        Method (WS62, 2, NotSerialized)
        {
            WPD7 = Arg1
            Return (Zero)
        }

        Method (WQ71, 1, NotSerialized)
        {
            Return (WAG8) /* \WMI0.WAG8 */
        }

        Method (WS71, 2, NotSerialized)
        {
            WAG8 = Arg1
            Return (Zero)
        }

        Method (WQ72, 1, NotSerialized)
        {
            Return (WPD8) /* \WMI0.WPD8 */
        }

        Method (WS72, 2, NotSerialized)
        {
            WPD8 = Arg1
            Return (Zero)
        }

        Method (WM05, 3, NotSerialized)
        {
            CreateDWordField (Arg2, Zero, WMA5)
            If ((WMA5 == One))
            {
                WMIG (\_SB.WMIB, (\_SB.WMIB + 0x1000), One)
                Return (Zero)
            }

            If ((WMA5 == 0x02))
            {
                WMIG ((\_SB.WMIB + 0x0100), (\_SB.WMIB + 0x2000), 0x02)
                Return (Zero)
            }

            If ((WMA5 == 0x03))
            {
                WMIG ((\_SB.WMIB + 0x0200), (\_SB.WMIB + 0x3000), 0x03)
                Return (Zero)
            }

            If ((WMA5 == 0x04))
            {
                WMIG ((\_SB.WMIB + 0x0300), (\_SB.WMIB + 0x4000), 0x04)
                Return (Zero)
            }

            If ((WMA5 == 0x05))
            {
                WMIG ((\_SB.WMIB + 0x0400), (\_SB.WMIB + 0x5000), 0x05)
                Return (Zero)
            }

            If ((WMA5 == 0x06))
            {
                WMIG ((\_SB.WMIB + 0x0500), (\_SB.WMIB + 0x6000), 0x06)
                Return (Zero)
            }

            If ((WMA5 == 0x07))
            {
                WMIG ((\_SB.WMIB + 0x0600), (\_SB.WMIB + 0x7000), 0x07)
                Return (Zero)
            }

            If ((WMA5 == 0x08))
            {
                WMIG ((\_SB.WMIB + 0x0700), (\_SB.WMIB + 0x8000), 0x08)
                Return (Zero)
            }

            Return (Zero)
        }

        Method (WM06, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, WM6A)
            Local0 = INIT (WM6A)
            Return (Local0)
        }

        Method (WM07, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, WM7A)
            Local0 = WDOG (WM7A)
            Return (Local0)
        }

        Method (NTFY, 1, Serialized)
        {
            If (!QNTY (Arg0))
            {
                Return (Zero)
            }

            EVCD = Arg0
            Notify (WMI0, 0x80) // Status Change
        }

        Method (WSMI, 1, Serialized)
        {
            \_SB.WMIS = Arg0
            ISMI (0xE3)
        }

        Name (WQBA, Buffer (0x0914)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x04, 0x09, 0x00, 0x00, 0x50, 0x67, 0x00, 0x00,  // ....Pg..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x28, 0xC7, 0xB2, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
            /* 0020 */  0x10, 0x2B, 0x10, 0x92, 0x2B, 0x81, 0x42, 0x04,  // .+..+.B.
            /* 0028 */  0x0A, 0x44, 0x24, 0x81, 0x30, 0x28, 0x0D, 0x20,  // .D$.0(. 
            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
            /* 0068 */  0x44, 0x49, 0x16, 0xB0, 0xA3, 0x30, 0x09, 0x3C,  // DI...0.<
            /* 0070 */  0x8A, 0xC8, 0x46, 0xE3, 0xD0, 0xD8, 0x61, 0x58,  // ..F...aX
            /* 0078 */  0x26, 0x98, 0x06, 0x71, 0x18, 0x65, 0x23, 0x8B,  // &..q.e#.
            /* 0080 */  0xC0, 0x13, 0xEA, 0x74, 0x74, 0x05, 0x08, 0x13,  // ...tt...
            /* 0088 */  0x20, 0x1E, 0x55, 0x18, 0xCD, 0x41, 0x91, 0x08,  //  .U..A..
            /* 0090 */  0xD0, 0x28, 0x31, 0x63, 0x22, 0xB0, 0x9D, 0x63,  // .(1c"..c
            /* 0098 */  0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9, 0x18,  // k..Q....
            /* 00A0 */  0x1A, 0xC1, 0x71, 0x85, 0xF7, 0xC8, 0x8E, 0x90,  // ..q.....
            /* 00A8 */  0x59, 0x1C, 0x8B, 0x20, 0x43, 0x85, 0xEB, 0x10,  // Y.. C...
            /* 00B0 */  0x4E, 0x73, 0x32, 0xC8, 0x89, 0x9C, 0x49, 0xEC,  // Ns2...I.
            /* 00B8 */  0x08, 0x05, 0x09, 0xB0, 0x8E, 0x21, 0xA4, 0x58,  // .....!.X
            /* 00C0 */  0x51, 0x6A, 0xC6, 0xD3, 0x0C, 0x82, 0x34, 0x0A,  // Qj....4.
            /* 00C8 */  0xA5, 0xC9, 0x79, 0x00, 0x61, 0xC2, 0xC3, 0x20,  // ..y.a.. 
            /* 00D0 */  0x30, 0xFE, 0x11, 0x61, 0x64, 0x40, 0xC8, 0x33,  // 0..ad@.3
            /* 00D8 */  0xB2, 0x86, 0x6A, 0x02, 0xBB, 0x17, 0xE0, 0x6C,  // ..j....l
            /* 00E0 */  0x6A, 0x32, 0x36, 0x39, 0x29, 0x9B, 0x1D, 0x41,  // j269)..A
            /* 00E8 */  0x68, 0x0B, 0x5E, 0xDA, 0x04, 0x18, 0x04, 0x13,  // h.^.....
            /* 00F0 */  0x4A, 0x24, 0x0F, 0xE5, 0x78, 0xA2, 0x54, 0x88,  // J$..x.T.
            /* 00F8 */  0xA4, 0xF1, 0xC5, 0x88, 0x52, 0x1C, 0x8A, 0x60,  // ....R..`
            /* 0100 */  0x23, 0xB6, 0x86, 0x21, 0x98, 0x98, 0x21, 0xE3,  // #..!..!.
            /* 0108 */  0x07, 0xB7, 0xFD, 0x83, 0x01, 0x53, 0x00, 0xD1,  // .....S..
            /* 0110 */  0x02, 0x88, 0x22, 0x8D, 0x06, 0x75, 0x18, 0x48,  // .."..u.H
            /* 0118 */  0xF0, 0x70, 0xE0, 0x71, 0x9E, 0xD6, 0xF9, 0x1D,  // .p.q....
            /* 0120 */  0xD7, 0x41, 0x04, 0x39, 0xE1, 0xE3, 0xAA, 0xF3,  // .A.9....
            /* 0128 */  0x54, 0x40, 0x46, 0xC6, 0xFE, 0xFF, 0x58, 0x09,  // T@F...X.
            /* 0130 */  0x3A, 0x38, 0x26, 0x40, 0x71, 0x0D, 0xA8, 0x69,  // :8&@q..i
            /* 0138 */  0x3E, 0x1D, 0xB0, 0x81, 0x86, 0xC3, 0x0C, 0xD1,  // >.......
            /* 0140 */  0xA3, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  // ..w....=
            /* 0148 */  0xA2, 0x07, 0x03, 0xEC, 0x10, 0x4F, 0xE6, 0x25,  // .....O.%
            /* 0150 */  0xA0, 0x54, 0x01, 0x66, 0x4F, 0x08, 0x9A, 0x76,  // .T.fO..v
            /* 0158 */  0x82, 0xE3, 0xF1, 0x71, 0xC0, 0xF3, 0x39, 0xE1,  // ...q..9.
            /* 0160 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED,  // ..?.....
            /* 0168 */  0x71, 0x9E, 0xD6, 0x5B, 0x81, 0x8F, 0x00, 0x26,  // q..[...&
            /* 0170 */  0xB0, 0x58, 0x08, 0x6D, 0x52, 0xE3, 0x01, 0x02,  // .X.mR...
            /* 0178 */  0x8A, 0x0F, 0x05, 0x42, 0x78, 0x75, 0xF0, 0x7C,  // ...Bxu.|
            /* 0180 */  0x4D, 0x30, 0x32, 0x84, 0x9C, 0x8C, 0x07, 0x35,  // M02....5
            /* 0188 */  0x0A, 0x83, 0xD6, 0x0A, 0xAE, 0x9B, 0x40, 0x02,  // ......@.
            /* 0190 */  0x47, 0x84, 0xD0, 0x67, 0xC3, 0xA2, 0x86, 0x4D,  // G..g...M
            /* 0198 */  0x8F, 0x16, 0xFC, 0x54, 0xC1, 0x20, 0xCF, 0xE0,  // ...T. ..
            /* 01A0 */  0x11, 0xC0, 0x23, 0x39, 0x21, 0x1F, 0x3E, 0x3C,  // ..#9!.><
            /* 01A8 */  0x30, 0xF8, 0xB3, 0xF0, 0x91, 0x02, 0x1C, 0x1E,  // 0.......
            /* 01B0 */  0xC1, 0x84, 0xF3, 0x0A, 0x01, 0x6B, 0xA4, 0xF0,  // .....k..
            /* 01B8 */  0x6F, 0x11, 0x46, 0xF6, 0xA9, 0xE1, 0xB5, 0x21,  // o.F....!
            /* 01C0 */  0x81, 0x0F, 0x1E, 0x81, 0xB1, 0x43, 0xB5, 0x5F,  // .....C._
            /* 01C8 */  0x01, 0x08, 0xC1, 0xA3, 0x3D, 0x0A, 0x3C, 0x7B,  // ....=.<{
            /* 01D0 */  0x44, 0x78, 0xDC, 0xC0, 0xFC, 0xFF, 0x8F, 0x1B,  // Dx......
            /* 01D8 */  0xB0, 0x09, 0x8A, 0x1C, 0x20, 0x7A, 0x0C, 0xFC,  // .... z..
            /* 01E0 */  0x04, 0x71, 0x0A, 0xF1, 0xC3, 0x1F, 0xC3, 0x11,  // .q......
            /* 01E8 */  0x45, 0x89, 0x7C, 0x48, 0x3E, 0x9C, 0x18, 0xE1,  // E.|H>...
            /* 01F0 */  0x10, 0x9E, 0x49, 0xCE, 0xC0, 0x07, 0x0C, 0x4F,  // ..I....O
            /* 01F8 */  0xEB, 0x14, 0x5E, 0x24, 0x3C, 0x02, 0x4C, 0xA0,  // ..^$<.L.
            /* 0200 */  0x43, 0x0C, 0x8D, 0xB2, 0x7E, 0x45, 0x80, 0x41,  // C...~E.A
            /* 0208 */  0x9D, 0x63, 0x00, 0x57, 0x30, 0xCF, 0x31, 0xE0,  // .c.W0.1.
            /* 0210 */  0x3B, 0x3E, 0xF0, 0x6B, 0x00, 0xE6, 0x7C, 0xF2,  // ;>.k..|.
            /* 0218 */  0x14, 0x03, 0x07, 0x97, 0x81, 0xBC, 0x04, 0xC4,  // ........
            /* 0220 */  0x79, 0x77, 0xF1, 0xCD, 0xC4, 0xD7, 0x02, 0xE3,  // yw......
            /* 0228 */  0x3E, 0xC4, 0x80, 0x61, 0x60, 0x0F, 0x31, 0xE0,  // >..a`.1.
            /* 0230 */  0xFC, 0xFF, 0x1F, 0x62, 0xE0, 0x05, 0x3F, 0xC4,  // ...b..?.
            /* 0238 */  0x00, 0x34, 0x91, 0x77, 0xBE, 0x90, 0x91, 0x55,  // .4.w...U
            /* 0240 */  0xF8, 0x10, 0x83, 0xBA, 0x21, 0x9C, 0xCF, 0x43,  // ....!..C
            /* 0248 */  0xCA, 0xD3, 0x01, 0x93, 0x73, 0xCE, 0xA0, 0x87,  // ....s...
            /* 0250 */  0x18, 0xE0, 0x01, 0x88, 0xF7, 0x3E, 0x65, 0x32,  // .....>e2
            /* 0258 */  0x82, 0x33, 0x35, 0xA0, 0x51, 0x7D, 0xAE, 0x00,  // .35.Q}..
            /* 0260 */  0xC7, 0x79, 0x82, 0xFF, 0xFF, 0xCF, 0x13, 0x18,  // .y......
            /* 0268 */  0xBC, 0xD7, 0x0A, 0x76, 0x0C, 0x60, 0x67, 0x0A,  // ...v.`g.
            /* 0270 */  0x38, 0x57, 0x0A, 0x9F, 0x5A, 0x7C, 0x4E, 0xF0,  // 8W..Z|N.
            /* 0278 */  0x18, 0xF9, 0x58, 0x0C, 0x1A, 0xF2, 0x41, 0xC0,  // ..X...A.
            /* 0280 */  0x0B, 0xB4, 0xAC, 0xB3, 0x0D, 0x68, 0x2E, 0x13,  // .....h..
            /* 0288 */  0xCF, 0x3D, 0xD8, 0xA3, 0x0D, 0x18, 0x90, 0x2A,  // .=.....*
            /* 0290 */  0xBD, 0x05, 0xE8, 0x02, 0x82, 0x23, 0xF0, 0xC1,  // .....#..
            /* 0298 */  0x06, 0xF8, 0xC4, 0x3A, 0xD5, 0xD0, 0x30, 0x63,  // ...:..0c
            /* 02A0 */  0x54, 0x10, 0x18, 0xD4, 0xC1, 0x06, 0x70, 0x75,  // T.....pu
            /* 02A8 */  0xE8, 0xF0, 0xC1, 0x06, 0x3C, 0xFF, 0xFF, 0x11,  // ....<...
            /* 02B0 */  0xB2, 0xC1, 0x9C, 0x44, 0x98, 0xA3, 0x08, 0xF6,  // ...D....
            /* 02B8 */  0x2C, 0xE1, 0x9B, 0x0D, 0x78, 0xB0, 0xB1, 0x27,  // ,...x..'
            /* 02C0 */  0x1B, 0xB0, 0x9C, 0x09, 0x9E, 0x6C, 0x80, 0x49,  // .....l.I
            /* 02C8 */  0xF8, 0x93, 0x0D, 0x40, 0x1E, 0xD8, 0x27, 0x81,  // ...@..'.
            /* 02D0 */  0x77, 0x80, 0xFF, 0xFF, 0x93, 0x0D, 0x60, 0xF1,  // w.....`.
            /* 02D8 */  0x4A, 0x81, 0x3D, 0xD9, 0x40, 0x5E, 0xBC, 0x4E,  // J.=.@^.N
            /* 02E0 */  0x36, 0xE0, 0x3A, 0x03, 0x82, 0xED, 0x08, 0x02,  // 6.:.....
            /* 02E8 */  0xF3, 0x6C, 0x03, 0x9C, 0xCE, 0x80, 0xC0, 0xE1,  // .l......
            /* 02F0 */  0xFF, 0x7F, 0x06, 0x04, 0x1C, 0x9E, 0x5B, 0x9E,  // ......[.
            /* 02F8 */  0x01, 0xC1, 0x75, 0xF2, 0x64, 0x67, 0x40, 0x70,  // ..u.dg@p
            /* 0300 */  0xA1, 0x3C, 0x03, 0x02, 0x66, 0xFF, 0xFF, 0x67,  // .<..f..g
            /* 0308 */  0x40, 0xC0, 0xD2, 0xE9, 0x80, 0x9D, 0x01, 0x01,  // @.......
            /* 0310 */  0x4E, 0xFD, 0xFF, 0x2F, 0x20, 0xFC, 0x0C, 0x08,  // N../ ...
            /* 0318 */  0x30, 0xEC, 0x66, 0x03, 0x1B, 0x1B, 0x7B, 0xB2,  // 0.f...{.
            /* 0320 */  0x01, 0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xEF,  // ....w...
            /* 0328 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE9, 0x64, 0x03,  // ....0.d.
            /* 0330 */  0x58, 0xFB, 0xFF, 0x9F, 0x01, 0x01, 0x63, 0x67,  // X.....cg
            /* 0338 */  0x1B, 0x60, 0x75, 0x06, 0x04, 0xBC, 0xFF, 0xFF,  // .`u.....
            /* 0340 */  0xCF, 0x80, 0xF8, 0x63, 0xCB, 0x33, 0x20, 0xB8,  // ...c.3 .
            /* 0348 */  0x70, 0x9F, 0x01, 0xC1, 0x87, 0xF1, 0x0C, 0x08,  // p.......
            /* 0350 */  0xF0, 0xEF, 0x74, 0xC0, 0x8E, 0x36, 0xFC, 0xFF,  // ..t..6..
            /* 0358 */  0x7F, 0x06, 0x04, 0x18, 0x75, 0x10, 0x60, 0x67,  // ....u.`g
            /* 0360 */  0x40, 0xC0, 0xD3, 0xFF, 0xFF, 0x0C, 0x08, 0x58,  // @......X
            /* 0368 */  0xBB, 0xD9, 0xC0, 0xC6, 0xC6, 0x9E, 0x6C, 0xC0,  // ......l.
            /* 0370 */  0x72, 0x06, 0xC4, 0x9D, 0x6C, 0xC0, 0x7F, 0x06,  // r...l...
            /* 0378 */  0x04, 0x5C, 0xFD, 0xFF, 0xCF, 0x80, 0x80, 0x95,  // .\......
            /* 0380 */  0x93, 0x0D, 0xE0, 0xF1, 0x0C, 0x08, 0xF8, 0x39,  // .......9
            /* 0388 */  0x0A, 0xFC, 0xFF, 0x9F, 0x01, 0x01, 0x6E, 0xCD,  // ......n.
            /* 0390 */  0xE1, 0x19, 0x10, 0x5C, 0x33, 0xF3, 0x19, 0x10,  // ...\3...
            /* 0398 */  0x6C, 0xF7, 0x1A, 0x9F, 0x01, 0xC1, 0xFF, 0xFF,  // l.......
            /* 03A0 */  0x3F, 0x03, 0x02, 0xEC, 0x39, 0x1D, 0xB0, 0xA3,  // ?...9...
            /* 03A8 */  0x0D, 0xE0, 0xEE, 0xFF, 0x7F, 0x06, 0x04, 0xEC,  // ........
            /* 03B0 */  0x1C, 0x04, 0xD8, 0x19, 0x10, 0xE0, 0xD6, 0xFF,  // ........
            /* 03B8 */  0xFF, 0x66, 0x03, 0x1F, 0x1B, 0x7B, 0xB2, 0x01,  // .f...{..
            /* 03C0 */  0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xFF, 0x19,  // ...w....
            /* 03C8 */  0x10, 0x60, 0xD0, 0xC9, 0x06, 0xF6, 0xFF, 0xFF,  // .`......
            /* 03D0 */  0x0C, 0x08, 0x30, 0xE9, 0x6C, 0x03, 0xAC, 0xCE,  // ..0.l...
            /* 03D8 */  0x80, 0xC0, 0xEF, 0xFF, 0x7F, 0x06, 0x04, 0x3C,  // .......<
            /* 03E0 */  0xDD, 0x5B, 0x9E, 0x01, 0xC1, 0x85, 0xFB, 0x0C,  // .[......
            /* 03E8 */  0x08, 0x3E, 0x88, 0x67, 0x40, 0xC0, 0xFA, 0xFF,  // .>.g@...
            /* 03F0 */  0xFF, 0x0C, 0x08, 0x98, 0x38, 0x1D, 0xB0, 0x33,  // ....8..3
            /* 03F8 */  0x20, 0xC0, 0xAC, 0x83, 0x00, 0x3B, 0xD8, 0xE0,  //  ....;..
            /* 0400 */  0xFF, 0xFF, 0x67, 0x40, 0x80, 0x4D, 0x37, 0x1B,  // ..g@.M7.
            /* 0408 */  0xD8, 0xD8, 0xD8, 0x93, 0x0D, 0x58, 0xCE, 0x80,  // .....X..
            /* 0410 */  0xB8, 0x93, 0x0D, 0xF8, 0xCF, 0x80, 0x70, 0xFE,  // ......p.
            /* 0418 */  0xFF, 0x67, 0x40, 0x80, 0x2D, 0x27, 0x1B, 0xC0,  // .g@.-'..
            /* 0420 */  0xE3, 0x95, 0x02, 0xF3, 0xFF, 0x3F, 0x03, 0x02,  // .....?..
            /* 0428 */  0x56, 0xCE, 0x36, 0xC0, 0xEA, 0x0C, 0x08, 0xF0,  // V.6.....
            /* 0430 */  0xE0, 0xE0, 0xF2, 0x66, 0x83, 0xF9, 0xFF, 0x9F,  // ...f....
            /* 0438 */  0x01, 0xC1, 0x80, 0xFB, 0x0C, 0x08, 0xBE, 0xFB,  // ........
            /* 0440 */  0xC1, 0x33, 0x20, 0xC0, 0xBF, 0xD3, 0x01, 0x3B,  // .3 ....;
            /* 0448 */  0xDA, 0x80, 0xE3, 0xFF, 0x7F, 0x06, 0x04, 0x58,  // .......X
            /* 0450 */  0x73, 0x10, 0x60, 0x67, 0x40, 0xC0, 0xE1, 0xFF,  // s.`g@...
            /* 0458 */  0xFF, 0x0C, 0x08, 0x98, 0xB9, 0xD9, 0xC0, 0xC6,  // ........
            /* 0460 */  0xC6, 0x9E, 0x6C, 0xC0, 0x72, 0x06, 0xC4, 0x9D,  // ..l.r...
            /* 0468 */  0x6C, 0xC0, 0x7F, 0x06, 0x04, 0x3C, 0xFE, 0xFF,  // l....<..
            /* 0470 */  0xCF, 0x80, 0xC0, 0xFC, 0x64, 0x03, 0x78, 0x3C,  // ....d.x<
            /* 0478 */  0x03, 0x02, 0x7E, 0xCE, 0x36, 0xB0, 0xFF, 0xFF,  // ..~.6...
            /* 0480 */  0x67, 0x40, 0x80, 0x3F, 0xDE, 0xCE, 0x80, 0x20,  // g@.?... 
            /* 0488 */  0xC3, 0x7D, 0x06, 0x04, 0xDF, 0xFD, 0xE0, 0x19,  // .}......
            /* 0490 */  0x10, 0xD8, 0xFD, 0xFF, 0xCF, 0x80, 0x00, 0x43,  // .......C
            /* 0498 */  0x4E, 0x07, 0xEC, 0x0C, 0x08, 0x78, 0xFD, 0xFF,  // N....x..
            /* 04A0 */  0x9F, 0x01, 0x01, 0x03, 0x07, 0x01, 0x76, 0x06,  // ......v.
            /* 04A8 */  0x04, 0xD8, 0x75, 0xB3, 0x81, 0xF9, 0xFF, 0xBF,  // ..u.....
            /* 04B0 */  0x60, 0xC1, 0x38, 0xD9, 0x80, 0xE5, 0x0C, 0x88,  // `.8.....
            /* 04B8 */  0x3B, 0xD9, 0x80, 0xFF, 0x0C, 0x08, 0x30, 0xE8,  // ;.....0.
            /* 04C0 */  0x64, 0x03, 0xE6, 0xFF, 0xFF, 0x19, 0x10, 0x60,  // d......`
            /* 04C8 */  0xCB, 0xD9, 0x06, 0x58, 0x9D, 0x01, 0x81, 0xFB,  // ...X....
            /* 04D0 */  0xFF, 0xFF, 0x0C, 0x08, 0xB8, 0x38, 0x1A, 0x3C,  // .....8.<
            /* 04D8 */  0x03, 0x82, 0xEB, 0x96, 0xE0, 0x33, 0x20, 0xD8,  // .....3 .
            /* 04E0 */  0xEE, 0x07, 0xCF, 0x80, 0x00, 0x23, 0xFE, 0xFF,  // .....#..
            /* 04E8 */  0x67, 0x40, 0x60, 0x7B, 0x3A, 0x60, 0x67, 0x40,  // g@`{:`g@
            /* 04F0 */  0x80, 0x59, 0x07, 0x01, 0x76, 0xB0, 0x01, 0xD7,  // .Y..v...
            /* 04F8 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE6, 0x66, 0x03,  // ....0.f.
            /* 0500 */  0x1B, 0x1B, 0x7B, 0xB2, 0x01, 0xCB, 0x19, 0x10,  // ..{.....
            /* 0508 */  0x77, 0xB2, 0x01, 0xFF, 0x19, 0x10, 0x7C, 0xFF,  // w.....|.
            /* 0510 */  0xFF, 0x33, 0x20, 0xC0, 0x88, 0x93, 0x0D, 0xE0,  // .3 .....
            /* 0518 */  0xF1, 0x0C, 0x08, 0x96, 0xFF, 0xFF, 0x19, 0x10,  // ........
            /* 0520 */  0x98, 0x9F, 0x6D, 0x80, 0x55, 0xB4, 0x83, 0x0D,  // ..m.U...
            /* 0528 */  0x2A, 0xCC, 0xD9, 0x06, 0x10, 0x3D, 0xEF, 0x87,  // *....=..
            /* 0530 */  0x0F, 0x1F, 0x0C, 0x7C, 0x10, 0xC0, 0xDC, 0x6C,  // ...|...l
            /* 0538 */  0xE0, 0xDC, 0x2A, 0x7C, 0x5D, 0xF1, 0x41, 0xC4,  // ..*|].A.
            /* 0540 */  0x87, 0x07, 0xF6, 0xFF, 0x87, 0x8A, 0x13, 0x9E,  // ........
            /* 0548 */  0x9F, 0x1C, 0x7C, 0xB6, 0x81, 0x7D, 0x9A, 0x79,  // ..|..}.y
            /* 0550 */  0x08, 0xC4, 0x21, 0x3C, 0xDB, 0x80, 0xFD, 0x4D,  // ..!<...M
            /* 0558 */  0xE1, 0x63, 0x81, 0xCF, 0x36, 0x00, 0x3F, 0x44,  // .c..6.?D
            /* 0560 */  0x1C, 0x30, 0xE4, 0x64, 0x3C, 0xA8, 0x51, 0x58,  // .0.d<.QX
            /* 0568 */  0xE3, 0x25, 0x81, 0x4C, 0xDB, 0x04, 0x43, 0x43,  // .%.L..CC
            /* 0570 */  0xE8, 0xB4, 0xE4, 0xB3, 0x0D, 0x38, 0xFF, 0xFF,  // .....8..
            /* 0578 */  0x67, 0x1B, 0x70, 0x9E, 0x4E, 0xF0, 0x67, 0x1B,  // g.p.N.g.
            /* 0580 */  0x30, 0x9D, 0x25, 0x30, 0x04, 0x1E, 0x32, 0xFC,  // 0.%0..2.
            /* 0588 */  0xD3, 0x0C, 0x3F, 0x3E, 0xBC, 0x3F, 0x24, 0xF0,  // ..?>.?$.
            /* 0590 */  0xB9, 0x0F, 0x6C, 0xA7, 0x0E, 0x38, 0x87, 0x19,  // ..l..8..
            /* 0598 */  0x60, 0x32, 0x26, 0xDC, 0x91, 0xC2, 0x43, 0xE0,  // `2&...C.
            /* 05A0 */  0x03, 0x68, 0x75, 0x7E, 0xE4, 0x58, 0x78, 0x56,  // .hu~.XxV
            /* 05A8 */  0xB8, 0xB3, 0x0C, 0x1F, 0x15, 0xE6, 0x74, 0x83,  // ......t.
            /* 05B0 */  0x8B, 0xF2, 0x3E, 0x30, 0x81, 0x82, 0xBC, 0x0B,  // ..>0....
            /* 05B8 */  0x24, 0xF2, 0x81, 0x40, 0x61, 0x7C, 0xBA, 0x01,  // $..@a|..
            /* 05C0 */  0x8E, 0xFF, 0xFF, 0xD3, 0x0D, 0xF0, 0x98, 0xA4,  // ........
            /* 05C8 */  0x4F, 0x37, 0x60, 0x83, 0x88, 0x18, 0xAC, 0x68,  // O7`....h
            /* 05D0 */  0x30, 0xDD, 0x9A, 0x70, 0xB7, 0x1B, 0x1C, 0x5E,  // 0..p...^
            /* 05D8 */  0xB8, 0x18, 0xA7, 0xC3, 0x10, 0xA2, 0x3C, 0xB0,  // ......<.
            /* 05E0 */  0x18, 0x99, 0x1F, 0x03, 0xC1, 0x70, 0x9B, 0x79,  // .....p.y
            /* 05E8 */  0xB6, 0x01, 0x2E, 0xE1, 0x0E, 0x05, 0xFA, 0x43,  // .......C
            /* 05F0 */  0xF9, 0x6C, 0x03, 0xF8, 0xFC, 0xFF, 0x9F, 0x6D,  // .l.....m
            /* 05F8 */  0x80, 0xCF, 0x41, 0x04, 0x77, 0x32, 0x01, 0xC3,  // ..A.w2..
            /* 0600 */  0x89, 0x01, 0xD6, 0xB1, 0x0D, 0xB8, 0x88, 0x5B,  // .......[
            /* 0608 */  0xA9, 0x4E, 0x3B, 0x16, 0x06, 0x22, 0x1B, 0x87,  // .N;.."..
            /* 0610 */  0x45, 0x3A, 0x54, 0x0B, 0xA1, 0xD2, 0x90, 0x7C,  // E:T....|
            /* 0618 */  0x04, 0x3A, 0xBB, 0x47, 0x85, 0xE7, 0x04, 0x01,  // .:.G....
            /* 0620 */  0x09, 0xD4, 0x10, 0x0E, 0x0F, 0xA1, 0xE8, 0xA3,  // ........
            /* 0628 */  0xA1, 0xC0, 0x0E, 0x0B, 0x46, 0x41, 0x3C, 0x7A,  // ....FA<z
            /* 0630 */  0x07, 0x81, 0xD0, 0xA1, 0x08, 0x7F, 0x62, 0xF0,  // ......b.
            /* 0638 */  0x7C, 0xDE, 0xF8, 0x4D, 0xF0, 0xB0, 0xF1, 0xB4,  // |..M....
            /* 0640 */  0x00, 0xEB, 0x62, 0xE0, 0x63, 0x00, 0x3F, 0x13,  // ..b.c.?.
            /* 0648 */  0xE2, 0x0F, 0xFD, 0x26, 0xE0, 0xC7, 0x1E, 0xF0,  // ...&....
            /* 0650 */  0x09, 0x3C, 0x0D, 0x80, 0x02, 0xC8, 0x93, 0xF7,  // .<......
            /* 0658 */  0xB1, 0xE6, 0x01, 0x80, 0xCD, 0xE1, 0xC9, 0xC6,  // ........
            /* 0660 */  0x68, 0xFF, 0xFF, 0x47, 0x1A, 0x9C, 0x8C, 0x95,  // h..G....
            /* 0668 */  0xEA, 0x4B, 0xE3, 0x33, 0xA3, 0xC7, 0xC5, 0xCF,  // .K.3....
            /* 0670 */  0x03, 0x3E, 0xB8, 0xB0, 0xB3, 0x01, 0xEE, 0x0C,  // .>......
            /* 0678 */  0x85, 0x81, 0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2,  // ...H9...
            /* 0680 */  0x1E, 0xF0, 0x43, 0x83, 0x2F, 0x1C, 0x9E, 0x99,  // ..C./...
            /* 0688 */  0xCF, 0x28, 0x3E, 0x6A, 0x80, 0xE5, 0x38, 0x05,  // .(>j..8.
            /* 0690 */  0xFF, 0xB0, 0x82, 0x3B, 0xC9, 0xC0, 0x9D, 0xE6,  // ...;....
            /* 0698 */  0x23, 0xC1, 0xA3, 0x9E, 0x87, 0x1E, 0xDE, 0x47,  // #......G
            /* 06A0 */  0x18, 0xCF, 0x2E, 0x88, 0xAF, 0x9D, 0xFC, 0xF2,  // ........
            /* 06A8 */  0x7D, 0x5A, 0xBE, 0xEF, 0xF8, 0xE8, 0x63, 0xA0,  // }Z....c.
            /* 06B0 */  0x27, 0x86, 0xA8, 0xAF, 0x27, 0x9E, 0x00, 0xBF,  // '...'...
            /* 06B8 */  0x50, 0x38, 0xC6, 0xA9, 0x88, 0x06, 0x5A, 0xA9,  // P8....Z.
            /* 06C0 */  0xA4, 0xAE, 0x99, 0xC2, 0xF8, 0x54, 0x04, 0xB8,  // .....T..
            /* 06C8 */  0x8A, 0x30, 0x78, 0x50, 0xFC, 0xFF, 0x4F, 0x45,  // .0xP..OE
            /* 06D0 */  0xD8, 0x1B, 0x86, 0x2F, 0x03, 0x3E, 0x14, 0x81,  // .../.>..
            /* 06D8 */  0xE5, 0x40, 0xE2, 0x89, 0xBD, 0x04, 0xF8, 0xDC,  // .@......
            /* 06E0 */  0x80, 0xC3, 0x39, 0x03, 0x7E, 0x32, 0x02, 0xC3,  // ..9.~2..
            /* 06E8 */  0x5D, 0xFB, 0xC9, 0x08, 0xB8, 0x44, 0x3B, 0x19,  // ]....D;.
            /* 06F0 */  0x01, 0x34, 0x39, 0xDF, 0xE1, 0xFE, 0xFF, 0x27,  // .49....'
            /* 06F8 */  0x23, 0x30, 0x9C, 0x1A, 0x60, 0x1C, 0x8C, 0x80,  // #0..`...
            /* 0700 */  0x8B, 0xA4, 0x83, 0x11, 0x95, 0x73, 0x30, 0x82,  // .....s0.
            /* 0708 */  0x72, 0x84, 0xC0, 0x1D, 0x8C, 0xC0, 0x3F, 0xA6,  // r.....?.
            /* 0710 */  0x33, 0x7A, 0x1D, 0x38, 0x75, 0x1F, 0x8C, 0x00,  // 3z.8u...
            /* 0718 */  0x73, 0xC3, 0xF5, 0xC1, 0x08, 0xF8, 0xFC, 0xFF,  // s.......
            /* 0720 */  0x0F, 0x46, 0xC0, 0xE5, 0x70, 0xE1, 0x83, 0x11,  // .F..p...
            /* 0728 */  0xB8, 0x0F, 0x0B, 0xFC, 0x10, 0x83, 0x25, 0x28,  // ......%(
            /* 0730 */  0xFE, 0x35, 0x64, 0x02, 0x85, 0x5A, 0xA4, 0x24,  // .5d..Z.$
            /* 0738 */  0x2F, 0x97, 0xC2, 0xF8, 0x4C, 0x04, 0xB8, 0x8A,  // /...L...
            /* 0740 */  0x71, 0x26, 0x02, 0x21, 0xC6, 0xE3, 0xB1, 0x11,  // q&.!....
            /* 0748 */  0xCF, 0x38, 0x6C, 0xB8, 0xE7, 0x8B, 0xA7, 0x22,  // .8l...."
            /* 0750 */  0xB0, 0xCF, 0xE1, 0x0C, 0xFA, 0xBC, 0x6E, 0xE9,  // ......n.
            /* 0758 */  0x54, 0x84, 0xFF, 0xFF, 0x9F, 0x8A, 0x60, 0x1C,  // T.....`.
            /* 0760 */  0x83, 0x9E, 0x8A, 0x80, 0x4B, 0xBC, 0x53, 0x11,  // ....K.S.
            /* 0768 */  0x40, 0x93, 0x13, 0xC4, 0x53, 0x11, 0xB8, 0xCE,  // @...S...
            /* 0770 */  0x0D, 0x30, 0xCF, 0x45, 0xE0, 0xFB, 0xFF, 0x9F,  // .0.E....
            /* 0778 */  0x8B, 0xE0, 0x3E, 0x08, 0x7C, 0x18, 0x22, 0xE7,  // ..>.|.".
            /* 0780 */  0x22, 0x74, 0x78, 0x2A, 0x1D, 0x22, 0x70, 0xB1,  // "tx*."p.
            /* 0788 */  0xCF, 0x45, 0x74, 0xD8, 0x0E, 0x4C, 0xA2, 0x43,  // .Et..L.C
            /* 0790 */  0xBD, 0xCF, 0x45, 0x3C, 0xE6, 0x91, 0x86, 0x82,  // ..E<....
            /* 0798 */  0x18, 0xD0, 0x19, 0xCE, 0x45, 0x68, 0x15, 0xE7,  // ....Eh..
            /* 07A0 */  0x22, 0xE4, 0x20, 0xDF, 0x16, 0xD8, 0xEC, 0x7C,  // ". ....|
            /* 07A8 */  0x0F, 0xE0, 0x37, 0x15, 0x5F, 0x8B, 0x18, 0x6E,  // ..7._..n
            /* 07B0 */  0x35, 0xD7, 0x1D, 0x14, 0x98, 0x6F, 0x45, 0x18,  // 5....oE.
            /* 07B8 */  0x5D, 0xA7, 0x22, 0x90, 0xE9, 0xBB, 0x14, 0x81,  // ].".....
            /* 07C0 */  0x1C, 0x9D, 0x9F, 0xA8, 0xC0, 0x87, 0xFF, 0x3C,  // .......<
            /* 07C8 */  0xE0, 0x21, 0x3C, 0x51, 0xC1, 0x3D, 0x13, 0xBC,  // .!<Q.=..
            /* 07D0 */  0xF5, 0xF8, 0x44, 0x05, 0xFB, 0x90, 0x4B, 0x4E,  // ..D...KN
            /* 07D8 */  0x54, 0x40, 0xE3, 0xFF, 0x7F, 0xA2, 0x02, 0x5F,  // T@....._
            /* 07E0 */  0xEC, 0x13, 0x15, 0xA0, 0xE7, 0x08, 0x82, 0x3B,  // .......;
            /* 07E8 */  0xB9, 0x82, 0xF5, 0x98, 0x81, 0x51, 0x68, 0xD3,  // .....Qh.
            /* 07F0 */  0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28,  // .F.V...(
            /* 07F8 */  0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xBB,  // ..V.J...
            /* 0800 */  0x0F, 0x58, 0xE2, 0x3B, 0x41, 0xC3, 0x75, 0x40,  // .X.;A.u@
            /* 0808 */  0x10, 0x1A, 0x89, 0x42, 0x20, 0x8E, 0xF2, 0xA7,  // ...B ...
            /* 0810 */  0x10, 0x88, 0x85, 0x78, 0x00, 0x61, 0x42, 0x57,  // ...x.aBW
            /* 0818 */  0x24, 0x10, 0x8B, 0x5B, 0x9B, 0x40, 0x1C, 0x0D,  // $..[.@..
            /* 0820 */  0x84, 0x46, 0x5F, 0x9D, 0x40, 0x1C, 0xD8, 0x07,  // .F_.@...
            /* 0828 */  0x08, 0x93, 0xFB, 0x26, 0x10, 0x88, 0xE3, 0x18,  // ...&....
            /* 0830 */  0x01, 0x61, 0x11, 0x5E, 0x54, 0x3A, 0x06, 0x10,  // .a.^T:..
            /* 0838 */  0x2B, 0x20, 0x4C, 0xA0, 0x16, 0x10, 0x26, 0xCB,  // + L...&.
            /* 0840 */  0x0C, 0x08, 0x0B, 0x05, 0x42, 0x43, 0x7F, 0x39,  // ....BC.9
            /* 0848 */  0x04, 0xE2, 0xA0, 0x76, 0x40, 0x98, 0x4C, 0x3D,  // ...v@.L=
            /* 0850 */  0x20, 0x2C, 0x86, 0x1F, 0x10, 0x26, 0x5E, 0xD1,  //  ,...&^.
            /* 0858 */  0x60, 0x28, 0x08, 0x95, 0xF6, 0xE6, 0xD2, 0x61,  // `(.....a
            /* 0860 */  0x82, 0x78, 0x02, 0x61, 0x61, 0x40, 0xE8, 0xFF,  // .x.aa@..
            /* 0868 */  0x3F, 0xAC, 0x28, 0x10, 0x16, 0xD1, 0xD5, 0x60,  // ?.(....`
            /* 0870 */  0xE8, 0xDB, 0x40, 0x20, 0x0E, 0xF0, 0x4C, 0x0A,  // ..@ ..L.
            /* 0878 */  0x42, 0x44, 0x3F, 0x25, 0x04, 0xE2, 0xC8, 0x20,  // BD?%... 
            /* 0880 */  0x54, 0xD2, 0x1F, 0x42, 0x43, 0x25, 0x7F, 0xA5,  // T..BC%..
            /* 0888 */  0x83, 0x61, 0x20, 0x34, 0xE6, 0x83, 0xE9, 0x50,  // .a 4...P
            /* 0890 */  0xD9, 0x5F, 0x4B, 0x20, 0x16, 0xA6, 0x0E, 0x84,  // ._K ....
            /* 0898 */  0x09, 0x77, 0x37, 0x54, 0xFA, 0x19, 0xD1, 0x60,  // .w7T...`
            /* 08A0 */  0x08, 0x08, 0x15, 0xF3, 0xA8, 0xD0, 0x50, 0xC9,  // ......P.
            /* 08A8 */  0x83, 0x22, 0x08, 0x91, 0x0F, 0x42, 0xE3, 0xBD,  // ."...B..
            /* 08B0 */  0x04, 0x34, 0x54, 0xF2, 0x21, 0xD0, 0x60, 0xC8,  // .4T.!.`.
            /* 08B8 */  0x1B, 0x47, 0x20, 0x96, 0xFC, 0x4A, 0xD3, 0x50,  // .G ..J.P
            /* 08C0 */  0xC9, 0x43, 0x41, 0x20, 0x0E, 0x09, 0x42, 0x45,  // .CA ..BE
            /* 08C8 */  0xBC, 0x72, 0x82, 0x90, 0xF0, 0xCF, 0x8B, 0x20,  // .r..... 
            /* 08D0 */  0x44, 0xBA, 0xD1, 0x41, 0xD0, 0xE7, 0xC5, 0x83,  // D..A....
            /* 08D8 */  0x01, 0xB3, 0x0A, 0xC2, 0x04, 0x69, 0x1D, 0x36,  // .....i.6
            /* 08E0 */  0x7D, 0x28, 0x14, 0xF0, 0x15, 0xD0, 0xE1, 0x20,  // }(..... 
            /* 08E8 */  0x88, 0x80, 0x2C, 0xD2, 0xED, 0x80, 0x29, 0x08,  // ..,...).
            /* 08F0 */  0x15, 0x63, 0x17, 0x90, 0x49, 0x03, 0x11, 0x90,  // .c..I...
            /* 08F8 */  0xE3, 0x0A, 0x06, 0x61, 0x62, 0x5F, 0x14, 0x41,  // ...ab_.A
            /* 0900 */  0x48, 0xAE, 0xE7, 0x51, 0x40, 0x12, 0x12, 0x44,  // H..Q@..D
            /* 0908 */  0xC7, 0x03, 0xF2, 0x84, 0x13, 0x90, 0xC3, 0x81,  // ........
            /* 0910 */  0x08, 0xC8, 0xFF, 0x7F                           // ....
        })
    }

    Scope (WMI0)
    {
        Name (WMIP, Zero)
        Method (INIT, 1, NotSerialized)
        {
            WMIP = One
            \_SB.ATKP = One
            WINI (Arg0)
            Return (Zero)
        }

        Name (PCDV, Zero)
        Method (WDOG, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                PCDV = \_SB.PTIM
                Return (0x3C)
            }

            If ((Arg0 == One))
            {
                If (\_SB.LID._LID ())
                {
                    PCDV = \_SB.PTIM
                    Return (One)
                }

                If ((\_TZ.RLTM () < \_SB.PTMP))
                {
                    PCDV = \_SB.PTIM
                    Return (One)
                }

                PCDV--
                If ((PCDV == Zero))
                {
                    PCDV = \_SB.PTIM
                    NTFY (0x6D)
                }

                Return (One)
            }

            Return (Zero)
        }

        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Return (Arg0)
        }

        Method (WMIG, 3, Serialized)
        {
            AGFN (Arg0)
            Local0 = CWMI (Arg0)
            If ((Local0 == Zero))
            {
                Return (Zero)
            }

            Local1 = ((Local0 >> 0x10) & 0xFFFF)
            Local0 &= 0xFFFF
            If (CWAC (Arg0))
            {
                Return (Zero)
            }

            If (((Local0 == 0x15) && (Local1 == 0x05)))
            {
                WSMI (Arg2)
                Return (Zero)
            }

            If (((Local0 == 0x64) | (Local0 == 0x67)))
            {
                WSMI (Arg2)
                Return (Zero)
            }

            Local2 = GLEN (Arg0)
            WGLN (Arg0, Arg1, Local0, Local1, Arg2)
            OperationRegion (\WMIF, SystemMemory, Arg0, 0x0100)
            Field (WMIF, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                STAS,   8, 
                REST,   8
            }

            If ((STAS != One))
            {
                Return (Zero)
            }

            STAS = 0x82
            REST = One
            Return (Zero)
        }

        Method (CWMI, 1, NotSerialized)
        {
            OperationRegion (\WMID, SystemMemory, Arg0, 0x0100)
            Field (WMID, DWordAcc, NoLock, Preserve)
            {
                FUNC,   32, 
                LEN,    16, 
                STAS,   8, 
                REST,   8
            }

            If (((REST & One) == Zero))
            {
                Return (Zero)
            }

            STAS = One
            REST = Zero
            Return (FUNC) /* \WMI0.CWMI.FUNC */
        }

        Method (CWAC, 1, NotSerialized)
        {
            OperationRegion (\WMIC, SystemMemory, Arg0, 0x0100)
            Field (WMIC, DWordAcc, NoLock, Preserve)
            {
                Offset (0x07), 
                REST,   8
            }

            ISMI (0xE4)
            Return (REST) /* \WMI0.CWAC.REST */
        }
    }

    Scope (WMI0)
    {
        Method (QNTY, 1, NotSerialized)
        {
            If ((OSFG >= OSW8)) {}
            Return (One)
        }
    }

    Scope (WMI0)
    {
        Method (WGLN, 5, NotSerialized)
        {
            WFLH (Arg0, Arg1, Arg2, Arg3, Arg4)
            GVBD (Arg0, Arg1, Arg2, Arg3, Arg4)
            \_SB.VALZ.WVLZ (Arg0, Arg1, Arg2, Arg3, Arg4)
            OWST (Arg0, Arg1, Arg2, Arg3, Arg4)
            BBSF (Arg0, Arg1, Arg2, Arg3, Arg4)
            HWID (Arg0, Arg1, Arg2, Arg3, Arg4)
            BACR (Arg0, Arg1, Arg2, Arg3, Arg4)
            POSR (Arg0, Arg1, Arg2, Arg3, Arg4)
            PSWC (Arg0, Arg1, Arg2, Arg3, Arg4)
            PSOW (Arg0, Arg1, Arg2, Arg3, Arg4)
            MF6A (Arg0, Arg1, Arg2, Arg3, Arg4)
        }
    }

    Scope (WMI0)
    {
        Method (WINI, 1, NotSerialized)
        {
        }
    }

    Scope (WMI0)
    {
        Method (FSMI, 1, NotSerialized)
        {
            \_SB.FSFN = Arg0
            Local0 = (Arg0 | 0xA0)
            ISMI (0x90)
            Return (\_SB.FSTA)
        }

        Method (FLSH, 1, NotSerialized)
        {
            \_SB.FSTA = Arg0
            FSMI (Zero)
        }

        Method (FINI, 1, NotSerialized)
        {
            \_SB.FADR = Arg0
            Return (FSMI (One))
        }

        Method (FERS, 1, NotSerialized)
        {
            \_SB.FSTA = Arg0
            Return (FSMI (0x02))
        }

        Method (FWRI, 1, NotSerialized)
        {
            \_SB.FADR = Arg0
            \_SB.FSIZ = 0x1000
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FWRP, 0, NotSerialized)
        {
            \_SB.FSIZ = Zero
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FEBW, 1, NotSerialized)
        {
            \_SB.FADR = Arg0
            Return (FSMI (0x04))
        }

        Method (FEBR, 1, NotSerialized)
        {
            \_SB.FADR = Arg0
            Return (FSMI (0x05))
        }

        Method (FEDW, 0, NotSerialized)
        {
            Return (FSMI (0x06))
        }

        Method (ECSR, 1, NotSerialized)
        {
            \_SB.FSTA = Arg0
            Return (FSMI (0x07))
        }

        Method (FLSC, 1, NotSerialized)
        {
            \_SB.FSTA = Arg0
            Return (FSMI (0x08))
        }

        Method (FIN2, 1, NotSerialized)
        {
            \_SB.FSTA = Zero
            Return (FSMI (0x80))
        }
    }

    Scope (WMI0)
    {
        Method (WFLH, 5, Serialized)
        {
            If ((Arg2 == 0x66))
            {
                If ((Arg3 == One))
                {
                    OperationRegion (\WFLS, SystemMemory, Arg0, 0x0100)
                    Field (WFLS, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x06), 
                        STAS,   8, 
                        REST,   8, 
                        FSFN,   8, 
                        FSTA,   16, 
                        FADR,   32, 
                        FSIZ,   16
                    }

                    \_SB.TRTY = 0x90
                    \_SB.FSFN = FSFN /* \WMI0.WFLH.FSFN */
                    \_SB.FSTA = FSTA /* \WMI0.WFLH.FSTA */
                    \_SB.FADR = FADR /* \WMI0.WFLH.FADR */
                    \_SB.FSIZ = FSIZ /* \WMI0.WFLH.FSIZ */
                    If ((FSFN == One))
                    {
                        \_SB.FADR = Arg1
                    }
                    ElseIf ((FSFN == 0x81))
                    {
                        \_SB.FADR = Arg1
                    }

                    ISMI (0x90)
                    Local0 = 0x012C
                    While ((Local0 && \_SB.TRTY))
                    {
                        Sleep (One)
                        Local0--
                    }

                    FSFN = \_SB.FSFN
                    FSTA = \_SB.FSTA
                    FADR = \_SB.FADR
                    FSIZ = \_SB.FSIZ
                    STAS &= 0xFE
                    STAS |= 0x80
                    Return (Zero)
                }
                Else
                {
                    WSMI (Arg4)
                    Return (Zero)
                }

                Return (Zero)
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (GBTT, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = EB0T /* \_SB_.PCI0.SBRG.IEC_.EB0T */
            }
            Else
            {
                Local0 = EB1T /* \_SB_.PCI0.SBRG.IEC_.EB1T */
            }

            Return (Local0)
        }

        Method (RRAM, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CDT2 = Local1
                CDT1 = Local0
                CMD1 = 0x80
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.SBRG.IEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WRAM, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CDT2 = Local1
                CDT1 = Local0
                CDT3 = Arg1
                CMD1 = 0x81
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (STBR, 0, Serialized)
        {
            Local0 = (VGAF & One)
            ISMI (0x9A)
        }

        Method (SBRV, 1, Serialized)
        {
            WBOV (Zero, Arg0)
        }

        Name (DECF, Zero)
        Method (SFNV, 2, Serialized)
        {
            Local1 = RRAM (0x0521)
            Local2 = RRAM (0x0522)
            Local3 = RRAM (0x0523)
            Local4 = RRAM (0x0524)
            If ((Arg0 == Zero))
            {
                Local3 |= 0x80
                Local4 |= 0x80
                If ((Local1 & 0x80))
                {
                    Local0 = (Local1 >> 0x04)
                    Local0 &= 0x03
                    If ((Local0 == Zero))
                    {
                        WRAM (0x0523, Local3)
                    }
                    ElseIf ((Local0 == One))
                    {
                        WRAM (0x0524, Local4)
                    }
                    ElseIf ((Local0 == 0x02))
                    {
                        WRAM (0x0523, Local3)
                        WRAM (0x0524, Local4)
                    }
                }

                If ((Local2 & 0x80))
                {
                    Local0 = (Local2 >> 0x04)
                    Local0 &= 0x03
                    If ((Local0 == Zero))
                    {
                        WRAM (0x0523, Local3)
                    }
                    ElseIf ((Local0 == One))
                    {
                        WRAM (0x0524, Local4)
                    }
                    ElseIf ((Local0 == 0x02))
                    {
                        WRAM (0x0523, Local3)
                        WRAM (0x0524, Local4)
                    }
                }

                Return (Zero)
            }

            Local3 &= 0x7F
            Local4 &= 0x7F
            WRAM (0x0523, Local3)
            WRAM (0x0524, Local4)
            WFOV (Arg0--, Arg1)
            Return (Zero)
        }

        Method (SPIN, 3, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                Local1 = Arg1
                If ((Local0 >= 0x41))
                {
                    Local0 -= 0x41
                }

                Local0 <<= 0x04
                Local0 |= Local1
                CDT2 = Local0
                If ((Arg2 == One))
                {
                    Local2 = 0x20
                }
                Else
                {
                    Local2 = 0x40
                }

                CDT1 = Local2
                CMD1 = 0x87
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (RPIN, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                If ((Local0 >= 0x41))
                {
                    Local0 -= 0x41
                }

                Local0 <<= 0x04
                Local0 |= Arg1
                CDT2 = Local0
                CDT1 = Zero
                CMD1 = 0x87
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.SBRG.IEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Name (WRQK, 0x02)
        Name (RDQK, 0x03)
        Name (SDBT, 0x04)
        Name (RCBT, 0x05)
        Name (WRBT, 0x06)
        Name (RDBT, 0x07)
        Name (WRWD, 0x08)
        Name (RDWD, 0x09)
        Name (WRBL, 0x0A)
        Name (RDBL, 0x0B)
        Name (WBLP, 0x8A)
        Name (RBLP, 0x8B)
        Name (PCLL, 0x0C)
        Name (GOOD, Zero)
        Name (UKER, 0x07)
        Name (DAER, 0x10)
        Name (DERR, 0x11)
        Name (CMDN, 0x12)
        Name (UKE2, 0x13)
        Name (DADN, 0x17)
        Name (SBTO, 0x18)
        Name (USPT, 0x19)
        Name (SBBY, 0x1A)
        Method (SMBR, 4, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If ((Arg0 != RDBL))
            {
                If ((Arg0 != RDWD))
                {
                    If ((Arg0 != RDBT))
                    {
                        If ((Arg0 != RCBT))
                        {
                            If ((Arg0 != RDQK))
                            {
                                If ((Arg0 != RBLP))
                                {
                                    Return (Local0)
                                }
                            }
                        }
                    }
                }
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                If ((Arg3 == Zero))
                {
                    CDT1 = Zero
                }

                If ((Arg3 == One))
                {
                    CDT1 = One
                }

                CDT2 = Arg0
                Local1 = (Arg1 << One)
                CDT3 = Local1
                CDT4 = Arg2
                CDT5 = Zero
                CMD1 = 0x9A
                ESEM = 0x0F
                Local2 = 0x7F
                While ((Local2 && CMD1))
                {
                    Sleep (One)
                    Local2--
                }

                If ((CMD1 == Zero))
                {
                    If ((EDA1 == 0x80))
                    {
                        Local0 [Zero] = GOOD /* \_SB_.PCI0.SBRG.IEC_.GOOD */
                    }
                    Else
                    {
                        Local0 [Zero] = UKER /* \_SB_.PCI0.SBRG.IEC_.UKER */
                    }

                    If ((Arg0 == RDBL))
                    {
                        Local0 [One] = NBCN /* \_SB_.PCI0.SBRG.IEC_.NBCN */
                        Local0 [0x02] = NBDA /* \_SB_.PCI0.SBRG.IEC_.NBDA */
                    }

                    If ((Arg0 == RBLP))
                    {
                        Local0 [One] = NBCN /* \_SB_.PCI0.SBRG.IEC_.NBCN */
                        Local0 [0x02] = NBDA /* \_SB_.PCI0.SBRG.IEC_.NBDA */
                    }

                    If ((Arg0 == RDWD))
                    {
                        Local0 [One] = 0x02
                        Local1 = EDA2 /* \_SB_.PCI0.SBRG.IEC_.EDA2 */
                        Local1 <<= 0x08
                        Local1 |= EDA3 /* \_SB_.PCI0.SBRG.IEC_.EDA3 */
                        Local0 [0x02] = Local1
                    }

                    If ((Arg0 == RDBT))
                    {
                        Local0 [One] = One
                        Local0 [0x02] = EDA2 /* \_SB_.PCI0.SBRG.IEC_.EDA2 */
                    }

                    If ((Arg0 == RCBT))
                    {
                        Local0 [One] = One
                        Local0 [0x02] = EDA2 /* \_SB_.PCI0.SBRG.IEC_.EDA2 */
                    }
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Method (SMBW, 6, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If ((Arg0 != WRBL))
            {
                If ((Arg0 != WRWD))
                {
                    If ((Arg0 != WRBT))
                    {
                        If ((Arg0 != SDBT))
                        {
                            If ((Arg0 != WRQK))
                            {
                                If ((Arg0 != WBLP))
                                {
                                    Return (Local0)
                                }
                            }
                        }
                    }
                }
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                If ((Arg3 == Zero))
                {
                    CDT1 = Zero
                }

                If ((Arg3 == One))
                {
                    CDT1 = One
                }

                CDT2 = Arg0
                Local1 = (Arg1 << One)
                CDT3 = Local1
                CDT4 = Arg2
                If ((Arg0 == WRBL))
                {
                    CDT5 = Arg4
                    BDAT = Arg5
                }

                If ((Arg0 == WBLP))
                {
                    CDT5 = Arg4
                    BDAT = Arg5
                }

                If ((Arg0 == WRWD))
                {
                    CDT5 = Zero
                    Local3 = (Arg5 & 0xFF)
                    CDT6 = Local3
                    Local3 = (Arg5 & 0xFF00)
                    Local3 >>= 0x08
                    CDT7 = Local3
                }

                If ((Arg0 == WRBT))
                {
                    CDT5 = Zero
                    CDT6 = Arg5
                }

                If ((Arg0 == SDBT))
                {
                    CDT5 = Zero
                    CDT6 = Arg5
                }

                CMD1 = 0x9A
                ESEM = 0x0F
                Local2 = 0x7F
                While ((Local2 && CMD1))
                {
                    Sleep (One)
                    Local2--
                }

                If ((CMD1 == Zero))
                {
                    If ((EDA1 == 0x80))
                    {
                        Local0 [Zero] = GOOD /* \_SB_.PCI0.SBRG.IEC_.GOOD */
                    }
                    Else
                    {
                        Local0 [Zero] = UKER /* \_SB_.PCI0.SBRG.IEC_.UKER */
                    }
                }
                Else
                {
                    Local0 [Zero] = UKER /* \_SB_.PCI0.SBRG.IEC_.UKER */
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Mutex (MUEP, 0x00)
        Method (RBEP, 1, NotSerialized)
        {
            Return (Zero)
        }

        Method (WBEP, 2, NotSerialized)
        {
            Return (Zero)
        }

        Method (SDAC, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CMD1 = 0x86
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (ECXT, 6, NotSerialized)
        {
            Local1 = Package (0x06)
                {
                    0x10, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg1
                CDT2 = Arg2
                CDT3 = Arg3
                CDT4 = Arg4
                CDT5 = Arg5
                CMD1 = Arg0
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local1 [Zero] = Zero
                    Local1 [One] = EDA1 /* \_SB_.PCI0.SBRG.IEC_.EDA1 */
                    Local1 [0x02] = EDA2 /* \_SB_.PCI0.SBRG.IEC_.EDA2 */
                    Local1 [0x03] = EDA3 /* \_SB_.PCI0.SBRG.IEC_.EDA3 */
                    Local1 [0x04] = EDA4 /* \_SB_.PCI0.SBRG.IEC_.EDA4 */
                    Local1 [0x05] = EDA5 /* \_SB_.PCI0.SBRG.IEC_.EDA5 */
                }
                Else
                {
                    Local1 [Zero] = 0x10
                }

                Release (MUEC)
            }

            Return (Local1)
        }

        Method (ECXL, 1, NotSerialized)
        {
            Local2 = Package (0x0D)
                {
                    0x10, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            Local1 = Arg0
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                CDT1 = DerefOf (Local1 [One])
                CDT2 = DerefOf (Local1 [0x02])
                CDT3 = DerefOf (Local1 [0x03])
                CDT4 = DerefOf (Local1 [0x04])
                CDT5 = DerefOf (Local1 [0x05])
                CDT6 = DerefOf (Local1 [0x06])
                CDT7 = DerefOf (Local1 [0x07])
                CDT8 = DerefOf (Local1 [0x08])
                CDT9 = DerefOf (Local1 [0x09])
                CD10 = DerefOf (Local1 [0x0A])
                CD11 = DerefOf (Local1 [0x0B])
                CD12 = DerefOf (Local1 [0x0C])
                CMD1 = DerefOf (Local1 [Zero])
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local2 [Zero] = Zero
                    Local2 [One] = EDA1 /* \_SB_.PCI0.SBRG.IEC_.EDA1 */
                    Local2 [0x02] = EDA2 /* \_SB_.PCI0.SBRG.IEC_.EDA2 */
                    Local2 [0x03] = EDA3 /* \_SB_.PCI0.SBRG.IEC_.EDA3 */
                    Local2 [0x04] = EDA4 /* \_SB_.PCI0.SBRG.IEC_.EDA4 */
                    Local2 [0x05] = EDA5 /* \_SB_.PCI0.SBRG.IEC_.EDA5 */
                    Local2 [0x06] = EDA6 /* \_SB_.PCI0.SBRG.IEC_.EDA6 */
                    Local2 [0x07] = EDA7 /* \_SB_.PCI0.SBRG.IEC_.EDA7 */
                    Local2 [0x08] = EDA8 /* \_SB_.PCI0.SBRG.IEC_.EDA8 */
                    Local2 [0x09] = EDA9 /* \_SB_.PCI0.SBRG.IEC_.EDA9 */
                    Local2 [0x0A] = ED10 /* \_SB_.PCI0.SBRG.IEC_.ED10 */
                    Local2 [0x0B] = ED11 /* \_SB_.PCI0.SBRG.IEC_.ED11 */
                    Local2 [0x0C] = ED12 /* \_SB_.PCI0.SBRG.IEC_.ED12 */
                }
                Else
                {
                    Local2 [Zero] = 0x10
                }

                Release (MUEC)
            }

            Return (Local2)
        }

        Method (ECSB, 6, NotSerialized)
        {
            Local1 = Package (0x05)
                {
                    0x11, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            If ((Arg0 > One))
            {
                Return (Local1)
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CDT3 = Arg2
                CDT4 = Arg3
                CDT5 = Zero
                CDT6 = Arg4
                CDT7 = Arg5
                CMD1 = 0x9A
                ESEM = 0x0F
                Local2 = 0x7F
                While ((Local2 && CMD1))
                {
                    Sleep (One)
                    Local2--
                }

                If ((CMD1 == Zero))
                {
                    If ((EDA1 == 0x80))
                    {
                        Local1 [Zero] = Zero
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }

                    Local1 [One] = EDA2 /* \_SB_.PCI0.SBRG.IEC_.EDA2 */
                    Local1 [0x02] = EDA3 /* \_SB_.PCI0.SBRG.IEC_.EDA3 */
                    Local1 [0x03] = EDA4 /* \_SB_.PCI0.SBRG.IEC_.EDA4 */
                    Local1 [0x04] = EDA5 /* \_SB_.PCI0.SBRG.IEC_.EDA5 */
                }
                Else
                {
                    Local1 [Zero] = 0x10
                }

                Release (MUEC)
            }

            Return (Local1)
        }

        OperationRegion (KAID, SystemIO, 0x025C, One)
        Field (KAID, ByteAcc, NoLock, Preserve)
        {
            AEID,   8
        }

        OperationRegion (KAIC, SystemIO, 0x025D, One)
        Field (KAIC, ByteAcc, NoLock, Preserve)
        {
            AEIC,   8
        }

        Method (WEIE, 0, Serialized)
        {
            Local0 = 0x4000
            Local1 = (AEIC & 0x02)
            While (((Local0 != Zero) && (Local1 == 0x02)))
            {
                Local1 = (AEIC & 0x02)
                Local0--
            }
        }

        Method (WEOF, 0, Serialized)
        {
            Local0 = 0x4000
            Local1 = (AEIC & One)
            While (((Local0 != Zero) && (Local1 == Zero)))
            {
                Local1 = (AEIC & One)
                Local0--
            }
        }

        Method (RFOV, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0x83
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.SBRG.IEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WFOV, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CMD1 = 0x84
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (RBOV, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0x85
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.SBRG.IEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WBOV, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CMD1 = 0x86
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (PKEN, 1, NotSerialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0xB1
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (FNLK, 1, NotSerialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0xB0
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (C1MD, 2, Serialized)
        {
            Local0 = Zero
            Local1 = 0x0470
            While ((Local0 < Arg0))
            {
                Local2 = DerefOf (Arg1 [Local0])
                WRAM (Local1, Local2)
                Local0++
                Local1++
            }

            ECXT (0xC1, Arg0, Zero, Zero, Zero, Zero)
        }

        Method (PTPP, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESMP)))
                {
                    Sleep (0x02)
                    Local6--
                }

                MCMD = 0x97
                MCDB = Arg0
                ESMP = 0x0F
                Local0 = 0x7F
                Local1 = 0x0F
                While (((Local0 && MCMD) && (Local1 & ESMP)))
                {
                    Sleep (One)
                    Local0--
                }

                If (((MCMD == Zero) && (ESMP == 0xF0)))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
        Name (PSVF, Zero)
        Name (CRTF, Zero)
    }

    Scope (_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 = (0x0100 - Local0)
                Local0 *= 0x0A
                Local0 = (0x0AAC - Local0)
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (CELC, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Divide (Local0, 0x0A, Local1, Local0)
            Return (Local0)
        }

        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                RCRT ()
                Return (KELV (\_SB.TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > \_SB.TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                If ((Local0 >= \_SB.TCRT))
                {
                    Local2 = \_SB.PCI0.SBRG.IEC.RRAM (0x051C)
                    Local2 &= 0x02
                    If (!Local2)
                    {
                        Local0 = (\_SB.TCRT - One)
                    }
                }

                Return (KELV (Local0))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                If ((\_SB.CPUN == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If ((\_SB.CPUN == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1) /* \TC1_ */
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2) /* \TC2_ */
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                RPSV ()
                If (PLCY)
                {
                    Return (KELV (\_SB.PPSV))
                }
                Else
                {
                    Return (KELV (\_SB.TPSV))
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Arg0
                Notify (THRM, 0x81) // Thermal Trip Point Change
            }
        }
    }

    Scope (_TZ)
    {
        Name (ATMP, 0x3C)
        Name (LTMP, 0x3C)
        Name (FANS, Zero)
        Method (RTMP, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.IEC.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.IEC.TH0R
                If ((Local0 < 0x80))
                {
                    LTMP = Local0
                }
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (RLTM, 0, NotSerialized)
        {
            Return (ATMP) /* \_TZ_.ATMP */
        }

        Method (RCRT, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.IEC.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.IEC.ECRT
                If ((Local0 < 0x80))
                {
                    \_SB.TCRT = Local0
                }
            }
        }

        Method (RPSV, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.IEC.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.IEC.EPSV
                If ((Local0 < 0x80))
                {
                    Local0--
                    \_SB.TPSV = Local0
                }

                \_SB.PPSV = \_SB.PCI0.SBRG.IEC.RRAM (0x0534)
            }
        }

        Method (RFAN, 1, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.IEC.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.IEC.TACH (Arg0)
                Divide (Local0, 0x64, Local1, Local0)
                Local0 += One
                If ((Local0 <= 0x3C))
                {
                    FANS = Local0
                }
                Else
                {
                    Local0 = FANS /* \_TZ_.FANS */
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (RFSE, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (TCHG, 0, NotSerialized)
        {
        }

        Method (THDL, 0, NotSerialized)
        {
        }

        Method (TMSS, 1, NotSerialized)
        {
        }

        Method (TMSW, 1, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (PWAC, 1, Serialized)
        {
            If ((Arg0 >= 0x08))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = Arg0
            }

            If ((Local0 == Zero))
            {
                Return (AB00) /* \_SB_.AB00 */
            }

            If ((Local0 == One))
            {
                Return (AB01) /* \_SB_.AB01 */
            }

            If ((Local0 == 0x02))
            {
                Return (AB02) /* \_SB_.AB02 */
            }

            If ((Local0 == 0x03))
            {
                Return (AB03) /* \_SB_.AB03 */
            }

            If ((Local0 == 0x04))
            {
                Return (AB04) /* \_SB_.AB04 */
            }

            If ((Local0 == 0x05))
            {
                Return (AB05) /* \_SB_.AB05 */
            }

            If ((Local0 == 0x06))
            {
                Return (AB06) /* \_SB_.AB06 */
            }

            If ((Local0 == 0x07))
            {
                Return (AB07) /* \_SB_.AB07 */
            }

            If ((Local0 == 0x08))
            {
                Return (AB08) /* \_SB_.AB08 */
            }

            If ((Local0 == 0x09))
            {
                Return (AB09) /* \_SB_.AB09 */
            }

            If ((Local0 == 0x0A))
            {
                Return (AB0A) /* \_SB_.AB0A */
            }

            If ((Local0 == 0x0B))
            {
                Return (AB0B) /* \_SB_.AB0B */
            }

            If ((Local0 == 0x0C))
            {
                Return (AB0C) /* \_SB_.AB0C */
            }

            If ((Local0 == 0x0D))
            {
                Return (AB0D) /* \_SB_.AB0D */
            }

            If ((Local0 == 0x0E))
            {
                Return (AB0E) /* \_SB_.AB0E */
            }

            If ((Local0 == 0x0F))
            {
                Return (AB0F) /* \_SB_.AB0F */
            }

            If ((Local0 == 0x10))
            {
                Return (AB10) /* \_SB_.AB10 */
            }

            If ((Local0 == 0x11))
            {
                Return (AB11) /* \_SB_.AB11 */
            }

            If ((Local0 == 0x12))
            {
                Return (AB12) /* \_SB_.AB12 */
            }

            If ((Local0 == 0x13))
            {
                Return (AB13) /* \_SB_.AB13 */
            }

            If ((Local0 == 0x14))
            {
                Return (AB14) /* \_SB_.AB14 */
            }

            If ((Local0 == 0x15))
            {
                Return (AB15) /* \_SB_.AB15 */
            }

            If ((Local0 == 0x16))
            {
                Return (AB16) /* \_SB_.AB16 */
            }

            If ((Local0 == 0x17))
            {
                Return (AB17) /* \_SB_.AB17 */
            }

            If ((Local0 == 0x18))
            {
                Return (AB18) /* \_SB_.AB18 */
            }

            If ((Local0 == 0x19))
            {
                Return (AB19) /* \_SB_.AB19 */
            }

            If ((Local0 == 0x1A))
            {
                Return (AB1A) /* \_SB_.AB1A */
            }

            If ((Local0 == 0x1B))
            {
                Return (AB1B) /* \_SB_.AB1B */
            }

            If ((Local0 == 0x1C))
            {
                Return (AB1C) /* \_SB_.AB1C */
            }

            If ((Local0 == 0x1D))
            {
                Return (AB1D) /* \_SB_.AB1D */
            }

            If ((Local0 == 0x1E))
            {
                Return (AB1E) /* \_SB_.AB1E */
            }

            If ((Local0 == 0x1F))
            {
                Return (AB1F) /* \_SB_.AB1F */
            }

            Return (Zero)
        }

        Method (PWDC, 1, Serialized)
        {
            If ((Arg0 >= 0x08))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = Arg0
            }

            If ((Local0 == Zero))
            {
                Return (DB00) /* \_SB_.DB00 */
            }

            If ((Local0 == One))
            {
                Return (DB01) /* \_SB_.DB01 */
            }

            If ((Local0 == 0x02))
            {
                Return (DB02) /* \_SB_.DB02 */
            }

            If ((Local0 == 0x03))
            {
                Return (DB03) /* \_SB_.DB03 */
            }

            If ((Local0 == 0x04))
            {
                Return (DB04) /* \_SB_.DB04 */
            }

            If ((Local0 == 0x05))
            {
                Return (DB05) /* \_SB_.DB05 */
            }

            If ((Local0 == 0x06))
            {
                Return (DB06) /* \_SB_.DB06 */
            }

            If ((Local0 == 0x07))
            {
                Return (DB07) /* \_SB_.DB07 */
            }

            If ((Local0 == 0x08))
            {
                Return (DB08) /* \_SB_.DB08 */
            }

            If ((Local0 == 0x09))
            {
                Return (DB09) /* \_SB_.DB09 */
            }

            If ((Local0 == 0x0A))
            {
                Return (DB0A) /* \_SB_.DB0A */
            }

            If ((Local0 == 0x0B))
            {
                Return (DB0B) /* \_SB_.DB0B */
            }

            If ((Local0 == 0x0C))
            {
                Return (DB0C) /* \_SB_.DB0C */
            }

            If ((Local0 == 0x0D))
            {
                Return (DB0D) /* \_SB_.DB0D */
            }

            If ((Local0 == 0x0E))
            {
                Return (DB0E) /* \_SB_.DB0E */
            }

            If ((Local0 == 0x0F))
            {
                Return (DB0F) /* \_SB_.DB0F */
            }

            If ((Local0 == 0x10))
            {
                Return (DB10) /* \_SB_.DB10 */
            }

            If ((Local0 == 0x11))
            {
                Return (DB11) /* \_SB_.DB11 */
            }

            If ((Local0 == 0x12))
            {
                Return (DB12) /* \_SB_.DB12 */
            }

            If ((Local0 == 0x13))
            {
                Return (DB13) /* \_SB_.DB13 */
            }

            If ((Local0 == 0x14))
            {
                Return (DB14) /* \_SB_.DB14 */
            }

            If ((Local0 == 0x15))
            {
                Return (DB15) /* \_SB_.DB15 */
            }

            If ((Local0 == 0x16))
            {
                Return (DB16) /* \_SB_.DB16 */
            }

            If ((Local0 == 0x17))
            {
                Return (DB17) /* \_SB_.DB17 */
            }

            If ((Local0 == 0x18))
            {
                Return (DB18) /* \_SB_.DB18 */
            }

            If ((Local0 == 0x19))
            {
                Return (DB19) /* \_SB_.DB19 */
            }

            If ((Local0 == 0x1A))
            {
                Return (DB1A) /* \_SB_.DB1A */
            }

            If ((Local0 == 0x1B))
            {
                Return (DB1B) /* \_SB_.DB1B */
            }

            If ((Local0 == 0x1C))
            {
                Return (DB1C) /* \_SB_.DB1C */
            }

            If ((Local0 == 0x1D))
            {
                Return (DB1D) /* \_SB_.DB1D */
            }

            If ((Local0 == 0x1E))
            {
                Return (DB1E) /* \_SB_.DB1E */
            }

            If ((Local0 == 0x1F))
            {
                Return (DB1F) /* \_SB_.DB1F */
            }

            Return (Zero)
        }

        Method (ACPS, 0, Serialized)
        {
            Return ((GPWS () & One))
        }

        Method (DCPS, 1, Serialized)
        {
            Local0 = GPWS ()
            If (Arg0)
            {
                Local0 &= 0x04
            }
            Else
            {
                Local0 &= 0x02
            }

            If (Local0)
            {
                Local0 = One
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GPWS, 0, Serialized)
        {
            Local0 = EPWS /* \_SB_.PCI0.SBRG.IEC_.EPWS */
            Return (Local0)
        }

        Method (BCHG, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local0 = EB1S /* \_SB_.PCI0.SBRG.IEC_.EB1S */
                    Local0 &= 0xFF
                    If ((Local0 != 0xFF))
                    {
                        Local0 &= 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local0 = EB0S /* \_SB_.PCI0.SBRG.IEC_.EB0S */
                    Local0 &= 0xFF
                    If ((Local0 != 0xFF))
                    {
                        Local0 &= 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
        }

        Method (BCLE, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local1 = EB1S /* \_SB_.PCI0.SBRG.IEC_.EB1S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = One
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = One
                        }
                    }

                    Local0 = Ones
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local1 = EB0S /* \_SB_.PCI0.SBRG.IEC_.EB0S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = One
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = One
                        }
                    }

                    Local0 = Ones
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Method (CHBT, 1, Serialized)
        {
            Local1 = GBTT (Arg0)
            If ((Local1 == 0xFF))
            {
                Local0 = Zero
            }
            Else
            {
                Local0 = (Local1 & 0x10)
                If (Local0)
                {
                    Local0 = One
                }
            }

            Return (Local0)
        }

        Method (TACH, 1, NotSerialized)
        {
            Return (Zero)
        }

        Method (EC0S, 1, NotSerialized)
        {
        }

        Method (EC0W, 1, NotSerialized)
        {
            If ((Arg0 <= 0x04))
            {
                ACPF = ACPS ()
                DCPF = DCPS (Zero)
                PNOT ()
            }
        }

        Name (FHKM, One)
        Method (FHKW, 0, Serialized)
        {
            While (!FHKM)
            {
                Sleep (0x0A)
            }

            FHKM = Zero
        }

        Method (FHKS, 0, Serialized)
        {
            FHKM = One
        }

        Name (AVNC, Package (0x20)
        {
            0x61, 
            0x61, 
            0x62, 
            0x63, 
            0x64, 
            0x65, 
            0x66, 
            0x67, 
            0x8C, 
            0x8D, 
            0x8E, 
            0x90, 
            0x8F, 
            0x91, 
            0x92, 
            0x93, 
            0xA0, 
            0xA1, 
            0xA2, 
            0xA4, 
            0xA3, 
            0xA5, 
            0xA6, 
            0xA7, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61
        })
        Method (ISXP, 2, NotSerialized)
        {
            Return (Zero)
        }

        Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x09)
            Return (Zero)
        }

        Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xA0)
            If (ACPS ())
            {
                ACPF = One
                Local0 = 0x58
            }
            Else
            {
                ACPF = Zero
                Local0 = 0x57
            }

            If ((OSFG < OSVT))
            {
                STBR ()
            }

            Notify (AC0, 0x80) // Status Change
            If (ATKP)
            {
                \WMI0.NTFY (Local0)
            }

            Sleep (0x64)
            PNOT ()
            Sleep (0x0A)
            NBAT (0x80)
            PTPT ()
        }

        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xA1)
            DCPF = DCPS (Zero)
            If (DCPF)
            {
                Sleep (0x07D0)
            }

            Notify (BAT0, 0x80) // Status Change
            Notify (BAT0, 0x81) // Information Change
            ^^^^VALZ.GBIF ()
            ^^^^VALZ.GSMB ()
            PTPT ()
        }

        Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xA3)
            If (BATP (Zero))
            {
                Local0 = BCLE (Zero)
                If ((Local0 == Zero))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
                Else
                {
                    Notify (BAT0, 0x81) // Information Change
                    Notify (AC0, 0x80) // Status Change
                }
            }
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xA5)
            If (ATKP)
            {
                \WMI0.NTFY (0x6E)
            }
            ElseIf (BATP (Zero))
            {
                Notify (BAT0, 0x80) // Status Change
            }
        }

        Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x82)
        }

        Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x83)
        }

        Method (_QB2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xB2)
        }

        Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xB3)
        }

        Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xB4)
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xB0)
            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
        }

        Name (PSVF, Zero)
        Method (_QB5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xB5)
            If ((PSVF == Zero))
            {
                PSVF = One
                Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
            }
        }

        Method (_QB6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xB6)
            If ((PSVF == One))
            {
                PSVF = Zero
                Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
            }
        }

        Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x68)
        }

        Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x73)
        }

        Method (_QD6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD6)
            If (ISXP (0xF2, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01FF)
            Return (Zero)
        }

        Method (_QD7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD7)
            If (ISXP (0xF3, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0100)
            Return (Zero)
        }

        Method (_QD0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD0)
            If (ISXP (0xF9, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0C91)
            Return (Zero)
        }

        Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD2)
            If (ISXP (0xFA, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0C9F)
            Return (Zero)
        }

        Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD1)
            If (ISXP (0xFB, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0C92)
            Return (Zero)
        }

        Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD3)
            ^^^^VALZ.PUTE (0x19B7)
            Return (Zero)
        }

        Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xD4)
            ^^^^VALZ.PUTE (0x19B6)
            Return (Zero)
        }

        Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x0A)
            If (ISXP (0x52, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x013B)
            Return (Zero)
        }

        Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x2A)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01BB)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero))) {}
            Return (Zero)
        }

        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x0B)
            If (ISXP (0x5C, Zero))
            {
                Return (Zero)
            }

            If ((OSFG == OSW7))
            {
                ^^^^VALZ.PUTE (0x013C)
                If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
                {
                    Notify (^^^GFX0.LCDD, 0x87) // Device-Specific
                }
            }
            ElseIf ((OSFG >= OSW8))
            {
                Notify (^^^GFX0.LCDD, 0x87) // Device-Specific
            }

            Return (Zero)
        }

        Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x2B)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01BC)
            Return (Zero)
        }

        Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x0C)
            If (ISXP (0x6C, Zero))
            {
                Return (Zero)
            }

            If ((OSFG == OSW7))
            {
                ^^^^VALZ.PUTE (0x013D)
                If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
                {
                    Notify (^^^GFX0.LCDD, 0x86) // Device-Specific
                }
            }
            ElseIf ((OSFG >= OSW8))
            {
                Notify (^^^GFX0.LCDD, 0x86) // Device-Specific
            }

            Return (Zero)
        }

        Method (_Q2C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x2C)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01BD)
            Return (Zero)
        }

        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x0D)
            If (ISXP (0x6D, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x013E)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                ECXT (0xB8, 0x05, Zero, Zero, Zero, Zero)
            }

            Return (Zero)
        }

        Method (_Q2D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x2D)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01BE)
            Return (Zero)
        }

        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x0E)
            If (ISXP (0x54, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x013F)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                _Q84 ()
            }

            Return (Zero)
        }

        Method (_Q2E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x2E)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01BF)
            Return (Zero)
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x0F)
            If (ISXP (0x20, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0140)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero))) {}
            Return (One)
        }

        Method (_Q2F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x2F)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01C0)
            Return (One)
        }

        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x10)
            If (ISXP (0x10, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0141)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero))) {}
            Return (One)
        }

        Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x30)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01C1)
            Return (One)
        }

        Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x11)
            If (ISXP (0x5D, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0142)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero))) {}
            Return (Zero)
        }

        Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x31)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01C2)
            Return (Zero)
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x12)
            If (ISXP (0x6A, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0143)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero))) {}
            Return (Zero)
        }

        Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x32)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01C3)
            Return (Zero)
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x14)
            If ((OSFG >= OSW8))
            {
                ECXT (0xB8, Zero, Zero, Zero, Zero, Zero)
            }
            Else
            {
                ^^^^VALZ.PUTE (0x0157)
            }

            Return (Zero)
        }

        Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x34)
            ^^^^VALZ.PUTE (0x01D7)
            If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) && (OSFG < OSW8)))
            {
                ECXT (0xB8, Zero, Zero, Zero, Zero, Zero)
            }

            Return (Zero)
        }

        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x15)
            ^^^^VALZ.PUTE (0x0158)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                If (BTDP)
                {
                    If ((BRST == One))
                    {
                        SGPL (0x14, One, One)
                        BRST = Zero
                    }
                    Else
                    {
                        SGPL (0x14, One, Zero)
                        BRST = One
                    }
                }

                If (WLDP)
                {
                    If ((WRST == One))
                    {
                        SGPL (0x15, One, Zero)
                        WRST = Zero
                    }
                    Else
                    {
                        SGPL (0x15, One, One)
                        WRST = One
                    }

                    ^^^^VALZ.MLED ()
                }
            }

            Return (Zero)
        }

        Method (_Q35, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x35)
            ^^^^VALZ.PUTE (0x01D8)
            Return (Zero)
        }

        Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x6B)
            If (ISXP (0x32, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0101)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                ECXT (0xB8, Zero, Zero, Zero, Zero, Zero)
            }

            Return (Zero)
        }

        Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x8B)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0181)
            Return (Zero)
        }

        Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x6C)
            If (ISXP (0x55, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0102)
            Return (Zero)
        }

        Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x8C)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0182)
            Return (Zero)
        }

        Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x6D)
            If (ISXP (0x56, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0103)
            Return (Zero)
        }

        Method (_Q8D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x8D)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0183)
            Return (Zero)
        }

        Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x69)
            If (ISXP (0x57, Zero))
            {
                ECXT (0xB8, 0x03, Zero, Zero, Zero, Zero)
                Return (Zero)
            }

            ECXT (0xB8, 0x03, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        Method (_Q89, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x89)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            Return (Zero)
        }

        Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x6A)
            If (ISXP (0x58, Zero))
            {
                ECXT (0xB8, 0x04, Zero, Zero, Zero, Zero)
                Return (Zero)
            }

            ECXT (0xB8, 0x04, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x8A)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            Return (Zero)
        }

        Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x6E)
            ^^^^VALZ.PUTE (0x010F)
            Return (Zero)
        }

        Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x80)
        }

        Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x81)
            If (FLHP)
            {
                Return (Zero)
            }

            If (!RPIN (0x04, 0x06))
            {
                LDEV = One
                If ((OSFG == OSW7))
                {
                    Notify (VALZ, 0x8F) // Device-Specific
                }

                ^^^^VALZ.PUTE (0x19B3)
                If ((VGAF & One))
                {
                    ^^^GFX0.CLID = Zero
                }
            }
            Else
            {
                ^^^^VALZ.PUTE (0x19B2)
                If ((VGAF & One))
                {
                    ^^^GFX0.CLID = 0x03
                }
            }

            Notify (LID, 0x80) // Status Change
        }

        Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x84)
            If (ISXP (0xF6, Zero))
            {
                Return (Zero)
            }

            If (IPED) {}
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                If (IPED)
                {
                    Local0 = RRAM (0x07C7)
                    If ((Local0 & One))
                    {
                        ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                        TPON = One
                    }
                    Else
                    {
                        ECXT (0xB5, One, Zero, Zero, Zero, Zero)
                        TPON = Zero
                    }
                }
            }

            Return (Zero)
        }

        Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x8E)
            ^^^^VALZ.PUTE (0x018F)
            Return (Zero)
        }

        Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x6F)
            If (ISXP (0x53, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x0139)
            Return (Zero)
        }

        Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x8F)
            If (ISXP (Zero, Zero))
            {
                Return (Zero)
            }

            ^^^^VALZ.PUTE (0x01B9)
            Return (Zero)
        }

        Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x70)
            ^^^^VALZ.PUTE (0x012C)
            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                If ((^^^^VALZ.KBMD () == Zero)) {}
                ElseIf ((^^^^VALZ.KBMD () == One))
                {
                    ^^^^VALZ.KBBF (One)
                }
                Else
                {
                    ^^^^VALZ.KBBO (One)
                }
            }

            Return (Zero)
        }

        Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x90)
            ^^^^VALZ.PUTE (0x01AC)
            Return (Zero)
        }

        Method (_QFC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xFC)
            If (ISXP (0xF0, One))
            {
                Return (Zero)
            }

            Return (Zero)
        }

        Method (_QFD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xFD)
            If (ISXP (0xF0, One))
            {
                Return (Zero)
            }

            Return (Zero)
        }

        Method (_QFE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xFE)
            If (ISXP (0xF5, 0x02))
            {
                Return (Zero)
            }

            Return (Zero)
        }

        Method (_QFF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0xFF)
            If (ISXP (0xF4, 0x03))
            {
                Return (Zero)
            }

            If (((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)))
            {
                ECXT (0xB8, Zero, Zero, Zero, Zero, Zero)
            }

            Return (Zero)
        }

        Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x60)
            If ((OSFG == OSW7))
            {
                Notify (VALZ, 0x8E) // Device-Specific
            }

            Return (Zero)
        }

        Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DIAG (0x88)
            If ((RPIN (0x08, 0x05) == Zero))
            {
                ^^^^VALZ.LCDS = Zero
                ^^^^VALZ.PUTE (0x19B1)
                ^^^^VALZ.PUTE (0x19B3)
            }
            Else
            {
                ^^^^VALZ.LCDS = One
                ^^^^VALZ.PUTE (0x19B0)
                ^^^^VALZ.PUTE (0x19B2)
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP03)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x05
        })
        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
        {
            WOLC = Arg0
        }

        Device (GLAN)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x09, 
                0x05
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                WOLC = Arg0
            }
        }

        OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            L0SE,   1, 
            Offset (0x11), 
            Offset (0x12), 
                ,   13, 
            LASX,   1, 
            Offset (0x1A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x1B), 
            Offset (0x20), 
            Offset (0x22), 
            PSPX,   1, 
            Offset (0x98), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0x9C), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (HPME, 0, Serialized)
        {
            If (PMSX)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    PMSX = One
                    If (PMSX)
                    {
                        Local0--
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Notify (GLAN, 0x02) // Device Wake
            }
        }
    }

    Scope (_TZ)
    {
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (MF63, 4, NotSerialized)
        {
            If ((Arg1 != 0x63))
            {
                Return (Zero)
            }

            If ((Arg2 == One))
            {
                M631 (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                M632 (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                M633 (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                M634 (Arg0, Arg1)
            }

            If ((Arg2 == 0x05))
            {
                M635 (Arg0, Arg1)
            }

            If ((Arg2 == 0x06))
            {
                M636 (Arg0, Arg1)
            }

            If ((Arg2 == 0x07))
            {
                M637 (Arg0, Arg1)
            }

            If ((Arg2 == 0x08))
            {
                M638 (Arg0, Arg1)
            }

            If ((Arg2 == 0x09))
            {
                M639 (Arg0, Arg1)
            }

            If ((Arg2 == 0x0A))
            {
                M63A (Arg0, Arg1)
            }

            If ((Arg2 == 0x0B))
            {
                M63B (Arg0, Arg1)
            }

            If ((Arg2 == 0x0C))
            {
                M63C (Arg0, Arg1)
            }

            If ((Arg2 == 0x0D))
            {
                M63D (Arg0, Arg1)
            }

            If ((Arg2 == 0x0E))
            {
                M63E (Arg0, Arg1)
            }

            Return (Zero)
        }

        Method (M631, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                TSXR,   8, 
                TSXL,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                TSXR = RRAM (0x03E2)
                TSXL = RRAM (0x03E3)
            }
            ElseIf ((FUNC == One))
            {
                TSXR = RRAM (0x03E0)
                TSXL = RRAM (0x03E1)
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M632, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                DEVS,   8, 
                DEVT,   16
            }

            SM63 = 0x80
            EM63 = Zero
            If ((DEVS == Zero))
            {
                DEVT = TJMX /* \_SB_.TJMX */
            }
            ElseIf ((DEVS == One))
            {
                DEVT = TH0R /* \_SB_.PCI0.SBRG.IEC_.TH0R */
            }
            ElseIf ((DEVS == 0x02)) {}
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M633, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FANX,   8, 
                FANS,   8, 
                FANT,   16, 
                TRGG,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FANX == Zero))
            {
                FANS = F0CS /* \_SB_.PCI0.SBRG.IEC_.F0CS */
                FANT = F0TS /* \_SB_.PCI0.SBRG.IEC_.F0TS */
                TRGG = RRAM (0x0576)
            }
            ElseIf ((FANX == One))
            {
                FANS = F1CS /* \_SB_.PCI0.SBRG.IEC_.F1CS */
                FANT = F1TS /* \_SB_.PCI0.SBRG.IEC_.F1TS */
                TRGG = RRAM (0x0577)
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M634, 2, Serialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                PARA,   8, 
                DATA,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                Switch (ToInteger (PARA))
                {
                    Case (Zero)
                    {
                        DATA = RRAM (0x0521)
                    }
                    Case (One)
                    {
                        DATA = RRAM (0x0522)
                    }
                    Case (0x02)
                    {
                        DATA = RRAM (0x0523)
                    }
                    Case (0x03)
                    {
                        DATA = RRAM (0x0524)
                    }
                    Case (0x04)
                    {
                        DATA = RRAM (0x0509)
                    }
                    Case (0x05)
                    {
                        DATA = RRAM (0x050A)
                    }
                    Case (0x06)
                    {
                        DATA = RRAM (0x0568)
                    }
                    Default
                    {
                        SM63 = 0x80
                        EM63 = One
                    }

                }
            }
            ElseIf ((FUNC == One))
            {
                Switch (ToInteger (PARA))
                {
                    Case (Zero)
                    {
                        WRAM (0x0521, DATA)
                    }
                    Case (One)
                    {
                        WRAM (0x0522, DATA)
                    }
                    Case (0x02)
                    {
                        WRAM (0x0523, DATA)
                        If (((DATA & 0x80) == Zero))
                        {
                            MCFD = 0x88
                        }
                        Else
                        {
                            MCFD = Zero
                        }
                    }
                    Case (0x03)
                    {
                        WRAM (0x0524, DATA)
                    }
                    Case (0x04)
                    {
                        WRAM (0x0509, DATA)
                    }
                    Case (0x05)
                    {
                        WRAM (0x050A, DATA)
                    }
                    Case (0x06)
                    {
                        WRAM (0x0568, DATA)
                    }
                    Default
                    {
                        SM63 = 0x80
                        EM63 = One
                    }

                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M635, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ECSD,   8, 
                OSSD,   8, 
                OSPV,   8, 
                THON,   8, 
                THOF,   8, 
                FNER,   8, 
                VGSD,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                ECSD = RRAM (0x0530)
                OSSD = RRAM (0x03E4)
                OSPV = RRAM (0x03E5)
                THON = RRAM (0x0533)
                THOF = RRAM (0x0534)
                FNER = RRAM (0x0535)
                VGSD = RRAM (0x0536)
            }
            ElseIf ((FUNC == One))
            {
                WRAM (0x0530, ECSD)
                WRAM (0x03E4, OSSD)
                WRAM (0x03E5, OSPV)
                WRAM (0x0533, THON)
                WRAM (0x0534, THOF)
                WRAM (0x0535, FNER)
                WRAM (0x0536, VGSD)
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M636, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                TTS1,   8, 
                TTS2,   8, 
                TTS3,   8, 
                TTS4,   8, 
                TTS5,   8, 
                TTS6,   8, 
                TTS7,   8, 
                TTS8,   8, 
                TFFP,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    TTS1 = RRAM (0x0537)
                    TTS2 = RRAM (0x0538)
                    TTS3 = RRAM (0x0539)
                    TTS4 = RRAM (0x053A)
                    TTS5 = RRAM (0x053B)
                    TTS6 = RRAM (0x053C)
                    TTS7 = RRAM (0x053D)
                    TTS8 = RRAM (0x053E)
                    TFFP = RRAM (0x053F)
                }
                ElseIf ((ALGM == One))
                {
                    TTS1 = RRAM (0x0597)
                    TTS2 = RRAM (0x0598)
                    TTS3 = RRAM (0x0599)
                    TTS4 = RRAM (0x059A)
                    TTS5 = RRAM (0x059B)
                    TTS6 = RRAM (0x059C)
                    TTS7 = RRAM (0x059D)
                    TTS8 = RRAM (0x059E)
                    TFFP = RRAM (0x059F)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    WRAM (0x0537, TTS1)
                    WRAM (0x0538, TTS2)
                    WRAM (0x0539, TTS3)
                    WRAM (0x053A, TTS4)
                    WRAM (0x053B, TTS5)
                    WRAM (0x053C, TTS6)
                    WRAM (0x053D, TTS7)
                    WRAM (0x053E, TTS8)
                    WRAM (0x053F, TFFP)
                }
                ElseIf ((ALGM == One))
                {
                    WRAM (0x0597, TTS1)
                    WRAM (0x0598, TTS2)
                    WRAM (0x0599, TTS3)
                    WRAM (0x059A, TTS4)
                    WRAM (0x059B, TTS5)
                    WRAM (0x059C, TTS6)
                    WRAM (0x059D, TTS7)
                    WRAM (0x059E, TTS8)
                    WRAM (0x059F, TFFP)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }
        }

        Method (M637, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                TDA1,   8, 
                TDA2,   8, 
                TDA3,   8, 
                TDA4,   8, 
                TDA5,   8, 
                TDA6,   8, 
                TDA7,   8, 
                TDA8,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    TDA1 = RRAM (0x0548)
                    TDA2 = RRAM (0x0549)
                    TDA3 = RRAM (0x054A)
                    TDA4 = RRAM (0x054B)
                    TDA5 = RRAM (0x054C)
                    TDA6 = RRAM (0x054D)
                    TDA7 = RRAM (0x054E)
                    TDA8 = RRAM (0x054F)
                }
                ElseIf ((ALGM == One))
                {
                    TDA1 = RRAM (0x05A8)
                    TDA2 = RRAM (0x05A9)
                    TDA3 = RRAM (0x05AA)
                    TDA4 = RRAM (0x05AB)
                    TDA5 = RRAM (0x05AC)
                    TDA6 = RRAM (0x05AD)
                    TDA7 = RRAM (0x05AE)
                    TDA8 = RRAM (0x05AF)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    WRAM (0x0548, TDA1)
                    WRAM (0x0549, TDA2)
                    WRAM (0x054A, TDA3)
                    WRAM (0x054B, TDA4)
                    WRAM (0x054C, TDA5)
                    WRAM (0x054D, TDA6)
                    WRAM (0x054E, TDA7)
                    WRAM (0x054F, TDA8)
                }
                ElseIf ((ALGM == One))
                {
                    WRAM (0x05A8, TDA1)
                    WRAM (0x05A9, TDA2)
                    WRAM (0x05AA, TDA3)
                    WRAM (0x05AB, TDA4)
                    WRAM (0x05AC, TDA5)
                    WRAM (0x05AD, TDA6)
                    WRAM (0x05AE, TDA7)
                    WRAM (0x05AF, TDA8)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }
        }

        Method (M638, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                ASC1,   8, 
                ASC2,   8, 
                ASC3,   8, 
                ASC4,   8, 
                ADA1,   8, 
                ADA2,   8, 
                ADA3,   8, 
                ADA4,   8, 
                DSC1,   8, 
                DSC2,   8, 
                DSC3,   8, 
                DSC4,   8, 
                DDA1,   8, 
                DDA2,   8, 
                DDA3,   8, 
                DDA4,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    ASC1 = RRAM (0x0550)
                    ASC2 = RRAM (0x0551)
                    ASC3 = RRAM (0x0552)
                    ASC4 = RRAM (0x0553)
                    ADA1 = RRAM (0x0554)
                    ADA2 = RRAM (0x0555)
                    ADA3 = RRAM (0x0556)
                    ADA4 = RRAM (0x0557)
                    DSC1 = RRAM (0x0558)
                    DSC2 = RRAM (0x0559)
                    DSC3 = RRAM (0x055A)
                    DSC4 = RRAM (0x055B)
                    DDA1 = RRAM (0x055C)
                    DDA2 = RRAM (0x055D)
                    DDA3 = RRAM (0x055E)
                    DDA4 = RRAM (0x055F)
                }
                ElseIf ((ALGM == One))
                {
                    ASC1 = RRAM (0x05B0)
                    ASC2 = RRAM (0x05B1)
                    ASC3 = RRAM (0x05B2)
                    ASC4 = RRAM (0x05B3)
                    ADA1 = RRAM (0x05B4)
                    ADA2 = RRAM (0x05B5)
                    ADA3 = RRAM (0x05B6)
                    ADA4 = RRAM (0x05B7)
                    DSC1 = RRAM (0x05B8)
                    DSC2 = RRAM (0x05B9)
                    DSC3 = RRAM (0x05BA)
                    DSC4 = RRAM (0x05BB)
                    DDA1 = RRAM (0x05BC)
                    DDA2 = RRAM (0x05BD)
                    DDA3 = RRAM (0x05BE)
                    DDA4 = RRAM (0x05BF)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    WRAM (0x0550, ASC1)
                    WRAM (0x0551, ASC2)
                    WRAM (0x0552, ASC3)
                    WRAM (0x0553, ASC4)
                    WRAM (0x0554, ADA1)
                    WRAM (0x0555, ADA2)
                    WRAM (0x0556, ADA3)
                    WRAM (0x0557, ADA4)
                    WRAM (0x0558, DSC1)
                    WRAM (0x0559, DSC2)
                    WRAM (0x055A, DSC3)
                    WRAM (0x055B, DSC4)
                    WRAM (0x055C, DDA1)
                    WRAM (0x055D, DDA2)
                    WRAM (0x055E, DDA3)
                    WRAM (0x055F, DDA4)
                }
                ElseIf ((ALGM == One))
                {
                    WRAM (0x05B0, ASC1)
                    WRAM (0x05B1, ASC2)
                    WRAM (0x05B2, ASC3)
                    WRAM (0x05B3, ASC4)
                    WRAM (0x05B4, ADA1)
                    WRAM (0x05B5, ADA2)
                    WRAM (0x05B6, ADA3)
                    WRAM (0x05B7, ADA4)
                    WRAM (0x05B8, DSC1)
                    WRAM (0x05B9, DSC2)
                    WRAM (0x05BA, DSC3)
                    WRAM (0x05BB, DSC4)
                    WRAM (0x05BC, DDA1)
                    WRAM (0x05BD, DDA2)
                    WRAM (0x05BE, DDA3)
                    WRAM (0x05BF, DDA4)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }
        }

        Method (M639, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                HYS1,   8, 
                HYS2,   8, 
                HYS3,   8, 
                HYS4,   8, 
                HYS5,   8, 
                HYS6,   8, 
                HYS7,   8, 
                HYS8,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    HYS1 = RRAM (0x0540)
                    HYS2 = RRAM (0x0541)
                    HYS3 = RRAM (0x0542)
                    HYS4 = RRAM (0x0543)
                    HYS5 = RRAM (0x0544)
                    HYS6 = RRAM (0x0545)
                    HYS7 = RRAM (0x0546)
                    HYS8 = RRAM (0x0547)
                }
                ElseIf ((ALGM == One))
                {
                    HYS1 = RRAM (0x05A0)
                    HYS2 = RRAM (0x05A1)
                    HYS3 = RRAM (0x05A2)
                    HYS4 = RRAM (0x05A3)
                    HYS5 = RRAM (0x05A4)
                    HYS6 = RRAM (0x05A5)
                    HYS7 = RRAM (0x05A6)
                    HYS8 = RRAM (0x05A7)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    WRAM (0x0540, HYS1)
                    WRAM (0x0541, HYS2)
                    WRAM (0x0542, HYS3)
                    WRAM (0x0543, HYS4)
                    WRAM (0x0544, HYS5)
                    WRAM (0x0545, HYS6)
                    WRAM (0x0546, HYS7)
                    WRAM (0x0547, HYS8)
                }
                ElseIf ((ALGM == One))
                {
                    WRAM (0x05A0, HYS1)
                    WRAM (0x05A1, HYS2)
                    WRAM (0x05A2, HYS3)
                    WRAM (0x05A3, HYS4)
                    WRAM (0x05A4, HYS5)
                    WRAM (0x05A5, HYS6)
                    WRAM (0x05A6, HYS7)
                    WRAM (0x05A7, HYS8)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M63A, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                TA1L,   8, 
                TA1H,   8, 
                TA2L,   8, 
                TA2H,   8, 
                TA3L,   8, 
                TA3H,   8, 
                TA4L,   8, 
                TA4H,   8, 
                TA5L,   8, 
                TA5H,   8, 
                TA6L,   8, 
                TA6H,   8, 
                TA7L,   8, 
                TA7H,   8, 
                TA8L,   8, 
                TA8H,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    TA1L = RRAM (0x05C0)
                    TA1H = RRAM (0x05C1)
                    TA2L = RRAM (0x05C2)
                    TA2H = RRAM (0x05C3)
                    TA3L = RRAM (0x05C4)
                    TA3H = RRAM (0x05C5)
                    TA4L = RRAM (0x05C6)
                    TA4H = RRAM (0x05C7)
                    TA5L = RRAM (0x05C8)
                    TA5H = RRAM (0x05C9)
                    TA6L = RRAM (0x05CA)
                    TA6H = RRAM (0x05CB)
                    TA7L = RRAM (0x05CC)
                    TA7H = RRAM (0x05CD)
                    TA8L = RRAM (0x05CE)
                    TA8H = RRAM (0x05CF)
                }
                ElseIf ((FANX == One))
                {
                    TA1L = RRAM (0x05D0)
                    TA1H = RRAM (0x05D1)
                    TA2L = RRAM (0x05D2)
                    TA2H = RRAM (0x05D3)
                    TA3L = RRAM (0x05D4)
                    TA3H = RRAM (0x05D5)
                    TA4L = RRAM (0x05D6)
                    TA4H = RRAM (0x05D7)
                    TA5L = RRAM (0x05D8)
                    TA5H = RRAM (0x05D9)
                    TA6L = RRAM (0x05DA)
                    TA6H = RRAM (0x05DB)
                    TA7L = RRAM (0x05DC)
                    TA7H = RRAM (0x05DD)
                    TA8L = RRAM (0x05DE)
                    TA8H = RRAM (0x05DF)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((FANX == Zero))
                {
                    WRAM (0x05C0, TA1L)
                    WRAM (0x05C1, TA1H)
                    WRAM (0x05C2, TA2L)
                    WRAM (0x05C3, TA2H)
                    WRAM (0x05C4, TA3L)
                    WRAM (0x05C5, TA3H)
                    WRAM (0x05C6, TA4L)
                    WRAM (0x05C7, TA4H)
                    WRAM (0x05C8, TA5L)
                    WRAM (0x05C9, TA5H)
                    WRAM (0x05CA, TA6L)
                    WRAM (0x05CB, TA6H)
                    WRAM (0x05CC, TA7L)
                    WRAM (0x05CD, TA7H)
                    WRAM (0x05CE, TA8L)
                    WRAM (0x05CF, TA8H)
                }
                ElseIf ((FANX == One))
                {
                    WRAM (0x05D0, TA1L)
                    WRAM (0x05D1, TA1H)
                    WRAM (0x05D2, TA2L)
                    WRAM (0x05D3, TA2H)
                    WRAM (0x05D4, TA3L)
                    WRAM (0x05D5, TA3H)
                    WRAM (0x05D6, TA4L)
                    WRAM (0x05D7, TA4H)
                    WRAM (0x05D8, TA5L)
                    WRAM (0x05D9, TA5H)
                    WRAM (0x05DA, TA6L)
                    WRAM (0x05DB, TA6H)
                    WRAM (0x05DC, TA7L)
                    WRAM (0x05DD, TA7H)
                    WRAM (0x05DE, TA8L)
                    WRAM (0x05DF, TA8H)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M63B, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                PARA,   8, 
                DATA,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((PARA == Zero))
                {
                    DATA = RRAM (0x0569)
                }
                ElseIf ((PARA == One))
                {
                    DATA = RRAM (0x056A)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((PARA == Zero))
                {
                    WRAM (0x0569, DATA)
                }
                ElseIf ((PARA == One))
                {
                    WRAM (0x056A, DATA)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M63C, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                DATA,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                DATA = RRAM (0x0511)
            }
            ElseIf ((FUNC == One))
            {
                DATA = RRAM (0x0512)
            }
            ElseIf ((FUNC == 0x02))
            {
                DATA = RRAM (0x0513)
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M63D, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FREQ,   16
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                Local0 = 0x017D7840
                Local1 = RRAM (0xF4A0)
                Local1 += One
                Local2 = RRAM (0xF4A2)
                Local2 += One
                Local2 *= Local1
                Divide (Local0, Local2, Local3, Local1)
                FREQ = Local1
            }
            ElseIf ((FUNC == One))
            {
                FREQ = Zero
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }

        Method (M63E, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                FAND,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    FAND = RFOV (Zero)
                }
                ElseIf ((FANX == One))
                {
                    FAND = RFOV (One)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((FANX == Zero))
                {
                    WFOV (Zero, FAND)
                }
                ElseIf ((FANX == One))
                {
                    WFOV (One, FAND)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
            Else
            {
                SM63 = 0x80
                EM63 = One
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (MF30, 4, NotSerialized)
        {
            If ((Arg1 != 0x30))
            {
                Return (Zero)
            }

            Local0 = 0xFF
            If ((Arg2 == Zero))
            {
                Local0 = G30V (Arg0, Arg3)
            }

            If ((Arg2 == One))
            {
                Local0 = EC01 (Arg0, Arg3)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = EC02 (Arg0, Arg3)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = EC03 (Arg0, Arg3)
            }

            If ((Arg2 == 0x84))
            {
                Local0 = EC84 (Arg0, Arg3)
            }

            Local2 = (Arg2 & 0xFC)
            If ((Local2 == 0x80))
            {
                \WMI0.BSMI (Arg0)
                If ((Arg2 == 0x81))
                {
                    If (BATP (Zero))
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }
                }

                Return (Zero)
            }

            If ((Local0 == 0xFF))
            {
                Return (Zero)
            }

            OperationRegion (FM30, SystemMemory, Arg0, 0x08)
            Field (FM30, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8
            }

            If (Local0)
            {
                EM30 = Local0
                SM30 |= 0x02
            }

            SM30 &= 0xFE
            SM30 |= 0x80
            Return (Zero)
        }

        Method (G30V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F300, SystemMemory, Arg0, Arg1)
            Field (F300, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (EC01, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (FEC1, SystemMemory, Arg0, Arg1)
            Field (FEC1, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ECMD,   8, 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8
            }

            Local0 = ECXT (ECMD, EDA1, EDA2, EDA3, EDA4, EDA5)
            EDA1 = DerefOf (Local0 [One])
            EDA2 = DerefOf (Local0 [One])
            EDA3 = DerefOf (Local0 [One])
            EDA4 = DerefOf (Local0 [One])
            EDA5 = DerefOf (Local0 [One])
            Return (DerefOf (Local0 [Zero]))
        }

        Method (EC02, 2, NotSerialized)
        {
            OperationRegion (FEC2, SystemMemory, Arg0, 0x30)
            Field (FEC2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8, 
                BUSN,   8, 
                PROT,   8, 
                DADD,   8, 
                DREG,   8, 
                DAT0,   8, 
                DAT1,   8, 
                BLEN,   8, 
                REVB,   8, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            Local0 = ECSB (BUSN, PROT, DADD, DREG, DAT0, DAT1)
            DAT0 = DerefOf (Local0 [One])
            DAT1 = DerefOf (Local0 [0x02])
            BLEN = DerefOf (Local0 [0x03])
            Name (BKUF, Buffer (0x20) {})
            CreateDWordField (BKUF, Zero, DD01)
            CreateDWordField (BKUF, 0x04, DD02)
            CreateDWordField (BKUF, 0x08, DD03)
            CreateDWordField (BKUF, 0x0C, DD04)
            CreateDWordField (BKUF, 0x10, DD05)
            CreateDWordField (BKUF, 0x14, DD06)
            CreateDWordField (BKUF, 0x18, DD07)
            CreateDWordField (BKUF, 0x1C, DD08)
            BKUF = DerefOf (Local0 [0x04])
            BLK1 = DD01 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD01 */
            BLK2 = DD02 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD02 */
            BLK3 = DD03 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD03 */
            BLK4 = DD04 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD04 */
            BLK5 = DD05 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD05 */
            BLK6 = DD06 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD06 */
            BLK7 = DD07 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD07 */
            BLK8 = DD08 /* \_SB_.PCI0.SBRG.IEC_.EC02.DD08 */
            Local2 = DerefOf (Local0 [Zero])
            Local2 &= 0x3F
            Return (Local2)
        }

        Method (EC03, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            Local0 = Zero
            OperationRegion (FEC3, SystemMemory, Arg0, Arg1)
            Field (FEC3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNEN,   8
            }

            If (FNEN)
            {
                FNLK (One)
            }
            Else
            {
                FNLK (Zero)
            }

            Return (Zero)
        }

        Method (EC84, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (ECEG, SystemMemory, Arg0, Arg1)
            Field (ECEG, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EVTP,   8, 
                EVID,   8
            }

            ECXT (0xAE, EVTP, EVID, Zero, Zero, Zero)
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x10, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                LDST = Arg0
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                Local0 = ^^PCI0.SBRG.IEC.RPIN (0x04, 0x06)
                If ((Local0 == Ones))
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }
    }

    Scope (WMI0)
    {
        Method (GVBD, 5, NotSerialized)
        {
            If ((Arg2 == 0x69))
            {
                If ((Arg3 == One))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }

                If ((Arg3 == 0x02))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB)
    {
    }

    Scope (_SB)
    {
        Device (BT)
        {
            Name (_HID, "TOS6205")  // _HID: Hardware ID
            Name (BTAF, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BTDP)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (BWAK, 1, Serialized)
            {
                Notify (BT, 0x80) // Status Change
            }

            Method (BTST, 0, NotSerialized)
            {
                Local0 = Zero
                If ((BTDP && (BRST == Zero)))
                {
                    Local1 = One
                    BTPO ()
                }
                Else
                {
                    Local1 = Zero
                    BTPF ()
                }

                Local2 = One
                If (Local1)
                {
                    Local0 |= 0x80
                }

                If (BTAF)
                {
                    Local0 |= 0x40
                }

                If (Local2)
                {
                    Local0 |= One
                }

                Return (Local0)
            }

            Method (AUSB, 0, NotSerialized)
            {
                BTAF = One
            }

            Method (DUSB, 0, NotSerialized)
            {
                BTAF = Zero
            }

            Method (BTPO, 0, NotSerialized)
            {
                BRST = Zero
                If (BTDP)
                {
                    SGPL (0x14, One, One)
                }

                ^^VALZ.MLED ()
            }

            Method (BTPF, 0, NotSerialized)
            {
                BRST = One
                If (BTDP)
                {
                    SGPL (0x14, One, Zero)
                }

                ^^VALZ.MLED ()
            }

            Method (NTFY, 0, NotSerialized)
            {
                Notify (BT, 0x90) // Device-Specific
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0E, 
                0x04
            })
        }
    }

    Scope (_SB)
    {
        Device (VALZ)
        {
            Name (_HID, EisaId ("TOS1900"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSFG < OSVT))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Name (_DDN, "VALZeneral")  // _DDN: DOS Device Name
            Name (OSMD, Zero)
            Name (ENFG, Zero)
            Mutex (MUEV, 0x00)
            Name (EVCT, Zero)
            Name (EVCD, Package (0x64) {})
            Name (RETP, Package (0x06) {})
            Name (USFN, Package (0x06)
            {
                0x8000, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (NULP, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HKEV, 0x0B)
            Name (BRIL, Zero)
            Name (STA5, Zero)
            Name (BSY5, Zero)
            Name (BATV, Zero)
            Name (CRFR, Zero)
            Name (FADR, Zero)
            Name (ST06, Zero)
            Name (ST08, Zero)
            Name (ST09, Zero)
            Name (ST10, Zero)
            Name (ST11, Zero)
            Name (ST12, Zero)
            Name (ST16, Zero)
            Name (CNT1, Zero)
            Name (CNT2, Zero)
            Name (CNT3, Zero)
            Name (CNT4, Zero)
            Name (CNT5, Zero)
            Name (BACR, Zero)
            Name (BATP, Zero)
            Name (REFM, 0x10)
            Name (TIMC, Zero)
            Name (GCV1, Zero)
            Name (ACAV, Zero)
            Name (ACAC, Zero)
            Name (GCV2, Zero)
            Name (GBS1, Zero)
            Name (GBS2, Zero)
            Name (GBS3, Zero)
            Name (GBS4, Zero)
            Name (GBS5, Zero)
            Name (CTOV, Zero)
            Name (CTO1, Zero)
            Name (PCCF, Zero)
            Name (CTPN, Buffer (0x0C) {})
            Name (NNAM, Buffer (0x0C) {})
            Name (MDAT, Buffer (0x02) {})
            Name (SNUM, Buffer (0x02) {})
            Name (TST0, Package (0x06)
            {
                Buffer (0x1C) {}, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (TST1, Package (0x06)
            {
                "0000000000000000000000000000", 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HMBB, Buffer (0x1C) {})
            Name (HMTP, Buffer (0x1C) {})
            Name (CYCT, Zero)
            Name (EVCS, Zero)
            Name (HPCS, Zero)
            Name (TEMP, Zero)
            Name (INDX, 0xFF)
            Name (LCDS, One)
            Name (LLCD, Zero)
            Name (FRST, One)
            Name (MSRV, Zero)
            Name (AVR0, Zero)
            Name (AVR1, Zero)
            Name (AVR2, Zero)
            Name (AVR3, Zero)
            Name (AVR4, Zero)
            Name (AVR5, Zero)
            Name (AVR6, Zero)
            Name (AVR7, Zero)
            Name (AVR8, Zero)
            Name (AVR9, Zero)
            Name (AV10, Zero)
            Name (AV11, Zero)
            Name (AV12, Zero)
            Name (AV13, Zero)
            Name (AV14, Zero)
            Name (AV15, Zero)
            Name (ISFT, One)
            Name (ISAC, Zero)
            Name (ISDC, Zero)
            Name (ENLE, Zero)
            Name (SLCT, 0x3C)
            Scope (^PCI0.SBRG.IEC)
            {
                OperationRegion (PHM0, SystemMemory, IEM1, 0x80)
                Field (PHM0, ByteAcc, Lock, Preserve)
                {
                    Offset (0x12), 
                    BD25,   8, 
                    BD26,   8, 
                    BD27,   8, 
                    BD28,   8, 
                    BD29,   8, 
                    BD2A,   8, 
                    BD2D,   8, 
                    BD2E,   8, 
                    BD2F,   8, 
                    BD30,   8, 
                    BD31,   8, 
                    BD32,   8, 
                    Offset (0x22), 
                    BD33,   8, 
                    BD34,   8, 
                    BD35,   8, 
                    BD36,   8, 
                    BD37,   8, 
                    BD38,   8, 
                    BD39,   8, 
                    BD3A,   8, 
                    Offset (0x50), 
                    BD3B,   8, 
                    BD3C,   8, 
                    BD3D,   8, 
                    BD3E,   8, 
                    Offset (0x60), 
                    BD22,   8, 
                    Offset (0x62), 
                    BD21,   8, 
                    Offset (0x68), 
                    BD23,   8, 
                    BD24,   8
                }

                OperationRegion (PHM1, SystemMemory, IEM2, 0xFF)
                Field (PHM1, ByteAcc, Lock, Preserve)
                {
                    Offset (0xB7), 
                    BD1E,   8, 
                    BD1F,   8, 
                    Offset (0xBA), 
                    BD1C,   8, 
                    BD1D,   8, 
                    Offset (0xBE), 
                    BD1A,   8, 
                    BD1B,   8, 
                    Offset (0xC5), 
                    PECR,   8, 
                    Offset (0xC8), 
                    CR01,   8, 
                    CR02,   8, 
                    CR03,   8, 
                    CR04,   8, 
                    CR05,   8
                }
            }

            Name (STMD, Zero)
            Name (CT1T, One)
            Name (CMCL, 0xFF)
            Name (CMAC, Zero)
            Name (CMDC, One)
            Name (CMMD, 0xFF)
            Name (PSMD, Zero)
            Name (HKHT, Zero)
            Name (IMMD, Zero)
            Name (IPMD, Zero)
            Name (RLMD, Zero)
            Name (W8W7, Zero)
            Name (PKFG, Zero)
            Name (STTD, Zero)
            Name (STTH, Zero)
            Name (STTM, Zero)
            Name (STTS, Zero)
            Name (STPD, Zero)
            Name (STPH, Zero)
            Name (STPM, Zero)
            Name (STPS, Zero)
            Name (STMP, Zero)
            Name (BECM, 0xFF)
            Name (THTM, Zero)
            Name (RFN0, Zero)
            Method (GPCT, 1, NotSerialized)
            {
                If ((ToInteger (Arg0) == Zero))
                {
                    Local0 = Zero
                    Local1 = Zero
                    CNT1 = Local1
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07C8)
                    Local0 <<= 0x18
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07C9)
                    Local0 <<= 0x10
                    Local1 |= Local0
                    Local0 = FPOC /* \_SB_.FPOC */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07CB)
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT2 = Local1
                }

                If ((ToInteger (Arg0) == One))
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07CC)
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT3 = Local1
                }

                If ((ToInteger (Arg0) == 0x02))
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local0 <<= 0x18
                    Local1 |= Local0
                    Local0 <<= 0x10
                    Local1 |= Local0
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT4 = Local1
                    Local0 = Zero
                    Local1 = Zero
                    Local0 <<= 0x18
                    Local1 |= Local0
                    Local0 <<= 0x10
                    Local1 |= Local0
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT5 = Local1
                }
            }

            Method (CPCT, 1, NotSerialized)
            {
                If ((ToInteger (Arg0) == Zero))
                {
                    EXPC = Zero
                    ^^PCI0.SBRG.IEC.WRAM (0x07C8, Zero)
                    ^^PCI0.SBRG.IEC.WRAM (0x07C9, Zero)
                    FPOC = Zero
                    ^^PCI0.SBRG.IEC.WRAM (0x07CB, Zero)
                }

                If ((ToInteger (Arg0) == One))
                {
                    ^^PCI0.SBRG.IEC.WRAM (0x07CC, Zero)
                }

                If ((ToInteger (Arg0) == 0x02)) {}
            }

            Method (GBNL, 0, NotSerialized)
            {
                Local1 = LBTN /* \_SB_.LBTN */
                BRIL = (Local1 << 0x0D)
            }

            Method (GBIF, 0, NotSerialized)
            {
                If (DCPF)
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD28 /* \_SB_.PCI0.SBRG.IEC_.BD28 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD27 /* \_SB_.PCI0.SBRG.IEC_.BD27 */
                    Local1 |= Local0
                    Local2 = (Local1 << 0x10)
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD2E /* \_SB_.PCI0.SBRG.IEC_.BD2E */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD2D /* \_SB_.PCI0.SBRG.IEC_.BD2D */
                    Local1 |= Local0
                    Local2 |= Local1
                    GBS1 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD38 /* \_SB_.PCI0.SBRG.IEC_.BD38 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD37 /* \_SB_.PCI0.SBRG.IEC_.BD37 */
                    Local1 |= Local0
                    Local2 |= Local1
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD3A /* \_SB_.PCI0.SBRG.IEC_.BD3A */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD39 /* \_SB_.PCI0.SBRG.IEC_.BD39 */
                    Local1 |= Local0
                    Local3 = (Local1 << 0x10)
                    Local2 |= Local3
                    GBS2 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD3C /* \_SB_.PCI0.SBRG.IEC_.BD3C */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD3B /* \_SB_.PCI0.SBRG.IEC_.BD3B */
                    Local1 |= Local0
                    Local2 = (Local1 << 0x10)
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD2A /* \_SB_.PCI0.SBRG.IEC_.BD2A */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD29 /* \_SB_.PCI0.SBRG.IEC_.BD29 */
                    Local1 |= Local0
                    Local2 |= Local1
                    GBS3 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD34 /* \_SB_.PCI0.SBRG.IEC_.BD34 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD33 /* \_SB_.PCI0.SBRG.IEC_.BD33 */
                    Local1 |= Local0
                    If (((Local1 & 0xFFFF) == Zero))
                    {
                        Local0 = Zero
                        Local1 = Zero
                        Local0 = ^^PCI0.SBRG.IEC.BD3A /* \_SB_.PCI0.SBRG.IEC_.BD3A */
                        Local0 <<= 0x08
                        Local1 |= Local0
                        Local0 = ^^PCI0.SBRG.IEC.BD39 /* \_SB_.PCI0.SBRG.IEC_.BD39 */
                        Local1 |= Local0
                    }

                    Local2 |= Local1
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD36 /* \_SB_.PCI0.SBRG.IEC_.BD36 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD35 /* \_SB_.PCI0.SBRG.IEC_.BD35 */
                    Local1 |= Local0
                    Local3 = (Local1 << 0x10)
                    Local2 |= Local3
                    GBS4 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.BD3E /* \_SB_.PCI0.SBRG.IEC_.BD3E */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.SBRG.IEC.BD3D /* \_SB_.PCI0.SBRG.IEC_.BD3D */
                    Local1 |= Local0
                    GBS5 = Local1
                }
                Else
                {
                    GBS1 = 0xFFFF
                    GBS2 = 0xFFFF
                    GBS3 = 0xFFFF
                    GBS4 = 0xFFFF
                    GBS5 = 0xFFFF
                }
            }

            Method (GSMB, 0, NotSerialized)
            {
                If (DCPF)
                {
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDWD, ^^PCI0.SBRG.IEC.BADR, 0x1C, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x1A] = DerefOf (HMTP [Zero])
                    HMBB [0x1B] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDWD, ^^PCI0.SBRG.IEC.BADR, 0x1B, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x18] = DerefOf (HMTP [Zero])
                    HMBB [0x19] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDBL, ^^PCI0.SBRG.IEC.BADR, 0x20, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x0C] = DerefOf (HMTP [Zero])
                    HMBB [0x0D] = DerefOf (HMTP [One])
                    HMBB [0x0E] = DerefOf (HMTP [0x02])
                    HMBB [0x0F] = DerefOf (HMTP [0x03])
                    HMBB [0x10] = DerefOf (HMTP [0x04])
                    HMBB [0x11] = DerefOf (HMTP [0x05])
                    HMBB [0x12] = DerefOf (HMTP [0x06])
                    HMBB [0x13] = DerefOf (HMTP [0x07])
                    HMBB [0x14] = DerefOf (HMTP [0x08])
                    HMBB [0x15] = DerefOf (HMTP [0x09])
                    HMBB [0x16] = DerefOf (HMTP [0x0A])
                    HMBB [0x17] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDBL, ^^PCI0.SBRG.IEC.BADR, 0x30, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [Zero] = DerefOf (HMTP [Zero])
                    HMBB [One] = DerefOf (HMTP [One])
                    HMBB [0x02] = DerefOf (HMTP [0x02])
                    HMBB [0x03] = DerefOf (HMTP [0x03])
                    HMBB [0x04] = DerefOf (HMTP [0x04])
                    HMBB [0x05] = DerefOf (HMTP [0x05])
                    HMBB [0x06] = DerefOf (HMTP [0x06])
                    HMBB [0x07] = DerefOf (HMTP [0x07])
                    HMBB [0x08] = DerefOf (HMTP [0x08])
                    HMBB [0x09] = DerefOf (HMTP [0x09])
                    HMBB [0x0A] = DerefOf (HMTP [0x0A])
                    HMBB [0x0B] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDWD, ^^PCI0.SBRG.IEC.BADR, 0x17, Zero)
                    CYCT = DerefOf (Local0 [0x02])
                }
            }

            Method (PTET, 0, NotSerialized)
            {
                Local0 = ^^PCI0.SBRG.IEC.RRAM (0x0532)
                ^^PCI0.SBRG.IEC.WRAM (0x07B8, Local0)
                Local0 = ^^PCI0.SBRG.IEC.RRAM (0x0534)
                ^^PCI0.SBRG.IEC.WRAM (0x07B7, Local0)
            }

            Method (UMAE, 0, NotSerialized)
            {
                If (^^PCI0.GFX0.PRST ())
                {
                    If (FRST)
                    {
                        LLCD = ~LCDS /* \_SB_.VALZ.LCDS */
                    }

                    If ((LCDS != LLCD))
                    {
                        If ((LCDS == One))
                        {
                            If ((EVCS & One))
                            {
                                Sleep (0x01F4)
                                PUTE (0x19B0)
                            }

                            If ((EVCS & 0x02))
                            {
                                Sleep (0x01F4)
                                PUTE (0x19B2)
                            }
                        }
                        ElseIf ((LCDS == Zero))
                        {
                            If ((EVCS & One))
                            {
                                Sleep (0x01F4)
                                PUTE (0x19B1)
                            }

                            If ((EVCS & 0x02))
                            {
                                Sleep (0x01F4)
                                PUTE (0x19B3)
                            }
                        }

                        LLCD = LCDS /* \_SB_.VALZ.LCDS */
                        FRST = Zero
                    }
                }
            }

            Method (PINT, 0, NotSerialized)
            {
                If (^^PCI0.SBRG.IEC.DCPS (Zero))
                {
                    ISDC = One
                }
                Else
                {
                    ISDC = Zero
                }

                If (^^PCI0.SBRG.IEC.ACPS ())
                {
                    ISAC = One
                }
                Else
                {
                    ISAC = Zero
                }

                GBIF ()
                GSMB ()
                PTET ()
            }

            Method (HMB1, 0, NotSerialized)
            {
                If (DCPF)
                {
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDWD, ^^PCI0.SBRG.IEC.BADR, 0x1C, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x1A] = DerefOf (HMTP [Zero])
                    HMBB [0x1B] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDWD, ^^PCI0.SBRG.IEC.BADR, 0x1B, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x18] = DerefOf (HMTP [Zero])
                    HMBB [0x19] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDBL, ^^PCI0.SBRG.IEC.BADR, 0x20, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x0C] = DerefOf (HMTP [Zero])
                    HMBB [0x0D] = DerefOf (HMTP [One])
                    HMBB [0x0E] = DerefOf (HMTP [0x02])
                    HMBB [0x0F] = DerefOf (HMTP [0x03])
                    HMBB [0x10] = DerefOf (HMTP [0x04])
                    HMBB [0x11] = DerefOf (HMTP [0x05])
                    HMBB [0x12] = DerefOf (HMTP [0x06])
                    HMBB [0x13] = DerefOf (HMTP [0x07])
                    HMBB [0x14] = DerefOf (HMTP [0x08])
                    HMBB [0x15] = DerefOf (HMTP [0x09])
                    HMBB [0x16] = DerefOf (HMTP [0x0A])
                    HMBB [0x17] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDBL, ^^PCI0.SBRG.IEC.BADR, 0x30, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [Zero] = DerefOf (HMTP [Zero])
                    HMBB [One] = DerefOf (HMTP [One])
                    HMBB [0x02] = DerefOf (HMTP [0x02])
                    HMBB [0x03] = DerefOf (HMTP [0x03])
                    HMBB [0x04] = DerefOf (HMTP [0x04])
                    HMBB [0x05] = DerefOf (HMTP [0x05])
                    HMBB [0x06] = DerefOf (HMTP [0x06])
                    HMBB [0x07] = DerefOf (HMTP [0x07])
                    HMBB [0x08] = DerefOf (HMTP [0x08])
                    HMBB [0x09] = DerefOf (HMTP [0x09])
                    HMBB [0x0A] = DerefOf (HMTP [0x0A])
                    HMBB [0x0B] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.SBRG.IEC.SMBR (^^PCI0.SBRG.IEC.RDWD, ^^PCI0.SBRG.IEC.BADR, 0x17, Zero)
                    CYCT = DerefOf (Local0 [0x02])
                    Local0 = (CYCT >> 0x08)
                    Local1 = (CYCT << 0x08)
                    Local0 |= Local1
                    Local0 &= 0xFFFF
                    CYCT = Local0
                    TST1 [Zero] = HMBB /* \_SB_.VALZ.HMBB */
                    TST1 [One] = ToBCD (CYCT)
                    Return (TST1) /* \_SB_.VALZ.TST1 */
                }
                Else
                {
                    Return (TST0) /* \_SB_.VALZ.TST0 */
                }
            }

            Method (HMB2, 0, NotSerialized)
            {
                Return (TST0) /* \_SB_.VALZ.TST0 */
            }

            Method (PCTP, 1, Serialized)
            {
                Local0 = Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                Local1 = (Arg0 + RTCS) /* \_SB_.RTCS */
                Divide (Local1, 0x3C, Local1, Local2)
                Local2 += RTCM /* \_SB_.RTCM */
                Divide (Local2, 0x3C, Local2, Local3)
                Local3 += RTCH /* \_SB_.RTCH */
                Divide (Local3, 0x18, Local3, Local4)
                Local4 += RTCD /* \_SB_.RTCD */
                Local0 [Zero] = Local1
                Local0 [One] = Local2
                Local0 [0x02] = Local3
                Local0 [0x03] = Local4
                Return (Local0)
            }

            Method (PCAR, 1, Serialized)
            {
                Local0 = PCTP (Arg0)
                STTS = DerefOf (Local0 [Zero])
                STTM = DerefOf (Local0 [One])
                STTH = DerefOf (Local0 [0x02])
                STTD = DerefOf (Local0 [0x03])
                If ((STTD > RTCD))
                {
                    STTD = 0x04
                }
                Else
                {
                    STTD = 0x02
                }
            }

            Method (PCAP, 1, Serialized)
            {
                Local0 = PCTP (Arg0)
                STPS = DerefOf (Local0 [Zero])
                STPM = DerefOf (Local0 [One])
                STPH = DerefOf (Local0 [0x02])
                STPD = DerefOf (Local0 [0x03])
                If ((STPD > RTCD))
                {
                    STPD = 0x04
                }
                Else
                {
                    STPD = 0x02
                }
            }

            Method (T2SC, 3, Serialized)
            {
                Local0 = (Arg0 * 0x3C)
                Local0 += Arg1
                Local0 *= 0x3C
                Local0 += Arg2
                Return (Local0)
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                If ((OSFG < OSWB))
                {
                    LFOS = One
                }
                Else
                {
                    BRST = Zero
                    If (BTDP)
                    {
                        SGPL (0x14, One, One)
                    }

                    WRST = One
                    If (WLDP)
                    {
                        SGPL (0x15, One, One)
                    }
                }
            }

            Method (VWAK, 1, Serialized)
            {
                ISFT = One
                W8W7 = Zero
                If ((Arg0 == 0x03))
                {
                    PLGO = One
                    ISMI (0xDA)
                }

                LDEV = Zero
            }

            Method (VPTS, 1, Serialized)
            {
                ^^PCI0.SBRG.IEC.WRAM (0x07C5, Zero)
                OSTP = OSFG /* \OSFG */
                OSTP = OSFG /* \OSFG */
                If ((THTM == One))
                {
                    ^^PCI0.SBRG.IEC.WRAM (0x0521, RFN0)
                    THTM = Zero
                    RFN0 = Zero
                }
            }

            Method (ENAB, 0, Serialized)
            {
                OSMD = One
                Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07B0)
                ^^PCI0.SBRG.IEC.WRAM (0x07B0, (Local0 | One))
                If ((FUKM == One))
                {
                    ^^PCI0.SBRG.IEC.ECXT (0xC0, One, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    ^^PCI0.SBRG.IEC.ECXT (0xC0, Zero, Zero, Zero, Zero, Zero)
                }

                ENFG = One
            }

            Method (SPFC, 6, Serialized)
            {
                OSMD = One
                CopyObject (NULP, RETP) /* \_SB_.VALZ.RETP */
                If ((CMST (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5) == Zero))
                {
                    Return (USFN) /* \_SB_.VALZ.USFN */
                }

                Local0 = Zero
                Local1 = Zero
                Local2 = Zero
                Local3 = Zero
                If (ISFT)
                {
                    PINT ()
                    ISFT = Zero
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x2A)))
                {
                    If ((OSFG >= OSW8))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    GBNL ()
                    RETP [0x02] = BRIL /* \_SB_.VALZ.BRIL */
                    Local0 = 0x07
                    Local0 <<= 0x0D
                    RETP [0x03] = Local0
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x42)))
                {
                    If ((ToInteger (Arg2) == One))
                    {
                        REFM = One
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == 0x10))
                    {
                        REFM = 0x10
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x8300
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x9F)))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        RETP [Zero] = Zero
                        If ((PHNV == 0xFFFF))
                        {
                            PHNV = Zero
                        }

                        RETP [0x03] = PHNV /* \_SB_.PHNV */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == 0xFFFF))
                    {
                        RETP [Zero] = Zero
                        RETP [0x03] = 0x0200
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x8300
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x9F)))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        Local0 = ToInteger (Arg3)
                        PHNV = Local0
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA1)))
                {
                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == 0x02))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        If (DCPF)
                        {
                            Local0 = Zero
                            Local1 = Zero
                            Local0 = ^^PCI0.SBRG.IEC.BD26 /* \_SB_.PCI0.SBRG.IEC_.BD26 */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            Local0 = ^^PCI0.SBRG.IEC.BD25 /* \_SB_.PCI0.SBRG.IEC_.BD25 */
                            Local1 |= Local0
                            Divide (Local1, 0x64, Local0, Local1)
                            BATV = Local1
                        }
                        Else
                        {
                            BATV = 0xFF
                        }

                        STA5 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((STA5 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = BATV /* \_SB_.VALZ.BATV */
                            STA5 = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA2)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA7)))
                {
                    If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == Zero)))
                    {
                        If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == Zero))
                        {
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local1 = Zero
                            Local2 = Zero
                            Local3 = Zero
                            Local0 = 0xFF
                            Local0 <<= 0x18
                            Local1 |= Local0
                            Local0 = Zero
                            Local0 <<= 0x10
                            Local1 |= Local0
                            If ((^^PCI0.SBRG.IEC.TH0R != Zero))
                            {
                                SLCT = ^^PCI0.SBRG.IEC.TH0R /* \_SB_.PCI0.SBRG.IEC_.TH0R */
                                Local0 = ^^PCI0.SBRG.IEC.TH0R /* \_SB_.PCI0.SBRG.IEC_.TH0R */
                            }
                            Else
                            {
                                Local0 = SLCT /* \_SB_.VALZ.SLCT */
                            }

                            Local0 <<= 0x08
                            Local1 |= Local0
                            If (ACPF)
                            {
                                If (((PKFG & One) == Zero))
                                {
                                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07BB)
                                    Local0 <<= 0x08
                                    Local2 |= Local0
                                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07BA)
                                    Local2 |= Local0
                                    Local2 *= 0xC6
                                    Divide (Local2, 0x03E8, Local3, Local2)
                                    ACAV = Local2
                                }
                                Else
                                {
                                    ACAV = 0xFF
                                }
                            }
                            Else
                            {
                                ACAV = 0xFF
                            }

                            Local1 |= ACAV
                            GCV1 = Local1
                            ST08++
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == One))
                        {
                            If ((ST08 == Zero))
                            {
                                RETP [Zero] = 0x8D50
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Else
                            {
                                RETP [Zero] = Zero
                                VAFN = 0x20
                                MSRN = 0x019C
                                ISMI (0xD5)
                                MSRV = MSRL /* \_SB_.MSRL */
                                MSRV &= 0xFF /* \_SB_.VALZ.MSRV */
                                MSRV <<= 0x10
                                GCV1 |= MSRV /* \_SB_.VALZ.GCV1 */
                                Local0 = Zero
                                Local1 = Zero
                                Local2 = Zero
                                Local3 = Zero
                                Local0 <<= 0x18
                                Local1 |= Local0
                                If (ACPF)
                                {
                                    If (((PKFG & One) == Zero))
                                    {
                                        Local0 = ^^PCI0.SBRG.IEC.RRAM (0x03FB)
                                        Local0 <<= 0x08
                                        Local2 |= Local0
                                        Local0 = ^^PCI0.SBRG.IEC.RRAM (0x03FA)
                                        Local2 |= Local0
                                        AVR0 = AVR1 /* \_SB_.VALZ.AVR1 */
                                        AVR1 = AVR2 /* \_SB_.VALZ.AVR2 */
                                        AVR2 = AVR3 /* \_SB_.VALZ.AVR3 */
                                        AVR3 = AVR4 /* \_SB_.VALZ.AVR4 */
                                        AVR4 = AVR5 /* \_SB_.VALZ.AVR5 */
                                        AVR5 = AVR6 /* \_SB_.VALZ.AVR6 */
                                        AVR6 = AVR7 /* \_SB_.VALZ.AVR7 */
                                        AVR7 = AVR8 /* \_SB_.VALZ.AVR8 */
                                        AVR8 = AVR9 /* \_SB_.VALZ.AVR9 */
                                        AVR9 = Local2
                                        Local2 = Zero
                                        Local2 = (AVR0 + AVR1) /* \_SB_.VALZ.AVR1 */
                                        Local2 += AVR2
                                        Local2 += AVR3
                                        Local2 += AVR4
                                        Local2 += AVR5
                                        Local2 += AVR6
                                        Local2 += AVR7
                                        Local2 += AVR8
                                        Local2 += AVR9
                                        Divide (Local2, 0x0A, Local3, Local2)
                                        Local2 *= 0x0753
                                        Divide (Local2, 0x80, Local3, Local2)
                                        ACAC = Local2
                                    }
                                    Else
                                    {
                                        ACAC = 0xFFFF
                                    }
                                }
                                Else
                                {
                                    ACAC = 0xFFFF
                                }

                                Local1 |= ACAC
                                Local2 = 0x78
                                Local2 <<= 0x10
                                Local1 |= Local2
                                GCV2 = Local1
                                RETP [0x02] = GCV1 /* \_SB_.VALZ.GCV1 */
                                RETP [0x03] = GCV2 /* \_SB_.VALZ.GCV2 */
                                If ((ST08 > Zero))
                                {
                                    ST08--
                                }
                                Else
                                {
                                    ST08 = Zero
                                }

                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0x98)))
                {
                    If ((ToInteger (Arg2) == 0x02))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        If (DCPF)
                        {
                            If ((((PKFG & One) == One) || !ACPF))
                            {
                                Local0 = ^^PCI0.SBRG.IEC.BD30 /* \_SB_.PCI0.SBRG.IEC_.BD30 */
                                Local0 <<= 0x08
                                Local1 |= Local0
                                Local0 = ^^PCI0.SBRG.IEC.BD2F /* \_SB_.PCI0.SBRG.IEC_.BD2F */
                                Local1 |= Local0
                                If ((Local1 >= 0x8000))
                                {
                                    Local1 = (0xFFFF - Local1)
                                    Local1 += One
                                }

                                BACR = Local1
                            }
                            Else
                            {
                                BACR = Zero
                            }

                            Local0 = Zero
                            Local1 = Zero
                            Local0 = ^^PCI0.SBRG.IEC.BD32 /* \_SB_.PCI0.SBRG.IEC_.BD32 */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            Local0 = ^^PCI0.SBRG.IEC.BD31 /* \_SB_.PCI0.SBRG.IEC_.BD31 */
                            Local1 |= Local0
                            Local1 -= 0x0AAA
                            Divide (Local1, 0x0A, Local3, Local1)
                            BATP = Local1
                        }
                        Else
                        {
                            BACR = 0xFFFF
                            BATP = 0xFF
                        }

                        ST09 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST09 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = BACR /* \_SB_.VALZ.BACR */
                            RETP [0x03] = BATP /* \_SB_.VALZ.BATP */
                            ST09 = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0x9A)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0x9B)))
                {
                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        GPCT (ToInteger (Arg2))
                        ST11 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST11 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg2) == Zero))
                            {
                                RETP [Zero] = Zero
                                RETP [0x03] = CNT1 /* \_SB_.VALZ.CNT1 */
                                RETP [0x02] = CNT2 /* \_SB_.VALZ.CNT2 */
                                CPCT (Zero)
                                ST11 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg2) == One))
                            {
                                RETP [0x02] = CNT3 /* \_SB_.VALZ.CNT3 */
                                CPCT (One)
                                ST11 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg2) == 0x02))
                            {
                                RETP [0x03] = CNT4 /* \_SB_.VALZ.CNT4 */
                                RETP [0x02] = CNT5 /* \_SB_.VALZ.CNT5 */
                                CPCT (0x02)
                                ST11 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0xA0)))
                {
                    If ((ToInteger (Arg3) == Zero))
                    {
                        If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg5) == Zero))
                            {
                                RETP [Zero] = Zero
                                ST12 = One
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg5) == One))
                            {
                                If ((ST12 == Zero))
                                {
                                    RETP [Zero] = 0x8D50
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }
                                Else
                                {
                                    RETP [Zero] = Zero
                                    RETP [0x02] = EVCS /* \_SB_.VALZ.EVCS */
                                    ST11 = Zero
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }
                            }
                        }
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xA0)))
                {
                    If ((ToInteger (Arg2) & 0xF4))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) == Zero))
                    {
                        ENLE = One
                        RETP [Zero] = Zero
                        EVCS = ToInteger (Arg2)
                        If ((LCDS == One))
                        {
                            If ((EVCS & 0x02))
                            {
                                If (GLID ())
                                {
                                    PUTE (0x19B2)
                                }
                                Else
                                {
                                    PUTE (0x19B3)
                                }
                            }
                        }
                        ElseIf ((EVCS & 0x02))
                        {
                            PUTE (0x19B3)
                        }

                        If ((EVCS & One))
                        {
                            If ((LCDS == One))
                            {
                                PUTE (0x19B0)
                            }
                            Else
                            {
                                PUTE (0x19B1)
                            }
                        }

                        If ((EVCS & 0x08))
                        {
                            ^^PCI0.SBRG.IEC.WRAM (0x07C5, 0x80)
                            PTET ()
                        }
                        Else
                        {
                            ^^PCI0.SBRG.IEC.WRAM (0x07C5, Zero)
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA8)))
                {
                    If (((ToInteger (Arg3) == Zero) && (ToInteger (Arg4) == 0x9D)))
                    {
                        If ((HAPD == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == Zero))
                        {
                            RETP [Zero] = Zero
                        }

                        If ((ToInteger (Arg5) == One))
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = HPCS /* \_SB_.VALZ.HPCS */
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x9D)))
                {
                    If ((HAPD == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        RETP [Zero] = Zero
                        HPCS = ToInteger (Arg2)
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0xA9)))
                {
                    If (((ToInteger (Arg2) == 0x02) || (ToInteger (Arg2) == 0x8002)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        ST16 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST16 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                RETP [Zero] = Zero
                                If (DCPF)
                                {
                                    Local0 = ^^PCI0.SBRG.IEC.BD28 /* \_SB_.PCI0.SBRG.IEC_.BD28 */
                                    Local1 = ^^PCI0.SBRG.IEC.BD27 /* \_SB_.PCI0.SBRG.IEC_.BD27 */
                                    Local0 <<= 0x08
                                    Local1 += Local0
                                    Local1 <<= 0x10
                                    GBS1 &= 0xFFFF
                                    GBS1 += Local1
                                }
                                Else
                                {
                                    GBS1 = 0xFFFF
                                }

                                RETP [0x02] = GBS1 /* \_SB_.VALZ.GBS1 */
                                RETP [0x05] = GBS2 /* \_SB_.VALZ.GBS2 */
                                RETP [0x04] = GBS3 /* \_SB_.VALZ.GBS3 */
                                RETP [0x03] = GBS4 /* \_SB_.VALZ.GBS4 */
                                ST16 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg2) == 0x8001))
                            {
                                RETP [Zero] = Zero
                                RETP [0x02] = GBS5 /* \_SB_.VALZ.GBS5 */
                                ST16 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xAA)))
                {
                    RETP [Zero] = Zero
                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07B8)
                    Local1 = ^^PCI0.SBRG.IEC.RRAM (0x07B7)
                    CTOV = Local0
                    CTO1 = Local1
                    RETP [0x02] = CTOV /* \_SB_.VALZ.CTOV */
                    RETP [0x03] = CTO1 /* \_SB_.VALZ.CTO1 */
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg1) == 0x56))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == One))
                        {
                            Local0 = Zero
                            Local0 |= One
                            If (RGPL (0x15, One))
                            {
                                Local0 |= 0x0200
                            }

                            RETP [Zero] = Zero
                            RETP [0x02] = Local0
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        ElseIf ((ToInteger (Arg3) == 0x03))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        ElseIf ((ToInteger (Arg3) == 0xFFFE))
                        {
                            RETP [Zero] = Zero
                            If ((LFOS == One))
                            {
                                RETP [0x02] = Zero
                            }
                            Else
                            {
                                RETP [0x02] = One
                            }

                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        If (((ToInteger (Arg2) != Zero) && (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == 0x0200))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                If (WLDP)
                                {
                                    SGPL (0x15, One, One)
                                }

                                If (WLDP)
                                {
                                    SGPL (0x15, One, One)
                                }

                                WRST = One
                            }
                            Else
                            {
                                If (WLDP)
                                {
                                    SGPL (0x15, One, Zero)
                                }

                                If (WLDP)
                                {
                                    SGPL (0x15, One, Zero)
                                }

                                WRST = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x2000))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                            If ((ToInteger (Arg2) == One))
                            {
                                If (W3DP) {}
                                If (W3DP) {}
                                WRPS = One
                            }
                            Else
                            {
                                If (W3DP) {}
                                If (W3DP) {}
                                WRPS = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x4000))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                            If ((ToInteger (Arg2) == One))
                            {
                                If (W3DP) {}
                                If (W3DP) {}
                                WRPS = One
                            }
                            Else
                            {
                                If (W3DP) {}
                                If (W3DP) {}
                                WRPS = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x0800))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                            If ((ToInteger (Arg2) == One))
                            {
                                If (WUDP) {}
                                If (WUDP) {}
                                BRPS = One
                            }
                            Else
                            {
                                If (WUDP) {}
                                If (WUDP) {}
                                BRPS = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0xFFFE))
                        {
                            If ((OSFG >= OSWB))
                            {
                                If ((ToInteger (Arg2) == One))
                                {
                                    LFOS = Zero
                                }
                                Else
                                {
                                    LFOS = One
                                }
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0xFFFF))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x050E)))
                {
                    Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07C7)
                    RETP [Zero] = Zero
                    RETP [One] = Zero
                    If ((Local0 & One))
                    {
                        RETP [0x02] = Zero
                    }
                    Else
                    {
                        RETP [0x02] = One
                    }

                    RETP [0x04] = One
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x050E)))
                {
                    If (IPED)
                    {
                        Local0 = ToInteger (Arg2)
                        ^^PCI0.SBRG.IEC.ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                        If ((Local0 != Zero))
                        {
                            ^^PCI0.SBRG.IEC.ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                            TPON = One
                        }
                        Else
                        {
                            ^^PCI0.SBRG.IEC.ECXT (0xB5, One, Zero, Zero, Zero, Zero)
                            TPON = Zero
                        }
                    }

                    Return (NULP) /* \_SB_.VALZ.NULP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x5A)))
                {
                    If ((OSFG >= OSW8))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    Else
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            STMD = Zero
                            VAFN = 0x10
                            SSTK = Zero
                            ISMI (0xD5)
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }
                        Else
                        {
                            VAFN = 0x10
                            SSTK = One
                            ISMI (0xD5)
                        }

                        If ((ToInteger (Arg2) == One))
                        {
                            STMD = One
                            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07B0)
                            ^^PCI0.SBRG.IEC.WRAM (0x07B0, (Local0 & 0xEF))
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg2) == 0x02))
                        {
                            STMD = 0x02
                            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07B0)
                            ^^PCI0.SBRG.IEC.WRAM (0x07B0, (Local0 | 0x10))
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x7F)))
                {
                    If (CT1T)
                    {
                        If (TDPC ())
                        {
                            CMCL = Zero
                            CMAC = One
                            CMDC = 0x02
                        }
                        Else
                        {
                            CMCL = 0xFE
                            CMAC = Zero
                            CMDC = One
                        }

                        CT1T = Zero
                    }

                    If (((ToInteger (Arg2) != Zero) && (ToInteger (Arg3
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    If ((CMMD == 0xFF))
                    {
                        If (ACPF)
                        {
                            RETP [0x02] = CMAC /* \_SB_.VALZ.CMAC */
                        }
                        ElseIf (DCPF)
                        {
                            RETP [0x02] = CMDC /* \_SB_.VALZ.CMDC */
                        }
                    }
                    ElseIf ((CMMD == CMAC))
                    {
                        RETP [0x02] = CMAC /* \_SB_.VALZ.CMAC */
                    }
                    ElseIf ((CMMD == CMDC))
                    {
                        RETP [0x02] = CMDC /* \_SB_.VALZ.CMDC */
                    }
                    ElseIf ((CMMD == CMCL))
                    {
                        RETP [0x02] = CMCL /* \_SB_.VALZ.CMCL */
                    }

                    If (TDPC ())
                    {
                        RETP [0x03] = 0x02
                        RETP [0x04] = One
                        RETP [0x05] = One
                    }
                    Else
                    {
                        RETP [0x03] = One
                        RETP [0x04] = Zero
                        RETP [0x05] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x7F)))
                {
                    If ((ToInteger (Arg2) == CMAC))
                    {
                        CMMD = CMAC /* \_SB_.VALZ.CMAC */
                        ^^PCI0.SBRG.IEC.PTPT ()
                        TDPN ()
                        \_TZ.THRM._SCP (Zero)
                    }

                    If ((ToInteger (Arg2) == CMDC))
                    {
                        CMMD = CMDC /* \_SB_.VALZ.CMDC */
                        ^^PCI0.SBRG.IEC.PTPT ()
                        TDPN ()
                        \_TZ.THRM._SCP (One)
                    }

                    If ((ToInteger (Arg2) == CMCL))
                    {
                        CMMD = CMCL /* \_SB_.VALZ.CMCL */
                        ^^PCI0.SBRG.IEC.PTPT ()
                        TDPD ()
                        \_TZ.THRM._SCP (One)
                    }

                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg1) == 0x62))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = Zero
                        RETP [0x02] = Zero
                        If (ESTR)
                        {
                            RETP [0x03] = 0x21
                        }
                        Else
                        {
                            RETP [0x03] = Zero
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x11)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        Local0 = One
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        Local0 = One
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        Local0 = One
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        Local0 = One
                    }

                    If ((Local0 == One))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    PSMD = GLPS ()
                    RETP [Zero] = Zero
                    RETP [0x02] = PSMD /* \_SB_.VALZ.PSMD */
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == Zero)))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == One)))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x1E)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        If (((ToInteger (Arg2) & 0x10) == 0x10))
                        {
                            If ((FUKM == One))
                            {
                                ^^PCI0.SBRG.IEC.ECXT (0xC0, One, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                ^^PCI0.SBRG.IEC.ECXT (0xC0, Zero, Zero, Zero, Zero, Zero)
                            }
                        }
                        Else
                        {
                            ^^PCI0.SBRG.IEC.ECXT (0xC0, Zero, Zero, Zero, Zero, Zero)
                        }
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    HKEV = ToInteger (Arg2)
                    HKHT = ToInteger (Arg3)
                    Return (NULP) /* \_SB_.VALZ.NULP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x1E)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    RETP [0x02] = HKEV /* \_SB_.VALZ.HKEV */
                    RETP [0x03] = HKHT /* \_SB_.VALZ.HKHT */
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF300))
                {
                    If ((ToInteger (Arg1) == 0x010E))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8005
                        VAFN = 0x12
                        ASFN = One
                        ADTE = Zero
                        ISMI (0xD5)
                        RETP [0x02] = ADTE /* \_SB_.ADTE */
                        RETP [0x03] = 0xFFFE
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x010F))
                    {
                        VAFN = 0x12
                        ASFN = 0x02
                        ATME = Zero
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        RETP [One] = 0x8004
                        RETP [0x02] = ATME /* \_SB_.ATME */
                        RETP [0x03] = 0x0FFF
                        RETP [0x04] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xF400))
                {
                    If ((ToInteger (Arg1) == 0x010E))
                    {
                        VAFN = 0x12
                        ASFN = 0x03
                        ADTE = ToInteger (Arg2)
                        ISMI (0xD5)
                        If ((ADTE == 0x8300))
                        {
                            ADTE = Zero
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        ADTE = Zero
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }

                    If ((ToInteger (Arg1) == 0x010F))
                    {
                        VAFN = 0x12
                        ASFN = 0x04
                        ATME = ToInteger (Arg2)
                        ISMI (0xD5)
                        If ((ATME == 0x8300))
                        {
                            ATME = Zero
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        ATME = Zero
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x75)))
                {
                    Return (NULP) /* \_SB_.VALZ.NULP */
                }

                If ((ToInteger (Arg1) == 0x8C))
                {
                    If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg2) == 
                        Zero)) && (ToInteger (Arg3) == Zero)))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg3) == Zero)))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                        If (((ToInteger (Arg2) & One) == Zero)) {}
                        Else
                        {
                        }

                        If (((ToInteger (Arg2) & 0x02) == Zero)) {}
                        Else
                        {
                        }

                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If ((ToInteger (Arg1) == 0x014E))
                {
                    If ((((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg2) == 
                        Zero)) && (ToInteger (Arg3) == Zero))) {}
                    If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg3) == Zero))) {}
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xB7)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                    Local0 = Zero
                    RETP [Zero] = Zero
                    RETP [0x02] = Local0
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xB7)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        RETP [Zero] = Zero
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x010D)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    RETP [One] = Zero
                    If ((PNPO == Zero))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((DPNP == Zero))
                    {
                        RETP [0x04] = One
                    }
                    Else
                    {
                        RETP [0x04] = Zero
                    }

                    RETP [0x05] = One
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x010D)))
                {
                    If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == One))
                    {
                        PNPO = Zero
                    }
                    Else
                    {
                        PNPO = One
                    }

                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x015E)))
                {
                    If ((SMZS == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    RETP [One] = Zero
                    If ((SLMZ == Zero))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((DSMZ == Zero))
                    {
                        RETP [0x04] = One
                    }
                    Else
                    {
                        RETP [0x04] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x015E)))
                {
                    If ((SMZS == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        If ((ToInteger (Arg2) == One))
                        {
                            SLMZ = Zero
                        }
                        Else
                        {
                            SLMZ = Zero
                        }
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x0167)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = One
                    RETP [One] = Zero
                    If ((BTMU == Zero))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((DBTM == Zero))
                    {
                        RETP [0x04] = One
                    }
                    Else
                    {
                        RETP [0x04] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x0167)))
                {
                    If (((ToInteger (Arg2) != Zero) && (ToInteger (Arg2
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    VAFN = 0x60
                    ISMI (0xD5)
                    If (((BTMS & 0x07) == 0x07))
                    {
                        RETP [Zero] = 0x8400
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((BTMS & 0x38))
                    {
                        RETP [Zero] = 0x8C00
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == One))
                    {
                        BTMU = Zero
                    }
                    Else
                    {
                        BTMU = One
                    }

                    RETP [Zero] = One
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x0169)))
                {
                    If ((IU3C == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = One
                    RETP [One] = Zero
                    If ((USBX == One))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((DUSX == One))
                    {
                        RETP [0x04] = One
                    }
                    Else
                    {
                        RETP [0x04] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x0169)))
                {
                    If ((IU3C == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        If (ToInteger (Arg2))
                        {
                            USBX = One
                        }
                        Else
                        {
                            USBX = Zero
                        }

                        RETP [Zero] = One
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x016B)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((SBTS == One))
                    {
                        RETP [Zero] = 0x03
                    }
                    Else
                    {
                        RETP [Zero] = One
                    }

                    RETP [One] = Zero
                    If ((BOTC == 0x02))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((DBTC == 0x02))
                    {
                        RETP [0x04] = One
                    }
                    Else
                    {
                        RETP [0x04] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x016B)))
                {
                    If ((SBTS == One))
                    {
                        RETP [Zero] = 0x8400
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        If ((ToInteger (Arg2) == One))
                        {
                            TPME = One
                            SBTS = One
                            VAFN = 0x53
                            ISMI (0xD5)
                            BOTC = 0x02
                        }
                        ElseIf ((SCSM == One))
                        {
                            BOTC = One
                        }
                        Else
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = One
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x0406)))
                {
                    If ((SSAI == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = One
                    RETP [One] = Zero
                    If ((SIFS == 0x03))
                    {
                        RETP [0x02] = Zero
                    }
                    Else
                    {
                        RETP [0x02] = One
                    }

                    If ((DSIF == 0x03))
                    {
                        RETP [0x04] = Zero
                    }
                    Else
                    {
                        RETP [0x04] = One
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x0406)))
                {
                    If ((SSAI == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            SIFS = 0x03
                        }
                        Else
                        {
                            SIFS = One
                        }

                        RETP [Zero] = One
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x0522)))
                {
                    RETP [Zero] = One
                    RETP [One] = Zero
                    If ((FUKM == One))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((DFKM == One))
                    {
                        RETP [0x04] = One
                    }
                    Else
                    {
                        RETP [0x04] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x0522)))
                {
                    If (ToInteger (Arg2))
                    {
                        FUKM = One
                    }
                    Else
                    {
                        FUKM = Zero
                    }

                    RETP [Zero] = One
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x0705)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x0705)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((W8W7 == Zero))
                {
                    If ((OSFG >= OSW8))
                    {
                        ^^PCI0.SBRG.IEC.WRAM (0x0617, One)
                    }
                    Else
                    {
                        ^^PCI0.SBRG.IEC.WRAM (0x0617, Zero)
                    }

                    W8W7 = One
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xC3)))
                {
                    If ((OSFG >= OSW8))
                    {
                        HISD = Zero
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If (((ToInteger (Arg2) != Zero) || (ToInteger (Arg3
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    If ((HISD == 0x05))
                    {
                        RETP [0x02] = One
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    RETP [0x04] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC3)))
                {
                    If ((OSFG >= OSW8))
                    {
                        HISD = Zero
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (ToInteger (Arg2))
                    {
                        HISD = 0x05
                    }
                    Else
                    {
                        HISD = Zero
                    }

                    If ((ToInteger (Arg3) == One))
                    {
                        ^^PCI0.SBRG.IEC.C1MD (0x02, Buffer (0x02)
                            {
                                 0xE0, 0x5A                                       // .Z
                            })
                        ^^PCI0.SBRG.IEC.C1MD (0x03, Buffer (0x03)
                            {
                                 0xE0, 0xF0, 0x5A                                 // ..Z
                            })
                    }

                    If ((ToInteger (Arg3) == 0x02))
                    {
                        ^^PCI0.SBRG.IEC.C1MD (One, Buffer (One)
                            {
                                 0x76                                             // v
                            })
                        ^^PCI0.SBRG.IEC.C1MD (0x02, Buffer (0x02)
                            {
                                 0xF0, 0x76                                       // .v
                            })
                    }

                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg1) == 0xBC))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        If ((TVTE == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        Local0 = Zero
                        Local1 = ^^PCI0.SBRG.IEC.RRAM (0x0C00)
                        If (((Local1 & 0x40) == 0x40))
                        {
                            Local0 |= One
                        }

                        Local1 = ^^PCI0.SBRG.IEC.RRAM (0x0C01)
                        If (((Local1 & 0x10) == 0x10))
                        {
                            Local0 |= 0x02
                        }

                        RETP [0x02] = Local0
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        If ((TVTE == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If (((ToInteger (Arg2) != Zero) && (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        Local0 = ^^PCI0.SBRG.IEC.RRAM (0x0C01)
                        Local0 &= 0xEF
                        ^^PCI0.SBRG.IEC.WRAM (0x0C01, Local0)
                        Local0 = ^^PCI0.SBRG.IEC.RRAM (0x0C00)
                        If (((ToInteger (Arg2) & One) == One))
                        {
                            Local0 |= 0x40
                        }
                        Else
                        {
                            Local0 &= 0xBF
                        }

                        ^^PCI0.SBRG.IEC.WRAM (0x0C00, Local0)
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xC4)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC4)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg1) == 0x47))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = Zero
                    }
                    ElseIf ((ToInteger (Arg0) == 0xFF00)) {}
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If ((ToInteger (Arg2) == 0x03))
                    {
                        Local0 = GHMI ()
                        Local1 = CHMI ()
                        Local1 <<= 0x04
                        RETP [0x02] = Local1
                        Local0 <<= 0x04
                        RETP [Zero] = Zero
                        RETP [0x03] = Local0
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xFE00))
                {
                    If ((ToInteger (Arg1) == 0x67))
                    {
                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == Zero))
                        {
                            PKFG &= 0xFF7F
                            If (^^PCI0.SBRG.IEC.ACAP ())
                            {
                                PKFG |= 0x80
                            }

                            RETP [0x02] = PKFG /* \_SB_.VALZ.PKFG */
                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == One))
                        {
                            VAFN = 0x41
                            ISMI (0xD5)
                            Local0 = ^^PCI0.SBRG.IEC.ECXT (0xC5, Zero, Zero, Zero, Zero, Zero)
                            Local1 = Package (0x0D)
                                {
                                    0xC6, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                }
                            Local1 = ^^PCI0.SBRG.IEC.ECXL (Local1)
                            Local2 = T2SC (DerefOf (Local0 [0x02]), DerefOf (Local0 [0x03]
                                ), DerefOf (Local0 [0x04]))
                            Local3 = T2SC (DerefOf (Local1 [0x04]), DerefOf (Local1 [0x05]
                                ), DerefOf (Local1 [0x06]))
                            Local4 = T2SC (DerefOf (Local1 [0x08]), DerefOf (Local1 [0x09]
                                ), DerefOf (Local1 [0x0A]))
                            If ((STRT < STPT))
                            {
                                If ((DerefOf (Local1 [0x03]) == DerefOf (Local1 [0x07])))
                                {
                                    If (STRT)
                                    {
                                        If ((Local2 >= Local3))
                                        {
                                            STRT = Zero
                                        }
                                    }

                                    If (STPT)
                                    {
                                        If ((STRT == Zero))
                                        {
                                            If ((Local2 >= Local4))
                                            {
                                                STPT = Zero
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((DerefOf (Local0 [One]) == One))
                                    {
                                        If (STRT)
                                        {
                                            If ((Local2 >= Local3))
                                            {
                                                STRT = Zero
                                            }
                                        }
                                    }

                                    If ((DerefOf (Local0 [One]) == 0x02))
                                    {
                                        STRT = Zero
                                        If (STPT)
                                        {
                                            If ((Local2 >= Local4))
                                            {
                                                STPT = Zero
                                            }
                                        }
                                    }
                                }
                            }

                            Local0 = STRT /* \_SB_.STRT */
                            Local0 <<= 0x10
                            Local0 |= STPT /* \_SB_.STPT */
                            RETP [0x02] = Local0
                            RETP [0x04] = One
                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xFF00))
                {
                    If ((ToInteger (Arg1) == 0x67))
                    {
                        If ((ToInteger (Arg3) == Zero))
                        {
                            Switch (Arg2)
                            {
                                Case (Zero)
                                {
                                    PKFG &= 0xFF80
                                    STRT = Zero
                                    STPT = Zero
                                }
                                Case (0x10)
                                {
                                    PKFG |= One
                                }
                                Case (0x11)
                                {
                                    PKFG &= 0xFFFE
                                }
                                Case (0x20)
                                {
                                    PKFG |= 0x02
                                }
                                Case (0x21)
                                {
                                    PKFG &= 0xFFFD
                                }
                                Case (0x40)
                                {
                                    PKFG |= 0x04
                                }
                                Case (0x41)
                                {
                                    PKFG &= 0xFFFB
                                }
                                Default
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                            }

                            If ((PKFG & One))
                            {
                                ^^PCI0.SBRG.IEC.ECXT (0xC4, 0x03, Zero, Zero, Zero, Zero)
                            }
                            ElseIf ((PKFG & 0x02))
                            {
                                ^^PCI0.SBRG.IEC.ECXT (0xC4, 0x04, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                ^^PCI0.SBRG.IEC.ECXT (0xC4, Zero, Zero, Zero, Zero, Zero)
                                ^^PCI0.SBRG.IEC.ECXT (0xC7, Zero, Zero, Zero, Zero, Zero)
                                PKIM = Zero
                                PKSK = Zero
                            }

                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == One))
                        {
                            Local0 = ToInteger (Arg2)
                            Local1 = (Local0 & 0xFFFF)
                            Local0 >>= 0x10
                            If (((Local0 > 0x05A0) || (Local1 > 0x05A0)))
                            {
                                RETP [Zero] = 0x8300
                            }
                            ElseIf ((Local0 > Local1))
                            {
                                If (!ACPF)
                                {
                                    ^^PCI0.SBRG.IEC.ECXT (0xC4, 0x04, Zero, Zero, Zero, Zero)
                                }

                                RETP [Zero] = Zero
                            }
                            ElseIf ((((Local0 != Zero) || (Local1 != Zero)) || 
                                ((PKFG & 0x04) && ((Local0 == Zero) && (Local1 == Zero)))))
                            {
                                STRT = Local0
                                STPT = Local1
                                VAFN = 0x42
                                ISMI (0xD5)
                                VAFN = 0x40
                                ISMI (0xD5)
                                RTCD = One
                                ^^PCI0.SBRG.IEC.ECXT (0xC2, RTCD, RTCH, RTCM, RTCS, Zero)
                                Local0 *= 0x3C
                                Local1 *= 0x3C
                                If (Local0)
                                {
                                    PCAR (Local0)
                                    PCAP (Local1)
                                }
                                Else
                                {
                                    If ((Local1 == Zero))
                                    {
                                        Local1 = (0x3C - RTCS) /* \_SB_.RTCS */
                                        If ((Local1 <= (Local0 + 0x03)))
                                        {
                                            Local1 = 0x02
                                        }
                                    }

                                    PCAR (Local0)
                                    PCAP (Local1)
                                }

                                Local2 = Package (0x0D)
                                    {
                                        0xC3, 
                                        Zero, 
                                        0x04, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    }
                                PKIM = One
                                Local2 [0x04] = STTD /* \_SB_.VALZ.STTD */
                                Local2 [0x05] = STTH /* \_SB_.VALZ.STTH */
                                Local2 [0x06] = STTM /* \_SB_.VALZ.STTM */
                                Local2 [0x07] = STTS /* \_SB_.VALZ.STTS */
                                Local2 [0x08] = STPD /* \_SB_.VALZ.STPD */
                                Local2 [0x09] = STPH /* \_SB_.VALZ.STPH */
                                Local2 [0x0A] = STPM /* \_SB_.VALZ.STPM */
                                Local2 [0x0B] = STPS /* \_SB_.VALZ.STPS */
                                ^^PCI0.SBRG.IEC.ECXL (Local2)
                                PKSK = One
                                RETP [Zero] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }

                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xFE00))
                {
                    If ((ToInteger (Arg1) == 0x96))
                    {
                        RETP [Zero] = Zero
                        RETP [0x02] = 0xFF40
                        RETP [0x03] = GMID ()
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0xBA))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        If (!^^PCI0.SBRG.IEC.DCPS (Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((^^PCI0.SBRG.IEC.RRAM (0x07CF) & One))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == Zero))
                        {
                            RETP [Zero] = Zero
                            STMP = One
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == One))
                        {
                            If ((STMP == Zero))
                            {
                                RETP [Zero] = 0x8D50
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Else
                            {
                                STMP = Zero
                                RETP [Zero] = Zero
                                Local0 = Zero
                                Local0 = ^^PCI0.SBRG.IEC.RRAM (0x03AA)
                                Local0 &= One
                                If (Local0)
                                {
                                    RETP [0x02] = One
                                    If ((BECM == Zero))
                                    {
                                        ^^PCI0.SBRG.IEC.ECXT (0xB9, Zero, Zero, Zero, Zero, Zero)
                                        RETP [0x02] = Zero
                                    }
                                }
                                Else
                                {
                                    RETP [0x02] = Zero
                                    If ((BECM == One))
                                    {
                                        ^^PCI0.SBRG.IEC.ECXT (0xB9, One, Zero, Zero, Zero, Zero)
                                        RETP [0x02] = One
                                    }
                                }

                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        If (!^^PCI0.SBRG.IEC.DCPS (Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((^^PCI0.SBRG.IEC.RRAM (0x07CF) & One))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If (((ToInteger (Arg2) != Zero) && (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg2) == Zero))
                        {
                            ^^PCI0.SBRG.IEC.ECXT (0xB9, Zero, Zero, Zero, Zero, Zero)
                            BECM = Zero
                        }

                        If ((ToInteger (Arg2) == One))
                        {
                            ^^PCI0.SBRG.IEC.ECXT (0xB9, One, Zero, Zero, Zero, Zero)
                            BECM = One
                        }

                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x011D))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8001
                        RETP [0x03] = 0x05
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0126))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8502
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0129))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0130))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((SBIL == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = One
                        RETP [One] = Zero
                        If ((BILN == One))
                        {
                            RETP [0x02] = One
                        }
                        Else
                        {
                            RETP [0x02] = Zero
                        }

                        If ((DBIL == One))
                        {
                            RETP [0x04] = One
                        }
                        Else
                        {
                            RETP [0x04] = Zero
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((SBIL == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If (ToInteger (Arg2))
                        {
                            BILN = One
                        }
                        Else
                        {
                            BILN = Zero
                        }

                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0132))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [One] = 0x8001
                        RETP [0x03] = 0x02
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0136))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0137))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = One
                        RETP [One] = 0x800A
                        If ((WOKB == Zero))
                        {
                            RETP [0x02] = 0x08
                        }
                        Else
                        {
                            RETP [0x02] = Zero
                        }

                        RETP [0x03] = 0x08
                        If ((DWOK == Zero))
                        {
                            RETP [0x04] = 0x08
                        }
                        Else
                        {
                            RETP [0x04] = Zero
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        If (((ToInteger (Arg2) & 0xFFF7) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg2) & 0x08))
                        {
                            WOKB = Zero
                        }
                        Else
                        {
                            WOKB = One
                        }

                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0138))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x013A))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0142))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8001
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0146))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8001
                        RETP [0x03] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x014F))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [One] = 0x8001
                        RETP [0x03] = 0x03
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0157))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [One] = 0x8505
                        VAFN = 0x50
                        ISMI (0xD5)
                        RETP [0x02] = BDVS /* \_SB_.BDVS */
                        If ((SLNB != Zero))
                        {
                            If ((SODD != Zero))
                            {
                                RETP [0x03] = 0x04
                                RETP [0x04] = 0xFFFF3291
                            }
                            Else
                            {
                                RETP [0x03] = 0x03
                                RETP [0x04] = 0xFFFFF391
                            }
                        }
                        ElseIf ((SODD != Zero))
                        {
                            RETP [0x03] = 0x03
                            RETP [0x04] = 0xFFFFF291
                        }
                        Else
                        {
                            RETP [0x03] = 0x02
                            RETP [0x04] = 0xFFFFFF91
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        BDVS = ToInteger (Arg2)
                        VAFN = 0x51
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x015B))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8504
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x015D))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0300))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = 0x8200
                        If ((PODS == Zero))
                        {
                            RETP [0x02] = 0x3290
                        }
                        ElseIf ((PODS == One))
                        {
                            RETP [0x02] = 0x1290
                        }
                        ElseIf ((PODS == 0x02))
                        {
                            If ((EXDP == Zero))
                            {
                                RETP [0x02] = 0x3291
                            }
                            ElseIf ((EXDP == 0x02))
                            {
                                RETP [0x02] = 0x3294
                            }
                        }

                        If ((SCRT == Zero))
                        {
                            RETP [0x03] = 0x3294
                        }
                        Else
                        {
                            RETP [0x03] = 0x3295
                        }

                        RETP [0x04] = 0x3290
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        If ((((ToInteger (Arg2) != 0x3290) & (ToInteger (
                            Arg2) != 0x1290)) & ((ToInteger (Arg2) != 0x3291) & (
                            ToInteger (Arg2) != 0x3294))))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg2) == 0x3290))
                        {
                            PODS = Zero
                        }
                        ElseIf ((ToInteger (Arg2) == 0x1290))
                        {
                            PODS = One
                        }
                        ElseIf ((ToInteger (Arg2) == 0x3291))
                        {
                            If ((SCRT == Zero))
                            {
                                RETP [Zero] = 0x8300
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Else
                            {
                                PODS = 0x02
                                EXDP = Zero
                            }
                        }
                        ElseIf ((ToInteger (Arg2) == 0x3294))
                        {
                            PODS = 0x02
                            EXDP = 0x02
                        }

                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0405))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = 0x8001
                        RETP [0x03] = 0x05
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0501))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = 0x8101
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0502))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x050C))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x050D))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0700))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        If ((SBIL == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg2) != 0x0800))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [One] = 0x8700
                        If ((WOLN == Zero))
                        {
                            RETP [0x02] = 0x0801
                        }
                        Else
                        {
                            RETP [0x02] = 0x0800
                        }

                        If ((DWOL == Zero))
                        {
                            RETP [0x04] = 0x0801
                        }
                        Else
                        {
                            RETP [0x04] = 0x0800
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        If ((SBIL == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If (((ToInteger (Arg2) != 0x0800) && (ToInteger (Arg2
                            ) != 0x0801)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg2) == 0x0801))
                        {
                            WOLN = Zero
                        }
                        Else
                        {
                            WOLN = One
                        }

                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xFE00))
                {
                    If ((ToInteger (Arg1) == 0xC000))
                    {
                        If ((ToInteger (Arg2) == 0x07))
                        {
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local1 = (DPTP (Zero) << Zero)
                            Local0 |= Local1
                            Local1 = (DPTP (One) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPTP (0x02) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPTP (0x03) << 0x0C)
                            Local0 |= Local1
                            RETP [0x02] = Local0
                            Local0 = Zero
                            Local1 = (DPTP (0x04) << Zero)
                            Local0 |= Local1
                            Local1 = (DPTP (0x05) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPTP (0x06) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPTP (0x07) << 0x0C)
                            Local0 |= Local1
                            RETP [0x03] = Local0
                            Local0 = Zero
                            Local1 = (DPTP (0x08) << Zero)
                            Local0 |= Local1
                            Local1 = (DPTP (0x09) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPTP (0x0A) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPTP (0x0B) << 0x0C)
                            Local0 |= Local1
                            RETP [0x04] = Local0
                            Local0 = Zero
                            Local1 = (DPTP (0x0C) << Zero)
                            Local0 |= Local1
                            Local1 = (DPTP (0x0D) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPTP (0x0E) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPTP (0x0F) << 0x0C)
                            Local0 |= Local1
                            RETP [0x05] = Local0
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        ElseIf ((ToInteger (Arg2) == 0x08))
                        {
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local1 = (DPCS (Zero) << Zero)
                            Local0 |= Local1
                            Local1 = (DPCS (One) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPCS (0x02) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPCS (0x03) << 0x0C)
                            Local0 |= Local1
                            RETP [0x02] = Local0
                            Local0 = Zero
                            Local1 = (DPCS (0x04) << Zero)
                            Local0 |= Local1
                            Local1 = (DPCS (0x05) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPCS (0x06) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPCS (0x07) << 0x0C)
                            Local0 |= Local1
                            RETP [0x03] = Local0
                            Local0 = Zero
                            Local1 = (DPCS (0x08) << Zero)
                            Local0 |= Local1
                            Local1 = (DPCS (0x09) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPCS (0x0A) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPCS (0x0B) << 0x0C)
                            Local0 |= Local1
                            RETP [0x04] = Local0
                            Local0 = Zero
                            Local1 = (DPCS (0x0C) << Zero)
                            Local0 |= Local1
                            Local1 = (DPCS (0x0D) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPCS (0x0E) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPCS (0x0F) << 0x0C)
                            Local0 |= Local1
                            RETP [0x05] = Local0
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        ElseIf ((ToInteger (Arg2) == 0x09))
                        {
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local1 = (DPEX (Zero) << Zero)
                            Local0 |= Local1
                            Local1 = (DPEX (One) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPEX (0x02) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPEX (0x03) << 0x0C)
                            Local0 |= Local1
                            RETP [0x02] = Local0
                            Local0 = Zero
                            Local1 = (DPEX (0x04) << Zero)
                            Local0 |= Local1
                            Local1 = (DPEX (0x05) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPEX (0x06) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPEX (0x07) << 0x0C)
                            Local0 |= Local1
                            RETP [0x03] = Local0
                            Local0 = Zero
                            Local1 = (DPEX (0x08) << Zero)
                            Local0 |= Local1
                            Local1 = (DPEX (0x09) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPEX (0x0A) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPEX (0x0B) << 0x0C)
                            Local0 |= Local1
                            RETP [0x04] = Local0
                            Local0 = Zero
                            Local1 = (DPEX (0x0C) << Zero)
                            Local0 |= Local1
                            Local1 = (DPEX (0x0D) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPEX (0x0E) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPEX (0x0F) << 0x0C)
                            Local0 |= Local1
                            RETP [0x05] = Local0
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0A))
                        {
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local1 = (DPPO (Zero) << Zero)
                            Local0 |= Local1
                            Local1 = (DPPO (One) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPPO (0x02) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPPO (0x03) << 0x0C)
                            Local0 |= Local1
                            RETP [0x02] = Local0
                            Local0 = Zero
                            Local1 = (DPPO (0x04) << Zero)
                            Local0 |= Local1
                            Local1 = (DPPO (0x05) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPPO (0x06) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPPO (0x07) << 0x0C)
                            Local0 |= Local1
                            RETP [0x03] = Local0
                            Local0 = Zero
                            Local1 = (DPPO (0x08) << Zero)
                            Local0 |= Local1
                            Local1 = (DPPO (0x09) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPPO (0x0A) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPPO (0x0B) << 0x0C)
                            Local0 |= Local1
                            RETP [0x04] = Local0
                            Local0 = Zero
                            Local1 = (DPPO (0x0C) << Zero)
                            Local0 |= Local1
                            Local1 = (DPPO (0x0D) << 0x04)
                            Local0 |= Local1
                            Local1 = (DPPO (0x0E) << 0x08)
                            Local0 |= Local1
                            Local1 = (DPPO (0x0F) << 0x0C)
                            Local0 |= Local1
                            RETP [0x05] = Local0
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x25)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xA2)))
                {
                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg1) == 0xD1))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        If ((ToInteger (Arg3) == Zero))
                        {
                            If ((ToInteger (Arg2) >= 0x32))
                            {
                                RETP [Zero] = 0x8300
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            PLGO = 0x02
                            PLG2 = ToInteger (Arg2)
                            ISMI (0xDA)
                            If (PLGO)
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            RETP [0x03] = PLG3 /* \_SB_.PLG3 */
                            RETP [0x04] = PLG4 /* \_SB_.PLG4 */
                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == One))
                        {
                            PLGO = 0x03
                            ISMI (0xDA)
                            If (PLGO)
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            RETP [0x02] = PLG2 /* \_SB_.PLG2 */
                            RETP [0x03] = One
                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        If ((ToInteger (Arg4) != 0x61B25C03))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != 0x459CC1EB))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        PLGO = 0x04
                        ISMI (0xDA)
                        If (PLGO)
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg1) & 0xFFFF) == 0xC5))
                {
                    Local0 = (ToInteger (Arg1) & 0x00FF0000)
                    Local0 >>= 0x10
                    Local1 = (ToInteger (Arg1) & 0xFF000000)
                    Local1 >>= 0x18
                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == Zero)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == One)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0xFF))
                        {
                            RETP [Zero] = 0x8E00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0x80))
                        {
                            RETP [Zero] = 0x8D00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        DKSF = One
                        ISMI (0xD8)
                        RETP [Zero] = DKST /* \_SB_.DKST */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == One)))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST != 0xFF))
                        {
                            RETP [Zero] = 0x8C00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        DELK = ToInteger (Arg2)
                        DKSF = 0x02
                        ISMI (0xD8)
                        RETP [Zero] = DKST /* \_SB_.DKST */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x02)))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0xFF))
                        {
                            RETP [Zero] = 0x8C00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0x80))
                        {
                            RETP [Zero] = 0x8C00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == One))
                        {
                            RETP [Zero] = 0x8400
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        DELK = ToInteger (Arg2)
                        DKSF = 0x03
                        ISMI (0xD8)
                        RETP [Zero] = DKST /* \_SB_.DKST */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x03)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPK1 /* \_SB_.DPK1 */
                        RETP [0x03] = DPK2 /* \_SB_.DPK2 */
                        RETP [0x04] = DPK3 /* \_SB_.DPK3 */
                        RETP [0x05] = DPK4 /* \_SB_.DPK4 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x04)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPK5 /* \_SB_.DPK5 */
                        RETP [0x03] = DPK6 /* \_SB_.DPK6 */
                        RETP [0x04] = DPK7 /* \_SB_.DPK7 */
                        RETP [0x05] = DPK8 /* \_SB_.DPK8 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x05)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPK9 /* \_SB_.DPK9 */
                        RETP [0x03] = DPKA /* \_SB_.DPKA */
                        RETP [0x04] = DPKB /* \_SB_.DPKB */
                        RETP [0x05] = DPKC /* \_SB_.DPKC */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x06)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPKD /* \_SB_.DPKD */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x03)))
                    {
                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPK1 = ToInteger (Arg2)
                        DPK2 = ToInteger (Arg3)
                        DPK3 = ToInteger (Arg4)
                        DPK4 = ToInteger (Arg5)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x04)))
                    {
                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPK5 = ToInteger (Arg2)
                        DPK6 = ToInteger (Arg3)
                        DPK7 = ToInteger (Arg4)
                        DPK8 = ToInteger (Arg5)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x05)))
                    {
                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPK9 = ToInteger (Arg2)
                        DPKA = ToInteger (Arg3)
                        DPKB = ToInteger (Arg4)
                        DPKC = ToInteger (Arg5)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x06)))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPKD = ToInteger (Arg2)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x92))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        Local0 = ToInteger (Arg2)
                        If (((Local0 & 0xFF00) == Zero))
                        {
                            If (((Local0 & 0xFF) == Zero))
                            {
                                Local2 = Zero
                                BULS = Zero
                                BULA = ToInteger (Arg3)
                                While ((Local2 < 0x20))
                                {
                                    BUOP = One
                                    BULI = Local2
                                    ISMI (0xD9)
                                    If (BULS)
                                    {
                                        Break
                                    }

                                    Local2++
                                }

                                RETP [Zero] = BULS /* \_SB_.BULS */
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If (((Local0 & 0xFF) == One))
                            {
                                Local1 = 0x00020000
                                Divide (Local1, 0x1000, Local4, Local1)
                                RETP [0x02] = Local1
                                Local2 = TLXL /* \_SB_.TLXL */
                                Local3 = TLYL /* \_SB_.TLYL */
                                If ((OSFG >= OSW8))
                                {
                                    Local2 *= 0x28
                                    Divide (Local2, 0x64, Local4, Local2)
                                    Local3 *= 0x28
                                    Divide (Local3, 0x64, Local4, Local3)
                                }

                                Local2 &= 0xFFFF
                                Local3 = ((Local3 & 0xFFFF) << 0x10)
                                Local1 = (Local2 | Local3)
                                RETP [0x03] = Local1
                                RETP [Zero] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If (((Local0 & 0xFF) == 0x02))
                            {
                                RETP [0x02] = 0xFFC68000
                                RETP [Zero] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If (((Local0 & 0xFF) == 0x03))
                            {
                                RETP [0x02] = Zero
                                RETP [Zero] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        Local0 = ToInteger (Arg2)
                        If (((Local0 & 0xFF00) == Zero))
                        {
                            If (((Local0 & 0xFF) == Zero))
                            {
                                Local2 = Zero
                                BULS = Zero
                                BULA = ToInteger (Arg3)
                                While ((Local2 < 0x20))
                                {
                                    BUOP = 0x02
                                    BULI = Local2
                                    ISMI (0xD9)
                                    If (BULS)
                                    {
                                        Break
                                    }

                                    Local2++
                                }

                                RETP [Zero] = BULS /* \_SB_.BULS */
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }

                    RETP [Zero] = 0x8300
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                Return (USFN) /* \_SB_.VALZ.USFN */
            }

            Method (TIMR, 0, Serialized)
            {
            }

            Method (PUTE, 1, Serialized)
            {
                Local0 = (HKEV & 0x02)
                If ((Local0 == 0x02))
                {
                    Return (Zero)
                }

                If ((ENFG == Zero))
                {
                    Return (Zero)
                }

                If ((Acquire (MUEV, 0xFFFF) != Zero))
                {
                    Return (Zero)
                }

                If ((EVCT < 0x64))
                {
                    EVCD [EVCT] = Arg0
                    EVCT++
                }

                Release (MUEV)
                Notify (VALZ, 0x80) // Status Change
                Sleep (0x0A)
                Return (Zero)
            }

            Method (GETE, 0, Serialized)
            {
                Local0 = (HKEV & 0x02)
                If ((Local0 && 0x02))
                {
                    Return (Zero)
                }

                If ((ENFG == Zero))
                {
                    Return (Zero)
                }

                If ((Acquire (MUEV, 0xFFFF) != Zero))
                {
                    Return (Zero)
                }

                If ((EVCT == Zero))
                {
                    Release (MUEV)
                    Return (Zero)
                }

                Local0 = DerefOf (EVCD [Zero])
                Local1 = Zero
                While ((Local1 < 0x63))
                {
                    EVCD [Local1] = DerefOf (EVCD [(Local1 + One)]
                        )
                    Local1++
                }

                EVCT--
                Release (MUEV)
                If ((EVCT != Zero))
                {
                    Notify (VALZ, 0x80) // Status Change
                    Sleep (0x0A)
                }

                Return (Local0)
            }

            Method (INFO, 0, Serialized)
            {
                Local0 = GETE ()
                Return (Local0)
            }
        }
    }

    Scope (_SB.VALZ)
    {
        Method (SMDW, 5, Serialized)
        {
            If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == Zero)))
            {
                SMHD = ToInteger (Arg0)
                SMOF = ToInteger (Arg1)
                SMDD = ToBuffer (Arg4)
                ISMI (0xDB)
                Local0 = SMRS /* \_SB_.SMRS */
                Return (Local0)
            }
            Else
            {
                Return (0x8400)
            }
        }
    }

    Scope (_SB.VALZ)
    {
        Method (GVA0, 1, NotSerialized)
        {
            OperationRegion (\GV0X, SystemMemory, Arg0, 0x20)
            Field (GV0X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            Return (VAG0) /* \_SB_.VALZ.GVA0.VAG0 */
        }

        Method (GVA1, 1, NotSerialized)
        {
            OperationRegion (\GV1X, SystemMemory, Arg0, 0x20)
            Field (GV1X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            Return (VAG1) /* \_SB_.VALZ.GVA1.VAG1 */
        }

        Method (GVA2, 1, NotSerialized)
        {
            OperationRegion (\GV2X, SystemMemory, Arg0, 0x20)
            Field (GV2X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            Return (VAG2) /* \_SB_.VALZ.GVA2.VAG2 */
        }

        Method (GVA3, 1, NotSerialized)
        {
            OperationRegion (\GV3X, SystemMemory, Arg0, 0x20)
            Field (GV3X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            Return (VAG3) /* \_SB_.VALZ.GVA3.VAG3 */
        }

        Method (GVA4, 1, NotSerialized)
        {
            OperationRegion (\GV4X, SystemMemory, Arg0, 0x20)
            Field (GV4X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            Return (VAG4) /* \_SB_.VALZ.GVA4.VAG4 */
        }

        Method (GVS4, 1, NotSerialized)
        {
            OperationRegion (\GV4S, SystemMemory, Arg0, 0x64)
            Field (GV4S, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAS0,   32, 
                VAS1,   32, 
                VAS2,   32, 
                VAS3,   32, 
                VAS4,   512
            }

            Return (VAS4) /* \_SB_.VALZ.GVS4.VAS4 */
        }

        Method (GVA5, 1, NotSerialized)
        {
            OperationRegion (\GV5X, SystemMemory, Arg0, 0x20)
            Field (GV5X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            Return (VAG5) /* \_SB_.VALZ.GVA5.VAG5 */
        }

        Method (SVA0, 2, NotSerialized)
        {
            OperationRegion (\SV0X, SystemMemory, Arg0, 0x20)
            Field (SV0X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            VAG0 = Arg1
        }

        Method (SVA1, 2, NotSerialized)
        {
            OperationRegion (\SV1X, SystemMemory, Arg0, 0x20)
            Field (SV1X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            VAG1 = Arg1
        }

        Method (SVA2, 2, NotSerialized)
        {
            OperationRegion (\SV2X, SystemMemory, Arg0, 0x20)
            Field (SV2X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            VAG2 = Arg1
        }

        Method (SVA3, 2, NotSerialized)
        {
            OperationRegion (\SV3X, SystemMemory, Arg0, 0x20)
            Field (SV3X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            VAG3 = Arg1
        }

        Method (SVA4, 2, NotSerialized)
        {
            OperationRegion (\SV4X, SystemMemory, Arg0, 0x20)
            Field (SV4X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            VAG4 = Arg1
        }

        Method (SVA5, 2, NotSerialized)
        {
            OperationRegion (\SV5X, SystemMemory, Arg0, 0x20)
            Field (SV5X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VAG0,   32, 
                VAG1,   32, 
                VAG2,   32, 
                VAG3,   32, 
                VAG4,   32, 
                VAG5,   32
            }

            VAG5 = Arg1
        }

        Method (WVZF, 1, NotSerialized)
        {
            OperationRegion (\SV6X, SystemMemory, Arg0, 0x20)
            Field (SV6X, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8
            }

            STAS = 0x80
        }

        Method (WVLZ, 5, Serialized)
        {
            If ((Arg2 == 0x21))
            {
                If ((Arg3 == 0x32))
                {
                    Local0 = GVA0 (Arg0)
                    Local1 = GVA1 (Arg0)
                    Local2 = GVA2 (Arg0)
                    Local3 = GVA3 (Arg0)
                    Local4 = GVA4 (Arg0)
                    Local5 = GVA5 (Arg0)
                    Local6 = SPFC (Local0, Local1, Local2, Local3, Local4, Local5)
                    SVA0 (Arg0, DerefOf (Local6 [Zero]))
                    SVA1 (Arg0, DerefOf (Local6 [One]))
                    SVA2 (Arg0, DerefOf (Local6 [0x02]))
                    SVA3 (Arg0, DerefOf (Local6 [0x03]))
                    SVA4 (Arg0, DerefOf (Local6 [0x04]))
                    SVA5 (Arg0, DerefOf (Local6 [0x05]))
                    WVZF (Arg0)
                    Return (Zero)
                }

                If ((Arg3 == 0x33))
                {
                    Local0 = GVA0 (Arg0)
                    Local1 = GVA1 (Arg0)
                    Local2 = GVA2 (Arg0)
                    Local3 = GVA3 (Arg0)
                    Local4 = GVS4 (Arg0)
                    Local5 = SMDW (Local0, Local1, Local2, Local3, Local4)
                    SVA0 (Arg0, Local5)
                    WVZF (Arg0)
                    Return (Zero)
                }
            }
        }
    }

    Scope (WMI0)
    {
        Method (HWSP, 4, NotSerialized)
        {
            If ((Arg1 == 0x21))
            {
                If ((Arg2 == One))
                {
                    OperationRegion (\HW11, SystemMemory, Arg0, Arg3)
                    Field (HW11, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x06), 
                        HS1S,   8, 
                        HS1E,   8, 
                        HS1F,   8, 
                        HREV,   16, 
                        Offset (0x10), 
                        PO1S,   8, 
                        WO2B,   8, 
                        US3L,   8, 
                        US4S,   8, 
                        WO5N,   8, 
                        BI6N,   8, 
                        WL7W,   8, 
                        IM8D,   8, 
                        KB9L,   8, 
                        KBAT,   8, 
                        KBBZ,   8, 
                        FNCT,   8, 
                        FNDB,   8, 
                        ESET,   8, 
                        SIFS,   8, 
                        FS0B,   8, 
                        US1S,   8, 
                        PO2D,   8, 
                        FN3M,   8, 
                        USB3,   8, 
                        CD5P,   8, 
                        ED6D,   8
                    }

                    If ((HS1F == Zero))
                    {
                        HREV = 0x02
                        If ((\_SB.PODS == One))
                        {
                            PO1S = Zero
                        }

                        If ((\_SB.PODS == Zero))
                        {
                            PO1S = One
                        }

                        If ((\_SB.PODS == 0x02))
                        {
                            PO1S = 0x02
                        }

                        If ((\_SB.EXDP == Zero))
                        {
                            ED6D = One
                        }

                        If ((\_SB.EXDP == One))
                        {
                            ED6D = 0x02
                        }

                        If ((\_SB.EXDP == 0x02))
                        {
                            ED6D = 0x04
                        }

                        If ((\_SB.EXDP == 0x03))
                        {
                            ED6D = 0x08
                        }

                        ED6D |= 0x10
                        ED6D |= 0x40
                        If ((\_SB.WOKB == One))
                        {
                            WO2B = Zero
                        }
                        Else
                        {
                            WO2B = One
                        }

                        If ((\_SB.USBL != 0xFF))
                        {
                            If ((\_SB.USBL == One))
                            {
                                US3L = Zero
                            }
                            Else
                            {
                                US3L = One
                            }
                        }
                        Else
                        {
                            US3L = 0xFF
                        }

                        Local0 = Zero
                        If ((\_SB.USCM == Zero))
                        {
                            Local0 = Zero
                        }

                        If ((\_SB.USCM == 0x05))
                        {
                            Local0 = 0x04
                        }

                        If ((\_SB.USCM == 0x03))
                        {
                            Local0 = 0x03
                        }

                        Local0 &= 0x0F
                        US4S = Local0
                        Local0 = Zero
                        US1S = Local0
                        If ((\_SB.WOLN == One))
                        {
                            WO5N = Zero
                        }
                        Else
                        {
                            WO5N = One
                        }

                        If ((\_SB.BILN == One))
                        {
                            BI6N = One
                        }
                        Else
                        {
                            BI6N = Zero
                        }

                        WL7W = 0xFF
                        IM8D = 0xFF
                        KB9L = 0xFF
                        KBAT = 0xFF
                        KBBZ = 0xFF
                        FNCT = 0xFF
                        FNDB = 0xFF
                        ESET = 0xFF
                        If ((\_SB.SIFS == 0x03))
                        {
                            SIFS = One
                        }
                        Else
                        {
                            SIFS = Zero
                        }

                        If ((\_SB.FSTB != 0xFF))
                        {
                            If ((\_SB.FSTB == One))
                            {
                                FS0B = One
                            }
                            Else
                            {
                                FS0B = Zero
                            }
                        }
                        Else
                        {
                            FS0B = 0xFF
                        }

                        If ((\_SB.PNPO == One))
                        {
                            PO2D = Zero
                        }
                        Else
                        {
                            PO2D = One
                        }

                        If ((\_SB.FUKM == Zero))
                        {
                            FN3M = One
                        }
                        Else
                        {
                            FN3M = Zero
                        }

                        If ((\_SB.USBX == One))
                        {
                            USB3 = One
                        }
                        Else
                        {
                            USB3 = Zero
                        }

                        If ((\_SB.UCMS != 0xFF))
                        {
                            If ((\_SB.UCMS == One))
                            {
                                CD5P = One
                            }
                            Else
                            {
                                CD5P = Zero
                            }
                        }
                        Else
                        {
                            CD5P = 0xFF
                        }
                    }

                    If ((HS1F == One))
                    {
                        HREV = One
                        \_SB.HWDT = One
                        If ((PO1S == Zero))
                        {
                            \_SB.PODS = One
                        }

                        If ((PO1S == One))
                        {
                            \_SB.PODS = Zero
                        }

                        If ((PO1S == 0x02))
                        {
                            \_SB.PODS = 0x02
                        }

                        If (((ED6D & 0x0F) == One))
                        {
                            \_SB.EXDP = Zero
                        }

                        If (((ED6D & 0x0F) == 0x02))
                        {
                            \_SB.EXDP = One
                        }

                        If (((ED6D & 0x0F) == 0x04))
                        {
                            \_SB.EXDP = 0x02
                        }

                        If (((ED6D & 0x0F) == 0x08))
                        {
                            \_SB.EXDP = 0x03
                        }

                        If (WO2B)
                        {
                            \_SB.WOKB = Zero
                        }
                        Else
                        {
                            \_SB.WOKB = One
                        }

                        If ((\_SB.USBL != 0xFF))
                        {
                            If (US3L)
                            {
                                \_SB.USBL = Zero
                            }
                            Else
                            {
                                \_SB.USBL = One
                            }
                        }

                        Local0 = US4S /* \WMI0.HWSP.US4S */
                        \_SB.USCM = 0xFF
                        If (WO5N)
                        {
                            \_SB.WOLN = Zero
                        }
                        Else
                        {
                            \_SB.WOLN = One
                        }

                        If (BI6N)
                        {
                            \_SB.BILN = One
                        }
                        Else
                        {
                            \_SB.BILN = Zero
                        }

                        \_SB.WLSW = 0xFF
                        \_SB.IMLD = 0xFF
                        \_SB.ILLD = \_SB.IMLD
                        \_SB.KBBL = 0xFF
                        \_SB.KBLT = 0xFF
                        \_SB.KBFZ = 0xFF
                        \_SB.FNBT = 0xFF
                        \_SB.FNBB = 0xFF
                        \_SB.ESAT = 0xFF
                        If (SIFS)
                        {
                            \_SB.SIFS = 0x03
                        }
                        Else
                        {
                            \_SB.SIFS = One
                        }

                        If ((\_SB.FSTB != 0xFF))
                        {
                            If (FS0B)
                            {
                                \_SB.FSTB = One
                            }
                            Else
                            {
                                \_SB.FSTB = Zero
                            }
                        }

                        If (PO2D)
                        {
                            \_SB.PNPO = Zero
                        }
                        Else
                        {
                            \_SB.PNPO = One
                        }

                        If (FN3M)
                        {
                            \_SB.FUKM = Zero
                        }
                        Else
                        {
                            \_SB.FUKM = One
                        }

                        If (USB3)
                        {
                            \_SB.USBX = One
                        }
                        Else
                        {
                            \_SB.USBX = Zero
                        }

                        If ((\_SB.UCMS != 0xFF))
                        {
                            If (CD5P)
                            {
                                \_SB.UCMS = One
                            }
                            Else
                            {
                                \_SB.UCMS = Zero
                            }
                        }
                    }

                    If ((HS1F == 0x02))
                    {
                        HREV = One
                        If ((\_SB.DPOD == One))
                        {
                            PO1S = Zero
                        }

                        If ((\_SB.DPOD == Zero))
                        {
                            PO1S = One
                        }

                        If ((\_SB.DPOD == 0x02))
                        {
                            PO1S = 0x02
                        }

                        If ((\_SB.DEXD == Zero))
                        {
                            ED6D = One
                        }

                        If ((\_SB.DEXD == One))
                        {
                            ED6D = 0x02
                        }

                        If ((\_SB.DEXD == 0x02))
                        {
                            ED6D = 0x04
                        }

                        If ((\_SB.DEXD == 0x03))
                        {
                            ED6D = 0x08
                        }

                        ED6D |= 0x10
                        ED6D |= 0x40
                        If ((\_SB.DWOK == One))
                        {
                            WO2B = Zero
                        }
                        Else
                        {
                            WO2B = One
                        }

                        If ((\_SB.DUSL != 0xFF))
                        {
                            If ((\_SB.DUSL == One))
                            {
                                US3L = Zero
                            }
                            Else
                            {
                                US3L = One
                            }
                        }
                        Else
                        {
                            US3L = 0xFF
                        }

                        If ((\_SB.DUSS == 0xFF))
                        {
                            Local0 = 0xFF
                        }
                        Else
                        {
                            If ((\_SB.DUSS == Zero))
                            {
                                Local0 = Zero
                            }

                            If ((\_SB.DUSS == 0x05))
                            {
                                Local0 = 0x04
                            }

                            If ((\_SB.DUSS == 0x03))
                            {
                                Local0 = 0x03
                            }

                            Local0 &= 0x0F
                        }

                        US4S = Local0
                        Local0 = Zero
                        US1S = Local0
                        If ((\_SB.DWOL == One))
                        {
                            WO5N = Zero
                        }
                        Else
                        {
                            WO5N = One
                        }

                        If ((\_SB.DBIL == Zero))
                        {
                            BI6N = Zero
                        }
                        Else
                        {
                            BI6N = One
                        }

                        WL7W = 0xFF
                        IM8D = 0xFF
                        KB9L = 0xFF
                        KBAT = 0xFF
                        KBBZ = 0xFF
                        FNCT = 0xFF
                        FNDB = 0xFF
                        ESET = 0xFF
                        If ((\_SB.DSIF == 0x03))
                        {
                            SIFS = One
                        }
                        Else
                        {
                            SIFS = Zero
                        }

                        If ((\_SB.DFST != 0xFF))
                        {
                            If ((\_SB.DFST == One))
                            {
                                FS0B = One
                            }
                            Else
                            {
                                FS0B = Zero
                            }
                        }
                        Else
                        {
                            FS0B = 0xFF
                        }

                        If ((\_SB.DPNP == One))
                        {
                            PO2D = Zero
                        }
                        Else
                        {
                            PO2D = One
                        }

                        If ((\_SB.DFKM == Zero))
                        {
                            FN3M = One
                        }
                        Else
                        {
                            FN3M = Zero
                        }

                        If ((\_SB.DUSX == One))
                        {
                            USB3 = One
                        }
                        Else
                        {
                            USB3 = Zero
                        }

                        If ((\_SB.UCMS != 0xFF))
                        {
                            If ((\_SB.DUCM == One))
                            {
                                CD5P = One
                            }
                            Else
                            {
                                CD5P = Zero
                            }
                        }
                        Else
                        {
                            CD5P = 0xFF
                        }
                    }

                    HS1S = 0x80
                    HS1E = Zero
                }
                ElseIf ((Arg2 < 0x03))
                {
                    BSMI (Arg0)
                }
            }
        }

        Method (OWST, 5, NotSerialized)
        {
            If (((Arg2 == 0x21) && (Arg3 == 0x03)))
            {
                WSMI (Arg4)
            }
        }

        Method (BBSF, 5, NotSerialized)
        {
            If ((Arg2 == 0x21))
            {
                If ((Arg3 == 0x04))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }
        }

        Method (HWID, 5, NotSerialized)
        {
            If ((Arg2 == 0x17))
            {
                If ((Arg3 == 0x04))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }
        }

        Method (BACR, 5, NotSerialized)
        {
            If ((Arg2 == 0x21))
            {
                If ((Arg3 == 0x28))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }
        }

        Method (POSR, 5, NotSerialized)
        {
            If ((Arg2 == 0x21))
            {
                If ((Arg3 == 0x29))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }
        }

        Method (PSWC, 5, NotSerialized)
        {
            If ((Arg2 == 0x21))
            {
                If ((Arg3 == 0x30))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }
        }

        Method (PSOW, 5, NotSerialized)
        {
            If ((Arg2 == 0x21))
            {
                If ((Arg3 == 0x31))
                {
                    WSMI (Arg4)
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.VALZ)
    {
        Method (GLPS, 0, Serialized)
        {
            If (((TLXL == 0x0280) && (TLYL == 0x01E0)))
            {
                Return (Zero)
            }

            If (((TLXL == 0x0320) && (TLYL == 0x0258)))
            {
                Return (0x0100)
            }

            If (((TLXL == 0x0400) && (TLYL == 0x0300)))
            {
                Return (0x0200)
            }

            If (((TLXL == 0x0400) && (TLYL == 0x0258)))
            {
                Return (0x0300)
            }

            If (((TLXL == 0x0320) && (TLYL == 0x01E0)))
            {
                Return (0x0400)
            }

            If (((TLXL == 0x0500) && (TLYL == 0x0400)))
            {
                Return (0x0500)
            }

            If (((TLXL == 0x0578) && (TLYL == 0x041A)))
            {
                Return (0x0600)
            }

            If (((TLXL == 0x0640) && (TLYL == 0x04B0)))
            {
                Return (0x0700)
            }

            If (((TLXL == 0x0500) && (TLYL == 0x0258)))
            {
                Return (0x0800)
            }

            If (((TLXL == 0x0500) && (TLYL == 0x0320)))
            {
                Return (0x0900)
            }

            If (((TLXL == 0x05A0) && (TLYL == 0x0384)))
            {
                Return (0x0A00)
            }

            If (((TLXL == 0x0690) && (TLYL == 0x041A)))
            {
                Return (0x0B00)
            }

            If (((TLXL == 0x0780) && (TLYL == 0x04B0)))
            {
                Return (0x0C00)
            }

            If (((TLXL == 0x0500) && (TLYL == 0x0300)))
            {
                Return (0x0D00)
            }

            If (((TLXL == 0x0780) && (TLYL == 0x0438)))
            {
                Return (0x0E00)
            }

            If (((TLXL == 0x0690) && (TLYL == 0x03B1)))
            {
                Return (0x0F00)
            }

            If (((TLXL == 0x0556) && (TLYL == 0x0300)))
            {
                Return (0x1000)
            }

            If (((TLXL == 0x0640) && (TLYL == 0x0384)))
            {
                Return (0x1100)
            }

            If (((TLXL == 0x0400) && (TLYL == 0x0240)))
            {
                Return (0x1200)
            }

            Return (0x1000)
        }

        Method (GMID, 0, Serialized)
        {
            Return (0x0672)
        }

        Method (HST1, 0, Serialized)
        {
            If ((OSFG < OSVT))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Method (HST2, 0, Serialized)
        {
            If ((OSFG < OSVT))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Method (HST3, 0, Serialized)
        {
            If ((OSFG < OSVT))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Method (HST4, 0, Serialized)
        {
            If ((OSFG < OSVT))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Name (MSEN, Zero)
        Name (FIST, One)
        Method (CMST, 6, NotSerialized)
        {
            If ((FIST == One))
            {
                ^^PCI0.SBRG.IEC.PTPT ()
                FIST = Zero
            }

            Return (Ones)
        }

        Method (MLED, 0, Serialized)
        {
            If ((LFOS == Zero))
            {
                SGPL (0x05, One, Zero)
                Return (Zero)
            }

            If (RGPL (0x15, One))
            {
                SGPL (0x05, One, One)
            }
            ElseIf (RGPL (0x14, One))
            {
                SGPL (0x05, One, One)
            }
            Else
            {
                SGPL (0x05, One, Zero)
            }
        }

        Method (KBBO, 1, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07F8)
            Local0 &= 0x77
            Local0 |= 0x80
            ^^PCI0.SBRG.IEC.WRAM (0x07F8, Local0)
            If (Arg0)
            {
                KBBL = One
            }
        }

        Method (KBBF, 1, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07F8)
            Local0 &= 0x77
            ^^PCI0.SBRG.IEC.WRAM (0x07F8, Local0)
            If (Arg0)
            {
                KBBL = 0x02
            }
        }

        Method (KBBT, 2, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07F8)
            Local0 &= 0x77
            Local0 |= 0x08
            ^^PCI0.SBRG.IEC.WRAM (0x07F8, Local0)
            ^^PCI0.SBRG.IEC.WRAM (0x07F9, Arg1)
            If (Arg0)
            {
                KBBL = Zero
                KBLT = Arg1
            }
        }

        Method (KBTO, 2, Serialized)
        {
            ^^PCI0.SBRG.IEC.WRAM (0x07F9, Arg1)
            If (Arg0)
            {
                KBLT = Arg1
            }
        }

        Method (KBBC, 0, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07F8)
            If ((Local0 & 0x80))
            {
                Return (One)
            }
            ElseIf ((Local0 & 0x08))
            {
                If ((Local0 & 0x02))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (KBMD, 0, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07F8)
            If ((Local0 & 0x80))
            {
                Return (One)
            }
            ElseIf ((Local0 & 0x08))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x02)
            }
        }

        Method (KBGT, 0, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RRAM (0x07F9)
            Return (Local0)
        }

        Method (CHMI, 0, Serialized)
        {
            Return (One)
        }

        Method (GHMI, 0, Serialized)
        {
            Local0 = ^^PCI0.SBRG.IEC.RPIN (0x06, 0x06)
            If (Local0)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (TDPC, 0, Serialized)
        {
            If (CondRefOf (\_SB.PCI0.CTNL))
            {
                If (^^PCI0.CTNL)
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (TDPD, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PCI0.CTCD))
            {
                ^^PCI0.CTCD ()
            }
        }

        Method (TDPN, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PCI0.CTCN))
            {
                ^^PCI0.CTCN ()
            }
        }

        Method (DPTP, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                If (CHMI ())
                {
                    Return (0x02)
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (DPCS, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                If (GHMI ())
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (DPEX, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (DPPO, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (CIND)
        {
            Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((OSFG >= OSW8) && RGPL (0x77, One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_GPE)
    {
        Name (CVTS, 0xAA)
        Method (GCVS, 0, NotSerialized)
        {
            Local0 = Zero
            Local0 |= (Local1 = (RGPL (0x42, One) << 0x02))
            Local0 |= (Local1 = (RGPL (0x41, One) << One))
            Local0 |= (Local1 = (RGPL (0x40, One) << Zero))
            Return (Local0)
        }

        Method (SCVS, 0, NotSerialized)
        {
            If (((GCVS () == 0x06) && (CVTS != Zero)))
            {
                \_SB.VALZ.KTOF (One)
                CVTS = Zero
                If ((\_SB.VALZ.FTCM == One))
                {
                    Notify (\_SB.VALZ, 0x93) // Device-Specific
                }
            }
            ElseIf (((GCVS () == Zero) && (CVTS != One)))
            {
                \_SB.VALZ.KTOF (Zero)
                CVTS = One
                If ((\_SB.VALZ.FTCM == One))
                {
                    Notify (\_SB.VALZ, 0x93) // Device-Specific
                }
            }
            ElseIf (((GCVS () == 0x04) && (CVTS != Zero)))
            {
                \_SB.VALZ.KTOF (One)
                CVTS = Zero
                If ((\_SB.VALZ.FTCM == One))
                {
                    Notify (\_SB.VALZ, 0x93) // Device-Specific
                }
            }
        }

        Method (_L19, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            SCVS ()
        }
    }

    Scope (_SB.VALZ)
    {
        Name (FTCM, Zero)
        Name (CSAP, 0xAA)
        Method (KTOF, 1, NotSerialized)
        {
            If (Arg0)
            {
                ^^PCI0.SBRG.IEC.ECXT (0xB7, Zero, Zero, Zero, Zero, Zero)
                ^^PCI0.SBRG.IEC.ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
            }
            Else
            {
                ^^PCI0.SBRG.IEC.ECXT (0xB7, One, Zero, Zero, Zero, Zero)
                ^^PCI0.SBRG.IEC.ECXT (0xB5, One, Zero, Zero, Zero, Zero)
            }
        }

        Method (CWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                FTCM = Zero
                CSAP = 0xAA
            }
            ElseIf ((Arg0 == 0x04))
            {
                FTCM = Zero
                CSAP = 0xAA
            }
        }

        Method (CTST, 0, Serialized)
        {
            If ((CSAP == 0xAA))
            {
                \_GPE.SCVS ()
            }

            If ((FTCM == Zero))
            {
                FTCM = One
            }

            CSAP = \_GPE.CVTS
            Return (CSAP) /* \_SB_.VALZ.CSAP */
        }
    }

    Scope (_SB)
    {
        Device (FBDT)
        {
            Name (_HID, EisaId ("TOS620D"))  // _HID: Hardware ID
            Name (_DDN, "FBDate")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (FBDE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (WMI0)
    {
        Method (MF1F, 4, NotSerialized)
        {
            If ((Arg1 == 0x1F))
            {
                OperationRegion (F01F, SystemMemory, Arg0, 0x08)
                Field (F01F, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                BSMI (Arg0)
                STAS &= 0xFE
            }
        }

        Method (MF6A, 5, NotSerialized)
        {
            If ((Arg2 == 0x6A))
            {
                WSMI (Arg4)
            }
        }
    }

    Scope (\)
    {
        Method (LIMT, 0, NotSerialized)
        {
            Local0 = (\_SB.CPUP - \_SB.SLMT)
            Return (Local0)
        }

        Method (PRJS, 1, Serialized)
        {
        }

        Method (PRJW, 1, Serialized)
        {
            \_SB.PCI0.SBRG.IEC.STBR ()
            If ((Arg0 == 0x03))
            {
                Local0 = \_SB.PCI0.SBRG.IEC.RRAM (0x0504)
                If ((Local0 && 0x40))
                {
                    Notify (\_SB.SLPB, 0x02) // Device Wake
                    Return (Zero)
                }
            }
        }

        Method (PRJB, 0, NotSerialized)
        {
            \_SB.PCI0.SBRG.IEC.WRAM (0x07FE, 0x80)
            \_SB.PCI0.SBRG.IEC.SMBW (\_SB.PCI0.SBRG.IEC.WRWD, \_SB.PCI0.SBRG.IEC.BADR, 0x35, Zero, Zero, 0x04)
            ISMI (0xA5)
        }

        Method (GLID, 0, Serialized)
        {
            Return (\_SB.PCI0.SBRG.IEC.RPIN (0x04, 0x06))
        }

        Method (OMLD, 1, Serialized)
        {
        }

        Method (OTLD, 1, Serialized)
        {
        }

        Method (OGLD, 1, Serialized)
        {
        }

        Method (OWLD, 1, Serialized)
        {
            \_SB.WRST = Arg0
            SGPL (0x05, One, Arg0)
        }

        Method (OBTD, 1, Serialized)
        {
            \_SB.BRST = Arg0
            SGPL (0x14, One, Arg0)
        }

        Method (OWMD, 1, Serialized)
        {
            \_SB.WMST = Arg0
        }

        Method (OHWR, 0, Serialized)
        {
            Return (Zero)
        }

        Method (ORST, 0, Serialized)
        {
        }

        Method (GBTL, 0, Serialized)
        {
            Return (Zero)
        }

        Method (SBTL, 1, Serialized)
        {
        }

        Method (BL2C, 0, NotSerialized)
        {
        }

        Method (ACPS, 0, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.IEC.RPIN (0x02, 0x04)
            Return (Local0)
        }

        Method (OGND, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (OEAD, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (OGCD, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.GETD ())
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.IEC)
    {
        Method (PTPT, 0, Serialized)
        {
        }
    }

    Scope (_SB)
    {
        Method (PPTS, 1, NotSerialized)
        {
            \WMI0.GENS (Arg0)
            ^VALZ.VPTS (Arg0)
            OEMS (Arg0)
        }
    }

    Scope (_SB)
    {
        Method (PWAK, 1, NotSerialized)
        {
            \WMI0.GENW (Arg0)
            ^VALZ.CWAK (Arg0)
            ^VALZ.VWAK (Arg0)
            ^BT.BWAK (Arg0)
            OEMW (Arg0)
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (DBGR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
            Name (CRS1, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0240,             // Range Minimum
                    0x0240,             // Range Maximum
                    0x01,               // Alignment
                    0x1A,               // Length
                    )
            })
            OperationRegion (DBGC, SystemIO, 0x0259, 0x10)
            Field (DBGC, ByteAcc, Lock, Preserve)
            {
                DBGP,   8
            }

            OperationRegion (DBPP, SystemIO, 0x0250, 0x02)
            Field (DBPP, ByteAcc, Lock, Preserve)
            {
                PPDT,   8, 
                PPST,   8
            }

            OperationRegion (DB80, SystemIO, 0x80, One)
            Field (DB80, ByteAcc, Lock, Preserve)
            {
                DP80,   8
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (CRS1) /* \_SB_.PCI0.SBRG.DBGR.CRS1 */
            }

            Method (CALL, 0, Serialized)
            {
                ISMI (0x96)
            }

            Method (PUTD, 1, Serialized)
            {
                Local0 = ((Arg0 & 0x0F) | 0x10)
                Local1 = ((Arg0 >> 0x04) & 0x0F)
                Local2 = (~Local1 & 0x0F)
                Local4 = 0xFFFF
                PPDT = Local0
                Local3 = ((PPST ^ 0x80) >> 0x03)
                While (((Local3 != 0x10) && (Local4 != Zero)))
                {
                    Local3 = ((PPST ^ 0x80) >> 0x03)
                    Local4--
                    Stall (0x1E)
                }

                If ((Local4 == Zero))
                {
                    PPDT = Zero
                    Return (Zero)
                }

                Local4 = 0xFFFF
                PPDT = Local1
                Local3 = ((PPST ^ 0x80) >> 0x03)
                While (((Local3 != Zero) && (Local4 != Zero)))
                {
                    Local3 = ((PPST ^ 0x80) >> 0x03)
                    Local4--
                    Stall (0x1E)
                }

                If ((Local4 == Zero))
                {
                    PPDT = Zero
                    Return (Zero)
                }

                PPDT = Local2
                Return (One)
            }

            Method (OUTS, 1, Serialized)
            {
                If ((DBGP != 0xFF))
                {
                    Local0 = (SizeOf (Arg0) + One)
                    Local1 = Zero
                    Name (BUFF, Buffer (Local0) {})
                    BUFF = Arg0
                    Local0 -= One
                    If ((PUTD (0x53) == Zero))
                    {
                        Return (Zero)
                    }

                    While ((DerefOf (BUFF [Local1]) != Zero))
                    {
                        If ((PUTD (DerefOf (BUFF [Local1])) == Zero))
                        {
                            PUTD (Zero)
                            Return (Zero)
                        }

                        Local1++
                    }

                    PUTD (Zero)
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (OUTD, 1, Serialized)
            {
                Name (DEC, Buffer (0x0B)
                {
                    "0123456789"
                })
                Name (TMP, Buffer (0x0B) {})
                Local0 = Zero
                Local1 = Arg0
                If ((Local1 == Zero))
                {
                    OUTS ("0")
                }
                Else
                {
                    While ((Local1 > Zero))
                    {
                        Divide (Local1, 0x0A, Local2, Local1)
                        TMP [Local0] = DerefOf (DEC [Local2])
                        Local0++
                        TMP [Local0] = Zero
                    }

                    Local2 = Zero
                    Local0--
                    While ((Local2 < Local0))
                    {
                        Local3 = DerefOf (TMP [Local2])
                        TMP [Local2] = DerefOf (TMP [Local0])
                        TMP [Local0] = Local3
                        Local2++
                        Local0--
                    }

                    OUTS (TMP)
                }
            }

            Method (OUTH, 1, Serialized)
            {
                Name (HEX, Buffer (0x11)
                {
                    "0123456789ABCDEF"
                })
                Name (TMP, Buffer (0x0A) {})
                Local0 = Zero
                Local1 = Arg0
                While ((Local0 < 0x08))
                {
                    Local2 = (Local1 & 0x0F)
                    TMP [Local0] = DerefOf (HEX [Local2])
                    Local1 >>= 0x04
                    Local0++
                    TMP [Local0] = Zero
                }

                Local2 = Zero
                Local0--
                While ((Local2 < Local0))
                {
                    Local3 = DerefOf (TMP [Local2])
                    TMP [Local2] = DerefOf (TMP [Local0])
                    TMP [Local0] = Local3
                    Local2++
                    Local0--
                }

                OUTS (TMP)
            }

            Method (OUTX, 2, Serialized)
            {
                Local0 = (SizeOf (Arg0) + One)
                Local1 = Zero
                Local2 = Zero
                Local3 = Zero
                Name (BUFF, Buffer (Local0) {})
                BUFF = Arg0
                Name (BUFX, Buffer (Local0) {})
                While ((Local1 <= Local0))
                {
                    If ((DerefOf (BUFF [Local1]) == Zero))
                    {
                        BUFX [Local2] = Zero
                        OUTS (BUFX)
                        Break
                    }

                    If ((DerefOf (BUFF [Local1]) == 0x25))
                    {
                        Local4 = (Local1 + One)
                        If ((DerefOf (BUFF [Local4]) == 0x25))
                        {
                            BUFX [Local2] = 0x25
                            Local1 += 0x02
                            Local2++
                            Continue
                        }

                        If ((DerefOf (BUFF [Local4]) == 0x58))
                        {
                            BUFX [Local2] = Zero
                            OUTS (BUFX)
                            Local5 = DerefOf (Arg1 [Local3])
                            OUTH (Local5)
                            Local1 += 0x02
                            Local2 = Zero
                            Local3++
                            Continue
                        }

                        If ((DerefOf (BUFF [Local4]) == 0x78))
                        {
                            BUFX [Local2] = Zero
                            OUTS (BUFX)
                            Local5 = DerefOf (Arg1 [Local3])
                            OUTH (Local5)
                            Local1 += 0x02
                            Local2 = Zero
                            Local3++
                            Continue
                        }

                        If ((DerefOf (BUFF [Local4]) == 0x64))
                        {
                            BUFX [Local2] = Zero
                            OUTS (BUFX)
                            Local5 = DerefOf (Arg1 [Local3])
                            OUTD (Local5)
                            Local1 += 0x02
                            Local2 = Zero
                            Local3++
                            Continue
                        }

                        If ((DerefOf (BUFF [Local4]) == 0x63))
                        {
                            BUFX [Local2] = Zero
                            OUTS (BUFX)
                            Local5 = DerefOf (Arg1 [Local3])
                            BUFX [Zero] = Local5
                            BUFX [One] = Zero
                            OUTS (BUFX)
                            Local1 += 0x02
                            Local2 = Zero
                            Local3++
                            Continue
                        }

                        BUFX [Local2] = 0x25
                    }
                    Else
                    {
                        Local5 = DerefOf (BUFF [Local1])
                        BUFX [Local2] = Local5
                    }

                    Local1++
                    Local2++
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ECQX ()
        }

        OperationRegion (QCMD, SystemIO, 0x66, One)
        Field (QCMD, ByteAcc, NoLock, Preserve)
        {
            IO66,   8
        }

        OperationRegion (QDAT, SystemIO, 0x62, One)
        Field (QDAT, ByteAcc, NoLock, Preserve)
        {
            IO62,   8
        }

        Method (ECQX, 0, Serialized)
        {
            While (One)
            {
                IO66 = 0x84
                Local0 = Zero
                While ((Local0 < 0x0100))
                {
                    If ((IO66 & One))
                    {
                        Break
                    }

                    Local0++
                }

                If ((Local0 == 0x0100))
                {
                    Return (Zero)
                }

                Local0 = IO62 /* \_GPE.IO62 */
                Switch (Local0)
                {
                    Case (0x09)
                    {
                        \_SB.PCI0.SBRG.IEC._Q09 ()
                    }
                    Case (0x0A)
                    {
                        \_SB.PCI0.SBRG.IEC._Q0A ()
                    }
                    Case (0x0B)
                    {
                        \_SB.PCI0.SBRG.IEC._Q0B ()
                    }
                    Case (0x0C)
                    {
                        \_SB.PCI0.SBRG.IEC._Q0C ()
                    }
                    Case (0x0D)
                    {
                        \_SB.PCI0.SBRG.IEC._Q0D ()
                    }
                    Case (0x0E)
                    {
                        \_SB.PCI0.SBRG.IEC._Q0E ()
                    }
                    Case (0x0F)
                    {
                        \_SB.PCI0.SBRG.IEC._Q0F ()
                    }
                    Case (0x10)
                    {
                        \_SB.PCI0.SBRG.IEC._Q10 ()
                    }
                    Case (0x11)
                    {
                        \_SB.PCI0.SBRG.IEC._Q11 ()
                    }
                    Case (0x12)
                    {
                        \_SB.PCI0.SBRG.IEC._Q12 ()
                    }
                    Case (0x14)
                    {
                        \_SB.PCI0.SBRG.IEC._Q14 ()
                    }
                    Case (0x15)
                    {
                        \_SB.PCI0.SBRG.IEC._Q15 ()
                    }
                    Case (0x2A)
                    {
                        \_SB.PCI0.SBRG.IEC._Q2A ()
                    }
                    Case (0x2B)
                    {
                        \_SB.PCI0.SBRG.IEC._Q2B ()
                    }
                    Case (0x2C)
                    {
                        \_SB.PCI0.SBRG.IEC._Q2C ()
                    }
                    Case (0x2D)
                    {
                        \_SB.PCI0.SBRG.IEC._Q2D ()
                    }
                    Case (0x2E)
                    {
                        \_SB.PCI0.SBRG.IEC._Q2E ()
                    }
                    Case (0x2F)
                    {
                        \_SB.PCI0.SBRG.IEC._Q2F ()
                    }
                    Case (0x30)
                    {
                        \_SB.PCI0.SBRG.IEC._Q30 ()
                    }
                    Case (0x31)
                    {
                        \_SB.PCI0.SBRG.IEC._Q31 ()
                    }
                    Case (0x32)
                    {
                        \_SB.PCI0.SBRG.IEC._Q32 ()
                    }
                    Case (0x34)
                    {
                        \_SB.PCI0.SBRG.IEC._Q34 ()
                    }
                    Case (0x35)
                    {
                        \_SB.PCI0.SBRG.IEC._Q35 ()
                    }
                    Case (0x60)
                    {
                        \_SB.PCI0.SBRG.IEC._Q60 ()
                    }
                    Case (0x68)
                    {
                        \_SB.PCI0.SBRG.IEC._Q68 ()
                    }
                    Case (0x69)
                    {
                        \_SB.PCI0.SBRG.IEC._Q69 ()
                    }
                    Case (0x6A)
                    {
                        \_SB.PCI0.SBRG.IEC._Q6A ()
                    }
                    Case (0x6B)
                    {
                        \_SB.PCI0.SBRG.IEC._Q6B ()
                    }
                    Case (0x6C)
                    {
                        \_SB.PCI0.SBRG.IEC._Q6C ()
                    }
                    Case (0x6D)
                    {
                        \_SB.PCI0.SBRG.IEC._Q6D ()
                    }
                    Case (0x6E)
                    {
                        \_SB.PCI0.SBRG.IEC._Q6E ()
                    }
                    Case (0x6F)
                    {
                        \_SB.PCI0.SBRG.IEC._Q6F ()
                    }
                    Case (0x70)
                    {
                        \_SB.PCI0.SBRG.IEC._Q70 ()
                    }
                    Case (0x73)
                    {
                        \_SB.PCI0.SBRG.IEC._Q73 ()
                    }
                    Case (0x80)
                    {
                        \_SB.PCI0.SBRG.IEC._Q80 ()
                    }
                    Case (0x81)
                    {
                        \_SB.PCI0.SBRG.IEC._Q81 ()
                    }
                    Case (0x82)
                    {
                        \_SB.PCI0.SBRG.IEC._Q82 ()
                    }
                    Case (0x83)
                    {
                        \_SB.PCI0.SBRG.IEC._Q83 ()
                    }
                    Case (0x84)
                    {
                        \_SB.PCI0.SBRG.IEC._Q84 ()
                    }
                    Case (0x88)
                    {
                        \_SB.PCI0.SBRG.IEC._Q88 ()
                    }
                    Case (0x89)
                    {
                        \_SB.PCI0.SBRG.IEC._Q89 ()
                    }
                    Case (0x8A)
                    {
                        \_SB.PCI0.SBRG.IEC._Q8A ()
                    }
                    Case (0x8B)
                    {
                        \_SB.PCI0.SBRG.IEC._Q8B ()
                    }
                    Case (0x8C)
                    {
                        \_SB.PCI0.SBRG.IEC._Q8C ()
                    }
                    Case (0x8D)
                    {
                        \_SB.PCI0.SBRG.IEC._Q8D ()
                    }
                    Case (0x8E)
                    {
                        \_SB.PCI0.SBRG.IEC._Q8E ()
                    }
                    Case (0x8F)
                    {
                        \_SB.PCI0.SBRG.IEC._Q8F ()
                    }
                    Case (0x90)
                    {
                        \_SB.PCI0.SBRG.IEC._Q90 ()
                    }
                    Case (0xA0)
                    {
                        \_SB.PCI0.SBRG.IEC._QA0 ()
                    }
                    Case (0xA1)
                    {
                        \_SB.PCI0.SBRG.IEC._QA1 ()
                    }
                    Case (0xA3)
                    {
                        \_SB.PCI0.SBRG.IEC._QA3 ()
                    }
                    Case (0xA5)
                    {
                        \_SB.PCI0.SBRG.IEC._QA5 ()
                    }
                    Case (0xB0)
                    {
                        \_SB.PCI0.SBRG.IEC._QB0 ()
                    }
                    Case (0xB2)
                    {
                        \_SB.PCI0.SBRG.IEC._QB2 ()
                    }
                    Case (0xB3)
                    {
                        \_SB.PCI0.SBRG.IEC._QB3 ()
                    }
                    Case (0xB4)
                    {
                        \_SB.PCI0.SBRG.IEC._QB4 ()
                    }
                    Case (0xB5)
                    {
                        \_SB.PCI0.SBRG.IEC._QB5 ()
                    }
                    Case (0xB6)
                    {
                        \_SB.PCI0.SBRG.IEC._QB6 ()
                    }
                    Case (0xD0)
                    {
                        \_SB.PCI0.SBRG.IEC._QD0 ()
                    }
                    Case (0xD1)
                    {
                        \_SB.PCI0.SBRG.IEC._QD1 ()
                    }
                    Case (0xD2)
                    {
                        \_SB.PCI0.SBRG.IEC._QD2 ()
                    }
                    Case (0xD3)
                    {
                        \_SB.PCI0.SBRG.IEC._QD3 ()
                    }
                    Case (0xD4)
                    {
                        \_SB.PCI0.SBRG.IEC._QD4 ()
                    }
                    Case (0xD6)
                    {
                        \_SB.PCI0.SBRG.IEC._QD6 ()
                    }
                    Case (0xD7)
                    {
                        \_SB.PCI0.SBRG.IEC._QD7 ()
                    }
                    Case (0xFC)
                    {
                        \_SB.PCI0.SBRG.IEC._QFC ()
                    }
                    Case (0xFD)
                    {
                        \_SB.PCI0.SBRG.IEC._QFD ()
                    }
                    Case (0xFE)
                    {
                        \_SB.PCI0.SBRG.IEC._QFE ()
                    }
                    Case (0xFF)
                    {
                        \_SB.PCI0.SBRG.IEC._QFF ()
                    }
                    Default
                    {
                    }

                }
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (PS2K)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSFT0001")
            }

            Name (_CID, Package (0x02)  // _CID: Compatible ID
            {
                EisaId ("PNPC030"), 
                EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (One << 0x0A)
                If ((IOST & Local0))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("TOS0341")
            }

            Name (_CID, Package (0x01)  // _CID: Compatible ID
            {
                EisaId ("PNP0F13") /* PS/2 Mouse */
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (One << 0x0E)
                If ((IOST & Local0))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Name (CRS1, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {12}
            })
            Name (CRS2, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {12}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (One << 0x0A)
                If ((IOST & Local0))
                {
                    Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                }
                Else
                {
                    Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                }
            }
        }
    }
}



EXTF
----
[000h 0000   4]                    Signature : "EXTF"    
[004h 0004   4]                 Table Length : 00000053
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : C5
[00Ah 0010   6]                       Oem ID : " {"
[010h 0016   8]                 Oem Table ID : "  "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [EXTF]


Raw Table Data: Length 83 (0x53)

    0000: 45 58 54 46 53 00 00 00 00 C5 C1 7B 00 00 00 00  // EXTFS......{....
    0010: 06 02 00 00 00 00 00 00 00 00 00 00 4D 53 46 54  // ............MSFT
    0020: 01 00 00 00 45 58 54 46 00 00 00 10 46 00 00 00  // ....EXTF....F...
    0030: 00 00 36 00 00 00 4D 41 33 30 00 00 00 00 00 00  // ..6...MA30......
    0040: 00 00 00 00 00 00 00 00 22 7B B2 00 90 90 00 04  // ........"{......
    0050: 08 02 01                                         // ...


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 59
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 7B216E80
[028h 0040   4]                 DSDT Address : 7AB571C8
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : AE
[035h 0053   1]           ACPI Disable Value : AF
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 00
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0012
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000304A1
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 0
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : 8E
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000007AB571C8
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000450

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 20
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 40
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 59 54 4F 53 41 53 55  // FACP.....YTOSASU
    0010: 54 4F 53 41 53 55 30 30 09 20 07 01 41 4D 49 20  // TOSASU00. ..AMI 
    0020: 13 00 01 00 80 6E 21 7B C8 71 B5 7A 01 02 09 00  // .....n!{.q.z....
    0030: B2 00 00 00 AE AF 00 80 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 85  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 00 00 32 12 00 00  // e...........2...
    0070: A1 04 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: 8E 00 00 00 00 00 00 00 00 00 00 00 C8 71 B5 7A  // .............q.z
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 20 00 01  // . ........... ..
    00E0: 20 04 00 00 00 00 00 00 01 40 00 01 00 00 00 00  //  ........@......
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 05560382
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 82 03 56 05 00 00 00 00  // FACS@.....V.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A9
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 A9 54 4F 53 41 53 55  // FIDT......TOSASU
    0010: 54 4F 53 41 53 55 30 30 09 20 07 01 41 4D 49 20  // TOSASU00. ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 53 42 49  // ....$FID.x.1ASBI
    0030: 30 32 32 00 AD 14 6A 20 D9 FC 0C 4E 91 FB D4 19  // 022...j ...N....
    0040: D9 E4 19 72 30 35 00 31 31 00 30 30 00 32 32 00  // ...r05.11.00.22.
    0050: 00 00 00 00 00 00 00 FF FF 54 4F 53 41 53 55 54  // .........TOSASUT
    0060: 4F 53 41 53 55 30 30 00 00 00 00 00 00 00 00 00  // OSASU00.........
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7E
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 000000007B573730

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 000000007B573750

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 7E 54 4F 53 41 53 55  // FPDTD....~TOSASU
    0010: 54 4F 53 41 53 55 30 30 09 20 07 01 41 4D 49 20  // TOSASU00. ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 37 57 7B  // ............07W{
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 37 57 7B  // ............P7W{
    0040: 00 00 00 00                                      // ....


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 00000104
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4A
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 00000005
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0100000D

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000064

[040h 0064   4]                    Residency : 00003A98
[044h 0068   4]                      Latency : 00001388
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 7F [FunctionalFixedHW]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076   8]                      Address : 0000000000000633

[054h 0084   8]            Counter Frequency : 0000000000000000

[05Ch 0092   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096   4]                       Length : 00000038
[064h 0100   2]                    Unique ID : 0001
[066h 0102   2]                     Reserved : 0000
[068h 0104   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108  12]                Entry Trigger : [Generic Address Structure]
[06Ch 0108   1]                     Space ID : 7F [FunctionalFixedHW]
[06Dh 0109   1]                    Bit Width : 01
[06Eh 0110   1]                   Bit Offset : 02
[06Fh 0111   1]         Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112   8]                      Address : 0000000000000064

[078h 0120   4]                    Residency : 00003A98
[07Ch 0124   4]                      Latency : 00001388
[080h 0128  12]            Residency Counter : [Generic Address Structure]
[080h 0128   1]                     Space ID : 7F [FunctionalFixedHW]
[081h 0129   1]                    Bit Width : 40
[082h 0130   1]                   Bit Offset : 00
[083h 0131   1]         Encoded Access Width : 00 [Undefined/Legacy]
[084h 0132   8]                      Address : 0000000000000630

[08Ch 0140   8]            Counter Frequency : 0000000000000000

[094h 0148   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[098h 0152   4]                       Length : 00000038
[09Ch 0156   2]                    Unique ID : 0002
[09Eh 0158   2]                     Reserved : 0000
[0A0h 0160   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[0A4h 0164  12]                Entry Trigger : [Generic Address Structure]
[0A4h 0164   1]                     Space ID : 7F [FunctionalFixedHW]
[0A5h 0165   1]                    Bit Width : 01
[0A6h 0166   1]                   Bit Offset : 02
[0A7h 0167   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A8h 0168   8]                      Address : 0000000000000064

[0B0h 0176   4]                    Residency : 00003A98
[0B4h 0180   4]                      Latency : 00001388
[0B8h 0184  12]            Residency Counter : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 7F [FunctionalFixedHW]
[0B9h 0185   1]                    Bit Width : 40
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000631

[0C4h 0196   8]            Counter Frequency : 0000000000000000

[0CCh 0204   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[0D0h 0208   4]                       Length : 00000038
[0D4h 0212   2]                    Unique ID : 0003
[0D6h 0214   2]                     Reserved : 0000
[0D8h 0216   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[0DCh 0220  12]                Entry Trigger : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 7F [FunctionalFixedHW]
[0DDh 0221   1]                    Bit Width : 01
[0DEh 0222   1]                   Bit Offset : 02
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000064

[0E8h 0232   4]                    Residency : 00003A98
[0ECh 0236   4]                      Latency : 00001388
[0F0h 0240  12]            Residency Counter : [Generic Address Structure]
[0F0h 0240   1]                     Space ID : 7F [FunctionalFixedHW]
[0F1h 0241   1]                    Bit Width : 40
[0F2h 0242   1]                   Bit Offset : 00
[0F3h 0243   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F4h 0244   8]                      Address : 0000000000000632

[0FCh 0252   8]            Counter Frequency : 0000000000000000


Raw Table Data: Length 260 (0x104)

    0000: 4C 50 49 54 04 01 00 00 01 4A 54 4F 53 41 53 55  // LPIT.....JTOSASU
    0010: 54 4F 53 41 53 55 30 30 05 00 00 00 4D 53 46 54  // TOSASU00....MSFT
    0020: 0D 00 00 01 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 64 00 00 00 00 00 00 00  // ........d.......
    0040: 98 3A 00 00 88 13 00 00 7F 40 00 00 33 06 00 00  // .:.......@..3...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 64 00 00 00 00 00 00 00 98 3A 00 00 88 13 00 00  // d........:......
    0080: 7F 40 00 00 30 06 00 00 00 00 00 00 00 00 00 00  // .@..0...........
    0090: 00 00 00 00 00 00 00 00 38 00 00 00 02 00 00 00  // ........8.......
    00A0: 00 00 00 00 7F 01 02 00 64 00 00 00 00 00 00 00  // ........d.......
    00B0: 98 3A 00 00 88 13 00 00 7F 40 00 00 31 06 00 00  // .:.......@..1...
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 38 00 00 00 03 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    00E0: 64 00 00 00 00 00 00 00 98 3A 00 00 88 13 00 00  // d........:......
    00F0: 7F 40 00 00 32 06 00 00 00 00 00 00 00 00 00 00  // .@..2...........
    0100: 00 00 00 00                                      // ....


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A7
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 A7 54 4F 53 41 53 55  // MCFG<.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 09 20 07 01 4D 53 46 54  // TOSASU00. ..MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 30
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036  49] Software Licensing Structure : 26 15 A6 F0 00 00 00 00 27 2A 73 E0 00 00 00 00 /* &.......'*s..... */\
/* 034h 0052  16 */                            27 FE C3 70 00 00 00 00 29 0A 55 E0 00 00 00 00 /* '..p....).U..... */\
/* 044h 0068  16 */                            29 DE A5 70 00 00 00 00 2A EA 37 E0 00 00 00 00 /* )..p....*.7..... */\
/* 054h 0084   1 */                            2B                                              /* + */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 30 54 4F 53 41 53 55  // MSDMU....0TOSASU
    0010: 54 4F 53 41 53 55 30 30 04 20 22 06 4D 53 46 54  // TOSASU00. ".MSFT
    0020: 13 00 01 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 44 37 43 59 4E 2D 57 44  // ........D7CYN-WD
    0040: 37 48 38 2D 4D 39 32 46 42 2D 56 52 39 59 34 2D  // 7H8-M92FB-VR9Y4-
    0050: 44 4A 33 44 52                                   // DJ3DR


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 92
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036 338] Software Licensing Structure : 04 60 FD 70 00 00 00 00 05 50 E0 60 00 00 00 00 /* .`.p.....P.`.... */\
/* 034h 0052  16 */                            06 40 DF 70 00 00 00 00 07 30 C2 60 00 00 00 00 /* .@.p.....0.`.... */\
/* 044h 0068  16 */                            07 8D 19 70 00 00 00 00 09 10 A4 60 00 00 00 00 /* ...p.......`.... */\
/* 054h 0084  16 */                            09 AD 94 F0 00 00 00 00 0A F0 86 60 00 00 00 00 /* ...........`.... */\
/* 064h 0100  16 */                            0B E0 85 70 00 00 00 00 0C D9 A2 E0 00 00 00 00 /* ...p............ */\
/* 074h 0116  16 */                            0D C0 67 70 00 00 00 00 0E B9 84 E0 00 00 00 00 /* ..gp............ */\
/* 084h 0132  16 */                            0F A9 83 F0 00 00 00 00 10 99 66 E0 00 00 00 00 /* ..........f..... */\
/* 094h 0148  16 */                            11 89 65 F0 00 00 00 00 12 79 48 E0 00 00 00 00 /* ..e......yH..... */\
/* 0A4h 0164  16 */                            13 69 47 F0 00 00 00 00 14 59 2A E0 00 00 00 00 /* .iG......Y*..... */\
/* 0B4h 0180  16 */                            15 49 29 F0 00 00 00 00 16 39 0C E0 00 00 00 00 /* .I)......9...... */\
/* 0C4h 0196  16 */                            17 29 0B F0 00 00 00 00 18 22 29 60 00 00 00 00 /* .).......")`.... */\
/* 0D4h 0212  16 */                            19 08 ED F0 00 00 00 00 1A 02 0B 60 00 00 00 00 /* ...........`.... */\
/* 0E4h 0228  16 */                            1A F2 0A 70 00 00 00 00 1B E1 ED 60 00 00 00 00 /* ...p.......`.... */\
/* 0F4h 0244  16 */                            1C D1 EC 70 00 00 00 00 1D C1 CF 60 00 00 00 00 /* ...p.......`.... */\
/* 104h 0260  16 */                            1E B1 CE 70 00 00 00 00 1F A1 B1 60 00 00 00 00 /* ...p.......`.... */\
/* 114h 0276  16 */                            20 76 00 F0 00 00 00 00 21 81 93 60 00 00 00 00 /*  v......!..`.... */\
/* 124h 0292  16 */                            22 55 E2 F0 00 00 00 00 23 6A AF E0 00 00 00 00 /* "U......#j...... */\
/* 134h 0308  16 */                            24 35 C4 F0 00 00 00 00 25 4A 91 E0 00 00 00 00 /* $5......%J...... */\
/* 144h 0324  16 */                            26 15 A6 F0 00 00 00 00 27 2A 73 E0 00 00 00 00 /* &.......'*s..... */\
/* 154h 0340  16 */                            27 FE C3 70 00 00 00 00 29 0A 55 E0 00 00 00 00 /* '..p....).U..... */\
/* 164h 0356  16 */                            29 DE A5 70 00 00 00 00 2A EA 37 E0 00 00 00 00 /* )..p....*.7..... */\
/* 174h 0372   2 */                            2B BE                                           /* +. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 92 54 4F 53 41 53 55  // SLICv.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 09 20 07 01 4D 53 46 54  // TOSASU00. ..MSFT
    0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
    0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
    0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
    0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
    0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
    0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
    00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
    00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 41  // ............TOSA
    00D0: 53 55 54 4F 53 41 53 55 30 30 57 49 4E 44 4F 57  // SUTOSASU00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 31 80 34 BA 88 41 84 6C 90 AD  // ......1.4..A.l..
    0100: 10 D2 0A 8C 67 8A 68 72 C4 33 58 5B 6C 39 E3 97  // ....g.hr.3X[l9..
    0110: 00 6F 43 52 9A 55 74 59 EE F2 1E F2 63 68 81 D1  // .oCR.UtY....ch..
    0120: 8C 8E 3D 66 94 B1 2D 6C 91 22 B4 E5 A6 5B 30 21  // ..=f..-l."...[0!
    0130: 99 22 13 25 EA D4 43 07 10 5C AC 61 D2 CB 7F FD  // .".%..C..\.a....
    0140: BD C3 F0 82 6F CF 5C C3 6A B9 A6 5F 68 8B E9 97  // ....o.\.j.._h...
    0150: DE C9 94 E8 07 AB E2 81 16 F7 4C 7E 47 11 D3 48  // ..........L~G..H
    0160: B9 8E 29 63 0D BC 39 EE 81 D8 02 A5 1E E5 76 6A  // ..)c..9.......vj
    0170: FB CB 6C 6B 12 F1                                // ..lk..


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Tst", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000000410, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000000410, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                Zero, 
                0x0F, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                Zero, 
                0x0E, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                Zero, 
                0x0D, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                Zero, 
                0x0C, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                Zero, 
                0x0B, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                Zero, 
                0x0A, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                Zero, 
                0x09, 
                Zero
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                Zero, 
                0x1E, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                Zero, 
                0x1C, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                Zero, 
                0x1A, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                Zero, 
                0x18, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                Zero, 
                0x16, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                Zero, 
                0x14, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                Zero, 
                0x12, 
                Zero
            }
        })
        Name (TSSF, Zero)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (DerefOf (Local0 [Local1]) [One])
                Local3 = Zero
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    DerefOf (TSSI [Local3]) [One] = Local4
                    DerefOf (TSSM [Local3]) [One] = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            Debug = "Cpu0: _TDL Called"
            Name (LFMI, Zero)
            LFMI = SizeOf (TSSM)
            LFMI--
            Return (LFMI) /* \_PR_.CPU0._TDL.LFMI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x00800000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        0x04
                    }
                })
            }

            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApTst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (MPEN, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        MPEN
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    One, 
                    0xFC, 
                    One
                }
            })
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        MPEN
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    One, 
                    0xFC, 
                    One
                }
            })
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        MPEN
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    One, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x7AAFF718, 
            0x00000652, 
            "APIST   ", 
            0x7AB00E18, 
            0x0000015F, 
            "CPU0CST ", 
            0x7AAFEC18, 
            0x00000357, 
            "APCST   ", 
            0x7AB01F18, 
            0x0000008D
        })
        Name (CFGD, 0x33392803)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & One))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & One)))
                {
                    SDTL |= One
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0x82))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x82) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU2.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x82) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU2.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU2.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU3.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x82) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU3.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU3.HI1_ */
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (LIMT, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (MPPC, Zero)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Local0 = LIMT /* External reference */
            If ((Local0 > MPPC))
            {
                Return (Local0)
            }
            Else
            {
                Return (MPPC) /* \_PR_.CPU0.MPPC */
            }
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000641, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001B56, 
                0x00001B56
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001441, 
                0x00001441
            }, 

            Package (0x06)
            {
                0x000005F0, 
                0x0000076C, 
                0x0000000A, 
                0x0000000A, 
                0x00001340, 
                0x00001340
            }, 

            Package (0x06)
            {
                0x000005A0, 
                0x00000708, 
                0x0000000A, 
                0x0000000A, 
                0x0000123F, 
                0x0000123F
            }, 

            Package (0x06)
            {
                0x00000550, 
                0x000006A4, 
                0x0000000A, 
                0x0000000A, 
                0x0000113D, 
                0x0000113D
            }, 

            Package (0x06)
            {
                0x00000500, 
                0x00000640, 
                0x0000000A, 
                0x0000000A, 
                0x0000103C, 
                0x0000103C
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000005DC, 
                0x0000000A, 
                0x0000000A, 
                0x00000F3A, 
                0x00000F3A
            }, 

            Package (0x06)
            {
                0x00000460, 
                0x00000578, 
                0x0000000A, 
                0x0000000A, 
                0x00000E39, 
                0x00000E39
            }, 

            Package (0x06)
            {
                0x00000410, 
                0x00000514, 
                0x0000000A, 
                0x0000000A, 
                0x00000D37, 
                0x00000D37
            }, 

            Package (0x06)
            {
                0x000003C0, 
                0x000004B0, 
                0x0000000A, 
                0x0000000A, 
                0x00000C36, 
                0x00000C36
            }, 

            Package (0x06)
            {
                0x00000370, 
                0x0000044C, 
                0x0000000A, 
                0x0000000A, 
                0x00000B35, 
                0x00000B35
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000003E8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A33, 
                0x00000A33
            }, 

            Package (0x06)
            {
                0x000002D0, 
                0x00000384, 
                0x0000000A, 
                0x0000000A, 
                0x00000932, 
                0x00000932
            }, 

            Package (0x06)
            {
                0x00000280, 
                0x00000320, 
                0x0000000A, 
                0x0000000A, 
                0x00000830, 
                0x00000830
            }, 

            Package (0x06)
            {
                0x00000230, 
                0x000002BC, 
                0x0000000A, 
                0x0000000A, 
                0x0000072F, 
                0x0000072F
            }, 

            Package (0x06)
            {
                0x000001E0, 
                0x00000258, 
                0x0000000A, 
                0x0000000A, 
                0x0000062D, 
                0x0000062D
            }
        })
        Name (NPSS, Package (0x16)
        {
            Package (0x06)
            {
                0x00000870, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001B56, 
                0x00001B56
            }, 

            Package (0x06)
            {
                0x00000820, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001A53, 
                0x00001A53
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001950, 
                0x00001950
            }, 

            Package (0x06)
            {
                0x00000780, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x0000184D, 
                0x0000184D
            }, 

            Package (0x06)
            {
                0x00000730, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x0000174A, 
                0x0000174A
            }, 

            Package (0x06)
            {
                0x000006E0, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001647, 
                0x00001647
            }, 

            Package (0x06)
            {
                0x00000690, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001544, 
                0x00001544
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001441, 
                0x00001441
            }, 

            Package (0x06)
            {
                0x000005F0, 
                0x0000076C, 
                0x0000000A, 
                0x0000000A, 
                0x00001340, 
                0x00001340
            }, 

            Package (0x06)
            {
                0x000005A0, 
                0x00000708, 
                0x0000000A, 
                0x0000000A, 
                0x0000123F, 
                0x0000123F
            }, 

            Package (0x06)
            {
                0x00000550, 
                0x000006A4, 
                0x0000000A, 
                0x0000000A, 
                0x0000113D, 
                0x0000113D
            }, 

            Package (0x06)
            {
                0x00000500, 
                0x00000640, 
                0x0000000A, 
                0x0000000A, 
                0x0000103C, 
                0x0000103C
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000005DC, 
                0x0000000A, 
                0x0000000A, 
                0x00000F3A, 
                0x00000F3A
            }, 

            Package (0x06)
            {
                0x00000460, 
                0x00000578, 
                0x0000000A, 
                0x0000000A, 
                0x00000E39, 
                0x00000E39
            }, 

            Package (0x06)
            {
                0x00000410, 
                0x00000514, 
                0x0000000A, 
                0x0000000A, 
                0x00000D37, 
                0x00000D37
            }, 

            Package (0x06)
            {
                0x000003C0, 
                0x000004B0, 
                0x0000000A, 
                0x0000000A, 
                0x00000C36, 
                0x00000C36
            }, 

            Package (0x06)
            {
                0x00000370, 
                0x0000044C, 
                0x0000000A, 
                0x0000000A, 
                0x00000B35, 
                0x00000B35
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000003E8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A33, 
                0x00000A33
            }, 

            Package (0x06)
            {
                0x000002D0, 
                0x00000384, 
                0x0000000A, 
                0x0000000A, 
                0x00000932, 
                0x00000932
            }, 

            Package (0x06)
            {
                0x00000280, 
                0x00000320, 
                0x0000000A, 
                0x0000000A, 
                0x00000830, 
                0x00000830
            }, 

            Package (0x06)
            {
                0x00000230, 
                0x000002BC, 
                0x0000000A, 
                0x0000000A, 
                0x0000072F, 
                0x0000072F
            }, 

            Package (0x06)
            {
                0x000001E0, 
                0x00000258, 
                0x0000000A, 
                0x0000000A, 
                0x0000062D, 
                0x0000062D
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((CFGD & 0x01000000))
            {
                If ((CFGD & 0x00800000))
                {
                    If ((PDC0 & 0x0800))
                    {
                        Return (Package (0x01)
                        {
                            Package (0x05)
                            {
                                0x05, 
                                Zero, 
                                Zero, 
                                0xFE, 
                                0x04
                            }
                        })
                    }

                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            Zero, 
                            Zero, 
                            0xFC, 
                            0x04
                        }
                    })
                }

                If ((PDC0 & 0x0800))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            Zero, 
                            Zero, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    0x04
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x2000))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000058, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01F4, 
                            0x0A
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000064, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x03E8, 
                            0x0A
                        }
                    })
                }

                If ((CFGD & 0x0800))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000058, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01F4, 
                            0x0A
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x2000))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01F4, 
                            0x64
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000417, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x03E8, 
                            0x0A
                        }
                    })
                }

                If ((CFGD & 0x0800))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01F4, 
                            0x0A
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x2000))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000416, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01F4, 
                        0x64
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000417, // Address
                                ,)
                        }, 

                        0x03, 
                        0x1388, 
                        0x0A
                    }
                })
            }

            If ((CFGD & 0x0800))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000416, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01F4, 
                        0x0A
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 57
[00Ah 0010   6]                       Oem ID : ""
[010h 0016   8]                 Oem Table ID : "Tpm2Tabl"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]                     Reserved : 00000000
[028h 0040   8]              Control Address : 000000007FF00000
[030h 0048   4]                 Start Method : 00000002
/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 03 57 00 00 00 00 00 00  // TPM24....W......
    0010: 54 70 6D 32 54 61 62 6C 01 00 00 00 41 4D 49 20  // Tpm2Tabl....AMI 
    0020: 00 00 00 00 00 00 00 00 00 00 F0 7F 00 00 00 00  // ................
    0030: 02 00 00 00                                      // ....


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EE
[00Ah 0010   6]                       Oem ID : "TOSASU"
[010h 0016   8]                 Oem Table ID : "TOSASU00"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 EE 54 4F 53 41 53 55  // UEFIB.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 00 00 00 00 00 00 00 00  // TOSASU00........
    0020: 00 00 00 00 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 00 00 00 00 00  // ...26...........
    0040: 00 00                                            // ..


