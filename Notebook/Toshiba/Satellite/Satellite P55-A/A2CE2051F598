
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 02)  ASF!  0x000000A5  0x20  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 03)  APIC  0x0000008C  0x03  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 04)  ECDT  0x000000C1  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 05)  SLIC  0x00000176  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 06)  SSDT  0x00000912  0x01  "TOSASU"  "TOSASU00"  0x00003000  "ACPI"   0x00040000
 07)  BOOT  0x00000028  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 08)  UEFI  0x00000236  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 09)  DSDT  0x0001B315  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 10)  WDAT  0x00000224  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 11)  ASPT  0x00000034  0x07  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 12)  SSDT  0x00000B22  0x01  "TOSASU"  "TOSASU00"  0x00003000  "ACPI"   0x00040000
 13)  DMAR  0x000000B8  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 14)  FACP  0x0000010C  0x05  "TOSASU"  "TOSASU00"  0x00000100  "ACPI"   0x00040000
 15)  FPDT  0x00000044  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 16)  SSDT  0x00001068  0x01  "TOSASU"  "TOSASU00"  0x00001000  "ACPI"   0x00040000
 17)  MSDM  0x00000055  0x03  "TOSASU"  "TOSASU00"  0x06222004  "ACPI"   0x00040000
 18)  DBGP  0x00000034  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 19)  HPET  0x00000038  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 20)  FACS  0x00000040  0x02
 21)  BGRT  0x00000038  0x01  "TOSASU"  "TOSASU00"  0x00000001  "ACPI"   0x00040000
 22)  SSDT  0x0000083B  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20120111
 23)  SSDT  0x00000303  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20120111
 24)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20120111

Found 24 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000008C
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : C3
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 05
[04Fh 0079 001h]               Local Apic ID : 00
[050h 0080 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 06
[057h 0087 001h]               Local Apic ID : 00
[058h 0088 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 07
[05Fh 0095 001h]               Local Apic ID : 00
[060h 0096 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 08
[067h 0103 001h]               Local Apic ID : 00
[068h 0104 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 01 [I/O APIC]
[06Dh 0109 001h]                      Length : 0C
[06Eh 0110 001h]                 I/O Apic ID : 00
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]                     Address : FEC00000
[074h 0116 004h]                   Interrupt : 00000000

[078h 0120 001h]               Subtable Type : 02 [Interrupt Source Override]
[079h 0121 001h]                      Length : 0A
[07Ah 0122 001h]                         Bus : 00
[07Bh 0123 001h]                      Source : 00
[07Ch 0124 004h]                   Interrupt : 00000002
[080h 0128 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130 001h]               Subtable Type : 02 [Interrupt Source Override]
[083h 0131 001h]                      Length : 0A
[084h 0132 001h]                         Bus : 00
[085h 0133 001h]                      Source : 09
[086h 0134 004h]                   Interrupt : 00000009
[08Ah 0138 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 140 (0x8C)

    0000: 41 50 49 43 8C 00 00 00 03 C3 54 4F 53 41 53 55  // APIC......TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 02  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 00  // ................
    0050: 00 00 00 00 00 08 06 00 00 00 00 00 00 08 07 00  // ................
    0060: 00 00 00 00 00 08 08 00 00 00 00 00 01 0C 00 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A5
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 9C
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 05
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : 57010000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 89
[03Dh 0061 001h]                     Command : 04
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 05
[041h 0065 001h]                        Type : 6F
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 68
[044h 0068 001h]                    Severity : 08
[045h 0069 001h]                SensorNumber : 88
[046h 0070 001h]                      Entity : 17
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 89
[049h 0073 001h]                     Command : 04
[04Ah 0074 001h]                        Mask : 04
[04Bh 0075 001h]                       Value : 04
[04Ch 0076 001h]                  SensorType : 07
[04Dh 0077 001h]                        Type : 6F
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 68
[050h 0080 001h]                    Severity : 20
[051h 0081 001h]                SensorNumber : 88
[052h 0082 001h]                      Entity : 03
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 89
[055h 0085 001h]                     Command : 05
[056h 0086 001h]                        Mask : 01
[057h 0087 001h]                       Value : 01
[058h 0088 001h]                  SensorType : 19
[059h 0089 001h]                        Type : 6F
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 68
[05Ch 0092 001h]                    Severity : 20
[05Dh 0093 001h]                SensorNumber : 88
[05Eh 0094 001h]                      Entity : 22
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : 88
[06Ah 0106 001h]                     Command : 00
[06Bh 0107 001h]                       Value : 03

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : 88
[06Eh 0110 001h]                     Command : 00
[06Fh 0111 001h]                       Value : 02

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : 88
[072h 0114 001h]                     Command : 00
[073h 0115 001h]                       Value : 01

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : 88
[076h 0118 001h]                     Command : 00
[077h 0119 001h]                       Value : 04

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 20 F8 00 00 00 13 F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : 00000000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0000
[08Bh 0139 002h]                Boot Options : 0000
[08Dh 0141 002h]              Oem Parameters : 0000

[08Fh 0143 001h]               Subtable Type : 84 [ASF Address]
[090h 0144 001h]                    Reserved : 00
[091h 0145 002h]                      Length : 0016
[093h 0147 001h]               Eprom Address : 00
[094h 0148 001h]                Device Count : 10
[095h 0149 001h]                   Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 9C 54 4F 53 41 53 55  // ASF!.... .TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 00 10 00 05 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 F8 00 00  // ............ ...
    0080: 00 13 F0 00 00 00 00 00 00 00 00 00 00 00 00 84  // ................
    0090: 00 16 00 00 10 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........
    00A0: 00 00 00 00 00                                   // .....


ASPT
----
[000h 0000 004h]                   Signature : "ASPT"    [AMD Secure Processor Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 07
[009h 0009 001h]                    Checksum : 4D
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]         Number of Subtables : 00000000

[028h 0040 002h]                        Type : 0000 [ASPT Global Registers]
[02Ah 0042 002h]                      Length : 0000
Invalid zero length subtable

Raw Table Data: Length 52 (0x34)

    0000: 41 53 50 54 34 00 00 00 07 4D 54 4F 53 41 53 55  // ASPT4....MTOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00                                      // ....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DF
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000A68D9000
[030h 0048 004h]               Image OffsetX : 000002AF
[034h 0052 004h]               Image OffsetY : 00000103

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 DF 54 4F 53 41 53 55  // BGRT8.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 01 00 00 00 00 90 8D A6 00 00 00 00  // ................
    0030: AF 02 00 00 03 01 00 00                          // ........


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1F
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]         Boot Register Index : 44
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 1F 54 4F 53 41 53 55  // BOOT(.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


DBGP
----
[000h 0000 004h]                   Signature : "DBGP"    [Debug Port Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 61
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]              Interface Type : 01
[025h 0037 003h]                    Reserved : 000000

[028h 0040 00Ch]         Debug Port Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 01 [SystemIO]
[029h 0041 001h]                   Bit Width : 10
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 61 54 4F 53 41 53 55  // DBGP4....aTOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 01 00 00 00 01 10 00 00 F8 03 00 00  // ................
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 000000B8
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BA
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]          Host Address Width : 23
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED91000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 00
[05Dh 0093 001h]              PCI Bus Number : F0

[05Eh 0094 002h]                    PCI Path : 1F,00


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : F0

[066h 0102 002h]                    PCI Path : 0F,00


[068h 0104 002h]               Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106 002h]                      Length : 0030

[06Ch 0108 002h]                    Reserved : 0000
[06Eh 0110 002h]          PCI Segment Number : 0000
[070h 0112 008h]                Base Address : 00000000AAE8C000
[078h 0120 008h]         End Address (limit) : 00000000AAEABFFF

[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 00

[086h 0134 002h]                    PCI Path : 1D,00


[088h 0136 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137 001h]                Entry Length : 08
[08Ah 0138 002h]                    Reserved : 0000
[08Ch 0140 001h]              Enumeration ID : 00
[08Dh 0141 001h]              PCI Bus Number : 00

[08Eh 0142 002h]                    PCI Path : 1A,00


[090h 0144 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145 001h]                Entry Length : 08
[092h 0146 002h]                    Reserved : 0000
[094h 0148 001h]              Enumeration ID : 00
[095h 0149 001h]              PCI Bus Number : 00

[096h 0150 002h]                    PCI Path : 14,00


[098h 0152 002h]               Subtable Type : 0001 [Reserved Memory Region]
[09Ah 0154 002h]                      Length : 0020

[09Ch 0156 002h]                    Reserved : 0000
[09Eh 0158 002h]          PCI Segment Number : 0000
[0A0h 0160 008h]                Base Address : 00000000AB800000
[0A8h 0168 008h]         End Address (limit) : 00000000AF9FFFFF

[0B0h 0176 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177 001h]                Entry Length : 08
[0B2h 0178 002h]                    Reserved : 0000
[0B4h 0180 001h]              Enumeration ID : 00
[0B5h 0181 001h]              PCI Bus Number : 00

[0B6h 0182 002h]                    PCI Path : 02,00


Raw Table Data: Length 184 (0xB8)

    0000: 44 4D 41 52 B8 00 00 00 01 BA 54 4F 53 41 53 55  // DMAR......TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 23 01 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 00 F0 1F 00  // ................
    0060: 04 08 00 00 00 F0 0F 00 01 00 30 00 00 00 00 00  // ..........0.....
    0070: 00 C0 E8 AA 00 00 00 00 FF BF EA AA 00 00 00 00  // ................
    0080: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1A 00  // ................
    0090: 01 08 00 00 00 00 14 00 01 00 20 00 00 00 00 00  // .......... .....
    00A0: 00 00 80 AB 00 00 00 00 FF FF 9F AF 00 00 00 00  // ................
    00B0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "TOSASU", "TOSASU00", 0x00000001)
{
    /*
     * iASL Warning: There were 7 external control methods found during
     * disassembly, but only 0 were resolved (7 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, UnknownObj)
    External (_PR_.CPU0.CTLD, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.IEIT.EITV, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.LPCB.PEG0.PEGP.TGPC, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP.LNKD, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP.SGPO, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.PEG0.PEGP.TGPC, BuffObj)
    External (_SB_.PCI0.PEG0.VGA_.LCD_, UnknownObj)
    External (CFGD, UnknownObj)
    External (HDOS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HWID, IntObj)
    External (IDAB, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)
    External (TNOT, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xFFFF)
    Name (SP2O, 0x4E)
    Name (SP1O, 0x2E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0600)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x04000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (PBLK, 0x0410)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (LVL2, 0x0414)
    Name (LVL3, 0x0415)
    Name (LVL4, 0x0416)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (ITKE, Zero)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (BEL, One)
    Name (BEH, 0x02)
    Name (BRH, 0x03)
    Name (BTF, 0x04)
    Name (BYB, 0x06)
    Name (BWB, 0x06)
    Name (BELC, 0x09)
    Name (BRHP, 0x0A)
    Name (BTFC, 0x0B)
    Name (BEHP, 0x0C)
    Name (BELP, 0x0E)
    Name (BTL, 0x10)
    Name (BTFP, 0x11)
    Name (BSR, 0x14)
    Name (BLR, 0x18)
    Name (BLH, 0x19)
    Name (BCH, 0x16)
    Name (BCC, 0x1C)
    Name (BEF, 0x21)
    Name (BLLE, 0x22)
    Name (BLLC, 0x23)
    Name (BLCA, 0x24)
    Name (BLLS, 0x25)
    Name (BLLP, 0x26)
    Name (BLLD, 0x27)
    Name (BKF, 0x28)
    Name (BHBE, 0x30)
    Name (BHBC, 0x31)
    Name (BHBN, 0x32)
    Name (BHBM, 0x33)
    Name (TCGM, One)
    Name (TRTP, One)
    Name (WDTE, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (DPPB, 0xFED98000)
    Name (DPPL, 0x8000)
    OperationRegion (GNVS, SystemMemory, 0xAAFB3C98, 0x00000203)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        RES3,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        COMA,   8, 
        COMB,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        PLID,   8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        Offset (0xED), 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x157), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        DSEL,   8, 
        ESEL,   8, 
        PSEL,   8, 
        PWEN,   8, 
        PRST,   8, 
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        GBAS,   16, 
        SGGP,   8, 
        Offset (0x19D), 
        ALFP,   8, 
        IMON,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        Offset (0x1B2), 
        XHCI,   8, 
        XHPM,   8, 
        Offset (0x1B7), 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        Offset (0x1C4), 
        LPMV,   8, 
        Offset (0x1C6), 
        DDRF,   8, 
        MM64,   8, 
        Offset (0x1CB), 
        PSKE,   8, 
        PSME,   8, 
        Offset (0x1E0), 
        CCMD,   8, 
        COMD,   8, 
        LPT1,   8, 
        PSTP,   8, 
        WKMD,   8, 
        IDER,   8, 
        PIE0,   8, 
        PIE1,   8, 
        CSTS,   8, 
        PMEE,   8, 
        WOLE,   8, 
        NVAD,   32, 
        PGVI,   32, 
        OPTF,   8, 
        IFSE,   8, 
        AOAC,   8, 
        S1C0,   16, 
        S1C1,   16, 
        S2C0,   16, 
        S2C1,   16, 
        SLPS,   8, 
        ALAT,   32
    }

    OperationRegion (OGNS, SystemMemory, 0xAAFB3F18, 0x0000008C)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        ECON,   8, 
        WINF,   8, 
        CPUD,   8, 
        PAMB,   32, 
        XMIB,   32, 
        XMIS,   8, 
        OSTB,   16, 
        BTDP,   8, 
        WLDP,   8, 
        BRST,   8, 
        WRST,   8, 
        SWMF,   16, 
        SWSF,   16, 
        PAR0,   16, 
        BAPI,   32, 
        DAX0,   16, 
        DAX1,   16, 
        DAX2,   16, 
        DAX3,   32, 
        DAX4,   32, 
        DA00,   8, 
        DA01,   8, 
        DA02,   8, 
        DA03,   8, 
        DA04,   8, 
        DA05,   8, 
        DA06,   8, 
        DA07,   8, 
        DA08,   8, 
        DA09,   8, 
        DA10,   8, 
        DA11,   8, 
        DA12,   8, 
        DA13,   8, 
        DA14,   8, 
        DA15,   8, 
        DA16,   8, 
        DA17,   8, 
        DA18,   8, 
        DA19,   8, 
        DA20,   8, 
        DA21,   8, 
        USCM,   8, 
        UPST,   16, 
        LDSZ,   8, 
        CPUS,   8, 
        LDST,   8, 
        LDRS,   16, 
        WUFC,   8, 
        TPOF,   8, 
        BIMA,   8, 
        BIMI,   8, 
        ECMA,   8, 
        ECMI,   8, 
        BIYR,   16, 
        BIMN,   8, 
        BIDA,   8, 
        KBTY,   8, 
        FNKS,   8, 
        ODDV,   16, 
        ODDD,   16, 
        ODSD,   16, 
        ODRV,   8, 
        HISD,   8, 
        EUSB,   8, 
        USBA,   32, 
        FPST,   16, 
        TPON,   8, 
        TPDT,   8, 
        SYST,   16, 
        PHNV,   16, 
        PCBD,   8, 
        PCB2,   8, 
        PJTY,   8, 
        LCDD,   32, 
        BTSF,   8, 
        BOOT,   8, 
        LDEV,   8, 
        UPSM,   8, 
        APON,   8, 
        WOLC,   8, 
        ODSV,   16, 
        HAPD,   8, 
        HPCM,   8, 
        HPDD,   8, 
        HAPF,   8, 
        WOWC,   8, 
        WLVN,   16, 
        KBCM,   8, 
        KBTM,   8
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {1,3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Name (PR00, Package (0x25)
            {
                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0018FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }
            })
            Name (AR00, Package (0x25)
            {
                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0018FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.PCI0.AR00 */
                }

                Return (PR00) /* \_SB_.PCI0.PR00 */
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((PELN >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + One)
                If (((MM64 == Zero) || (OSYS <= 0x07D3)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = 0x00000000
                    If ((TUUD >= 0x1000))
                    {
                        M2MN = (TUUD << 0x14)
                    }
                    Else
                    {
                        M2MN = 0x00000000
                    }

                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (^XHC.CUID (Arg0))
                {
                    OSVR = Zero
                    Return (^XHC.POSC (Arg1, Arg2, Arg3))
                }
                Else
                {
                    If (_OSI ("Windows 2012"))
                    {
                        If ((XCNT == Zero))
                        {
                            ^XHC.XSEL ()
                            XCNT++
                        }
                    }

                    Local0 = _OS /* \_OS_ */
                    If ((BOOT == One))
                    {
                        If ((XCNT == Zero))
                        {
                            ^XHC.XHDD ()
                            XCNT++
                            OSVR = 0xC5
                        }
                    }
                }

                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (PMEE)
                    {
                        Return (Package (0x02)
                        {
                            0x0B, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0B, 
                            Zero
                        })
                    }
                }

                Name (PR04, Package (0x0C)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR04, Package (0x0C)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.PCI0.P0P1.AR04 */
                    }

                    Return (PR04) /* \_SB_.PCI0.P0P1.PR04 */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8, 
                        Offset (0x6C), 
                        Offset (0x6D), 
                        Offset (0x6E), 
                        XUSB,   1
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA) /* \_SB_.PRSA */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB) /* \_SB_.PRSB */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC) /* \_SB_.PRSC */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD) /* \_SB_.PRSD */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE) /* \_SB_.PRSE */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF) /* \_SB_.PRSF */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG) /* \_SB_.PRSG */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH) /* \_SB_.PRSH */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0x78), 
                        ,   2, 
                    G1SM,   1, 
                    G1SC,   1, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Scope (\)
                {
                    Name (OSFG, Zero)
                    Name (OSVT, 0x20)
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.PCI0.LPCB.EC0_.CRS_ */
                    }

                    Name (_GPE, 0x1B)  // _GPE: General Purpose Events
                    Mutex (MUEC, 0x00)
                    Mutex (ASIO, 0x00)
                    Name (ECFL, Ones)
                    Method (ECAV, 0, NotSerialized)
                    {
                        If ((_REV >= 0x02))
                        {
                            Return (One)
                        }

                        If ((SLPT >= 0x04))
                        {
                            Return (Zero)
                        }

                        If ((ECFL == Ones))
                        {
                            Return (Zero)
                        }

                        Return (ECFL) /* \_SB_.PCI0.LPCB.EC0_.ECFL */
                    }

                    OperationRegion (ECW1, SystemMemory, 0xFEFF0380, 0x80)
                    Field (ECW1, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x01), 
                        EPWS,   8, 
                        EB0S,   8, 
                        EB1S,   8, 
                        EB0R,   8, 
                        EB1R,   8, 
                        EB0T,   8, 
                        EB1T,   8, 
                        Offset (0x10), 
                        B0PN,   16, 
                        B0VL,   16, 
                        B0RC,   16, 
                        B0FC,   16, 
                        B0ST,   16, 
                        B0CC,   16, 
                        B0TM,   16, 
                        B0C1,   16, 
                        B0CV,   16, 
                        Offset (0x30), 
                        B1PN,   16, 
                        B1VL,   16, 
                        B1RC,   16, 
                        B1FC,   16, 
                        B1ST,   16, 
                        B1CC,   16, 
                        B1TM,   16, 
                        B1C1,   16, 
                        B1CV,   16, 
                        Offset (0x50), 
                        B0DC,   16, 
                        B0DV,   16, 
                        B0SN,   16, 
                        B0MD,   16, 
                        B1DC,   16, 
                        B1DV,   8, 
                        B1SN,   8, 
                        B1MD,   8, 
                        Offset (0x60), 
                        TH1R,   8, 
                        TH1L,   8, 
                        TH0R,   8, 
                        TH0L,   8, 
                        ECRT,   8, 
                        EPSV,   8, 
                        EACT,   8, 
                        TERR,   8, 
                        F0TS,   16, 
                        F1TS,   16, 
                        F0CS,   8, 
                        F1CS,   8, 
                        PCPT,   16
                    }

                    OperationRegion (ECW2, SystemMemory, 0xFEFF0700, 0x80)
                    Field (ECW2, ByteAcc, Lock, Preserve)
                    {
                        ESEM,   8, 
                        CMD1,   8, 
                        CDT1,   8, 
                        CDT2,   8, 
                        CDT3,   8, 
                        CDT4,   8, 
                        CDT5,   8, 
                        CDT6,   8, 
                        CDT7,   8, 
                        CDT8,   8, 
                        CDT9,   8, 
                        CD10,   8, 
                        CD11,   8, 
                        CD12,   8, 
                        Offset (0x40), 
                        EDA1,   8, 
                        EDA2,   8, 
                        EDA3,   8, 
                        EDA4,   8, 
                        EDA5,   8, 
                        EDA6,   8, 
                        EDA7,   8, 
                        EDA8,   8, 
                        EDA9,   8, 
                        ED10,   8, 
                        ED11,   8, 
                        ED12,   8
                    }

                    OperationRegion (PHM0, SystemMemory, 0xFEFF0380, 0x80)
                    Field (PHM0, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x12), 
                        BD25,   8, 
                        BD26,   8, 
                        BD27,   8, 
                        BD28,   8, 
                        BD29,   8, 
                        BD2A,   8, 
                        BD2D,   8, 
                        BD2E,   8, 
                        BD2F,   8, 
                        BD30,   8, 
                        BD31,   8, 
                        BD32,   8, 
                        Offset (0x22), 
                        BD33,   8, 
                        BD34,   8, 
                        BD35,   8, 
                        BD36,   8, 
                        BD37,   8, 
                        BD38,   8, 
                        BD39,   8, 
                        BD3A,   8, 
                        Offset (0x50), 
                        BD3B,   8, 
                        BD3C,   8, 
                        BD3D,   8, 
                        BD3E,   8, 
                        Offset (0x60), 
                        BD20,   8, 
                        Offset (0x62), 
                        BD22,   8, 
                        Offset (0x68), 
                        BD23,   8, 
                        BD24,   8, 
                        Offset (0x6E), 
                        BD21,   8
                    }

                    OperationRegion (ECWB, SystemMemory, 0xFEFF0700, 0x80)
                    Field (ECWB, ByteAcc, Lock, Preserve)
                    {
                        ESEB,   8, 
                        CMDB,   8, 
                        CDTB,   496, 
                        EDAB,   512
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        ECFL = One
                        Local1 = RRAM (0x04A0)
                        Local1 |= 0x08
                        WRAM (0x04A0, Local1)
                        TTPH ()
                        Local1 = RRAM (0x0617)
                        If ((OSTB == 0x60))
                        {
                            Local1 |= One
                        }
                        Else
                        {
                            Local1 &= 0xFE
                        }

                        WRAM (0x0617, Local1)
                        ECPH ()
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                    }

                    Name (BADR, 0x0B)
                    Name (CADR, 0x09)
                    Name (SADR, 0x0A)
                    Name (ISHE, Zero)
                    Method (ALMH, 1, NotSerialized)
                    {
                        If ((Arg0 == BADR))
                        {
                            NBAT (0x80)
                        }
                    }

                    Method (BIFW, 1, NotSerialized)
                    {
                        Local0 = SMBR (RDWD, BADR, Arg0, Zero)
                        Local1 = DerefOf (Local0 [Zero])
                        If (Local1)
                        {
                            Return (Ones)
                        }
                        Else
                        {
                            Return (DerefOf (Local0 [0x02]))
                        }
                    }

                    Name (BSLF, Zero)
                    Method (BIF0, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1MD /* \_SB_.PCI0.LPCB.EC0_.B1MD */
                            }
                            Else
                            {
                                Local0 = B0MD /* \_SB_.PCI0.LPCB.EC0_.B0MD */
                            }

                            If ((Local0 != 0xFFFF))
                            {
                                Local1 = (Local0 >> 0x0F)
                                Local1 &= One
                                Local0 = (Local1 ^ One)
                                Release (MUEC)
                            }
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BIF1, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Local0 = Ones
                                Return (Local0)
                            }

                            If (BSLF)
                            {
                                Local0 = B1DC /* \_SB_.PCI0.LPCB.EC0_.B1DC */
                            }
                            Else
                            {
                                Local0 = B0DC /* \_SB_.PCI0.LPCB.EC0_.B0DC */
                            }

                            Local0 &= 0xFFFF
                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BIF2, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1FC /* \_SB_.PCI0.LPCB.EC0_.B1FC */
                            }
                            Else
                            {
                                Local0 = B0FC /* \_SB_.PCI0.LPCB.EC0_.B0FC */
                            }

                            Local0 &= 0xFFFF
                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BIF3, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1MD /* \_SB_.PCI0.LPCB.EC0_.B1MD */
                            }
                            Else
                            {
                                Local0 = B0MD /* \_SB_.PCI0.LPCB.EC0_.B0MD */
                            }

                            If ((Local0 != 0xFFFF))
                            {
                                Local0 >>= 0x09
                                Local0 &= One
                                Local0 ^= One
                                Release (MUEC)
                            }
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BIF4, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1DV /* \_SB_.PCI0.LPCB.EC0_.B1DV */
                            }
                            Else
                            {
                                Local0 = B0DV /* \_SB_.PCI0.LPCB.EC0_.B0DV */
                            }

                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BIF9, 0, NotSerialized)
                    {
                        Name (BSTR, Buffer (0x20){})
                        Local0 = SMBR (RDBL, BADR, 0x21, Zero)
                        If ((DerefOf (Local0 [Zero]) != Zero))
                        {
                            BSTR = MNAM /* \MNAM */
                            BSTR [0x04] = Zero
                        }
                        Else
                        {
                            BSTR = DerefOf (Local0 [0x02])
                            BSTR [DerefOf (Local0 [One])] = Zero
                        }

                        Return (BSTR) /* \_SB_.PCI0.LPCB.EC0_.BIF9.BSTR */
                    }

                    Method (BIFA, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1SN /* \_SB_.PCI0.LPCB.EC0_.B1SN */
                            }
                            Else
                            {
                                Local0 = B0SN /* \_SB_.PCI0.LPCB.EC0_.B0SN */
                            }

                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BSTS, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1ST /* \_SB_.PCI0.LPCB.EC0_.B1ST */
                            }
                            Else
                            {
                                Local0 = B0ST /* \_SB_.PCI0.LPCB.EC0_.B0ST */
                            }

                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BCRT, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1CC /* \_SB_.PCI0.LPCB.EC0_.B1CC */
                            }
                            Else
                            {
                                Local0 = B0CC /* \_SB_.PCI0.LPCB.EC0_.B0CC */
                            }

                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BRCP, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1RC /* \_SB_.PCI0.LPCB.EC0_.B1RC */
                            }
                            Else
                            {
                                Local0 = B0RC /* \_SB_.PCI0.LPCB.EC0_.B0RC */
                            }

                            If ((Local0 == 0xFFFF))
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BVOT, 0, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) != Zero))
                            {
                                Return (Ones)
                            }

                            If (BSLF)
                            {
                                Local0 = B1VL /* \_SB_.PCI0.LPCB.EC0_.B1VL */
                            }
                            Else
                            {
                                Local0 = B0VL /* \_SB_.PCI0.LPCB.EC0_.B0VL */
                            }

                            Release (MUEC)
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Return (Local0)
                    }

                    Method (BATP, 1, Serialized)
                    {
                        Local0 = (EPWS & 0x02)
                        If (Local0)
                        {
                            DCPF = One
                        }
                        Else
                        {
                            DCPF = Zero
                        }

                        Local0 = (EPWS & 0x04)
                        If (Local0)
                        {
                            DCP2 = One
                        }
                        Else
                        {
                            DCP2 = Zero
                        }

                        If (Arg0)
                        {
                            Return (DCP2) /* \DCP2 */
                        }
                        Else
                        {
                            Return (DCPF) /* \DCPF */
                        }
                    }

                    Method (NBAT, 1, NotSerialized)
                    {
                        If (BATP (Zero))
                        {
                            Notify (BAT0, Arg0)
                        }
                    }

                    Method (ACAP, 0, Serialized)
                    {
                        Local0 = (EPWS & One)
                        If (Local0)
                        {
                            ACPF = One
                        }
                        Else
                        {
                            ACPF = Zero
                        }

                        Return (ACPF) /* \ACPF */
                    }

                    Method (GBTT, 1, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Local0 = EB0T /* \_SB_.PCI0.LPCB.EC0_.EB0T */
                        }
                        Else
                        {
                            Local0 = EB1T /* \_SB_.PCI0.LPCB.EC0_.EB1T */
                        }

                        Return (Local0)
                    }

                    Method (BCHG, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            If (ECAV ())
                            {
                                Local0 = EB1S /* \_SB_.PCI0.LPCB.EC0_.EB1S */
                                Local0 &= 0xFF
                                If ((Local0 != 0xFF))
                                {
                                    Local0 &= 0x02
                                }
                                Else
                                {
                                    Local0 = Zero
                                }
                            }
                            Else
                            {
                                Local0 = Zero
                            }

                            Return (Local0)
                        }
                        Else
                        {
                            If (ECAV ())
                            {
                                Local0 = EB0S /* \_SB_.PCI0.LPCB.EC0_.EB0S */
                                Local0 &= 0xFF
                                If ((Local0 != 0xFF))
                                {
                                    Local0 &= 0x02
                                }
                                Else
                                {
                                    Local0 = Zero
                                }
                            }
                            Else
                            {
                                Local0 = Zero
                            }

                            Return (Local0)
                        }
                    }

                    Method (CHBT, 1, Serialized)
                    {
                        Local1 = GBTT (Arg0)
                        If ((Local1 == 0xFF))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = (Local1 & 0x10)
                            If (Local0)
                            {
                                Local0 = One
                            }
                        }

                        Return (Local0)
                    }

                    Method (TACH, 1, NotSerialized)
                    {
                        If (Arg0)
                        {
                            If (ECAV ())
                            {
                                Local0 = F1TS /* \_SB_.PCI0.LPCB.EC0_.F1TS */
                                If ((Local0 != Zero))
                                {
                                    If ((Local0 == 0xFFFF))
                                    {
                                        Local0 = Zero
                                    }
                                    Else
                                    {
                                        Local0 *= 0x0100
                                        Local1 = 0x20E6DA00
                                        Divide (Local1, Local0, Local2, Local0)
                                    }
                                }
                                Else
                                {
                                    Local0 = Zero
                                }
                            }
                            Else
                            {
                                Local0 = Zero
                            }

                            Return (Local0)
                        }
                        Else
                        {
                            If (ECAV ())
                            {
                                Local0 = F0TS /* \_SB_.PCI0.LPCB.EC0_.F0TS */
                                If ((Local0 != Zero))
                                {
                                    If ((Local0 == 0xFFFF))
                                    {
                                        Local0 = Zero
                                    }
                                    Else
                                    {
                                        Local0 *= 0x0100
                                        Local1 = 0x20E6DA00
                                        Divide (Local1, Local0, Local2, Local0)
                                    }
                                }
                                Else
                                {
                                    Local0 = Zero
                                }
                            }
                            Else
                            {
                                Local0 = Zero
                            }

                            Return (Local0)
                        }
                    }

                    Method (EC0S, 1, NotSerialized)
                    {
                    }

                    Method (EC0W, 1, NotSerialized)
                    {
                        If ((Arg0 <= 0x04))
                        {
                            ACPF = ACPS ()
                            DCPF = DCPS (Zero)
                            PNOT ()
                        }

                        If ((Arg0 == 0x04))
                        {
                            TTAC = 0xFF
                            TTPH ()
                            Local1 = RRAM (0x0617)
                            If ((OSTB == 0x60))
                            {
                                Local1 |= One
                            }
                            Else
                            {
                                Local1 &= 0xFE
                            }

                            WRAM (0x0617, Local1)
                        }
                    }

                    Method (RRAM, 1, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            Local0 = Arg0
                            Local1 = (Local0 & 0xFF)
                            Local0 >>= 0x08
                            Local0 &= 0xFF
                            CDT2 = Local1
                            CDT1 = Local0
                            CMD1 = 0x80
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (WRAM, 2, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            Local0 = Arg0
                            Local1 = (Local0 & 0xFF)
                            Local0 >>= 0x08
                            Local0 &= 0xFF
                            CDT2 = Local1
                            CDT1 = Local0
                            CDT3 = Arg1
                            CMD1 = 0x81
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (SBRV, 1, Serialized)
                    {
                        WBOV (Zero, Arg0)
                    }

                    Name (DECF, Zero)
                    Method (SFNV, 2, Serialized)
                    {
                        Local1 = RRAM (0x0521)
                        Local2 = RRAM (0x0522)
                        Local3 = RRAM (0x0523)
                        Local4 = RRAM (0x0524)
                        If ((Arg0 == Zero))
                        {
                            Local3 |= 0x80
                            Local4 |= 0x80
                            If ((Local1 & 0x80))
                            {
                                Local0 = (Local1 >> 0x04)
                                Local0 &= 0x03
                                If ((Local0 == Zero))
                                {
                                    WRAM (0x0523, Local3)
                                }
                                ElseIf ((Local0 == One))
                                {
                                    WRAM (0x0524, Local4)
                                }
                                ElseIf ((Local0 == 0x02))
                                {
                                    WRAM (0x0523, Local3)
                                    WRAM (0x0524, Local4)
                                }
                            }

                            If ((Local2 & 0x80))
                            {
                                Local0 = (Local2 >> 0x04)
                                Local0 &= 0x03
                                If ((Local0 == Zero))
                                {
                                    WRAM (0x0523, Local3)
                                }
                                ElseIf ((Local0 == One))
                                {
                                    WRAM (0x0524, Local4)
                                }
                                ElseIf ((Local0 == 0x02))
                                {
                                    WRAM (0x0523, Local3)
                                    WRAM (0x0524, Local4)
                                }
                            }

                            Return (Zero)
                        }

                        Local3 &= 0x7F
                        Local4 &= 0x7F
                        WRAM (0x0523, Local3)
                        WRAM (0x0524, Local4)
                        WFOV (Arg0--, Arg1)
                        Return (Zero)
                    }

                    Method (SPIN, 3, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            Local0 = Arg0
                            Local1 = Arg1
                            If ((Local0 >= 0x41))
                            {
                                Local0 -= 0x41
                            }

                            Local0 <<= 0x04
                            Local0 |= Local1
                            CDT2 = Local0
                            If ((Arg2 == One))
                            {
                                Local2 = 0x20
                            }
                            Else
                            {
                                Local2 = 0x40
                            }

                            CDT1 = Local2
                            CMD1 = 0x87
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (RPIN, 2, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            Local0 = Arg0
                            If ((Local0 >= 0x41))
                            {
                                Local0 -= 0x41
                            }

                            Local0 <<= 0x04
                            Local0 |= Arg1
                            CDT2 = Local0
                            CDT1 = Zero
                            CMD1 = 0x87
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Name (WRQK, 0x02)
                    Name (RDQK, 0x03)
                    Name (SDBT, 0x04)
                    Name (RCBT, 0x05)
                    Name (WRBT, 0x06)
                    Name (RDBT, 0x07)
                    Name (WRWD, 0x08)
                    Name (RDWD, 0x09)
                    Name (WRBL, 0x0A)
                    Name (RDBL, 0x0B)
                    Name (WBLP, 0x8A)
                    Name (RBLP, 0x8B)
                    Name (PCLL, 0x0C)
                    Name (GOOD, Zero)
                    Name (UKER, 0x07)
                    Name (DAER, 0x10)
                    Name (DERR, 0x11)
                    Name (CMDN, 0x12)
                    Name (UKE2, 0x13)
                    Name (DADN, 0x17)
                    Name (SBTO, 0x18)
                    Name (USPT, 0x19)
                    Name (SBBY, 0x1A)
                    Method (SMBR, 4, Serialized)
                    {
                        Local0 = Package (0x03)
                            {
                                0x07, 
                                Zero, 
                                Zero
                            }
                        OperationRegion (ECBD, SystemMemory, 0xFEFF0700, 0x80)
                        Field (ECBD, ByteAcc, Lock, Preserve)
                        {
                            Offset (0x40), 
                            BCNT,   8, 
                            BDAT,   256
                        }

                        If ((Arg0 != RDBL))
                        {
                            If ((Arg0 != RDWD))
                            {
                                If ((Arg0 != RDBT))
                                {
                                    If ((Arg0 != RCBT))
                                    {
                                        If ((Arg0 != RDQK))
                                        {
                                            If ((Arg0 != RBLP))
                                            {
                                                Return (Local0)
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            Local6 = 0x7F
                            Local7 = 0x0F
                            While ((Local6 && (Local7 & ESEM)))
                            {
                                Sleep (0x02)
                                Local6--
                            }

                            If ((Arg3 == Zero))
                            {
                                CDT1 = Zero
                            }

                            If ((Arg3 == One))
                            {
                                CDT1 = One
                            }

                            CDT2 = Arg0
                            Local1 = (Arg1 << One)
                            CDT3 = Local1
                            CDT4 = Arg2
                            CDT5 = Zero
                            CMD1 = 0x9A
                            ESEM = 0x0F
                            Local2 = 0x7F
                            While ((Local2 && CMD1))
                            {
                                Sleep (One)
                                Local2--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 [Zero] = GOOD /* \_SB_.PCI0.LPCB.EC0_.GOOD */
                                If ((Arg0 == RDBL))
                                {
                                    Local0 [One] = BCNT /* \_SB_.PCI0.LPCB.EC0_.SMBR.BCNT */
                                    Local0 [0x02] = BDAT /* \_SB_.PCI0.LPCB.EC0_.SMBR.BDAT */
                                }

                                If ((Arg0 == RBLP))
                                {
                                    Local0 [One] = BCNT /* \_SB_.PCI0.LPCB.EC0_.SMBR.BCNT */
                                    Local0 [0x02] = BDAT /* \_SB_.PCI0.LPCB.EC0_.SMBR.BDAT */
                                }

                                If ((Arg0 == RDWD))
                                {
                                    Local0 [One] = 0x02
                                    Local1 = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                                    Local1 <<= 0x08
                                    Local1 |= EDA2 /* \_SB_.PCI0.LPCB.EC0_.EDA2 */
                                    Local0 [0x02] = Local1
                                }

                                If ((Arg0 == RDBT))
                                {
                                    Local0 [One] = One
                                    Local0 [0x02] = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                                }

                                If ((Arg0 == RCBT))
                                {
                                    Local0 [One] = One
                                    Local0 [0x02] = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                                }
                            }

                            Release (MUEC)
                        }

                        Return (Local0)
                    }

                    Method (SMBW, 6, Serialized)
                    {
                        Local0 = Package (0x03)
                            {
                                0x07, 
                                Zero, 
                                Zero
                            }
                        OperationRegion (ECBD, SystemMemory, 0xFEFF0700, 0x80)
                        Field (ECBD, ByteAcc, Lock, Preserve)
                        {
                            Offset (0x07), 
                            BDAT,   256
                        }

                        If ((Arg0 != WRBL))
                        {
                            If ((Arg0 != WRWD))
                            {
                                If ((Arg0 != WRBT))
                                {
                                    If ((Arg0 != SDBT))
                                    {
                                        If ((Arg0 != WRQK))
                                        {
                                            If ((Arg0 != WBLP))
                                            {
                                                Return (Local0)
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            Local6 = 0x7F
                            Local7 = 0x0F
                            While ((Local6 && (Local7 & ESEM)))
                            {
                                Sleep (0x02)
                                Local6--
                            }

                            If ((Arg3 == Zero))
                            {
                                CDT1 = Zero
                            }

                            If ((Arg3 == One))
                            {
                                CDT1 = One
                            }

                            CDT2 = Arg0
                            Local1 = (Arg1 << One)
                            CDT3 = Local1
                            CDT4 = Arg2
                            If ((Arg0 == WRBL))
                            {
                                CDT5 = Arg4
                                BDAT = Arg5
                            }

                            If ((Arg0 == WBLP))
                            {
                                CDT5 = Arg4
                                BDAT = Arg5
                            }

                            If ((Arg0 == WRWD))
                            {
                                CDT5 = Zero
                                CDT6 = Arg5
                            }

                            If ((Arg0 == WRBT))
                            {
                                CDT5 = Zero
                                CDT6 = Arg5
                            }

                            If ((Arg0 == SDBT))
                            {
                                CDT5 = Zero
                                CDT6 = Arg5
                            }

                            CMD1 = 0x9A
                            ESEM = 0x0F
                            Local2 = 0x7F
                            While ((Local2 && CMD1))
                            {
                                Sleep (One)
                                Local2--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 [Zero] = Zero
                            }
                            Else
                            {
                                Local0 [Zero] = UKER /* \_SB_.PCI0.LPCB.EC0_.UKER */
                            }

                            Release (MUEC)
                        }

                        Return (Local0)
                    }

                    Mutex (MUEP, 0x00)
                    Method (RBEP, 1, NotSerialized)
                    {
                        Return (Zero)
                    }

                    Method (WBEP, 2, NotSerialized)
                    {
                        Return (Zero)
                    }

                    Method (SDAC, 2, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CDT2 = Arg1
                            CMD1 = 0x86
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (ECXT, 6, NotSerialized)
                    {
                        Local1 = Package (0x06)
                            {
                                0x10, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg1
                            CDT2 = Arg2
                            CDT3 = Arg3
                            CDT4 = Arg4
                            CDT5 = Arg5
                            CMD1 = Arg0
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local1 [Zero] = Zero
                                Local1 [One] = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                                Local1 [0x02] = EDA2 /* \_SB_.PCI0.LPCB.EC0_.EDA2 */
                                Local1 [0x03] = EDA3 /* \_SB_.PCI0.LPCB.EC0_.EDA3 */
                                Local1 [0x04] = EDA4 /* \_SB_.PCI0.LPCB.EC0_.EDA4 */
                                Local1 [0x05] = EDA5 /* \_SB_.PCI0.LPCB.EC0_.EDA5 */
                            }
                            Else
                            {
                                Local1 [Zero] = 0x10
                            }

                            Release (MUEC)
                        }

                        Return (Local1)
                    }

                    Method (ECX1, 1, Serialized)
                    {
                        Local1 = Package (0x0D)
                            {
                                0x10, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = DerefOf (Arg0 [One])
                            CDT2 = DerefOf (Arg0 [0x02])
                            CDT3 = DerefOf (Arg0 [0x03])
                            CDT4 = DerefOf (Arg0 [0x04])
                            CDT5 = DerefOf (Arg0 [0x05])
                            CDT6 = DerefOf (Arg0 [0x06])
                            CDT7 = DerefOf (Arg0 [0x07])
                            CDT8 = DerefOf (Arg0 [0x08])
                            CDT9 = DerefOf (Arg0 [0x09])
                            CD10 = DerefOf (Arg0 [0x0A])
                            CD11 = DerefOf (Arg0 [0x0B])
                            CD12 = DerefOf (Arg0 [0x0C])
                            CMD1 = DerefOf (Arg0 [Zero])
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local1 [Zero] = Zero
                                Local1 [One] = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                                Local1 [0x02] = EDA2 /* \_SB_.PCI0.LPCB.EC0_.EDA2 */
                                Local1 [0x03] = EDA3 /* \_SB_.PCI0.LPCB.EC0_.EDA3 */
                                Local1 [0x04] = EDA4 /* \_SB_.PCI0.LPCB.EC0_.EDA4 */
                                Local1 [0x05] = EDA5 /* \_SB_.PCI0.LPCB.EC0_.EDA5 */
                                Local1 [0x06] = EDA6 /* \_SB_.PCI0.LPCB.EC0_.EDA6 */
                                Local1 [0x07] = EDA7 /* \_SB_.PCI0.LPCB.EC0_.EDA7 */
                                Local1 [0x08] = EDA8 /* \_SB_.PCI0.LPCB.EC0_.EDA8 */
                                Local1 [0x09] = EDA9 /* \_SB_.PCI0.LPCB.EC0_.EDA9 */
                                Local1 [0x0A] = ED10 /* \_SB_.PCI0.LPCB.EC0_.ED10 */
                                Local1 [0x0B] = ED11 /* \_SB_.PCI0.LPCB.EC0_.ED11 */
                                Local1 [0x0C] = ED12 /* \_SB_.PCI0.LPCB.EC0_.ED12 */
                            }
                            Else
                            {
                                Local1 [Zero] = 0x10
                            }

                            Release (MUEC)
                        }

                        Return (Local1)
                    }

                    Method (ECSB, 6, NotSerialized)
                    {
                        Local1 = Package (0x05)
                            {
                                0x11, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        If ((Arg0 > One))
                        {
                            Return (Local1)
                        }

                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CDT2 = Arg1
                            CDT3 = Arg2
                            CDT4 = Arg3
                            CDT5 = Zero
                            CDT6 = Arg4
                            CDT7 = Arg5
                            CMD1 = 0x9A
                            ESEM = 0x0F
                            Local2 = 0x7F
                            While ((Local2 && CMD1))
                            {
                                Sleep (One)
                                Local2--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local1 [Zero] = Zero
                                Local1 [One] = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                                Local1 [0x02] = EDA2 /* \_SB_.PCI0.LPCB.EC0_.EDA2 */
                                Local1 [0x03] = EDA3 /* \_SB_.PCI0.LPCB.EC0_.EDA3 */
                                Local1 [0x04] = EDA4 /* \_SB_.PCI0.LPCB.EC0_.EDA4 */
                            }
                            Else
                            {
                                Local1 [Zero] = 0x10
                            }

                            Release (MUEC)
                        }

                        Return (Local1)
                    }

                    Method (WEIE, 0, Serialized)
                    {
                        Local0 = 0x4000
                        Local1 = (AEIC & 0x02)
                        While (((Local0 != Zero) && (Local1 == 0x02)))
                        {
                            Local1 = (AEIC & 0x02)
                            Local0--
                        }
                    }

                    Method (WEOF, 0, Serialized)
                    {
                        Local0 = 0x4000
                        Local1 = (AEIC & One)
                        While (((Local0 != Zero) && (Local1 == Zero)))
                        {
                            Local1 = (AEIC & One)
                            Local0--
                        }
                    }

                    Method (RFOV, 1, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CMD1 = 0x83
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (WFOV, 2, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CDT2 = Arg1
                            CMD1 = 0x84
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (RBOV, 1, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CMD1 = 0x85
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = EDA1 /* \_SB_.PCI0.LPCB.EC0_.EDA1 */
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (WBOV, 2, Serialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CDT2 = Arg1
                            CMD1 = 0x86
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (PKEN, 1, NotSerialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CMD1 = 0xB1
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (FNLK, 1, NotSerialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CDT1 = Arg0
                            CMD1 = 0xB0
                            ESEM = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (PTHP, 1, NotSerialized)
                    {
                        If ((Acquire (MUEC, 0xFFFF) == Zero))
                        {
                            CreateField (Arg0, Zero, 0x01F0, CDB0)
                            CDTB = CDB0 /* \_SB_.PCI0.LPCB.EC0_.PTHP.CDB0 */
                            CMDB = 0x97
                            ESEB = 0x0F
                            Local0 = 0x7F
                            While ((Local0 && CMD1))
                            {
                                Sleep (One)
                                Local0--
                            }

                            If ((CMD1 == Zero))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Release (MUEC)
                            Return (Local0)
                        }

                        Return (Ones)
                    }

                    Method (ECPH, 0, Serialized)
                    {
                        WRAM (0x0780, Zero)
                    }

                    Method (ACPS, 0, Serialized)
                    {
                        Return ((GPWS () & One))
                    }

                    Method (DCPS, 1, Serialized)
                    {
                        Local0 = GPWS ()
                        If (Arg0)
                        {
                            Local0 &= 0x04
                        }
                        Else
                        {
                            Local0 &= 0x02
                        }

                        If (Local0)
                        {
                            Local0 = One
                        }
                        Else
                        {
                            Local0 = Zero
                        }

                        Return (Local0)
                    }

                    Method (GPWS, 0, Serialized)
                    {
                        Local0 = EPWS /* \_SB_.PCI0.LPCB.EC0_.EPWS */
                        Return (Local0)
                    }

                    Method (BCLE, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            If (ECAV ())
                            {
                                Local1 = EB1S /* \_SB_.PCI0.LPCB.EC0_.EB1S */
                                Local1 &= 0xFFFF
                                If ((Local1 != 0xFFFF))
                                {
                                    Local1 &= 0x16
                                    If ((Local1 == 0x04))
                                    {
                                        Local0 = Zero
                                    }
                                    ElseIf ((Local1 == 0x02))
                                    {
                                        Local0 = One
                                    }
                                    ElseIf ((Local1 == 0x10))
                                    {
                                        Local0 = One
                                    }
                                }

                                Local0 = Ones
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Return (Local0)
                        }
                        Else
                        {
                            If (ECAV ())
                            {
                                Local1 = EB0S /* \_SB_.PCI0.LPCB.EC0_.EB0S */
                                Local1 &= 0xFFFF
                                If ((Local1 != 0xFFFF))
                                {
                                    Local1 &= 0x56
                                    If ((Local1 == 0x04))
                                    {
                                        Local0 = Zero
                                    }
                                    ElseIf ((Local1 == 0x02))
                                    {
                                        Local0 = One
                                    }
                                    ElseIf ((Local1 == 0x10))
                                    {
                                        Local0 = One
                                    }
                                    ElseIf ((Local1 == 0x40))
                                    {
                                        Local0 = One
                                    }
                                }

                                Local0 = Ones
                            }
                            Else
                            {
                                Local0 = Ones
                            }

                            Return (Local0)
                        }
                    }

                    Mutex (GC6M, 0x00)
                    Method (ECNV, 1, NotSerialized)
                    {
                        Acquire (GC6M, 0xFFFF)
                        If ((Arg0 == Zero))
                        {
                            Local0 = RRAM (0x07FD)
                            Local0 &= 0xFC
                            Local0 |= One
                            WRAM (0x07FD, Local0)
                            SGTH (Zero)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = RRAM (0x07FD)
                            Local0 &= 0xFC
                            Local0 |= 0x02
                            WRAM (0x07FD, Local0)
                            SGTH (One)
                        }

                        Release (GC6M)
                    }

                    Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xA0
                        ^^^^VALZ.ISFT = One
                        If (ACPS ())
                        {
                            ACPF = One
                            PWRS = One
                            Local0 = 0x58
                        }
                        Else
                        {
                            ACPF = Zero
                            PWRS = Zero
                            Local0 = 0x57
                        }

                        PNOT ()
                        If ((OSTB < 0x40)){}
                        Notify (AC0, 0x80) // Status Change
                        If (ATKP){}
                        Sleep (0x64)
                        Sleep (0x0A)
                        NBAT (0x80)
                        TTPH ()
                        ECPH ()
                    }

                    Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xA1
                        ^^^^VALZ.ISFT = One
                        DCPF = DCPS (Zero)
                        If (DCPF)
                        {
                            Sleep (0x07D0)
                        }

                        Notify (BAT0, 0x80) // Status Change
                        Notify (BAT0, 0x81) // Information Change
                        ^^^^VALZ.GBIF ()
                        ^^^^VALZ.GSMB ()
                        TTPH ()
                        ECPH ()
                    }

                    Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xA3
                        If (BATP (Zero))
                        {
                            Local0 = BCLE (Zero)
                            If ((Local0 == Zero))
                            {
                                Notify (BAT0, 0x80) // Status Change
                            }
                            Else
                            {
                                Notify (BAT0, 0x81) // Information Change
                                Notify (AC0, 0x80) // Status Change
                            }
                        }

                        ECPH ()
                    }

                    Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xA5
                        If (ATKP){}
                        ElseIf (BATP (Zero))
                        {
                            Notify (BAT0, 0x80) // Status Change
                        }

                        ECPH ()
                    }

                    Method (_QB2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xB2
                        ^^^^VALZ.PUTE (0x0401)
                        ECPH ()
                    }

                    Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xB3
                        ECPH ()
                    }

                    Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xB4
                        ECPH ()
                    }

                    Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xB0
                        Local0 = RRAM (0x051C)
                        If ((Local0 & 0x02))
                        {
                            \_TZ.CRTF = One
                        }

                        Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                        Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                        ECPH ()
                    }

                    Name (PSVF, Zero)
                    Method (_QB5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xB5
                        If ((PSVF == Zero))
                        {
                            PSVF = One
                            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                            Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                        }

                        ECPH ()
                    }

                    Method (_QB6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xB6
                        If ((PSVF == One))
                        {
                            PSVF = Zero
                            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                            Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                        }

                        ECPH ()
                    }

                    Method (_QC8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xC8
                        Local0 = GLV2 /* \GLV2 */
                        Local0 |= 0x0100
                        GLV2 = Local0
                        SWMF = 0x21
                        SWSF = 0x24
                        ISMI (0xD5)
                        ECPH ()
                    }

                    Method (_QC9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xC9
                        Local0 = GLV2 /* \GLV2 */
                        Local0 &= 0xFFFFF0FF
                        GLV2 = Local0
                        SWMF = 0x21
                        SWSF = 0x23
                        ISMI (0xD5)
                        ECPH ()
                    }

                    Method (_QCA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xCA
                        CreateField (^^^PEG0.PEGP.TGPC, 0x0A, 0x02, PRGE)
                        If ((ToInteger (PRGE) == Zero))
                        {
                            ^^^PEG0.PEGP.LNKD = One
                            SGTH (Zero)
                        }

                        ^^^PEG0.PEGP.SGPO (HLRS, One)
                        ^^^PEG0.PEGP.SGPO (PWEN, Zero)
                        If ((ToInteger (PRGE) == 0x02))
                        {
                            ^^^PEG0.PEGP.LNKD = One
                            SGTH (Zero)
                        }

                        ECPH ()
                    }

                    Method (_QCB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xCB
                        ECPH ()
                    }

                    Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x68
                        ECPH ()
                    }

                    Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x73
                        ECPH ()
                    }

                    Method (_QD6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD6
                        ^^^^VALZ.PUTE (0x01FF)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_QD7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD7
                        ^^^^VALZ.PUTE (0x0100)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_QD0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD0
                        ^^^^VALZ.PUTE (0x0C91)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD2
                        ^^^^VALZ.PUTE (0x0C9F)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD1
                        ^^^^VALZ.PUTE (0x0C92)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD3
                        ^^^^VALZ.PUTE (0x19B7)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0xD4
                        ^^^^VALZ.PUTE (0x19B6)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x0A
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x2A
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x0B
                        If ((OSTB == 0x60))
                        {
                            If (((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((
                                ^^^^VALZ.HKEV & 0x02) == 0x02)) || ((^^^^VALZ.HKNT & One) == One)))
                            {
                                If ((PCBD & 0x10))
                                {
                                    Notify (^^^GFX0.DD02, 0x87) // Device-Specific
                                }
                                Else
                                {
                                    Notify (^^^PEG0.VGA.LCD, 0x87) // Device-Specific
                                }
                            }
                            Else
                            {
                                ^^^^VALZ.PUTE (0x013C)
                            }
                        }
                        Else
                        {
                            ^^^^VALZ.PUTE (0x013C)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x2B
                        If ((OSTB != 0x60))
                        {
                            If (((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((
                                ^^^^VALZ.HKEV & 0x02) == 0x02)) || ((^^^^VALZ.HKNT & One) == One)))
                            {
                                If ((PCBD & 0x10))
                                {
                                    Notify (^^^GFX0.DD02, 0x87) // Device-Specific
                                }
                                Else
                                {
                                    Notify (^^^PEG0.VGA.LCD, 0x87) // Device-Specific
                                }
                            }
                            Else
                            {
                                ^^^^VALZ.PUTE (0x01BC)
                            }
                        }
                        Else
                        {
                            ^^^^VALZ.PUTE (0x01BC)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x0C
                        If ((OSTB == 0x60))
                        {
                            If (((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((
                                ^^^^VALZ.HKEV & 0x02) == 0x02)) || ((^^^^VALZ.HKNT & One) == One)))
                            {
                                If ((PCBD & 0x10))
                                {
                                    Notify (^^^GFX0.DD02, 0x86) // Device-Specific
                                }
                                Else
                                {
                                    Notify (^^^PEG0.VGA.LCD, 0x86) // Device-Specific
                                }
                            }
                            Else
                            {
                                ^^^^VALZ.PUTE (0x013D)
                            }
                        }
                        Else
                        {
                            ^^^^VALZ.PUTE (0x013D)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q2C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x2C
                        If ((OSTB != 0x60))
                        {
                            If (((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((
                                ^^^^VALZ.HKEV & 0x02) == 0x02)) || ((^^^^VALZ.HKNT & One) == One)))
                            {
                                If ((PCBD & 0x10))
                                {
                                    Notify (^^^GFX0.DD02, 0x86) // Device-Specific
                                }
                                Else
                                {
                                    Notify (^^^PEG0.VGA.LCD, 0x86) // Device-Specific
                                }
                            }
                            Else
                            {
                                ^^^^VALZ.PUTE (0x01BD)
                            }
                        }
                        Else
                        {
                            ^^^^VALZ.PUTE (0x01BD)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x0D
                        ^^^^VALZ.PUTE (0x013E)
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            ECXT (0xB8, 0x05, Zero, Zero, Zero, Zero)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q2D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x2D
                        ^^^^VALZ.PUTE (0x01BE)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x0E
                        ^^^^VALZ.PUTE (0x013F)
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            _Q84 ()
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q2E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x2E
                        ^^^^VALZ.PUTE (0x01BF)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x0F
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q2F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x2F
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x10
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x30
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x11
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x31
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x12
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            ECXT (0xB8, 0x03, Zero, Zero, Zero, Zero)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x32
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x13
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            ECXT (0xB8, 0x04, Zero, Zero, Zero, Zero)
                        }

                        ECPH ()
                        Return (One)
                    }

                    Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x33
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x14
                        ^^^^VALZ.PUTE (0x0157)
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            ECXT (0xB8, Zero, Zero, Zero, Zero, Zero)
                        }

                        ECPH ()
                        Return (One)
                    }

                    Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x34
                        ^^^^VALZ.PUTE (0x01D7)
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x15
                        ^^^^VALZ.PUTE (0x0158)
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            If (((WLDP && WRST) || (BTDP && BRST)))
                            {
                                SGPX (0x39, One, Zero)
                                WRST = Zero
                                SGPX (0x08, One, Zero)
                                BRST = Zero
                                If ((FLED != 0x5A))
                                {
                                    SGPX (0x16, One, Zero)
                                    SPIN (0x08, 0x06, Zero)
                                }
                            }
                            Else
                            {
                                SGPX (0x39, One, One)
                                WRST = One
                                SGPX (0x08, One, One)
                                BRST = One
                                If ((FLED != 0x5A))
                                {
                                    SGPX (0x16, One, One)
                                    SPIN (0x08, 0x06, One)
                                }

                                If (BTSF)
                                {
                                    BTSF = Zero
                                    UPRW = One
                                    UP2D = Zero
                                    UPRW = Zero
                                }
                            }
                        }

                        ECPH ()
                        Return (One)
                    }

                    Method (_Q35, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x35
                        ^^^^VALZ.PUTE (0x01D8)
                        ECPH ()
                        Return (One)
                    }

                    Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x6B
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x8B
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x6C
                        ^^^^VALZ.PUTE (0x0102)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x8C
                        ^^^^VALZ.PUTE (0x0182)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x6D
                        ^^^^VALZ.PUTE (0x0103)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q8D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x8D
                        ^^^^VALZ.PUTE (0x0183)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x69
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q89, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x89
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x6A
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x8A
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x60
                        Notify (VALZ, 0x8E) // Device-Specific
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x80
                        ECPH ()
                    }

                    Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x81
                        If ((WINF == Zero))
                        {
                            If ((RPIN (0x04, 0x06) == Zero))
                            {
                                LDEV = One
                                Notify (VALZ, 0x8F) // Device-Specific
                                ^^^^VALZ.PUTE (0x19B3)
                            }
                            Else
                            {
                                ^^^^VALZ.PUTE (0x19B2)
                            }

                            Notify (LID, 0x80) // Status Change
                        }

                        ECPH ()
                    }

                    Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x82
                        ^^^^HAPS.NTFY ()
                        ECPH ()
                    }

                    Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Local0 = RPIN (0x07, 0x05)
                        If ((Local0 != Zero))
                        {
                            IO80 = 0x83
                            ^^^^HAPS.NTY3 ()
                        }
                        Else
                        {
                            IO80 = 0x03
                            ^^^^HAPS.NTY4 ()
                        }

                        ECPH ()
                    }

                    Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x84
                        If ((((^^^^VALZ.ENFG == Zero) || (^^^^VALZ.OSMD == Zero)) || ((^^^^VALZ.HKEV & 
                            0x02) == 0x02)))
                        {
                            Local0 = RRAM (0x07C7)
                            If ((Local0 && One))
                            {
                                ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                                TPON = One
                            }
                            Else
                            {
                                ECXT (0xB5, One, Zero, Zero, Zero, Zero)
                                TPON = Zero
                            }
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x88
                        If ((RPIN (0x09, 0x07) == Zero))
                        {
                            ^^^^VALZ.LCDS = Zero
                            ^^^^VALZ.PUTE (0x19B1)
                            ^^^^VALZ.PUTE (0x19B3)
                        }
                        Else
                        {
                            ^^^^VALZ.LCDS = One
                            ^^^^VALZ.PUTE (0x19B0)
                            ^^^^VALZ.PUTE (0x19B2)
                        }

                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x6F
                        ^^^^VALZ.PUTE (0x0139)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x8F
                        ^^^^VALZ.PUTE (0x01B9)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x70
                        ^^^^VALZ.PUTE (0x012C)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        IO80 = 0x90
                        ^^^^VALZ.PUTE (0x01AC)
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q00, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ECPH ()
                        Return (Zero)
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q1A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q23, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q36, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q39, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q3A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q3B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q3C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q3D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q42, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q45, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q46, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q47, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q49, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q4A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q4B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q4C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q4D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q4E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q50, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q52, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q53, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q54, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q55, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q56, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q57, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q58, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q59, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q5A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q5B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q5C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q5D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q5E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q5F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q65, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q75, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q7A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q7B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q7C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q7D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q7E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q7F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q91, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q93, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q94, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q95, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q96, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q97, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q98, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q99, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q9A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q9B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q9C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q9D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q9E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_Q9F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QA2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QA4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QA6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QA7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QA8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QA9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QAA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QAB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QAC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QAD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QAE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QAF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QB1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QB7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QB8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QB9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QBA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QBB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QBC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QBD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QBE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QBF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QC7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QCC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QCD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QCE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QCF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QD8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QD9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QDA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QDB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QDC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QDD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QDE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QDF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QE9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QEA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QEB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QEC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QED, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QEE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QEF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QF9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QFA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QFB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QFC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QFD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QFE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Method (_QFF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        _Q00 ()
                    }

                    Name (AACV, Zero)
                    Name (ABCV, Zero)
                    Name (TMLP, Buffer (0x40){})
                    Name (TTAC, 0xFF)
                    Method (TTPH, 0, Serialized)
                    {
                        If ((TTAC == 0xFF))
                        {
                            Local0 = RRAM (0x0523)
                            Local0 &= 0xF8
                            AACV = Local0
                            Local0 = RRAM (0x0524)
                            Local0 &= 0xF8
                            ABCV = Local0
                            TTAC = ACPF /* \ACPF */
                            PCF0 ()
                            Local0 = (SYST & 0x1010)
                            If ((SYST & 0x1010))
                            {
                                PDST ()
                                TF1V ()
                            }
                        }
                        ElseIf (((TTAC != ACPF) || (CMME == One)))
                        {
                            TTAC = ACPF /* \ACPF */
                            PCF0 ()
                        }

                        Sleep (0x01F4)
                        Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                        Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                    }

                    Method (PCF0, 0, NotSerialized)
                    {
                        If (((SYST == One) || (SYST == 0x11)))
                        {
                            If (CMME)
                            {
                                If ((CMMD == Zero))
                                {
                                    P85A ()
                                    TF0A ()
                                }
                                ElseIf ((CMMD == One))
                                {
                                    P85A ()
                                    TF0A ()
                                }
                                Else
                                {
                                    P85D ()
                                    TF0D ()
                                }
                            }
                            ElseIf (ACPF)
                            {
                                P85A ()
                                TF0A ()
                                CMMD = One
                            }
                            Else
                            {
                                P85D ()
                                TF0D ()
                                CMMD = 0x02
                            }
                        }
                        ElseIf (((SYST == 0x02) || (SYST == 0x12)))
                        {
                            If (CMME)
                            {
                                If ((CMMD == Zero))
                                {
                                    P00A ()
                                    TF0A ()
                                }
                                ElseIf ((CMMD == One))
                                {
                                    P00A ()
                                    TF0A ()
                                }
                                Else
                                {
                                    P00D ()
                                    TF0D ()
                                }
                            }
                            ElseIf (ACPF)
                            {
                                P00A ()
                                TF0A ()
                                CMMD = One
                            }
                            Else
                            {
                                P00D ()
                                TF0D ()
                                CMMD = 0x02
                            }
                        }
                        ElseIf (((SYST == 0x0100) || (SYST == 0x1100)))
                        {
                            If (CMME)
                            {
                                If ((CMMD == Zero))
                                {
                                    P90A ()
                                    TF0A ()
                                }
                                ElseIf ((CMMD == One))
                                {
                                    P90A ()
                                    TF0A ()
                                }
                                Else
                                {
                                    P90D ()
                                    TF0D ()
                                }
                            }
                            ElseIf (ACPF)
                            {
                                P90A ()
                                TF0A ()
                                CMMD = One
                            }
                            Else
                            {
                                P90D ()
                                TF0D ()
                                CMMD = 0x02
                            }
                        }
                        ElseIf (((SYST == 0x0200) || (SYST == 0x1200)))
                        {
                            If (CMME)
                            {
                                If ((CMMD == Zero))
                                {
                                    P05A ()
                                    TF0A ()
                                }
                                ElseIf ((CMMD == One))
                                {
                                    P05A ()
                                    TF0A ()
                                }
                                Else
                                {
                                    P05D ()
                                    TF0D ()
                                }
                            }
                            ElseIf (ACPF)
                            {
                                P05A ()
                                TF0A ()
                                CMMD = One
                            }
                            Else
                            {
                                P05D ()
                                TF0D ()
                                CMMD = 0x02
                            }
                        }
                    }

                    Name (S85D, Buffer (0x30)
                    {
                        /* 0000 */  0x54, 0x53, 0x51, 0x53, 0x46, 0x44, 0x6E, 0x3F,  // TSQSFDn?
                        /* 0008 */  0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x82,  // FFFFFFF.
                        /* 0010 */  0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  // ........
                        /* 0018 */  0x8E, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (S85A, Buffer (0x30)
                    {
                        /* 0000 */  0x54, 0x53, 0x51, 0x53, 0x46, 0x44, 0x6E, 0x32,  // TSQSFDn2
                        /* 0008 */  0x3C, 0x41, 0x46, 0x4E, 0x4E, 0x4E, 0x4E, 0x82,  // <AFNNNN.
                        /* 0010 */  0x0F, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B,  // ........
                        /* 0018 */  0x8E, 0xA2, 0xBB, 0xD2, 0xE2, 0xE2, 0xE2, 0xE2,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (S00D, Buffer (0x30)
                    {
                        /* 0000 */  0x63, 0x62, 0x60, 0x62, 0x55, 0x44, 0x6E, 0x3F,  // cb`bUDn?
                        /* 0008 */  0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x82,  // FFFFFFF.
                        /* 0010 */  0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  // ........
                        /* 0018 */  0x8E, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (S00A, Buffer (0x30)
                    {
                        /* 0000 */  0x63, 0x62, 0x60, 0x62, 0x55, 0x44, 0x6E, 0x32,  // cb`bUDn2
                        /* 0008 */  0x3C, 0x41, 0x46, 0x4E, 0x4E, 0x4E, 0x4E, 0x82,  // <AFNNNN.
                        /* 0010 */  0x0F, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B,  // ........
                        /* 0018 */  0x8E, 0xA2, 0xBB, 0xD2, 0xE2, 0xE2, 0xE2, 0xE2,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (I90D, Buffer (0x30)
                    {
                        /* 0000 */  0x59, 0x58, 0x56, 0x58, 0x4B, 0x44, 0x6E, 0x3F,  // YXVXKDn?
                        /* 0008 */  0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x82,  // FFFFFFF.
                        /* 0010 */  0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  // ........
                        /* 0018 */  0x8E, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (I90A, Buffer (0x30)
                    {
                        /* 0000 */  0x59, 0x58, 0x56, 0x58, 0x4B, 0x44, 0x6E, 0x32,  // YXVXKDn2
                        /* 0008 */  0x3C, 0x41, 0x46, 0x4E, 0x4E, 0x4E, 0x4E, 0x82,  // <AFNNNN.
                        /* 0010 */  0x0F, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B,  // ........
                        /* 0018 */  0x8E, 0xA2, 0xBB, 0xD2, 0xE2, 0xE2, 0xE2, 0xE2,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (I05D, Buffer (0x30)
                    {
                        /* 0000 */  0x68, 0x67, 0x65, 0x67, 0x5A, 0x44, 0x6E, 0x3F,  // hgegZDn?
                        /* 0008 */  0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x82,  // FFFFFFF.
                        /* 0010 */  0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  // ........
                        /* 0018 */  0x8E, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (I05A, Buffer (0x30)
                    {
                        /* 0000 */  0x68, 0x67, 0x65, 0x67, 0x5A, 0x44, 0x6E, 0x32,  // hgegZDn2
                        /* 0008 */  0x3C, 0x41, 0x46, 0x4E, 0x4E, 0x4E, 0x4E, 0x82,  // <AFNNNN.
                        /* 0010 */  0x0F, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B,  // ........
                        /* 0018 */  0x8E, 0xA2, 0xBB, 0xD2, 0xE2, 0xE2, 0xE2, 0xE2,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (J05D, Buffer (0x30)
                    {
                        /* 0000 */  0x68, 0x67, 0x65, 0x67, 0x5A, 0x44, 0x6E, 0x3F,  // hgegZDn?
                        /* 0008 */  0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x82,  // FFFFFFF.
                        /* 0010 */  0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  // ........
                        /* 0018 */  0x8E, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (J05A, Buffer (0x30)
                    {
                        /* 0000 */  0x68, 0x67, 0x65, 0x67, 0x5A, 0x44, 0x6E, 0x32,  // hgegZDn2
                        /* 0008 */  0x3C, 0x41, 0x46, 0x4E, 0x4E, 0x4E, 0x4E, 0x82,  // <AFNNNN.
                        /* 0010 */  0x0F, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B,  // ........
                        /* 0018 */  0x8E, 0xA2, 0xBB, 0xD2, 0xE2, 0xE2, 0xE2, 0xE2,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    })
                    Name (AMDG, Buffer (0x2A)
                    {
                        /* 0000 */  0x6E, 0x32, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,  // n2______
                        /* 0008 */  0x5F, 0x5F, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,  // __......
                        /* 0010 */  0x0C, 0x0C, 0x8E, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,  // ........
                        /* 0018 */  0xE2, 0xE2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0028 */  0xFF, 0xFF                                       // ..
                    })
                    Name (F0DC, Buffer (0x10)
                    {
                        /* 0000 */  0x82, 0x03, 0x7A, 0x02, 0x7A, 0x02, 0x7A, 0x02,  // ..z.z.z.
                        /* 0008 */  0x7A, 0x02, 0x7A, 0x02, 0x7A, 0x02, 0x7A, 0x02   // z.z.z.z.
                    })
                    Name (F0AC, Buffer (0x10)
                    {
                        /* 0000 */  0x82, 0x03, 0xE7, 0x02, 0x7A, 0x02, 0x29, 0x02,  // ....z.).
                        /* 0008 */  0xEA, 0x01, 0xEA, 0x01, 0xEA, 0x01, 0xEA, 0x01   // ........
                    })
                    Name (F1VG, Buffer (0x10)
                    {
                        /* 0000 */  0x82, 0x03, 0xEA, 0x01, 0xEA, 0x01, 0xEA, 0x01,  // ........
                        /* 0008 */  0xEA, 0x01, 0xEA, 0x01, 0xEA, 0x01, 0xEA, 0x01   // ........
                    })
                    Method (P85D, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | One)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (S85D [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P85A, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | 0x04)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (S85A [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P00D, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | One)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (S00D [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P00A, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | 0x04)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (S00A [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P90D, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | One)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (I90D [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P90A, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | 0x04)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (I90A [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P05D, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | One)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            If (((PCB2 & 0x03) == Zero))
                            {
                                TMLP [Local1] = DerefOf (J05D [Local0])
                            }
                            Else
                            {
                                TMLP [Local1] = DerefOf (I05D [Local0])
                            }

                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (P05A, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = Zero
                        Local2 = (AACV | 0x04)
                        TMLP [One] = Local2
                        Local0 = Zero
                        Local1 = 0x02
                        While ((Local1 <= 0x31))
                        {
                            If (((PCB2 & 0x03) == Zero))
                            {
                                TMLP [Local1] = DerefOf (J05A [Local0])
                            }
                            Else
                            {
                                TMLP [Local1] = DerefOf (I05A [Local0])
                            }

                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (PDST, 0, Serialized)
                    {
                        CLPB ()
                        Local0 = RRAM (0x0520)
                        Local0 &= 0x7F
                        WRAM (0x0520, Local0)
                        TMLP [Zero] = One
                        Local2 = (ABCV | 0x07)
                        TMLP [One] = Local2
                        Local1 = RRAM (0x0530)
                        TMLP [0x02] = Local1
                        Local1 = RRAM (0x0531)
                        TMLP [0x03] = Local1
                        Local1 = RRAM (0x0532)
                        TMLP [0x04] = Local1
                        Local1 = RRAM (0x0533)
                        TMLP [0x05] = Local1
                        Local1 = RRAM (0x0534)
                        TMLP [0x06] = Local1
                        Local1 = RRAM (0x0535)
                        TMLP [0x07] = Local1
                        Local0 = Zero
                        Local1 = 0x08
                        While ((Local1 <= 0x31))
                        {
                            TMLP [Local1] = DerefOf (AMDG [Local0])
                            Local0++
                            Local1++
                        }

                        Local1 = RRAM (0x053F)
                        TMLP [0x11] = Local1
                        PTHP (TMLP)
                        WRAM (0x0522, Zero)
                        Local0 = 0x0524
                        Local1 = RRAM (Local0)
                        Local1 &= 0x07
                        Local1 |= 0xD8
                        WRAM (Local0, Local1)
                        Local0 = 0x0521
                        Local1 = RRAM (Local0)
                        Local1 &= 0xCF
                        Local1 |= 0x20
                        WRAM (Local0, Local1)
                        WRAM (0x052A, 0x9E)
                        WRAM (0x052D, Zero)
                        WRAM (0x0520, 0x91)
                    }

                    Method (TF0D, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = 0x02
                        Local0 = Zero
                        Local1 = One
                        While ((Local1 <= 0x10))
                        {
                            TMLP [Local1] = DerefOf (F0DC [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (TF0A, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = 0x02
                        Local0 = Zero
                        Local1 = One
                        While ((Local1 <= 0x10))
                        {
                            TMLP [Local1] = DerefOf (F0AC [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (TF1V, 0, Serialized)
                    {
                        CLPB ()
                        TMLP [Zero] = 0x03
                        Local0 = Zero
                        Local1 = One
                        While ((Local1 <= 0x10))
                        {
                            TMLP [Local1] = DerefOf (F1VG [Local0])
                            Local0++
                            Local1++
                        }

                        PTHP (TMLP)
                    }

                    Method (CLPB, 0, NotSerialized)
                    {
                        Local0 = Zero
                        While ((Local0 < 0x40))
                        {
                            TMLP [Local0] = Zero
                            Local0++
                        }
                    }

                    Method (SGTH, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            Local0 = RRAM (0x0520)
                            Local0 &= 0x6C
                            WRAM (0x0520, Local0)
                            Local0 = RRAM (0x0524)
                            Local0 |= 0x80
                            WRAM (0x0524, Local0)
                            Local0 = RRAM (0x0521)
                            Local0 &= 0xCF
                            Local0 |= 0x20
                            WRAM (0x0521, Local0)
                            Local0 = RRAM (0x0520)
                            Local0 |= 0x91
                            WRAM (0x0520, Local0)
                        }
                        Else
                        {
                            Local0 = RRAM (0x0520)
                            Local0 &= 0x6C
                            WRAM (0x0520, Local0)
                            Local0 = RRAM (0x0524)
                            Local0 &= 0x7F
                            WRAM (0x0524, Local0)
                            Local0 = RRAM (0x0521)
                            Local0 &= 0xCF
                            WRAM (0x0521, Local0)
                            Local0 = RRAM (0x0520)
                            Local0 |= 0x80
                            WRAM (0x0520, Local0)
                        }

                        Return (Ones)
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y10)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y10._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x025C,             // Range Minimum
                            0x025C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x54,               // Length
                            )
                        IO (Decode16,
                            0x0458,             // Range Minimum
                            0x0458,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (CWDT)
                {
                    Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0454,             // Range Minimum
                            0x0454,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((WDTE == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0) /* \_SB_.PCI0.LPCB.CWDT.BUF0 */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("TOS1103"))  // _HID: Hardware ID
                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        EisaId ("PNPC030"), 
                        EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((TPDT == One))
                        {
                            Return (0x5011F351)
                        }
                        ElseIf ((TPDT == 0x02))
                        {
                            Return ("MSFT0003")
                        }
                        Else
                        {
                            Return ("MSFT0003")
                        }
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("TOS1150"), 
                        EisaId ("TOS0210"), 
                        EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Scope (\_SB.PCI0)
            {
                Device (AC0)
                {
                    Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                    Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                    {
                        Return (^^LPCB.EC0.ACAP ())
                    }

                    Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                    {
                        PCI0
                    })
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (CHGS, 1, Serialized)
                {
                    Local0 = ^LPCB.EC0.BCHG (Arg0)
                    Return (Local0)
                }

                Name (BSLF, Zero)
                Method (BATS, 1, Serialized)
                {
                    If (Arg0)
                    {
                        BSLF = One
                    }
                    Else
                    {
                        BSLF = Zero
                    }
                }

                Device (BAT0)
                {
                    Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                    {
                        PCI0
                    })
                    Name (LOW2, 0x012C)
                    Name (DVOT, 0x0D)
                    Name (PUNT, One)
                    Name (LFCC, 0x1770)
                    Name (PLFC, 0x1770)
                    Name (NBIF, Package (0x0D)
                    {
                        Zero, 
                        Ones, 
                        Ones, 
                        One, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        "", 
                        "", 
                        "", 
                        ""
                    })
                    Name (PBIF, Package (0x0D)
                    {
                        One, 
                        0x1770, 
                        0x1770, 
                        One, 
                        0x39D0, 
                        0x0258, 
                        0x012C, 
                        0x3C, 
                        0x3C, 
                        "M3N", 
                        "  ", 
                        "LIon", 
                        "TKBSS"
                    })
                    Name (NBIX, Package (0x14)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Ones, 
                        Ones, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        "", 
                        "", 
                        "", 
                        ""
                    })
                    Name (PBIX, Package (0x14)
                    {
                        Zero, 
                        One, 
                        0x7FFFFFFF, 
                        0x7FFFFFFF, 
                        One, 
                        0x7FFFFFFF, 
                        0x7FFFFFFF, 
                        0x7FFFFFFF, 
                        0xFFFFFFFE, 
                        0x00013880, 
                        Ones, 
                        Ones, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        "", 
                        "", 
                        "", 
                        ""
                    })
                    Name (PBST, Package (0x04)
                    {
                        Zero, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (^^LPCB.EC0.BATP (Zero))
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (FBIF, 5, NotSerialized)
                    {
                        PUNT = Arg0
                        Local1 = Arg1
                        Local2 = Arg2
                        If ((PUNT == Zero))
                        {
                            Local1 *= 0x0A
                            Local2 *= 0x0A
                        }

                        PBIF [Zero] = Arg0
                        PBIF [One] = Local1
                        PBIF [0x02] = Local2
                        LFCC = Local2
                        PBIF [0x03] = Arg3
                        PBIF [0x04] = Arg4
                        If ((OSTB < 0x40))
                        {
                            Divide (Local1, 0x64, Local3, Local5)
                        }
                        Else
                        {
                            Divide (Local2, 0x64, Local3, Local5)
                        }

                        Local6 = (Local5 * 0x0A)
                        PBIF [0x05] = Local6
                        Local6 = (Local5 * One)
                        PBIF [0x06] = Local6
                        LOW2 = Local6
                        Divide (Local1, 0x64, Local3, Local7)
                        PBIF [0x07] = Local7
                        PBIF [0x08] = Local7
                    }

                    Method (CBIF, 0, NotSerialized)
                    {
                        If (PUNT)
                        {
                            Local0 = DerefOf (PBIF [0x04])
                            Local0 += 0x01F4
                            Divide (Local0, 0x03E8, Local1, DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBIF [Zero] = Zero
                            PBIF [One] = (DerefOf (PBIF [One]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBIF [0x02] = (DerefOf (PBIF [0x02]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBIF [0x05] = (DerefOf (PBIF [0x05]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBIF [0x06] = (DerefOf (PBIF [0x06]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBIF [0x07] = (DerefOf (PBIF [0x07]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBIF [0x08] = (DerefOf (PBIF [0x08]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                        }
                    }

                    Method (_BIF, 0, Serialized)  // _BIF: Battery Information
                    {
                        If (!^^LPCB.EC0.BATP (Zero))
                        {
                            Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                        }

                        If ((^^LPCB.EC0.GBTT (Zero) == 0xFF))
                        {
                            Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                        }

                        BATS (Zero)
                        PBIF [0x09] = ^^LPCB.EC0.BIF9 ()
                        Local0 = ^^LPCB.EC0.BIF0 ()
                        Local1 = ^^LPCB.EC0.BIF1 ()
                        Local2 = ^^LPCB.EC0.BIF2 ()
                        PLFC = Local2
                        Local3 = ^^LPCB.EC0.BIF3 ()
                        Local4 = ^^LPCB.EC0.BIF4 ()
                        If ((Local0 != Ones))
                        {
                            If ((Local1 != Ones))
                            {
                                If ((Local2 != Ones))
                                {
                                    If ((Local3 != Ones))
                                    {
                                        If ((Local4 != Ones))
                                        {
                                            FBIF (Local0, Local1, Local2, Local3, Local4)
                                            CBIF ()
                                        }
                                    }
                                }
                            }
                        }

                        If ((PUNT == Zero))
                        {
                            Local2 *= 0x0A
                        }

                        LFCC = Local2
                        Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
                    }

                    Name (CRST, Zero)
                    Method (FBST, 4, NotSerialized)
                    {
                        Local1 = (Arg1 & 0xFFFF)
                        Local0 = Zero
                        If (^^LPCB.EC0.ACAP ())
                        {
                            Local0 = One
                        }

                        If (Local0)
                        {
                            If (CHGS (Zero))
                            {
                                Local0 = 0x02
                                CRST = Zero
                            }
                            Else
                            {
                                Local0 = Zero
                                CRST = One
                            }
                        }
                        Else
                        {
                            Local0 = One
                        }

                        Local2 = (Arg0 & 0x0300)
                        If (Local2)
                        {
                            Local2 = (One << 0x02)
                            Local0 |= Local2
                        }

                        If ((Local1 >= 0x8000))
                        {
                            Local1 = (0xFFFF - Local1)
                        }

                        Local2 = Arg2
                        If (((^^^VALZ.PKFG & 0x07) == Zero))
                        {
                            If (((^^LPCB.EC0.RRAM (0x03AA) & One) != One))
                            {
                                If (((Local0 & 0x03) == Zero))
                                {
                                    Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                                }
                            }
                        }

                        If ((PUNT == Zero))
                        {
                            Local1 *= DVOT /* \_SB_.PCI0.BAT0.DVOT */
                            Local2 *= 0x0A
                        }

                        Local3 = (Local0 & 0x02)
                        If (!Local3)
                        {
                            Local3 = (LFCC - Local2)
                            Divide (LFCC, 0xC8, Local4, Local5)
                            If ((Local3 < Local5))
                            {
                                Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                            }

                            If (((^^^VALZ.PKFG & 0x07) == Zero))
                            {
                                If ((CRST == One))
                                {
                                    Divide (LFCC, 0x14, Local4, Local5)
                                    Local4 = (LFCC - Local5)
                                    If ((Local2 > Local4))
                                    {
                                        Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                                    }
                                }
                            }
                        }
                        Else
                        {
                            Divide (LFCC, 0xC8, Local4, Local5)
                            Local4 = (LFCC - Local5)
                            Local4 -= One
                            If ((Local2 > Local4))
                            {
                                Local2 = Local4
                            }
                        }

                        If (!^^LPCB.EC0.ACAP ())
                        {
                            Divide (Local2, 0x0A, Local3, Local4)
                            If ((Local1 < Local4))
                            {
                                Local1 = Local4
                            }
                        }

                        PBST [Zero] = Local0
                        PBST [One] = Local1
                        PBST [0x02] = Local2
                        PBST [0x03] = Arg3
                    }

                    Method (CBST, 0, NotSerialized)
                    {
                        If (PUNT)
                        {
                            PBST [One] = (DerefOf (PBST [One]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                            PBST [0x02] = (DerefOf (PBST [0x02]) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                        }
                    }

                    Method (_BST, 0, Serialized)  // _BST: Battery Status
                    {
                        PBST [Zero] = Zero
                        PBST [One] = Ones
                        PBST [0x02] = Ones
                        PBST [0x03] = Ones
                        If (!^^LPCB.EC0.BATP (Zero))
                        {
                            Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                        }

                        If ((^^LPCB.EC0.GBTT (Zero) == 0xFF))
                        {
                            Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                        }

                        If (MES4)
                        {
                            MES4--
                            Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                        }

                        BATS (Zero)
                        If ((^^LPCB.EC0.BIF2 () != PLFC))
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }

                        Local0 = ^^LPCB.EC0.BSTS ()
                        Local1 = ^^LPCB.EC0.BCRT ()
                        Local2 = ^^LPCB.EC0.BRCP ()
                        Local3 = ^^LPCB.EC0.BVOT ()
                        If ((Local0 != Ones))
                        {
                            If ((Local1 != Ones))
                            {
                                If ((Local2 != Ones))
                                {
                                    If ((Local3 != Ones))
                                    {
                                        FBST (Local0, Local1, Local2, Local3)
                                        CBST ()
                                    }
                                }
                            }
                        }

                        Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                    }
                }
            }
        }
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 3, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        If ((Arg0 == 0x04))
        {
            P80D = ((P80D & Zero) | Arg1)
        }

        If ((Arg2 == Zero)){}
        If ((Arg2 == One))
        {
            P80H = P80D /* \P80D */
        }
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0, Zero)
        SLPS = Arg0
        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0x53, Zero)
            P8XH (0x04, 0x53, One)
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If ((Arg0 == 0x04))
        {
            P8XH (0x04, 0x54, Zero)
            P8XH (0x04, 0x54, One)
        }

        If ((Arg0 == 0x05))
        {
            P8XH (0x04, 0x55, Zero)
            P8XH (0x04, 0x55, One)
        }

        If ((((Arg0 == 0x03) || (Arg0 == 0x04)) || (Arg0 == 0x05)))
        {
            If ((PFLV == FDTP))
            {
                GP27 = One
            }
        }

        \_SB.PCI0.LPCB.EC0.EC0S (Arg0)
        \_SB.PRJS (Arg0)
        \_SB.WMI0.GENS (Arg0)
        \_SB.VALZ.VPTS (Arg0)
        \_TZ.TMSS (Arg0)
    }

    Method (LIDW, 0, NotSerialized)
    {
        LDEV = Zero
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P80D = Zero
        BTSF = One
        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0xE3, Zero)
            P8XH (0x04, 0xE3, One)
            SSMP = 0x70
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }

            If ((OSYS == 0x07D2))
            {
                If ((CFGD & One))
                {
                    If ((\_PR.CPU0._PPC > Zero))
                    {
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                        \_PR.CPU0._PPC += One
                        PNOT ()
                    }
                    Else
                    {
                        \_PR.CPU0._PPC += One
                        PNOT ()
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                    }
                }
            }

            If ((ECON == One)){}
            If ((RP1D == Zero))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((RP2D == Zero))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((RP3D == Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((RP4D == Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((RP5D == Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((RP6D == Zero))
            {
                Notify (\_SB.PCI0.RP06, Zero) // Bus Check
            }

            If ((RP7D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((RP8D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHC.XWAK ()
            \_PR.CPU0.CTLD ()
        }

        If ((Arg0 == 0x04))
        {
            P8XH (0x04, 0xE4, Zero)
            P8XH (0x04, 0xE4, One)
        }

        If ((Arg0 == 0x05))
        {
            P8XH (0x04, 0xE5, Zero)
            P8XH (0x04, 0xE5, One)
        }

        \_SB.PCI0.LPCB.EC0.EC0W (Arg0)
        \_SB.PRJW (Arg0)
        \_SB.WMI0.GENW (Arg0)
        \_SB.VALZ.VWAK (Arg0)
        \_TZ.TMSW (Arg0)
        \_SB.BT.BWAK (Arg0)
        LIDW ()
        APON = Zero
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTP))
        {
            TRP0 = Zero
        }

        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSTB = 0x80
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSTB = 0x50
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSTB = 0x60
                    OSYS = 0x07DC
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP06.PMEX = Zero
            ^RP07.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP06.PMSX = One
            ^RP07.PMSX = One
            ^RP08.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06){}
        Processor (CPU1, 0x02, 0x00000410, 0x06){}
        Processor (CPU2, 0x03, 0x00000410, 0x06){}
        Processor (CPU3, 0x04, 0x00000410, 0x06){}
        Processor (CPU4, 0x05, 0x00000410, 0x06){}
        Processor (CPU5, 0x06, 0x00000410, 0x06){}
        Processor (CPU6, 0x07, 0x00000410, 0x06){}
        Processor (CPU7, 0x08, 0x00000410, 0x06){}
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (MBAR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x9A0), 
            PPL1,   15, 
            PL1E,   1, 
                ,   1, 
            PL1T,   7, 
            Offset (0x9A4), 
            PPL2,   15, 
            PL2E,   1, 
                ,   1, 
            PL2T,   7, 
            Offset (0xF3C), 
            TARN,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TAR1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TAR2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            TAR,    8
        }

        Method (CTCU, 0, NotSerialized)
        {
            PPL1 = PTD2 /* \_SB_.PCI0.PTD2 */
            PL1E = One
            PPL2 = CLC2 (PTD2)
            PL2E = One
            SPPC (One)
            TAR = (TAR2 - One)
            CTCL = 0x02
        }

        Method (CTCN, 0, NotSerialized)
        {
            If ((CTCL == One))
            {
                PPL1 = PTDP /* \_SB_.PCI0.PTDP */
                PL1E = One
                PPL2 = CLC2 (PTDP)
                PL2E = One
                SPPC (OPPC)
                TAR = (TARN - One)
                CTCL = Zero
            }
            ElseIf ((CTCL == 0x02))
            {
                CTCL = Zero
                TAR = (TARN - One)
                NPPC (TARN)
                PPL2 = CLC2 (PTDP)
                PL2E = One
                PPL1 = PTDP /* \_SB_.PCI0.PTDP */
                PL1E = One
            }
        }

        Method (CTCD, 0, NotSerialized)
        {
            If ((CTCL == Zero))
            {
                OPPC = \_PR.CPU0._PPC /* External reference */
            }

            CTCL = One
            TAR = (TAR1 - One)
            NPPC (TAR1)
            PPL2 = CLC2 (PTD1)
            PL2E = One
            PPL1 = PTD1 /* \_SB_.PCI0.PTD1 */
            PL1E = One
        }

        Method (NPPC, 1, NotSerialized)
        {
            Name (TRAT, Zero)
            Name (PRAT, Zero)
            Name (TMPI, Zero)
            TRAT = Arg0
            TMPI = SizeOf (\_PR.CPU0._PSS)
            While ((TMPI != Zero))
            {
                TMPI--
                PRAT = DerefOf (DerefOf (\_PR.CPU0._PSS [TMPI]) [0x04])
                PRAT >>= 0x08
                If ((PRAT >= TRAT))
                {
                    SPPC (TMPI)
                    Break
                }
            }
        }

        Method (SPPC, 1, Serialized)
        {
            \_PR.CPU0._PPC = Arg0
            Switch (TCNT)
            {
                Case (0x08)
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                }
                Case (0x04)
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                }
                Case (0x02)
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                }
                Default
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                }

            }
        }

        Method (CLC2, 1, Serialized)
        {
            Local0 = (PNHM & 0x0FFF0FF0)
            Switch (Local0)
            {
                Case (0x000306C0)
                {
                    Return (((Arg0 * 0x05) / 0x04))
                }
                Case (0x00040650)
                {
                    Return (0xC8)
                }
                Default
                {
                    Return (((Arg0 * 0x05) / 0x04))
                }

            }
        }
    }

    Name (MES4, Zero)
    OperationRegion (TRDP, SystemIO, 0x025C, 0x02)
    Field (TRDP, ByteAcc, NoLock, Preserve)
    {
        AEIC,   8, 
        AEID,   8
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (HCMS, SystemIO, 0x72, 0x02)
    Field (HCMS, ByteAcc, Lock, Preserve)
    {
        HIND,   8, 
        HDAT,   8
    }

    IndexField (HIND, HDAT, ByteAcc, NoLock, Preserve)
    {
        FLED,   8
    }

    Scope (_TZ)
    {
        Name (ATMP, 0x3C)
        Name (LTMP, 0x3C)
        Name (FANS, Zero)
        Method (RTMP, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.PCPT
                If ((Local0 < 0x80))
                {
                    LTMP = Local0
                }
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (RLTM, 0, NotSerialized)
        {
            Return (ATMP) /* \_TZ_.ATMP */
        }

        Method (RCRT, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ECRT
                If ((Local0 < 0x80))
                {
                    TCRT = Local0
                }
            }
        }

        Method (RPSV, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.EPSV
                If ((Local0 < 0x80))
                {
                    PPSV = Local0
                }

                Local0 = \_SB.PCI0.LPCB.EC0.EACT
                TPSV = Local0
            }
        }

        Method (RFAN, 1, NotSerialized)
        {
            If (Arg0)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.F1TS
            }
            Else
            {
                Local0 = \_SB.PCI0.LPCB.EC0.F0TS
            }

            If ((Local0 == Zero))
            {
                Return (Zero)
            }

            Local1 = (0x008C6180 * 0x3C)
            Local0 *= 0x80
            Local0 *= 0x02
            Divide (Local1, Local0, Local3, Local2)
            If ((Local2 > 0x6338))
            {
                Return (0xFF)
            }

            Divide (Local2, 0x64, Local3, Local2)
            Return (Local2)
        }

        Method (RFSE, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (TCHG, 0, NotSerialized)
        {
        }

        Method (THDL, 0, NotSerialized)
        {
        }

        Method (TMSS, 1, NotSerialized)
        {
        }

        Method (TMSW, 1, NotSerialized)
        {
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
    }

    Scope (_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 = (0x0100 - Local0)
                Local0 *= 0x0A
                Local0 = (0x0AAC - Local0)
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (CELC, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Divide (Local0, 0x0A, Local1, Local0)
            Return (Local0)
        }

        Name (CRTF, Zero)
        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                If (CRTF)
                {
                    RCRT ()
                    Return (KELV (TCRT))
                }
                Else
                {
                    Return (KELV (0x7D))
                }
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Return (KELV (Local0))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                If ((CPUN == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                If ((CPUN == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If ((CPUN == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1) /* \TC1_ */
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2) /* \TC2_ */
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                RPSV ()
                If ((PPSV == Zero))
                {
                    Return (KELV (0x69))
                }
                Else
                {
                    Return (KELV (PPSV))
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Arg0
                Notify (THRM, 0x81) // Thermal Trip Point Change
            }
        }
    }

    OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
    Field (GPSC, ByteAcc, NoLock, Preserve)
    {
        SMCM,   8, 
        SMST,   8
    }

    Method (ISMI, 1, Serialized)
    {
        SMCM = Arg0
    }

    Method (ASMI, 1, Serialized)
    {
        ALPR = Arg0
        SMCM = 0xD6
        Return (ALPR) /* \ALPR */
    }

    Method (DBGR, 4, NotSerialized)
    {
        DBR1 = Arg0
        DBR2 = Arg1
        DBR3 = Arg2
        DBR4 = Arg3
        ASMI (0x80)
    }

    Scope (\)
    {
        OperationRegion (GPXX, SystemIO, GPBS, 0x80)
        Field (GPXX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
            GLV0,   32, 
            Offset (0x2C), 
            GP00,   16, 
            Offset (0x38), 
            GLV1,   32, 
            Offset (0x48), 
            GLV2,   32
        }

        Method (RGPL, 2, Serialized)
        {
            Local0 = Arg1
            Local1 = Zero
            While (Local0)
            {
                Local1 <<= One
                Local1 |= One
                Local0--
            }

            If ((Arg0 < 0x20))
            {
                Local1 <<= Arg0
                Local0 = GLV0 /* \GLV0 */
                Local0 &= Local1
                Local0 >>= Arg0
            }
            Else
            {
                If ((Arg0 < 0x40))
                {
                    Local0 = GLV1 /* \GLV1 */
                    Local2 = (Arg0 - 0x20)
                }
                Else
                {
                    Local0 = GLV2 /* \GLV2 */
                    Local2 = (Arg0 - 0x40)
                }

                Local1 <<= Local2
                Local0 &= Local1
                Local0 >>= Local2
            }

            Return (Local0)
        }

        Method (SGPX, 3, Serialized)
        {
            Local0 = Arg1
            Local1 = Zero
            While (Local0)
            {
                Local1 <<= One
                Local1 |= One
                Local0--
            }

            If ((Arg0 < 0x20))
            {
                GLV0 = MKPN (Arg0, GLV0, Arg2, Local1)
            }
            ElseIf ((Arg0 < 0x40))
            {
                Local2 = (Arg0 - 0x20)
                GLV1 = MKPN (Local2, GLV1, Arg2, Local1)
            }
            Else
            {
                Local2 = (Arg0 - 0x40)
                GLV2 = MKPN (Local2, GLV2, Arg2, Local1)
            }
        }

        Method (MKPN, 4, Serialized)
        {
            Local1 = (Arg3 << Arg0)
            Local3 = ~Local1
            Local0 = (Arg1 & Local3)
            Local4 = (Arg2 << Arg0)
            Local0 |= Local4
            Return (Local0)
        }
    }

    OperationRegion (RAMW, SystemMemory, PAMB, 0x1000)
    Field (RAMW, AnyAcc, NoLock, Preserve)
    {
        TRTY,   8, 
        FSFN,   8, 
        FSTA,   16, 
        FADR,   32, 
        FSIZ,   16, 
        ACTD,   8, 
        AVLD,   8, 
        SETD,   8, 
        ACPF,   8, 
        DCPF,   8, 
        DCP2,   8, 
        DCTP,   8, 
        CTPY,   8, 
        SFUN,   8, 
        TPSV,   8, 
        TAC0,   8, 
        TCRT,   8, 
        TDO1,   8, 
        TDO2,   8, 
        PPSV,   8, 
        PAC0,   8, 
        T0HL,   8, 
        T0LL,   8, 
        T0F1,   8, 
        T0F2,   8, 
        T1HL,   8, 
        T1LL,   8, 
        T1F1,   8, 
        T1F2,   8, 
        T2HL,   8, 
        T2LL,   8, 
        T2F1,   8, 
        T2F2,   8, 
        T3HL,   8, 
        T3LL,   8, 
        T3F1,   8, 
        T3F2,   8, 
        T4HL,   8, 
        T4LL,   8, 
        T4F1,   8, 
        T4F2,   8, 
        T5HL,   8, 
        T5LL,   8, 
        T5F1,   8, 
        T5F2,   8, 
        T6HL,   8, 
        T6LL,   8, 
        T6F1,   8, 
        T6F2,   8, 
        T7HL,   8, 
        T7LL,   8, 
        T7F1,   8, 
        T7F2,   8, 
        SLPT,   8, 
        AIBF,   8, 
        IDES,   8, 
        VGAF,   16, 
        C4CP,   8, 
        LUXS,   8, 
        LUXL,   8, 
        LUXH,   8, 
        LUXF,   8, 
        MNAM,   64, 
        DBR1,   32, 
        DBR2,   32, 
        DBR3,   32, 
        DBR4,   32, 
        LCDV,   32, 
        LCDR,   8, 
        PTIM,   8, 
        PTMP,   8, 
        MPEN,   8, 
        QFAN,   8, 
        VBIF,   16, 
        BIPA,   32, 
        RTCW,   16, 
        CPUN,   8, 
        ALPR,   32, 
        CIST,   8, 
        GNBF,   32, 
        CPUP,   16, 
        SLMT,   16, 
        LDES,   8, 
        HDDF,   8, 
        GCDF,   16, 
        PSTN,   16, 
        AB00,   8, 
        AB01,   8, 
        AB02,   8, 
        AB03,   8, 
        AB04,   8, 
        AB05,   8, 
        AB06,   8, 
        AB07,   8, 
        AB08,   8, 
        AB09,   8, 
        AB0A,   8, 
        AB0B,   8, 
        AB0C,   8, 
        AB0D,   8, 
        AB0E,   8, 
        AB0F,   8, 
        AB10,   8, 
        AB11,   8, 
        AB12,   8, 
        AB13,   8, 
        AB14,   8, 
        AB15,   8, 
        AB16,   8, 
        AB17,   8, 
        AB18,   8, 
        AB19,   8, 
        AB1A,   8, 
        AB1B,   8, 
        AB1C,   8, 
        AB1D,   8, 
        AB1E,   8, 
        AB1F,   8, 
        DB00,   8, 
        DB01,   8, 
        DB02,   8, 
        DB03,   8, 
        DB04,   8, 
        DB05,   8, 
        DB06,   8, 
        DB07,   8, 
        DB08,   8, 
        DB09,   8, 
        DB0A,   8, 
        DB0B,   8, 
        DB0C,   8, 
        DB0D,   8, 
        DB0E,   8, 
        DB0F,   8, 
        DB10,   8, 
        DB11,   8, 
        DB12,   8, 
        DB13,   8, 
        DB14,   8, 
        DB15,   8, 
        DB16,   8, 
        DB17,   8, 
        DB18,   8, 
        DB19,   8, 
        DB1A,   8, 
        DB1B,   8, 
        DB1C,   8, 
        DB1D,   8, 
        DB1E,   8, 
        DB1F,   8, 
        OSVR,   32, 
        SGRQ,   32, 
        SGFN,   8, 
        TJMX,   16, 
        RDYB,   8, 
        LDOB,   8, 
        USEM,   8, 
        SVEM,   8, 
        WMIB,   32, 
        WMIS,   8, 
        SSTK,   8, 
        MSRN,   32, 
        MSRH,   32, 
        MSRL,   32, 
        OSTP,   16, 
        HCEC,   8, 
        HLKP,   8, 
        ILLD,   8, 
        CTJT,   8, 
        HDMS,   8, 
        BDVS,   32, 
        W3DP,   8, 
        WRPS,   8, 
        BRPS,   8, 
        WUDP,   8, 
        EXPC,   8, 
        UHDB,   8, 
        FRPN,   16, 
        IKFG,   8, 
        DGON,   8, 
        BCTF,   8, 
        BATP,   8, 
        DPK1,   32, 
        DPK2,   32, 
        DPK3,   32, 
        DPK4,   32, 
        DPK5,   32, 
        DPK6,   32, 
        DPK7,   32, 
        DPK8,   32, 
        DPK9,   32, 
        DPKA,   32, 
        DPKB,   32, 
        DPKC,   32, 
        DPKD,   8, 
        DELK,   32, 
        DKSF,   8, 
        DKST,   16, 
        NVST,   8
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y11)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y15)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y16)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y12)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._LEN, TBLN)  // _LEN: Length
                If ((TBAB == Zero))
                {
                    TBLN = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, MBR0)  // _BAS: Base Address
                MBR0 = (MHBR << 0x0F)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, EBR0)  // _BAS: Base Address
                EBR0 = (EPBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (PXBR << 0x1A)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DID1 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD01, Arg0)
        }

        If (((DID2 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD02, Arg0)
        }

        If (((DID3 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD03, Arg0)
        }

        If (((DID4 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD04, Arg0)
        }

        If (((DID5 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD05, Arg0)
        }

        If (((DID6 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD06, Arg0)
        }

        If (((DID7 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD07, Arg0)
        }

        If (((DID8 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD08, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((RP1D == Zero))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((RP2D == Zero))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((RP3D == Zero))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((RP4D == Zero))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((RP5D == Zero))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If ((RP6D == Zero))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If ((RP7D == Zero))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If ((RP8D == Zero))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GLAN, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC, 0x02) // Device Wake
            If ((\_SB.PCI0.XHC.PMES && \_SB.PCI0.XHC.PMES))
            {
                \_SB.PCI0.XHC.PMES = One
            }
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                P8XH (One, One, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                P8XH (One, 0x02, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                P8XH (One, 0x03, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                P8XH (One, 0x04, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
            {
                P8XH (One, 0x05, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((RP7D == Zero) && \_SB.PCI0.RP07.HPSX))
            {
                P8XH (One, 0x07, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.HPSX))
            {
                P8XH (One, 0x08, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }
        }

        Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            IO80 = 0x11
            Local1 = GLV0 /* \GLV0 */
            Local1 &= 0x02
            If (Local1)
            {
                GPE1 = Zero
                GPS1 = One
                Local0 = GLV2 /* \GLV2 */
                Local0 |= 0x80
                GLV2 = Local0
                Local0 = GP00 /* \GP00 */
                Local0 |= 0x02
                GP00 = Local0
            }
            Else
            {
                GPE1 = Zero
                GPS1 = One
                Local0 = GLV2 /* \GLV2 */
                Local0 &= 0xFFFFFF7F
                GLV2 = Local0
                Local0 = GP00 /* \GP00 */
                Local0 &= 0xFFFFFFFD
                GP00 = Local0
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_SB.PCI0.IEIT.EITV))
            {
                \_SB.PCI0.IEIT.EITV ()
            }

            If (CondRefOf (\TNOT))
            {
                TNOT ()
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x1000, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
                ,   14, 
            PEWS,   1, 
            Offset (0x28), 
            Offset (0x2A), 
                ,   1, 
            GPE1,   1, 
                ,   1, 
            GPE3,   1, 
            Offset (0x3C), 
            PMEN,   1, 
            UPRW,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
            Offset (0x22), 
                ,   1, 
            GPS1,   1, 
                ,   1, 
            GPS3,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            GL02,   8, 
            GP24,   1, 
                ,   2, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
            GL04,   8, 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x359C), 
            UP0D,   1, 
            UP1D,   1, 
            UP2D,   1, 
            UP3D,   1, 
            UP4D,   1, 
            UP5D,   1, 
            UP6D,   1, 
            UP7D,   1, 
            UP8D,   1, 
            UP9D,   1, 
            UPAD,   1, 
            UPBD,   1, 
            UPCD,   1, 
            UPDD,   1, 
                ,   1, 
            Offset (0x359E)
        }

        Method (GPI0, 4, NotSerialized)
        {
            If (((Arg0 | Arg1) == Zero))
            {
                Return (Ones)
            }
            ElseIf (((Arg0 == Zero) & (Arg1 == One)))
            {
                Return (0x0384)
            }

            Return ((0x1E * (0x09 - (Arg2 + Arg3))))
        }

        Method (GDMA, 2, NotSerialized)
        {
            If ((Arg0 == One))
            {
                If ((Arg1 == One))
                {
                    Return (0x0F)
                }
            }

            Return (Ones)
        }

        Method (SFLG, 5, NotSerialized)
        {
            Local0 = Zero
            Local0 |= Arg1
            Local0 |= (Arg0 << One)
            Local0 |= (Arg2 << 0x03)
            Local0 |= (Arg3 << 0x02)
            Local0 |= (Arg4 << 0x04)
            Return (Local0)
        }

        Method (SPIO, 3, NotSerialized)
        {
            Name (PBUF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateByteField (PBUF, Zero, RCT)
            CreateByteField (PBUF, One, ISP)
            CreateByteField (PBUF, 0x02, FAST)
            CreateByteField (PBUF, 0x03, DMAE)
            CreateByteField (PBUF, 0x04, PIOT)
            If (((Arg0 == Zero) || (Arg0 == Ones)))
            {
                Return (PBUF) /* \SPIO.PBUF */
            }

            If ((Arg0 > 0xF0))
            {
                DMAE = One
                PIOT = Zero
            }
            Else
            {
                FAST = One
                If ((Arg1 & 0x02))
                {
                    If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                    {
                        RCT = 0x03
                        ISP = 0x02
                        PIOT = 0x04
                        Return (PBUF) /* \SPIO.PBUF */
                    }

                    If (((Arg0 <= 0xB4) & (Arg2 & One)))
                    {
                        RCT = One
                        ISP = 0x02
                        PIOT = 0x03
                        Return (PBUF) /* \SPIO.PBUF */
                    }
                    Else
                    {
                        RCT = Zero
                        ISP = One
                        PIOT = 0x02
                    }
                }
            }

            Return (PBUF) /* \SPIO.PBUF */
        }

        Method (SDMA, 3, NotSerialized)
        {
            Name (PBUF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (PBUF, Zero, PCT)
            CreateByteField (PBUF, One, PCB)
            CreateByteField (PBUF, 0x02, UDMT)
            CreateByteField (PBUF, 0x03, UDME)
            CreateByteField (PBUF, 0x04, DMAT)
            If (((Arg0 == Zero) || (Arg0 == Ones)))
            {
                Return (PBUF) /* \SDMA.PBUF */
            }

            If ((Arg0 <= 0x78))
            {
                If ((Arg1 & 0x04))
                {
                    UDME = One
                    If (((Arg0 <= 0x0F) & (Arg2 & 0x40)))
                    {
                        UDMT = One
                        PCB = One
                        PCT = One
                        DMAT = 0x06
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x14) & (Arg2 & 0x20)))
                    {
                        UDMT = One
                        PCB = One
                        PCT = One
                        DMAT = 0x05
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                    {
                        PCB = One
                        PCT = 0x02
                        DMAT = 0x04
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                    {
                        PCB = One
                        PCT = One
                        DMAT = 0x03
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                    {
                        PCT = 0x02
                        DMAT = 0x02
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                    {
                        PCT = One
                        DMAT = One
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x78) & (Arg2 & One)))
                    {
                        DMAT = Zero
                    }
                }
            }

            Return (PBUF) /* \SDMA.PBUF */
        }

        Method (SETT, 3, Serialized)
        {
            If ((Arg1 & 0x02))
            {
                If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                {
                    Return (0x0B)
                }

                If (((Arg0 <= 0xB4) && (Arg2 & One)))
                {
                    Return (0x09)
                }
            }

            Return (0x04)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GLAN)
        {
            Name (_ADR, 0x00190000)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (WOLE)
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        0x04
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        Zero
                    })
                }
            }
        }

        Device (EHC1)
        {
            Name (_ADR, 0x001D0000)  // _ADR: Address
            OperationRegion (U20P, PCI_Config, Zero, 0x0100)
            Field (U20P, ByteAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MBAS,   32, 
                Offset (0x62), 
                    ,   1, 
                PWUC,   8
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    PWUC = Ones
                }
                Else
                {
                    PWUC = Zero
                }

                Local0 = MBAS /* \_SB_.PCI0.EHC1.MBAS */
                If ((Local0 != Ones))
                {
                    Local0 &= 0xFFFFFFF0
                    OperationRegion (MMIO, SystemMemory, Local0, 0x0100)
                    Field (MMIO, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xF0), 
                        RP0S,   8, 
                        RP1S,   8, 
                        RP2S,   8, 
                        RP3S,   8, 
                        RP4S,   8, 
                        RP5S,   8, 
                        RP6S,   8, 
                        RP7S,   8
                    }

                    UPST &= 0xFF00
                    If ((RP0S & 0x10))
                    {
                        UPST |= One
                    }

                    If ((RP1S & 0x10))
                    {
                        UPST |= 0x02
                    }

                    If ((RP2S & 0x10))
                    {
                        UPST |= 0x04
                    }

                    If ((RP3S & 0x10))
                    {
                        UPST |= 0x08
                    }

                    If ((RP4S & 0x10))
                    {
                        UPST |= 0x10
                    }

                    If ((RP5S & 0x10))
                    {
                        UPST |= 0x20
                    }

                    If ((RP6S & 0x10))
                    {
                        UPST |= 0x40
                    }

                    If ((RP7S & 0x10))
                    {
                        UPST |= 0x80
                    }
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA) /* \_SB_.PCI0.EHC1.HUBN.PR01._UPC.UPCA */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01._PLD.PLDP */
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD.PLDP */
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD.PLDP */
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE0, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDP */
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDP */
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD.PLDP */
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD.PLDP */
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR17)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._PLD.PLDP */
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR18)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._PLD.PLDP */
                        }
                    }
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x03
            })
        }

        Device (EHC2)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            OperationRegion (U20P, PCI_Config, Zero, 0x0100)
            Field (U20P, ByteAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MBAS,   32, 
                Offset (0x62), 
                    ,   1, 
                PWUC,   6
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    PWUC = Ones
                }
                Else
                {
                    PWUC = Zero
                }

                Local0 = MBAS /* \_SB_.PCI0.EHC2.MBAS */
                If ((Local0 != Ones))
                {
                    Local0 &= 0xFFFFFFF0
                    OperationRegion (MMIO, SystemMemory, Local0, 0x0100)
                    Field (MMIO, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xF0), 
                        RP8S,   8, 
                        RP9S,   8, 
                        RPAS,   8, 
                        RPBS,   8, 
                        RPCS,   8, 
                        RPDS,   8
                    }

                    UPST &= 0xFF
                    If ((RP8S & 0x10))
                    {
                        UPST |= 0x0100
                    }

                    If ((RP9S & 0x10))
                    {
                        UPST |= 0x0200
                    }

                    If ((RPAS & 0x10))
                    {
                        UPST |= 0x0400
                    }

                    If ((RPBS & 0x10))
                    {
                        UPST |= 0x0800
                    }

                    If ((RPCS & 0x10))
                    {
                        UPST |= 0x1000
                    }

                    If ((RPDS & 0x10))
                    {
                        UPST |= 0x2000
                    }
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA) /* \_SB_.PCI0.EHC2.HUBN.PR01._UPC.UPCA */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01._PLD.PLDP */
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDP */
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDP */
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE0, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDP */
                        }

                        Device (WCAM)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "FRONT",
                                    PLD_VerticalPosition   = "",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x0,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xE0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDP */
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDP */
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDP */
                        }
                    }
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x03
            })
        }

        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, DWordAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MBAS,   32, 
                Offset (0x74), 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xD0), 
                PR2,    32, 
                PR2M,   32, 
                PR3,    32, 
                PR3M,   32
            }

            Name (XRST, Zero)
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                Local0 = MBAS /* \_SB_.PCI0.XHC_.MBAS */
                If ((Local0 != Ones))
                {
                    Local0 &= 0xFFFFFFF0
                    Local0 += 0x0480
                    OperationRegion (MMIO, SystemMemory, Local0, 0x0100)
                    Field (MMIO, ByteAcc, NoLock, Preserve)
                    {
                        RP0S,   8, 
                        Offset (0x10), 
                        RP1S,   8, 
                        Offset (0x20), 
                        RP2S,   8, 
                        Offset (0x30), 
                        RP3S,   8, 
                        Offset (0x40), 
                        RP4S,   8, 
                        Offset (0x50), 
                        RP5S,   8, 
                        Offset (0x60), 
                        RP6S,   8, 
                        Offset (0x70), 
                        RP7S,   8
                    }

                    UPST &= 0xFFF0
                    If ((RP0S & One))
                    {
                        UPST |= One
                    }

                    If ((RP1S & One))
                    {
                        UPST |= 0x02
                    }

                    If ((RP2S & One))
                    {
                        UPST |= 0x04
                    }

                    If ((RP3S & One))
                    {
                        UPST |= 0x08
                    }

                    If ((RP4S & One))
                    {
                        UPST |= One
                    }

                    If ((RP5S & One))
                    {
                        UPST |= 0x02
                    }

                    If ((RP6S & One))
                    {
                        UPST |= 0x04
                    }

                    If ((RP7S & One))
                    {
                        UPST |= 0x08
                    }
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (POSC, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, CDW1)
                CreateDWordField (Arg2, 0x08, CDW3)
                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((XHCI == Zero))
                {
                    CDW1 |= 0x02
                }

                If (!(CDW1 & One))
                {
                    If ((CDW3 & One))
                    {
                        ESEL ()
                    }
                    Else
                    {
                        XSEL ()
                    }
                }

                Return (Arg2)
            }

            Method (XHDD, 0, Serialized)
            {
                PR3 &= 0xFFFFFFF0
                PR2 &= 0xFFFFFFF0
                Local0 = MBAS /* \_SB_.PCI0.XHC_.MBAS */
                If ((Local0 != Ones))
                {
                    Local0 &= 0xFFFFFFF0
                    Local0 += 0x0480
                    OperationRegion (MMIO, SystemMemory, Local0, 0x0100)
                    Field (MMIO, ByteAcc, NoLock, Preserve)
                    {
                        RP0S,   32, 
                        Offset (0x10), 
                        RP1S,   32, 
                        Offset (0x20), 
                        RP2S,   32, 
                        Offset (0x30), 
                        RP3S,   32, 
                        Offset (0x40), 
                        RP4S,   32, 
                        Offset (0x50), 
                        RP5S,   32, 
                        Offset (0x60), 
                        RP6S,   32, 
                        Offset (0x70), 
                        RP7S,   32
                    }

                    RP0S = 0x02A0
                    RP1S = 0x02A0
                    RP2S = 0x02A0
                    RP3S = 0x02A0
                    RP4S = 0x02A0
                    RP5S = 0x02A0
                    RP6S = 0x02A0
                    RP7S = 0x02A0
                }

                XUSB = Zero
                Sleep (0x64)
            }

            Method (XSEL, 0, Serialized)
            {
                If (((XHCI == 0x02) || (XHCI == 0x03)))
                {
                    XUSB = One
                    XRST = One
                    Local0 = Zero
                    Local0 = (PR3 & 0xFFFFFFF0)
                    Local0 |= XHPM /* \XHPM */
                    PR3 = (Local0 & PR3M) /* \_SB_.PCI0.XHC_.PR3M */
                    Local0 = Zero
                    Local0 = (PR2 & 0xFFFFFFF0)
                    Local0 |= XHPM /* \XHPM */
                    PR2 = (Local0 & PR2M) /* \_SB_.PCI0.XHC_.PR2M */
                }
            }

            Method (ESEL, 0, Serialized)
            {
                If (((XHCI == 0x02) || (XHCI == 0x03)))
                {
                    PR3 &= 0xFFFFFFF0
                    PR2 &= 0xFFFFFFF0
                    XUSB = Zero
                    XRST = Zero
                }
            }

            Method (XWAK, 0, Serialized)
            {
                If (((XUSB == One) || (XRST == One)))
                {
                    XSEL ()
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (HSP1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & One))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP1._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & One))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP1._PLD.PLDP */
                    }
                }

                Device (HSP2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & 0x02))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP2._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & 0x02))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP2._PLD.PLDP */
                    }
                }

                Device (HSP3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & 0x04))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP3._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & 0x04))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP3._PLD.PLDP */
                    }
                }

                Device (HSP4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & 0x08))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP4._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & 0x08))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP4._PLD.PLDP */
                    }
                }

                Device (SSP1)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & One))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP1._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & One))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP1._PLD.PLDP */
                    }
                }

                Device (SSP2)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x02))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP2._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x02))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP2._PLD.PLDP */
                    }
                }

                Device (SSP3)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x04))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP3._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x04))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP3._PLD.PLDP */
                    }
                }

                Device (SSP4)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x08))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x08))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._PLD.PLDP */
                    }
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x03
            })
        }

        Device (HDEF)
        {
            Name (_ADR, 0x001B0000)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                DCKA,   1, 
                Offset (0x01), 
                DCKM,   1, 
                    ,   6, 
                DCKS,   1, 
                Offset (0x08), 
                    ,   15, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (WKMD)
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        0x03
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        Zero
                    })
                }
            }
        }

        Device (DOCK)
        {
            Name (_HID, "ABCD0000")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C15") /* Docking Station */)  // _CID: Compatible ID
            Name (_UID, "SADDLESTRING")  // _UID: Unique ID
            Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
            {
                P8XH (Zero, 0xED, Zero)
                If ((ECON == One)){}
                Return (One)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ECON == Zero))
                {
                    Return (Zero)
                }

                If (DSTS)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DCK, 1, NotSerialized)  // _DCK: Dock Present
            {
                P8XH (Zero, 0xD3, Zero)
                If (Arg0)
                {
                    Return (One)
                }
                Else
                {
                    DSTS = Zero
                    If ((ECON == One)){}
                    Return (One)
                }
            }

            Name (_EDL, Package (0x05)  // _EDL: Eject Device List
            {
                ^RP07.PXSX, 
                ^RP08.PXSX, 
                EHC1, 
                SAT0, 
                HDEF
            })
        }

        Device (RP01)
        {
            Name (_ADR, 0x001C0000)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOLC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    Zero
                })
            }

            Name (PR05, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR05, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05) /* \_SB_.PCI0.RP01.AR05 */
                }

                Return (PR05) /* \_SB_.PCI0.RP01.PR05 */
            }
        }

        Device (RP02)
        {
            Name (_ADR, 0x001C0001)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOWC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((WLVN == 0x8086) && (PCBD & 0x80)))
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x03
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        Zero
                    })
                }
            }

            Name (PR06, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
            Name (AR06, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06) /* \_SB_.PCI0.RP02.AR06 */
                }

                Return (PR06) /* \_SB_.PCI0.RP02.PR06 */
            }
        }

        Device (RP03)
        {
            Name (_ADR, 0x001C0002)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOLC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    0x04
                })
            }

            Name (PR07, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR07, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07) /* \_SB_.PCI0.RP03.AR07 */
                }

                Return (PR07) /* \_SB_.PCI0.RP03.PR07 */
            }
        }

        Device (RP04)
        {
            Name (_ADR, 0x001C0003)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (EUSB)
                    {
                        OperationRegion (MMIO, SystemMemory, USBA, 0x40)
                        Field (MMIO, ByteAcc, NoLock, Preserve)
                        {
                            U2P0,   8, 
                            Offset (0x10), 
                            U2P1,   8, 
                            Offset (0x20), 
                            U3P0,   8, 
                            Offset (0x30), 
                            U3P1,   8
                        }

                        FPST &= 0xFF00
                        Local0 = (SYST & 0x1010)
                        If (Local0)
                        {
                            If ((U2P0 & One))
                            {
                                FPST |= 0x04
                            }

                            If ((U2P1 & One))
                            {
                                FPST |= 0x02
                            }

                            If ((U3P0 & One))
                            {
                                FPST |= 0x04
                            }

                            If ((U3P1 & One))
                            {
                                FPST |= 0x02
                            }
                        }
                        Else
                        {
                            If ((U2P0 & One))
                            {
                                FPST |= 0x02
                            }

                            If ((U2P1 & One))
                            {
                                FPST |= 0x04
                            }

                            If ((U3P0 & One))
                            {
                                FPST |= 0x02
                            }

                            If ((U3P1 & One))
                            {
                                FPST |= 0x04
                            }
                        }
                    }
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    0x03
                })
            }

            Name (PR08, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }
            })
            Name (AR08, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR08) /* \_SB_.PCI0.RP04.AR08 */
                }

                Return (PR08) /* \_SB_.PCI0.RP04.PR08 */
            }
        }

        Device (RP05)
        {
            Name (_ADR, 0x001C0004)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOLC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    Zero
                })
            }

            Name (PR09, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR09, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR09) /* \_SB_.PCI0.RP05.AR09 */
                }

                Return (PR09) /* \_SB_.PCI0.RP05.PR09 */
            }
        }

        Device (RP06)
        {
            Name (_ADR, 0x001C0005)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOLC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    0x04
                })
            }

            Name (PR0C, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
            Name (AR0C, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0C) /* \_SB_.PCI0.RP06.AR0C */
                }

                Return (PR0C) /* \_SB_.PCI0.RP06.PR0C */
            }
        }

        Device (RP07)
        {
            Name (_ADR, 0x001C0006)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOLC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    Zero
                })
            }

            Name (PR0D, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKF, 
                    Zero
                }
            })
            Name (AR0D, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x15
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0D) /* \_SB_.PCI0.RP07.AR0D */
                }

                Return (PR0D) /* \_SB_.PCI0.RP07.PR0D */
            }
        }

        Device (RP08)
        {
            Name (_ADR, 0x001C0007)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    WOLC = Arg0
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x09, 
                    Zero
                })
            }

            Name (PR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }
            })
            Name (AR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0E) /* \_SB_.PCI0.RP08.AR0E */
                }

                Return (PR0E) /* \_SB_.PCI0.RP08.PR0E */
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (Ones)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000){})
    OperationRegion (MDBG, SystemMemory, 0xAAFA8018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Name (BUFS, Buffer (Local0){})
        BUFS = Arg0
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
            Local0--
        }
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Scope (_SB.PCI0.SAT0)
    {
        Device (PRT2)
        {
            Name (_ADR, 0x0002FFFF)  // _ADR: Address
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x1,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x0,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "UNKNOWN",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "UNKNOWN",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x0,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0)

            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    If ((PCBD & 0x20))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Case (0x02)
                        {
                            GPE3 = Zero
                            If (((GL00 & 0x08) == 0x08))
                            {
                                GIV0 |= 0x08
                            }
                            Else
                            {
                                GIV0 &= 0xF7
                            }

                            GL08 &= 0xEF
                            Sleep (0xC8)
                            GPS3 = One
                            GPE3 = One
                            Return (One)
                        }
                        Case (0x03)
                        {
                            GPE3 = Zero
                            GPS3 = One
                            GL08 |= 0x10
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((PFLV == FDTP))
            {
                Return (Zero)
            }

            GPE3 = Zero
            GL08 |= 0x10
            If ((\_SB.VALZ.ODPM == 0x80))
            {
                Notify (\_SB.VALZ, 0x8C) // Device-Specific
            }

            Notify (\_SB.PCI0.SAT0, 0x82) // Device-Specific Change
            Return (Zero)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PEG0)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x09, 
                0x04
            })
            Name (PR0A, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR0A, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0A) /* \_SB_.PCI0.PEG0.AR0A */
                }

                Return (PR0A) /* \_SB_.PCI0.PEG0.PR0A */
            }

            Device (PEGP)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (DGFX, PCI_Config, Zero, 0xF0)
                Field (DGFX, DWordAcc, Lock, Preserve)
                {
                    Offset (0x0B), 
                    LNKV,   8
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
            }
        }

        Device (PEG1)
        {
            Name (_ADR, 0x00010001)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x09, 
                0x04
            })
            Name (PR02, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
            Name (AR02, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR02) /* \_SB_.PCI0.PEG1.AR02 */
                }

                Return (PR02) /* \_SB_.PCI0.PEG1.PR02 */
            }
        }

        Device (PEG2)
        {
            Name (_ADR, 0x00010002)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x09, 
                0x04
            })
            Name (PR03, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR03, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR03) /* \_SB_.PCI0.PEG2.AR03 */
                }

                Return (PR03) /* \_SB_.PCI0.PEG2.PR03 */
            }
        }

        Device (PEG3)
        {
            Name (_ADR, 0x00060000)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x09, 
                0x04
            })
            Name (PR0B, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }
            })
            Name (AR0B, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0B) /* \_SB_.PCI0.PEG3.AR0B */
                }

                Return (PR0B) /* \_SB_.PCI0.PEG3.PR0B */
            }
        }

        Device (B0D4)
        {
            Name (_ADR, 0x00040000)  // _ADR: Address
        }

        Device (GFX0)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (GDGS, Zero)
            Name (CUBL, 0x64)
            Name (BLB1, Package (0x0A)
            {
                0x64, 
                0x19, 
                0x09, 
                0x0D, 
                0x11, 
                0x19, 
                0x28, 
                0x37, 
                0x48, 
                0x64
            })
            Name (MCBL, Package (0x0A)
            {
                0x64, 
                0x28, 
                0x0A, 
                0x14, 
                0x1E, 
                0x28, 
                0x37, 
                0x46, 
                0x55, 
                0x64
            })
            Name (MCB8, Package (0x67)
            {
                0x64, 
                0x28, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x04, 
                0x05, 
                0x06, 
                0x07, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3C, 
                0x3D, 
                0x3E, 
                0x3F, 
                0x40, 
                0x41, 
                0x42, 
                0x43, 
                0x44, 
                0x45, 
                0x46, 
                0x47, 
                0x48, 
                0x49, 
                0x4A, 
                0x4B, 
                0x4C, 
                0x4D, 
                0x4E, 
                0x4F, 
                0x50, 
                0x51, 
                0x52, 
                0x53, 
                0x54, 
                0x55, 
                0x56, 
                0x57, 
                0x58, 
                0x59, 
                0x5A, 
                0x5B, 
                0x5C, 
                0x5D, 
                0x5E, 
                0x5F, 
                0x60, 
                0x61, 
                0x62, 
                0x63, 
                0x64
            })
            Name (SPDF, Package (0x0A)
            {
                0x64, 
                0x19, 
                Zero, 
                0x0D, 
                0x1B, 
                0x28, 
                0x37, 
                0x46, 
                0x55, 
                0x64
            })
            Name (BL01, Package (0x0A)
            {
                0x64, 
                0x16, 
                0x07, 
                0x0A, 
                0x0E, 
                0x16, 
                0x21, 
                0x2F, 
                0x3F, 
                0x64
            })
            Name (BL02, Package (0x0A)
            {
                0x64, 
                0x14, 
                0x07, 
                0x0A, 
                0x0D, 
                0x14, 
                0x21, 
                0x2E, 
                0x3E, 
                0x64
            })
            Name (BL03, Package (0x0A)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0C, 
                0x0F, 
                0x17, 
                0x25, 
                0x32, 
                0x42, 
                0x64
            })
            Name (BL04, Package (0x0A)
            {
                0x64, 
                0x18, 
                0x08, 
                0x0C, 
                0x10, 
                0x18, 
                0x26, 
                0x34, 
                0x44, 
                0x64
            })
            Name (BL05, Package (0x0A)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0D, 
                0x12, 
                0x1A, 
                0x2A, 
                0x39, 
                0x4B, 
                0x64
            })
            Name (BL06, Package (0x0A)
            {
                0x64, 
                0x1C, 
                0x0A, 
                0x0E, 
                0x13, 
                0x1C, 
                0x2C, 
                0x3D, 
                0x50, 
                0x64
            })
            Name (BL07, Package (0x0A)
            {
                0x64, 
                0x18, 
                0x08, 
                0x0C, 
                0x10, 
                0x18, 
                0x27, 
                0x35, 
                0x45, 
                0x64
            })
            Name (BL08, Package (0x0A)
            {
                0x64, 
                0x19, 
                0x08, 
                0x0C, 
                0x10, 
                0x19, 
                0x27, 
                0x35, 
                0x46, 
                0x64
            })
            Name (BL09, Package (0x0A)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0C, 
                0x0F, 
                0x17, 
                0x24, 
                0x31, 
                0x40, 
                0x64
            })
            Name (BL10, Package (0x0A)
            {
                0x64, 
                0x1C, 
                0x0A, 
                0x0E, 
                0x13, 
                0x1C, 
                0x2D, 
                0x3E, 
                0x53, 
                0x64
            })
            Name (BL11, Package (0x0A)
            {
                0x64, 
                0x18, 
                0x08, 
                0x0C, 
                0x10, 
                0x18, 
                0x26, 
                0x34, 
                0x44, 
                0x64
            })
            Name (BL12, Package (0x0A)
            {
                0x64, 
                0x18, 
                0x08, 
                0x0C, 
                0x10, 
                0x18, 
                0x26, 
                0x34, 
                0x45, 
                0x64
            })
            Name (BL13, Package (0x0A)
            {
                0x64, 
                0x19, 
                0x09, 
                0x0D, 
                0x11, 
                0x19, 
                0x28, 
                0x37, 
                0x48, 
                0x64
            })
            Name (BL14, Package (0x0A)
            {
                0x64, 
                0x14, 
                0x08, 
                0x0C, 
                0x10, 
                0x14, 
                0x27, 
                0x36, 
                0x46, 
                0x64
            })
            Name (BL15, Package (0x0A)
            {
                0x64, 
                0x14, 
                0x07, 
                0x0A, 
                0x0D, 
                0x14, 
                0x20, 
                0x2D, 
                0x3B, 
                0x64
            })
            Name (BL16, Package (0x0A)
            {
                0x64, 
                0x14, 
                0x07, 
                0x0A, 
                0x0D, 
                0x14, 
                0x20, 
                0x2C, 
                0x3A, 
                0x64
            })
            Name (BL17, Package (0x0A)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0D, 
                0x11, 
                0x1A, 
                0x29, 
                0x38, 
                0x4A, 
                0x64
            })
            Name (BL18, Package (0x0A)
            {
                0x64, 
                0x19, 
                0x08, 
                0x0D, 
                0x11, 
                0x19, 
                0x27, 
                0x36, 
                0x46, 
                0x64
            })
            Name (BL19, Package (0x0A)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0D, 
                0x11, 
                0x1A, 
                0x28, 
                0x39, 
                0x49, 
                0x64
            })
            Name (BL20, Package (0x0A)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0D, 
                0x11, 
                0x1A, 
                0x2A, 
                0x39, 
                0x4B, 
                0x64
            })
            Name (BL21, Package (0x0A)
            {
                0x64, 
                0x16, 
                0x08, 
                0x0B, 
                0x0F, 
                0x16, 
                0x23, 
                0x31, 
                0x40, 
                0x64
            })
            Name (BL22, Package (0x0A)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0A, 
                0x0F, 
                0x17, 
                0x24, 
                0x32, 
                0x42, 
                0x64
            })
            Name (BL23, Package (0x0A)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0B, 
                0x0F, 
                0x17, 
                0x24, 
                0x31, 
                0x40, 
                0x64
            })
            Name (B8B1, Package (0x0D)
            {
                0x64, 
                0x19, 
                0x08, 
                0x0C, 
                0x0F, 
                0x13, 
                0x19, 
                0x23, 
                0x2D, 
                0x37, 
                0x40, 
                0x4D, 
                0x64
            })
            Name (B801, Package (0x0D)
            {
                0x64, 
                0x19, 
                0x08, 
                0x0C, 
                0x0F, 
                0x13, 
                0x19, 
                0x23, 
                0x2D, 
                0x37, 
                0x40, 
                0x4D, 
                0x64
            })
            Name (B802, Package (0x0D)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0C, 
                0x0F, 
                0x13, 
                0x1A, 
                0x24, 
                0x2E, 
                0x38, 
                0x42, 
                0x4E, 
                0x64
            })
            Name (B803, Package (0x0D)
            {
                0x64, 
                0x1C, 
                0x09, 
                0x0D, 
                0x10, 
                0x15, 
                0x1C, 
                0x27, 
                0x33, 
                0x3E, 
                0x48, 
                0x57, 
                0x64
            })
            Name (B804, Package (0x0D)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0C, 
                0x0F, 
                0x13, 
                0x1A, 
                0x24, 
                0x2F, 
                0x39, 
                0x42, 
                0x4F, 
                0x64
            })
            Name (B805, Package (0x0D)
            {
                0x64, 
                0x1A, 
                0x09, 
                0x0C, 
                0x0F, 
                0x14, 
                0x1A, 
                0x24, 
                0x2F, 
                0x3A, 
                0x43, 
                0x50, 
                0x64
            })
            Name (B806, Package (0x0D)
            {
                0x64, 
                0x1C, 
                0x09, 
                0x0C, 
                0x10, 
                0x15, 
                0x1C, 
                0x26, 
                0x31, 
                0x3B, 
                0x45, 
                0x53, 
                0x64
            })
            Name (B807, Package (0x0D)
            {
                0x64, 
                0x17, 
                0x07, 
                0x0B, 
                0x0E, 
                0x11, 
                0x17, 
                0x21, 
                0x2B, 
                0x34, 
                0x3C, 
                0x47, 
                0x64
            })
            Name (B808, Package (0x0D)
            {
                0x64, 
                0x11, 
                0x05, 
                0x07, 
                0x09, 
                0x0C, 
                0x11, 
                0x20, 
                0x33, 
                0x3D, 
                0x45, 
                0x57, 
                0x64
            })
            Name (B809, Package (0x0D)
            {
                0x64, 
                0x16, 
                0x08, 
                0x0A, 
                0x0D, 
                0x11, 
                0x16, 
                0x1F, 
                0x28, 
                0x31, 
                0x39, 
                0x45, 
                0x64
            })
            Name (B810, Package (0x0D)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0B, 
                0x0D, 
                0x11, 
                0x17, 
                0x20, 
                0x29, 
                0x32, 
                0x3A, 
                0x46, 
                0x64
            })
            Name (B811, Package (0x0D)
            {
                0x64, 
                0x14, 
                0x07, 
                0x09, 
                0x0C, 
                0x0F, 
                0x14, 
                0x1C, 
                0x24, 
                0x2D, 
                0x34, 
                0x3F, 
                0x64
            })
            Name (B812, Package (0x0D)
            {
                0x64, 
                0x18, 
                0x08, 
                0x0C, 
                0x0E, 
                0x12, 
                0x18, 
                0x22, 
                0x2C, 
                0x36, 
                0x3E, 
                0x4B, 
                0x64
            })
            Name (B813, Package (0x0D)
            {
                0x64, 
                0x19, 
                0x08, 
                0x0B, 
                0x0E, 
                0x12, 
                0x19, 
                0x22, 
                0x2C, 
                0x36, 
                0x3E, 
                0x4A, 
                0x64
            })
            Name (B814, Package (0x0D)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0B, 
                0x0E, 
                0x11, 
                0x17, 
                0x20, 
                0x29, 
                0x32, 
                0x3A, 
                0x45, 
                0x64
            })
            Name (B815, Package (0x0D)
            {
                0x64, 
                0x18, 
                0x08, 
                0x0B, 
                0x0E, 
                0x12, 
                0x18, 
                0x22, 
                0x2B, 
                0x34, 
                0x3C, 
                0x48, 
                0x64
            })
            Name (B816, Package (0x0D)
            {
                0x64, 
                0x17, 
                0x08, 
                0x0B, 
                0x0D, 
                0x11, 
                0x17, 
                0x20, 
                0x29, 
                0x31, 
                0x39, 
                0x44, 
                0x64
            })
            Method (GIBL, 1, Serialized)
            {
                If ((OSTB == 0x60))
                {
                    Local1 = Match (MCB8, MEQ, Arg0, MTR, Zero, 0x02)
                }
                Else
                {
                    Local1 = Match (MCBL, MEQ, Arg0, MTR, Zero, 0x02)
                }

                Local1 -= 0x02
                Return (Local1)
            }

            Method (BLMP, 1, Serialized)
            {
                If ((LCDD == 0x149EAF06))
                {
                    Local0 = BL01 /* \_SB_.PCI0.GFX0.BL01 */
                }
                ElseIf ((LCDD == 0x159EAF06))
                {
                    Local0 = BL02 /* \_SB_.PCI0.GFX0.BL02 */
                }
                ElseIf ((LCDD == 0x20ECAF06))
                {
                    Local0 = BL03 /* \_SB_.PCI0.GFX0.BL03 */
                }
                ElseIf ((LCDD == 0x21ECAF06))
                {
                    Local0 = BL04 /* \_SB_.PCI0.GFX0.BL04 */
                }
                ElseIf ((LCDD == 0x22ECAF06))
                {
                    Local0 = BL05 /* \_SB_.PCI0.GFX0.BL05 */
                }
                ElseIf ((LCDD == 0x23ECAF06))
                {
                    Local0 = BL06 /* \_SB_.PCI0.GFX0.BL06 */
                }
                ElseIf ((LCDD == 0x1728AF0D))
                {
                    Local0 = BL07 /* \_SB_.PCI0.GFX0.BL07 */
                }
                ElseIf ((LCDD == 0x1729AF0D))
                {
                    Local0 = BL08 /* \_SB_.PCI0.GFX0.BL08 */
                }
                ElseIf ((LCDD == 0x1592AF0D))
                {
                    Local0 = BL09 /* \_SB_.PCI0.GFX0.BL09 */
                }
                ElseIf ((LCDD == 0x02F6E430))
                {
                    Local0 = BL10 /* \_SB_.PCI0.GFX0.BL10 */
                }
                ElseIf ((LCDD == 0x02F7E430))
                {
                    Local0 = BL11 /* \_SB_.PCI0.GFX0.BL11 */
                }
                ElseIf ((LCDD == 0x02DCE430))
                {
                    Local0 = BL12 /* \_SB_.PCI0.GFX0.BL12 */
                }
                ElseIf ((LCDD == 0x02E3E430))
                {
                    Local0 = BL13 /* \_SB_.PCI0.GFX0.BL13 */
                }
                ElseIf ((LCDD == 0x033AE430))
                {
                    Local0 = BL14 /* \_SB_.PCI0.GFX0.BL14 */
                }
                ElseIf ((LCDD == 0x3150A34C))
                {
                    Local0 = BL15 /* \_SB_.PCI0.GFX0.BL15 */
                }
                ElseIf ((LCDD == 0x3250A34C))
                {
                    Local0 = BL16 /* \_SB_.PCI0.GFX0.BL16 */
                }
                ElseIf ((LCDD == 0x504BA34C))
                {
                    Local0 = BL17 /* \_SB_.PCI0.GFX0.BL17 */
                }
                ElseIf ((LCDD == 0x033BE430))
                {
                    Local0 = BL18 /* \_SB_.PCI0.GFX0.BL18 */
                }
                ElseIf ((LCDD == 0x0396E430))
                {
                    Local0 = BL19 /* \_SB_.PCI0.GFX0.BL19 */
                }
                ElseIf ((LCDD == 0x0397E430))
                {
                    Local0 = BL20 /* \_SB_.PCI0.GFX0.BL20 */
                }
                ElseIf ((LCDD == 0x4347834C))
                {
                    Local0 = BL21 /* \_SB_.PCI0.GFX0.BL21 */
                }
                ElseIf ((LCDD == 0x4447834C))
                {
                    Local0 = BL22 /* \_SB_.PCI0.GFX0.BL22 */
                }
                ElseIf ((LCDD == 0x15A7AF0D))
                {
                    Local0 = BL23 /* \_SB_.PCI0.GFX0.BL23 */
                }
                Else
                {
                    Local0 = BLB1 /* \_SB_.PCI0.GFX0.BLB1 */
                }

                If ((OSTB == 0x60))
                {
                    If ((Arg0 >= 0x64))
                    {
                        Return (0x64)
                    }

                    Local1 = SPDF /* \_SB_.PCI0.GFX0.SPDF */
                    Local2 = 0x08
                    Local3 = 0x02
                    While ((Local3 <= 0x08))
                    {
                        Local4 = DerefOf (Local1 [Local3])
                        Local5 = DerefOf (Local1 [(Local3 + One)])
                        If (((Arg0 >= Local4) && (Arg0 < Local5)))
                        {
                            Local2 = Local3
                            Break
                        }

                        Local3 += One
                    }

                    Local3 = (Local2 + One)
                    Local4 = DerefOf (Local1 [Local2])
                    Local5 = DerefOf (Local1 [Local3])
                    Local6 = DerefOf (Local0 [Local2])
                    Local7 = DerefOf (Local0 [Local3])
                    Divide (((Arg0 - Local4) * (Local7 - Local6)), (
                        Local5 - Local4), Local1, Local0)
                    Local0 += Local6
                    Return (Local0)
                }
                Else
                {
                    Local1 = (Arg0 + 0x02)
                    Return (DerefOf (Local0 [Local1]))
                }
            }

            Method (BCLW, 0, NotSerialized)
            {
                If ((LCDD == 0x4147834C))
                {
                    Local0 = B801 /* \_SB_.PCI0.GFX0.B801 */
                }
                ElseIf ((LCDD == 0x4247834C))
                {
                    Local0 = B802 /* \_SB_.PCI0.GFX0.B802 */
                }
                ElseIf ((LCDD == 0x039FE430))
                {
                    Local0 = B803 /* \_SB_.PCI0.GFX0.B803 */
                }
                ElseIf ((LCDD == 0x03DBE430))
                {
                    Local0 = B804 /* \_SB_.PCI0.GFX0.B804 */
                }
                ElseIf ((LCDD == 0x45ECAF06))
                {
                    Local0 = B805 /* \_SB_.PCI0.GFX0.B805 */
                }
                ElseIf ((LCDD == 0x46ECAF06))
                {
                    Local0 = B806 /* \_SB_.PCI0.GFX0.B806 */
                }
                ElseIf ((LCDD == 0x30EDAF06))
                {
                    Local0 = B807 /* \_SB_.PCI0.GFX0.B807 */
                }
                ElseIf ((LCDD == 0x15ABAE0D))
                {
                    Local0 = B808 /* \_SB_.PCI0.GFX0.B808 */
                }
                ElseIf ((LCDD == 0x4347834C))
                {
                    Local0 = B809 /* \_SB_.PCI0.GFX0.B809 */
                }
                ElseIf ((LCDD == 0x4447834C))
                {
                    Local0 = B810 /* \_SB_.PCI0.GFX0.B810 */
                }
                ElseIf ((LCDD == 0x3150A34C))
                {
                    Local0 = B811 /* \_SB_.PCI0.GFX0.B811 */
                }
                ElseIf ((LCDD == 0x033AE430))
                {
                    Local0 = B812 /* \_SB_.PCI0.GFX0.B812 */
                }
                ElseIf ((LCDD == 0x033BE430))
                {
                    Local0 = B813 /* \_SB_.PCI0.GFX0.B813 */
                }
                ElseIf ((LCDD == 0x20ECAF06))
                {
                    Local0 = B814 /* \_SB_.PCI0.GFX0.B814 */
                }
                ElseIf ((LCDD == 0x21ECAF06))
                {
                    Local0 = B815 /* \_SB_.PCI0.GFX0.B815 */
                }
                ElseIf ((LCDD == 0x15A7AF0D))
                {
                    Local0 = B816 /* \_SB_.PCI0.GFX0.B816 */
                }
                Else
                {
                    Local0 = B8B1 /* \_SB_.PCI0.GFX0.B8B1 */
                }

                Name (BCLB, Buffer (0x28)
                {
                     0x00                                             // .
                })
                BCLB = BCLM /* \_SB_.PCI0.GFX0.BCLM */
                Local1 = DerefOf (Local0 [0x02])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [Zero] = (Local1 + 0x03)
                BCLB [One] = 0x80
                BCLB [0x02] = (Local1 + 0x04)
                BCLB [0x03] = 0x81
                Local1 = DerefOf (Local0 [0x03])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x04] = (Local1 + 0x03)
                BCLB [0x05] = 0x8A
                Local1 = DerefOf (Local0 [0x04])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x06] = (Local1 + 0x03)
                BCLB [0x07] = 0x94
                Local1 = DerefOf (Local0 [0x05])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x08] = (Local1 + 0x03)
                BCLB [0x09] = 0x9E
                Local1 = DerefOf (Local0 [0x06])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x0A] = (Local1 + 0x03)
                BCLB [0x0B] = 0xA8
                Local1 = DerefOf (Local0 [0x07])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x0C] = (Local1 + 0x03)
                BCLB [0x0D] = 0xB2
                Local1 = DerefOf (Local0 [0x08])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x0E] = (Local1 + 0x03)
                BCLB [0x0F] = 0xBC
                Local1 = DerefOf (Local0 [0x09])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x10] = (Local1 + 0x03)
                BCLB [0x11] = 0xC6
                Local1 = DerefOf (Local0 [0x0A])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x12] = (Local1 + 0x03)
                BCLB [0x13] = 0xD0
                Local1 = DerefOf (Local0 [0x0B])
                Local1 = ((Local1 * 0x05) / 0x02)
                BCLB [0x14] = (Local1 + 0x03)
                BCLB [0x15] = 0xDA
                BCLM = BCLB /* \_SB_.PCI0.GFX0.BCLW.BCLB */
            }

            Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
            {
                DSEN = (Arg0 & 0x07)
                If (((Arg0 & 0x03) == Zero))
                {
                    If (CondRefOf (HDOS))
                    {
                        HDOS ()
                    }
                }
            }

            Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
            {
                If (CondRefOf (IDAB))
                {
                    IDAB ()
                }
                Else
                {
                    NDID = Zero
                    If ((DIDL != Zero))
                    {
                        DID1 = SDDL (DIDL)
                    }

                    If ((DDL2 != Zero))
                    {
                        DID2 = SDDL (DDL2)
                    }

                    If ((DDL3 != Zero))
                    {
                        DID3 = SDDL (DDL3)
                    }

                    If ((DDL4 != Zero))
                    {
                        DID4 = SDDL (DDL4)
                    }

                    If ((DDL5 != Zero))
                    {
                        DID5 = SDDL (DDL5)
                    }

                    If ((DDL6 != Zero))
                    {
                        DID6 = SDDL (DDL6)
                    }

                    If ((DDL7 != Zero))
                    {
                        DID7 = SDDL (DDL7)
                    }

                    If ((DDL8 != Zero))
                    {
                        DID8 = SDDL (DDL8)
                    }
                }

                If ((NDID == One))
                {
                    Name (TMP1, Package (0x01)
                    {
                        Ones
                    })
                    TMP1 [Zero] = (0x00010000 | DID1)
                    Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                }

                If ((NDID == 0x02))
                {
                    Name (TMP2, Package (0x02)
                    {
                        Ones, 
                        Ones
                    })
                    TMP2 [Zero] = (0x00010000 | DID1)
                    TMP2 [One] = (0x00010000 | DID2)
                    Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                }

                If ((NDID == 0x03))
                {
                    Name (TMP3, Package (0x03)
                    {
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP3 [Zero] = (0x00010000 | DID1)
                    TMP3 [One] = (0x00010000 | DID2)
                    TMP3 [0x02] = (0x00010000 | DID3)
                    Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                }

                If ((NDID == 0x04))
                {
                    Name (TMP4, Package (0x04)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP4 [Zero] = (0x00010000 | DID1)
                    TMP4 [One] = (0x00010000 | DID2)
                    TMP4 [0x02] = (0x00010000 | DID3)
                    TMP4 [0x03] = (0x00010000 | DID4)
                    Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                }

                If ((NDID == 0x05))
                {
                    Name (TMP5, Package (0x05)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP5 [Zero] = (0x00010000 | DID1)
                    TMP5 [One] = (0x00010000 | DID2)
                    TMP5 [0x02] = (0x00010000 | DID3)
                    TMP5 [0x03] = (0x00010000 | DID4)
                    TMP5 [0x04] = (0x00010000 | DID5)
                    Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                }

                If ((NDID == 0x06))
                {
                    Name (TMP6, Package (0x06)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP6 [Zero] = (0x00010000 | DID1)
                    TMP6 [One] = (0x00010000 | DID2)
                    TMP6 [0x02] = (0x00010000 | DID3)
                    TMP6 [0x03] = (0x00010000 | DID4)
                    TMP6 [0x04] = (0x00010000 | DID5)
                    TMP6 [0x05] = (0x00010000 | DID6)
                    Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                }

                If ((NDID == 0x07))
                {
                    Name (TMP7, Package (0x07)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP7 [Zero] = (0x00010000 | DID1)
                    TMP7 [One] = (0x00010000 | DID2)
                    TMP7 [0x02] = (0x00010000 | DID3)
                    TMP7 [0x03] = (0x00010000 | DID4)
                    TMP7 [0x04] = (0x00010000 | DID5)
                    TMP7 [0x05] = (0x00010000 | DID6)
                    TMP7 [0x06] = (0x00010000 | DID7)
                    Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                }

                If ((NDID == 0x08))
                {
                    Name (TMP8, Package (0x08)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP8 [Zero] = (0x00010000 | DID1)
                    TMP8 [One] = (0x00010000 | DID2)
                    TMP8 [0x02] = (0x00010000 | DID3)
                    TMP8 [0x03] = (0x00010000 | DID4)
                    TMP8 [0x04] = (0x00010000 | DID5)
                    TMP8 [0x05] = (0x00010000 | DID6)
                    TMP8 [0x06] = (0x00010000 | DID7)
                    TMP8 [0x07] = (0x00010000 | DID8)
                    Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                }

                If ((NDID == 0x09))
                {
                    If (CondRefOf (HWID))
                    {
                        Return (HWID) /* External reference */
                    }
                }

                Return (Package (0x01)
                {
                    0x0400
                })
            }

            Device (DD01)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID1 == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID1))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID1))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD1) /* \NXD1 */
                    }

                    Return (NDDS (DID1))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD02)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID2 == Zero))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID2))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((LIDS == Zero))
                    {
                        Return (Zero)
                    }

                    Return (CDDS (DID2))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD2) /* \NXD2 */
                    }

                    Return (NDDS (DID2))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }

                Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                {
                    If ((OSTB == 0x60))
                    {
                        BCLW ()
                        Return (MCB8) /* \_SB_.PCI0.GFX0.MCB8 */
                    }
                    Else
                    {
                        Return (MCBL) /* \_SB_.PCI0.GFX0.MCBL */
                    }
                }

                Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                {
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        CUBL = Arg0
                        BRTL = GIBL (Arg0)
                        AINT (One, BLMP (BRTL))
                        AINT (One, Arg0)
                        BRTL = Arg0
                    }
                }

                Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                {
                    Return (CUBL) /* \_SB_.PCI0.GFX0.CUBL */
                }
            }

            Device (DD03)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID3 == Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID3))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID3 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID3))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD3) /* \NXD3 */
                    }

                    Return (NDDS (DID3))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD04)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID4 == Zero))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID4))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID4 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID4))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD4) /* \NXD4 */
                    }

                    Return (NDDS (DID4))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD05)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID5 == Zero))
                    {
                        Return (0x05)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID5))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID5 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID5))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD5) /* \NXD5 */
                    }

                    Return (NDDS (DID5))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD06)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID6 == Zero))
                    {
                        Return (0x06)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID6))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID6 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID6))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD6) /* \NXD6 */
                    }

                    Return (NDDS (DID6))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD07)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID7 == Zero))
                    {
                        Return (0x07)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID7))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID7 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID7))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD7) /* \NXD7 */
                    }

                    Return (NDDS (DID7))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD08)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID8 == Zero))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID8))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID8 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID8))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DID8))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Method (SDDL, 1, NotSerialized)
            {
                NDID++
                Local0 = (Arg0 & 0x0F0F)
                Local1 = (0x80000000 | Local0)
                If ((DIDL == Local0))
                {
                    Return (Local1)
                }

                If ((DDL2 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL3 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL4 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL5 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL6 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL7 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL8 == Local0))
                {
                    Return (Local1)
                }

                Return (Zero)
            }

            Method (CDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (0x1D)
                }

                If ((CADL == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL2 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL3 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL4 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL5 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL6 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL7 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL8 == Local0))
                {
                    Return (0x1F)
                }

                Return (0x1D)
            }

            Method (NDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (Zero)
                }

                If ((NADL == Local0))
                {
                    Return (One)
                }

                If ((NDL2 == Local0))
                {
                    Return (One)
                }

                If ((NDL3 == Local0))
                {
                    Return (One)
                }

                If ((NDL4 == Local0))
                {
                    Return (One)
                }

                If ((NDL5 == Local0))
                {
                    Return (One)
                }

                If ((NDL6 == Local0))
                {
                    Return (One)
                }

                If ((NDL7 == Local0))
                {
                    Return (One)
                }

                If ((NDL8 == Local0))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Scope (^^PCI0)
            {
                OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                Field (MCHP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    TASM,   10, 
                    Offset (0x62)
                }
            }

            OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                GIVD,   1, 
                    ,   2, 
                GUMA,   3, 
                Offset (0x14), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x18), 
                Offset (0xA4), 
                ASLE,   8, 
                Offset (0xA8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xB0), 
                    ,   12, 
                CDVL,   1, 
                Offset (0xB2), 
                Offset (0xB5), 
                LBPC,   8, 
                Offset (0xBC), 
                ASLS,   32
            }

            OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
            Field (IGDM, AnyAcc, NoLock, Preserve)
            {
                SIGN,   128, 
                SIZE,   32, 
                OVER,   32, 
                SVER,   256, 
                VVER,   128, 
                GVER,   128, 
                MBOX,   32, 
                DMOD,   32, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                Offset (0x200), 
                SCIE,   1, 
                GEFC,   4, 
                GXFC,   3, 
                GESF,   8, 
                Offset (0x204), 
                PARM,   32, 
                DSLP,   32, 
                Offset (0x300), 
                ARDY,   32, 
                ASLC,   32, 
                TCHE,   32, 
                ALSI,   32, 
                BCLP,   32, 
                PFIT,   32, 
                CBLV,   32, 
                BCLM,   320, 
                CPFM,   32, 
                EPFM,   32, 
                PLUT,   592, 
                PFMB,   32, 
                CCDV,   32, 
                PCFT,   32, 
                SROT,   32, 
                IUER,   32, 
                FDSP,   64, 
                FDSS,   32, 
                Offset (0x400), 
                GVD1,   49152, 
                PHED,   32, 
                BDDC,   2048
            }

            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Name (CDCT, Package (0x05)
            {
                Package (0x02)
                {
                    0xE4, 
                    0x0140
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    Zero, 
                    Zero
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }
            })
            Name (SUCC, One)
            Name (NVLD, 0x02)
            Name (CRIT, 0x04)
            Name (NCRT, 0x06)
            Method (GSCI, 0, Serialized)
            {
                Method (GBDA, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = 0x0679
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        PARM = 0x0240
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        PARM &= 0xEFFF0000
                        PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                        PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        PARM = IPSC /* \IPSC */
                        PARM |= (IPAT << 0x08)
                        PARM += 0x0100
                        PARM |= (LIDS << 0x10)
                        PARM += 0x00010000
                        PARM |= (IBIA << 0x14)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x06))
                    {
                        PARM = ITVF /* \ITVF */
                        PARM |= (ITVM << 0x04)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                        PARM ^= One
                        PARM |= (GMFN << One)
                        PARM |= 0x1800
                        PARM |= (IDMS << 0x11)
                        PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                            0x15) /* \_SB_.PCI0.GFX0.PARM */
                        GESF = One
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        PARM = Zero
                        If (ISSC)
                        {
                            PARM |= 0x03
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        PARM = KSV0 /* \KSV0 */
                        GESF = KSV1 /* \KSV1 */
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                }

                Method (SBCB, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = Zero
                        PARM = 0x000F87FD
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x03))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x06))
                    {
                        ITVF = (PARM & 0x0F)
                        ITVM = ((PARM & 0xF0) >> 0x04)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        If ((PARM == Zero))
                        {
                            Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                            If ((0x80000000 & Local0))
                            {
                                CLID &= 0x0F
                                GLID (CLID)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x08))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x09))
                    {
                        IBTT = (PARM & 0xFF)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        IPSC = (PARM & 0xFF)
                        If (((PARM >> 0x08) & 0xFF))
                        {
                            IPAT = ((PARM >> 0x08) & 0xFF)
                            IPAT--
                        }

                        IBIA = ((PARM >> 0x14) & 0x07)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        IF1E = ((PARM >> One) & One)
                        If ((PARM & 0x0001E000))
                        {
                            IDMS = ((PARM >> 0x0D) & 0x0F)
                        }
                        Else
                        {
                            IDMS = ((PARM >> 0x11) & 0x0F)
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x10))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x11))
                    {
                        PARM = (LIDS << 0x08)
                        PARM += 0x0100
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x12))
                    {
                        If ((PARM & One))
                        {
                            If (((PARM >> One) == One))
                            {
                                ISSC = One
                            }
                            Else
                            {
                                GESF = Zero
                                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                            }
                        }
                        Else
                        {
                            ISSC = Zero
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x13))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x14))
                    {
                        PAVP = (PARM & 0x0F)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GEFC == 0x04))
                {
                    GXFC = GBDA ()
                }

                If ((GEFC == 0x06))
                {
                    GXFC = SBCB ()
                }

                GEFC = Zero
                SCIS = One
                GSSE = Zero
                SCIE = Zero
                Return (Zero)
            }

            Method (PDRD, 0, NotSerialized)
            {
                If (!DRDY)
                {
                    Sleep (ASLP)
                }

                Return (!DRDY)
            }

            Method (PSTS, 0, NotSerialized)
            {
                If ((CSTS > 0x02))
                {
                    Sleep (ASLP)
                }

                Return ((CSTS == 0x03))
            }

            Method (GNOT, 2, NotSerialized)
            {
                If (PDRD ())
                {
                    Return (One)
                }

                CEVT = Arg0
                CSTS = 0x03
                If (((CHPD == Zero) && (Arg1 == Zero)))
                {
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        Notify (PCI0, Arg1)
                    }
                    Else
                    {
                        Notify (GFX0, Arg1)
                    }
                }

                If (CondRefOf (HNOT))
                {
                    HNOT (Arg0)
                }
                Else
                {
                    Notify (GFX0, 0x80) // Status Change
                }

                Return (Zero)
            }

            Method (GHDS, 1, NotSerialized)
            {
                TIDX = Arg0
                Return (GNOT (One, Zero))
            }

            Method (GLID, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    CLID = 0x03
                }
                Else
                {
                    CLID = Arg0
                }

                Return (GNOT (0x02, Zero))
            }

            Method (GDCK, 1, NotSerialized)
            {
                CDCK = Arg0
                Return (GNOT (0x04, Zero))
            }

            Method (PARD, 0, NotSerialized)
            {
                If (!ARDY)
                {
                    Sleep (ASLP)
                }

                Return (!ARDY)
            }

            Method (AINT, 2, Serialized)
            {
                If (!(TCHE & (One << Arg0)))
                {
                    Return (One)
                }

                If (PARD ())
                {
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    If (CPFM)
                    {
                        Local0 = (CPFM & 0x0F)
                        Local1 = (EPFM & 0x0F)
                        If ((Local0 == One))
                        {
                            If ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            ElseIf ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            Else
                            {
                                PFIT = One
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            If ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            ElseIf ((Local1 & One))
                            {
                                PFIT = One
                            }
                            Else
                            {
                                PFIT = 0x06
                            }
                        }

                        If ((Local0 == 0x08))
                        {
                            If ((Local1 & One))
                            {
                                PFIT = One
                            }
                            ElseIf ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            Else
                            {
                                PFIT = 0x08
                            }
                        }
                    }
                    Else
                    {
                        PFIT ^= 0x07
                    }

                    PFIT |= 0x80000000
                    ASLC = 0x04
                }
                ElseIf ((Arg0 == One))
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                    BCLP |= 0x80000000
                    ASLC = 0x02
                }
                ElseIf ((Arg0 == Zero))
                {
                    ALSI = Arg1
                    ASLC = One
                }
                Else
                {
                    Return (One)
                }

                ASLE = One
                Return (Zero)
            }

            Method (SCIP, 0, NotSerialized)
            {
                If ((OVER != Zero))
                {
                    Return (!GSMI)
                }

                Return (Zero)
            }

            Device (^^MEM2)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (CRS1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                })
                Name (CRS2, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40004000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IGDS)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((((PNHM & 0x0FFF0FF0) == 0x000206A0) || ((PNHM & 0x0FFF0FFF
                        ) == 0x000306A0)))
                    {
                        Return (CRS1) /* \_SB_.MEM2.CRS1 */
                    }

                    Return (CRS2) /* \_SB_.MEM2.CRS2 */
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (DRET, Buffer (0x04)
                {
                     0x00                                             // .
                })
                If ((Arg0 == ToUUID ("6f3975e1-7a82-4f67-8b97-15bee060bedf") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        CreateWordField (DRET, Zero, F0SS)
                        F0SS = 0x02
                        Return (DRET) /* \_SB_.PCI0.GFX0._DSM.DRET */
                    }

                    If ((Arg2 == One))
                    {
                        If ((^^PEG0.PEGP.LNKV == 0x03))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }
                }

                Return (DRET) /* \_SB_.PCI0.GFX0._DSM.DRET */
            }
        }
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (CELT, One)
        Name (CMMD, Zero)
        Name (CMME, Zero)
        Name (OPPC, Zero)
        Device (VALZ)
        {
            Name (_HID, EisaId ("TOS1900"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSTB < 0x40))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Name (_DDN, "VALZeneral")  // _DDN: DOS Device Name
            Name (HKEV, 0x0B)
            Name (HKNT, Zero)
            Name (OSMD, Zero)
            Name (ENFG, Zero)
            Mutex (MUEV, 0x00)
            Name (EVCT, Zero)
            Name (EVCD, Package (0x64){})
            Name (RETP, Package (0x06){})
            Name (USFN, Package (0x06)
            {
                0x8000, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (NULP, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (BRIL, Zero)
            Name (STA5, Zero)
            Name (BSY5, Zero)
            Name (BATV, Zero)
            Name (CRFR, Zero)
            Name (FADR, Zero)
            Name (ST06, Zero)
            Name (ST08, Zero)
            Name (ST09, Zero)
            Name (ST10, Zero)
            Name (ST11, Zero)
            Name (ST12, Zero)
            Name (ST16, Zero)
            Name (CNT1, Zero)
            Name (CNT2, Zero)
            Name (CNT3, Zero)
            Name (CNT4, Zero)
            Name (CNT5, Zero)
            Name (BACR, Zero)
            Name (BATP, Zero)
            Name (REFM, 0x10)
            Name (TIMC, Zero)
            Name (GCV1, Zero)
            Name (ACAV, Zero)
            Name (ACAC, Zero)
            Name (GCV2, Zero)
            Name (GBS1, Zero)
            Name (GBS2, Zero)
            Name (GBS3, Zero)
            Name (GBS4, Zero)
            Name (GBS5, Zero)
            Name (CTOV, Zero)
            Name (CTO1, Zero)
            Name (PCCF, Zero)
            Name (CTPN, Buffer (0x0C){})
            Name (NNAM, Buffer (0x0C){})
            Name (MDAT, Buffer (0x02){})
            Name (SNUM, Buffer (0x02){})
            Name (TST0, Package (0x06)
            {
                Buffer (0x1C){}, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (TST1, Package (0x06)
            {
                "0000000000000000000000000000", 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HMBB, Buffer (0x1C){})
            Name (HMTP, Buffer (0x1C){})
            Name (CYCT, Zero)
            Name (EVCS, Zero)
            Name (HPCS, Zero)
            Name (TEMP, Zero)
            Name (INDX, 0xFF)
            Name (LCDS, One)
            Name (LLCD, Zero)
            Name (FRST, One)
            Name (MSRV, Zero)
            Name (AVR0, Zero)
            Name (AVR1, Zero)
            Name (AVR2, Zero)
            Name (AVR3, Zero)
            Name (AVR4, Zero)
            Name (AVR5, Zero)
            Name (AVR6, Zero)
            Name (AVR7, Zero)
            Name (AVR8, Zero)
            Name (AVR9, Zero)
            Name (AV10, Zero)
            Name (AV11, Zero)
            Name (AV12, Zero)
            Name (AV13, Zero)
            Name (AV14, Zero)
            Name (AV15, Zero)
            Name (ISFT, One)
            Name (ISAC, Zero)
            Name (ISDC, Zero)
            Name (ENLE, Zero)
            Name (USCF, Zero)
            Name (UDT1, Zero)
            Name (UDT2, Zero)
            Name (SCPT, Zero)
            Name (BLIM, 0x0A)
            Name (BSCF, 0x04)
            Name (UPSW, One)
            Name (STMD, Zero)
            Name (PSMD, Zero)
            Name (IMMD, Zero)
            Name (IPMD, Zero)
            Name (RLMD, Zero)
            Name (ODPM, 0x81)
            Name (PKFG, Zero)
            Name (STTD, Zero)
            Name (STTH, Zero)
            Name (STTM, Zero)
            Name (STTS, Zero)
            Name (STPD, Zero)
            Name (STPH, Zero)
            Name (STPM, Zero)
            Name (STPS, Zero)
            Name (ST07, Zero)
            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
            }

            Method (VWAK, 1, Serialized)
            {
            }

            Method (VPTS, 1, Serialized)
            {
            }

            Method (FKMC, 1, Serialized)
            {
                If (Arg0)
                {
                    HKEV |= 0x10
                    ^^PCI0.LPCB.EC0.ECXT (0xC0, One, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    HKEV &= 0xEF
                    ^^PCI0.LPCB.EC0.ECXT (0xC0, Zero, Zero, Zero, Zero, Zero)
                }
            }

            Method (ENAB, 0, Serialized)
            {
                OSMD = One
                Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07B0)
                ^^PCI0.LPCB.EC0.WRAM (0x07B0, (Local0 | One))
                If ((FNKS == One))
                {
                    FKMC (One)
                }
                Else
                {
                    FKMC (Zero)
                }

                ENFG = One
            }

            Method (PCTP, 1, Serialized)
            {
                Local0 = Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                Local1 = (Arg0 + RTCS) /* \_SB_.RTCS */
                Divide (Local1, 0x3C, Local1, Local2)
                Local2 += RTCM /* \_SB_.RTCM */
                Divide (Local2, 0x3C, Local2, Local3)
                Local3 += RTCH /* \_SB_.RTCH */
                Divide (Local3, 0x18, Local3, Local4)
                Local4 += RTCD /* \_SB_.RTCD */
                Local0 [Zero] = Local1
                Local0 [One] = Local2
                Local0 [0x02] = Local3
                Local0 [0x03] = Local4
                Return (Local0)
            }

            Method (PCAR, 1, Serialized)
            {
                Local0 = PCTP (Arg0)
                STTS = DerefOf (Local0 [Zero])
                STTM = DerefOf (Local0 [One])
                STTH = DerefOf (Local0 [0x02])
                STTD = DerefOf (Local0 [0x03])
                If ((STTD > RTCD))
                {
                    STTD = 0x04
                }
                Else
                {
                    STTD = 0x02
                }
            }

            Method (PCAP, 1, Serialized)
            {
                Local0 = PCTP (Arg0)
                STPS = DerefOf (Local0 [Zero])
                STPM = DerefOf (Local0 [One])
                STPH = DerefOf (Local0 [0x02])
                STPD = DerefOf (Local0 [0x03])
                If ((STPD > RTCD))
                {
                    STPD = 0x04
                }
                Else
                {
                    STPD = 0x02
                }
            }

            Method (T2SC, 3, Serialized)
            {
                Local0 = (Arg0 * 0x3C)
                Local0 += Arg1
                Local0 *= 0x3C
                Local0 += Arg2
                Return (Local0)
            }

            Method (SPFC, 6, Serialized)
            {
                OSMD = One
                CopyObject (NULP, RETP) /* \_SB_.VALZ.RETP */
                If ((CMST (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5) == Zero))
                {
                    Return (USFN) /* \_SB_.VALZ.USFN */
                }

                Local0 = Zero
                Local1 = Zero
                Local2 = Zero
                Local3 = Zero
                If (ISFT)
                {
                    PINT ()
                    ISFT = Zero
                }

                If (((ToInteger (Arg0) == 0x3456) && (ToInteger (Arg1) == 0x87)))
                {
                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    Local0 = (ToInteger (Arg2) & 0xFF)
                    Local1 = (Local0 >> 0x04)
                    Local2 = (Local0 & 0x0F)
                    RETP [0x02] = ^^PCI0.LPCB.EC0.RPIN (Local1, Local2)
                    RETP [Zero] = Zero
                    RETP [One] = Local0
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0x3456) && (ToInteger (Arg1) == 0x88)))
                {
                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    Local0 = (ToInteger (Arg2) & 0xFF)
                    Local1 = (Local0 >> 0x04)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (ToInteger (Arg3) & 0xFF)
                    ^^PCI0.LPCB.EC0.SPIN (Local1, Local2, Local3)
                    RETP [Zero] = Zero
                    RETP [One] = Local0
                    RETP [0x02] = Local3
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0x3456) && (ToInteger (Arg1) == 0x80)))
                {
                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    Local0 = (ToInteger (Arg2) & 0x0FFF)
                    Local1 = ^^PCI0.LPCB.EC0.RRAM (Local0)
                    RETP [Zero] = Zero
                    RETP [One] = Local0
                    RETP [0x02] = Local1
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0x3456) && (ToInteger (Arg1) == 0x81)))
                {
                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    Local0 = (ToInteger (Arg2) & 0x0FFF)
                    Local1 = (ToInteger (Arg3) & 0xFF)
                    ^^PCI0.LPCB.EC0.WRAM (Local0, Local1)
                    RETP [Zero] = Zero
                    RETP [One] = Local0
                    RETP [0x02] = Local1
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF300))
                {
                    If ((ToInteger (Arg1) == 0x010D))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x010D
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0130))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0130
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0137))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0137
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = 0x800A
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x03] = DAX2 /* \DAX2 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0157))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0157
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        RETP [One] = 0x8505
                        RETP [0x02] = DAX3 /* \DAX3 */
                        RETP [0x03] = DAX2 /* \DAX2 */
                        RETP [0x04] = DAX4 /* \DAX4 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x015C))
                    {
                        If (((PBI2 & 0x80) == Zero))
                        {
                            SWMF = 0xF300
                            SWSF = 0x015C
                            ISMI (0xD5)
                            RETP [Zero] = Zero
                            RETP [One] = 0x800E
                            Local0 = (DAX1 << 0x10)
                            Local0 |= DAX0 /* \DAX0 */
                            RETP [0x03] = Local0
                            RETP [0x02] = DAX3 /* \DAX3 */
                            RETP [0x04] = DAX4 /* \DAX4 */
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((ToInteger (Arg1) == 0x015E))
                    {
                        If (((PBI2 & 0x08) == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg2) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg3) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg4) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg5) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            SWMF = 0xF300
                            SWSF = 0x015E
                            ISMI (0xD5)
                            RETP [Zero] = Zero
                            RETP [One] = Zero
                            RETP [0x02] = DAX0 /* \DAX0 */
                            RETP [0x04] = DAX1 /* \DAX1 */
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((ToInteger (Arg1) == 0x0167))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0167
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0169))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0169
                        ISMI (0xD5)
                        If ((DAX1 == 0xFF))
                        {
                            RETP [Zero] = 0x8000
                            DAX1 = Zero
                        }
                        Else
                        {
                            RETP [Zero] = One
                            RETP [One] = Zero
                            RETP [0x02] = DAX0 /* \DAX0 */
                            RETP [0x04] = DAX1 /* \DAX1 */
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x016B))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x016B
                        ISMI (0xD5)
                        If ((DAX2 == One))
                        {
                            RETP [Zero] = 0x03
                        }
                        Else
                        {
                            RETP [Zero] = One
                        }

                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0300))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0300
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = 0x8200
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x03] = DAX2 /* \DAX2 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0406))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0406
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x050C))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x050C
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0700))
                    {
                        If ((ToInteger (Arg2) != 0x0800))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0700
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        RETP [One] = 0x8700
                        RETP [0x02] = (DAX0 | 0x0800)
                        RETP [0x04] = (DAX1 | 0x0800)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0705))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xF400))
                {
                    If ((ToInteger (Arg1) == 0x010D))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x010D
                        DAX0 = ToInteger (Arg2)
                        DA17 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0130))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0130
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0137))
                    {
                        If (((ToInteger (Arg2) & 0xFFF7) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0137
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0157))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0157
                        DAX3 = ToInteger (Arg2)
                        ISMI (0xD5)
                        If ((DAX1 == 0xFF))
                        {
                            RETP [Zero] = 0x8300
                            DAX1 = Zero
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x015C))
                    {
                        If (((PBI2 & 0x80) == Zero))
                        {
                            SWMF = 0xF400
                            SWSF = 0x015C
                            DAX3 = ToInteger (Arg2)
                            ISMI (0xD5)
                            If ((DAX1 == 0xFF))
                            {
                                RETP [Zero] = 0x8400
                                DAX1 = Zero
                            }
                            ElseIf ((DAX1 == 0xFE))
                            {
                                RETP [Zero] = 0x8300
                                DAX1 = Zero
                            }
                            Else
                            {
                                RETP [Zero] = Zero
                            }

                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((ToInteger (Arg1) == 0x015E))
                    {
                        If (((PBI2 & 0x08) == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                                ) != One)))
                            {
                                RETP [Zero] = 0x8300
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg3) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg4) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg5) != Zero))
                            {
                                RETP [Zero] = 0x8000
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            SWMF = 0xF400
                            SWSF = 0x015E
                            DAX0 = ToInteger (Arg2)
                            ISMI (0xD5)
                            If ((DAX1 == 0xFF))
                            {
                                RETP [Zero] = 0x8300
                                DAX1 = Zero
                            }
                            Else
                            {
                                RETP [Zero] = Zero
                            }

                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((ToInteger (Arg1) == 0x0167))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0167
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        If ((DAX1 == 0xFF))
                        {
                            RETP [Zero] = 0x8400
                            DAX1 = Zero
                        }
                        Else
                        {
                            RETP [Zero] = One
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0169))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0169
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        SWMF = 0x21
                        SWSF = One
                        ISMI (0xD5)
                        If ((DAX1 == 0xFF))
                        {
                            RETP [Zero] = 0x8000
                            DAX1 = Zero
                        }
                        Else
                        {
                            RETP [Zero] = One
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x016B))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x016B
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        If ((DAX1 == 0xFF))
                        {
                            RETP [Zero] = 0x8400
                            DAX1 = Zero
                        }
                        Else
                        {
                            RETP [Zero] = One
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0300))
                    {
                        If ((((ToInteger (Arg2) != 0x1290) & (ToInteger (
                            Arg2) != 0x3290)) & ((ToInteger (Arg2) != 0x3291) & (
                            ToInteger (Arg2) != 0x3294))))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0300
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0406))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0406
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x050C))
                    {
                        If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x050C
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0700))
                    {
                        If (((ToInteger (Arg2) != 0x0800) & (ToInteger (Arg2
                            ) != 0x0801)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF400
                        SWSF = 0x0700
                        DAX0 = (ToInteger (Arg2) & One)
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0705))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x2A)))
                {
                    RETP [Zero] = Zero
                    GBNL ()
                    RETP [0x02] = BRIL /* \_SB_.VALZ.BRIL */
                    Local0 = 0x07
                    Local0 <<= 0x0D
                    RETP [0x03] = Local0
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x42)))
                {
                    If ((ToInteger (Arg2) == One))
                    {
                        REFM = One
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == 0x10))
                    {
                        REFM = 0x10
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x8300
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x9F)))
                {
                    SWMF = 0xFE00
                    SWSF = 0x9F
                    If ((ToInteger (Arg2) == Zero))
                    {
                        RETP [Zero] = Zero
                        ISMI (0xD5)
                        If ((PHNV == 0xFFFF))
                        {
                            PHNV = Zero
                        }

                        RETP [0x03] = PHNV /* \PHNV */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == 0xFFFF))
                    {
                        RETP [Zero] = Zero
                        RETP [0x03] = 0x0200
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x8300
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x9F)))
                {
                    SWMF = 0xFF00
                    SWSF = 0x9F
                    If ((ToInteger (Arg2) == Zero))
                    {
                        Local0 = ToInteger (Arg3)
                        PHNV = Local0
                        ISMI (0xD5)
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA1)))
                {
                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg2) == 0x02))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        If (DCPF)
                        {
                            Local0 = Zero
                            Local1 = Zero
                            Local0 = ^^PCI0.LPCB.EC0.BD26 /* \_SB_.PCI0.LPCB.EC0_.BD26 */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            Local0 = ^^PCI0.LPCB.EC0.BD25 /* \_SB_.PCI0.LPCB.EC0_.BD25 */
                            Local1 |= Local0
                            Divide (Local1, 0x64, Local0, Local1)
                            BATV = Local1
                        }
                        Else
                        {
                            BATV = 0xFF
                        }

                        STA5 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((STA5 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = BATV /* \_SB_.VALZ.BATV */
                            STA5 = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA2)))
                {
                    If ((ToInteger (Arg2) == One))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        Local0 = ^^PCI0.LPCB.EC0.BD24 /* \_SB_.PCI0.LPCB.EC0_.BD24 */
                        Local0 <<= 0x08
                        Local1 = Zero
                        Local1 |= Local0
                        Local0 = ^^PCI0.LPCB.EC0.BD23 /* \_SB_.PCI0.LPCB.EC0_.BD23 */
                        Local1 |= Local0
                        Divide (0x0020E6DA, Local1, Local0, Local1)
                        CRFR = Local1
                        ST06 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST06 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg3) == Zero))
                            {
                                RETP [Zero] = Zero
                                RETP [0x02] = CRFR /* \_SB_.VALZ.CRFR */
                                ST06 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg3) == One))
                            {
                                RETP [Zero] = Zero
                                RETP [0x02] = CRFR /* \_SB_.VALZ.CRFR */
                                RETP [0x03] = 0x1068
                                ST06 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA7)))
                {
                    If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == Zero)))
                    {
                        If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == Zero))
                        {
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local1 = Zero
                            Local2 = Zero
                            Local3 = Zero
                            Local0 = 0xFF
                            If (((SYST && 0x10) || (SYST && 0x1000)))
                            {
                                Local0 = ^^PCI0.LPCB.EC0.BD20 /* \_SB_.PCI0.LPCB.EC0_.BD20 */
                            }

                            Local0 <<= 0x18
                            Local1 |= Local0
                            Local0 = Zero
                            SWMF = 0xFE00
                            SWSF = 0xFF01
                            PAR0 = 0x019C
                            ISMI (0xD5)
                            Local0 = (0xFF & DAX0) /* \DAX0 */
                            Local0 <<= 0x10
                            Local1 |= Local0
                            Local0 = ^^PCI0.LPCB.EC0.BD21 /* \_SB_.PCI0.LPCB.EC0_.BD21 */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            If (ACPF)
                            {
                                If (((PKFG & One) == Zero))
                                {
                                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07BB)
                                    Local0 <<= 0x08
                                    Local2 |= Local0
                                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07BA)
                                    Local2 |= Local0
                                    Local2 *= 0x14
                                    Divide (Local2, 0x64, Local3, Local2)
                                    Local2 &= 0xFF
                                    ACAV = Local2
                                }
                                Else
                                {
                                    ACAV = 0xFF
                                }
                            }
                            Else
                            {
                                ACAV = 0xFF
                            }

                            Local1 |= ACAV
                            GCV1 = Local1
                            ST08 = One
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == One))
                        {
                            If ((ST08 == Zero))
                            {
                                RETP [Zero] = 0x8D50
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Else
                            {
                                RETP [Zero] = Zero
                                Local0 = Zero
                                Local1 = Zero
                                Local2 = Zero
                                Local3 = Zero
                                Local0 <<= 0x18
                                Local1 |= Local0
                                If (ACPF)
                                {
                                    If (((PKFG & One) == Zero))
                                    {
                                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x03FB)
                                        Local0 <<= 0x08
                                        Local2 |= Local0
                                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x03FA)
                                        Local2 |= Local0
                                        AVR0 = AVR1 /* \_SB_.VALZ.AVR1 */
                                        AVR1 = AVR2 /* \_SB_.VALZ.AVR2 */
                                        AVR2 = AVR3 /* \_SB_.VALZ.AVR3 */
                                        AVR3 = AVR4 /* \_SB_.VALZ.AVR4 */
                                        AVR4 = AVR5 /* \_SB_.VALZ.AVR5 */
                                        AVR5 = AVR6 /* \_SB_.VALZ.AVR6 */
                                        AVR6 = AVR7 /* \_SB_.VALZ.AVR7 */
                                        AVR7 = AVR8 /* \_SB_.VALZ.AVR8 */
                                        AVR8 = AVR9 /* \_SB_.VALZ.AVR9 */
                                        AVR9 = Local2
                                        Local2 = Zero
                                        Local2 = (AVR0 + AVR1) /* \_SB_.VALZ.AVR1 */
                                        Local2 += AVR2
                                        Local2 += AVR3
                                        Local2 += AVR4
                                        Local2 += AVR5
                                        Local2 += AVR6
                                        Local2 += AVR7
                                        Local2 += AVR8
                                        Local2 += AVR9
                                        Divide (Local2, 0x0A, Local3, Local2)
                                        Local2 *= 0x0753
                                        Divide (Local2, 0x80, Local3, Local2)
                                        Local2 += 0x78
                                        ACAC = Local2
                                    }
                                    Else
                                    {
                                        ACAC = 0xFFFF
                                    }
                                }
                                Else
                                {
                                    ACAC = 0xFFFF
                                }

                                Local1 |= ACAC
                                Local2 = 0x78
                                Local2 <<= 0x10
                                Local1 |= Local2
                                GCV2 = Local1
                                RETP [0x02] = GCV1 /* \_SB_.VALZ.GCV1 */
                                RETP [0x03] = GCV2 /* \_SB_.VALZ.GCV2 */
                                ST08 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0x98)))
                {
                    If ((ToInteger (Arg2) == 0x02))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        If (DCPF)
                        {
                            If ((((PKFG & One) == One) || !ACPF))
                            {
                                Local0 = ^^PCI0.LPCB.EC0.BD30 /* \_SB_.PCI0.LPCB.EC0_.BD30 */
                                Local0 <<= 0x08
                                Local1 |= Local0
                                Local0 = ^^PCI0.LPCB.EC0.BD2F /* \_SB_.PCI0.LPCB.EC0_.BD2F */
                                Local1 |= Local0
                                If ((Local1 >= 0x8000))
                                {
                                    Local1 = (0xFFFF - Local1)
                                    Local1 += One
                                }

                                Local1 -= 0x78
                                BACR = Local1
                            }
                            Else
                            {
                                BACR = Zero
                            }

                            Local0 = Zero
                            Local1 = Zero
                            Local0 = ^^PCI0.LPCB.EC0.BD32 /* \_SB_.PCI0.LPCB.EC0_.BD32 */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            Local0 = ^^PCI0.LPCB.EC0.BD31 /* \_SB_.PCI0.LPCB.EC0_.BD31 */
                            Local1 |= Local0
                            Local1 -= 0x0AAA
                            Divide (Local1, 0x0A, Local3, Local1)
                            BATP = Local1
                        }
                        Else
                        {
                            BACR = 0xFFFF
                            BATP = 0xFF
                        }

                        ST09 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST09 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = BACR /* \_SB_.VALZ.BACR */
                            RETP [0x03] = BATP /* \_SB_.VALZ.BATP */
                            ST09 = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0x9A)))
                {
                    If ((ToInteger (Arg2) == One))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        Local0 = ^^PCI0.LPCB.EC0.ECXT (0x83, Zero, Zero, Zero, Zero, Zero)
                        Local3 = DerefOf (Local0 [Zero])
                        FADR = Zero
                        If ((Local3 == Zero))
                        {
                            FADR = DerefOf (Local0 [One])
                        }

                        ST10 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST10 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = FADR /* \_SB_.VALZ.FADR */
                            ST10 = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0x9B)))
                {
                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        GPCT (ToInteger (Arg2))
                        ST11 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST11 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg2) == Zero))
                            {
                                RETP [Zero] = Zero
                                RETP [0x03] = CNT1 /* \_SB_.VALZ.CNT1 */
                                RETP [0x02] = CNT2 /* \_SB_.VALZ.CNT2 */
                                CPCT (Zero)
                                ST11 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg2) == One))
                            {
                                RETP [0x02] = CNT3 /* \_SB_.VALZ.CNT3 */
                                CPCT (One)
                                ST11 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg2) == 0x02))
                            {
                                RETP [0x03] = CNT4 /* \_SB_.VALZ.CNT4 */
                                RETP [0x02] = CNT5 /* \_SB_.VALZ.CNT5 */
                                CPCT (0x02)
                                ST11 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0xA0)))
                {
                    If ((ToInteger (Arg3) == Zero))
                    {
                        If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg5) == Zero))
                            {
                                RETP [Zero] = Zero
                                ST12 = One
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg5) == One))
                            {
                                If ((ST12 == Zero))
                                {
                                    RETP [Zero] = 0x8D50
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }
                                Else
                                {
                                    RETP [Zero] = Zero
                                    RETP [0x02] = EVCS /* \_SB_.VALZ.EVCS */
                                    ST11 = Zero
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }
                            }
                        }
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xA0)))
                {
                    If ((ToInteger (Arg2) & 0xF4))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) == Zero))
                    {
                        ENLE = One
                        RETP [Zero] = Zero
                        EVCS = ToInteger (Arg2)
                        If ((LCDS == One))
                        {
                            If ((EVCS & 0x02))
                            {
                                If (^^LID._LID ())
                                {
                                    PUTE (0x19B2)
                                }
                                Else
                                {
                                    PUTE (0x19B3)
                                }
                            }
                        }
                        ElseIf ((EVCS & 0x02))
                        {
                            PUTE (0x19B3)
                        }

                        If ((EVCS & One))
                        {
                            If ((LCDS == One))
                            {
                                PUTE (0x19B0)
                            }
                            Else
                            {
                                PUTE (0x19B1)
                            }
                        }

                        If ((EVCS & 0x08))
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x07C5, 0x80)
                        }
                        Else
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x07C5, Zero)
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xA8)))
                {
                    If (((ToInteger (Arg3) == Zero) && (ToInteger (Arg4) == 0x9D)))
                    {
                        If ((ToInteger (Arg5) == Zero))
                        {
                            If ((HAPD != Zero))
                            {
                                RETP [Zero] = Zero
                            }
                            Else
                            {
                                RETP [Zero] = 0x8000
                                HPCS = Zero
                            }
                        }

                        If ((ToInteger (Arg5) == One))
                        {
                            RETP [0x02] = HPCS /* \_SB_.VALZ.HPCS */
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x9D)))
                {
                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg2) == Zero) || (ToInteger (Arg2) == One)))
                    {
                        If ((HAPD != Zero))
                        {
                            RETP [Zero] = Zero
                            HPCS = ToInteger (Arg2)
                        }
                        Else
                        {
                            RETP [Zero] = 0x8000
                            HPCS = Zero
                        }
                    }
                    Else
                    {
                        RETP [Zero] = 0x8300
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((HAPD != Zero))
                {
                    If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                        0xA6)) && (ToInteger (Arg2) == Zero)))
                    {
                        If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) == Zero))
                        {
                            If (((((ToInteger (Arg3) != Zero) && (
                                ToInteger (Arg3) != One)) && (ToInteger (Arg3) != 0x0200)) && (ToInteger (
                                Arg3) != 0x0201)))
                            {
                                RETP [Zero] = 0x8300
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Else
                            {
                                RETP [Zero] = Zero
                                ST07 = One
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }

                        If ((ToInteger (Arg5) == One))
                        {
                            If ((ST07 == Zero))
                            {
                                RETP [Zero] = 0x8D50
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Else
                            {
                                If ((ToInteger (Arg3) == Zero))
                                {
                                    Local0 = ^^HAPS.G000 ()
                                    RETP [Zero] = Zero
                                    RETP [0x02] = DerefOf (Local0 [Zero])
                                    RETP [0x04] = DerefOf (Local0 [One])
                                    ST07 = Zero
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                If ((ToInteger (Arg3) == One))
                                {
                                    Local0 = ^^HAPS.G001 ()
                                    RETP [Zero] = Zero
                                    RETP [0x02] = DerefOf (Local0 [Zero])
                                    RETP [0x04] = DerefOf (Local0 [One])
                                    ST07 = Zero
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                If ((ToInteger (Arg3) == 0x0200))
                                {
                                    Local0 = ^^HAPS.G200 ()
                                    RETP [Zero] = Zero
                                    RETP [0x02] = DerefOf (Local0 [Zero])
                                    RETP [0x04] = DerefOf (Local0 [One])
                                    ST07 = Zero
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                If ((ToInteger (Arg3) == 0x0201))
                                {
                                    Local0 = ^^HAPS.G201 ()
                                    RETP [Zero] = Zero
                                    RETP [0x02] = DerefOf (Local0 [Zero])
                                    RETP [0x04] = DerefOf (Local0 [One])
                                    ST07 = Zero
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }
                            }
                        }
                    }

                    If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                        0x6D)) && (ToInteger (Arg2) == Zero)))
                    {
                        If ((ToInteger (Arg3) == Zero))
                        {
                            Local0 = ^^HAPS.G000 ()
                            RETP [Zero] = Zero
                            RETP [0x02] = DerefOf (Local0 [Zero])
                            RETP [0x04] = DerefOf (Local0 [One])
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == One))
                        {
                            Local0 = ^^HAPS.G001 ()
                            RETP [Zero] = Zero
                            RETP [0x02] = DerefOf (Local0 [Zero])
                            RETP [0x04] = DerefOf (Local0 [One])
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == 0x0200))
                        {
                            Local0 = ^^HAPS.G200 ()
                            RETP [Zero] = Zero
                            RETP [0x02] = DerefOf (Local0 [Zero])
                            RETP [0x04] = DerefOf (Local0 [One])
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) == 0x0201))
                        {
                            Local0 = ^^HAPS.G201 ()
                            RETP [Zero] = Zero
                            RETP [0x02] = DerefOf (Local0 [Zero])
                            RETP [0x04] = DerefOf (Local0 [One])
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 
                        0x6D)) && (ToInteger (Arg2) == Zero)))
                    {
                        If ((ToInteger (Arg3) == 0x0100))
                        {
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x0102))
                        {
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xB0)))
                    {
                        If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == 0xFFFF)))
                        {
                            RETP [Zero] = Zero
                            RETP [0x02] = 0x02
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xB0)))
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            ^^HAPS.SODE (Zero)
                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        ElseIf ((ToInteger (Arg2) == One))
                        {
                            ^^HAPS.SODE (One)
                            RETP [Zero] = Zero
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xBA)))
                {
                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        If ((((ToInteger (Arg2) != Zero) || (ToInteger (
                            Arg3) != Zero)) || (ToInteger (Arg4) != Zero)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            RETP [Zero] = Zero
                            ST07 = One
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST07 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            ST07 = Zero
                            RETP [Zero] = Zero
                            Local0 = Zero
                            Local0 = ^^PCI0.LPCB.EC0.RRAM (0x03AA)
                            Local0 &= One
                            If (Local0)
                            {
                                RETP [0x02] = One
                            }
                            Else
                            {
                                RETP [0x02] = Zero
                            }

                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xBA)))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        Local0 = ^^PCI0.LPCB.EC0.ECSB (Zero, ^^PCI0.LPCB.EC0.WRWD, 0x16, 0x35, One, Zero)
                        Local1 = ^^PCI0.LPCB.EC0.RRAM (0x07FF)
                        ^^PCI0.LPCB.EC0.WRAM (0x07FF, (Local1 & 0x7F))
                    }

                    If ((ToInteger (Arg2) == One))
                    {
                        Local0 = ^^PCI0.LPCB.EC0.ECSB (Zero, ^^PCI0.LPCB.EC0.WRWD, 0x16, 0x35, 0x02, Zero)
                        Local1 = ^^PCI0.LPCB.EC0.RRAM (0x07FF)
                        ^^PCI0.LPCB.EC0.WRAM (0x07FF, (Local1 | 0x80))
                    }

                    Local2 = DerefOf (Local0 [Zero])
                    Local2 &= 0x1F
                    If (Local2)
                    {
                        RETP [Zero] = 0x8000
                    }
                    Else
                    {
                        RETP [Zero] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 
                    0xA8)) && (ToInteger (Arg4) == 0xA9)))
                {
                    If (((ToInteger (Arg2) == 0x02) || (ToInteger (Arg2) == 0x8002)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg5) != Zero) && (ToInteger (Arg5
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == Zero))
                    {
                        RETP [Zero] = Zero
                        ST16 = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) == One))
                    {
                        If ((ST16 == Zero))
                        {
                            RETP [Zero] = 0x8D50
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                RETP [Zero] = Zero
                                If (DCPF)
                                {
                                    Local0 = ^^PCI0.LPCB.EC0.BD28 /* \_SB_.PCI0.LPCB.EC0_.BD28 */
                                    Local1 = ^^PCI0.LPCB.EC0.BD27 /* \_SB_.PCI0.LPCB.EC0_.BD27 */
                                    Local0 <<= 0x08
                                    Local1 += Local0
                                    Local1 <<= 0x10
                                    GBS1 &= 0xFFFF
                                    GBS1 += Local1
                                }
                                Else
                                {
                                    GBS1 = 0xFFFF
                                }

                                RETP [0x02] = GBS1 /* \_SB_.VALZ.GBS1 */
                                RETP [0x03] = GBS2 /* \_SB_.VALZ.GBS2 */
                                RETP [0x04] = GBS3 /* \_SB_.VALZ.GBS3 */
                                RETP [0x05] = GBS4 /* \_SB_.VALZ.GBS4 */
                                ST16 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg2) == 0x8001))
                            {
                                RETP [Zero] = Zero
                                RETP [0x02] = GBS5 /* \_SB_.VALZ.GBS5 */
                                ST16 = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xAA)))
                {
                    PTET ()
                    RETP [Zero] = Zero
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07B8)
                    Local1 = ^^PCI0.LPCB.EC0.RRAM (0x07B7)
                    CTOV = Local0
                    CTO1 = Local1
                    RETP [0x02] = CTOV /* \_SB_.VALZ.CTOV */
                    RETP [0x03] = CTO1 /* \_SB_.VALZ.CTO1 */
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF000))
                {
                    If ((USCF == One))
                    {
                        RETP [Zero] = 0x8100
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x44
                    Local0 = 0x02
                    Local0 <<= 0x08
                    Local0 |= 0x54
                    RETP [0x03] = Local0
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF100))
                {
                    If ((USCF == Zero))
                    {
                        USCF = One
                        RETP [Zero] = 0x44
                    }
                    Else
                    {
                        RETP [Zero] = 0x8100
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF200))
                {
                    If ((USCF == Zero))
                    {
                        RETP [Zero] = 0x8200
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((USCF == One))
                    {
                        USCF = Zero
                        RETP [Zero] = 0x44
                    }
                    Else
                    {
                        RETP [Zero] = 0x8200
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF300))
                {
                    If ((USCF == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0150))
                    {
                        If ((PJTY == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        Local0 = ToInteger (Arg5)
                        Switch (Local0)
                        {
                            Case (Zero)
                            {
                                RETP [Zero] = Zero
                                RETP [One] = 0x800C
                                Switch (USCM)
                                {
                                    Case (0x03)
                                    {
                                        Local2 = 0x09
                                    }
                                    Case (0x05)
                                    {
                                        Local2 = 0x21
                                    }
                                    Default
                                    {
                                        Local2 = Zero
                                    }

                                }

                                Local1 = One
                                Local1 <<= 0x10
                                Local1 += Local2
                                RETP [0x02] = Local1
                                Local1 = One
                                Local1 <<= 0x10
                                Local1 |= 0x09
                                Local1 |= 0x21
                                RETP [0x03] = Local1
                                Local1 &= 0xFFFFFF00
                                RETP [0x04] = Local1
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Case (0x0100)
                            {
                                RETP [Zero] = Zero
                                RETP [One] = 0x8001
                                RETP [0x02] = One
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Case (0x0200)
                            {
                                RETP [Zero] = Zero
                                RETP [One] = 0x800D
                                Local1 = ^^PCI0.LPCB.EC0.RRAM (0x07C2)
                                Local1 &= 0xE0
                                If (((Local1 & 0x20) && (Local1 & 0x40)))
                                {
                                    Local2 = 0x04
                                }
                                ElseIf ((Local1 & 0x20))
                                {
                                    Local2 = One
                                }
                                ElseIf ((Local1 & 0x40))
                                {
                                    Local2 = 0x02
                                }
                                Else
                                {
                                    Local2 = Zero
                                }

                                Local1 = ^^PCI0.LPCB.EC0.RRAM (0x07C3)
                                Local1 <<= 0x10
                                Local1 += Local2
                                RETP [0x02] = Local1
                                Local1 = 0x64
                                Local1 <<= 0x10
                                Local1 |= One
                                Local1 |= 0x04
                                RETP [0x03] = 0x00640005
                                Local1 = 0x0A
                                Local1 <<= 0x10
                                Local1 |= One
                                Local1 |= 0x04
                                RETP [0x04] = 0x000A0004
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Case (0x0300)
                            {
                                RETP [Zero] = One
                                RETP [One] = Zero
                                SWMF = 0xF300
                                SWSF = 0x0150
                                DAX1 = 0x0300
                                ISMI (0xD5)
                                RETP [0x02] = DAX0 /* \DAX0 */
                                RETP [0x04] = DAX1 /* \DAX1 */
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                        }

                        If (((Local0 & 0xFF00) == 0x0100))
                        {
                            If (Local0 &= 0xFF)
                            {
                                If ((Local0 > One))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                RETP [Zero] = Zero
                                RETP [One] = 0x800C
                                If ((Local0 == One))
                                {
                                    Local1 = One
                                    Local1 <<= 0x10
                                    Local1 |= 0x09
                                    Local1 |= 0x21
                                    RETP [0x02] = Local1
                                }

                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }
                }

                If ((ToInteger (Arg0) == 0xF400))
                {
                    If ((USCF == Zero))
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x0150))
                    {
                        If ((PJTY == Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        Local0 = ToInteger (Arg5)
                        Switch (Local0)
                        {
                            Case (Zero)
                            {
                                Local1 = ToInteger (Arg2)
                                Local2 = Zero
                                Local2 |= 0x09
                                Local2 |= 0x21
                                If (((Local1 & 0xFF) & ~Local2))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                Local2 &= Local1
                                Local1 >>= 0x10
                                Local1 &= 0x3FFF
                                If ((Local1 != One))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                Switch (Local2)
                                {
                                    Case (Zero)
                                    {
                                        USCM = Zero
                                    }
                                    Case (0x09)
                                    {
                                        USCM = 0x03
                                    }
                                    Case (0x21)
                                    {
                                        USCM = 0x05
                                    }
                                    Default
                                    {
                                        RETP [Zero] = 0x8300
                                        Return (RETP) /* \_SB_.VALZ.RETP */
                                    }

                                }

                                SWMF = 0xF400
                                SWSF = 0x0150
                                DAX0 = USCM /* \USCM */
                                DAX1 = Zero
                                ISMI (0xD5)
                                Local3 = ^^PCI0.LPCB.EC0.RRAM (0x07C2)
                                Local3 &= 0x78
                                Switch (USCM)
                                {
                                    Case (Zero)
                                    {
                                        Local3 |= Zero
                                    }
                                    Case (0x03)
                                    {
                                        Local3 |= 0x02
                                        Local3 |= 0x80
                                    }
                                    Case (0x05)
                                    {
                                        Local3 |= 0x04
                                        Local3 |= 0x80
                                    }
                                    Default
                                    {
                                        Local3 |= Zero
                                    }

                                }

                                ^^PCI0.LPCB.EC0.WRAM (0x07C2, Local3)
                                RETP [Zero] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Case (0x0200)
                            {
                                Local1 = ToInteger (Arg2)
                                If ((Local1 & 0xFFF8))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                If ((Local1 & 0x02))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                If ((Local1 == Zero))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                Local2 = ^^PCI0.LPCB.EC0.RRAM (0x07C2)
                                Local2 &= 0x9F
                                Local1 &= 0x07
                                Switch (Local1)
                                {
                                    Case (One)
                                    {
                                        Local2 |= 0x20
                                    }
                                    Case (0x04)
                                    {
                                        Local2 |= 0x20
                                        Local2 |= 0x40
                                    }
                                    Default
                                    {
                                        Local2 |= 0x20
                                        Local2 |= 0x40
                                        Local1 = 0x04
                                    }

                                }

                                Local1 = (ToInteger (Arg2) >> 0x10)
                                If ((Local1 > 0x64))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                Local1 = (ToInteger (Arg2) >> 0x10)
                                ^^PCI0.LPCB.EC0.WRAM (0x07C2, Local2)
                                ^^PCI0.LPCB.EC0.WRAM (0x07C3, Local1)
                                RETP [Zero] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Case (0x0300)
                            {
                                If (((ToInteger (Arg2) != Zero) & (ToInteger (Arg2
                                    ) != One)))
                                {
                                    RETP [Zero] = 0x8300
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                                SWMF = 0xF400
                                SWSF = 0x0150
                                DAX0 = ToInteger (Arg2)
                                DAX1 = 0x0300
                                ISMI (0xD5)
                                RETP [Zero] = One
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                            Default
                            {
                                RETP [Zero] = 0x8300
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                        }
                    }
                }

                If ((ToInteger (Arg1) == 0x56))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        If ((ToInteger (Arg3) == One))
                        {
                            Local0 = Zero
                            Local0 |= One
                            If (RGPL (0x39, One))
                            {
                                Local0 |= 0x0200
                            }

                            RETP [Zero] = Zero
                            RETP [0x02] = Local0
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }
                        Else
                        {
                            If ((ToInteger (Arg3) == 0x03))
                            {
                                RETP [Zero] = 0x8300
                                RETP [0x02] = Zero
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }

                            If ((ToInteger (Arg3) == 0xFFFE))
                            {
                                If ((FLED == 0x5A))
                                {
                                    Local0 = One
                                }
                                Else
                                {
                                    Local0 = Zero
                                }

                                RETP [Zero] = Zero
                                RETP [0x02] = Local0
                                Return (RETP) /* \_SB_.VALZ.RETP */
                            }
                        }
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        If ((ToInteger (Arg3) == 0x0200))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                If (WLDP)
                                {
                                    SGPX (0x39, One, One)
                                }

                                WRST = One
                            }
                            Else
                            {
                                If (WLDP)
                                {
                                    SGPX (0x39, One, Zero)
                                }

                                WRST = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x2000))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                            If ((ToInteger (Arg2) == One))
                            {
                                If (W3DP){}
                                If (W3DP){}
                                WRPS = One
                            }
                            Else
                            {
                                If (W3DP){}
                                If (W3DP){}
                                WRPS = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x4000))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                            If ((ToInteger (Arg2) == One))
                            {
                                If (W3DP){}
                                If (W3DP){}
                                WRPS = One
                            }
                            Else
                            {
                                If (W3DP){}
                                If (W3DP){}
                                WRPS = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0x0800))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                            If ((ToInteger (Arg2) == One))
                            {
                                If (WUDP){}
                                If (WUDP){}
                                BRPS = One
                            }
                            Else
                            {
                                If (WUDP){}
                                If (WUDP){}
                                BRPS = Zero
                            }

                            MLED ()
                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }

                        If ((ToInteger (Arg3) == 0xFFFE))
                        {
                            If ((ToInteger (Arg2) == Zero))
                            {
                                FLED = Zero
                                MLED ()
                            }
                            ElseIf ((ToInteger (Arg2) == One))
                            {
                                FLED = 0x5A
                                SGPX (0x16, One, Zero)
                                ^^PCI0.LPCB.EC0.SPIN (0x08, 0x06, Zero)
                            }

                            Return (NULP) /* \_SB_.VALZ.NULP */
                        }
                    }
                }

                If (((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg1) == 0x050E)))
                {
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07C7)
                    RETP [Zero] = Zero
                    RETP [One] = Zero
                    If ((Local0 & One))
                    {
                        RETP [0x02] = Zero
                    }
                    Else
                    {
                        RETP [0x02] = One
                    }

                    RETP [0x04] = One
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg1) == 0x050E)))
                {
                    Local0 = ToInteger (Arg2)
                    ^^PCI0.LPCB.EC0.ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 != Zero))
                    {
                        ^^PCI0.LPCB.EC0.ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                        TPON = One
                    }
                    Else
                    {
                        ^^PCI0.LPCB.EC0.ECXT (0xB5, One, Zero, Zero, Zero, Zero)
                        TPON = Zero
                    }

                    Return (NULP) /* \_SB_.VALZ.NULP */
                }

                If ((ToInteger (Arg1) == 0x0522))
                {
                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        SWMF = 0xF300
                        SWSF = 0x0522
                        ISMI (0xD5)
                        RETP [Zero] = One
                        RETP [One] = Zero
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        FNKS = DAX0 /* \DAX0 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        SWMF = 0xF400
                        SWSF = 0x0522
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        FNKS = ToInteger (Arg2)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x76)))
                {
                    If (((ToInteger (Arg2) != Zero) || (ToInteger (Arg3
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x76)))
                {
                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = 0x8000
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xBD)))
                {
                    If (((ToInteger (Arg2) != Zero) || (ToInteger (Arg3
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    Local0 = Zero
                    If ((ODPM == 0x80))
                    {
                        Local0 |= 0x02
                    }

                    If ((ODPM == 0x81))
                    {
                        Local0 |= One
                    }

                    RETP [0x02] = Local0
                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xBD)))
                {
                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    ODPM = (ToInteger (Arg2) & 0xFF)
                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xC3)))
                {
                    If ((OSTB == 0x60))
                    {
                        HISD = Zero
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If (((ToInteger (Arg2) != Zero) || (ToInteger (Arg3
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    RETP [0x02] = HISD /* \HISD */
                    RETP [0x04] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC3)))
                {
                    If ((OSTB == 0x60))
                    {
                        HISD = Zero
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    HISD = ToInteger (Arg2)
                    If ((ToInteger (Arg3) == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0470, 0xE0)
                        ^^PCI0.LPCB.EC0.WRAM (0x0471, 0x5A)
                        ^^PCI0.LPCB.EC0.ECXT (0xC1, 0x02, Zero, Zero, Zero, Zero)
                        ^^PCI0.LPCB.EC0.WRAM (0x0470, 0xE0)
                        ^^PCI0.LPCB.EC0.WRAM (0x0471, 0xF0)
                        ^^PCI0.LPCB.EC0.WRAM (0x0472, 0x5A)
                        ^^PCI0.LPCB.EC0.ECXT (0xC1, 0x03, Zero, Zero, Zero, Zero)
                    }

                    If ((ToInteger (Arg3) == 0x02))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0470, 0x76)
                        ^^PCI0.LPCB.EC0.ECXT (0xC1, One, Zero, Zero, Zero, Zero)
                        ^^PCI0.LPCB.EC0.WRAM (0x0470, 0xF0)
                        ^^PCI0.LPCB.EC0.WRAM (0x0471, 0x76)
                        ^^PCI0.LPCB.EC0.ECXT (0xC1, 0x02, Zero, Zero, Zero, Zero)
                    }

                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If (((ToInteger (Arg2) != 0x03) || (ToInteger (Arg3
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (RGPL (0x22, One))
                    {
                        RETP [0x02] = 0x10
                    }
                    Else
                    {
                        RETP [0x02] = Zero
                    }

                    If ((^^PCI0.LPCB.EC0.RPIN (0x06, Zero) == One))
                    {
                        RETP [0x03] = 0x10
                    }
                    Else
                    {
                        RETP [0x03] = Zero
                    }

                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg4) != Zero) || (ToInteger (Arg5
                        ) != Zero)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg3) != Zero) && (ToInteger (Arg3
                        ) != One)))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x5A)))
                {
                    If ((OSTB == 0x60))
                    {
                        HISD = Zero
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg2) == Zero))
                    {
                        STMD = Zero
                        SWMF = 0xFF00
                        SWSF = 0x5A
                        PAR0 = Zero
                        ISMI (0xD5)
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                    Else
                    {
                        SWMF = 0xFF00
                        SWSF = 0x5A
                        PAR0 = One
                        ISMI (0xD5)
                    }

                    If ((ToInteger (Arg2) == One))
                    {
                        STMD = One
                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07B0)
                        ^^PCI0.LPCB.EC0.WRAM (0x07B0, (Local0 & 0xEF))
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }

                    If ((ToInteger (Arg2) == 0x02))
                    {
                        STMD = 0x02
                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07B0)
                        ^^PCI0.LPCB.EC0.WRAM (0x07B0, (Local0 | 0x10))
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x7F)))
                {
                    RETP [Zero] = Zero
                    If (((PCB2 & 0x03) == Zero))
                    {
                        RETP [0x02] = CMMD /* \_SB_.CMMD */
                        RETP [0x03] = 0x02
                        RETP [0x04] = One
                        RETP [0x05] = One
                    }
                    Else
                    {
                        RETP [0x02] = (CMMD - One)
                        RETP [0x03] = One
                        RETP [0x04] = Zero
                        RETP [0x05] = Zero
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x7F)))
                {
                    RETP [Zero] = Zero
                    If (((PCB2 & 0x03) == Zero))
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            \_TZ.THRM._SCP (Zero)
                            CMMD = Zero
                            CMME = One
                            ^^PCI0.LPCB.EC0.TTPH ()
                            ^^PCI0.CTCD ()
                        }

                        If ((ToInteger (Arg2) == One))
                        {
                            \_TZ.THRM._SCP (Zero)
                            CMMD = One
                            CMME = One
                            ^^PCI0.LPCB.EC0.TTPH ()
                            ^^PCI0.CTCN ()
                        }

                        If ((ToInteger (Arg2) == 0x02))
                        {
                            \_TZ.THRM._SCP (One)
                            CMMD = 0x02
                            CMME = One
                            ^^PCI0.LPCB.EC0.TTPH ()
                            ^^PCI0.CTCN ()
                        }
                    }
                    Else
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            \_TZ.THRM._SCP (Zero)
                            CMMD = One
                            CMME = One
                            ^^PCI0.LPCB.EC0.TTPH ()
                        }

                        If ((ToInteger (Arg2) == One))
                        {
                            \_TZ.THRM._SCP (One)
                            CMMD = 0x02
                            CMME = One
                            ^^PCI0.LPCB.EC0.TTPH ()
                        }
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x95)))
                {
                    If (((PBI2 & 0x80) == Zero))
                    {
                        RETP [Zero] = Zero
                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07F8)
                        If (((Local0 & 0x08) == 0x08))
                        {
                            If (((Local0 & 0x02) == 0x02))
                            {
                                RETP [0x02] = One
                            }
                            Else
                            {
                                RETP [0x02] = Zero
                            }
                        }
                        ElseIf (((Local0 & 0x80) == 0x80))
                        {
                            RETP [0x02] = One
                        }
                        Else
                        {
                            RETP [0x02] = Zero
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    Else
                    {
                        RETP [Zero] = 0x8000
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x95)))
                {
                    If (((PBI2 & 0x80) == Zero))
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            RETP [Zero] = Zero
                            Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07F8)
                            Local1 = ^^PCI0.LPCB.EC0.WRAM (0x07F8, (Local0 & 0x7F))
                        }
                        ElseIf ((ToInteger (Arg2) == One))
                        {
                            RETP [Zero] = Zero
                            Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07F8)
                            Local1 = ^^PCI0.LPCB.EC0.WRAM (0x07F8, (Local0 | 0x80))
                        }
                        Else
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Local1) != One))
                        {
                            RETP [Zero] = 0x8400
                        }
                    }
                    Else
                    {
                        RETP [Zero] = 0x8000
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg1) & 0xFFFF) == 0xC5))
                {
                    Local0 = (ToInteger (Arg1) & 0x00FF0000)
                    Local0 >>= 0x10
                    Local1 = (ToInteger (Arg1) & 0xFF000000)
                    Local1 >>= 0x18
                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == Zero)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == One)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0xFF))
                        {
                            RETP [Zero] = 0x8E00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0x80))
                        {
                            RETP [Zero] = 0x8D00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        DKSF = One
                        IO80 = 0xAA
                        Sleep (0x07D0)
                        ISMI (0xD8)
                        RETP [Zero] = DKST /* \DKST */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == One)))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST != 0xFF))
                        {
                            RETP [Zero] = 0x8C00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        DELK = ToInteger (Arg2)
                        DKSF = 0x02
                        ISMI (0xD8)
                        RETP [Zero] = DKST /* \DKST */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x02)))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0xFF))
                        {
                            RETP [Zero] = 0x8C00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == 0x80))
                        {
                            RETP [Zero] = 0x8C00
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((NVST == One))
                        {
                            RETP [Zero] = 0x8400
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        DELK = ToInteger (Arg2)
                        DKSF = 0x03
                        ISMI (0xD8)
                        RETP [Zero] = DKST /* \DKST */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x03)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPK1 /* \DPK1 */
                        RETP [0x03] = DPK2 /* \DPK2 */
                        RETP [0x04] = DPK3 /* \DPK3 */
                        RETP [0x05] = DPK4 /* \DPK4 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x04)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPK5 /* \DPK5 */
                        RETP [0x03] = DPK6 /* \DPK6 */
                        RETP [0x04] = DPK7 /* \DPK7 */
                        RETP [0x05] = DPK8 /* \DPK8 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x05)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPK9 /* \DPK9 */
                        RETP [0x03] = DPKA /* \DPKA */
                        RETP [0x04] = DPKB /* \DPKB */
                        RETP [0x05] = DPKC /* \DPKC */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFE00) && (Local0 == 0x06)))
                    {
                        If ((ToInteger (Arg2) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        RETP [0x02] = DPKD /* \DPKD */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x03)))
                    {
                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPK1 = ToInteger (Arg2)
                        DPK2 = ToInteger (Arg3)
                        DPK3 = ToInteger (Arg4)
                        DPK4 = ToInteger (Arg5)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x04)))
                    {
                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPK5 = ToInteger (Arg2)
                        DPK6 = ToInteger (Arg3)
                        DPK7 = ToInteger (Arg4)
                        DPK8 = ToInteger (Arg5)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x05)))
                    {
                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPK9 = ToInteger (Arg2)
                        DPKA = ToInteger (Arg3)
                        DPKB = ToInteger (Arg4)
                        DPKC = ToInteger (Arg5)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (Local0 == 0x06)))
                    {
                        If ((ToInteger (Arg3) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg4) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((ToInteger (Arg5) != Zero))
                        {
                            RETP [Zero] = 0x8000
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        If ((Local1 != Zero))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        RETP [Zero] = Zero
                        DPKD = ToInteger (Arg2)
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x62))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = Zero
                        RETP [0x02] = Zero
                        RETP [0x03] = 0x21
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x11)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        Local0 = One
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        Local0 = One
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        Local0 = One
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        Local0 = One
                    }

                    If ((Local0 == One))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    PSMD = GLPS ()
                    RETP [Zero] = Zero
                    RETP [0x02] = PSMD /* \_SB_.VALZ.PSMD */
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == Zero)))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == One)))
                    {
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 0x1E)))
                {
                    If ((ToInteger (Arg3) > One))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    HKEV = ToInteger (Arg2)
                    HKNT = ToInteger (Arg3)
                    If (FNKS)
                    {
                        If ((HKEV & 0x10))
                        {
                            FKMC (One)
                        }
                        Else
                        {
                            FKMC (Zero)
                        }
                    }

                    Return (NULP) /* \_SB_.VALZ.NULP */
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x1E)))
                {
                    If ((ToInteger (Arg2) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg3) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg4) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg5) != Zero))
                    {
                        RETP [Zero] = 0x8300
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    RETP [Zero] = Zero
                    RETP [0x02] = HKEV /* \_SB_.VALZ.HKEV */
                    RETP [0x03] = HKNT /* \_SB_.VALZ.HKNT */
                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg0) == 0xF300))
                {
                    If ((ToInteger (Arg1) == 0x010E))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8005
                        SWMF = 0xF300
                        SWSF = 0x010E
                        ISMI (0xD5)
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x03] = 0xFFFE
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg1) == 0x010F))
                    {
                        RETP [Zero] = Zero
                        RETP [One] = 0x8004
                        SWMF = 0xF300
                        SWSF = 0x010F
                        ISMI (0xD5)
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x03] = 0x0FFF
                        RETP [0x04] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xF400))
                {
                    If ((ToInteger (Arg1) == 0x010E))
                    {
                        SWMF = 0xF400
                        SWSF = 0x010E
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }

                    If ((ToInteger (Arg1) == 0x010F))
                    {
                        SWMF = 0xF400
                        SWSF = 0x010F
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        APON = One
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0x75)))
                {
                    Return (NULP) /* \_SB_.VALZ.NULP */
                }

                If ((ToInteger (Arg1) == 0x8C))
                {
                    If ((((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg2) == 
                        Zero)) && (ToInteger (Arg3) == Zero)))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg3) == Zero)))
                    {
                        If (((ToInteger (Arg2) & One) == Zero)){}
                        Else
                        {
                        }

                        If (((ToInteger (Arg2) & 0x02) == Zero)){}
                        Else
                        {
                        }

                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x014E))
                {
                    If ((((ToInteger (Arg0) == 0xF300) && (ToInteger (Arg2) == 
                        Zero)) && (ToInteger (Arg3) == Zero))){}
                    If (((ToInteger (Arg0) == 0xF400) && (ToInteger (Arg3) == Zero))){}
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xC000)))
                {
                    If ((ToInteger (Arg2) == 0x03))
                    {
                        Local0 = ^^PCI0.LPCB.EC0.ISHE /* \_SB_.PCI0.LPCB.EC0_.ISHE */
                        Local0 <<= 0x04
                        RETP [Zero] = Zero
                        RETP [0x03] = Local0
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg0) == 0xFE00))
                {
                    If ((ToInteger (Arg1) == 0x96))
                    {
                        RETP [Zero] = Zero
                        RETP [0x02] = 0xFF40
                        RETP [0x03] = GMID ()
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x011D))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0126))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (NULP) /* \_SB_.VALZ.NULP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0129))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0132))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0136))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0138))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x013A))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0142))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0144))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0145))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0146))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x014F))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x015D))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        RETP [Zero] = One
                        RETP [One] = Zero
                        SWMF = 0xF300
                        SWSF = 0x015D
                        ISMI (0xD5)
                        RETP [0x02] = DAX0 /* \DAX0 */
                        RETP [0x04] = DAX1 /* \DAX1 */
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        SWMF = 0xF400
                        SWSF = 0x015D
                        DAX0 = ToInteger (Arg2)
                        ISMI (0xD5)
                        RETP [Zero] = One
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                If ((ToInteger (Arg1) == 0x0405))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0501))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0502))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x050D))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0x0511))
                {
                    If ((ToInteger (Arg0) == 0xF300))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }

                    If ((ToInteger (Arg0) == 0xF400))
                    {
                        Return (USFN) /* \_SB_.VALZ.USFN */
                    }
                }

                If ((ToInteger (Arg1) == 0xBC))
                {
                    RETP [Zero] = 0x8000
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        Local0 = Zero
                        Local1 = ^^PCI0.LPCB.EC0.RRAM (0x0C00)
                        If (((Local1 & 0x40) == 0x40))
                        {
                            Local0 |= One
                        }

                        Local1 = ^^PCI0.LPCB.EC0.RRAM (0x0C01)
                        If (((Local1 & 0x10) == 0x10))
                        {
                            Local0 |= 0x02
                        }

                        RETP [0x02] = Local0
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                    ElseIf ((ToInteger (Arg0) == 0xFF00))
                    {
                        If (((ToInteger (Arg2) != Zero) && (ToInteger (Arg2
                            ) != One)))
                        {
                            RETP [Zero] = 0x8300
                            Return (RETP) /* \_SB_.VALZ.RETP */
                        }

                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x0C01)
                        Local0 &= 0xEF
                        ^^PCI0.LPCB.EC0.WRAM (0x0C01, Local0)
                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x0C00)
                        If (((ToInteger (Arg2) & One) == One))
                        {
                            Local0 |= 0x40
                        }
                        Else
                        {
                            Local0 &= 0xBF
                        }

                        ^^PCI0.LPCB.EC0.WRAM (0x0C00, Local0)
                        RETP [Zero] = Zero
                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    Return (RETP) /* \_SB_.VALZ.RETP */
                }

                If ((ToInteger (Arg1) == 0x67))
                {
                    If ((ToInteger (Arg0) == 0xFE00))
                    {
                        RETP [Zero] = 0x8000
                        If ((ToInteger (Arg4) == Zero))
                        {
                            If ((ToInteger (Arg3) == Zero))
                            {
                                PKFG &= 0xFF7F
                                If (^^PCI0.LPCB.EC0.ACAP ())
                                {
                                    PKFG |= 0x80
                                }

                                RETP [0x02] = PKFG /* \_SB_.VALZ.PKFG */
                                RETP [Zero] = Zero
                            }
                            ElseIf ((ToInteger (Arg3) == One))
                            {
                                Local0 = ^^PCI0.LPCB.EC0.ECXT (0xC5, Zero, Zero, Zero, Zero, Zero)
                                Local1 = Package (0x0D)
                                    {
                                        0xC6, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    }
                                Local1 = ^^PCI0.LPCB.EC0.ECX1 (Local1)
                                Local2 = T2SC (DerefOf (Local0 [0x02]), DerefOf (Local0 [0x03]
                                    ), DerefOf (Local0 [0x04]))
                                Local3 = T2SC (DerefOf (Local1 [0x04]), DerefOf (Local1 [0x05]
                                    ), DerefOf (Local1 [0x06]))
                                Local4 = T2SC (DerefOf (Local1 [0x08]), DerefOf (Local1 [0x09]
                                    ), DerefOf (Local1 [0x0A]))
                                If ((STRT < STPT))
                                {
                                    If ((DerefOf (Local1 [0x03]) == DerefOf (Local1 [0x07])))
                                    {
                                        If (STRT)
                                        {
                                            If ((Local2 >= Local3))
                                            {
                                                STRT = Zero
                                            }
                                        }

                                        If (STPT)
                                        {
                                            If ((STRT == Zero))
                                            {
                                                If ((Local2 >= Local4))
                                                {
                                                    STPT = Zero
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((DerefOf (Local0 [One]) == One))
                                    {
                                        If (STRT)
                                        {
                                            If ((Local2 >= Local3))
                                            {
                                                STRT = Zero
                                            }
                                        }
                                    }
                                    ElseIf ((DerefOf (Local0 [One]) == 0x02))
                                    {
                                        STRT = Zero
                                        If (STPT)
                                        {
                                            If ((Local2 >= Local4))
                                            {
                                                STPT = Zero
                                            }
                                        }
                                    }
                                }

                                Local0 = STRT /* \_SB_.STRT */
                                Local0 <<= 0x10
                                Local0 |= STPT /* \_SB_.STPT */
                                RETP [0x02] = Local0
                                RETP [0x04] = One
                                RETP [Zero] = Zero
                            }
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }

                    If ((ToInteger (Arg0) == 0xFF00))
                    {
                        RETP [Zero] = 0x8000
                        If ((ToInteger (Arg3) == Zero))
                        {
                            RETP [Zero] = Zero
                            Switch (Arg2)
                            {
                                Case (Zero)
                                {
                                    PKFG &= 0xFF80
                                    STRT = Zero
                                    STPT = Zero
                                }
                                Case (0x10)
                                {
                                    PKFG |= One
                                }
                                Case (0x11)
                                {
                                    PKFG &= 0xFFFE
                                }
                                Case (0x20)
                                {
                                    PKFG |= 0x02
                                }
                                Case (0x21)
                                {
                                    PKFG &= 0xFFFD
                                }
                                Case (0x40)
                                {
                                    PKFG |= 0x04
                                }
                                Case (0x41)
                                {
                                    PKFG &= 0xFFFB
                                }
                                Default
                                {
                                    RETP [Zero] = 0x8000
                                    Return (RETP) /* \_SB_.VALZ.RETP */
                                }

                            }

                            If ((PKFG & One))
                            {
                                ^^PCI0.LPCB.EC0.ECXT (0xC4, 0x03, Zero, Zero, Zero, Zero)
                            }
                            ElseIf ((PKFG & 0x02))
                            {
                                ^^PCI0.LPCB.EC0.ECXT (0xC4, 0x04, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                ^^PCI0.LPCB.EC0.ECXT (0xC4, Zero, Zero, Zero, Zero, Zero)
                                ^^PCI0.LPCB.EC0.ECXT (0xC7, Zero, Zero, Zero, Zero, Zero)
                            }
                        }
                        ElseIf ((ToInteger (Arg3) == One))
                        {
                            Local0 = ToInteger (Arg2)
                            Local1 = (Local0 & 0xFFFF)
                            Local0 >>= 0x10
                            If (((Local0 > 0x05A0) || (Local1 > 0x05A0)))
                            {
                                RETP [Zero] = 0x8300
                            }
                            ElseIf ((Local0 > Local1))
                            {
                                If (!ACPF)
                                {
                                    ^^PCI0.LPCB.EC0.ECXT (0xC4, 0x04, Zero, Zero, Zero, Zero)
                                }

                                RETP [Zero] = Zero
                            }
                            ElseIf ((((Local0 != Zero) || (Local1 != Zero)) || 
                                ((PKFG & 0x04) && ((Local0 == Zero) && (Local1 == Zero)))))
                            {
                                STRT = Local0
                                STPT = Local1
                                SWMF = 0xFF00
                                SWSF = 0x67
                                ISMI (0xD5)
                                RTCD = One
                                ^^PCI0.LPCB.EC0.ECXT (0xC2, RTCD, RTCH, RTCM, RTCS, Zero)
                                Local0 *= 0x3C
                                Local1 *= 0x3C
                                If (Local0)
                                {
                                    PCAR (Local0)
                                    PCAP (Local1)
                                }
                                Else
                                {
                                    Local0 = 0x03
                                    If ((Local1 == Zero))
                                    {
                                        Local1 = (0x3C - RTCS) /* \_SB_.RTCS */
                                        If ((Local1 <= (Local0 + 0x03)))
                                        {
                                            Local1 = 0x06
                                        }
                                    }

                                    PCAR (Local0)
                                    PCAP (Local1)
                                }

                                ^^PCI0.LPCB.EC0.ECXT (0xC4, Zero, Zero, Zero, Zero, Zero)
                                Local2 = Package (0x0D)
                                    {
                                        0xC3, 
                                        Zero, 
                                        0x04, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    }
                                Local2 [0x04] = STTD /* \_SB_.VALZ.STTD */
                                Local2 [0x05] = STTH /* \_SB_.VALZ.STTH */
                                Local2 [0x06] = STTM /* \_SB_.VALZ.STTM */
                                Local2 [0x07] = STTS /* \_SB_.VALZ.STTS */
                                Local2 [0x08] = STPD /* \_SB_.VALZ.STPD */
                                Local2 [0x09] = STPH /* \_SB_.VALZ.STPH */
                                Local2 [0x0A] = STPM /* \_SB_.VALZ.STPM */
                                Local2 [0x0B] = STPS /* \_SB_.VALZ.STPS */
                                ^^PCI0.LPCB.EC0.ECX1 (Local2)
                                ^^PCI0.LPCB.EC0.ECXT (0xC7, 0x80, Zero, Zero, Zero, Zero)
                                RETP [Zero] = Zero
                            }
                        }

                        Return (RETP) /* \_SB_.VALZ.RETP */
                    }
                }

                Return (USFN) /* \_SB_.VALZ.USFN */
            }

            Method (TIMR, 0, Serialized)
            {
            }

            Method (PUTE, 1, Serialized)
            {
                If ((ENFG == Zero))
                {
                    Return (Zero)
                }

                If ((Acquire (MUEV, 0xFFFF) != Zero))
                {
                    Return (Zero)
                }

                If ((EVCT < 0x64))
                {
                    EVCD [EVCT] = Arg0
                    EVCT++
                }

                Release (MUEV)
                Local0 = (HKEV & 0x02)
                If ((Local0 == 0x02))
                {
                    Return (Zero)
                }

                Notify (VALZ, 0x80) // Status Change
                Sleep (0x64)
                Return (Zero)
            }

            Method (GETE, 0, Serialized)
            {
                If ((ENFG == Zero))
                {
                    Return (Zero)
                }

                If ((Acquire (MUEV, 0xFFFF) != Zero))
                {
                    Return (Zero)
                }

                If ((EVCT == Zero))
                {
                    Release (MUEV)
                    Return (Zero)
                }

                Local0 = DerefOf (EVCD [Zero])
                Local1 = Zero
                While ((Local1 < 0x63))
                {
                    EVCD [Local1] = DerefOf (EVCD [(Local1 + One)]
                        )
                    Local1++
                }

                EVCT--
                Release (MUEV)
                If ((EVCT != Zero))
                {
                    Local0 = (HKEV & 0x02)
                    If ((Local0 && 0x02))
                    {
                        Return (Zero)
                    }

                    Notify (VALZ, 0x80) // Status Change
                    Sleep (0x64)
                }

                Return (Local0)
            }

            Method (INFO, 0, Serialized)
            {
                Local0 = GETE ()
                Return (Local0)
            }

            Method (ODLS, 0, NotSerialized)
            {
                Return (One)
            }

            Method (ODLT, 0, NotSerialized)
            {
                Return (0x02)
            }

            Method (ODLB, 0, NotSerialized)
            {
                Name (ODBB, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x79, 0x11, 0x00, 0x00,  // ....y...
                    /* 0008 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Local0 = ODDV /* \ODDV */
                ODBB [Zero] = (Local0 & 0xFF)
                ODBB [One] = ((Local0 >> 0x08) & 0xFF)
                Local0 = ODDD /* \ODDD */
                ODBB [0x02] = (Local0 & 0xFF)
                ODBB [0x03] = ((Local0 >> 0x08) & 0xFF)
                Local0 = ODSV /* \ODSV */
                ODBB [0x04] = (Local0 & 0xFF)
                ODBB [0x05] = ((Local0 >> 0x08) & 0xFF)
                Local0 = ODSD /* \ODSD */
                ODBB [0x06] = (Local0 & 0xFF)
                ODBB [0x07] = ((Local0 >> 0x08) & 0xFF)
                Local0 = ODRV /* \ODRV */
                ODBB [0x08] = (Local0 & 0xFF)
                ODBB [0x09] = 0x02
                Return (ODBB) /* \_SB_.VALZ.ODLB.ODBB */
            }

            Name (MSEN, Zero)
            Method (CMST, 6, NotSerialized)
            {
                If ((MSEN == Zero))
                {
                    MSEN = One
                }

                If ((MSEN == Zero))
                {
                    If ((^^PCI0.LPCB.EC0.RPIN (0x02, 0x03) == Zero))
                    {
                        MSEN = 0x02
                    }
                    Else
                    {
                        MSEN = One
                    }
                }

                If (((ToInteger (Arg0) == 0xFE00) && (ToInteger (Arg1) == 0xBD)))
                {
                    Return (Zero)
                }
                ElseIf (((ToInteger (Arg0) == 0xFF00) && (ToInteger (Arg1) == 
                    0xBD)))
                {
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (GBIF, 0, NotSerialized)
            {
                If (DCPF)
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD28 /* \_SB_.PCI0.LPCB.EC0_.BD28 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD27 /* \_SB_.PCI0.LPCB.EC0_.BD27 */
                    Local1 |= Local0
                    Local2 = (Local1 << 0x10)
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD2E /* \_SB_.PCI0.LPCB.EC0_.BD2E */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD2D /* \_SB_.PCI0.LPCB.EC0_.BD2D */
                    Local1 |= Local0
                    Local2 |= Local1
                    GBS1 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD38 /* \_SB_.PCI0.LPCB.EC0_.BD38 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD37 /* \_SB_.PCI0.LPCB.EC0_.BD37 */
                    Local1 |= Local0
                    Local2 = (Local1 << 0x10)
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD3A /* \_SB_.PCI0.LPCB.EC0_.BD3A */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD39 /* \_SB_.PCI0.LPCB.EC0_.BD39 */
                    Local1 |= Local0
                    Local2 &= 0xFFFF0000
                    GBS2 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD3C /* \_SB_.PCI0.LPCB.EC0_.BD3C */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD3B /* \_SB_.PCI0.LPCB.EC0_.BD3B */
                    Local1 |= Local0
                    Local2 = (Local1 << 0x10)
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD2A /* \_SB_.PCI0.LPCB.EC0_.BD2A */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD29 /* \_SB_.PCI0.LPCB.EC0_.BD29 */
                    Local1 |= Local0
                    Local2 |= Local1
                    GBS3 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD34 /* \_SB_.PCI0.LPCB.EC0_.BD34 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD33 /* \_SB_.PCI0.LPCB.EC0_.BD33 */
                    Local1 |= Local0
                    If (((Local1 & 0xFFFF) == Zero))
                    {
                        Local0 = Zero
                        Local1 = Zero
                        Local0 = ^^PCI0.LPCB.EC0.BD3A /* \_SB_.PCI0.LPCB.EC0_.BD3A */
                        Local0 <<= 0x08
                        Local1 |= Local0
                        Local0 = ^^PCI0.LPCB.EC0.BD39 /* \_SB_.PCI0.LPCB.EC0_.BD39 */
                        Local1 |= Local0
                    }

                    Local2 = (Local1 << 0x10)
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD36 /* \_SB_.PCI0.LPCB.EC0_.BD36 */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD35 /* \_SB_.PCI0.LPCB.EC0_.BD35 */
                    Local1 |= Local0
                    Local2 |= Local1
                    GBS4 = Local2
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.BD3E /* \_SB_.PCI0.LPCB.EC0_.BD3E */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.BD3D /* \_SB_.PCI0.LPCB.EC0_.BD3D */
                    Local1 |= Local0
                    GBS5 = Local1
                }
                Else
                {
                    GBS1 = 0xFFFF
                    GBS2 = 0xFFFF
                    GBS3 = 0xFFFF
                    GBS4 = 0xFFFF
                    GBS5 = 0xFFFF
                }
            }

            Method (GSMB, 0, NotSerialized)
            {
                If (DCPF)
                {
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x1C, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x1A] = DerefOf (HMTP [Zero])
                    HMBB [0x1B] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x1B, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x18] = DerefOf (HMTP [Zero])
                    HMBB [0x19] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDBL, ^^PCI0.LPCB.EC0.BADR, 0x20, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x0C] = DerefOf (HMTP [Zero])
                    HMBB [0x0D] = DerefOf (HMTP [One])
                    HMBB [0x0E] = DerefOf (HMTP [0x02])
                    HMBB [0x0F] = DerefOf (HMTP [0x03])
                    HMBB [0x10] = DerefOf (HMTP [0x04])
                    HMBB [0x11] = DerefOf (HMTP [0x05])
                    HMBB [0x12] = DerefOf (HMTP [0x06])
                    HMBB [0x13] = DerefOf (HMTP [0x07])
                    HMBB [0x14] = DerefOf (HMTP [0x08])
                    HMBB [0x15] = DerefOf (HMTP [0x09])
                    HMBB [0x16] = DerefOf (HMTP [0x0A])
                    HMBB [0x17] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDBL, ^^PCI0.LPCB.EC0.BADR, 0x30, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [Zero] = DerefOf (HMTP [Zero])
                    HMBB [One] = DerefOf (HMTP [One])
                    HMBB [0x02] = DerefOf (HMTP [0x02])
                    HMBB [0x03] = DerefOf (HMTP [0x03])
                    HMBB [0x04] = DerefOf (HMTP [0x04])
                    HMBB [0x05] = DerefOf (HMTP [0x05])
                    HMBB [0x06] = DerefOf (HMTP [0x06])
                    HMBB [0x07] = DerefOf (HMTP [0x07])
                    HMBB [0x08] = DerefOf (HMTP [0x08])
                    HMBB [0x09] = DerefOf (HMTP [0x09])
                    HMBB [0x0A] = DerefOf (HMTP [0x0A])
                    HMBB [0x0B] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x17, Zero)
                    CYCT = DerefOf (Local0 [0x02])
                }
            }

            Method (PINT, 0, NotSerialized)
            {
                If (^^PCI0.LPCB.EC0.DCPS (Zero))
                {
                    ISDC = One
                }
                Else
                {
                    ISDC = Zero
                }

                If (^^PCI0.LPCB.EC0.ACPS ())
                {
                    ISAC = One
                }
                Else
                {
                    ISAC = Zero
                }

                GBIF ()
                GSMB ()
                PTET ()
            }

            Method (GBNL, 0, NotSerialized)
            {
                Local1 = BRTL /* \BRTL */
                BRIL = (Local1 << 0x0D)
            }

            Method (GPCT, 1, NotSerialized)
            {
                If ((ToInteger (Arg0) == Zero))
                {
                    Local0 = Zero
                    Local1 = Zero
                    CNT1 = Local1
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07C8)
                    Local0 <<= 0x18
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07C9)
                    Local0 <<= 0x10
                    Local1 |= Local0
                    Local0 = PBOC /* \_SB_.PBOC */
                    PBOC = Zero
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07CB)
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT2 = Local1
                }

                If ((ToInteger (Arg0) == One))
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07CC)
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT3 = Local1
                }

                If ((ToInteger (Arg0) == 0x02))
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local0 <<= 0x18
                    Local1 |= Local0
                    Local0 <<= 0x10
                    Local1 |= Local0
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT4 = Local1
                    Local0 = Zero
                    Local1 = Zero
                    Local0 <<= 0x18
                    Local1 |= Local0
                    Local0 <<= 0x10
                    Local1 |= Local0
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Local0 <<= Zero
                    Local1 |= Local0
                    CNT5 = Local1
                }
            }

            Method (CPCT, 1, NotSerialized)
            {
                If ((ToInteger (Arg0) == Zero))
                {
                    EXPC = Zero
                    ^^PCI0.LPCB.EC0.WRAM (0x07C8, Zero)
                    ^^PCI0.LPCB.EC0.WRAM (0x07C9, Zero)
                    ^^PCI0.LPCB.EC0.WRAM (0x07CA, Zero)
                    ^^PCI0.LPCB.EC0.WRAM (0x07CB, Zero)
                }

                If ((ToInteger (Arg0) == One))
                {
                    ^^PCI0.LPCB.EC0.WRAM (0x07CC, Zero)
                }

                If ((ToInteger (Arg0) == 0x02)){}
            }

            Method (MLED, 0, Serialized)
            {
                If ((FLED == 0x5A))
                {
                    Return (Zero)
                }

                If (RGPL (0x39, One))
                {
                    SGPX (0x16, One, One)
                    ^^PCI0.LPCB.EC0.SPIN (0x08, 0x06, One)
                }
                ElseIf (RGPL (0x08, One))
                {
                    SGPX (0x16, One, One)
                    ^^PCI0.LPCB.EC0.SPIN (0x08, 0x06, One)
                }
                Else
                {
                    SGPX (0x16, One, Zero)
                    ^^PCI0.LPCB.EC0.SPIN (0x08, 0x06, Zero)
                }
            }

            Method (HMB1, 0, NotSerialized)
            {
                If (DCPF)
                {
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x1C, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x1A] = DerefOf (HMTP [Zero])
                    HMBB [0x1B] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x1B, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x18] = DerefOf (HMTP [Zero])
                    HMBB [0x19] = DerefOf (HMTP [One])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDBL, ^^PCI0.LPCB.EC0.BADR, 0x20, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [0x0C] = DerefOf (HMTP [Zero])
                    HMBB [0x0D] = DerefOf (HMTP [One])
                    HMBB [0x0E] = DerefOf (HMTP [0x02])
                    HMBB [0x0F] = DerefOf (HMTP [0x03])
                    HMBB [0x10] = DerefOf (HMTP [0x04])
                    HMBB [0x11] = DerefOf (HMTP [0x05])
                    HMBB [0x12] = DerefOf (HMTP [0x06])
                    HMBB [0x13] = DerefOf (HMTP [0x07])
                    HMBB [0x14] = DerefOf (HMTP [0x08])
                    HMBB [0x15] = DerefOf (HMTP [0x09])
                    HMBB [0x16] = DerefOf (HMTP [0x0A])
                    HMBB [0x17] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDBL, ^^PCI0.LPCB.EC0.BADR, 0x30, Zero)
                    HMTP = DerefOf (Local0 [0x02])
                    HMBB [Zero] = DerefOf (HMTP [Zero])
                    HMBB [One] = DerefOf (HMTP [One])
                    HMBB [0x02] = DerefOf (HMTP [0x02])
                    HMBB [0x03] = DerefOf (HMTP [0x03])
                    HMBB [0x04] = DerefOf (HMTP [0x04])
                    HMBB [0x05] = DerefOf (HMTP [0x05])
                    HMBB [0x06] = DerefOf (HMTP [0x06])
                    HMBB [0x07] = DerefOf (HMTP [0x07])
                    HMBB [0x08] = DerefOf (HMTP [0x08])
                    HMBB [0x09] = DerefOf (HMTP [0x09])
                    HMBB [0x0A] = DerefOf (HMTP [0x0A])
                    HMBB [0x0B] = DerefOf (HMTP [0x0B])
                    Local0 = Zero
                    Local1 = Zero
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x17, Zero)
                    CYCT = DerefOf (Local0 [0x02])
                    Local0 = (CYCT >> 0x08)
                    Local1 = (CYCT << 0x08)
                    Local0 |= Local1
                    Local0 &= 0xFFFF
                    CYCT = Local0
                    TST1 [Zero] = HMBB /* \_SB_.VALZ.HMBB */
                    TST1 [One] = ToBCD (CYCT)
                    Return (TST1) /* \_SB_.VALZ.TST1 */
                }
                Else
                {
                    Return (TST0) /* \_SB_.VALZ.TST0 */
                }
            }

            Method (HMB2, 0, NotSerialized)
            {
                Return (TST0) /* \_SB_.VALZ.TST0 */
            }

            Method (GLPS, 0, Serialized)
            {
                If ((LDSZ == Zero))
                {
                    Return (0x1000)
                }
                Else
                {
                    Return (0x0E00)
                }
            }

            Method (GMID, 0, Serialized)
            {
                If ((PCBD & 0x40))
                {
                    If ((PCB2 & 0x03))
                    {
                        Return (0x0621)
                    }
                    Else
                    {
                        Return (0x0620)
                    }
                }
                ElseIf ((PCB2 & 0x03))
                {
                    Return (0x0609)
                }
                Else
                {
                    Return (0x0608)
                }
            }

            Method (HST1, 0, Serialized)
            {
                Return (Zero)
            }

            Method (HST2, 0, Serialized)
            {
                Return (Zero)
            }

            Method (HST3, 0, Serialized)
            {
                Return (Zero)
            }

            Method (HST4, 0, Serialized)
            {
                Return (Zero)
            }
        }

        Scope (\)
        {
            Method (PTET, 0, NotSerialized)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.RRAM (0x0531)
                Local0 -= 0x03
                \_SB.PCI0.LPCB.EC0.WRAM (0x07B8, Local0)
                Local0 -= 0x05
                \_SB.PCI0.LPCB.EC0.WRAM (0x07B7, Local0)
            }

            Method (SWHG, 1, Serialized)
            {
                Return (One)
            }

            Method (OWLD, 1, Serialized)
            {
                WRST = Arg0
                SGPX (0x39, One, Arg0)
                If ((FLED != 0x5A))
                {
                    SGPX (0x16, One, Arg0)
                    \_SB.PCI0.LPCB.EC0.SPIN (0x08, 0x06, Arg0)
                }
            }

            Method (OBTD, 1, Serialized)
            {
                BRST = Arg0
                If (BTSF)
                {
                    BTSF = Zero
                    UPRW = One
                    UP2D = Zero
                    UPRW = Zero
                }

                SGPX (0x08, One, Arg0)
            }

            Method (OHWR, 0, Serialized)
            {
                Local0 = Zero
                If (BTDP)
                {
                    Local0 |= 0x0100
                }

                If (WLDP)
                {
                    Local0 |= 0x80
                }

                Return (Local0)
            }
        }

        Scope (\_SB)
        {
        }

        OperationRegion (ECMS, SystemIO, 0x72, 0x02)
        Field (ECMS, ByteAcc, Lock, Preserve)
        {
            EIND,   8, 
            EDAT,   8
        }

        IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x40), 
            RAMB,   32, 
                ,   2, 
            WWDP,   1, 
            WXDP,   1, 
                ,   2, 
            WWST,   1, 
            WXST,   1, 
            SLPP,   3, 
            BOTT,   1, 
            BRND,   4, 
            FBDP,   8, 
            UHDB,   8, 
            Offset (0x60), 
            WLFG,   8, 
            LDFT,   8, 
            PBID,   8, 
            PBI2,   8, 
            RTCD,   8, 
            RTCH,   8, 
            RTCM,   8, 
            RTCS,   8, 
            STRT,   16, 
            STPT,   16, 
            TPTY,   8, 
            OEMF,   8, 
            PBOC,   8, 
            Offset (0x70), 
            OSVR,   8
        }

        Method (LIMT, 0, NotSerialized)
        {
            Local0 = Zero
            If (!ACPF)
            {
                If (DGON)
                {
                    If (CPUP)
                    {
                        Local0 = One
                    }
                }
            }

            If (BATP)
            {
                Local0 = (CPUP - One)
            }

            If (BCTF)
            {
                Local0 = (CPUP - One)
            }

            Return (Local0)
        }

        Method (PRJS, 1, Serialized)
        {
            SLPP = Arg0
        }

        Method (PRJW, 1, Serialized)
        {
            If (BTDP)
            {
                If (BRST)
                {
                    If (BTSF)
                    {
                        BTSF = Zero
                        UPRW = One
                        UP2D = Zero
                        UPRW = Zero
                    }

                    SGPX (0x08, One, One)
                }
                Else
                {
                    SGPX (0x08, One, Zero)
                }
            }

            If (WLDP)
            {
                If (WRST)
                {
                    SGPX (0x39, One, One)
                }
                Else
                {
                    SGPX (0x39, One, Zero)
                }
            }
        }

        Scope (\_SB)
        {
            Device (LID)
            {
                Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                {
                    If (^^PCI0.LPCB.EC0.ECAV ())
                    {
                        Local0 = ^^PCI0.LPCB.EC0.RPIN (0x04, 0x06)
                        If (((Local0 == Ones) || (Local0 == One)))
                        {
                            Notify (PCI0, Zero) // Bus Check
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                    Else
                    {
                        Notify (PCI0, Zero) // Bus Check
                        Return (One)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1B, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    LDST = Arg0
                }
            }
        }

        Scope (PCI0)
        {
            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            }
        }

        Device (WMI0)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WAPF, Zero)
            Name (_WDG, Buffer (0x01B8)
            {
                /* 0000 */  0x00, 0x24, 0x14, 0x39, 0xA3, 0xC6, 0xFA, 0x40,  // .$.9...@
                /* 0008 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0010 */  0x30, 0x30, 0x01, 0x01, 0x00, 0x24, 0x14, 0x49,  // 00...$.I
                /* 0018 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0020 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x31, 0x01, 0x01,  // R.A.01..
                /* 0028 */  0x00, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 0030 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0038 */  0x30, 0x32, 0x01, 0x01, 0x01, 0x24, 0x14, 0x49,  // 02...$.I
                /* 0040 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0048 */  0x52, 0x83, 0x41, 0x00, 0x31, 0x31, 0x01, 0x01,  // R.A.11..
                /* 0050 */  0x01, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 0058 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0060 */  0x31, 0x32, 0x01, 0x01, 0x02, 0x24, 0x14, 0x49,  // 12...$.I
                /* 0068 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0070 */  0x52, 0x83, 0x41, 0x00, 0x32, 0x31, 0x01, 0x01,  // R.A.21..
                /* 0078 */  0x02, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 0080 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0088 */  0x32, 0x32, 0x01, 0x01, 0x03, 0x24, 0x14, 0x49,  // 22...$.I
                /* 0090 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0098 */  0x52, 0x83, 0x41, 0x00, 0x33, 0x31, 0x01, 0x01,  // R.A.31..
                /* 00A0 */  0x03, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 00A8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 00B0 */  0x33, 0x32, 0x01, 0x01, 0x04, 0x24, 0x14, 0x49,  // 32...$.I
                /* 00B8 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 00C0 */  0x52, 0x83, 0x41, 0x00, 0x34, 0x31, 0x01, 0x01,  // R.A.41..
                /* 00C8 */  0x04, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 00D0 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 00D8 */  0x34, 0x32, 0x01, 0x01, 0x05, 0x24, 0x14, 0x49,  // 42...$.I
                /* 00E0 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 00E8 */  0x52, 0x83, 0x41, 0x00, 0x35, 0x31, 0x01, 0x01,  // R.A.51..
                /* 00F0 */  0x05, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 00F8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0100 */  0x35, 0x32, 0x01, 0x01, 0x06, 0x24, 0x14, 0x49,  // 52...$.I
                /* 0108 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0110 */  0x52, 0x83, 0x41, 0x00, 0x36, 0x31, 0x01, 0x01,  // R.A.61..
                /* 0118 */  0x06, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 0120 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0128 */  0x36, 0x32, 0x01, 0x01, 0x07, 0x24, 0x14, 0x49,  // 62...$.I
                /* 0130 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0138 */  0x52, 0x83, 0x41, 0x00, 0x37, 0x31, 0x01, 0x01,  // R.A.71..
                /* 0140 */  0x07, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  // .$.J...@
                /* 0148 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0150 */  0x37, 0x32, 0x01, 0x01, 0x00, 0x24, 0x14, 0x59,  // 72...$.Y
                /* 0158 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0160 */  0x52, 0x83, 0x41, 0x00, 0x80, 0x00, 0x01, 0x08,  // R.A.....
                /* 0168 */  0x00, 0x24, 0x14, 0x69, 0xA3, 0xC6, 0xFA, 0x40,  // .$.i...@
                /* 0170 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 0178 */  0x30, 0x35, 0x01, 0x02, 0x00, 0x24, 0x14, 0x79,  // 05...$.y
                /* 0180 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  // ...@...&
                /* 0188 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x36, 0x01, 0x02,  // R.A.06..
                /* 0190 */  0x00, 0x24, 0x14, 0x89, 0xA3, 0xC6, 0xFA, 0x40,  // .$.....@
                /* 0198 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  // ...&R.A.
                /* 01A0 */  0x30, 0x37, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // 07..!...
                /* 01A8 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 01B0 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x01   // ..).BA..
            })
            Name (XVCD, Zero)
            Method (WQ00, 1, NotSerialized)
            {
                Return (XVCD) /* \_SB_.WMI0.XVCD */
            }

            OperationRegion (\WMIA, SystemMemory, WMIB, 0x9000)
            Field (WMIA, AnyAcc, NoLock, Preserve)
            {
                WAG1,   2048, 
                WAG2,   2048, 
                WAG3,   2048, 
                WAG4,   2048, 
                WAG5,   2048, 
                WAG6,   2048, 
                WAG7,   2048, 
                WAG8,   2048, 
                Offset (0x1000), 
                WPD1,   32768, 
                WPD2,   32768, 
                WPD3,   32768, 
                WPD4,   32768, 
                WPD5,   32768, 
                WPD6,   32768, 
                WPD7,   32768, 
                WPD8,   32768
            }

            Method (WQ01, 1, NotSerialized)
            {
                Return (WAG1) /* \_SB_.WMI0.WAG1 */
            }

            Method (WS01, 2, NotSerialized)
            {
                WAG1 = Arg1
                Return (Zero)
            }

            Method (WQ02, 1, NotSerialized)
            {
                Return (WPD1) /* \_SB_.WMI0.WPD1 */
            }

            Method (WS02, 2, NotSerialized)
            {
                WPD1 = Arg1
                Return (Zero)
            }

            Method (WQ11, 1, NotSerialized)
            {
                Return (WAG2) /* \_SB_.WMI0.WAG2 */
            }

            Method (WS11, 2, NotSerialized)
            {
                WAG2 = Arg1
                Return (Zero)
            }

            Method (WQ12, 1, NotSerialized)
            {
                Return (WPD2) /* \_SB_.WMI0.WPD2 */
            }

            Method (WS12, 2, NotSerialized)
            {
                WPD2 = Arg1
                Return (Zero)
            }

            Method (WQ21, 1, NotSerialized)
            {
                Return (WAG3) /* \_SB_.WMI0.WAG3 */
            }

            Method (WS21, 2, NotSerialized)
            {
                WAG3 = Arg1
                Return (Zero)
            }

            Method (WQ22, 1, NotSerialized)
            {
                Return (WPD3) /* \_SB_.WMI0.WPD3 */
            }

            Method (WS22, 2, NotSerialized)
            {
                WPD3 = Arg1
                Return (Zero)
            }

            Method (WQ31, 1, NotSerialized)
            {
                Return (WAG4) /* \_SB_.WMI0.WAG4 */
            }

            Method (WS31, 2, NotSerialized)
            {
                WAG4 = Arg1
                Return (Zero)
            }

            Method (WQ32, 1, NotSerialized)
            {
                Return (WPD4) /* \_SB_.WMI0.WPD4 */
            }

            Method (WS32, 2, NotSerialized)
            {
                WPD4 = Arg1
                Return (Zero)
            }

            Method (WQ41, 1, NotSerialized)
            {
                Return (WAG5) /* \_SB_.WMI0.WAG5 */
            }

            Method (WS41, 2, NotSerialized)
            {
                WAG5 = Arg1
                Return (Zero)
            }

            Method (WQ42, 1, NotSerialized)
            {
                Return (WPD5) /* \_SB_.WMI0.WPD5 */
            }

            Method (WS42, 2, NotSerialized)
            {
                WPD5 = Arg1
                Return (Zero)
            }

            Method (WQ51, 1, NotSerialized)
            {
                Return (WAG6) /* \_SB_.WMI0.WAG6 */
            }

            Method (WS51, 2, NotSerialized)
            {
                WAG6 = Arg1
                Return (Zero)
            }

            Method (WQ52, 1, NotSerialized)
            {
                Return (WPD6) /* \_SB_.WMI0.WPD6 */
            }

            Method (WS52, 2, NotSerialized)
            {
                WPD6 = Arg1
                Return (Zero)
            }

            Method (WQ61, 1, NotSerialized)
            {
                Return (WAG7) /* \_SB_.WMI0.WAG7 */
            }

            Method (WS61, 2, NotSerialized)
            {
                WAG7 = Arg1
                Return (Zero)
            }

            Method (WQ62, 1, NotSerialized)
            {
                Return (WPD7) /* \_SB_.WMI0.WPD7 */
            }

            Method (WS62, 2, NotSerialized)
            {
                WPD7 = Arg1
                Return (Zero)
            }

            Method (WQ71, 1, NotSerialized)
            {
                Return (WAG8) /* \_SB_.WMI0.WAG8 */
            }

            Method (WS71, 2, NotSerialized)
            {
                WAG8 = Arg1
                Return (Zero)
            }

            Method (WQ72, 1, NotSerialized)
            {
                Return (WPD8) /* \_SB_.WMI0.WPD8 */
            }

            Method (WS72, 2, NotSerialized)
            {
                WPD8 = Arg1
                Return (Zero)
            }

            Method (WM05, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, WMA5)
                If ((WMA5 == One))
                {
                    WMIG (WMIB, (WMIB + 0x1000), One)
                    Return (Zero)
                }

                If ((WMA5 == 0x02))
                {
                    WMIG ((WMIB + 0x0100), (WMIB + 0x2000), 0x02)
                    Return (Zero)
                }

                If ((WMA5 == 0x03))
                {
                    WMIG ((WMIB + 0x0200), (WMIB + 0x3000), 0x03)
                    Return (Zero)
                }

                If ((WMA5 == 0x04))
                {
                    WMIG ((WMIB + 0x0300), (WMIB + 0x4000), 0x04)
                    Return (Zero)
                }

                If ((WMA5 == 0x05))
                {
                    WMIG ((WMIB + 0x0400), (WMIB + 0x5000), 0x05)
                    Return (Zero)
                }

                If ((WMA5 == 0x06))
                {
                    WMIG ((WMIB + 0x0500), (WMIB + 0x6000), 0x06)
                    Return (Zero)
                }

                If ((WMA5 == 0x07))
                {
                    WMIG ((WMIB + 0x0600), (WMIB + 0x7000), 0x07)
                    Return (Zero)
                }

                If ((WMA5 == 0x08))
                {
                    WMIG ((WMIB + 0x0700), (WMIB + 0x8000), 0x08)
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (WM06, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, WM6A)
                Local0 = INIT (WM6A)
                Return (Local0)
            }

            Method (WM07, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, WM7A)
                Local0 = WDOG (WM7A)
                Return (Local0)
            }

            Method (NTFY, 1, Serialized)
            {
                XVCD = Arg0
                Notify (WMI0, 0x80) // Status Change
            }

            Method (WSMI, 1, Serialized)
            {
                WMIS = Arg0
                ISMI (0xDF)
            }

            Name (WQBA, Buffer (0x0914)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x04, 0x09, 0x00, 0x00, 0x50, 0x67, 0x00, 0x00,  // ....Pg..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xC7, 0xB2, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x2B, 0x10, 0x92, 0x2B, 0x81, 0x42, 0x04,  // .+..+.B.
                /* 0028 */  0x0A, 0x44, 0x24, 0x81, 0x30, 0x28, 0x0D, 0x20,  // .D$.0(. 
                /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                /* 0068 */  0x44, 0x49, 0x16, 0xB0, 0xA3, 0x30, 0x09, 0x3C,  // DI...0.<
                /* 0070 */  0x8A, 0xC8, 0x46, 0xE3, 0xD0, 0xD8, 0x61, 0x58,  // ..F...aX
                /* 0078 */  0x26, 0x98, 0x06, 0x71, 0x18, 0x65, 0x23, 0x8B,  // &..q.e#.
                /* 0080 */  0xC0, 0x13, 0xEA, 0x74, 0x74, 0x05, 0x08, 0x13,  // ...tt...
                /* 0088 */  0x20, 0x1E, 0x55, 0x18, 0xCD, 0x41, 0x91, 0x08,  //  .U..A..
                /* 0090 */  0xD0, 0x28, 0x31, 0x63, 0x22, 0xB0, 0x9D, 0x63,  // .(1c"..c
                /* 0098 */  0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9, 0x18,  // k..Q....
                /* 00A0 */  0x1A, 0xC1, 0x71, 0x85, 0xF7, 0xC8, 0x8E, 0x90,  // ..q.....
                /* 00A8 */  0x59, 0x1C, 0x8B, 0x20, 0x43, 0x85, 0xEB, 0x10,  // Y.. C...
                /* 00B0 */  0x4E, 0x73, 0x32, 0xC8, 0x89, 0x9C, 0x49, 0xEC,  // Ns2...I.
                /* 00B8 */  0x08, 0x05, 0x09, 0xB0, 0x8E, 0x21, 0xA4, 0x58,  // .....!.X
                /* 00C0 */  0x51, 0x6A, 0xC6, 0xD3, 0x0C, 0x82, 0x34, 0x0A,  // Qj....4.
                /* 00C8 */  0xA5, 0xC9, 0x79, 0x00, 0x61, 0xC2, 0xC3, 0x20,  // ..y.a.. 
                /* 00D0 */  0x30, 0xFE, 0x11, 0x61, 0x64, 0x40, 0xC8, 0x33,  // 0..ad@.3
                /* 00D8 */  0xB2, 0x86, 0x6A, 0x02, 0xBB, 0x17, 0xE0, 0x6C,  // ..j....l
                /* 00E0 */  0x6A, 0x32, 0x36, 0x39, 0x29, 0x9B, 0x1D, 0x41,  // j269)..A
                /* 00E8 */  0x68, 0x0B, 0x5E, 0xDA, 0x04, 0x18, 0x04, 0x13,  // h.^.....
                /* 00F0 */  0x4A, 0x24, 0x0F, 0xE5, 0x78, 0xA2, 0x54, 0x88,  // J$..x.T.
                /* 00F8 */  0xA4, 0xF1, 0xC5, 0x88, 0x52, 0x1C, 0x8A, 0x60,  // ....R..`
                /* 0100 */  0x23, 0xB6, 0x86, 0x21, 0x98, 0x98, 0x21, 0xE3,  // #..!..!.
                /* 0108 */  0x07, 0xB7, 0xFD, 0x83, 0x01, 0x53, 0x00, 0xD1,  // .....S..
                /* 0110 */  0x02, 0x88, 0x22, 0x8D, 0x06, 0x75, 0x18, 0x48,  // .."..u.H
                /* 0118 */  0xF0, 0x70, 0xE0, 0x71, 0x9E, 0xD6, 0xF9, 0x1D,  // .p.q....
                /* 0120 */  0xD7, 0x41, 0x04, 0x39, 0xE1, 0xE3, 0xAA, 0xF3,  // .A.9....
                /* 0128 */  0x54, 0x40, 0x46, 0xC6, 0xFE, 0xFF, 0x58, 0x09,  // T@F...X.
                /* 0130 */  0x3A, 0x38, 0x26, 0x40, 0x71, 0x0D, 0xA8, 0x69,  // :8&@q..i
                /* 0138 */  0x3E, 0x1D, 0xB0, 0x81, 0x86, 0xC3, 0x0C, 0xD1,  // >.......
                /* 0140 */  0xA3, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  // ..w....=
                /* 0148 */  0xA2, 0x07, 0x03, 0xEC, 0x10, 0x4F, 0xE6, 0x25,  // .....O.%
                /* 0150 */  0xA0, 0x54, 0x01, 0x66, 0x4F, 0x08, 0x9A, 0x76,  // .T.fO..v
                /* 0158 */  0x82, 0xE3, 0xF1, 0x71, 0xC0, 0xF3, 0x39, 0xE1,  // ...q..9.
                /* 0160 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED,  // ..?.....
                /* 0168 */  0x71, 0x9E, 0xD6, 0x5B, 0x81, 0x8F, 0x00, 0x26,  // q..[...&
                /* 0170 */  0xB0, 0x58, 0x08, 0x6D, 0x52, 0xE3, 0x01, 0x02,  // .X.mR...
                /* 0178 */  0x8A, 0x0F, 0x05, 0x42, 0x78, 0x75, 0xF0, 0x7C,  // ...Bxu.|
                /* 0180 */  0x4D, 0x30, 0x32, 0x84, 0x9C, 0x8C, 0x07, 0x35,  // M02....5
                /* 0188 */  0x0A, 0x83, 0xD6, 0x0A, 0xAE, 0x9B, 0x40, 0x02,  // ......@.
                /* 0190 */  0x47, 0x84, 0xD0, 0x67, 0xC3, 0xA2, 0x86, 0x4D,  // G..g...M
                /* 0198 */  0x8F, 0x16, 0xFC, 0x54, 0xC1, 0x20, 0xCF, 0xE0,  // ...T. ..
                /* 01A0 */  0x11, 0xC0, 0x23, 0x39, 0x21, 0x1F, 0x3E, 0x3C,  // ..#9!.><
                /* 01A8 */  0x30, 0xF8, 0xB3, 0xF0, 0x91, 0x02, 0x1C, 0x1E,  // 0.......
                /* 01B0 */  0xC1, 0x84, 0xF3, 0x0A, 0x01, 0x6B, 0xA4, 0xF0,  // .....k..
                /* 01B8 */  0x6F, 0x11, 0x46, 0xF6, 0xA9, 0xE1, 0xB5, 0x21,  // o.F....!
                /* 01C0 */  0x81, 0x0F, 0x1E, 0x81, 0xB1, 0x43, 0xB5, 0x5F,  // .....C._
                /* 01C8 */  0x01, 0x08, 0xC1, 0xA3, 0x3D, 0x0A, 0x3C, 0x7B,  // ....=.<{
                /* 01D0 */  0x44, 0x78, 0xDC, 0xC0, 0xFC, 0xFF, 0x8F, 0x1B,  // Dx......
                /* 01D8 */  0xB0, 0x09, 0x8A, 0x1C, 0x20, 0x7A, 0x0C, 0xFC,  // .... z..
                /* 01E0 */  0x04, 0x71, 0x0A, 0xF1, 0xC3, 0x1F, 0xC3, 0x11,  // .q......
                /* 01E8 */  0x45, 0x89, 0x7C, 0x48, 0x3E, 0x9C, 0x18, 0xE1,  // E.|H>...
                /* 01F0 */  0x10, 0x9E, 0x49, 0xCE, 0xC0, 0x07, 0x0C, 0x4F,  // ..I....O
                /* 01F8 */  0xEB, 0x14, 0x5E, 0x24, 0x3C, 0x02, 0x4C, 0xA0,  // ..^$<.L.
                /* 0200 */  0x43, 0x0C, 0x8D, 0xB2, 0x7E, 0x45, 0x80, 0x41,  // C...~E.A
                /* 0208 */  0x9D, 0x63, 0x00, 0x57, 0x30, 0xCF, 0x31, 0xE0,  // .c.W0.1.
                /* 0210 */  0x3B, 0x3E, 0xF0, 0x6B, 0x00, 0xE6, 0x7C, 0xF2,  // ;>.k..|.
                /* 0218 */  0x14, 0x03, 0x07, 0x97, 0x81, 0xBC, 0x04, 0xC4,  // ........
                /* 0220 */  0x79, 0x77, 0xF1, 0xCD, 0xC4, 0xD7, 0x02, 0xE3,  // yw......
                /* 0228 */  0x3E, 0xC4, 0x80, 0x61, 0x60, 0x0F, 0x31, 0xE0,  // >..a`.1.
                /* 0230 */  0xFC, 0xFF, 0x1F, 0x62, 0xE0, 0x05, 0x3F, 0xC4,  // ...b..?.
                /* 0238 */  0x00, 0x34, 0x91, 0x77, 0xBE, 0x90, 0x91, 0x55,  // .4.w...U
                /* 0240 */  0xF8, 0x10, 0x83, 0xBA, 0x21, 0x9C, 0xCF, 0x43,  // ....!..C
                /* 0248 */  0xCA, 0xD3, 0x01, 0x93, 0x73, 0xCE, 0xA0, 0x87,  // ....s...
                /* 0250 */  0x18, 0xE0, 0x01, 0x88, 0xF7, 0x3E, 0x65, 0x32,  // .....>e2
                /* 0258 */  0x82, 0x33, 0x35, 0xA0, 0x51, 0x7D, 0xAE, 0x00,  // .35.Q}..
                /* 0260 */  0xC7, 0x79, 0x82, 0xFF, 0xFF, 0xCF, 0x13, 0x18,  // .y......
                /* 0268 */  0xBC, 0xD7, 0x0A, 0x76, 0x0C, 0x60, 0x67, 0x0A,  // ...v.`g.
                /* 0270 */  0x38, 0x57, 0x0A, 0x9F, 0x5A, 0x7C, 0x4E, 0xF0,  // 8W..Z|N.
                /* 0278 */  0x18, 0xF9, 0x58, 0x0C, 0x1A, 0xF2, 0x41, 0xC0,  // ..X...A.
                /* 0280 */  0x0B, 0xB4, 0xAC, 0xB3, 0x0D, 0x68, 0x2E, 0x13,  // .....h..
                /* 0288 */  0xCF, 0x3D, 0xD8, 0xA3, 0x0D, 0x18, 0x90, 0x2A,  // .=.....*
                /* 0290 */  0xBD, 0x05, 0xE8, 0x02, 0x82, 0x23, 0xF0, 0xC1,  // .....#..
                /* 0298 */  0x06, 0xF8, 0xC4, 0x3A, 0xD5, 0xD0, 0x30, 0x63,  // ...:..0c
                /* 02A0 */  0x54, 0x10, 0x18, 0xD4, 0xC1, 0x06, 0x70, 0x75,  // T.....pu
                /* 02A8 */  0xE8, 0xF0, 0xC1, 0x06, 0x3C, 0xFF, 0xFF, 0x11,  // ....<...
                /* 02B0 */  0xB2, 0xC1, 0x9C, 0x44, 0x98, 0xA3, 0x08, 0xF6,  // ...D....
                /* 02B8 */  0x2C, 0xE1, 0x9B, 0x0D, 0x78, 0xB0, 0xB1, 0x27,  // ,...x..'
                /* 02C0 */  0x1B, 0xB0, 0x9C, 0x09, 0x9E, 0x6C, 0x80, 0x49,  // .....l.I
                /* 02C8 */  0xF8, 0x93, 0x0D, 0x40, 0x1E, 0xD8, 0x27, 0x81,  // ...@..'.
                /* 02D0 */  0x77, 0x80, 0xFF, 0xFF, 0x93, 0x0D, 0x60, 0xF1,  // w.....`.
                /* 02D8 */  0x4A, 0x81, 0x3D, 0xD9, 0x40, 0x5E, 0xBC, 0x4E,  // J.=.@^.N
                /* 02E0 */  0x36, 0xE0, 0x3A, 0x03, 0x82, 0xED, 0x08, 0x02,  // 6.:.....
                /* 02E8 */  0xF3, 0x6C, 0x03, 0x9C, 0xCE, 0x80, 0xC0, 0xE1,  // .l......
                /* 02F0 */  0xFF, 0x7F, 0x06, 0x04, 0x1C, 0x9E, 0x5B, 0x9E,  // ......[.
                /* 02F8 */  0x01, 0xC1, 0x75, 0xF2, 0x64, 0x67, 0x40, 0x70,  // ..u.dg@p
                /* 0300 */  0xA1, 0x3C, 0x03, 0x02, 0x66, 0xFF, 0xFF, 0x67,  // .<..f..g
                /* 0308 */  0x40, 0xC0, 0xD2, 0xE9, 0x80, 0x9D, 0x01, 0x01,  // @.......
                /* 0310 */  0x4E, 0xFD, 0xFF, 0x2F, 0x20, 0xFC, 0x0C, 0x08,  // N../ ...
                /* 0318 */  0x30, 0xEC, 0x66, 0x03, 0x1B, 0x1B, 0x7B, 0xB2,  // 0.f...{.
                /* 0320 */  0x01, 0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xEF,  // ....w...
                /* 0328 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE9, 0x64, 0x03,  // ....0.d.
                /* 0330 */  0x58, 0xFB, 0xFF, 0x9F, 0x01, 0x01, 0x63, 0x67,  // X.....cg
                /* 0338 */  0x1B, 0x60, 0x75, 0x06, 0x04, 0xBC, 0xFF, 0xFF,  // .`u.....
                /* 0340 */  0xCF, 0x80, 0xF8, 0x63, 0xCB, 0x33, 0x20, 0xB8,  // ...c.3 .
                /* 0348 */  0x70, 0x9F, 0x01, 0xC1, 0x87, 0xF1, 0x0C, 0x08,  // p.......
                /* 0350 */  0xF0, 0xEF, 0x74, 0xC0, 0x8E, 0x36, 0xFC, 0xFF,  // ..t..6..
                /* 0358 */  0x7F, 0x06, 0x04, 0x18, 0x75, 0x10, 0x60, 0x67,  // ....u.`g
                /* 0360 */  0x40, 0xC0, 0xD3, 0xFF, 0xFF, 0x0C, 0x08, 0x58,  // @......X
                /* 0368 */  0xBB, 0xD9, 0xC0, 0xC6, 0xC6, 0x9E, 0x6C, 0xC0,  // ......l.
                /* 0370 */  0x72, 0x06, 0xC4, 0x9D, 0x6C, 0xC0, 0x7F, 0x06,  // r...l...
                /* 0378 */  0x04, 0x5C, 0xFD, 0xFF, 0xCF, 0x80, 0x80, 0x95,  // .\......
                /* 0380 */  0x93, 0x0D, 0xE0, 0xF1, 0x0C, 0x08, 0xF8, 0x39,  // .......9
                /* 0388 */  0x0A, 0xFC, 0xFF, 0x9F, 0x01, 0x01, 0x6E, 0xCD,  // ......n.
                /* 0390 */  0xE1, 0x19, 0x10, 0x5C, 0x33, 0xF3, 0x19, 0x10,  // ...\3...
                /* 0398 */  0x6C, 0xF7, 0x1A, 0x9F, 0x01, 0xC1, 0xFF, 0xFF,  // l.......
                /* 03A0 */  0x3F, 0x03, 0x02, 0xEC, 0x39, 0x1D, 0xB0, 0xA3,  // ?...9...
                /* 03A8 */  0x0D, 0xE0, 0xEE, 0xFF, 0x7F, 0x06, 0x04, 0xEC,  // ........
                /* 03B0 */  0x1C, 0x04, 0xD8, 0x19, 0x10, 0xE0, 0xD6, 0xFF,  // ........
                /* 03B8 */  0xFF, 0x66, 0x03, 0x1F, 0x1B, 0x7B, 0xB2, 0x01,  // .f...{..
                /* 03C0 */  0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xFF, 0x19,  // ...w....
                /* 03C8 */  0x10, 0x60, 0xD0, 0xC9, 0x06, 0xF6, 0xFF, 0xFF,  // .`......
                /* 03D0 */  0x0C, 0x08, 0x30, 0xE9, 0x6C, 0x03, 0xAC, 0xCE,  // ..0.l...
                /* 03D8 */  0x80, 0xC0, 0xEF, 0xFF, 0x7F, 0x06, 0x04, 0x3C,  // .......<
                /* 03E0 */  0xDD, 0x5B, 0x9E, 0x01, 0xC1, 0x85, 0xFB, 0x0C,  // .[......
                /* 03E8 */  0x08, 0x3E, 0x88, 0x67, 0x40, 0xC0, 0xFA, 0xFF,  // .>.g@...
                /* 03F0 */  0xFF, 0x0C, 0x08, 0x98, 0x38, 0x1D, 0xB0, 0x33,  // ....8..3
                /* 03F8 */  0x20, 0xC0, 0xAC, 0x83, 0x00, 0x3B, 0xD8, 0xE0,  //  ....;..
                /* 0400 */  0xFF, 0xFF, 0x67, 0x40, 0x80, 0x4D, 0x37, 0x1B,  // ..g@.M7.
                /* 0408 */  0xD8, 0xD8, 0xD8, 0x93, 0x0D, 0x58, 0xCE, 0x80,  // .....X..
                /* 0410 */  0xB8, 0x93, 0x0D, 0xF8, 0xCF, 0x80, 0x70, 0xFE,  // ......p.
                /* 0418 */  0xFF, 0x67, 0x40, 0x80, 0x2D, 0x27, 0x1B, 0xC0,  // .g@.-'..
                /* 0420 */  0xE3, 0x95, 0x02, 0xF3, 0xFF, 0x3F, 0x03, 0x02,  // .....?..
                /* 0428 */  0x56, 0xCE, 0x36, 0xC0, 0xEA, 0x0C, 0x08, 0xF0,  // V.6.....
                /* 0430 */  0xE0, 0xE0, 0xF2, 0x66, 0x83, 0xF9, 0xFF, 0x9F,  // ...f....
                /* 0438 */  0x01, 0xC1, 0x80, 0xFB, 0x0C, 0x08, 0xBE, 0xFB,  // ........
                /* 0440 */  0xC1, 0x33, 0x20, 0xC0, 0xBF, 0xD3, 0x01, 0x3B,  // .3 ....;
                /* 0448 */  0xDA, 0x80, 0xE3, 0xFF, 0x7F, 0x06, 0x04, 0x58,  // .......X
                /* 0450 */  0x73, 0x10, 0x60, 0x67, 0x40, 0xC0, 0xE1, 0xFF,  // s.`g@...
                /* 0458 */  0xFF, 0x0C, 0x08, 0x98, 0xB9, 0xD9, 0xC0, 0xC6,  // ........
                /* 0460 */  0xC6, 0x9E, 0x6C, 0xC0, 0x72, 0x06, 0xC4, 0x9D,  // ..l.r...
                /* 0468 */  0x6C, 0xC0, 0x7F, 0x06, 0x04, 0x3C, 0xFE, 0xFF,  // l....<..
                /* 0470 */  0xCF, 0x80, 0xC0, 0xFC, 0x64, 0x03, 0x78, 0x3C,  // ....d.x<
                /* 0478 */  0x03, 0x02, 0x7E, 0xCE, 0x36, 0xB0, 0xFF, 0xFF,  // ..~.6...
                /* 0480 */  0x67, 0x40, 0x80, 0x3F, 0xDE, 0xCE, 0x80, 0x20,  // g@.?... 
                /* 0488 */  0xC3, 0x7D, 0x06, 0x04, 0xDF, 0xFD, 0xE0, 0x19,  // .}......
                /* 0490 */  0x10, 0xD8, 0xFD, 0xFF, 0xCF, 0x80, 0x00, 0x43,  // .......C
                /* 0498 */  0x4E, 0x07, 0xEC, 0x0C, 0x08, 0x78, 0xFD, 0xFF,  // N....x..
                /* 04A0 */  0x9F, 0x01, 0x01, 0x03, 0x07, 0x01, 0x76, 0x06,  // ......v.
                /* 04A8 */  0x04, 0xD8, 0x75, 0xB3, 0x81, 0xF9, 0xFF, 0xBF,  // ..u.....
                /* 04B0 */  0x60, 0xC1, 0x38, 0xD9, 0x80, 0xE5, 0x0C, 0x88,  // `.8.....
                /* 04B8 */  0x3B, 0xD9, 0x80, 0xFF, 0x0C, 0x08, 0x30, 0xE8,  // ;.....0.
                /* 04C0 */  0x64, 0x03, 0xE6, 0xFF, 0xFF, 0x19, 0x10, 0x60,  // d......`
                /* 04C8 */  0xCB, 0xD9, 0x06, 0x58, 0x9D, 0x01, 0x81, 0xFB,  // ...X....
                /* 04D0 */  0xFF, 0xFF, 0x0C, 0x08, 0xB8, 0x38, 0x1A, 0x3C,  // .....8.<
                /* 04D8 */  0x03, 0x82, 0xEB, 0x96, 0xE0, 0x33, 0x20, 0xD8,  // .....3 .
                /* 04E0 */  0xEE, 0x07, 0xCF, 0x80, 0x00, 0x23, 0xFE, 0xFF,  // .....#..
                /* 04E8 */  0x67, 0x40, 0x60, 0x7B, 0x3A, 0x60, 0x67, 0x40,  // g@`{:`g@
                /* 04F0 */  0x80, 0x59, 0x07, 0x01, 0x76, 0xB0, 0x01, 0xD7,  // .Y..v...
                /* 04F8 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE6, 0x66, 0x03,  // ....0.f.
                /* 0500 */  0x1B, 0x1B, 0x7B, 0xB2, 0x01, 0xCB, 0x19, 0x10,  // ..{.....
                /* 0508 */  0x77, 0xB2, 0x01, 0xFF, 0x19, 0x10, 0x7C, 0xFF,  // w.....|.
                /* 0510 */  0xFF, 0x33, 0x20, 0xC0, 0x88, 0x93, 0x0D, 0xE0,  // .3 .....
                /* 0518 */  0xF1, 0x0C, 0x08, 0x96, 0xFF, 0xFF, 0x19, 0x10,  // ........
                /* 0520 */  0x98, 0x9F, 0x6D, 0x80, 0x55, 0xB4, 0x83, 0x0D,  // ..m.U...
                /* 0528 */  0x2A, 0xCC, 0xD9, 0x06, 0x10, 0x3D, 0xEF, 0x87,  // *....=..
                /* 0530 */  0x0F, 0x1F, 0x0C, 0x7C, 0x10, 0xC0, 0xDC, 0x6C,  // ...|...l
                /* 0538 */  0xE0, 0xDC, 0x2A, 0x7C, 0x5D, 0xF1, 0x41, 0xC4,  // ..*|].A.
                /* 0540 */  0x87, 0x07, 0xF6, 0xFF, 0x87, 0x8A, 0x13, 0x9E,  // ........
                /* 0548 */  0x9F, 0x1C, 0x7C, 0xB6, 0x81, 0x7D, 0x9A, 0x79,  // ..|..}.y
                /* 0550 */  0x08, 0xC4, 0x21, 0x3C, 0xDB, 0x80, 0xFD, 0x4D,  // ..!<...M
                /* 0558 */  0xE1, 0x63, 0x81, 0xCF, 0x36, 0x00, 0x3F, 0x44,  // .c..6.?D
                /* 0560 */  0x1C, 0x30, 0xE4, 0x64, 0x3C, 0xA8, 0x51, 0x58,  // .0.d<.QX
                /* 0568 */  0xE3, 0x25, 0x81, 0x4C, 0xDB, 0x04, 0x43, 0x43,  // .%.L..CC
                /* 0570 */  0xE8, 0xB4, 0xE4, 0xB3, 0x0D, 0x38, 0xFF, 0xFF,  // .....8..
                /* 0578 */  0x67, 0x1B, 0x70, 0x9E, 0x4E, 0xF0, 0x67, 0x1B,  // g.p.N.g.
                /* 0580 */  0x30, 0x9D, 0x25, 0x30, 0x04, 0x1E, 0x32, 0xFC,  // 0.%0..2.
                /* 0588 */  0xD3, 0x0C, 0x3F, 0x3E, 0xBC, 0x3F, 0x24, 0xF0,  // ..?>.?$.
                /* 0590 */  0xB9, 0x0F, 0x6C, 0xA7, 0x0E, 0x38, 0x87, 0x19,  // ..l..8..
                /* 0598 */  0x60, 0x32, 0x26, 0xDC, 0x91, 0xC2, 0x43, 0xE0,  // `2&...C.
                /* 05A0 */  0x03, 0x68, 0x75, 0x7E, 0xE4, 0x58, 0x78, 0x56,  // .hu~.XxV
                /* 05A8 */  0xB8, 0xB3, 0x0C, 0x1F, 0x15, 0xE6, 0x74, 0x83,  // ......t.
                /* 05B0 */  0x8B, 0xF2, 0x3E, 0x30, 0x81, 0x82, 0xBC, 0x0B,  // ..>0....
                /* 05B8 */  0x24, 0xF2, 0x81, 0x40, 0x61, 0x7C, 0xBA, 0x01,  // $..@a|..
                /* 05C0 */  0x8E, 0xFF, 0xFF, 0xD3, 0x0D, 0xF0, 0x98, 0xA4,  // ........
                /* 05C8 */  0x4F, 0x37, 0x60, 0x83, 0x88, 0x18, 0xAC, 0x68,  // O7`....h
                /* 05D0 */  0x30, 0xDD, 0x9A, 0x70, 0xB7, 0x1B, 0x1C, 0x5E,  // 0..p...^
                /* 05D8 */  0xB8, 0x18, 0xA7, 0xC3, 0x10, 0xA2, 0x3C, 0xB0,  // ......<.
                /* 05E0 */  0x18, 0x99, 0x1F, 0x03, 0xC1, 0x70, 0x9B, 0x79,  // .....p.y
                /* 05E8 */  0xB6, 0x01, 0x2E, 0xE1, 0x0E, 0x05, 0xFA, 0x43,  // .......C
                /* 05F0 */  0xF9, 0x6C, 0x03, 0xF8, 0xFC, 0xFF, 0x9F, 0x6D,  // .l.....m
                /* 05F8 */  0x80, 0xCF, 0x41, 0x04, 0x77, 0x32, 0x01, 0xC3,  // ..A.w2..
                /* 0600 */  0x89, 0x01, 0xD6, 0xB1, 0x0D, 0xB8, 0x88, 0x5B,  // .......[
                /* 0608 */  0xA9, 0x4E, 0x3B, 0x16, 0x06, 0x22, 0x1B, 0x87,  // .N;.."..
                /* 0610 */  0x45, 0x3A, 0x54, 0x0B, 0xA1, 0xD2, 0x90, 0x7C,  // E:T....|
                /* 0618 */  0x04, 0x3A, 0xBB, 0x47, 0x85, 0xE7, 0x04, 0x01,  // .:.G....
                /* 0620 */  0x09, 0xD4, 0x10, 0x0E, 0x0F, 0xA1, 0xE8, 0xA3,  // ........
                /* 0628 */  0xA1, 0xC0, 0x0E, 0x0B, 0x46, 0x41, 0x3C, 0x7A,  // ....FA<z
                /* 0630 */  0x07, 0x81, 0xD0, 0xA1, 0x08, 0x7F, 0x62, 0xF0,  // ......b.
                /* 0638 */  0x7C, 0xDE, 0xF8, 0x4D, 0xF0, 0xB0, 0xF1, 0xB4,  // |..M....
                /* 0640 */  0x00, 0xEB, 0x62, 0xE0, 0x63, 0x00, 0x3F, 0x13,  // ..b.c.?.
                /* 0648 */  0xE2, 0x0F, 0xFD, 0x26, 0xE0, 0xC7, 0x1E, 0xF0,  // ...&....
                /* 0650 */  0x09, 0x3C, 0x0D, 0x80, 0x02, 0xC8, 0x93, 0xF7,  // .<......
                /* 0658 */  0xB1, 0xE6, 0x01, 0x80, 0xCD, 0xE1, 0xC9, 0xC6,  // ........
                /* 0660 */  0x68, 0xFF, 0xFF, 0x47, 0x1A, 0x9C, 0x8C, 0x95,  // h..G....
                /* 0668 */  0xEA, 0x4B, 0xE3, 0x33, 0xA3, 0xC7, 0xC5, 0xCF,  // .K.3....
                /* 0670 */  0x03, 0x3E, 0xB8, 0xB0, 0xB3, 0x01, 0xEE, 0x0C,  // .>......
                /* 0678 */  0x85, 0x81, 0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2,  // ...H9...
                /* 0680 */  0x1E, 0xF0, 0x43, 0x83, 0x2F, 0x1C, 0x9E, 0x99,  // ..C./...
                /* 0688 */  0xCF, 0x28, 0x3E, 0x6A, 0x80, 0xE5, 0x38, 0x05,  // .(>j..8.
                /* 0690 */  0xFF, 0xB0, 0x82, 0x3B, 0xC9, 0xC0, 0x9D, 0xE6,  // ...;....
                /* 0698 */  0x23, 0xC1, 0xA3, 0x9E, 0x87, 0x1E, 0xDE, 0x47,  // #......G
                /* 06A0 */  0x18, 0xCF, 0x2E, 0x88, 0xAF, 0x9D, 0xFC, 0xF2,  // ........
                /* 06A8 */  0x7D, 0x5A, 0xBE, 0xEF, 0xF8, 0xE8, 0x63, 0xA0,  // }Z....c.
                /* 06B0 */  0x27, 0x86, 0xA8, 0xAF, 0x27, 0x9E, 0x00, 0xBF,  // '...'...
                /* 06B8 */  0x50, 0x38, 0xC6, 0xA9, 0x88, 0x06, 0x5A, 0xA9,  // P8....Z.
                /* 06C0 */  0xA4, 0xAE, 0x99, 0xC2, 0xF8, 0x54, 0x04, 0xB8,  // .....T..
                /* 06C8 */  0x8A, 0x30, 0x78, 0x50, 0xFC, 0xFF, 0x4F, 0x45,  // .0xP..OE
                /* 06D0 */  0xD8, 0x1B, 0x86, 0x2F, 0x03, 0x3E, 0x14, 0x81,  // .../.>..
                /* 06D8 */  0xE5, 0x40, 0xE2, 0x89, 0xBD, 0x04, 0xF8, 0xDC,  // .@......
                /* 06E0 */  0x80, 0xC3, 0x39, 0x03, 0x7E, 0x32, 0x02, 0xC3,  // ..9.~2..
                /* 06E8 */  0x5D, 0xFB, 0xC9, 0x08, 0xB8, 0x44, 0x3B, 0x19,  // ]....D;.
                /* 06F0 */  0x01, 0x34, 0x39, 0xDF, 0xE1, 0xFE, 0xFF, 0x27,  // .49....'
                /* 06F8 */  0x23, 0x30, 0x9C, 0x1A, 0x60, 0x1C, 0x8C, 0x80,  // #0..`...
                /* 0700 */  0x8B, 0xA4, 0x83, 0x11, 0x95, 0x73, 0x30, 0x82,  // .....s0.
                /* 0708 */  0x72, 0x84, 0xC0, 0x1D, 0x8C, 0xC0, 0x3F, 0xA6,  // r.....?.
                /* 0710 */  0x33, 0x7A, 0x1D, 0x38, 0x75, 0x1F, 0x8C, 0x00,  // 3z.8u...
                /* 0718 */  0x73, 0xC3, 0xF5, 0xC1, 0x08, 0xF8, 0xFC, 0xFF,  // s.......
                /* 0720 */  0x0F, 0x46, 0xC0, 0xE5, 0x70, 0xE1, 0x83, 0x11,  // .F..p...
                /* 0728 */  0xB8, 0x0F, 0x0B, 0xFC, 0x10, 0x83, 0x25, 0x28,  // ......%(
                /* 0730 */  0xFE, 0x35, 0x64, 0x02, 0x85, 0x5A, 0xA4, 0x24,  // .5d..Z.$
                /* 0738 */  0x2F, 0x97, 0xC2, 0xF8, 0x4C, 0x04, 0xB8, 0x8A,  // /...L...
                /* 0740 */  0x71, 0x26, 0x02, 0x21, 0xC6, 0xE3, 0xB1, 0x11,  // q&.!....
                /* 0748 */  0xCF, 0x38, 0x6C, 0xB8, 0xE7, 0x8B, 0xA7, 0x22,  // .8l...."
                /* 0750 */  0xB0, 0xCF, 0xE1, 0x0C, 0xFA, 0xBC, 0x6E, 0xE9,  // ......n.
                /* 0758 */  0x54, 0x84, 0xFF, 0xFF, 0x9F, 0x8A, 0x60, 0x1C,  // T.....`.
                /* 0760 */  0x83, 0x9E, 0x8A, 0x80, 0x4B, 0xBC, 0x53, 0x11,  // ....K.S.
                /* 0768 */  0x40, 0x93, 0x13, 0xC4, 0x53, 0x11, 0xB8, 0xCE,  // @...S...
                /* 0770 */  0x0D, 0x30, 0xCF, 0x45, 0xE0, 0xFB, 0xFF, 0x9F,  // .0.E....
                /* 0778 */  0x8B, 0xE0, 0x3E, 0x08, 0x7C, 0x18, 0x22, 0xE7,  // ..>.|.".
                /* 0780 */  0x22, 0x74, 0x78, 0x2A, 0x1D, 0x22, 0x70, 0xB1,  // "tx*."p.
                /* 0788 */  0xCF, 0x45, 0x74, 0xD8, 0x0E, 0x4C, 0xA2, 0x43,  // .Et..L.C
                /* 0790 */  0xBD, 0xCF, 0x45, 0x3C, 0xE6, 0x91, 0x86, 0x82,  // ..E<....
                /* 0798 */  0x18, 0xD0, 0x19, 0xCE, 0x45, 0x68, 0x15, 0xE7,  // ....Eh..
                /* 07A0 */  0x22, 0xE4, 0x20, 0xDF, 0x16, 0xD8, 0xEC, 0x7C,  // ". ....|
                /* 07A8 */  0x0F, 0xE0, 0x37, 0x15, 0x5F, 0x8B, 0x18, 0x6E,  // ..7._..n
                /* 07B0 */  0x35, 0xD7, 0x1D, 0x14, 0x98, 0x6F, 0x45, 0x18,  // 5....oE.
                /* 07B8 */  0x5D, 0xA7, 0x22, 0x90, 0xE9, 0xBB, 0x14, 0x81,  // ].".....
                /* 07C0 */  0x1C, 0x9D, 0x9F, 0xA8, 0xC0, 0x87, 0xFF, 0x3C,  // .......<
                /* 07C8 */  0xE0, 0x21, 0x3C, 0x51, 0xC1, 0x3D, 0x13, 0xBC,  // .!<Q.=..
                /* 07D0 */  0xF5, 0xF8, 0x44, 0x05, 0xFB, 0x90, 0x4B, 0x4E,  // ..D...KN
                /* 07D8 */  0x54, 0x40, 0xE3, 0xFF, 0x7F, 0xA2, 0x02, 0x5F,  // T@....._
                /* 07E0 */  0xEC, 0x13, 0x15, 0xA0, 0xE7, 0x08, 0x82, 0x3B,  // .......;
                /* 07E8 */  0xB9, 0x82, 0xF5, 0x98, 0x81, 0x51, 0x68, 0xD3,  // .....Qh.
                /* 07F0 */  0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28,  // .F.V...(
                /* 07F8 */  0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xBB,  // ..V.J...
                /* 0800 */  0x0F, 0x58, 0xE2, 0x3B, 0x41, 0xC3, 0x75, 0x40,  // .X.;A.u@
                /* 0808 */  0x10, 0x1A, 0x89, 0x42, 0x20, 0x8E, 0xF2, 0xA7,  // ...B ...
                /* 0810 */  0x10, 0x88, 0x85, 0x78, 0x00, 0x61, 0x42, 0x57,  // ...x.aBW
                /* 0818 */  0x24, 0x10, 0x8B, 0x5B, 0x9B, 0x40, 0x1C, 0x0D,  // $..[.@..
                /* 0820 */  0x84, 0x46, 0x5F, 0x9D, 0x40, 0x1C, 0xD8, 0x07,  // .F_.@...
                /* 0828 */  0x08, 0x93, 0xFB, 0x26, 0x10, 0x88, 0xE3, 0x18,  // ...&....
                /* 0830 */  0x01, 0x61, 0x11, 0x5E, 0x54, 0x3A, 0x06, 0x10,  // .a.^T:..
                /* 0838 */  0x2B, 0x20, 0x4C, 0xA0, 0x16, 0x10, 0x26, 0xCB,  // + L...&.
                /* 0840 */  0x0C, 0x08, 0x0B, 0x05, 0x42, 0x43, 0x7F, 0x39,  // ....BC.9
                /* 0848 */  0x04, 0xE2, 0xA0, 0x76, 0x40, 0x98, 0x4C, 0x3D,  // ...v@.L=
                /* 0850 */  0x20, 0x2C, 0x86, 0x1F, 0x10, 0x26, 0x5E, 0xD1,  //  ,...&^.
                /* 0858 */  0x60, 0x28, 0x08, 0x95, 0xF6, 0xE6, 0xD2, 0x61,  // `(.....a
                /* 0860 */  0x82, 0x78, 0x02, 0x61, 0x61, 0x40, 0xE8, 0xFF,  // .x.aa@..
                /* 0868 */  0x3F, 0xAC, 0x28, 0x10, 0x16, 0xD1, 0xD5, 0x60,  // ?.(....`
                /* 0870 */  0xE8, 0xDB, 0x40, 0x20, 0x0E, 0xF0, 0x4C, 0x0A,  // ..@ ..L.
                /* 0878 */  0x42, 0x44, 0x3F, 0x25, 0x04, 0xE2, 0xC8, 0x20,  // BD?%... 
                /* 0880 */  0x54, 0xD2, 0x1F, 0x42, 0x43, 0x25, 0x7F, 0xA5,  // T..BC%..
                /* 0888 */  0x83, 0x61, 0x20, 0x34, 0xE6, 0x83, 0xE9, 0x50,  // .a 4...P
                /* 0890 */  0xD9, 0x5F, 0x4B, 0x20, 0x16, 0xA6, 0x0E, 0x84,  // ._K ....
                /* 0898 */  0x09, 0x77, 0x37, 0x54, 0xFA, 0x19, 0xD1, 0x60,  // .w7T...`
                /* 08A0 */  0x08, 0x08, 0x15, 0xF3, 0xA8, 0xD0, 0x50, 0xC9,  // ......P.
                /* 08A8 */  0x83, 0x22, 0x08, 0x91, 0x0F, 0x42, 0xE3, 0xBD,  // ."...B..
                /* 08B0 */  0x04, 0x34, 0x54, 0xF2, 0x21, 0xD0, 0x60, 0xC8,  // .4T.!.`.
                /* 08B8 */  0x1B, 0x47, 0x20, 0x96, 0xFC, 0x4A, 0xD3, 0x50,  // .G ..J.P
                /* 08C0 */  0xC9, 0x43, 0x41, 0x20, 0x0E, 0x09, 0x42, 0x45,  // .CA ..BE
                /* 08C8 */  0xBC, 0x72, 0x82, 0x90, 0xF0, 0xCF, 0x8B, 0x20,  // .r..... 
                /* 08D0 */  0x44, 0xBA, 0xD1, 0x41, 0xD0, 0xE7, 0xC5, 0x83,  // D..A....
                /* 08D8 */  0x01, 0xB3, 0x0A, 0xC2, 0x04, 0x69, 0x1D, 0x36,  // .....i.6
                /* 08E0 */  0x7D, 0x28, 0x14, 0xF0, 0x15, 0xD0, 0xE1, 0x20,  // }(..... 
                /* 08E8 */  0x88, 0x80, 0x2C, 0xD2, 0xED, 0x80, 0x29, 0x08,  // ..,...).
                /* 08F0 */  0x15, 0x63, 0x17, 0x90, 0x49, 0x03, 0x11, 0x90,  // .c..I...
                /* 08F8 */  0xE3, 0x0A, 0x06, 0x61, 0x62, 0x5F, 0x14, 0x41,  // ...ab_.A
                /* 0900 */  0x48, 0xAE, 0xE7, 0x51, 0x40, 0x12, 0x12, 0x44,  // H..Q@..D
                /* 0908 */  0xC7, 0x03, 0xF2, 0x84, 0x13, 0x90, 0xC3, 0x81,  // ........
                /* 0910 */  0x08, 0xC8, 0xFF, 0x7F                           // ....
            })
            Name (WMIP, Zero)
            Method (INIT, 1, NotSerialized)
            {
                WMIP = One
                ATKP = One
                WINI (Arg0)
                Return (Zero)
            }

            Name (PCDV, Zero)
            Method (WDOG, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    PCDV = PTIM /* \PTIM */
                    Return (0x3C)
                }

                If ((Arg0 == One))
                {
                    If (^^LID._LID ())
                    {
                        PCDV = PTIM /* \PTIM */
                        Return (One)
                    }

                    If ((\_TZ.RLTM () < PTMP))
                    {
                        PCDV = PTIM /* \PTIM */
                        Return (One)
                    }

                    PCDV--
                    If ((PCDV == Zero))
                    {
                        PCDV = PTIM /* \PTIM */
                        NTFY (0x6D)
                    }

                    Return (One)
                }

                Return (Zero)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                Return (Arg0)
            }

            Method (WMIG, 3, Serialized)
            {
                AGFN (Arg0)
                Local0 = CWMI (Arg0)
                If ((Local0 == Zero))
                {
                    Return (Zero)
                }

                Local1 = ((Local0 >> 0x10) & 0xFFFF)
                Local0 &= 0xFFFF
                If (CWAC (Arg0))
                {
                    Return (Zero)
                }

                If (((Local0 == 0x15) && (Local1 == 0x05)))
                {
                    WSMI (Arg2)
                    Return (Zero)
                }

                If (((Local0 == 0x64) | (Local0 == 0x67)))
                {
                    WSMI (Arg2)
                    Return (Zero)
                }

                Local2 = GLEN (Arg0)
                WGLN (Arg0, Arg1, Local0, Local1, Arg2)
                OperationRegion (\WMIF, SystemMemory, Arg0, 0x0100)
                Field (WMIF, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    REST,   8
                }

                If ((STAS != One))
                {
                    Return (Zero)
                }

                STAS = 0x82
                REST = One
                Return (Zero)
            }

            Method (CWMI, 1, NotSerialized)
            {
                OperationRegion (\WMID, SystemMemory, Arg0, 0x0100)
                Field (WMID, DWordAcc, NoLock, Preserve)
                {
                    FUNC,   32, 
                    LEN,    16, 
                    STAS,   8, 
                    REST,   8
                }

                If (((REST & One) == Zero))
                {
                    Return (Zero)
                }

                STAS = One
                REST = Zero
                Return (FUNC) /* \_SB_.WMI0.CWMI.FUNC */
            }

            Method (CWAC, 1, NotSerialized)
            {
                OperationRegion (\WMIC, SystemMemory, Arg0, 0x0100)
                Field (WMIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    REST,   8
                }

                ISMI (0xDE)
                Return (REST) /* \_SB_.WMI0.CWAC.REST */
            }

            Method (WINI, 1, NotSerialized)
            {
            }

            Method (WGLN, 5, NotSerialized)
            {
                WFLH (Arg0, Arg1, Arg2, Arg3, Arg4)
                OWST (Arg0, Arg1, Arg2, Arg3, Arg4)
                BBSF (Arg0, Arg1, Arg2, Arg3, Arg4)
                HWID (Arg0, Arg1, Arg2, Arg3, Arg4)
                MF6A (Arg0, Arg1, Arg2, Arg3, Arg4)
            }

            Method (MF20, 4, NotSerialized)
            {
                If ((Arg1 == 0x20))
                {
                    OperationRegion (F020, SystemMemory, Arg0, 0x08)
                    Field (F020, DWordAcc, NoLock, Preserve)
                    {
                        MFUN,   16, 
                        SFUN,   16, 
                        LEN,    16, 
                        STAS,   8, 
                        EROR,   8
                    }

                    BSMI (Arg0)
                    STAS &= 0xFE
                }
            }

            Method (AGFN, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (GNBF) /* \GNBF */
                }

                Local0 = AGFB (Arg0)
                Local1 = ((Local0 >> 0x10) & 0xFFFF)
                Local0 &= 0xFFFF
                Local2 = GLEN (Arg0)
                If ((Local0 == One))
                {
                    GVER (Arg0, Local2)
                    STAS &= 0xFE
                }

                If ((Local0 == 0x02))
                {
                    BSMI (Arg0)
                    STAS &= 0xFE
                }

                AGLN (Arg0, Local0, Local1, Local2)
                OperationRegion (\PARM, SystemMemory, Arg0, 0x08)
                Field (PARM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8
                }

                If ((STAS == One))
                {
                    EROR = One
                    STAS |= 0x02
                }

                STAS &= 0xFE
                STAS |= 0x80
                Return (Zero)
            }

            Method (AGFB, 1, NotSerialized)
            {
                OperationRegion (\PAR, SystemMemory, Arg0, 0x08)
                Field (PAR, DWordAcc, NoLock, Preserve)
                {
                    FUNC,   32, 
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8
                }

                EROR = Zero
                STAS = One
                Return (FUNC) /* \_SB_.WMI0.AGFB.FUNC */
            }

            Method (GLEN, 1, NotSerialized)
            {
                OperationRegion (\PARL, SystemMemory, Arg0, 0x08)
                Field (PARL, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    LEN,    16
                }

                Return (LEN) /* \_SB_.WMI0.GLEN.LEN_ */
            }

            Method (GVER, 2, NotSerialized)
            {
                OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
                Field (FGVR, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    APID,   16, 
                    APRV,   32
                }

                If ((Arg1 < 0x0E))
                {
                    Return (0x02)
                }

                If ((APID & One))
                {
                    ^^PCI0.LPCB.EC0.PKEN (One)
                }
                Else
                {
                    ^^PCI0.LPCB.EC0.PKEN (Zero)
                }

                Return (Zero)
            }

            Method (GENS, 1, NotSerialized)
            {
            }

            Method (GENW, 1, NotSerialized)
            {
                RTCW = Zero
            }

            Method (BSMI, 1, Serialized)
            {
                BIPA = Arg0
                ISMI (0xD8)
            }

            Method (OFBD, 1, NotSerialized)
            {
                Name (FBDT, Package (0x05)
                {
                    0xF0, 
                    0xF1, 
                    0xF2, 
                    0xF3, 
                    0xF6
                })
                Local0 = Match (FBDT, MEQ, Arg0, MTR, Zero, Zero)
                If ((Local0 < Ones)){}
                Local0++
                Return (Local0)
            }

            Method (GBRV, 0, NotSerialized)
            {
                Name (BBUF, Buffer (0x0E)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                BBUF [Zero] = ToDecimalString (BIMA)
                BBUF [One] = 0x2E
                Divide (BIMI, 0x0A, Local0, Local1)
                BBUF [0x02] = ToDecimalString (Local1)
                BBUF [0x03] = ToDecimalString (Local0)
                Return (BBUF) /* \_SB_.WMI0.GBRV.BBUF */
            }

            Method (GBMN, 0, NotSerialized)
            {
                Local0 = "VG10F"
                Return (Local0)
            }

            Method (GERV, 0, NotSerialized)
            {
                Name (BBUF, Buffer (0x0E)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                BBUF [Zero] = ToDecimalString (ECMA)
                BBUF [One] = 0x2E
                Divide (ECMI, 0x0A, Local0, Local1)
                BBUF [0x02] = ToDecimalString (Local1)
                BBUF [0x03] = ToDecimalString (Local0)
                Return (BBUF) /* \_SB_.WMI0.GERV.BBUF */
            }

            Method (HWSP, 4, NotSerialized)
            {
                If ((Arg1 == 0x21))
                {
                    If ((Arg2 == One))
                    {
                        OperationRegion (HW11, SystemMemory, Arg0, Arg3)
                        Field (HW11, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x06), 
                            HS1S,   8, 
                            HS1E,   8, 
                            HS1F,   8, 
                            HREV,   16, 
                            Offset (0x10), 
                            PO1S,   8, 
                            WO2B,   8, 
                            US3L,   8, 
                            US4S,   8, 
                            WO5N,   8, 
                            BI6N,   8, 
                            WL7W,   8, 
                            IM8D,   8, 
                            KB9L,   8, 
                            KBAT,   8, 
                            KBBZ,   8, 
                            FNCT,   8, 
                            FNDB,   8, 
                            ESET,   8, 
                            SIFS,   8, 
                            FS0B,   8, 
                            US1S,   8, 
                            PO2D,   8, 
                            FNKM,   8, 
                            US43,   8, 
                            CD5P,   8, 
                            EDPD,   8, 
                            RSV0,   80
                        }

                        Name (FUSD, Buffer (0x0A)
                        {
                            /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0008 */  0xFF, 0xFF                                       // ..
                        })
                        CopyObject (FUSD, RSV0) /* \_SB_.WMI0.HWSP.RSV0 */
                        If ((HS1F == Zero))
                        {
                            SWMF = 0x21
                            SWSF = One
                            PAR0 = HS1F /* \_SB_.WMI0.HWSP.HS1F */
                            ISMI (0xD5)
                            HREV = 0x02
                            PO1S = DA00 /* \DA00 */
                            WO2B = DA01 /* \DA01 */
                            US3L = DA02 /* \DA02 */
                            US4S = DA03 /* \DA03 */
                            WO5N = DA04 /* \DA04 */
                            BI6N = DA05 /* \DA05 */
                            WL7W = DA06 /* \DA06 */
                            IM8D = DA07 /* \DA07 */
                            KB9L = DA08 /* \DA08 */
                            KBAT = DA09 /* \DA09 */
                            KBBZ = DA10 /* \DA10 */
                            FNCT = DA11 /* \DA11 */
                            FNDB = DA12 /* \DA12 */
                            ESET = DA13 /* \DA13 */
                            SIFS = DA14 /* \DA14 */
                            FS0B = DA15 /* \DA15 */
                            US1S = DA16 /* \DA16 */
                            PO2D = DA17 /* \DA17 */
                            If ((DA18 == Zero))
                            {
                                FNKM = One
                            }
                            Else
                            {
                                FNKM = Zero
                            }

                            US43 = DA19 /* \DA19 */
                            CD5P = DA20 /* \DA20 */
                            EDPD = DA21 /* \DA21 */
                        }

                        If ((HS1F == One))
                        {
                            HREV = 0x02
                            DA00 = PO1S /* \_SB_.WMI0.HWSP.PO1S */
                            DA01 = WO2B /* \_SB_.WMI0.HWSP.WO2B */
                            DA02 = US3L /* \_SB_.WMI0.HWSP.US3L */
                            DA03 = US4S /* \_SB_.WMI0.HWSP.US4S */
                            DA04 = WO5N /* \_SB_.WMI0.HWSP.WO5N */
                            DA05 = BI6N /* \_SB_.WMI0.HWSP.BI6N */
                            DA06 = WL7W /* \_SB_.WMI0.HWSP.WL7W */
                            DA07 = IM8D /* \_SB_.WMI0.HWSP.IM8D */
                            DA08 = KB9L /* \_SB_.WMI0.HWSP.KB9L */
                            DA09 = KBAT /* \_SB_.WMI0.HWSP.KBAT */
                            DA10 = KBBZ /* \_SB_.WMI0.HWSP.KBBZ */
                            DA11 = FNCT /* \_SB_.WMI0.HWSP.FNCT */
                            DA12 = FNDB /* \_SB_.WMI0.HWSP.FNDB */
                            DA13 = ESET /* \_SB_.WMI0.HWSP.ESET */
                            DA14 = SIFS /* \_SB_.WMI0.HWSP.SIFS */
                            DA15 = FS0B /* \_SB_.WMI0.HWSP.FS0B */
                            DA16 = US1S /* \_SB_.WMI0.HWSP.US1S */
                            DA17 = PO2D /* \_SB_.WMI0.HWSP.PO2D */
                            If ((FNKM == Zero))
                            {
                                DA18 = One
                            }
                            Else
                            {
                                DA18 = Zero
                            }

                            DA19 = US43 /* \_SB_.WMI0.HWSP.US43 */
                            DA20 = CD5P /* \_SB_.WMI0.HWSP.CD5P */
                            DA21 = EDPD /* \_SB_.WMI0.HWSP.EDPD */
                            SWMF = 0x21
                            SWSF = One
                            PAR0 = HS1F /* \_SB_.WMI0.HWSP.HS1F */
                            ISMI (0xD5)
                        }

                        If ((HS1F == 0x02))
                        {
                            HREV = 0x02
                            SWMF = 0x21
                            SWSF = One
                            PAR0 = HS1F /* \_SB_.WMI0.HWSP.HS1F */
                            ISMI (0xD5)
                            PO1S = DA00 /* \DA00 */
                            WO2B = DA01 /* \DA01 */
                            US3L = DA02 /* \DA02 */
                            US4S = DA03 /* \DA03 */
                            WO5N = DA04 /* \DA04 */
                            BI6N = DA05 /* \DA05 */
                            WL7W = DA06 /* \DA06 */
                            IM8D = DA07 /* \DA07 */
                            KB9L = DA08 /* \DA08 */
                            KBAT = DA09 /* \DA09 */
                            KBBZ = DA10 /* \DA10 */
                            FNCT = DA11 /* \DA11 */
                            FNDB = DA12 /* \DA12 */
                            ESET = DA13 /* \DA13 */
                            SIFS = DA14 /* \DA14 */
                            FS0B = DA15 /* \DA15 */
                            US1S = DA16 /* \DA16 */
                            PO2D = DA17 /* \DA17 */
                            If ((DA18 == Zero))
                            {
                                FNKM = One
                            }
                            Else
                            {
                                FNKM = Zero
                            }

                            US43 = DA19 /* \DA19 */
                            CD5P = DA20 /* \DA20 */
                            EDPD = DA21 /* \DA21 */
                        }

                        HS1S = 0x80
                        HS1E = Zero
                    }
                    ElseIf ((Arg2 < 0x03))
                    {
                        SWMF = 0x21
                        SWSF = 0x02
                        BAPI = Arg0
                        ISMI (0xD5)
                    }
                }
            }

            Method (OWST, 5, NotSerialized)
            {
                If (((Arg2 == 0x21) && (Arg3 == 0x03)))
                {
                    SWMF = 0x21
                    SWSF = 0x03
                    BAPI = Arg0
                    XMIS = Arg4
                    ISMI (0xD5)
                }
            }

            Method (BBSF, 5, NotSerialized)
            {
                If ((Arg2 == 0x21))
                {
                    If ((Arg3 == 0x04))
                    {
                        SWMF = 0x21
                        SWSF = 0x04
                        BAPI = Arg0
                        ISMI (0xD5)
                        Return (Zero)
                    }
                }
            }

            Method (HWID, 5, NotSerialized)
            {
                If ((Arg2 == 0x17))
                {
                    If ((Arg3 == 0x04))
                    {
                        SWMF = 0x17
                        SWSF = 0x04
                        BAPI = Arg0
                        ISMI (0xD5)
                    }
                }
            }

            Method (WOEM, 1, NotSerialized)
            {
            }

            Method (FSMI, 1, NotSerialized)
            {
                FSFN = Arg0
                Local0 = (Arg0 | 0xA0)
                ISMI (0xDC)
                Return (FSTA) /* \FSTA */
            }

            Method (FLSH, 1, NotSerialized)
            {
                FSTA = Arg0
                FSMI (Zero)
            }

            Method (FINI, 1, NotSerialized)
            {
                FADR = Arg0
                Return (FSMI (One))
            }

            Method (FERS, 1, NotSerialized)
            {
                FSTA = Arg0
                Return (FSMI (0x02))
            }

            Method (FWRI, 1, NotSerialized)
            {
                FADR = Arg0
                FSIZ = 0x1000
                Return ((0x1000 - FSMI (0x03)))
            }

            Method (FWRP, 0, NotSerialized)
            {
                FSIZ = Zero
                Return ((0x1000 - FSMI (0x03)))
            }

            Method (FEBW, 1, NotSerialized)
            {
                FADR = Arg0
                Return (FSMI (0x04))
            }

            Method (FEBR, 1, NotSerialized)
            {
                FADR = Arg0
                Return (FSMI (0x05))
            }

            Method (FEDW, 0, NotSerialized)
            {
                Return (FSMI (0x06))
            }

            Method (ECSR, 1, NotSerialized)
            {
                FSTA = Arg0
                Return (FSMI (0x07))
            }

            Method (FLSC, 1, NotSerialized)
            {
                FSTA = Arg0
                Return (FSMI (0x08))
            }

            Method (WFLH, 5, Serialized)
            {
                If ((Arg2 == 0x66))
                {
                    If ((Arg3 == One))
                    {
                        OperationRegion (WFLS, SystemMemory, Arg0, 0x0100)
                        Field (WFLS, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x06), 
                            STAS,   8, 
                            REST,   8, 
                            FSFN,   8, 
                            FSTA,   16, 
                            FADR,   32, 
                            FSIZ,   16
                        }

                        TRTY = 0xDC
                        \FSFN = FSFN /* \_SB_.WMI0.WFLH.FSFN */
                        \FSTA = FSTA /* \_SB_.WMI0.WFLH.FSTA */
                        \FADR = FADR /* \_SB_.WMI0.WFLH.FADR */
                        \FSIZ = FSIZ /* \_SB_.WMI0.WFLH.FSIZ */
                        If ((FSFN == One))
                        {
                            \FADR = Arg1
                        }
                        ElseIf ((FSFN == 0x80))
                        {
                            \FADR = Arg1
                            Local0 = 0x012C
                            While ((Local0 && TRTY))
                            {
                                Sleep (One)
                                Local0--
                            }
                        }

                        ISMI (0xDC)
                        FSFN = \FSFN
                        FSTA = \FSTA
                        FADR = \FADR
                        FSIZ = \FSIZ
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (Zero)
                    }
                    Else
                    {
                        WSMI (Arg4)
                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Zero)
            }

            Method (FIN2, 1, NotSerialized)
            {
                FSTA = Zero
                Return (FSMI (0x80))
            }

            Method (AGLN, 4, NotSerialized)
            {
                MF1X (Arg0, Arg1, Arg2, Arg3)
                MF63 (Arg0, Arg1, Arg2, Arg3)
                MF30 (Arg0, Arg1, Arg2, Arg3)
                HWSP (Arg0, Arg1, Arg2, Arg3)
                XPAP (Arg0, Arg1, Arg2, Arg3)
                MF1F (Arg0, Arg1, Arg2, Arg3)
            }

            Method (MF63, 4, NotSerialized)
            {
                If ((Arg1 != 0x63))
                {
                    Return (Zero)
                }

                If ((Arg2 == One))
                {
                    M631 (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    M632 (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    M633 (Arg0, Arg1)
                }

                If ((Arg2 == 0x04))
                {
                    M634 (Arg0, Arg1)
                }

                If ((Arg2 == 0x05))
                {
                    M635 (Arg0, Arg1)
                }

                If ((Arg2 == 0x06))
                {
                    M636 (Arg0, Arg1)
                }

                If ((Arg2 == 0x07))
                {
                    M637 (Arg0, Arg1)
                }

                If ((Arg2 == 0x08))
                {
                    M638 (Arg0, Arg1)
                }

                If ((Arg2 == 0x09))
                {
                    M639 (Arg0, Arg1)
                }

                If ((Arg2 == 0x0A))
                {
                    M63A (Arg0, Arg1)
                }

                If ((Arg2 == 0x0B))
                {
                    M63B (Arg0, Arg1)
                }

                If ((Arg2 == 0x0C))
                {
                    M63C (Arg0, Arg1)
                }

                If ((Arg2 == 0x0D))
                {
                    M63D (Arg0, Arg1)
                }

                If ((Arg2 == 0x0E))
                {
                    M63E (Arg0, Arg1)
                }

                Return (Zero)
            }

            Method (M631, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    TSXR,   8, 
                    TSXL,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    TSXR = ^^PCI0.LPCB.EC0.RRAM (0x03E2)
                    TSXL = ^^PCI0.LPCB.EC0.RRAM (0x03E3)
                }
                ElseIf ((FUNC == One))
                {
                    TSXR = ^^PCI0.LPCB.EC0.RRAM (0x03E0)
                    TSXL = ^^PCI0.LPCB.EC0.RRAM (0x03E1)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M632, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    DEVS,   8, 
                    DEVT,   16
                }

                SM63 = 0x80
                EM63 = Zero
                If ((DEVS == Zero))
                {
                    DEVT = TJMX /* \TJMX */
                }
                ElseIf ((DEVS == One))
                {
                    DEVT = ^^PCI0.LPCB.EC0.PCPT /* \_SB_.PCI0.LPCB.EC0_.PCPT */
                }
                ElseIf ((DEVS == 0x02))
                {
                    If ((TBAB != Zero))
                    {
                        OperationRegion (TBLK, SystemMemory, TBAB, 0x0100)
                        Field (TBLK, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0xD8), 
                            PCHT,   8
                        }

                        DEVT = PCHT /* \_SB_.WMI0.M632.PCHT */
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M633, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FANX,   8, 
                    FANS,   8, 
                    FANT,   16, 
                    TRGG,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FANX == Zero))
                {
                    FANS = ^^PCI0.LPCB.EC0.F0CS /* \_SB_.PCI0.LPCB.EC0_.F0CS */
                    FANT = ^^PCI0.LPCB.EC0.F0TS /* \_SB_.PCI0.LPCB.EC0_.F0TS */
                    TRGG = ^^PCI0.LPCB.EC0.RRAM (0x0576)
                }
                ElseIf ((FANX == One))
                {
                    FANS = ^^PCI0.LPCB.EC0.F1CS /* \_SB_.PCI0.LPCB.EC0_.F1CS */
                    FANT = ^^PCI0.LPCB.EC0.F1TS /* \_SB_.PCI0.LPCB.EC0_.F1TS */
                    TRGG = ^^PCI0.LPCB.EC0.RRAM (0x0577)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M634, 2, Serialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    PARA,   8, 
                    DATA,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    Switch (ToInteger (PARA))
                    {
                        Case (Zero)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0521)
                        }
                        Case (One)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0522)
                        }
                        Case (0x02)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0523)
                        }
                        Case (0x03)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0524)
                        }
                        Case (0x04)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0518)
                        }
                        Case (0x05)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0519)
                        }
                        Case (0x06)
                        {
                            DATA = ^^PCI0.LPCB.EC0.RRAM (0x0568)
                        }
                        Default
                        {
                            SM63 = 0x80
                            EM63 = One
                        }

                    }
                }
                ElseIf ((FUNC == One))
                {
                    Switch (ToInteger (PARA))
                    {
                        Case (Zero)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0521, DATA)
                        }
                        Case (One)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0522, DATA)
                        }
                        Case (0x02)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0523, DATA)
                        }
                        Case (0x03)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0524, DATA)
                        }
                        Case (0x04)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0518, DATA)
                        }
                        Case (0x05)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0519, DATA)
                        }
                        Case (0x06)
                        {
                            ^^PCI0.LPCB.EC0.WRAM (0x0568, DATA)
                        }
                        Default
                        {
                            SM63 = 0x80
                            EM63 = One
                        }

                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M635, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    ECSD,   8, 
                    OSSD,   8, 
                    OSPV,   8, 
                    THON,   8, 
                    THOF,   8, 
                    FNER,   8, 
                    VGSD,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    ECSD = ^^PCI0.LPCB.EC0.RRAM (0x0530)
                    OSSD = ^^PCI0.LPCB.EC0.RRAM (0x0531)
                    OSPV = ^^PCI0.LPCB.EC0.RRAM (0x0532)
                    OSSD = ^^PCI0.LPCB.EC0.RRAM (0x03E4)
                    OSPV = ^^PCI0.LPCB.EC0.RRAM (0x03E5)
                    THON = ^^PCI0.LPCB.EC0.RRAM (0x0533)
                    THOF = ^^PCI0.LPCB.EC0.RRAM (0x0534)
                    FNER = ^^PCI0.LPCB.EC0.RRAM (0x0535)
                    VGSD = ^^PCI0.LPCB.EC0.RRAM (0x0536)
                }
                ElseIf ((FUNC == One))
                {
                    ^^PCI0.LPCB.EC0.WRAM (0x0530, ECSD)
                    ^^PCI0.LPCB.EC0.WRAM (0x0531, OSSD)
                    ^^PCI0.LPCB.EC0.WRAM (0x0532, OSPV)
                    ^^PCI0.LPCB.EC0.WRAM (0x03E4, OSSD)
                    ^^PCI0.LPCB.EC0.WRAM (0x03E5, OSPV)
                    ^^PCI0.LPCB.EC0.WRAM (0x0533, THON)
                    ^^PCI0.LPCB.EC0.WRAM (0x0534, THOF)
                    ^^PCI0.LPCB.EC0.WRAM (0x0535, FNER)
                    ^^PCI0.LPCB.EC0.WRAM (0x0536, VGSD)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M636, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    ALGM,   8, 
                    TTS1,   8, 
                    TTS2,   8, 
                    TTS3,   8, 
                    TTS4,   8, 
                    TTS5,   8, 
                    TTS6,   8, 
                    TTS7,   8, 
                    TTS8,   8, 
                    TFFP,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((ALGM == Zero))
                    {
                        TTS1 = ^^PCI0.LPCB.EC0.RRAM (0x0537)
                        TTS2 = ^^PCI0.LPCB.EC0.RRAM (0x0538)
                        TTS3 = ^^PCI0.LPCB.EC0.RRAM (0x0539)
                        TTS4 = ^^PCI0.LPCB.EC0.RRAM (0x053A)
                        TTS5 = ^^PCI0.LPCB.EC0.RRAM (0x053B)
                        TTS6 = ^^PCI0.LPCB.EC0.RRAM (0x053C)
                        TTS7 = ^^PCI0.LPCB.EC0.RRAM (0x053D)
                        TTS8 = ^^PCI0.LPCB.EC0.RRAM (0x053E)
                        TFFP = ^^PCI0.LPCB.EC0.RRAM (0x053F)
                    }
                    ElseIf ((ALGM == One))
                    {
                        TTS1 = ^^PCI0.LPCB.EC0.RRAM (0x0597)
                        TTS2 = ^^PCI0.LPCB.EC0.RRAM (0x0598)
                        TTS3 = ^^PCI0.LPCB.EC0.RRAM (0x0599)
                        TTS4 = ^^PCI0.LPCB.EC0.RRAM (0x059A)
                        TTS5 = ^^PCI0.LPCB.EC0.RRAM (0x059B)
                        TTS6 = ^^PCI0.LPCB.EC0.RRAM (0x059C)
                        TTS7 = ^^PCI0.LPCB.EC0.RRAM (0x059D)
                        TTS8 = ^^PCI0.LPCB.EC0.RRAM (0x059E)
                        TFFP = ^^PCI0.LPCB.EC0.RRAM (0x059F)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0537, TTS1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0538, TTS2)
                        ^^PCI0.LPCB.EC0.WRAM (0x0539, TTS3)
                        ^^PCI0.LPCB.EC0.WRAM (0x053A, TTS4)
                        ^^PCI0.LPCB.EC0.WRAM (0x053B, TTS5)
                        ^^PCI0.LPCB.EC0.WRAM (0x053C, TTS6)
                        ^^PCI0.LPCB.EC0.WRAM (0x053D, TTS7)
                        ^^PCI0.LPCB.EC0.WRAM (0x053E, TTS8)
                        ^^PCI0.LPCB.EC0.WRAM (0x053F, TFFP)
                    }
                    ElseIf ((ALGM == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0597, TTS1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0598, TTS2)
                        ^^PCI0.LPCB.EC0.WRAM (0x0599, TTS3)
                        ^^PCI0.LPCB.EC0.WRAM (0x059A, TTS4)
                        ^^PCI0.LPCB.EC0.WRAM (0x059B, TTS5)
                        ^^PCI0.LPCB.EC0.WRAM (0x059C, TTS6)
                        ^^PCI0.LPCB.EC0.WRAM (0x059D, TTS7)
                        ^^PCI0.LPCB.EC0.WRAM (0x059E, TTS8)
                        ^^PCI0.LPCB.EC0.WRAM (0x059F, TFFP)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Method (M637, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    ALGM,   8, 
                    TDA1,   8, 
                    TDA2,   8, 
                    TDA3,   8, 
                    TDA4,   8, 
                    TDA5,   8, 
                    TDA6,   8, 
                    TDA7,   8, 
                    TDA8,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((ALGM == Zero))
                    {
                        TDA1 = ^^PCI0.LPCB.EC0.RRAM (0x0548)
                        TDA2 = ^^PCI0.LPCB.EC0.RRAM (0x0549)
                        TDA3 = ^^PCI0.LPCB.EC0.RRAM (0x054A)
                        TDA4 = ^^PCI0.LPCB.EC0.RRAM (0x054B)
                        TDA5 = ^^PCI0.LPCB.EC0.RRAM (0x054C)
                        TDA6 = ^^PCI0.LPCB.EC0.RRAM (0x054D)
                        TDA7 = ^^PCI0.LPCB.EC0.RRAM (0x054E)
                        TDA8 = ^^PCI0.LPCB.EC0.RRAM (0x054F)
                    }
                    ElseIf ((ALGM == One))
                    {
                        TDA1 = ^^PCI0.LPCB.EC0.RRAM (0x05A8)
                        TDA2 = ^^PCI0.LPCB.EC0.RRAM (0x05A9)
                        TDA3 = ^^PCI0.LPCB.EC0.RRAM (0x05AA)
                        TDA4 = ^^PCI0.LPCB.EC0.RRAM (0x05AB)
                        TDA5 = ^^PCI0.LPCB.EC0.RRAM (0x05AC)
                        TDA6 = ^^PCI0.LPCB.EC0.RRAM (0x05AD)
                        TDA7 = ^^PCI0.LPCB.EC0.RRAM (0x05AE)
                        TDA8 = ^^PCI0.LPCB.EC0.RRAM (0x05AF)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0548, TDA1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0549, TDA2)
                        ^^PCI0.LPCB.EC0.WRAM (0x054A, TDA3)
                        ^^PCI0.LPCB.EC0.WRAM (0x054B, TDA4)
                        ^^PCI0.LPCB.EC0.WRAM (0x054C, TDA5)
                        ^^PCI0.LPCB.EC0.WRAM (0x054D, TDA6)
                        ^^PCI0.LPCB.EC0.WRAM (0x054E, TDA7)
                        ^^PCI0.LPCB.EC0.WRAM (0x054F, TDA8)
                    }
                    ElseIf ((ALGM == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x05A8, TDA1)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A9, TDA2)
                        ^^PCI0.LPCB.EC0.WRAM (0x05AA, TDA3)
                        ^^PCI0.LPCB.EC0.WRAM (0x05AB, TDA4)
                        ^^PCI0.LPCB.EC0.WRAM (0x05AC, TDA5)
                        ^^PCI0.LPCB.EC0.WRAM (0x05AD, TDA6)
                        ^^PCI0.LPCB.EC0.WRAM (0x05AE, TDA7)
                        ^^PCI0.LPCB.EC0.WRAM (0x05AF, TDA8)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Method (M638, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    ALGM,   8, 
                    ASC1,   8, 
                    ASC2,   8, 
                    ASC3,   8, 
                    ASC4,   8, 
                    ADA1,   8, 
                    ADA2,   8, 
                    ADA3,   8, 
                    ADA4,   8, 
                    DSC1,   8, 
                    DSC2,   8, 
                    DSC3,   8, 
                    DSC4,   8, 
                    DDA1,   8, 
                    DDA2,   8, 
                    DDA3,   8, 
                    DDA4,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((ALGM == Zero))
                    {
                        ASC1 = ^^PCI0.LPCB.EC0.RRAM (0x0550)
                        ASC2 = ^^PCI0.LPCB.EC0.RRAM (0x0551)
                        ASC3 = ^^PCI0.LPCB.EC0.RRAM (0x0552)
                        ASC4 = ^^PCI0.LPCB.EC0.RRAM (0x0553)
                        ADA1 = ^^PCI0.LPCB.EC0.RRAM (0x0554)
                        ADA2 = ^^PCI0.LPCB.EC0.RRAM (0x0555)
                        ADA3 = ^^PCI0.LPCB.EC0.RRAM (0x0556)
                        ADA4 = ^^PCI0.LPCB.EC0.RRAM (0x0557)
                        DSC1 = ^^PCI0.LPCB.EC0.RRAM (0x0558)
                        DSC2 = ^^PCI0.LPCB.EC0.RRAM (0x0559)
                        DSC3 = ^^PCI0.LPCB.EC0.RRAM (0x055A)
                        DSC4 = ^^PCI0.LPCB.EC0.RRAM (0x055B)
                        DDA1 = ^^PCI0.LPCB.EC0.RRAM (0x055C)
                        DDA2 = ^^PCI0.LPCB.EC0.RRAM (0x055D)
                        DDA3 = ^^PCI0.LPCB.EC0.RRAM (0x055E)
                        DDA4 = ^^PCI0.LPCB.EC0.RRAM (0x055F)
                    }
                    ElseIf ((ALGM == One))
                    {
                        ASC1 = ^^PCI0.LPCB.EC0.RRAM (0x05B0)
                        ASC2 = ^^PCI0.LPCB.EC0.RRAM (0x05B1)
                        ASC3 = ^^PCI0.LPCB.EC0.RRAM (0x05B2)
                        ASC4 = ^^PCI0.LPCB.EC0.RRAM (0x05B3)
                        ADA1 = ^^PCI0.LPCB.EC0.RRAM (0x05B4)
                        ADA2 = ^^PCI0.LPCB.EC0.RRAM (0x05B5)
                        ADA3 = ^^PCI0.LPCB.EC0.RRAM (0x05B6)
                        ADA4 = ^^PCI0.LPCB.EC0.RRAM (0x05B7)
                        DSC1 = ^^PCI0.LPCB.EC0.RRAM (0x05B8)
                        DSC2 = ^^PCI0.LPCB.EC0.RRAM (0x05B9)
                        DSC3 = ^^PCI0.LPCB.EC0.RRAM (0x05BA)
                        DSC4 = ^^PCI0.LPCB.EC0.RRAM (0x05BB)
                        DDA1 = ^^PCI0.LPCB.EC0.RRAM (0x05BC)
                        DDA2 = ^^PCI0.LPCB.EC0.RRAM (0x05BD)
                        DDA3 = ^^PCI0.LPCB.EC0.RRAM (0x05BE)
                        DDA4 = ^^PCI0.LPCB.EC0.RRAM (0x05BF)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0550, ASC1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0551, ASC2)
                        ^^PCI0.LPCB.EC0.WRAM (0x0552, ASC3)
                        ^^PCI0.LPCB.EC0.WRAM (0x0553, ASC4)
                        ^^PCI0.LPCB.EC0.WRAM (0x0554, ADA1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0555, ADA2)
                        ^^PCI0.LPCB.EC0.WRAM (0x0556, ADA3)
                        ^^PCI0.LPCB.EC0.WRAM (0x0557, ADA4)
                        ^^PCI0.LPCB.EC0.WRAM (0x0558, DSC1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0559, DSC2)
                        ^^PCI0.LPCB.EC0.WRAM (0x055A, DSC3)
                        ^^PCI0.LPCB.EC0.WRAM (0x055B, DSC4)
                        ^^PCI0.LPCB.EC0.WRAM (0x055C, DDA1)
                        ^^PCI0.LPCB.EC0.WRAM (0x055D, DDA2)
                        ^^PCI0.LPCB.EC0.WRAM (0x055E, DDA3)
                        ^^PCI0.LPCB.EC0.WRAM (0x055F, DDA4)
                    }
                    ElseIf ((ALGM == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x05B0, ASC1)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B1, ASC2)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B2, ASC3)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B3, ASC4)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B4, ADA1)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B5, ADA2)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B6, ADA3)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B7, ADA4)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B8, DSC1)
                        ^^PCI0.LPCB.EC0.WRAM (0x05B9, DSC2)
                        ^^PCI0.LPCB.EC0.WRAM (0x05BA, DSC3)
                        ^^PCI0.LPCB.EC0.WRAM (0x05BB, DSC4)
                        ^^PCI0.LPCB.EC0.WRAM (0x05BC, DDA1)
                        ^^PCI0.LPCB.EC0.WRAM (0x05BD, DDA2)
                        ^^PCI0.LPCB.EC0.WRAM (0x05BE, DDA3)
                        ^^PCI0.LPCB.EC0.WRAM (0x05BF, DDA4)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Method (M639, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    ALGM,   8, 
                    HYS1,   8, 
                    HYS2,   8, 
                    HYS3,   8, 
                    HYS4,   8, 
                    HYS5,   8, 
                    HYS6,   8, 
                    HYS7,   8, 
                    HYS8,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((ALGM == Zero))
                    {
                        HYS1 = ^^PCI0.LPCB.EC0.RRAM (0x0540)
                        HYS2 = ^^PCI0.LPCB.EC0.RRAM (0x0541)
                        HYS3 = ^^PCI0.LPCB.EC0.RRAM (0x0542)
                        HYS4 = ^^PCI0.LPCB.EC0.RRAM (0x0543)
                        HYS5 = ^^PCI0.LPCB.EC0.RRAM (0x0544)
                        HYS6 = ^^PCI0.LPCB.EC0.RRAM (0x0545)
                        HYS7 = ^^PCI0.LPCB.EC0.RRAM (0x0546)
                        HYS8 = ^^PCI0.LPCB.EC0.RRAM (0x0547)
                    }
                    ElseIf ((ALGM == One))
                    {
                        HYS1 = ^^PCI0.LPCB.EC0.RRAM (0x05A0)
                        HYS2 = ^^PCI0.LPCB.EC0.RRAM (0x05A1)
                        HYS3 = ^^PCI0.LPCB.EC0.RRAM (0x05A2)
                        HYS4 = ^^PCI0.LPCB.EC0.RRAM (0x05A3)
                        HYS5 = ^^PCI0.LPCB.EC0.RRAM (0x05A4)
                        HYS6 = ^^PCI0.LPCB.EC0.RRAM (0x05A5)
                        HYS7 = ^^PCI0.LPCB.EC0.RRAM (0x05A6)
                        HYS8 = ^^PCI0.LPCB.EC0.RRAM (0x05A7)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0540, HYS1)
                        ^^PCI0.LPCB.EC0.WRAM (0x0541, HYS2)
                        ^^PCI0.LPCB.EC0.WRAM (0x0542, HYS3)
                        ^^PCI0.LPCB.EC0.WRAM (0x0543, HYS4)
                        ^^PCI0.LPCB.EC0.WRAM (0x0544, HYS5)
                        ^^PCI0.LPCB.EC0.WRAM (0x0545, HYS6)
                        ^^PCI0.LPCB.EC0.WRAM (0x0546, HYS7)
                        ^^PCI0.LPCB.EC0.WRAM (0x0547, HYS8)
                    }
                    ElseIf ((ALGM == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x05A0, HYS1)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A1, HYS2)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A2, HYS3)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A3, HYS4)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A4, HYS5)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A5, HYS6)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A6, HYS7)
                        ^^PCI0.LPCB.EC0.WRAM (0x05A7, HYS8)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M63A, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    FANX,   8, 
                    TA1L,   8, 
                    TA1H,   8, 
                    TA2L,   8, 
                    TA2H,   8, 
                    TA3L,   8, 
                    TA3H,   8, 
                    TA4L,   8, 
                    TA4H,   8, 
                    TA5L,   8, 
                    TA5H,   8, 
                    TA6L,   8, 
                    TA6H,   8, 
                    TA7L,   8, 
                    TA7H,   8, 
                    TA8L,   8, 
                    TA8H,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((FANX == Zero))
                    {
                        TA1L = ^^PCI0.LPCB.EC0.RRAM (0x05C0)
                        TA1H = ^^PCI0.LPCB.EC0.RRAM (0x05C1)
                        TA2L = ^^PCI0.LPCB.EC0.RRAM (0x05C2)
                        TA2H = ^^PCI0.LPCB.EC0.RRAM (0x05C3)
                        TA3L = ^^PCI0.LPCB.EC0.RRAM (0x05C4)
                        TA3H = ^^PCI0.LPCB.EC0.RRAM (0x05C5)
                        TA4L = ^^PCI0.LPCB.EC0.RRAM (0x05C6)
                        TA4H = ^^PCI0.LPCB.EC0.RRAM (0x05C7)
                        TA5L = ^^PCI0.LPCB.EC0.RRAM (0x05C8)
                        TA5H = ^^PCI0.LPCB.EC0.RRAM (0x05C9)
                        TA6L = ^^PCI0.LPCB.EC0.RRAM (0x05CA)
                        TA6H = ^^PCI0.LPCB.EC0.RRAM (0x05CB)
                        TA7L = ^^PCI0.LPCB.EC0.RRAM (0x05CC)
                        TA7H = ^^PCI0.LPCB.EC0.RRAM (0x05CD)
                        TA8L = ^^PCI0.LPCB.EC0.RRAM (0x05CE)
                        TA8H = ^^PCI0.LPCB.EC0.RRAM (0x05CF)
                    }
                    ElseIf ((FANX == One))
                    {
                        TA1L = ^^PCI0.LPCB.EC0.RRAM (0x05D0)
                        TA1H = ^^PCI0.LPCB.EC0.RRAM (0x05D1)
                        TA2L = ^^PCI0.LPCB.EC0.RRAM (0x05D2)
                        TA2H = ^^PCI0.LPCB.EC0.RRAM (0x05D3)
                        TA3L = ^^PCI0.LPCB.EC0.RRAM (0x05D4)
                        TA3H = ^^PCI0.LPCB.EC0.RRAM (0x05D5)
                        TA4L = ^^PCI0.LPCB.EC0.RRAM (0x05D6)
                        TA4H = ^^PCI0.LPCB.EC0.RRAM (0x05D7)
                        TA5L = ^^PCI0.LPCB.EC0.RRAM (0x05D8)
                        TA5H = ^^PCI0.LPCB.EC0.RRAM (0x05D9)
                        TA6L = ^^PCI0.LPCB.EC0.RRAM (0x05DA)
                        TA6H = ^^PCI0.LPCB.EC0.RRAM (0x05DB)
                        TA7L = ^^PCI0.LPCB.EC0.RRAM (0x05DC)
                        TA7H = ^^PCI0.LPCB.EC0.RRAM (0x05DD)
                        TA8L = ^^PCI0.LPCB.EC0.RRAM (0x05DE)
                        TA8H = ^^PCI0.LPCB.EC0.RRAM (0x05DF)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((FANX == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x05C0, TA1L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C1, TA1H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C2, TA2L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C3, TA2H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C4, TA3L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C5, TA3H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C6, TA4L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C7, TA4H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C8, TA5L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05C9, TA5H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05CA, TA6L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05CB, TA6H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05CC, TA7L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05CD, TA7H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05CE, TA8L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05CF, TA8H)
                    }
                    ElseIf ((FANX == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x05D0, TA1L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D1, TA1H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D2, TA2L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D3, TA2H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D4, TA3L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D5, TA3H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D6, TA4L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D7, TA4H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D8, TA5L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05D9, TA5H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05DA, TA6L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05DB, TA6H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05DC, TA7L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05DD, TA7H)
                        ^^PCI0.LPCB.EC0.WRAM (0x05DE, TA8L)
                        ^^PCI0.LPCB.EC0.WRAM (0x05DF, TA8H)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M63B, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    PARA,   8, 
                    DATA,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((PARA == Zero))
                    {
                        DATA = ^^PCI0.LPCB.EC0.RRAM (0x0569)
                    }
                    ElseIf ((PARA == One))
                    {
                        DATA = ^^PCI0.LPCB.EC0.RRAM (0x056A)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((PARA == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0569, DATA)
                    }
                    ElseIf ((PARA == One))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x056A, DATA)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M63C, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x20)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    DATA,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    DATA = ^^PCI0.LPCB.EC0.RRAM (0x0511)
                }
                ElseIf ((FUNC == One))
                {
                    DATA = ^^PCI0.LPCB.EC0.RRAM (0x0512)
                }
                ElseIf ((FUNC == 0x02))
                {
                    DATA = ^^PCI0.LPCB.EC0.RRAM (0x0513)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M63D, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    FREQ,   16
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    Local0 = 0x017D7840
                    Local1 = ^^PCI0.LPCB.EC0.RRAM (0xF4A0)
                    Local1 += One
                    Local2 = ^^PCI0.LPCB.EC0.RRAM (0xF4A2)
                    Local2 += One
                    Local2 *= Local1
                    Divide (Local0, Local2, Local3, Local1)
                    FREQ = Local1
                }
                ElseIf ((FUNC == One))
                {
                    FREQ = Zero
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (M63E, 2, NotSerialized)
            {
                OperationRegion (FM63, SystemMemory, Arg0, 0x10)
                Field (FM63, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM63,   8, 
                    EM63,   8, 
                    FUNC,   8, 
                    FANX,   8, 
                    FAND,   8
                }

                SM63 |= 0x80
                EM63 = Zero
                If ((FUNC == Zero))
                {
                    If ((FANX == Zero))
                    {
                        FAND = ^^PCI0.LPCB.EC0.RFOV (Zero)
                    }
                    ElseIf ((FANX == One))
                    {
                        FAND = ^^PCI0.LPCB.EC0.RFOV (One)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                ElseIf ((FUNC == One))
                {
                    If ((FANX == Zero))
                    {
                        ^^PCI0.LPCB.EC0.WFOV (Zero, FAND)
                    }
                    ElseIf ((FANX == One))
                    {
                        ^^PCI0.LPCB.EC0.WFOV (One, FAND)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }

                Return (Zero)
            }

            Method (MF30, 4, NotSerialized)
            {
                OperationRegion (FM30, SystemMemory, Arg0, 0x08)
                Field (FM30, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM30,   8, 
                    EM30,   8
                }

                If ((Arg1 != 0x30))
                {
                    Return (Zero)
                }

                Local0 = 0xFF
                If ((Arg2 == Zero))
                {
                    Local0 = G30V (Arg0, Arg3)
                }

                If ((Arg2 == One))
                {
                    Local0 = EC01 (Arg0, Arg3)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = EC02 (Arg0, Arg3)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = EC03 (Arg0, Arg3)
                }

                If ((Arg2 == 0x80))
                {
                    Local0 = EC80 (Arg0, Arg3)
                }

                If ((Arg2 == 0x83))
                {
                    Local0 = EC83 (Arg0, Arg3)
                }

                If ((Arg2 == 0x84))
                {
                    Local0 = EC84 (Arg0, Arg3)
                }

                Local2 = (Arg2 & 0xFC)
                If ((Local2 == 0x80))
                {
                    BSMI (Arg0)
                    Return (Zero)
                }

                If ((Local0 == 0xFF))
                {
                    Return (Zero)
                }

                If (Local0)
                {
                    EM30 = Local0
                    SM30 |= 0x02
                }

                SM30 &= 0xFE
                SM30 |= 0x80
                Return (Zero)
            }

            Method (G30V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F300, SystemMemory, Arg0, Arg1)
                Field (F300, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (EC01, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (FEC1, SystemMemory, Arg0, Arg1)
                Field (FEC1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    ECMD,   8, 
                    EDA1,   8, 
                    EDA2,   8, 
                    EDA3,   8, 
                    EDA4,   8, 
                    EDA5,   8
                }

                Local0 = ^^PCI0.LPCB.EC0.ECXT (ECMD, EDA1, EDA2, EDA3, EDA4, EDA5)
                EDA1 = DerefOf (Local0 [One])
                EDA2 = DerefOf (Local0 [One])
                EDA3 = DerefOf (Local0 [One])
                EDA4 = DerefOf (Local0 [One])
                EDA5 = DerefOf (Local0 [One])
                Return (DerefOf (Local0 [Zero]))
            }

            Method (EC02, 2, NotSerialized)
            {
                Return (Zero)
            }

            Method (EC03, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                Local0 = Zero
                OperationRegion (FEC3, SystemMemory, Arg0, Arg1)
                Field (FEC3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    FNEN,   8
                }

                If (FNEN)
                {
                    ^^PCI0.LPCB.EC0.FNLK (One)
                }
                Else
                {
                    ^^PCI0.LPCB.EC0.FNLK (Zero)
                }

                Return (Zero)
            }

            Method (EC80, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (ECEG, SystemMemory, Arg0, Arg1)
                Field (ECEG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    EVTP,   8, 
                    EVID,   8
                }

                ^^PCI0.LPCB.EC0.ECXT (0xAE, EVTP, EVID, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (EC83, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (ECEG, SystemMemory, Arg0, Arg1)
                Field (ECEG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    EVTP,   8, 
                    EVID,   8
                }

                ^^PCI0.LPCB.EC0.ECXT (0xAE, EVTP, EVID, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (EC84, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (ECEG, SystemMemory, Arg0, Arg1)
                Field (ECEG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    EVTP,   8, 
                    EVID,   8
                }

                ^^PCI0.LPCB.EC0.ECXT (0xAE, EVTP, EVID, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (PSTC, 1, Serialized)
            {
                Return (Zero)
            }

            Method (GBTL, 0, Serialized)
            {
                Return (Zero)
            }

            Method (SBTL, 1, Serialized)
            {
            }

            Method (WLED, 1, NotSerialized)
            {
            }

            Method (GPLV, 0, NotSerialized)
            {
                Return (BRTL) /* \BRTL */
            }

            Method (SPLV, 1, NotSerialized)
            {
            }

            Method (SDSP, 1, NotSerialized)
            {
                SWHG (Arg0)
            }

            Method (MF1X, 4, NotSerialized)
            {
                If (((Arg1 & 0xF0) != 0x10))
                {
                    Return (Zero)
                }

                OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
                Field (FM1X, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    SM1X,   8, 
                    EM1X,   8
                }

                Local0 = One
                If ((Arg1 == 0x10))
                {
                    Local0 = MF10 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x11))
                {
                    Local0 = MF11 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x12))
                {
                    Local0 = MF12 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x13))
                {
                    Local0 = MF13 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x14))
                {
                    Local0 = MF14 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x15))
                {
                    Local0 = MF15 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x16))
                {
                    Local0 = MF16 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x17))
                {
                    Local0 = MF17 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x18))
                {
                    Local0 = MF18 (Arg0, Arg3, Arg2)
                }

                If ((Arg1 == 0x19))
                {
                    Local0 = MF19 (Arg0, Arg3, Arg2)
                }

                SM1X &= 0xFE
                If (Local0)
                {
                    EM1X = Local0
                    SM1X |= 0x02
                }

                SM1X |= 0x80
                Return (Zero)
            }

            Method (MF10, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G10V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = SRTC (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G10V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F100, SystemMemory, Arg0, Arg1)
                Field (F100, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (SRTC, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F101, SystemMemory, Arg0, Arg1)
                Field (F101, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DLTM,   16
                }

                RTCW = DLTM /* \_SB_.WMI0.SRTC.DLTM */
                Return (Zero)
            }

            Method (MF11, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G11V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GBAT (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = ASBR (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = ASBE (Arg0, Arg1)
                }

                If ((Arg2 == 0x04))
                {
                    Local0 = BTCR (Arg0, Arg1)
                }

                If ((Arg2 == 0x80))
                {
                    Local0 = GTSB (Arg0, Arg1)
                }

                If ((Arg2 == 0x81))
                {
                    Local0 = GPST (Arg0, Arg1)
                }

                If ((Arg2 == 0x82))
                {
                    Local0 = SBSM (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G11V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F110, SystemMemory, Arg0, Arg1)
                Field (F100, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GBAT, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F111, SystemMemory, Arg0, Arg1)
                Field (F111, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BTNM,   8, 
                    BTTP,   8
                }

                BTNM = One
                BTTP = Zero
                Return (Zero)
            }

            Method (ASBR, 2, NotSerialized)
            {
                If ((Arg1 < 0x30))
                {
                    Return (0x02)
                }

                OperationRegion (\F112, SystemMemory, Arg0, Arg1)
                Field (F112, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BATN,   8, 
                    BATA,   8, 
                    REGS,   8, 
                    BDAT,   16, 
                    BLEN,   8, 
                    BREV,   16, 
                    BLK1,   32, 
                    BLK2,   32, 
                    BLK3,   32, 
                    BLK4,   32, 
                    BLK5,   32, 
                    BLK6,   32, 
                    BLK7,   32, 
                    BLK8,   32
                }

                If ((BATN >= One))
                {
                    Return (0x11)
                }

                If ((BATA == Zero))
                {
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, REGS, Zero)
                    BDAT = DerefOf (Local0 [0x02])
                    Local2 = DerefOf (Local0 [Zero])
                    Local2 &= 0x1F
                    If (Local2)
                    {
                        Local2 += 0x10
                    }

                    Return (Local2)
                }

                If ((BATA == One))
                {
                    Local0 = ^^PCI0.LPCB.EC0.SMBW (^^PCI0.LPCB.EC0.WRWD, ^^PCI0.LPCB.EC0.BADR, REGS, Zero, 0x02, BDAT)
                    Local2 = DerefOf (Local0 [Zero])
                    Local2 &= 0x1F
                    If (Local2)
                    {
                        Local2 += 0x10
                    }

                    Return (Local2)
                }

                If ((BATA == 0x02))
                {
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDBL, ^^PCI0.LPCB.EC0.BADR, REGS, Zero)
                    Name (BKUF, Buffer (0x20){})
                    CreateDWordField (BKUF, Zero, DAT1)
                    CreateDWordField (BKUF, 0x04, DAT2)
                    CreateDWordField (BKUF, 0x08, DAT3)
                    CreateDWordField (BKUF, 0x0C, DAT4)
                    CreateDWordField (BKUF, 0x10, DAT5)
                    CreateDWordField (BKUF, 0x14, DAT6)
                    CreateDWordField (BKUF, 0x18, DAT7)
                    CreateDWordField (BKUF, 0x1C, DAT8)
                    BKUF = DerefOf (Local0 [0x02])
                    BLK1 = DAT1 /* \_SB_.WMI0.ASBR.DAT1 */
                    BLK2 = DAT2 /* \_SB_.WMI0.ASBR.DAT2 */
                    BLK3 = DAT3 /* \_SB_.WMI0.ASBR.DAT3 */
                    BLK4 = DAT4 /* \_SB_.WMI0.ASBR.DAT4 */
                    BLK5 = DAT5 /* \_SB_.WMI0.ASBR.DAT5 */
                    BLK6 = DAT6 /* \_SB_.WMI0.ASBR.DAT6 */
                    BLK7 = DAT7 /* \_SB_.WMI0.ASBR.DAT7 */
                    BLK8 = DAT8 /* \_SB_.WMI0.ASBR.DAT8 */
                    BLEN = DerefOf (Local0 [One])
                    Local2 = DerefOf (Local0 [Zero])
                    Local2 &= 0x1F
                    If (Local2)
                    {
                        Local2 += 0x10
                    }

                    Return (Local2)
                }

                Return (0x10)
            }

            Method (ASBE, 2, Serialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F113, SystemMemory, Arg0, Arg1)
                Field (F113, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BATN,   8, 
                    BATA,   8, 
                    REGS,   8, 
                    BDAT,   8
                }

                If ((BATN > One))
                {
                    Return (0x11)
                }

                If ((BATA == Zero))
                {
                    Local2 = ^^PCI0.LPCB.EC0.RBEP (REGS)
                    Local3 = (Local2 & 0xFF)
                    BDAT = Local3
                    Local2 >>= 0x08
                    Local2 &= 0x1F
                    If (Local2)
                    {
                        Local2 += 0x10
                    }

                    Return (Local2)
                }

                If ((BATA == One))
                {
                    Local2 = ^^PCI0.LPCB.EC0.WBEP (REGS, BDAT)
                    Local2 &= 0x1F
                    If (Local2)
                    {
                        Local2 += 0x10
                    }

                    Return (Local2)
                }

                Return (0x10)
            }

            Method (BTCR, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F114, SystemMemory, Arg0, Arg1)
                Field (F114, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BCDC,   8
                }

                SBTL (BCDC)
                Return (Zero)
            }

            Method (GTSB, 2, NotSerialized)
            {
                If ((Arg1 < 0x0F))
                {
                    Return (0x02)
                }

                OperationRegion (\F118, SystemMemory, Arg0, Arg1)
                Field (F118, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BAST,   16
                }

                Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RDWD, ^^PCI0.LPCB.EC0.BADR, 0x16, Zero)
                BAST = DerefOf (Local0 [0x02])
                Local1 = DerefOf (Local0 [Zero])
                Local1 &= 0x1F
                If (Local1)
                {
                    Local1 += 0x10
                }

                Return (Local1)
            }

            Method (GPST, 2, NotSerialized)
            {
                If ((Arg1 < 0x0F))
                {
                    Return (0x02)
                }

                OperationRegion (\F119, SystemMemory, Arg0, Arg1)
                Field (F119, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SORC,   8, 
                    GPCT,   8
                }

                If (((SORC == Zero) | (SORC > 0x03)))
                {
                    Return (One)
                }

                If ((SORC == One)){}
                ElseIf ((SORC == 0x02))
                {
                    Local0 = DCPF /* \DCPF */
                    If (Local0)
                    {
                        GPCT = Zero
                    }
                    Else
                    {
                        GPCT = One
                    }
                }
                ElseIf ((SORC == 0x03))
                {
                    Local0 = Zero
                    If (Local0)
                    {
                        GPCT = Zero
                    }
                    Else
                    {
                        GPCT = One
                    }
                }

                Return (Zero)
            }

            Method (SBSM, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F11A, SystemMemory, Arg0, Arg1)
                Field (F11A, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    EADA,   8
                }

                If ((EADA == One))
                {
                    ^^PCI0.LPCB.EC0.ECSB (Zero, 0x08, 0x16, 0x35, 0x04, Zero)
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07FE)
                    Local0 |= 0x80
                    ^^PCI0.LPCB.EC0.WRAM (0x07FE, Local0)
                }
                ElseIf ((EADA == Zero))
                {
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07FE)
                    Local0 |= 0x80
                    ^^PCI0.LPCB.EC0.WRAM (0x07FE, Local0)
                    ^^PCI0.LPCB.EC0.ECSB (Zero, 0x08, 0x16, 0x35, 0x03, Zero)
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07FE)
                    Local0 &= 0x7F
                    ^^PCI0.LPCB.EC0.WRAM (0x07FE, Local0)
                }

                Return (Zero)
            }

            Method (MF12, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G12V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GLDI (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = LDCR (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G12V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F120, SystemMemory, Arg0, Arg1)
                Field (F120, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GLDI, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (\F121, SystemMemory, Arg0, Arg1)
                Field (F121, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    LDI0,   32, 
                    LDI1,   32
                }

                Local0 = Zero
                Local0 |= 0x10
                Local0 |= 0x20
                LDI0 = Local0
                Return (Zero)
            }

            Method (LDCR, 2, NotSerialized)
            {
                If ((Arg1 < 0x0B))
                {
                    Return (0x02)
                }

                OperationRegion (\F122, SystemMemory, Arg0, Arg1)
                Field (F122, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    LDNM,   8, 
                    LCRT,   8
                }

                If ((LDNM == 0x04))
                {
                    WLED (LCRT)
                    Return (Zero)
                }

                Return (0x10)
            }

            Method (MF13, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G13V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GTSI (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = GTSV (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = GVSN (Arg0, Arg1)
                }

                If ((Arg2 == 0x04))
                {
                    Local0 = GVSV (Arg0, Arg1)
                }

                If ((Arg2 == 0x05))
                {
                    Local0 = GFNN (Arg0, Arg1)
                }

                If ((Arg2 == 0x06))
                {
                    Local0 = GFNS (Arg0, Arg1)
                }

                If ((Arg2 == 0x07))
                {
                    Local0 = SFNS (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G13V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F130, SystemMemory, Arg0, Arg1)
                Field (F130, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GTSI, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F131, SystemMemory, Arg0, Arg1)
                Field (F131, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    THRI,   32
                }

                Local0 = Zero
                Local0 |= One
                If ((CPUN >= One))
                {
                    Local0 |= 0x0100
                }

                If ((CPUN >= 0x02))
                {
                    Local0 |= 0x0200
                }

                If ((CPUN >= 0x03))
                {
                    Local0 |= 0x0400
                }

                If ((CPUN >= 0x04))
                {
                    Local0 |= 0x0800
                }

                THRI = Local0
                Return (Zero)
            }

            Method (GTSV, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F132, SystemMemory, Arg0, Arg1)
                Field (F132, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    TSNM,   8, 
                    TSVL,   8, 
                    TSST,   8
                }

                TSST = Zero
                If ((TSNM == Zero))
                {
                    TSVL = \_TZ.RTMP ()
                    Return (Zero)
                }

                If ((TSNM == 0x08))
                {
                    BSMI (Arg0)
                    Return (Zero)
                }

                If ((TSNM == 0x09))
                {
                    BSMI (Arg0)
                    Return (Zero)
                }

                If ((TSNM == 0x0A))
                {
                    BSMI (Arg0)
                    Return (Zero)
                }

                If ((TSNM == 0x0B))
                {
                    BSMI (Arg0)
                    Return (Zero)
                }

                Return (0x10)
            }

            Method (GVSN, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F133, SystemMemory, Arg0, Arg1)
                Field (F133, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    NMVS,   8
                }

                NMVS = Zero
                Return (Zero)
            }

            Method (GVSV, 2, NotSerialized)
            {
                If ((Arg1 < 0x0B))
                {
                    Return (0x02)
                }

                OperationRegion (\F134, SystemMemory, Arg0, Arg1)
                Field (F134, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    VSNM,   8, 
                    VSVL,   16
                }

                If ((VSNM > Zero))
                {
                    Return (0x10)
                }

                Return (Zero)
            }

            Method (GFNN, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F135, SystemMemory, Arg0, Arg1)
                Field (F135, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    NMFN,   32
                }

                NMFN = One
                Return (Zero)
            }

            Method (GFNS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0D))
                {
                    Return (0x02)
                }

                OperationRegion (\F136, SystemMemory, Arg0, Arg1)
                Field (F136, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    FNNM,   8, 
                    GFNS,   32
                }

                If (((FNNM == Zero) | (FNNM > One)))
                {
                    Return (0x10)
                }

                Local0 = FNNM /* \_SB_.WMI0.GFNS.FNNM */
                GFNS = \_TZ.RFAN (Local0--)
                Return (Zero)
            }

            Method (SFNS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F137, SystemMemory, Arg0, Arg1)
                Field (F137, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    FNNB,   8, 
                    FNSP,   8
                }

                If ((FNNB > One))
                {
                    Return (0x10)
                }

                ^^PCI0.LPCB.EC0.SFNV (FNNB, FNSP)
                Return (Zero)
            }

            Method (MF14, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G14V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GNBT (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = GBTS (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G14V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F140, SystemMemory, Arg0, Arg1)
                Field (F140, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GNBT, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F141, SystemMemory, Arg0, Arg1)
                Field (F141, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    NBBT,   8
                }

                NBBT = 0x05
                Return (Zero)
            }

            Method (GBTS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F142, SystemMemory, Arg0, Arg1)
                Field (F142, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BTNM,   8, 
                    BTST,   8
                }

                Name (BTTB, Package (0x05)
                {
                    Package (0x04)
                    {
                        Zero, 
                        0x0C, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x0D, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x0E, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x0F, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x15, 
                        Zero, 
                        Zero
                    }
                })
                If ((BTNM > 0x05))
                {
                    Return (0x10)
                }

                Local0 = BTNM /* \_SB_.WMI0.GBTS.BTNM */
                Local0--
                Local1 = DerefOf (BTTB [Local0])
                If ((DerefOf (Local1 [0x02]) == Zero)){}
                If ((DerefOf (Local1 [One]) == One))
                {
                    Local2 = RGPL (DerefOf (Local1 [Zero]), One)
                }

                If ((DerefOf (Local1 [One]) == 0x03)){}
                If ((DerefOf (Local1 [0x02]) == Local2))
                {
                    BTST = Zero
                }
                Else
                {
                    BTST = One
                }

                Return (Zero)
            }

            Method (MF15, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G15V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GLDB (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = SLDB (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = GDPI (Arg0, Arg1)
                }

                If ((Arg2 == 0x04))
                {
                    Local0 = SODP (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G15V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F150, SystemMemory, Arg0, Arg1)
                Field (F150, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GLDB, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F151, SystemMemory, Arg0, Arg1)
                Field (F151, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    LCDB,   8, 
                    MLDB,   8
                }

                LCDB = GPLV ()
                MLDB = 0x0F
                Return (Zero)
            }

            Method (SLDB, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F152, SystemMemory, Arg0, Arg1)
                Field (F152, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    LCDL,   8, 
                    LTPE,   8
                }

                If ((LTPE == Zero))
                {
                    If ((LCDL >= 0x10))
                    {
                        Return (0x10)
                    }

                    SPLV (LCDL)
                    Return (Zero)
                }

                If ((LTPE == One))
                {
                    ^^PCI0.LPCB.EC0.SBRV (LCDL)
                    Return (Zero)
                }

                Return (0x11)
            }

            Method (GDPI, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (\F153, SystemMemory, Arg0, Arg1)
                Field (F153, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    ODPI,   32, 
                    ODPC,   32, 
                    ODAV,   32
                }

                Local0 = Zero
                Local0 |= One
                Local0 |= 0x02
                Local0 |= 0x10
                ODPI = Local0
                ODAV = ACTD /* \ACTD */
                ODPC = AVLD /* \AVLD */
                Return (Zero)
            }

            Method (SODP, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F154, SystemMemory, Arg0, Arg1)
                Field (F154, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    ODPM,   32
                }

                Local0 = Zero
                Local0 |= One
                Local0 |= 0x02
                Local0 |= 0x10
                Local0 &= ODPM
                If ((Local0 == ODPM))
                {
                    SDSP (ODPM)
                    Return (Zero)
                }

                Return (0x10)
            }

            Method (MF16, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G16V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = SFBD (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = LCMD (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = BSFN (Arg0, Arg1)
                }

                If ((Arg2 == 0x04))
                {
                    Local0 = PSSF (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G16V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F160, SystemMemory, Arg0, Arg1)
                Field (F160, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (SFBD, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F161, SystemMemory, Arg0, Arg1)
                Field (F161, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    NXBD,   8
                }

                If (OFBD (NXBD))
                {
                    UHDB = NXBD /* \_SB_.WMI0.SFBD.NXBD */
                    BSMI (Arg0)
                    Return (Zero)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (LCMD, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                BSMI (Arg0)
                FRPN = 0xAA55
                Return (Zero)
            }

            Method (BSFN, 2, NotSerialized)
            {
                BSMI (Arg0)
                Return (Zero)
            }

            Method (PSSF, 2, NotSerialized)
            {
                BSMI (Arg0)
                Return (Zero)
            }

            Method (MF17, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G17V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GMDL (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = GBSI (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = GECI (Arg0, Arg1)
                }

                If ((Arg2 == 0x05))
                {
                    Local0 = GMEI (Arg0, Arg1, Arg2)
                }

                Return (Local0)
            }

            Method (G17V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F170, SystemMemory, Arg0, Arg1)
                Field (F170, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GMDL, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F171, SystemMemory, Arg0, Arg1)
                Field (F171, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    MLEN,   8, 
                    MDL1,   32, 
                    MDL2,   32, 
                    MDL3,   32, 
                    MDL4,   32
                }

                MDL1 = Zero
                MDL2 = Zero
                MDL3 = Zero
                MDL4 = Zero
                Name (BBUF, Buffer (0x10){})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GBMN ()
                MLEN = SizeOf (Local0)
                BBUF = GBMN ()
                MDL1 = DAT1 /* \_SB_.WMI0.GMDL.DAT1 */
                MDL2 = DAT2 /* \_SB_.WMI0.GMDL.DAT2 */
                MDL3 = DAT3 /* \_SB_.WMI0.GMDL.DAT3 */
                MDL4 = DAT4 /* \_SB_.WMI0.GMDL.DAT4 */
                Return (Zero)
            }

            Method (GBSI, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F172, SystemMemory, Arg0, Arg1)
                Field (F172, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BLEN,   8, 
                    BDL1,   32, 
                    BDL2,   32, 
                    BDL3,   32, 
                    BDL4,   24, 
                    YEAR,   32, 
                    MON,    16, 
                    DAY,    16
                }

                BDL1 = Zero
                BDL2 = Zero
                BDL3 = Zero
                BDL4 = Zero
                Name (BBUF, Buffer (0x10){})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GBRV ()
                BLEN = SizeOf (Local0)
                BBUF = GBRV ()
                BDL1 = DAT1 /* \_SB_.WMI0.GBSI.DAT1 */
                BDL2 = DAT2 /* \_SB_.WMI0.GBSI.DAT2 */
                BDL3 = DAT3 /* \_SB_.WMI0.GBSI.DAT3 */
                BDL4 = DAT4 /* \_SB_.WMI0.GBSI.DAT4 */
                CreateWordField (BBUF, Zero, WRD0)
                ToDecimalString (BIYR, BBUF) /* \_SB_.WMI0.GBSI.BBUF */
                YEAR = DAT1 /* \_SB_.WMI0.GBSI.DAT1 */
                ToDecimalString (BIMN, BBUF) /* \_SB_.WMI0.GBSI.BBUF */
                MON = WRD0 /* \_SB_.WMI0.GBSI.WRD0 */
                ToDecimalString (BIDA, BBUF) /* \_SB_.WMI0.GBSI.BBUF */
                DAY = WRD0 /* \_SB_.WMI0.GBSI.WRD0 */
                Return (Zero)
            }

            Method (GECI, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F173, SystemMemory, Arg0, Arg1)
                Field (F173, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    ELEN,   8, 
                    EDL1,   32, 
                    EDL2,   32, 
                    EDL3,   32, 
                    EDL4,   32
                }

                EDL1 = Zero
                EDL2 = Zero
                EDL3 = Zero
                EDL4 = Zero
                Name (BBUF, Buffer (0x10){})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GERV ()
                ELEN = SizeOf (Local0)
                BBUF = GERV ()
                EDL1 = DAT1 /* \_SB_.WMI0.GECI.DAT1 */
                EDL2 = DAT2 /* \_SB_.WMI0.GECI.DAT2 */
                EDL3 = DAT3 /* \_SB_.WMI0.GECI.DAT3 */
                EDL4 = DAT4 /* \_SB_.WMI0.GECI.DAT4 */
                Return (Zero)
            }

            Method (GMEI, 3, NotSerialized)
            {
                If ((Arg1 < 0x20))
                {
                    Return (0x02)
                }

                OperationRegion (\F175, SystemMemory, Arg0, Arg1)
                Field (F175, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    MELE,   8, 
                    RSVD,   56, 
                    MDL1,   32, 
                    MDL2,   32, 
                    MDL3,   32, 
                    MDL4,   32
                }

                MDL1 = Zero
                MDL2 = Zero
                MDL3 = Zero
                MDL4 = Zero
                Return (Zero)
            }

            Method (MF18, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G18V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = GDVI (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = GDVS (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = SDPW (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G18V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F180, SystemMemory, Arg0, Arg1)
                Field (F180, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (GDVI, 2, NotSerialized)
            {
                If ((Arg1 < 0x18))
                {
                    Return (0x02)
                }

                OperationRegion (\F181, SystemMemory, Arg0, Arg1)
                Field (F181, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    LDI0,   32, 
                    LDI1,   32
                }

                LDI0 = Zero
                Return (Zero)
            }

            Method (GDVS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F182, SystemMemory, Arg0, Arg1)
                Field (F182, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DNUM,   8, 
                    DSTS,   8
                }

                Local0 = (One << DNUM) /* \_SB_.WMI0.GDVS.DNUM */
                If (((Local0 & Zero) == Zero))
                {
                    Return (0x10)
                }

                Return (Zero)
            }

            Method (SDPW, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F183, SystemMemory, Arg0, Arg1)
                Field (F183, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DNUM,   8, 
                    DCTR,   8
                }

                Local0 = (One << DNUM) /* \_SB_.WMI0.SDPW.DNUM */
                If (((Local0 & Zero) == Zero))
                {
                    Return (0x10)
                }

                If ((DCTR > One))
                {
                    Return (0x11)
                }

                Return (Zero)
            }

            Method (MF19, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == Zero))
                {
                    Local0 = G19V (Arg0, Arg1)
                }

                If ((Arg2 == One))
                {
                    Local0 = ACMS (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = CSIN (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (G19V, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F190, SystemMemory, Arg0, Arg1)
                Field (F190, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SVER,   16, 
                    MVER,   16
                }

                MVER = Zero
                SVER = Zero
                Return (Zero)
            }

            Method (ACMS, 2, NotSerialized)
            {
                OperationRegion (\F191, SystemMemory, Arg0, Arg1)
                Field (F191, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DEVN,   8, 
                    OFST,   16, 
                    LENG,   16
                }

                BIPA = Arg0
                ISMI (0xD8)
                Return (Zero)
            }

            Method (CSIN, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F192, SystemMemory, Arg0, Arg1)
                Field (F192, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    CMAX,   16
                }

                CMAX = 0xFF
                Return (Zero)
            }

            Method (XPAP, 4, NotSerialized)
            {
                If ((Arg1 == 0x21))
                {
                    If ((Arg2 > 0x05))
                    {
                        If ((Arg2 == 0x06))
                        {
                            GCTP (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x07))
                        {
                            GCOM (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x08))
                        {
                            CPTP (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x09))
                        {
                            CPSX (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x0C))
                        {
                            GEHT (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x0D))
                        {
                            BSMI (Arg0)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x10))
                        {
                            FBTN (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x11))
                        {
                            BTNF (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x12))
                        {
                            GBTN (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x14))
                        {
                            CPUL (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x15))
                        {
                            GMPL (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x16))
                        {
                            RMTC (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x20))
                        {
                            GWLS (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x21))
                        {
                            SWLS (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x22))
                        {
                            TPST (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x23))
                        {
                            FNST (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x24))
                        {
                            ODJE (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x25))
                        {
                            ODJF (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }

                        If ((Arg2 == 0x26))
                        {
                            ODJN (Arg0, Arg1, Arg2, Arg3)
                            Return (Zero)
                        }
                    }
                }
            }

            Name (BUTN, 0xFF)
            Method (GCTP, 4, NotSerialized)
            {
                OperationRegion (\F21P, SystemMemory, Arg0, 0x20)
                Field (F21P, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    TYPE,   8
                }

                TYPE = 0x02
                STAS = 0x80
            }

            Method (GCOM, 4, NotSerialized)
            {
                OperationRegion (\F21Q, SystemMemory, Arg0, 0x20)
                Field (F21Q, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    FUNC,   8, 
                    MODE,   8
                }

                If ((FUNC == Zero))
                {
                    If (\_TZ.PLCY)
                    {
                        MODE = One
                    }
                    Else
                    {
                        MODE = Zero
                    }
                }

                If ((FUNC == One))
                {
                    If (MODE)
                    {
                        \_TZ.THRM._SCP (One)
                    }
                    Else
                    {
                        \_TZ.THRM._SCP (Zero)
                    }
                }

                STAS = 0x80
            }

            Method (CPTP, 4, NotSerialized)
            {
                OperationRegion (\F21C, SystemMemory, Arg0, 0x20)
                Field (F21C, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    TYPE,   8
                }

                TYPE = 0x02
                STAS = 0x80
            }

            Method (CPSX, 4, NotSerialized)
            {
                OperationRegion (\F21D, SystemMemory, Arg0, 0x20)
                Field (F21D, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    MODE,   8
                }

                If (CPUD)
                {
                    MODE = Zero
                }
                Else
                {
                    MODE = One
                }

                STAS = 0x80
            }

            Method (GEHT, 4, NotSerialized)
            {
                OperationRegion (\F21E, SystemMemory, Arg0, 0x20)
                Field (F21E, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    TYPE,   8, 
                    CURR,   16
                }

                If ((TYPE == 0x03))
                {
                    CURR = 0x1E
                }

                If ((TYPE == 0x04))
                {
                    CURR = 0x0A
                }

                STAS = 0x80
            }

            Method (FBTN, 4, NotSerialized)
            {
                OperationRegion (\F21F, SystemMemory, Arg0, 0x20)
                Field (F21F, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    FUNC,   8, 
                    BUTT,   8
                }

                If ((FUNC == Zero))
                {
                    IKFG &= 0xDF
                }

                If ((FUNC == One))
                {
                    Local0 = IKFG /* \IKFG */
                    If ((Local0 & 0x20))
                    {
                        BUTT = 0x02
                    }
                    Else
                    {
                        BUTT = Zero
                    }
                }

                If ((FUNC == 0x02))
                {
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x04FB)
                    If ((BUTT & 0x02))
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0494, (Local0 | 0x08))
                    }
                    Else
                    {
                        ^^PCI0.LPCB.EC0.WRAM (0x0494, (Local0 & 0xF7))
                    }
                }

                STAS = 0x80
            }

            Method (BTNF, 4, NotSerialized)
            {
                OperationRegion (\F21I, SystemMemory, Arg0, 0x20)
                Field (F21I, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    BUTT,   8
                }

                BUTN = BUTT /* \_SB_.WMI0.BTNF.BUTT */
                STAS = 0x80
            }

            Method (GBTN, 4, NotSerialized)
            {
                OperationRegion (\F21B, SystemMemory, Arg0, 0x20)
                Field (F21B, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    BUTN,   8
                }

                BUTN = Zero
                STAS = 0x80
            }

            Method (CPUL, 4, NotSerialized)
            {
                OperationRegion (\F21A, SystemMemory, Arg0, 0x20)
                Field (F21A, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    FUNC,   8, 
                    LVEL,   8
                }

                If ((FUNC == Zero))
                {
                    LVEL = (PPCM + One)
                }

                If ((FUNC == One))
                {
                    LVEL = CPUS /* \CPUS */
                }

                If ((FUNC == 0x02))
                {
                    CPUS = LVEL /* \_SB_.WMI0.CPUL.LVEL */
                    PNOT ()
                }

                STAS = 0x80
            }

            Method (GMPL, 4, NotSerialized)
            {
                OperationRegion (\F21G, SystemMemory, Arg0, 0x20)
                Field (F21G, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    MODE,   8
                }

                MODE = Zero
                STAS = 0x80
            }

            Method (RMTC, 4, NotSerialized)
            {
            }

            Method (GWLS, 4, NotSerialized)
            {
                OperationRegion (\F21Y, SystemMemory, Arg0, 0x20)
                Field (F21Y, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    BTXT,   1, 
                    BTON,   1, 
                    WLXT,   1, 
                    WLON,   1, 
                    SWON,   1
                }

                WLXT = WLDP /* \WLDP */
                BTXT = BTDP /* \BTDP */
                WLON = WRST /* \WRST */
                BTON = BRST /* \BRST */
                SWON = (OHWR () & One)
                STAS = 0x80
            }

            Method (SWLS, 4, NotSerialized)
            {
                OperationRegion (\F21Z, SystemMemory, Arg0, 0x20)
                Field (F21Z, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    BTON,   1, 
                    WLON,   1
                }

                OBTD (BTON)
                OWLD (WLON)
                STAS = 0x80
            }

            Method (FNST, 4, NotSerialized)
            {
                OperationRegion (\F21W, SystemMemory, Arg0, 0x20)
                Field (F21W, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    FUNC,   8, 
                    DAT0,   8
                }

                If ((FUNC == One))
                {
                    If ((DAT0 == Zero))
                    {
                        AEID = 0xFF
                        AEID = 0xAF
                        AEIC = Zero
                        AEID = 0xFF
                    }
                    Else
                    {
                        AEID = 0xFF
                        AEID = 0xAF
                        AEIC = 0x02
                        AEID = 0xFF
                    }

                    If ((DAT0 == One))
                    {
                        ^^VALZ.STMD = One
                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07B0)
                        ^^PCI0.LPCB.EC0.WRAM (0x07B0, (Local0 & 0xEF))
                    }

                    If ((DAT0 == 0x02))
                    {
                        ^^VALZ.STMD = 0x02
                        Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07B0)
                        ^^PCI0.LPCB.EC0.WRAM (0x07B0, (Local0 | 0x10))
                    }
                }
                Else
                {
                    DAT0 = ^^VALZ.STMD /* \_SB_.VALZ.STMD */
                }

                STAS = 0x80
            }

            Method (TPST, 4, NotSerialized)
            {
                OperationRegion (\F21X, SystemMemory, Arg0, 0x20)
                Field (F21X, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    FUNC,   8, 
                    DAT0,   8
                }

                If ((FUNC == Zero))
                {
                    Local0 = ^^PCI0.LPCB.EC0.RRAM (0x07C7)
                    If (Local0)
                    {
                        DAT0 = Zero
                    }
                    Else
                    {
                        DAT0 = One
                    }

                    STAS = 0x80
                }

                If ((FUNC == One))
                {
                    If ((DAT0 != Zero))
                    {
                        ^^PCI0.LPCB.EC0.ECXT (0xB5, Zero, Zero, Zero, Zero, Zero)
                        TPON = One
                    }
                    Else
                    {
                        ^^PCI0.LPCB.EC0.ECXT (0xB5, One, Zero, Zero, Zero, Zero)
                        TPON = Zero
                    }

                    STAS = 0x80
                }
            }

            Method (ODJE, 4, NotSerialized)
            {
                OperationRegion (\F21H, SystemMemory, Arg0, 0x20)
                Field (F21H, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    NUM,    8
                }

                NUM = ^^VALZ.ODLS ()
                STAS = 0x80
            }

            Method (ODJF, 4, NotSerialized)
            {
                OperationRegion (\F21K, SystemMemory, Arg0, 0x40)
                Field (F21K, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    TYPE,   8, 
                    LENG,   8, 
                    VID,    16, 
                    DID,    16, 
                    SVID,   16, 
                    SDID,   16, 
                    DEVR,   8, 
                    REV0,   8, 
                    REV1,   16, 
                    REV2,   16
                }

                Local1 = ^^VALZ.ODLT ()
                LENG = 0x12
                CreateByteField (Local1, Zero, DATN)
                TYPE = DATN /* \_SB_.WMI0.ODJF.DATN */
                VID = ODDV /* \ODDV */
                DID = ODDD /* \ODDD */
                SVID = ODSV /* \ODSV */
                SDID = ODSD /* \ODSD */
                DEVR = ODRV /* \ODRV */
                STAS = 0x80
            }

            Method (ODJN, 4, NotSerialized)
            {
                OperationRegion (\F21J, SystemMemory, Arg0, 0x20)
                Field (F21J, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    STAS,   8, 
                    EROR,   8, 
                    FUNC,   8
                }

                ^^HAPS.SODE (FUNC)
                STAS = 0x80
            }

            Method (MF1F, 4, NotSerialized)
            {
                If ((Arg1 == 0x1F))
                {
                    OperationRegion (F01F, SystemMemory, Arg0, 0x08)
                    Field (F01F, DWordAcc, NoLock, Preserve)
                    {
                        MFUN,   16, 
                        SFUN,   16, 
                        LEN,    16, 
                        STAS,   8, 
                        EROR,   8
                    }

                    BIPA = Arg0
                    ISMI (0xD8)
                    STAS &= 0xFE
                }
            }

            Method (MF6A, 5, NotSerialized)
            {
                If ((Arg2 != 0x6A))
                {
                    Return (Zero)
                }

                If ((Arg2 == 0x6A))
                {
                    WSMI (Arg4)
                }
            }
        }

        Scope (\_SB)
        {
            Device (BT)
            {
                Name (_HID, "TOS6205")  // _HID: Hardware ID
                Name (BTAF, Zero)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (BTDP)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (BWAK, 1, Serialized)
                {
                    If (BTDP)
                    {
                        Notify (BT, 0x80) // Status Change
                    }
                }

                Method (BTST, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((BTDP && BRST))
                    {
                        Local1 = One
                    }
                    Else
                    {
                        Local1 = Zero
                    }

                    Local2 = One
                    If (Local1)
                    {
                        Local0 |= 0x80
                    }

                    If (BTAF)
                    {
                        Local0 |= 0x40
                    }

                    If (Local2)
                    {
                        Local0 |= One
                    }

                    Return (Local0)
                }

                Method (AUSB, 0, NotSerialized)
                {
                    BTAF = One
                }

                Method (DUSB, 0, NotSerialized)
                {
                    BTAF = Zero
                }

                Method (BTPO, 0, NotSerialized)
                {
                    BRST = One
                    WLFG |= 0x20
                    If ((BTDP && BRST))
                    {
                        If (BTSF)
                        {
                            BTSF = Zero
                            UPRW = One
                            UP2D = Zero
                            UPRW = Zero
                        }

                        SGPX (0x08, One, One)
                    }
                    Else
                    {
                        SGPX (0x08, One, Zero)
                    }

                    ^^VALZ.MLED ()
                }

                Method (BTPF, 0, NotSerialized)
                {
                    BRST = Zero
                    WLFG &= 0xDF
                    If ((BTDP && BRST))
                    {
                        SGPX (0x08, One, One)
                    }
                    Else
                    {
                        SGPX (0x08, One, Zero)
                    }

                    ^^VALZ.MLED ()
                }

                Method (NTFY, 0, NotSerialized)
                {
                    Notify (BT, 0x90) // Device-Specific
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x04
                })
            }
        }

        Scope (\_SB)
        {
            Device (HAPS)
            {
                Name (_HID, EisaId ("TOS620A"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((HAPD != Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (PTLV, 1, Serialized)
                {
                    HAPF = 0x02
                    HPCM = 0x10
                    HPDD = Arg0
                    ISMI (0x26)
                    HAPF = 0x02
                    HPCM = 0x1C
                    HPDD = 0x40
                    ISMI (0x26)
                    Return (Zero)
                }

                Name (RSSF, Zero)
                Method (RSSS, 0, Serialized)
                {
                    HAPF = One
                    ISMI (0x26)
                    RSSF = One
                    Return (Zero)
                }

                Method (HPTS, 1, Serialized)
                {
                    PTLV (Zero)
                    Return (Zero)
                }

                Method (HWAK, 1, Serialized)
                {
                    Return (Zero)
                }

                Method (NTFY, 0, Serialized)
                {
                    IO80 = 0x76
                    Local0 = ^^PCI0.LPCB.EC0.RPIN (0x07, 0x06)
                    If ((Local0 != Zero))
                    {
                        IO80 = 0x80
                        NTY1 ()
                    }
                    Else
                    {
                        IO80 = 0x81
                        NTY2 ()
                    }

                    Return (Zero)
                }

                Method (NTY1, 0, Serialized)
                {
                    Notify (HAPS, 0x80) // Status Change
                    Return (Zero)
                }

                Method (NTY2, 0, Serialized)
                {
                    Notify (HAPS, 0x81) // Information Change
                    Return (Zero)
                }

                Method (NTY3, 0, Serialized)
                {
                    ^^VALZ.PUTE (0x1ABE)
                    Return (Zero)
                }

                Method (NTY4, 0, Serialized)
                {
                    ^^VALZ.PUTE (0x1ABF)
                    Return (Zero)
                }

                Method (G000, 0, Serialized)
                {
                    Name (G00B, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    Local1 = ^^PCI0.LPCB.EC0.GD09 /* \_SB_.PCI0.LPCB.EC0_.GD09 */
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD08
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD07
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD06
                    Local2 = ^^PCI0.LPCB.EC0.GD0B /* \_SB_.PCI0.LPCB.EC0_.GD0B */
                    Local2 <<= 0x08
                    Local2 += ^^PCI0.LPCB.EC0.GD0A
                    G00B [Zero] = Local1
                    G00B [One] = Local2
                    Return (G00B) /* \_SB_.HAPS.G000.G00B */
                }

                Method (G001, 0, Serialized)
                {
                    Name (G01B, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    Local1 = ^^PCI0.LPCB.EC0.GD03 /* \_SB_.PCI0.LPCB.EC0_.GD03 */
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD02
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD01
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD00
                    Local2 = ^^PCI0.LPCB.EC0.GD05 /* \_SB_.PCI0.LPCB.EC0_.GD05 */
                    Local2 <<= 0x08
                    Local2 += ^^PCI0.LPCB.EC0.GD04
                    G01B [Zero] = Local1
                    G01B [One] = Local2
                    Return (G01B) /* \_SB_.HAPS.G001.G01B */
                }

                Method (G200, 0, Serialized)
                {
                    Name (G20B, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    Local1 = ^^PCI0.LPCB.EC0.GD16 /* \_SB_.PCI0.LPCB.EC0_.GD16 */
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD15
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD14
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD13
                    Local2 = ^^PCI0.LPCB.EC0.GD18 /* \_SB_.PCI0.LPCB.EC0_.GD18 */
                    Local2 <<= 0x08
                    Local2 += ^^PCI0.LPCB.EC0.GD17
                    Local2 += ^^PCI0.LPCB.EC0.GD12
                    G20B [Zero] = Local1
                    G20B [One] = Local2
                    Return (G20B) /* \_SB_.HAPS.G200.G20B */
                }

                Method (G201, 0, Serialized)
                {
                    Name (G21B, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    Local1 = ^^PCI0.LPCB.EC0.GD16 /* \_SB_.PCI0.LPCB.EC0_.GD16 */
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD15
                    Local1 += ^^PCI0.LPCB.EC0.GD11
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD14
                    Local1 <<= 0x08
                    Local1 += ^^PCI0.LPCB.EC0.GD13
                    Local1 += ^^PCI0.LPCB.EC0.GD10
                    Local2 = ^^PCI0.LPCB.EC0.GD18 /* \_SB_.PCI0.LPCB.EC0_.GD18 */
                    Local2 <<= 0x08
                    Local2 += ^^PCI0.LPCB.EC0.GD17
                    G21B [Zero] = Local1
                    G21B [One] = Local2
                    Return (G21B) /* \_SB_.HAPS.G201.G21B */
                }

                Method (GODE, 0, Serialized)
                {
                    Local1 = ^^PCI0.LPCB.EC0.GD19 /* \_SB_.PCI0.LPCB.EC0_.GD19 */
                    If ((Local1 != Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (SODE, 1, Serialized)
                {
                    Local0 = ^^PCI0.LPCB.EC0.SMBR (^^PCI0.LPCB.EC0.RBLP, 0x20, 0x1A, One)
                    Name (SODC, Zero)
                    SODC = DerefOf (Local0 [One])
                    Name (SODB, Buffer (SODC){})
                    SODB = DerefOf (Local0 [0x02])
                    If ((Arg0 != Zero))
                    {
                        SODB [Zero] = One
                        SODB [0x02] = 0x0A
                    }
                    Else
                    {
                        SODB [Zero] = Zero
                    }

                    ^^PCI0.LPCB.EC0.SMBW (^^PCI0.LPCB.EC0.WBLP, 0x20, 0x1A, One, SODC, SODB)
                    Return (Zero)
                }
            }
        }

        Scope (PCI0.LPCB.EC0)
        {
            OperationRegion (ECBS, SystemIO, 0x025A, 0x02)
            Field (ECBS, ByteAcc, Lock, Preserve)
            {
                ECBI,   8, 
                ECBD,   8
            }

            IndexField (ECBI, ECBD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x80), 
                GD00,   8, 
                GD01,   8, 
                GD02,   8, 
                GD03,   8, 
                GD04,   8, 
                GD05,   8, 
                GD06,   8, 
                GD07,   8, 
                GD08,   8, 
                GD09,   8, 
                GD0A,   8, 
                GD0B,   8, 
                GD0C,   8, 
                GD0D,   8, 
                GD0E,   8, 
                GD0F,   8, 
                GD10,   8, 
                GD11,   8, 
                GD12,   8, 
                GD13,   8, 
                GD14,   8, 
                GD15,   8, 
                GD16,   8, 
                GD17,   8, 
                GD18,   8, 
                GD19,   8, 
                GD1A,   8, 
                GD1B,   8, 
                GD1C,   8, 
                GD1D,   8, 
                GD1E,   8, 
                GD1F,   8, 
                GD20,   8, 
                GD21,   8, 
                GD22,   8, 
                GD23,   8, 
                GD24,   8, 
                GD25,   8, 
                GD26,   8, 
                GD27,   8, 
                GD28,   8, 
                GD29,   8, 
                GD2A,   8, 
                GD2B,   8, 
                GD2C,   8, 
                GD2D,   8, 
                GD2E,   8, 
                GD2F,   8, 
                GD30,   8, 
                GD31,   8, 
                GD32,   8, 
                GD33,   8, 
                GD34,   8, 
                GD35,   8, 
                GD36,   8, 
                GD37,   8, 
                GD38,   8, 
                GD39,   8, 
                GD3A,   8, 
                GD3B,   8, 
                GD3C,   8, 
                GD3D,   8, 
                GD3E,   8, 
                GD3F,   8
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
}



ECDT
----
[000h 0000 004h]                   Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004 004h]                Table Length : 000000C1
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 28
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 00Ch]     Command/Status Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 01 [SystemIO]
[025h 0037 001h]                   Bit Width : 08
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 01 [Byte Access:8]
[028h 0040 008h]                     Address : 0000000000000066

[030h 0048 00Ch]               Data Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 01 [SystemIO]
[031h 0049 001h]                   Bit Width : 08
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 01 [Byte Access:8]
[034h 0052 008h]                     Address : 0000000000000062

[03Ch 0060 004h]                         UID : 00000000
[040h 0064 001h]                  GPE Number : 1B
[041h 0065 013h]                    Namepath : "\_SB.PCI0.LPCB.EC0"

Raw Table Data: Length 193 (0xC1)

    0000: 45 43 44 54 C1 00 00 00 01 28 54 4F 53 41 53 55  // ECDT.....(TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 01 08 00 01 66 00 00 00 00 00 00 00  // ........f.......
    0030: 01 08 00 01 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 1B 5C 5F 53 42 2E 50 43 49 30 2E 4C 50 43 42 2E  // .\_SB.PCI0.LPCB.
    0050: 45 43 30 00 00 00 00 00 00 00 00 00 00 00 00 00  // EC0.............
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00                                               // .


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : DF
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000100
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                FACS Address : AAFAA000
[028h 0040 004h]                DSDT Address : AAFDA000
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 80
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000450
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 85
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 0039
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 04
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 00
[06Dh 0109 002h]  Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000386A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : FB
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000AAFDA000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000450

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 80
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 DF 54 4F 53 41 53 55  // FACP......TOSASU
    0010: 54 4F 53 41 53 55 30 30 00 01 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 A0 FA AA 00 A0 FD AA 01 02 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 80 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 85  //  ...............
    0060: 65 00 39 00 00 04 10 00 04 03 0D 00 00 13 00 00  // e.9.............
    0070: A5 86 03 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 A0 FD AA  // ................
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000006
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 06 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 0E
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000AAFD0F98

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 00000000AAFD0F18

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 0E 54 4F 53 41 53 55  // FPDTD.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 98 0F FD AA  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 18 0F FD AA  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 5F
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 5F 54 4F 53 41 53 55  // HPET8...._TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 37
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 3F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 37 54 4F 53 41 53 55  // MCFG<....7TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : DC
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 06222004
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 DC 54 4F 53 41 53 55 /* MSDMU.....TOSASU */\
/* 034h 0052  16 */                            54 4F 53 41 53 55 30 30 04 20 22 06 41 43 50 49 /* TOSASU00. ".ACPI */\
/* 044h 0068  16 */                            00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 DC 54 4F 53 41 53 55  // MSDMU.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 04 20 22 06 41 43 50 49  // TOSASU00. ".ACPI
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 4E 59 58 59 58 2D 51 46  // ........NYXYX-QF
    0040: 4A 50 37 2D 47 48 37 54 59 2D 51 46 4B 51 33 2D  // JP7-GH7TY-QFKQ3-
    0050: 33 50 42 51 36                                   // 3PBQ6


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DC
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 DC 54 4F 53 41 53 55 /* SLICv.....TOSASU */\
/* 034h 0052  16 */                            54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49 /* TOSASU00....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE /* ......Ve .<..... */\
/* 074h 0116  16 */                            E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 /* ...E.kr.E.)....S */\
/* 084h 0132  16 */                            39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 /* 9.%............` */\
/* 094h 0148  16 */                            A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC /* .rG....?`....... */\
/* 0A4h 0164  16 */                            1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 /* .n..}.._ZQ.h..=. */\
/* 0B4h 0180  16 */                            F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B /* ..4....}..RL.c.k */\
/* 0C4h 0196  16 */                            00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A /* .....o5.z...O).j */\
/* 0D4h 0212  16 */                            56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 /* V..E..7..K.S[<.. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 41 /* ............TOSA */\
/* 0F4h 0244  16 */                            53 55 54 4F 53 41 53 55 30 30 57 49 4E 44 4F 57 /* SUTOSASU00WINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 31 80 34 BA 88 41 84 6C 90 AD /* ......1.4..A.l.. */\
/* 124h 0292  16 */                            10 D2 0A 8C 67 8A 68 72 C4 33 58 5B 6C 39 E3 97 /* ....g.hr.3X[l9.. */\
/* 134h 0308  16 */                            00 6F 43 52 9A 55 74 59 EE F2 1E F2 63 68 81 D1 /* .oCR.UtY....ch.. */\
/* 144h 0324  16 */                            8C 8E 3D 66 94 B1 2D 6C 91 22 B4 E5 A6 5B 30 21 /* ..=f..-l."...[0! */\
/* 154h 0340  16 */                            99 22 13 25 EA D4 43 07 10 5C AC 61 D2 CB 7F FD /* .".%..C..\.a.... */\
/* 164h 0356  16 */                            BD C3 F0 82 6F CF 5C C3 6A B9 A6 5F 68 8B E9 97 /* ....o.\.j.._h... */\
/* 174h 0372   2 */                            DE C9                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 DC 54 4F 53 41 53 55  // SLICv.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
    0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
    0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
    0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
    0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
    0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
    00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
    00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 41  // ............TOSA
    00D0: 53 55 54 4F 53 41 53 55 30 30 57 49 4E 44 4F 57  // SUTOSASU00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 31 80 34 BA 88 41 84 6C 90 AD  // ......1.4..A.l..
    0100: 10 D2 0A 8C 67 8A 68 72 C4 33 58 5B 6C 39 E3 97  // ....g.hr.3X[l9..
    0110: 00 6F 43 52 9A 55 74 59 EE F2 1E F2 63 68 81 D1  // .oCR.UtY....ch..
    0120: 8C 8E 3D 66 94 B1 2D 6C 91 22 B4 E5 A6 5B 30 21  // ..=f..-l."...[0!
    0130: 99 22 13 25 EA D4 43 07 10 5C AC 61 D2 CB 7F FD  // .".%..C..\.a....
    0140: BD C3 F0 82 6F CF 5C C3 6A B9 A6 5F 68 8B E9 97  // ....o.\.j.._h...
    0150: DE C9 94 E8 07 AB E2 81 16 F7 4C 7E 47 11 D3 48  // ..........L~G..H
    0160: B9 8E 29 63 0D BC 39 EE 81 D8 02 A5 1E E5 76 6A  // ..)c..9.......vj
    0170: FB CB 6C 6B 12 F1                                // ..lk..


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "TOSASU", "TOSASU00", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (CPUD, UnknownObj)
    External (CPUS, IntObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (PPCM, IntObj)
    External (TCNT, IntObj)

    Name (INP4, Zero)
    Scope (\_PR.CPU0)
    {
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((INP4 == One) || (CPUD == One)))
            {
                CPUS = PPCM /* External reference */
                \_PR.CPU0._PPC = PPCM /* External reference */
            }
            Else
            {
                \_PR.CPU0._PPC = CPUS /* External reference */
            }

            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x0D)
        {
            Package (0x06)
            {
                0x00000709, 
                0x00004268, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00004268, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00003DB6, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000391C, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000353F, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000030D3, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00002D20, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000028E3, 
                0x0000006E, 
                0x0000000A, 
                0x00000783, 
                0x00000007
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00002558, 
                0x0000006E, 
                0x0000000A, 
                0x00000883, 
                0x00000008
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00002146, 
                0x0000006E, 
                0x0000000A, 
                0x00000983, 
                0x00000009
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001DE3, 
                0x0000006E, 
                0x0000000A, 
                0x00000A83, 
                0x0000000A
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000019FC, 
                0x0000006E, 
                0x0000000A, 
                0x00000B83, 
                0x0000000B
            }, 

            Package (0x06)
            {
                0x00000306, 
                0x0000162D, 
                0x0000006E, 
                0x0000000A, 
                0x00000C83, 
                0x0000000C
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (_PSS, Package (0x0D)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000709, 
                0x00004268, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00004268, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00003DB6, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000391C, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000353F, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000030D3, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00002D20, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000028E3, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00002558, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00002146, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001DE3, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000019FC, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x00000306, 
                0x0000162D, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000800
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "TOSASU", "TOSASU00", 0x00003000)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (_SB_.PTID.ISPC, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PTID.WPMD, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (ECON, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xA8164018, 
            0x00000912, 
            "APIST   ", 
            0xAAE18A98, 
            0x00000303, 
            "CPU0CST ", 
            0xAAE17018, 
            0x0000083B, 
            "APCST   ", 
            0xAAE16D98, 
            0x00000119
        })
        Name (CFGD, 0x0066F6FF)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        OperationRegion (PPMT, SystemMemory, 0xAAFA4F98, 0x0029)
        Field (PPMT, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            Offset (0x05), 
            CNTD,   8, 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CCTP,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            \_PR.CPU0._PPC = CPPC /* \_PR_.CPPC */
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CTLD, 0, NotSerialized)
        {
            If ((\ECON == One))
            {
                If ((CondRefOf (\_PR.CNTD) && CondRefOf (\_SB.PTID.WPMD)))
                {
                    If (\_PR.CNTD)
                    {
                        Name (BUFF, Buffer (0x1A)
                        {
                            /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0A,  // ......0.
                            /* 0008 */  0x01, 0xA5, 0x00, 0x21, 0x00, 0x00, 0x07, 0x00,  // ...!....
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00                                       // ..
                        })
                        \_SB.PTID.WPMD (BUFF, \_SB.PTID.ISPC ())
                    }
                }
            }
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            CTLD ()
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x3E))
            {
                If ((((CFGD & 0x0400) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x2E) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC4 /* \PDC4 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC5 /* \PDC5 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC6 /* \PDC6 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC7 /* \PDC7 */
            Return (Zero)
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "TOSASU", "TOSASU00", 0x00001000)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.LPCB.H_EC.AMBT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPAP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUE, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CVRT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.LPCB.H_EC.FANT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.GTVR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCAP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.MCHP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.MCRT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PCAD, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT0, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT1, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT2, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT3, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC0, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC1, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC2, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC3, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PECC, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PECD, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PECH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECI, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEHI, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPL, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPM, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PEWL, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRC0, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRC1, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCL, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCM, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCS, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRFC, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRIN, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS0, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS1, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS2, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS3, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS4, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PSTE, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PWFC, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PWRL, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.SKNT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SYAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SYSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD3, UnknownObj)
    External (_TZ_.TZ00._TMP, IntObj)
    External (_TZ_.TZ01._TMP, IntObj)
    External (DTS1, UnknownObj)
    External (DTS2, UnknownObj)
    External (DTS3, UnknownObj)
    External (DTS4, UnknownObj)
    External (ECON, IntObj)
    External (PAMT, IntObj)
    External (PDTS, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (TSDL, Package (0x2E)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "CPU Core VR (IMVP) Temperature", 
                0x03, 
                "CPU GT VR (IMVP) Temperature", 
                0x03, 
                "Heat Exchanger Fan Temperature", 
                0x03, 
                "Skin Temperature", 
                0x03, 
                "Ambient Temperature", 
                0x03, 
                "Minicard Region Temperature", 
                0x02, 
                "Channel 0 DIMM Temperature", 
                0x02, 
                "Channel 1 DIMM Temperature", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TS-on-DIMM0 Temperature", 
                0x02, 
                "TS-on-DIMM1 Temperature", 
                0x02, 
                "TS-on-DIMM2 Temperature", 
                0x02, 
                "TS-on-DIMM3 Temperature", 
                0x02, 
                "TZ00 _TMP", 
                0x02, 
                "TZ01 _TMP"
            })
            Name (PSDL, Package (0x0C)
            {
                Zero, 
                "CPU Power", 
                One, 
                "Gfx Core Power", 
                0x0A, 
                "System Power", 
                Zero, 
                "CPU Average Power", 
                One, 
                "Gfx Core Average Power", 
                0x0A, 
                "System Average Power"
            })
            Name (OSDL, Package (0x06)
            {
                Zero, 
                "CPU Fan Speed", 
                "RPM", 
                Zero, 
                "CPU energy", 
                "RAW"
            })
            Method (TSDD, 0, NotSerialized)
            {
                Name (TMPV, Package (0x17)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                TMPV [Zero] = ((DTS1 * 0x0A) + 0x0AAC)
                TMPV [One] = ((DTS2 * 0x0A) + 0x0AAC)
                TMPV [0x02] = ((DTS3 * 0x0A) + 0x0AAC)
                TMPV [0x03] = ((DTS4 * 0x0A) + 0x0AAC)
                TMPV [0x04] = ((PDTS * 0x0A) + 0x0AAC)
                If (\ECON)
                {
                    TMPV [0x05] = ((\_SB.PCI0.LPCB.H_EC.CVRT * 0x0A) + 0x0AAC)
                    TMPV [0x06] = ((\_SB.PCI0.LPCB.H_EC.GTVR * 0x0A) + 0x0AAC)
                    TMPV [0x07] = ((\_SB.PCI0.LPCB.H_EC.FANT * 0x0A) + 0x0AAC)
                    TMPV [0x08] = ((\_SB.PCI0.LPCB.H_EC.SKNT * 0x0A) + 0x0AAC)
                    TMPV [0x09] = ((\_SB.PCI0.LPCB.H_EC.AMBT * 0x0A) + 0x0AAC)
                    TMPV [0x0A] = ((\_SB.PCI0.LPCB.H_EC.MCRT * 0x0A) + 0x0AAC)
                    TMPV [0x0B] = ((\_SB.PCI0.LPCB.H_EC.DIM0 * 0x0A) + 0x0AAC)
                    TMPV [0x0C] = ((\_SB.PCI0.LPCB.H_EC.DIM1 * 0x0A) + 0x0AAC)
                    TMPV [0x0D] = ((\_SB.PCI0.LPCB.H_EC.PMAX * 0x0A) + 0x0AAC)
                    TMPV [0x0E] = ((\_SB.PCI0.LPCB.H_EC.PPDT * 0x0A) + 0x0AAC)
                    TMPV [0x0F] = ((\_SB.PCI0.LPCB.H_EC.PECH * 0x0A) + 0x0AAC)
                    TMPV [0x10] = ((\_SB.PCI0.LPCB.H_EC.PMDT * 0x0A) + 0x0AAC)
                    TMPV [0x11] = ((\_SB.PCI0.LPCB.H_EC.TSD0 * 0x0A) + 0x0AAC)
                    TMPV [0x12] = ((\_SB.PCI0.LPCB.H_EC.TSD1 * 0x0A) + 0x0AAC)
                    TMPV [0x13] = ((\_SB.PCI0.LPCB.H_EC.TSD2 * 0x0A) + 0x0AAC)
                    TMPV [0x14] = ((\_SB.PCI0.LPCB.H_EC.TSD3 * 0x0A) + 0x0AAC)
                }

                TMPV [0x15] = \_TZ.TZ00._TMP /* External reference */
                TMPV [0x16] = \_TZ.TZ01._TMP /* External reference */
                Return (TMPV) /* \_SB_.PTID.TSDD.TMPV */
            }

            Method (PSDD, 0, NotSerialized)
            {
                Name (PWRV, Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                If (\ECON)
                {
                    PWRV [Zero] = \_SB.PCI0.LPCB.H_EC.CPUP /* External reference */
                    PWRV [One] = \_SB.PCI0.LPCB.H_EC.MCHP /* External reference */
                    PWRV [0x02] = (\_SB.PCI0.LPCB.H_EC.SYSP * 0x0A)
                    PWRV [0x03] = \_SB.PCI0.LPCB.H_EC.CPAP /* External reference */
                    PWRV [0x04] = \_SB.PCI0.LPCB.H_EC.MCAP /* External reference */
                    PWRV [0x05] = (\_SB.PCI0.LPCB.H_EC.SYAP * 0x0A)
                }

                Return (PWRV) /* \_SB_.PTID.PSDD.PWRV */
            }

            Method (OSDD, 0, NotSerialized)
            {
                Name (OSDV, Package (0x02)
                {
                    0x80000000, 
                    0x80000000
                })
                If (\ECON)
                {
                    OSDV [Zero] = \_SB.PCI0.LPCB.H_EC.CFSP /* External reference */
                    OSDV [One] = \_SB.PCI0.LPCB.H_EC.CPUE /* External reference */
                }

                Return (OSDV) /* \_SB_.PTID.OSDD.OSDV */
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                Ones, 
                Ones, 
                0x1A, 
                Ones, 
                Ones, 
                Ones, 
                Ones, 
                Ones, 
                Ones
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, NotSerialized)
            {
                Name (MTMP, Buffer (0x1A){})
                If (\ECON)
                {
                    MTMP [Zero] = \_SB.PCI0.LPCB.H_EC.PRCL /* External reference */
                    MTMP [One] = \_SB.PCI0.LPCB.H_EC.PRC0 /* External reference */
                    MTMP [0x02] = \_SB.PCI0.LPCB.H_EC.PRC1 /* External reference */
                    MTMP [0x03] = \_SB.PCI0.LPCB.H_EC.PRCM /* External reference */
                    MTMP [0x04] = \_SB.PCI0.LPCB.H_EC.PRIN /* External reference */
                    MTMP [0x05] = \_SB.PCI0.LPCB.H_EC.PSTE /* External reference */
                    MTMP [0x06] = \_SB.PCI0.LPCB.H_EC.PCAD /* External reference */
                    MTMP [0x07] = \_SB.PCI0.LPCB.H_EC.PEWL /* External reference */
                    MTMP [0x08] = \_SB.PCI0.LPCB.H_EC.PWRL /* External reference */
                    MTMP [0x09] = \_SB.PCI0.LPCB.H_EC.PECD /* External reference */
                    MTMP [0x0A] = \_SB.PCI0.LPCB.H_EC.PEHI /* External reference */
                    MTMP [0x0B] = \_SB.PCI0.LPCB.H_EC.PECI /* External reference */
                    MTMP [0x0C] = \_SB.PCI0.LPCB.H_EC.PEPL /* External reference */
                    MTMP [0x0D] = \_SB.PCI0.LPCB.H_EC.PEPM /* External reference */
                    MTMP [0x0E] = \_SB.PCI0.LPCB.H_EC.PWFC /* External reference */
                    MTMP [0x0F] = \_SB.PCI0.LPCB.H_EC.PECC /* External reference */
                    MTMP [0x10] = \_SB.PCI0.LPCB.H_EC.PDT0 /* External reference */
                    MTMP [0x11] = \_SB.PCI0.LPCB.H_EC.PDT1 /* External reference */
                    MTMP [0x12] = \_SB.PCI0.LPCB.H_EC.PDT2 /* External reference */
                    MTMP [0x13] = \_SB.PCI0.LPCB.H_EC.PDT3 /* External reference */
                    MTMP [0x14] = \_SB.PCI0.LPCB.H_EC.PRFC /* External reference */
                    MTMP [0x15] = \_SB.PCI0.LPCB.H_EC.PRS0 /* External reference */
                    MTMP [0x16] = \_SB.PCI0.LPCB.H_EC.PRS1 /* External reference */
                    MTMP [0x17] = \_SB.PCI0.LPCB.H_EC.PRS2 /* External reference */
                    MTMP [0x18] = \_SB.PCI0.LPCB.H_EC.PRS3 /* External reference */
                    MTMP [0x19] = \_SB.PCI0.LPCB.H_EC.PRS4 /* External reference */
                }

                Return (MTMP) /* \_SB_.PTID.RPMD.MTMP */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (Ones)
                }

                If (\ECON)
                {
                    \_SB.PCI0.LPCB.H_EC.PRCL = DerefOf (Arg0 [Zero])
                    \_SB.PCI0.LPCB.H_EC.PRC0 = DerefOf (Arg0 [One])
                    \_SB.PCI0.LPCB.H_EC.PRC1 = DerefOf (Arg0 [0x02])
                    \_SB.PCI0.LPCB.H_EC.PRCM = DerefOf (Arg0 [0x03])
                    \_SB.PCI0.LPCB.H_EC.PRIN = DerefOf (Arg0 [0x04])
                    \_SB.PCI0.LPCB.H_EC.PSTE = DerefOf (Arg0 [0x05])
                    \_SB.PCI0.LPCB.H_EC.PCAD = DerefOf (Arg0 [0x06])
                    \_SB.PCI0.LPCB.H_EC.PEWL = DerefOf (Arg0 [0x07])
                    \_SB.PCI0.LPCB.H_EC.PWRL = DerefOf (Arg0 [0x08])
                    \_SB.PCI0.LPCB.H_EC.PECD = DerefOf (Arg0 [0x09])
                    \_SB.PCI0.LPCB.H_EC.PEHI = DerefOf (Arg0 [0x0A])
                    \_SB.PCI0.LPCB.H_EC.PECI = DerefOf (Arg0 [0x0B])
                    \_SB.PCI0.LPCB.H_EC.PEPL = DerefOf (Arg0 [0x0C])
                    \_SB.PCI0.LPCB.H_EC.PEPM = DerefOf (Arg0 [0x0D])
                    \_SB.PCI0.LPCB.H_EC.PWFC = DerefOf (Arg0 [0x0E])
                    \_SB.PCI0.LPCB.H_EC.PECC = DerefOf (Arg0 [0x0F])
                    \_SB.PCI0.LPCB.H_EC.PDT0 = DerefOf (Arg0 [0x10])
                    \_SB.PCI0.LPCB.H_EC.PDT1 = DerefOf (Arg0 [0x11])
                    \_SB.PCI0.LPCB.H_EC.PDT2 = DerefOf (Arg0 [0x12])
                    \_SB.PCI0.LPCB.H_EC.PDT3 = DerefOf (Arg0 [0x13])
                    \_SB.PCI0.LPCB.H_EC.PRFC = DerefOf (Arg0 [0x14])
                    \_SB.PCI0.LPCB.H_EC.PRS0 = DerefOf (Arg0 [0x15])
                    \_SB.PCI0.LPCB.H_EC.PRS1 = DerefOf (Arg0 [0x16])
                    \_SB.PCI0.LPCB.H_EC.PRS2 = DerefOf (Arg0 [0x17])
                    \_SB.PCI0.LPCB.H_EC.PRS3 = DerefOf (Arg0 [0x18])
                    \_SB.PCI0.LPCB.H_EC.PRS4 = DerefOf (Arg0 [0x19])
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x67)
                }

                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                If (\ECON)
                {
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x65)
                }

                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                If (\ECON)
                {
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x66)
                }

                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
                If (\ECON)
                {
                    Local0 = \_SB.PCI0.LPCB.H_EC.PRCS /* External reference */
                }

                Return (Local0)
            }

            Method (RPEC, 0, NotSerialized)
            {
                Local0 = Zero
                If (\ECON)
                {
                    Local1 = \_SB.PCI0.LPCB.H_EC.PEC0 /* External reference */
                    Local0 |= Local1
                    Local1 = \_SB.PCI0.LPCB.H_EC.PEC1 /* External reference */
                    Local0 |= (Local1 << 0x08)
                    Local1 = \_SB.PCI0.LPCB.H_EC.PEC2 /* External reference */
                    Local0 |= (Local1 << 0x10)
                    Local1 = \_SB.PCI0.LPCB.H_EC.PEC3 /* External reference */
                    Local0 |= (Local1 << 0x18)
                }

                Return (Local0)
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (CPID, UnknownObj)
    External (FMBL, UnknownObj)
    External (PDC0, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000000, // Address
                    0x01,               // Access Size
                    )
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C1LH, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000010, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x02, 
            0x94, 
            0x01F4
        })
        Name (C7SM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000031, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC6, 
            0xC8
        })
        Name (C7LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000030, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC6, 
            0xC8
        })
        Name (C6LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000020, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xA9, 
            0x015E
        })
        Name (C3LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            0x02, 
            0x94, 
            0x01F4
        })
        Name (C6LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000415, // Address
                    ,)
            }, 

            0x03, 
            0xA9, 
            0x015E
        })
        Name (C7LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000416, // Address
                    ,)
            }, 

            0x03, 
            0xC6, 
            0xC8
        })
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                If (((CPID & 0x0FFF0FF0) == 0x000306A0))
                {
                    If ((CFGD & 0x00400000))
                    {
                        C3LI [0x02] = 0x3B
                        C3LM [0x02] = 0x3B
                        C6LI [0x02] = 0x50
                        C6LM [0x02] = 0x50
                        C7LI [0x02] = 0x57
                        C7LM [0x02] = 0x57
                        C7SM [0x02] = 0x57
                    }
                    Else
                    {
                        C3LI [0x02] = 0x94
                        C3LM [0x02] = 0x94
                        C6LI [0x02] = 0xA9
                        C6LM [0x02] = 0xA9
                        C7LI [0x02] = 0xC6
                        C7LM [0x02] = 0xC6
                        C7SM [0x02] = 0xC6
                    }
                }
                ElseIf ((CFGD & 0x00400000))
                {
                    C3LI [0x02] = 0x50
                    C3LM [0x02] = 0x50
                    C6LI [0x02] = 0x68
                    C6LM [0x02] = 0x68
                    C7LI [0x02] = 0x6D
                    C7LM [0x02] = 0x6D
                    C7SM [0x02] = 0x6D
                }
                Else
                {
                    C3LI [0x02] = 0x9C
                    C3LM [0x02] = 0x9C
                    C6LI [0x02] = 0xB5
                    C6LM [0x02] = 0xB5
                    C7LI [0x02] = 0xC7
                    C7LM [0x02] = 0xC7
                    C7SM [0x02] = 0xC7
                }

                CSTF = Ones
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0200)))
            {
                If ((!PWRS || (PFLV != FMBL)))
                {
                    If ((CFGD & 0x00010000))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0100)))
            {
                If ((!PWRS || (PFLV != FMBL)))
                {
                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((!PWRS || (PFLV != FMBL)))
            {
                If ((CFGD & 0x20))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x08))
                {
                    C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((CFGD & 0x10))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf ((CFGD & 0x08))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000236
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 62
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 62 54 4F 53 41 53 55  // UEFI6....bTOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 14 11 20 24  // .u.{6.$BVDT$.. $
    0040: 20 37 44 24 31 2E 38 30 00 00 00 00 00 00 00 00  //  7D$1.80........
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 56 47 31  // ............$VG1
    0060: 30 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 0F..............
    0070: 00 00 00 00 00 00 24 30 33 2E 37 32 2E 33 30 00  // ......$03.72.30.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 D0 7E 34 00 00 02  // .....$BME$.~4...
    0170: 00 00 24 00 E0 32 00 00 40 01 00 24 01 00 00 00  // ..$..2..@..$....
    0180: 00 00 80 01 00 24 5F 4D 53 43 5F 56 45 52 3D DC  // .....$_MSC_VER=.
    0190: 05 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


WDAT
----
[000h 0000 004h]                   Signature : "WDAT"    [Watchdog Action Table]
[004h 0004 004h]                Table Length : 00000224
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 87
[00Ah 0010 006h]                      Oem ID : "TOSASU"
[010h 0016 008h]                Oem Table ID : "TOSASU00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]               Header Length : 00000020
[028h 0040 002h]                 PCI Segment : 00FF
[02Ah 0042 001h]                     PCI Bus : FF
[02Bh 0043 001h]                  PCI Device : FF
[02Ch 0044 001h]                PCI Function : FF
[02Dh 0045 003h]                    Reserved : 000000
[030h 0048 004h]                Timer Period : 00000258
[034h 0052 004h]                   Max Count : 000003FF
[038h 0056 004h]                   Min Count : 00000002
[03Ch 0060 001h]       Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061 003h]                    Reserved : 000000
[040h 0064 004h]        Watchdog Entry Count : 00000014

[044h 0068 001h]             Watchdog Action : 01
[045h 0069 001h]                 Instruction : 02
[046h 0070 002h]                    Reserved : 0000

[048h 0072 00Ch]             Register Region : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 01 [SystemIO]
[049h 0073 001h]                   Bit Width : 10
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 02 [Word Access:16]
[04Ch 0076 008h]                     Address : 0000000000000460

[054h 0084 004h]                       Value : 00000000
[058h 0088 004h]               Register Mask : 000003FF

[05Ch 0092 001h]             Watchdog Action : 04
[05Dh 0093 001h]                 Instruction : 01
[05Eh 0094 002h]                    Reserved : 0000

[060h 0096 00Ch]             Register Region : [Generic Address Structure]
[060h 0096 001h]                    Space ID : 01 [SystemIO]
[061h 0097 001h]                   Bit Width : 10
[062h 0098 001h]                  Bit Offset : 00
[063h 0099 001h]        Encoded Access Width : 02 [Word Access:16]
[064h 0100 008h]                     Address : 0000000000000460

[06Ch 0108 004h]                       Value : 00000000
[070h 0112 004h]               Register Mask : 000003FF

[074h 0116 001h]             Watchdog Action : 05
[075h 0117 001h]                 Instruction : 01
[076h 0118 002h]                    Reserved : 0000

[078h 0120 00Ch]             Register Region : [Generic Address Structure]
[078h 0120 001h]                    Space ID : 01 [SystemIO]
[079h 0121 001h]                   Bit Width : 10
[07Ah 0122 001h]                  Bit Offset : 00
[07Bh 0123 001h]        Encoded Access Width : 02 [Word Access:16]
[07Ch 0124 008h]                     Address : 0000000000000472

[084h 0132 004h]                       Value : 00000000
[088h 0136 004h]               Register Mask : 000003FF

[08Ch 0140 001h]             Watchdog Action : 06
[08Dh 0141 001h]                 Instruction : 83
[08Eh 0142 002h]                    Reserved : 0000

[090h 0144 00Ch]             Register Region : [Generic Address Structure]
[090h 0144 001h]                    Space ID : 01 [SystemIO]
[091h 0145 001h]                   Bit Width : 10
[092h 0146 001h]                  Bit Offset : 00
[093h 0147 001h]        Encoded Access Width : 02 [Word Access:16]
[094h 0148 008h]                     Address : 0000000000000472

[09Ch 0156 004h]                       Value : 00000000
[0A0h 0160 004h]               Register Mask : 000003FF

[0A4h 0164 001h]             Watchdog Action : 08
[0A5h 0165 001h]                 Instruction : 00
[0A6h 0166 002h]                    Reserved : 0000

[0A8h 0168 00Ch]             Register Region : [Generic Address Structure]
[0A8h 0168 001h]                    Space ID : 01 [SystemIO]
[0A9h 0169 001h]                   Bit Width : 10
[0AAh 0170 001h]                  Bit Offset : 0B
[0ABh 0171 001h]        Encoded Access Width : 02 [Word Access:16]
[0ACh 0172 008h]                     Address : 0000000000000468

[0B4h 0180 004h]                       Value : 00000000
[0B8h 0184 004h]               Register Mask : 00000001

[0BCh 0188 001h]             Watchdog Action : 09
[0BDh 0189 001h]                 Instruction : 82
[0BEh 0190 002h]                    Reserved : 0000

[0C0h 0192 00Ch]             Register Region : [Generic Address Structure]
[0C0h 0192 001h]                    Space ID : 01 [SystemIO]
[0C1h 0193 001h]                   Bit Width : 10
[0C2h 0194 001h]                  Bit Offset : 00
[0C3h 0195 001h]        Encoded Access Width : 02 [Word Access:16]
[0C4h 0196 008h]                     Address : 0000000000000468

[0CCh 0204 004h]                       Value : 00000000
[0D0h 0208 004h]               Register Mask : 00000800

[0D4h 0212 001h]             Watchdog Action : 09
[0D5h 0213 001h]                 Instruction : 02
[0D6h 0214 002h]                    Reserved : 0000

[0D8h 0216 00Ch]             Register Region : [Generic Address Structure]
[0D8h 0216 001h]                    Space ID : 01 [SystemIO]
[0D9h 0217 001h]                   Bit Width : 08
[0DAh 0218 001h]                  Bit Offset : 00
[0DBh 0219 001h]        Encoded Access Width : 01 [Byte Access:8]
[0DCh 0220 008h]                     Address : 0000000000000070

[0E4h 0228 004h]                       Value : 00000045
[0E8h 0232 004h]               Register Mask : 000000FF

[0ECh 0236 001h]             Watchdog Action : 09
[0EDh 0237 001h]                 Instruction : 82
[0EEh 0238 002h]                    Reserved : 0000

[0F0h 0240 00Ch]             Register Region : [Generic Address Structure]
[0F0h 0240 001h]                    Space ID : 01 [SystemIO]
[0F1h 0241 001h]                   Bit Width : 08
[0F2h 0242 001h]                  Bit Offset : 00
[0F3h 0243 001h]        Encoded Access Width : 01 [Byte Access:8]
[0F4h 0244 008h]                     Address : 0000000000000071

[0FCh 0252 004h]                       Value : 00000001
[100h 0256 004h]               Register Mask : 00000001

[104h 0260 001h]             Watchdog Action : 0A
[105h 0261 001h]                 Instruction : 00
[106h 0262 002h]                    Reserved : 0000

[108h 0264 00Ch]             Register Region : [Generic Address Structure]
[108h 0264 001h]                    Space ID : 01 [SystemIO]
[109h 0265 001h]                   Bit Width : 10
[10Ah 0266 001h]                  Bit Offset : 0B
[10Bh 0267 001h]        Encoded Access Width : 02 [Word Access:16]
[10Ch 0268 008h]                     Address : 0000000000000468

[114h 0276 004h]                       Value : 00000001
[118h 0280 004h]               Register Mask : 00000001

[11Ch 0284 001h]             Watchdog Action : 0B
[11Dh 0285 001h]                 Instruction : 82
[11Eh 0286 002h]                    Reserved : 0000

[120h 0288 00Ch]             Register Region : [Generic Address Structure]
[120h 0288 001h]                    Space ID : 01 [SystemIO]
[121h 0289 001h]                   Bit Width : 10
[122h 0290 001h]                  Bit Offset : 00
[123h 0291 001h]        Encoded Access Width : 02 [Word Access:16]
[124h 0292 008h]                     Address : 0000000000000468

[12Ch 0300 004h]                       Value : 00000800
[130h 0304 004h]               Register Mask : 00000800

[134h 0308 001h]             Watchdog Action : 0B
[135h 0309 001h]                 Instruction : 02
[136h 0310 002h]                    Reserved : 0000

[138h 0312 00Ch]             Register Region : [Generic Address Structure]
[138h 0312 001h]                    Space ID : 01 [SystemIO]
[139h 0313 001h]                   Bit Width : 08
[13Ah 0314 001h]                  Bit Offset : 00
[13Bh 0315 001h]        Encoded Access Width : 01 [Byte Access:8]
[13Ch 0316 008h]                     Address : 0000000000000070

[144h 0324 004h]                       Value : 00000045
[148h 0328 004h]               Register Mask : 000000FF

[14Ch 0332 001h]             Watchdog Action : 0B
[14Dh 0333 001h]                 Instruction : 82
[14Eh 0334 002h]                    Reserved : 0000

[150h 0336 00Ch]             Register Region : [Generic Address Structure]
[150h 0336 001h]                    Space ID : 01 [SystemIO]
[151h 0337 001h]                   Bit Width : 08
[152h 0338 001h]                  Bit Offset : 00
[153h 0339 001h]        Encoded Access Width : 01 [Byte Access:8]
[154h 0340 008h]                     Address : 0000000000000071

[15Ch 0348 004h]                       Value : 00000000
[160h 0352 004h]               Register Mask : 00000001

[164h 0356 001h]             Watchdog Action : 10
[165h 0357 001h]                 Instruction : 00
[166h 0358 002h]                    Reserved : 0000

[168h 0360 00Ch]             Register Region : [Generic Address Structure]
[168h 0360 001h]                    Space ID : 01 [SystemIO]
[169h 0361 001h]                   Bit Width : 08
[16Ah 0362 001h]                  Bit Offset : 04
[16Bh 0363 001h]        Encoded Access Width : 01 [Byte Access:8]
[16Ch 0364 008h]                     Address : 000000000000046A

[174h 0372 004h]                       Value : 00000000
[178h 0376 004h]               Register Mask : 00000003

[17Ch 0380 001h]             Watchdog Action : 11
[17Dh 0381 001h]                 Instruction : 82
[17Eh 0382 002h]                    Reserved : 0000

[180h 0384 00Ch]             Register Region : [Generic Address Structure]
[180h 0384 001h]                    Space ID : 01 [SystemIO]
[181h 0385 001h]                   Bit Width : 10
[182h 0386 001h]                  Bit Offset : 00
[183h 0387 001h]        Encoded Access Width : 02 [Word Access:16]
[184h 0388 008h]                     Address : 000000000000046A

[18Ch 0396 004h]                       Value : 00000000
[190h 0400 004h]               Register Mask : 00000030

[194h 0404 001h]             Watchdog Action : 12
[195h 0405 001h]                 Instruction : 00
[196h 0406 002h]                    Reserved : 0000

[198h 0408 00Ch]             Register Region : [Generic Address Structure]
[198h 0408 001h]                    Space ID : 01 [SystemIO]
[199h 0409 001h]                   Bit Width : 08
[19Ah 0410 001h]                  Bit Offset : 04
[19Bh 0411 001h]        Encoded Access Width : 01 [Byte Access:8]
[19Ch 0412 008h]                     Address : 000000000000046A

[1A4h 0420 004h]                       Value : 00000001
[1A8h 0424 004h]               Register Mask : 00000003

[1ACh 0428 001h]             Watchdog Action : 13
[1ADh 0429 001h]                 Instruction : 82
[1AEh 0430 002h]                    Reserved : 0000

[1B0h 0432 00Ch]             Register Region : [Generic Address Structure]
[1B0h 0432 001h]                    Space ID : 01 [SystemIO]
[1B1h 0433 001h]                   Bit Width : 10
[1B2h 0434 001h]                  Bit Offset : 00
[1B3h 0435 001h]        Encoded Access Width : 02 [Word Access:16]
[1B4h 0436 008h]                     Address : 000000000000046A

[1BCh 0444 004h]                       Value : 00000010
[1C0h 0448 004h]               Register Mask : 00000030

[1C4h 0452 001h]             Watchdog Action : 20
[1C5h 0453 001h]                 Instruction : 02
[1C6h 0454 002h]                    Reserved : 0000

[1C8h 0456 00Ch]             Register Region : [Generic Address Structure]
[1C8h 0456 001h]                    Space ID : 01 [SystemIO]
[1C9h 0457 001h]                   Bit Width : 08
[1CAh 0458 001h]                  Bit Offset : 00
[1CBh 0459 001h]        Encoded Access Width : 01 [Byte Access:8]
[1CCh 0460 008h]                     Address : 0000000000000070

[1D4h 0468 004h]                       Value : 00000045
[1D8h 0472 004h]               Register Mask : 000000FF

[1DCh 0476 001h]             Watchdog Action : 20
[1DDh 0477 001h]                 Instruction : 00
[1DEh 0478 002h]                    Reserved : 0000

[1E0h 0480 00Ch]             Register Region : [Generic Address Structure]
[1E0h 0480 001h]                    Space ID : 01 [SystemIO]
[1E1h 0481 001h]                   Bit Width : 08
[1E2h 0482 001h]                  Bit Offset : 00
[1E3h 0483 001h]        Encoded Access Width : 01 [Byte Access:8]
[1E4h 0484 008h]                     Address : 0000000000000071

[1ECh 0492 004h]                       Value : 00000001
[1F0h 0496 004h]               Register Mask : 00000001

[1F4h 0500 001h]             Watchdog Action : 21
[1F5h 0501 001h]                 Instruction : 02
[1F6h 0502 002h]                    Reserved : 0000

[1F8h 0504 00Ch]             Register Region : [Generic Address Structure]
[1F8h 0504 001h]                    Space ID : 01 [SystemIO]
[1F9h 0505 001h]                   Bit Width : 08
[1FAh 0506 001h]                  Bit Offset : 00
[1FBh 0507 001h]        Encoded Access Width : 01 [Byte Access:8]
[1FCh 0508 008h]                     Address : 0000000000000070

[204h 0516 004h]                       Value : 00000045
[208h 0520 004h]               Register Mask : 000000FF

[20Ch 0524 001h]             Watchdog Action : 21
[20Dh 0525 001h]                 Instruction : 82
[20Eh 0526 002h]                    Reserved : 0000

[210h 0528 00Ch]             Register Region : [Generic Address Structure]
[210h 0528 001h]                    Space ID : 01 [SystemIO]
[211h 0529 001h]                   Bit Width : 08
[212h 0530 001h]                  Bit Offset : 00
[213h 0531 001h]        Encoded Access Width : 01 [Byte Access:8]
[214h 0532 008h]                     Address : 0000000000000071

[21Ch 0540 004h]                       Value : 00000000
[220h 0544 004h]               Register Mask : 00000001

Raw Table Data: Length 548 (0x224)

    0000: 57 44 41 54 24 02 00 00 01 87 54 4F 53 41 53 55  // WDAT$.....TOSASU
    0010: 54 4F 53 41 53 55 30 30 01 00 00 00 41 43 50 49  // TOSASU00....ACPI
    0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: 58 02 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // X...............
    0040: 14 00 00 00 01 02 00 00 01 10 00 02 60 04 00 00  // ............`...
    0050: 00 00 00 00 00 00 00 00 FF 03 00 00 04 01 00 00  // ................
    0060: 01 10 00 02 60 04 00 00 00 00 00 00 00 00 00 00  // ....`...........
    0070: FF 03 00 00 05 01 00 00 01 10 00 02 72 04 00 00  // ............r...
    0080: 00 00 00 00 00 00 00 00 FF 03 00 00 06 83 00 00  // ................
    0090: 01 10 00 02 72 04 00 00 00 00 00 00 00 00 00 00  // ....r...........
    00A0: FF 03 00 00 08 00 00 00 01 10 0B 02 68 04 00 00  // ............h...
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 09 82 00 00  // ................
    00C0: 01 10 00 02 68 04 00 00 00 00 00 00 00 00 00 00  // ....h...........
    00D0: 00 08 00 00 09 02 00 00 01 08 00 01 70 00 00 00  // ............p...
    00E0: 00 00 00 00 45 00 00 00 FF 00 00 00 09 82 00 00  // ....E...........
    00F0: 01 08 00 01 71 00 00 00 00 00 00 00 01 00 00 00  // ....q...........
    0100: 01 00 00 00 0A 00 00 00 01 10 0B 02 68 04 00 00  // ............h...
    0110: 00 00 00 00 01 00 00 00 01 00 00 00 0B 82 00 00  // ................
    0120: 01 10 00 02 68 04 00 00 00 00 00 00 00 08 00 00  // ....h...........
    0130: 00 08 00 00 0B 02 00 00 01 08 00 01 70 00 00 00  // ............p...
    0140: 00 00 00 00 45 00 00 00 FF 00 00 00 0B 82 00 00  // ....E...........
    0150: 01 08 00 01 71 00 00 00 00 00 00 00 00 00 00 00  // ....q...........
    0160: 01 00 00 00 10 00 00 00 01 08 04 01 6A 04 00 00  // ............j...
    0170: 00 00 00 00 00 00 00 00 03 00 00 00 11 82 00 00  // ................
    0180: 01 10 00 02 6A 04 00 00 00 00 00 00 00 00 00 00  // ....j...........
    0190: 30 00 00 00 12 00 00 00 01 08 04 01 6A 04 00 00  // 0...........j...
    01A0: 00 00 00 00 01 00 00 00 03 00 00 00 13 82 00 00  // ................
    01B0: 01 10 00 02 6A 04 00 00 00 00 00 00 10 00 00 00  // ....j...........
    01C0: 30 00 00 00 20 02 00 00 01 08 00 01 70 00 00 00  // 0... .......p...
    01D0: 00 00 00 00 45 00 00 00 FF 00 00 00 20 00 00 00  // ....E....... ...
    01E0: 01 08 00 01 71 00 00 00 00 00 00 00 01 00 00 00  // ....q...........
    01F0: 01 00 00 00 21 02 00 00 01 08 00 01 70 00 00 00  // ....!.......p...
    0200: 00 00 00 00 45 00 00 00 FF 00 00 00 21 82 00 00  // ....E.......!...
    0210: 01 08 00 01 71 00 00 00 00 00 00 00 00 00 00 00  // ....q...........
    0220: 01 00 00 00                                      // ....


