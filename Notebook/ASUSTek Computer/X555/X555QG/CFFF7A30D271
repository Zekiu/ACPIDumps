
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000B6C  0x01  "AMD   "  "CPMDFDGP"  0x00000001  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "_ASUS_"  "Notebook"  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000007E  0x03  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 04)  ECDT  0x000000C1  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI."   0x00000005
 05)  CRAT  0x00000528  0x01  "AMD   "  "AGESA   "  0x00000001  "AMD "   0x00000001
 06)  SSDT  0x00008896  0x02  "AMD   "  "AGESA   "  0x00000002  "MSFT"   0x04000000
 07)  TPM2  0x00000034  0x03  "      "  "Tpm2Tabl"  0x00000001  "AMI "   0x00000000
 08)  VFCT  0x0000FE84  0x01  "_ASUS_"  "Notebook"  0x00000001  "AMD "   0x31504F47
 09)  UEFI  0x00000042  0x01  "      "  "        "  0x00000000  "    "   0x00000000
 10)  IVRS  0x000000D0  0x02  "AMD   "  "AGESA   "  0x00000001  "AMD "   0x00000000
 11)  DSDT  0x0000F319  0x02  "_ASUS_"  "Notebook"  0x01072009  "INTL"   0x20120913
 12)  SSDT  0x0000165E  0x01  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20120913
 13)  SSDT  0x00001639  0x01  "AMD   "  "CPMDFIGP"  0x00000001  "INTL"   0x20120913
 14)  FACP  0x0000010C  0x05  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 15)  FPDT  0x00000044  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 16)  SSDT  0x000009F8  0x01  "AMD   "  "AGESA   "  0x00000001  "AMD "   0x00000001
 17)  MSDM  0x00000055  0x03  "_ASUS_"  "Notebook"  0x00000000  "ASUS"   0x00000001
 18)  HPET  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00000005
 19)  SSDT  0x000021DF  0x01  "AMD   "  "CPMZPODD"  0x00000001  "INTL"   0x20120913
 20)  FIDT  0x0000009C  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 21)  FACS  0x00000040  0x02
 22)  BGRT  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013

Found 22 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000007E
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 8F
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 10
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 11
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 12
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 13
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 04 [Local APIC NMI]
[04Dh 0077 001h]                      Length : 06
[04Eh 0078 001h]                Processor ID : FF
[04Fh 0079 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[051h 0081 001h]        Interrupt Input LINT : 01

[052h 0082 001h]               Subtable Type : 01 [I/O APIC]
[053h 0083 001h]                      Length : 0C
[054h 0084 001h]                 I/O Apic ID : 00
[055h 0085 001h]                    Reserved : 00
[056h 0086 004h]                     Address : FEC00000
[05Ah 0090 004h]                   Interrupt : 00000000

[05Eh 0094 001h]               Subtable Type : 01 [I/O APIC]
[05Fh 0095 001h]                      Length : 0C
[060h 0096 001h]                 I/O Apic ID : 01
[061h 0097 001h]                    Reserved : 00
[062h 0098 004h]                     Address : FEC01000
[066h 0102 004h]                   Interrupt : 00000018

[06Ah 0106 001h]               Subtable Type : 02 [Interrupt Source Override]
[06Bh 0107 001h]                      Length : 0A
[06Ch 0108 001h]                         Bus : 00
[06Dh 0109 001h]                      Source : 00
[06Eh 0110 004h]                   Interrupt : 00000002
[072h 0114 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[074h 0116 001h]               Subtable Type : 02 [Interrupt Source Override]
[075h 0117 001h]                      Length : 0A
[076h 0118 001h]                         Bus : 00
[077h 0119 001h]                      Source : 09
[078h 0120 004h]                   Interrupt : 00000009
[07Ch 0124 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 126 (0x7E)

    0000: 41 50 49 43 7E 00 00 00 03 8F 5F 41 53 55 53 5F  // APIC~....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 10  // ................
    0030: 01 00 00 00 00 08 02 11 01 00 00 00 00 08 03 12  // ................
    0040: 01 00 00 00 00 08 04 13 01 00 00 00 04 06 FF 05  // ................
    0050: 00 01 01 0C 00 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0060: 01 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0070: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 00
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000CBAC5018
[030h 0048 004h]               Image OffsetX : 0000020A
[034h 0052 004h]               Image OffsetY : 00000133

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 00 5F 41 53 55 53 5F  // BGRT8....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 50 AC CB 00 00 00 00  // .........P......
    0030: 0A 02 00 00 33 01 00 00                          // ....3...


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00000528
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : B6
[00Ah 0010 006h]                      Oem ID : "AMD   "
[010h 0016 008h]                Oem Table ID : "AGESA   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 1320 (0x528)

    0000: 43 52 41 54 28 05 00 00 01 B6 41 4D 44 20 20 20  // CRAT(.....AMD   
    0010: 41 47 45 53 41 20 20 20 01 00 00 00 41 4D 44 20  // AGESA   ....AMD 
    0020: 01 00 00 00 15 00 00 00 01 00 00 00 00 00 00 00  // ................
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 10 00 00 00  // .(..............
    0040: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 28 00 00 19 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 80 00 00 28 00 28 00 00 00  // ..........(.(...
    0070: 00 00 40 00 40 01 00 00 01 0A 04 20 00 00 00 00  // ..@.@...... ....
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 10 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 60 00 00 00 01 01 40 00 03 00 01 00  // ....`.....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 09 00 00 00  // .........@......
    0130: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 04 00 00 02 01 40 00 10 00 00 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0170: 11 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 12 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 60 00 00 00 01 01 40 00 03 00 01 00  // ....`.....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 09 00 00 00  // .........@......
    0230: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 04 00 00 02 01 40 00 10 00 00 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 13 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    02B0: 10 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    02E0: FF 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    02F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 01 00 00 00 00 00 FF 18 00 00 FF 30  // ...............0
    0320: 00 00 FF 18 00 00 00 00 03 40 00 00 AB 02 00 00  // .........@......
    0330: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 02 00 00 00 08 04 00 00 08 04 00 00  // ................
    0360: 08 04 00 00 00 00 00 00 03 40 00 00 AD 02 00 00  // .........@......
    0370: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 04 02  // ................
    03A0: 00 00 08 04 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    03B0: 11 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    03E0: FF 40 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .@.......@......
    03F0: 12 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0420: FF 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0430: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 01 00 00 00 00 00 FF 18 00 00 FF 30  // ...............0
    0460: 00 00 FF 18 00 00 00 00 03 40 00 00 AB 02 00 00  // .........@......
    0470: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 02 00 00 00 08 04 00 00 08 04 00 00  // ................
    04A0: 08 04 00 00 00 00 00 00 03 40 00 00 AD 02 00 00  // .........@......
    04B0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 04 02  // ................
    04E0: 00 00 08 04 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    04F0: 13 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0520: FF 40 00 00 00 00 00 00                          // .@......


DSDT
----
DefinitionBlock ("", "DSDT", 2, "_ASUS_", "Notebook", 0x01072009)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but only 0 were resolved (8 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.PB2_.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 6 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTP, 0xFED40000)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SPIB, 0xFEC10000)
    Name (SPIL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (HPTL, 0x0400)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (RXST, Zero)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xCD958000)
    Name (TPMC, 0xCD95C000)
    Name (TPMM, 0xFE600010)
    Name (FTPM, 0xFE600010)
    Name (PPIM, 0xCD956E18)
    Name (PPIL, 0x1C)
    Name (AMDT, One)
    Name (TPMF, One)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (MBLF, 0x0A)
    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, One)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xFFFF)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    Name (OSCF, Zero)
    Name (GGN2, One)
    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PEBS, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0x880FC), 
        RMBA,   32, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1800)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
            ,   9, 
        GESA,   1, 
        Offset (0x208), 
            ,   5, 
        E05C,   1, 
        Offset (0x209), 
        E08C,   1, 
        E09C,   1, 
        E10C,   1, 
        Offset (0x20B), 
            ,   5, 
        E1DC,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x377), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BE), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3F0), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F6), 
        GECD,   1, 
        Offset (0xD06), 
        G06M,   8, 
        G07M,   8, 
        Offset (0xD0B), 
        G0BM,   8, 
        Offset (0xD0E), 
        G0EM,   8, 
        Offset (0xD14), 
        G14M,   8, 
        Offset (0xD1C), 
        G1CM,   8, 
        Offset (0xD20), 
        G20M,   8, 
        Offset (0xD23), 
        G23M,   8, 
        Offset (0xD2D), 
        G2DM,   8, 
        Offset (0xD37), 
        G37M,   8, 
        Offset (0xD70), 
        G70M,   8, 
        Offset (0xD76), 
        G76M,   8, 
        Offset (0xDAF), 
        GAFM,   8, 
        GB0M,   8, 
        Offset (0xE80), 
            ,   2, 
        IMCS,   1, 
        Offset (0x1518), 
        Offset (0x151A), 
        GE10,   1, 
        Offset (0x1524), 
        Offset (0x1526), 
        GE22,   1, 
        Offset (0x1538), 
        Offset (0x153A), 
        G66I,   1, 
            ,   5, 
        G66O,   1, 
        G66E,   1, 
        Offset (0x1560), 
        Offset (0x1562), 
        G6FI,   1, 
            ,   5, 
        G6FO,   1, 
        G6FE,   1, 
        Offset (0x1604), 
        Offset (0x1606), 
        G50I,   1, 
            ,   5, 
        G50O,   1, 
        G50E,   1, 
        Offset (0x1608), 
        Offset (0x160A), 
        G51I,   1, 
            ,   5, 
        G51O,   1, 
        G51E,   1, 
        Offset (0x1610), 
        Offset (0x1612), 
        G57I,   1, 
            ,   5, 
        G57O,   1, 
        G57E,   1, 
        Offset (0x1618), 
        Offset (0x161A), 
        G59I,   1, 
            ,   5, 
        G59O,   1, 
        G59E,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80 = Arg0
        If (IMCS)
        {
            IBSE ()
        }

        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        If (PICM)
        {
            \_SB.IRQC ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        CPMS ()
        CPMS ()
        PEWS = One
        If (IMCS)
        {
            IBWE ()
        }
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    OperationRegion (IMIO, SystemIO, 0x3E, 0x02)
    Field (IMIO, ByteAcc, NoLock, Preserve)
    {
        IMCX,   8, 
        IMCA,   8
    }

    IndexField (IMCX, IMCA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x80), 
        MSTI,   8, 
        MITS,   8, 
        MRG0,   8, 
        MRG1,   8, 
        MRG2,   8, 
        MRG3,   8
    }

    Method (WACK, 0, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 != 0xFA))
        {
            Local0 = MRG0 /* \MRG0 */
            Sleep (0x0A)
        }
    }

    Method (IBSE, 0, NotSerialized)
    {
        MRG0 = Zero
        MRG1 = 0xB5
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Zero
        MSTI = 0x80
        WACK ()
        Local0 = MRG2 /* \MRG2 */
        Local0 &= 0xFE
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Local0
        MSTI = 0x81
        WACK ()
        MRG0 = Zero
        MRG1 = One
        MRG2 = Zero
        MSTI = 0x98
        WACK ()
        MRG0 = Zero
        MRG1 = 0xB4
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
    }

    Method (IBWE, 0, NotSerialized)
    {
        MRG0 = Zero
        MRG1 = 0xB5
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Zero
        MSTI = 0x80
        WACK ()
        Local0 = MRG2 /* \MRG2 */
        Local0 |= One
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Local0
        MSTI = 0x81
        WACK ()
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1A
            }
        })
        Name (PR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x22
            }
        })
        Name (PR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2A
            }
        })
        Name (PR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x32
            }
        })
        Name (PR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PR00, Package (0x1B)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x1B)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x13
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xD0000000)
            Name (MBL, 0x30000000)
            Name (MABL, 0x00000000)
            Name (MABH, 0x00000000)
            Name (MALL, 0x00000000)
            Name (MALH, 0x00000000)
            Name (MAML, 0x00000000)
            Name (MAMH, 0x00000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN3 = (NBTP - MBB)
                    Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                    MAX3 = (MIN3 + Local0--)
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    MIN7 = 0xFEDCA000
                    Local0 = (0xFEDCA000 - NBTP)
                    LEN7 = (MBL - Local0)
                    LEN7 = (LEN7 - LEN3)
                    Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                    MAX7 = (MIN7 + Local0--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8L)  // _MIN: Minimum Base Address
                        Local0 = (0x0670 + 0x04)
                        CreateDWordField (CRS1, Local0, MN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        CreateDWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8L)  // _MAX: Maximum Base Address
                        Local1 = (0x06B0 + 0x04)
                        CreateDWordField (CRS1, Local1, MX8H)
                        CreateDWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8L)  // _LEN: Length
                        Local2 = (0x0730 + 0x04)
                        CreateDWordField (CRS1, Local2, LN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        LN8L = MALL /* \_SB_.PCI0.MALL */
                        LN8H = MALH /* \_SB_.PCI0.MALH */
                        MX8L = MAML /* \_SB_.PCI0.MAML */
                        MX8H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9L)  // _MIN: Minimum Base Address
                        Local0 = (0x0460 + 0x04)
                        CreateDWordField (CRS2, Local0, MN9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9L)  // _MAX: Maximum Base Address
                        Local1 = (0x04A0 + 0x04)
                        CreateDWordField (CRS2, Local1, MX9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9L)  // _LEN: Length
                        Local2 = (0x0520 + 0x04)
                        CreateDWordField (CRS2, Local2, LN9H)
                        MN9L = MABL /* \_SB_.PCI0.MABL */
                        MN9H = MABH /* \_SB_.PCI0.MABH */
                        LN9L = MALL /* \_SB_.PCI0.MALL */
                        LN9H = MALH /* \_SB_.PCI0.MALH */
                        MX9L = MAML /* \_SB_.PCI0.MAML */
                        MX9H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
                Field (NAPC, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Mutex (NAPM, 0x00)
                Method (NAPE, 0, NotSerialized)
                {
                    Acquire (NAPM, 0xFFFF)
                    NAPX = Zero
                    Local0 = NAPD /* \_SB_.PCI0.GNBD.NAPD */
                    Local0 &= 0xFFFFFFEF
                    NAPD = Local0
                    Release (NAPM)
                }

                Method (GINI, 0, NotSerialized)
                {
                    NAPE ()
                }

                OperationRegion (NBRV, PCI_Config, 0x08, One)
                Field (NBRV, ByteAcc, NoLock, Preserve)
                {
                    PREV,   8
                }

                OperationRegion (NBBR, PCI_Config, 0x1C, 0x08)
                Field (NBBR, DWordAcc, NoLock, Preserve)
                {
                    BR3L,   32, 
                    BR3H,   32
                }

                OperationRegion (NBBI, PCI_Config, 0x84, 0x04)
                Field (NBBI, DWordAcc, NoLock, Preserve)
                {
                    PARB,   32
                }

                OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
                Field (NBMS, DWordAcc, NoLock, Preserve)
                {
                    MIDX,   32, 
                    MIDR,   32
                }

                Mutex (NBMM, 0x00)
                Method (NBMR, 1, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    MIDX = Local0
                    Local0 = MIDR /* \_SB_.PCI0.GNBD.MIDR */
                    MIDX = 0x7F
                    Release (NBMM)
                    Return (Local0)
                }

                Method (NBMW, 2, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    Local0 |= 0x80
                    MIDX = Local0
                    MIDR = Arg1
                    MIDX = Local0 &= 0x7F
                    Release (NBMM)
                }

                OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
                Field (NBXP, DWordAcc, NoLock, Preserve)
                {
                    NBXI,   32, 
                    NBXD,   32
                }

                Mutex (NBXM, 0x00)
                Method (NBXR, 1, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    Local0 = NBXD /* \_SB_.PCI0.GNBD.NBXD */
                    NBXI = Zero
                    Release (NBXM)
                    Return (Local0)
                }

                Method (NBXW, 2, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    NBXD = Arg1
                    NBXI = Zero
                    Release (NBXM)
                }

                Method (GFXM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x08)
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (GPPM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x67)
                    Local0 &= 0xF0
                    Return (Local0)
                }

                Method (GPPX, 0, NotSerialized)
                {
                    Local0 = NBMR (0x2D)
                    Local0 >>= 0x07
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (XPTR, 2, NotSerialized)
                {
                    If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Local0 = GPPM ()
                        Local1 = GPPX ()
                        Local0 = One
                        If ((Arg0 < 0x04))
                        {
                            Local1 = (Arg0 + 0x02)
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x11)
                        }

                        Local0 <<= Local1
                        Local2 = NBMR (0x08)
                        If (Arg1)
                        {
                            Local2 &= ~Local0
                        }
                        Else
                        {
                            Local2 |= Local0
                        }

                        NBMW (0x08, Local2)
                        Return (Ones)
                    }
                }

                Name (PX3L, 0x80000000)
                Name (PX3H, 0x80000000)
                Name (PX3S, 0x10000000)
                Name (PX3K, 0xF0000000)
                Mutex (BR3X, 0x00)
                Method (BR3M, 0, NotSerialized)
                {
                    Local0 = PARB /* \_SB_.PCI0.GNBD.PARB */
                    Local0 >>= 0x10
                    Local0 &= 0x07
                    If (Local0)
                    {
                        Local1 = (One << Local0)
                        Local1 = (0x1000 - Local1)
                        Local1 <<= 0x14
                        PX3K = Local1
                        Local0 = (0x00100000 >> Local0)
                        PX3S = Local0
                    }

                    Acquire (BR3X, 0xFFFF)
                    Local0 = NBMR (Zero)
                    Local0 &= 0xFFFFFFF7
                    NBMW (Zero, Local0)
                    Local0 = BR3L /* \_SB_.PCI0.GNBD.BR3L */
                    Local0 &= PX3K /* \_SB_.PCI0.GNBD.PX3K */
                    PX3L = Local0
                    Local0 = BR3H /* \_SB_.PCI0.GNBD.BR3H */
                    Local0 &= 0xFF
                    PX3H = Local0
                    Local0 = NBMR (Zero)
                    Local0 |= 0x08
                    NBMW (Zero, Local0)
                    Release (BR3X)
                    Return (PX3L) /* \_SB_.PCI0.GNBD.PX3L */
                }

                Method (GPTS, 1, NotSerialized)
                {
                }

                Method (GWAK, 1, NotSerialized)
                {
                    If (PICM)
                    {
                        NAPE ()
                    }
                }

                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x90), 
                    TOM,    32, 
                    OI,     32, 
                    OD,     32, 
                    Offset (0xE0), 
                    LI,     32, 
                    LD,     32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x40000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._LEN, LEN1)  // _LEN: Length
                        LEN1 = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        BAS1 = (TOM - LEN1) /* \_SB_.PCI0.GNBD.BROD._CRS.LEN1 */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                OperationRegion (NBF2, PCI_Config, Zero, 0x0100)
                Field (NBF2, AnyAcc, NoLock, Preserve)
                {
                    DID,    32, 
                    Offset (0x44), 
                    MBAS,   32
                }

                Device (^UMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x15)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.UMEM._Y10._BAS, BAS3)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.UMEM._Y10._LEN, LEN3)  // _LEN: Length
                        If ((^^IOMA.DID != 0xFFFFFFFF))
                        {
                            LEN3 = 0x00080000
                            BAS3 = (^^IOMA.MBAS & 0xFFFFC000)
                        }

                        Return (CRS) /* \_SB_.PCI0.UMEM.CRS_ */
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
                Field (NAPC, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                OperationRegion (XPEX, SystemMemory, 0xF8011100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GPP0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PR12) /* \_SB_.PR12 */
                }

                Device (D00B)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PR13) /* \_SB_.PR13 */
                }

                Device (D00D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PR15) /* \_SB_.PR15 */
                }

                Device (D00F)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }

                Device (GLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x03))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    OperationRegion (LANR, PCI_Config, Zero, 0x0100)
                    Field (LANR, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0xE0), 
                            ,   15, 
                        PMES,   1
                    }
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PR14) /* \_SB_.PR14 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PR16) /* \_SB_.PR16 */
                }

                Device (D013)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
                Field (NAPC, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                OperationRegion (XPEX, SystemMemory, 0xF8011100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GFX0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PR18) /* \_SB_.PR18 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }

                Device (D02C)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GFX1)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR19) /* \_SB_.AR19 */
                    }

                    Return (PR19) /* \_SB_.PR19 */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX2)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PR1A) /* \_SB_.PR1A */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX3)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1B) /* \_SB_.AR1B */
                    }

                    Return (PR1B) /* \_SB_.PR1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX4)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C) /* \_SB_.AR1C */
                    }

                    Return (PR1C) /* \_SB_.PR1C */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D01F)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (AZAL)
            {
                Name (_ADR, 0x00090002)  // _ADR: Address
            }

            Device (D024)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Method (SPTS, 1, NotSerialized)
                {
                }

                Method (SWAK, 1, NotSerialized)
                {
                    If (PICM)
                    {
                        IRQC ()
                    }
                }

                Scope (\_SB)
                {
                    Name (SLPS, Zero)
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0xFE00,             // Range Minimum
                                    0xFE00,             // Range Maximum
                                    0x00,               // Alignment
                                    0xFF,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED61000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y18)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = \SMBB
                                    SMH1 = \SMBB
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (GPBS)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, IGB)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, IGH)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, IGL)  // _LEN: Length
                                    IGB = GPBS /* \GPBS */
                                    IGH = GPBS /* \GPBS */
                                    IGL = GPLN /* \GPLN */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                If (SPIB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, SPIB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, SPIL)  // _LEN: Length
                                    SPIB = \SPIB
                                    SPIL = \SPIL
                                }

                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, Zero)
                Name (BA_5, Zero)
                Name (SBAR, 0xF0B6F000)
                Name (OSVR, Zero)
                OperationRegion (SATX, PCI_Config, Zero, 0x44)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0x24), 
                    BA05,   32, 
                    Offset (0x40), 
                    WTEN,   1, 
                    Offset (0x42), 
                    DIS0,   1, 
                    DIS1,   1, 
                    DIS2,   1, 
                    DIS3,   1, 
                    DIS4,   1, 
                    DIS5,   1
                }

                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DISP,   6
                }

                Method (GBAA, 0, Serialized)
                {
                    BA_5 = BA05 /* \_SB_.PCI0.SATA.BA05 */
                    If (((BA_5 == Ones) || (STCL != 0x0101)))
                    {
                        B5EN = Zero
                        Return (SBAR) /* \_SB_.PCI0.SATA.SBAR */
                    }
                    Else
                    {
                        B5EN = One
                        Return (BA_5) /* \_SB_.PCI0.SATA.BA_5 */
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    NOPT,   5, 
                    Offset (0x0C), 
                    PTI0,   1, 
                    PTI1,   1, 
                    PTI2,   1, 
                    PTI3,   1, 
                    PTI4,   1, 
                    PTI5,   1, 
                    PTI6,   1, 
                    PTI7,   1, 
                    Offset (0x118), 
                    CST0,   1, 
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x12C), 
                    DDI0,   4, 
                    Offset (0x198), 
                    CST1,   1, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x1AC), 
                    DDI1,   4, 
                    Offset (0x218), 
                    CST2,   1, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x22C), 
                    DDI2,   4, 
                    Offset (0x298), 
                    CST3,   1, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x2AC), 
                    DDI3,   4, 
                    Offset (0x318), 
                    CST4,   1, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x32C), 
                    DDI4,   4, 
                    Offset (0x398), 
                    CST5,   1, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4, 
                    Offset (0x3AC), 
                    DDI5,   4
                }

                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    PTI,    6
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.PRID.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                        {
                            If (IPM2)
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET0 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET2 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SECD.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                        {
                            If (IPM1)
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM3)
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET1 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET3 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (ENP, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        DIS0 = ~Arg1
                    }
                    ElseIf ((Arg0 == One))
                    {
                        DIS1 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        DIS2 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        DIS3 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        DIS4 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        DIS5 = ~Arg1
                    }

                    WTEN = One
                    If ((Arg0 == Zero))
                    {
                        PTI0 = Arg1
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTI1 = Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTI2 = Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTI3 = Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        PTI4 = Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        PTI5 = Arg1
                    }

                    If ((DISP == 0x3F))
                    {
                        PTI0 = One
                    }
                    ElseIf ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                    {
                        PTI0 = Zero
                    }

                    Local0 = PTI /* \_SB_.PCI0.SATA.PTI_ */
                    Local1 = Zero
                    While (Local0)
                    {
                        If ((Local0 & One))
                        {
                            Local1++
                        }

                        Local0 >>= One
                    }

                    NOPT = Local1--
                    WTEN = Zero
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (PCIG, PCI_Config, Zero, 0x50)
                Field (PCIG, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    GBA2,   32
                }

                OperationRegion (GFMM, SystemMemory, GBA2, 0x6000)
                Field (GFMM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x5F68), 
                    AZPS,   32
                }

                OperationRegion (VSID, PCI_Config, Zero, 0x04)
                Field (VSID, ByteAcc, NoLock, Preserve)
                {
                    REG0,   32
                }

                Name (PXEN, 0x80000000)
                Name (AF7E, 0x80000001)
                Name (SACD, Zero)
                Name (PCTG, Package (0x0B){})
                Method (PRST, 0, NotSerialized)
                {
                    If ((REG0 == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Name (BCMP, Zero)
                Name (UPDN, One)
                Name (NXTD, One)
                Name (LCDM, One)
                Name (CRTM, 0x02)
                Name (TVOM, 0x04)
                Name (DVIM, 0x08)
                Name (HDMM, 0x10)
                Name (PACH, Zero)
                Name (DONE, Zero)
                Name (DOSF, One)
                Name (BRNC, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ^^^DOSF = DOSF /* \_SB_.PCI0.VGA_.DOSF */
                }

                Method (GCDS, 0, NotSerialized)
                {
                    SACD = One
                    If ((MSOS () < OSW8))
                    {
                        AFN0 ()
                    }
                    Else
                    {
                        ^^PB2.VGA.AFN0 ()
                    }

                    Local0 = 0x01F4
                    While (Local0)
                    {
                        If ((SACD == Zero))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0--
                            Sleep (0x0A)
                        }
                    }

                    Return (XD2A (CSTE))
                    Return (GETD ())
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSF = (Arg0 & 0x03)
                    ^^^DOSF = DOSF /* \_SB_.PCI0.VGA_.DOSF */
                    BRNC = (Arg0 >> 0x02)
                    BRNC &= One
                }

                Name (DODP, Package (0x03)
                {
                    0x00010100, 
                    0x00010110, 
                    0xFFFF0010
                })
                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If (!PACH)
                    {
                        DODP [Match (DODP, MEQ, 0xFFFF0010, MTR, Zero, Zero)] = 0x0210
                        PACH = One
                    }

                    Return (DODP) /* \_SB_.PCI0.VGA_.DODP */
                }

                Device (CRTD)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = AVLD /* \_SB_.AVLD */
                        If (Local0)
                        {
                            If ((Local0 & CRTM))
                            {
                                Return (0x1F)
                            }
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = (NXTD & CRTM) /* \_SB_.PCI0.VGA_.CRTM */
                        If (Local0)
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Sleep (0xC8)
                        DONE = One
                    }
                }

                Device (HDMI)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0210)
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = AVLD /* \_SB_.AVLD */
                        If (Local0)
                        {
                            If ((Local0 & HDMM))
                            {
                                Return (0x1F)
                            }
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = (NXTD & HDMM) /* \_SB_.PCI0.VGA_.HDMM */
                        If (Local0)
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Sleep (0xC8)
                        DONE = One
                    }
                }

                Scope (\)
                {
                    Mutex (PXPX, 0x00)
                }

                Device (LCDD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = AVLD /* \_SB_.AVLD */
                        If (Local0)
                        {
                            If ((Local0 & LCDM))
                            {
                                Return (0x1F)
                            }
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = (NXTD & LCDM) /* \_SB_.PCI0.VGA_.LCDM */
                        If (Local0)
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Sleep (0xC8)
                        DONE = One
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If ((MSOS () >= OSW8))
                        {
                            Local0 = (0x64 + One)
                            Local0 += 0x02
                            Name (BRPP, Package (0x67){})
                            BRPP [Zero] = 0x64
                            BRPP [One] = 0x28
                            Local1 = 0x02
                            Local2 = Zero
                            While ((Local1 < Local0))
                            {
                                BRPP [Local1] = Local2
                                Local1++
                                Local2++
                            }

                            Local0 = Zero
                            While ((Local0 <= 0x0A))
                            {
                                Local1 = (Local0 * 0x0A)
                                Local2 = (0x0B - Local0)
                                Local2 -= One
                                PCTG [Local2] = Local1
                                Local0++
                            }

                            Return (BRPP) /* \_SB_.PCI0.VGA_.LCDD._BCL.BRPP */
                        }

                        Local0 = Zero
                        Local4 = BRTI /* \_SB_.BRTI */
                        Local4 <<= 0x04
                        While ((Local0 < 0x0B))
                        {
                            Local3 = (0x0B - Local0)
                            Local3 -= One
                            Local3 = (Local4 + Local3)
                            Local1 = DerefOf (^^^SBRG.EC0.PWAC [Local3])
                            Local2 = ((Local1 * 0x64) / 0xFF)
                            PCTG [Local0] = Local2
                            Local0++
                        }

                        Return (PCTG) /* \_SB_.PCI0.VGA_.PCTG */
                    }

                    Name (BCBH, Zero)
                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((MSOS () < OSW8))
                        {
                            Local0 = GCBL (Arg0)
                            LBTN = (0x0A - Local0)
                            Divide ((Arg0 * 0xFF), 0x64, Local2, Local3)
                            AFN7 (Local3)
                        }
                        Else
                        {
                            Local0 = (Arg0 * 0xFF)
                            Divide (Local0, 0x64, Local1, BCMP) /* \_SB_.PCI0.VGA_.BCMP */
                            Divide ((Arg0 * 0xFF), 0x64, Local2, Local3)
                            ^^^PB2.VGA.AFN7 (Local3)
                        }
                    }
                }

                Method (SWHD, 1, Serialized)
                {
                    UPDN = One
                    SACD = 0x02
                    NXTD = Arg0
                    If ((MSOS () < OSW8))
                    {
                        AFN0 ()
                    }
                    Else
                    {
                        ^^PB2.VGA.AFN0 ()
                    }

                    Return (Zero)
                    UPDN = One
                    If ((DOSF == One))
                    {
                        SETD = Arg0
                        ISMI (0x94)
                    }
                    Else
                    {
                        NXTD = Arg0
                        SETD = Arg0
                        DONE = Zero
                        Notify (VGA, 0x80) // Status Change
                        Local0 = 0x05
                        While (Local0)
                        {
                            GETD ()
                            If ((ACTD == NXTD))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Sleep (0x03E8)
                                Local0--
                            }
                        }
                    }
                }

                Method (GETD, 0, NotSerialized)
                {
                    ISMI (0x95)
                    Return (ACTD) /* \_SB_.ACTD */
                }

                Method (GNDD, 0, NotSerialized)
                {
                    ISMI (0xA0)
                    Return (SETD) /* \_SB_.SETD */
                }

                Method (ADVD, 0, NotSerialized)
                {
                    SACD = One
                    If ((MSOS () < OSW8))
                    {
                        AFN0 ()
                    }
                    Else
                    {
                        ^^PB2.VGA.AFN0 ()
                    }

                    Local0 = 0x01F4
                    While (Local0)
                    {
                        If ((SACD == Zero))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0--
                            Sleep (0x0A)
                        }
                    }

                    Return (NXTD) /* \_SB_.PCI0.VGA_.NXTD */
                    If (UPDN)
                    {
                        UPDN = Zero
                        GETD ()
                        SETD = ACTD /* \_SB_.ACTD */
                    }

                    GNDD ()
                    NXTD = SETD /* \_SB_.SETD */
                    Return (SETD) /* \_SB_.SETD */
                }

                Method (NATK, 0, NotSerialized)
                {
                    Return (One)
                }

                Method (UPBL, 0, NotSerialized)
                {
                    Notify (LCDD, 0x86) // Device-Specific
                }

                Method (DWBL, 0, NotSerialized)
                {
                    Notify (LCDD, 0x87) // Device-Specific
                }

                Method (GCBL, 1, NotSerialized)
                {
                    Arg0 &= 0x7FFFFFFF
                    Local0 = Zero
                    While ((Local0 < 0x0B))
                    {
                        Local1 = DerefOf (PCTG [Local0])
                        If ((Local1 <= Arg0))
                        {
                            Break
                        }

                        Local0++
                    }

                    If ((Local0 >= 0x0B))
                    {
                        Local2 = 0x0A
                    }
                    Else
                    {
                        Local2 = Local0
                    }

                    Return (Local2)
                }

                Method (XD2A, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & One))
                    {
                        Local0 |= One
                    }

                    If ((Arg0 & 0x02))
                    {
                        Local0 |= 0x02
                    }

                    If ((Arg0 & 0x04))
                    {
                        Local0 |= 0x04
                    }

                    If ((Arg0 & 0x08))
                    {
                        Local0 |= 0x10
                    }

                    Return (Local0)
                }

                Method (XA2D, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & One))
                    {
                        Local0 |= One
                    }

                    If ((Arg0 & 0x02))
                    {
                        Local0 |= 0x02
                    }

                    If ((Arg0 & 0x04))
                    {
                        Local0 |= 0x04
                    }

                    If ((Arg0 & 0x10))
                    {
                        Local0 |= 0x08
                    }

                    Return (Local0)
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP2.GLAN, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.XHC0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            MPTS (Arg0, SPTS (Arg0), FPTS (Arg0), \_SB.PCI0.GNBD.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0), OEMS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GNBD.GWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        FWAK ()
        OEMW (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_PR)
    {
        OperationRegion (SSDT, SystemMemory, 0xFFFF0000, 0xFFFF)
        Name (DCOR, 0x02)
        Name (TBLD, 0x04)
        Name (NPSS, 0x05)
        Name (HNDL, 0x80000000)
        Name (APSS, Package (0x0A)
        {
            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }
        })
        Processor (P000, 0x01, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P000._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P001, 0x02, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P001._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P002, 0x03, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P002._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P003, 0x04, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P003._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSFL ()
            ^GNBD.GINI ()
            FINI ()
            If ((RVID <= 0x13)){}
            If (IMCS)
            {
                IBWE ()
            }
        }
    }

    OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
    Field (SMIC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x296), 
        STMR,   15, 
        TMRE,   1, 
            ,   29, 
        TMRS,   1, 
        Offset (0x36A), 
        SMIT,   8, 
        Offset (0x3DA), 
            ,   4, 
        RFCS,   2, 
        Offset (0x3DC), 
            ,   30, 
        SM30,   1, 
        Offset (0x3EE), 
        U3PS,   2, 
        Offset (0xE28), 
            ,   29, 
        SARP,   1, 
        U2RP,   1, 
        U3RP,   1, 
        Offset (0x1518), 
            ,   22, 
        G06D,   1, 
        G06E,   1, 
        Offset (0x152C), 
            ,   22, 
        G0BD,   1, 
        G0BE,   1, 
        Offset (0x1564), 
        Offset (0x1566), 
        G19S,   1, 
            ,   5, 
        G19D,   1, 
        G19E,   1, 
        Offset (0x1C00), 
        XH0E,   1, 
            ,   6, 
        U3PY,   1, 
            ,   7, 
        UD3P,   1, 
        U3PR,   1, 
            ,   11, 
        FWLM,   1, 
        FPLS,   1, 
        FPLC,   1, 
        Offset (0x1C04), 
        UA04,   16, 
            ,   15, 
        ROAM,   1, 
        UA08,   32, 
        Offset (0x1E4A), 
        I0TD,   2, 
            ,   1, 
        I0PD,   1, 
        Offset (0x1E4B), 
        I0DS,   3, 
        Offset (0x1E4C), 
        I1TD,   2, 
            ,   1, 
        I1PD,   1, 
        Offset (0x1E4D), 
        I1DS,   3, 
        Offset (0x1E4E), 
        I2TD,   2, 
            ,   1, 
        I2PD,   1, 
        Offset (0x1E4F), 
        I2DS,   3, 
        Offset (0x1E50), 
        I3TD,   2, 
            ,   1, 
        I3PD,   1, 
        Offset (0x1E51), 
        I3DS,   3, 
        Offset (0x1E56), 
        U0TD,   2, 
            ,   1, 
        U0PD,   1, 
        Offset (0x1E57), 
        U0DS,   3, 
        Offset (0x1E58), 
        U1TD,   2, 
            ,   1, 
        U1PD,   1, 
        Offset (0x1E59), 
        U1DS,   3, 
        Offset (0x1E5E), 
        SATD,   2, 
            ,   1, 
        SAPD,   1, 
        Offset (0x1E5F), 
        SADS,   3, 
        Offset (0x1E64), 
        U2TD,   2, 
            ,   1, 
        U2PD,   1, 
        Offset (0x1E65), 
        U2DS,   3, 
        Offset (0x1E6E), 
        U3TD,   2, 
            ,   1, 
        U3PD,   1, 
        Offset (0x1E6F), 
        U3DS,   3, 
        Offset (0x1E70), 
        SDTD,   2, 
            ,   1, 
        SDPD,   1, 
            ,   2, 
        SDRT,   1, 
        SDSC,   1, 
        SDDS,   3, 
        Offset (0x1E80), 
            ,   15, 
        RQ15,   1, 
            ,   2, 
        RQ18,   1, 
            ,   4, 
        RQ23,   1, 
        RQ24,   1, 
            ,   5, 
        RQTY,   1, 
        Offset (0x1E84), 
            ,   15, 
        SASR,   1, 
            ,   2, 
        U2SR,   1, 
            ,   4, 
        U3SR,   1, 
        SDSR,   1, 
        Offset (0x1E88), 
        SRSA,   32, 
        SRSD,   32, 
        Offset (0x1E94), 
        SRDY,   1, 
        Offset (0x1EA0), 
        PG1A,   1, 
        PG2,    1, 
            ,   1, 
        U3PG,   1, 
        Offset (0x1EA3), 
        PGA3,   8, 
        Offset (0x61A8A), 
            ,   1, 
        CCGE,   1, 
        Offset (0x61A9E), 
            ,   1, 
        HCGE,   1
    }

    Mutex (FDAS, 0x00)
    Method (FDDC, 2, Serialized)
    {
        Acquire (FDAS, 0xFFFF)
        If (PCEF)
        {
            Local0 = 0xD0
            If ((Arg1 == 0x03))
            {
                Local0 += 0x03
            }

            Local0 <<= 0x08
            Local0 += Arg0
            P80H = Local0
        }

        If ((Arg1 == Zero))
        {
            Switch (ToInteger (Arg0))
            {
                Case (Package (0x03)
                    {
                        0x05, 
                        0x0F, 
                        0x18
                    }

)
                {
                    PG1A = One
                }
                Case (Package (0x06)
                    {
                        0x06, 
                        0x07, 
                        0x08, 
                        0x0B, 
                        0x0C, 
                        0x12
                    }

)
                {
                    PG2 = One
                }
                Case (Package (0x0A)
                    {
                        0x05, 
                        0x0F, 
                        0x18, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x0B, 
                        0x0C, 
                        0x12, 
                        0x17
                    }

)
                {
                    SRDY = Zero
                }

            }

            Switch (ToInteger (Arg0))
            {
                Case (0x05)
                {
                    I0TD = Zero
                    I0PD = One
                    Local0 = I0DS /* \I0DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I0DS /* \I0DS */
                    }
                }
                Case (0x06)
                {
                    I1TD = Zero
                    I1PD = One
                    Local0 = I1DS /* \I1DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I1DS /* \I1DS */
                    }
                }
                Case (0x07)
                {
                    I2TD = Zero
                    I2PD = One
                    Local0 = I2DS /* \I2DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I2DS /* \I2DS */
                    }
                }
                Case (0x08)
                {
                    I3TD = Zero
                    I3PD = One
                    Local0 = I3DS /* \I3DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I3DS /* \I3DS */
                    }
                }
                Case (0x0B)
                {
                    U0TD = Zero
                    U0PD = One
                    Local0 = U0DS /* \U0DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = U0DS /* \U0DS */
                    }
                }
                Case (0x0C)
                {
                    U1TD = Zero
                    U1PD = One
                    Local0 = U1DS /* \U1DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = U1DS /* \U1DS */
                    }
                }
                Case (0x0F)
                {
                    STD0 ()
                }
                Case (0x12)
                {
                    U2D0 ()
                }
                Case (0x17)
                {
                    U3D0 ()
                }
                Case (0x18)
                {
                    SDD0 ()
                }

            }
        }
        Else
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x05)
                {
                    I0PD = Zero
                    Local0 = I0DS /* \I0DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I0DS /* \I0DS */
                    }

                    I0TD = 0x03
                }
                Case (0x06)
                {
                    I1PD = Zero
                    Local0 = I1DS /* \I1DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I1DS /* \I1DS */
                    }

                    I1TD = 0x03
                }
                Case (0x07)
                {
                    I2PD = Zero
                    Local0 = I2DS /* \I2DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I2DS /* \I2DS */
                    }

                    I2TD = 0x03
                }
                Case (0x08)
                {
                    I3PD = Zero
                    Local0 = I3DS /* \I3DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I3DS /* \I3DS */
                    }

                    I3TD = 0x03
                }
                Case (0x0B)
                {
                    U0PD = Zero
                    Local0 = U0DS /* \U0DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = U0DS /* \U0DS */
                    }

                    U0TD = 0x03
                }
                Case (0x0C)
                {
                    U1PD = Zero
                    Local0 = U1DS /* \U1DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = U1DS /* \U1DS */
                    }

                    U1TD = 0x03
                }
                Case (0x0F)
                {
                    STD3 ()
                }
                Case (0x12)
                {
                    U2D3 ()
                }
                Case (0x17)
                {
                    U3D3 ()
                }
                Case (0x18)
                {
                    SDD3 ()
                }

            }

            If ((I0TD == 0x03))
            {
                If ((SATD == 0x03))
                {
                    If ((SDTD == 0x03))
                    {
                        PG1A = Zero
                    }
                }
            }

            If ((I1TD == 0x03))
            {
                If ((I2TD == 0x03))
                {
                    If ((I3TD == 0x03))
                    {
                        If ((U0TD == 0x03))
                        {
                            If ((U1TD == 0x03))
                            {
                                If ((U2TD == 0x03))
                                {
                                    PG2 = Zero
                                }
                            }
                        }
                    }
                }
            }

            If ((PG1A == Zero))
            {
                If ((PG2 == Zero))
                {
                    If ((U3PG == Zero))
                    {
                        If ((S03D == One))
                        {
                            SRDY = One
                        }
                    }
                }
            }
        }

        Release (FDAS)
    }

    Method (FPTS, 1, Serialized)
    {
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((U_PS != 0x03))
            {
                DBG8 = 0x8C
                BreakPoint
            }

            If ((E_PS != 0x03))
            {
                DBG8 = 0x8D
                BreakPoint
            }

            If ((XHCD == Zero))
            {
                If ((XHCE == One))
                {
                    If ((U3TD != 0x03))
                    {
                        FDDC (0x17, 0x03)
                    }
                }
            }

            If ((EHCD == Zero))
            {
                If ((U2TD != 0x03))
                {
                    If ((RXST != One))
                    {
                        FDDC (0x12, 0x03)
                    }
                }
            }

            If ((ST_D == One))
            {
                If ((SATD != Zero))
                {
                    FDDC (0x0F, Zero)
                }
            }
        }
    }

    Method (FWAK, 0, Serialized)
    {
        If ((XHCD == Zero))
        {
            If ((XHCE == One))
            {
                If ((U3TD == 0x03))
                {
                    FDDC (0x17, Zero)
                }
            }
        }

        If ((EHCD == Zero))
        {
            If ((U2TD == 0x03))
            {
                FDDC (0x12, Zero)
            }
        }

        If ((UT0E == Zero))
        {
            If ((U0TD != 0x03))
            {
                FDDC (0x0B, 0x03)
            }
        }

        If ((UT1E == Zero))
        {
            If ((U1TD != 0x03))
            {
                FDDC (0x0C, 0x03)
            }
        }

        If ((IC0E == Zero))
        {
            If ((I0TD != 0x03))
            {
                FDDC (0x05, 0x03)
            }
        }

        If ((IC1E == Zero))
        {
            If ((I1TD != 0x03))
            {
                FDDC (0x06, 0x03)
            }
        }

        If ((IC2E == Zero))
        {
            If ((I2TD != 0x03))
            {
                FDDC (0x07, 0x03)
            }
        }

        If ((IC3E == Zero))
        {
            If ((I3TD != 0x03))
            {
                FDDC (0x08, 0x03)
            }
        }
    }

    Method (PWGC, 2, Serialized)
    {
        Local0 = (PGA3 & 0xDF)
        If (Arg1)
        {
            Local0 |= Arg0
        }
        Else
        {
            Local1 = ~Arg0
            Local0 &= Local1
        }

        PGA3 = Local0
        If ((Arg0 == 0x20))
        {
            Local0 = PGA3 /* \PGA3 */
            Local0 &= Arg0
            While (!Local0)
            {
                Local0 = PGA3 /* \PGA3 */
                Local0 &= Arg0
            }
        }
    }

    Method (SDD3, 0, Serialized)
    {
        SDSP ()
        SDSC = Zero
        RQTY = Zero
        RQ24 = One
        Local0 = SDSR /* \SDSR */
        While (Local0)
        {
            Local0 = SDSR /* \SDSR */
        }

        SDPD = Zero
        Local0 = SDDS /* \SDDS */
        While ((Local0 != Zero))
        {
            Local0 = SDDS /* \SDDS */
        }

        SDTD = 0x03
        If ((ESPI == Zero))
        {
            LDQ0 = One
        }
    }

    Method (SDD0, 0, Serialized)
    {
        SDPD = One
        Local0 = SDDS /* \SDDS */
        While ((Local0 != 0x07))
        {
            Local0 = SDDS /* \SDDS */
        }

        SRAD (0x18, 0xC8)
        SDTD = Zero
        RQTY = One
        RQ24 = One
        Local0 = SDSR /* \SDSR */
        While (!Local0)
        {
            Local0 = SDSR /* \SDSR */
        }

        SD2C = SDID /* \SDID */
        SDRP ()
        LDQ0 = SNHG /* \SNHG */
        FC18 = SF18 /* \SF18 */
        If ((SDB3 == One))
        {
            Sleep (0xF0)
        }

        If ((SDB3 == 0x02))
        {
            Sleep (0x1E)
        }
    }

    Method (STD3, 0, Serialized)
    {
        ST_S ()
        Local0 = (SDS0 << 0x02)
        Local0 += 0xFED81500
        Local1 = (SDS1 << 0x02)
        Local1 += 0xFED81500
        OperationRegion (SDSA, SystemMemory, Local0, 0x04)
        Field (SDSA, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP0D,   1, 
            GP0E,   1
        }

        OperationRegion (SDSB, SystemMemory, Local1, 0x04)
        Field (SDSB, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP1D,   1, 
            GP1E,   1
        }

        RQTY = Zero
        RQ15 = One
        Local0 = SASR /* \SASR */
        While (Local0)
        {
            Local0 = SASR /* \SASR */
        }

        PWGC (0x10, One)
        SM30 = One
        If (SDS0)
        {
            GP0E = One
            GP0D = Zero
        }

        SAPD = Zero
        Local0 = SADS /* \SADS */
        While ((Local0 != Zero))
        {
            Local0 = SADS /* \SADS */
        }

        SATD = 0x03
        SARP = One
    }

    Method (STD0, 0, Serialized)
    {
        Local0 = (SDS0 << 0x02)
        Local0 += 0xFED81500
        Local1 = (SDS1 << 0x02)
        Local1 += 0xFED81500
        OperationRegion (SDSA, SystemMemory, Local0, 0x04)
        Field (SDSA, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP0D,   1, 
            GP0E,   1
        }

        OperationRegion (SDSB, SystemMemory, Local1, 0x04)
        Field (SDSB, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP1D,   1, 
            GP1E,   1
        }

        SARP = Zero
        SATD = Zero
        SAPD = One
        Local0 = SADS /* \SADS */
        While ((Local0 != 0x07))
        {
            Local0 = SADS /* \SADS */
        }

        Stall (0x78)
        PWGC (0x10, Zero)
        SM30 = Zero
        DSDN = Zero
        ST_R ()
        If ((RFCS == One))
        {
            ST84 = Zero
            Stall (0x78)
            ST84 = One
        }

        If (SDS0)
        {
            GP0E = One
            GP0D = One
        }

        RQTY = One
        RQ15 = One
        Local0 = SASR /* \SASR */
        While (!Local0)
        {
            Local0 = SASR /* \SASR */
        }

        ST44 = One
        If (CZFG)
        {
            DDIC = One
            Stall (0x64)
            DDIC = Zero
        }
    }

    Method (SU2P, 0, Serialized)
    {
        PWGC (0x40, Zero)
        U2RP = One
    }

    Method (U2D3, 0, Serialized)
    {
        If ((E_PS == 0x03))
        {
            RQTY = Zero
            RQ18 = One
            Local0 = U2SR /* \U2SR */
            While (Local0)
            {
                Local0 = U2SR /* \U2SR */
            }

            U2PD = Zero
            Local0 = U2DS /* \U2DS */
            While ((Local0 != Zero))
            {
                Local0 = U2DS /* \U2DS */
            }

            U2TD = 0x03
            If ((U3TD == 0x03))
            {
                SU2P ()
            }
        }
    }

    Method (U2D0, 0, Serialized)
    {
        PWGC (0x40, One)
        U2RP = Zero
        U2TD = Zero
        U2TD = Zero
        U2PD = One
        Local0 = U2DS /* \U2DS */
        While ((Local0 != 0x07))
        {
            Local0 = U2DS /* \U2DS */
        }

        RQTY = One
        RQ18 = One
        Local0 = U2SR /* \U2SR */
        While (!Local0)
        {
            Local0 = U2SR /* \U2SR */
        }

        EH2C = EHID /* \EHID */
        EHBA = EH10 /* \EH10 */
        EHME = One
        ESIM = SSIM /* \SSIM */
        EH54 = ES54 /* \ES54 */
        EH64 = ES64 /* \ES64 */
    }

    Method (LXFW, 3, Serialized)
    {
        FWLM = One
        ROAM = Arg0
        UA04 = Arg1
        UA08 = Arg2
        FPLS = One
        Local0 = FPLC /* \FPLC */
        While (!Local0)
        {
            Local0 = FPLC /* \FPLC */
        }

        FPLS = Zero
    }

    Method (X1_S, 0, Serialized)
    {
        RQTY = Zero
        RQ23 = One
        Local0 = U3SR /* \U3SR */
        While (Local0)
        {
            Local0 = U3SR /* \U3SR */
        }
    }

    Method (X1_R, 0, Serialized)
    {
        RQTY = One
        RQ23 = One
        Local0 = U3SR /* \U3SR */
        While (!Local0)
        {
            Local0 = U3SR /* \U3SR */
        }
    }

    Method (U33H, 0, Serialized)
    {
        PWGC (0x20, One)
        UD3P = One
        U3PD = Zero
        Local0 = U3DS /* \U3DS */
        While ((Local0 != Zero))
        {
            Local0 = U3DS /* \U3DS */
        }

        U3TD = 0x03
        U3RP = One
        If ((U2TD == 0x03))
        {
            SU2P ()
        }

        U3PG = Zero
        U3PS = One
    }

    Method (U3D3, 0, Serialized)
    {
        If ((U_PS == 0x03))
        {
            X0_S ()
            SMIW = 0x67
        }
    }

    Method (U30H, 0, Serialized)
    {
        U3PS = Zero
        U3PG = One
        U2RP = Zero
        U3RP = Zero
        PWGC (0x40, One)
        U3TD = Zero
        U3PD = One
        Local0 = U3DS /* \U3DS */
        While ((Local0 != 0x07))
        {
            Local0 = U3DS /* \U3DS */
        }

        Local0 = U3PY /* \U3PY */
        While ((Local0 != One))
        {
            Local0 = U3PY /* \U3PY */
        }

        U3PR = Zero
    }

    Method (U3D0, 0, Serialized)
    {
        SMIW = 0x66
        Local0 = AUSS /* \AUSS */
        If ((Local0 != One))
        {
            AUSS = One
        }

        Local0 = AUSS /* \AUSS */
        While ((Local0 != One))
        {
            Local0 = AUSS /* \AUSS */
        }

        LXFW (One, FW00, FW01)
        LXFW (Zero, FW02, FW03)
        X0_R ()
        U3PR = One
        UD3P = Zero
        U3TD = One
    }

    OperationRegion (SSMI, SystemIO, SMIT, 0x02)
    Field (SSMI, AnyAcc, NoLock, Preserve)
    {
        SMIW,   16
    }

    OperationRegion (ECMC, SystemIO, 0x72, 0x02)
    Field (ECMC, AnyAcc, NoLock, Preserve)
    {
        ECMI,   8, 
        ECMD,   8
    }

    IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        FRTB,   32, 
        Offset (0x50), 
        SLTY,   8
    }

    OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
    Field (FRTP, AnyAcc, NoLock, Preserve)
    {
        PEBA,   32, 
            ,   5, 
        IC0E,   1, 
        IC1E,   1, 
        IC2E,   1, 
        IC3E,   1, 
            ,   2, 
        UT0E,   1, 
        UT1E,   1, 
        GIOE,   1, 
            ,   1, 
        ST_E,   1, 
            ,   2, 
        EHCE,   1, 
            ,   4, 
        XHCE,   1, 
        SD_E,   1, 
            ,   2, 
        ESPI,   1, 
        Offset (0x08), 
        PCEF,   1, 
            ,   4, 
        IC0D,   1, 
        IC1D,   1, 
        IC2D,   1, 
        IC3D,   1, 
            ,   2, 
        UT0D,   1, 
        UT1D,   1, 
            ,   2, 
        ST_D,   1, 
            ,   2, 
        EHCD,   1, 
            ,   4, 
        XHCD,   1, 
        SD_D,   1, 
            ,   6, 
        S03D,   1, 
        FW00,   16, 
        FW01,   32, 
        FW02,   16, 
        FW03,   32, 
        SDS0,   8, 
        SDS1,   8, 
        CZFG,   1, 
        Offset (0x20), 
        SD10,   32, 
        EH10,   32, 
        XH10,   32, 
        STBA,   32
    }

    Method (FINI, 0, NotSerialized)
    {
        XHCE = XH0E /* \XH0E */
        If ((SDBA != 0xFFFFFFFF))
        {
            SD10 = SDBA /* \SDBA */
        }

        If ((EHBA != 0xFFFFFFFF))
        {
            EH10 = EHBA /* \EHBA */
        }

        SDID = SD2C /* \SD2C */
        EHID = EH2C /* \EH2C */
        XHID = XH2C /* \XH2C */
        STID = ST2C /* \ST2C */
        SNHG = LDQ0 /* \LDQ0 */
        SF18 = FC18 /* \FC18 */
        SSIM = ESIM /* \ESIM */
        ES54 = EH54 /* \EH54 */
        ES64 = EH64 /* \EH64 */
        If ((OSVR >= 0x0F)){}
        Else
        {
            S03D = Zero
            XHCD = Zero
            EHCD = Zero
            ST_D = Zero
            SD_D = Zero
        }

        If ((OSVR == 0x03))
        {
            S03D = Zero
            XHCD = Zero
            EHCD = Zero
            ST_D = Zero
            SD_D = Zero
        }

        If ((UT0E == Zero))
        {
            If ((U0TD != 0x03))
            {
                FDDC (0x0B, 0x03)
            }
        }

        If ((UT1E == Zero))
        {
            If ((U1TD != 0x03))
            {
                FDDC (0x0C, 0x03)
            }
        }

        If ((IC0E == Zero))
        {
            If ((I0TD != 0x03))
            {
                FDDC (0x05, 0x03)
            }
        }

        If ((IC1E == Zero))
        {
            If ((I1TD != 0x03))
            {
                FDDC (0x06, 0x03)
            }
        }

        If ((IC2E == Zero))
        {
            If ((I2TD != 0x03))
            {
                FDDC (0x07, 0x03)
            }
        }

        If ((IC3E == Zero))
        {
            If ((I3TD != 0x03))
            {
                FDDC (0x08, 0x03)
            }
        }
    }

    OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
    Field (FCFG, DWordAcc, NoLock, Preserve)
    {
        Offset (0x80010), 
        XHBA,   32, 
        Offset (0x8002C), 
        XH2C,   32, 
        Offset (0x80048), 
        IDEX,   32, 
        DATA,   32, 
        Offset (0x80054), 
        U_PS,   2, 
        Offset (0x88010), 
        ST10,   32, 
        ST14,   32, 
        ST18,   32, 
        ST1C,   32, 
        ST20,   32, 
        ST24,   32, 
        Offset (0x8802C), 
        ST2C,   32, 
        Offset (0x88040), 
        ST40,   1, 
        Offset (0x88044), 
        ST44,   1, 
        Offset (0x8804C), 
            ,   2, 
        DDIC,   1, 
        Offset (0x88064), 
        S_PS,   2, 
        Offset (0x88084), 
            ,   1, 
        ST84,   1, 
            ,   28, 
        DSDN,   1, 
        Offset (0x8808C), 
        ST8C,   8, 
        Offset (0x90004), 
            ,   1, 
        EHME,   1, 
        Offset (0x90010), 
        EHBA,   32, 
        Offset (0x9002C), 
        EH2C,   32, 
        Offset (0x90054), 
        EH54,   8, 
        Offset (0x90064), 
        EH64,   8, 
        Offset (0x900C4), 
        E_PS,   2, 
        Offset (0xA3078), 
            ,   2, 
        LDQ0,   1, 
        Offset (0xA30CB), 
            ,   7, 
        AUSS,   1, 
        Offset (0xA7004), 
            ,   1, 
        SDME,   1, 
        Offset (0xA7010), 
        SDBA,   32, 
        Offset (0xA702C), 
        SD2C,   32, 
        Offset (0xA7094), 
        D_PS,   2, 
        Offset (0xA7095), 
        SDPE,   1, 
            ,   6, 
        PMES,   1, 
        Offset (0xA70B3), 
        SDB3,   8, 
        Offset (0xA70B5), 
        SETE,   1, 
        Offset (0xA70D0), 
            ,   17, 
        FC18,   1
    }

    OperationRegion (EHMC, SystemMemory, EH10, 0x0100)
    Field (EHMC, DWordAcc, NoLock, Preserve)
    {
        Offset (0xB0), 
            ,   5, 
        ESIM,   1
    }

    OperationRegion (SDMC, SystemMemory, SD10, 0x0100)
    Field (SDMC, AnyAcc, NoLock, Preserve)
    {
        Offset (0x24), 
            ,   6, 
        CDTC,   2, 
        Offset (0x27), 
        IRWE,   1, 
        ISWE,   1, 
        RMWE,   1
    }

    Method (SDFE, 0, Serialized)
    {
        CDTC = 0x02
        CDTC = 0x03
        CDTC = Zero
        SETE = One
        PMES = One
        SETE = Zero
    }

    Method (SDRE, 0, Serialized)
    {
        CDTC = 0x03
        CDTC = 0x02
        CDTC = Zero
        SETE = One
        PMES = One
        SETE = Zero
    }

    Method (SDSP, 0, Serialized)
    {
        SDME = One
        B600 = SDPE /* \SDPE */
        B601 = IRWE /* \IRWE */
        B602 = ISWE /* \ISWE */
        B603 = RMWE /* \RMWE */
        SDME = Zero
    }

    Method (SDRP, 0, Serialized)
    {
        If (SDFG)
        {
            If (G19S)
            {
                SDFE ()
            }
            Else
            {
                SDRE ()
            }

            SDFG = Zero
        }
    }

    Method (SRAD, 2, Serialized)
    {
        Local0 = (Arg0 << One)
        Local0 += 0xFED81E40
        OperationRegion (ADCR, SystemMemory, Local0, 0x02)
        Field (ADCR, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        ADIS = One
        ADSR = Zero
        Stall (Arg1)
        ADSR = One
        ADIS = Zero
        Stall (Arg1)
    }

    Name (SVBF, Buffer (0x1000)
    {
         0x00                                             // .
    })
    CreateDWordField (SVBF, Zero, S000)
    CreateDWordField (SVBF, 0x04, S004)
    CreateDWordField (SVBF, 0x08, S008)
    CreateDWordField (SVBF, 0x0C, S00C)
    CreateDWordField (SVBF, 0x18, S018)
    CreateDWordField (SVBF, 0x1C, S01C)
    CreateDWordField (SVBF, 0x20, S020)
    CreateDWordField (SVBF, 0x30, S030)
    CreateDWordField (SVBF, 0x0118, S118)
    CreateDWordField (SVBF, 0x0158, S158)
    CreateDWordField (SVBF, 0x0198, S198)
    CreateDWordField (SVBF, 0x01D8, S1D8)
    CreateDWordField (SVBF, 0x0300, S300)
    CreateDWordField (SVBF, 0x0304, S304)
    CreateDWordField (SVBF, 0x0308, S308)
    CreateDWordField (SVBF, 0x030C, S30C)
    CreateDWordField (SVBF, 0x0310, S310)
    CreateDWordField (SVBF, 0x0428, S428)
    CreateDWordField (SVBF, 0x0438, S438)
    CreateDWordField (SVBF, 0x043C, S43C)
    CreateDWordField (SVBF, 0x0458, S458)
    CreateDWordField (SVBF, 0x0468, S468)
    CreateDWordField (SVBF, 0x046C, S46C)
    CreateDWordField (SVBF, 0x0470, S470)
    CreateDWordField (SVBF, 0x0480, S480)
    CreateDWordField (SVBF, 0x0484, S484)
    CreateDWordField (SVBF, 0x0488, S488)
    CreateDWordField (SVBF, 0x048C, S48C)
    CreateByteField (SVBF, 0x0600, B600)
    CreateByteField (SVBF, 0x0601, B601)
    CreateByteField (SVBF, 0x0602, B602)
    CreateByteField (SVBF, 0x0603, B603)
    CreateByteField (SVBF, 0x0700, SDFG)
    CreateByteField (SVBF, 0x0701, SNHG)
    CreateByteField (SVBF, 0x0702, SF18)
    CreateDWordField (SVBF, 0x0704, SDID)
    CreateDWordField (SVBF, 0x0730, EHID)
    CreateDWordField (SVBF, 0x0734, XHID)
    CreateDWordField (SVBF, 0x0738, STID)
    CreateByteField (SVBF, 0x0740, ES54)
    CreateByteField (SVBF, 0x0741, ES64)
    CreateDWordField (SVBF, 0x07B0, SSIM)
    CreateDWordField (SVBF, 0x0810, S810)
    CreateDWordField (SVBF, 0x0814, S814)
    CreateDWordField (SVBF, 0x0818, S818)
    CreateDWordField (SVBF, 0x081C, S81C)
    CreateDWordField (SVBF, 0x0820, S820)
    CreateDWordField (SVBF, 0x0824, S824)
    CreateDWordField (SVBF, 0x082C, S82C)
    CreateByteField (SVBF, 0x088C, S88C)
    Method (ST_S, 0, NotSerialized)
    {
        S810 = ST10 /* \ST10 */
        S814 = ST14 /* \ST14 */
        S818 = ST18 /* \ST18 */
        S81C = ST1C /* \ST1C */
        S820 = ST20 /* \ST20 */
        S824 = ST24 /* \ST24 */
        S88C = ST8C /* \ST8C */
    }

    Method (ST_R, 0, NotSerialized)
    {
        ST10 = S810 /* \S810 */
        ST14 = S814 /* \S814 */
        ST18 = S818 /* \S818 */
        ST1C = S81C /* \S81C */
        ST20 = S820 /* \S820 */
        ST24 = S824 /* \S824 */
        ST40 = One
        ST2C = STID /* \STID */
        ST40 = Zero
        ST8C = S88C /* \S88C */
    }

    Method (X0_S, 0, NotSerialized)
    {
        XHID = XH2C /* \XH2C */
        IDEX = Zero
        S000 = DATA /* \DATA */
        IDEX = 0x04
        S004 = DATA /* \DATA */
        IDEX = 0x08
        S008 = DATA /* \DATA */
        IDEX = 0x0C
        S00C = DATA /* \DATA */
        IDEX = 0x18
        S018 = DATA /* \DATA */
        IDEX = 0x1C
        S01C = DATA /* \DATA */
        IDEX = 0x20
        S020 = DATA /* \DATA */
        IDEX = 0x30
        S030 = DATA /* \DATA */
        IDEX = 0x0118
        S118 = DATA /* \DATA */
        IDEX = 0x0158
        S158 = DATA /* \DATA */
        IDEX = 0x0198
        S198 = DATA /* \DATA */
        IDEX = 0x01D8
        S1D8 = DATA /* \DATA */
        IDEX = 0x0300
        S300 = DATA /* \DATA */
        IDEX = 0x0304
        S304 = DATA /* \DATA */
        IDEX = 0x0308
        S308 = DATA /* \DATA */
        IDEX = 0x030C
        S30C = DATA /* \DATA */
        IDEX = 0x0310
        S310 = DATA /* \DATA */
        IDEX = 0x40000028
        S428 = DATA /* \DATA */
        IDEX = 0x40000038
        S438 = DATA /* \DATA */
        IDEX = 0x4000003C
        S43C = DATA /* \DATA */
        IDEX = 0x40000058
        S458 = DATA /* \DATA */
        IDEX = 0x40000068
        S468 = DATA /* \DATA */
        IDEX = 0x4000006C
        S46C = DATA /* \DATA */
        IDEX = 0x40000070
        S470 = DATA /* \DATA */
        IDEX = 0x40000080
        S480 = DATA /* \DATA */
        IDEX = 0x40000084
        S484 = DATA /* \DATA */
        IDEX = 0x40000088
        S488 = DATA /* \DATA */
        IDEX = 0x4000008C
        S48C = DATA /* \DATA */
    }

    Method (X0_R, 0, NotSerialized)
    {
        XH2C = XHID /* \XHID */
        IDEX = Zero
        DATA = S000 /* \S000 */
        IDEX = 0x04
        DATA = S004 /* \S004 */
        IDEX = 0x08
        DATA = S008 /* \S008 */
        IDEX = 0x0C
        DATA = S00C /* \S00C */
        IDEX = 0x18
        DATA = S018 /* \S018 */
        IDEX = 0x1C
        DATA = S01C /* \S01C */
        IDEX = 0x20
        DATA = S020 /* \S020 */
        IDEX = 0x30
        DATA = S030 /* \S030 */
        IDEX = 0x0118
        DATA = S118 /* \S118 */
        IDEX = 0x0158
        DATA = S158 /* \S158 */
        IDEX = 0x0198
        DATA = S198 /* \S198 */
        IDEX = 0x01D8
        DATA = S1D8 /* \S1D8 */
        IDEX = 0x0300
        DATA = S300 /* \S300 */
        IDEX = 0x0304
        DATA = S304 /* \S304 */
        IDEX = 0x0308
        DATA = S308 /* \S308 */
        IDEX = 0x030C
        DATA = S30C /* \S30C */
        IDEX = 0x0310
        DATA = S310 /* \S310 */
        IDEX = 0x40000028
        DATA = S428 /* \S428 */
        IDEX = 0x40000038
        DATA = S438 /* \S438 */
        IDEX = 0x4000003C
        DATA = S43C /* \S43C */
        IDEX = 0x40000058
        DATA = S458 /* \S458 */
        IDEX = 0x40000068
        DATA = S468 /* \S468 */
        IDEX = 0x4000006C
        DATA = S46C /* \S46C */
        IDEX = 0x40000070
        DATA = S470 /* \S470 */
        IDEX = 0x40000080
        DATA = S480 /* \S480 */
        IDEX = 0x40000084
        DATA = S484 /* \S484 */
        IDEX = 0x40000088
        DATA = S488 /* \S488 */
        IDEX = 0x4000008C
        DATA = S48C /* \S48C */
    }

    Scope (_SB)
    {
        Name (XHD0, Zero)
        Name (XHD3, Zero)
        PowerResource (P0U3, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (XHD0) /* \_SB_.XHD0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                XHD0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                XHD0 = Zero
            }
        }

        PowerResource (P3U3, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (XHD3) /* \_SB_.XHD3 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                XHD3 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                XHD3 = Zero
            }
        }

        Name (EHD0, Zero)
        Name (EHD3, Zero)
        PowerResource (P0U2, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (EHD0) /* \_SB_.EHD0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                EHD0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                EHD0 = Zero
            }
        }

        PowerResource (P3U2, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (EHD3) /* \_SB_.EHD3 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                EHD3 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                EHD3 = Zero
            }
        }

        Name (D0SD, Zero)
        Name (D3SD, Zero)
        PowerResource (P0SD, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0SD) /* \_SB_.D0SD */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0SD = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0SD = Zero
            }
        }

        PowerResource (P3SD, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3SD) /* \_SB_.D3SD */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3SD = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3SD = Zero
            }
        }

        Name (D0ST, One)
        Name (D3ST, One)
        PowerResource (P0ST, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0ST) /* \_SB_.D0ST */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0ST = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0ST = Zero
            }
        }

        PowerResource (P3ST, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3ST) /* \_SB_.D3ST */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3ST = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3ST = Zero
            }
        }
    }

    Scope (_SB.PCI0.XHC0)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U3
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U3
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((XHCD == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
        {
            Return (0x04)
        }

        Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
        {
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((XHCD == One))
            {
                If ((U3TD == 0x03))
                {
                    FDDC (0x17, Zero)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((XHCD == One))
            {
                If ((U3TD != 0x03))
                {
                    If ((U_PS == 0x03))
                    {
                        SMIW = CAFS /* \CAFS */
                        If ((SLTY != One))
                        {
                            DBG8 = 0x82
                            FDDC (0x17, 0x03)
                        }

                        SLTY = Zero
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC1)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U2
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U2
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((EHCD == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
        {
            Return (0x04)
        }

        Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
        {
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((EHCD == One))
            {
                If ((U2TD != Zero))
                {
                    FDDC (0x12, Zero)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((EHCD == One))
            {
                If ((E_PS == 0x03))
                {
                    If ((U2TD != 0x03))
                    {
                        SMIW = CAFS /* \CAFS */
                        If ((SLTY != One))
                        {
                            If ((RXST != One))
                            {
                                FDDC (0x12, 0x03)
                            }
                        }

                        SLTY = Zero
                    }
                }
            }
        }

        Method (RHRS, 0, NotSerialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0036
                    }
            })
            Return (RBUF) /* \_SB_.PCI0.EHC1.RHRS.RBUF */
        }
    }

    Scope (_SB.PCI0.SATA)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0ST
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3ST
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((ST_D == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((ST_D == One))
            {
                If ((SATD != Zero))
                {
                    FDDC (0x0F, Zero)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((ST_D == One))
            {
                If ((SATD != 0x03))
                {
                    If ((S_PS == 0x03))
                    {
                        FDDC (0x0F, 0x03)
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (GPIO)
        {
            Name (_HID, "AMD0030")  // _HID: Hardware ID
            Name (_CID, "AMD0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000300,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GIOE)
                {
                    If ((OSVR >= 0x0F))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (AAHB)
        {
            Name (_HID, "AAHB0000")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {7}
                Memory32Fixed (ReadWrite,
                    0xFEDC0000,         // Address Base
                    0x00002000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMD0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00002000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UTDB == One))
                {
                    Return (Zero)
                }
                ElseIf ((OSVR >= 0x0F))
                {
                    If ((UT0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    If ((U0TD == 0x03))
                    {
                        FDDC (0x0B, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    If ((U0TD != 0x03))
                    {
                        FDDC (0x0B, 0x03)
                    }
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMD0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00002000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UTDB == 0x02))
                {
                    Return (Zero)
                }
                ElseIf ((OSVR >= 0x0F))
                {
                    If ((UT1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    If ((U1TD == 0x03))
                    {
                        FDDC (0x0C, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    If ((U1TD != 0x03))
                    {
                        FDDC (0x0C, 0x03)
                    }
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    If ((I0TD == 0x03))
                    {
                        FDDC (0x05, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    If ((I0TD != 0x03))
                    {
                        FDDC (0x05, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    If ((I1TD == 0x03))
                    {
                        FDDC (0x06, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    If ((I1TD != 0x03))
                    {
                        FDDC (0x06, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    If ((I2TD == 0x03))
                    {
                        FDDC (0x07, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    If ((I2TD != 0x03))
                    {
                        FDDC (0x07, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    If ((I3TD == 0x03))
                    {
                        FDDC (0x08, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    If ((I3TD != 0x03))
                    {
                        FDDC (0x08, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Name (CRS, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED00000,         // Address Base
                0x00000400,         // Address Length
                _Y19)
            IRQNoFlags ()
                {0}
            IRQNoFlags ()
                {8}
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateDWordField (CRS, \HPET._Y19._BAS, HPTX)  // _BAS: Base Address
            CreateDWordField (CRS, \HPET._Y19._LEN, HPTY)  // _LEN: Length
            HPTX = HPTB /* \HPTB */
            HPTY = HPTL /* \HPTL */
            Return (CRS) /* \HPET.CRS_ */
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y1A)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y1B)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y1C)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y1D)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y1A._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y1A._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y1B._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y1B._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y1C._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y1C._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x0880
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y1D._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y1D._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y1D._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        If ((((HSTS & 0x02) | (HSTS & One)) == 
                            0x03))
                        {
                            HCMD = One
                        }
                        Else
                        {
                            FERR = One
                            BEGN = Zero
                        }

                        Return (Zero)
                    }
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.2")
                    }
                    Case (0x02)
                    {
                        ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xFF))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (One)
                        }

                        PPI1 [One] = TMF1 /* \TMF1 */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x2100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        PPI2 [One] = TMF1 /* \TMF1 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x3100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xF0))
                        {
                            TMF1 = OFST /* \OFST */
                            TMF1 |= 0x5100 /* \TMF1 */
                            SMI = TMF1 /* \TMF1 */
                            TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                            TMF1 >>= 0x08
                            If ((TMF1 == 0xFF))
                            {
                                PPI2 [0x02] = 0xFFFFFFF0
                                Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                            }
                        }
                        ElseIf ((TMF1 == 0xF1))
                        {
                            TMF1 = OFST /* \OFST */
                            TMF1 |= 0x5100 /* \TMF1 */
                            SMI = TMF1 /* \TMF1 */
                            TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                            TMF1 >>= 0x08
                            If ((TMF1 == 0xFF))
                            {
                                PPI2 [0x02] = 0xFFFFFFF1
                                Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                            }
                        }
                        Else
                        {
                            PPI2 [0x02] = TMF1 /* \TMF1 */
                        }

                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xF1))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }
                    Case (0x08)
                    {
                        ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x4300 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        Return (TMF1) /* \TMF1 */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x2200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        ToInteger (DerefOf (Arg3 [Zero]), TMF1) /* \TMF1 */
                        TMF1 <<= 0x08
                        TMF1 |= OFST /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        Return (Zero)
                    }
                    Default
                    {
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_GPE, 0, NotSerialized)  // _GPE: General Purpose Events
            {
                Local0 = 0x03
                Return (Local0)
            }

            Mutex (MUEC, 0x00)
            Mutex (MU4T, 0x00)
            Name (ECFL, Ones)
            Method (ECAV, 0, NotSerialized)
            {
                If ((SLPT >= 0x04))
                {
                    Return (Zero)
                }

                If ((NVLK == One))
                {
                    Return (Zero)
                }

                If ((ECFL == Ones))
                {
                    If ((_REV >= 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (ECFL) /* \_SB_.PCI0.SBRG.EC0_.ECFL */
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)
            Field (ECOR, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                CMD1,   8, 
                CDT1,   8, 
                CDT2,   8, 
                CDT3,   8, 
                Offset (0x80), 
                Offset (0x81), 
                Offset (0x82), 
                Offset (0x83), 
                EB0R,   8, 
                EB1R,   8, 
                EPWF,   8, 
                Offset (0x87), 
                Offset (0x88), 
                Offset (0x89), 
                Offset (0x8A), 
                HKEN,   1, 
                Offset (0x93), 
                TAH0,   16, 
                TAH1,   16, 
                TSTP,   8, 
                Offset (0x9C), 
                CDT4,   8, 
                CDT5,   8, 
                Offset (0xA0), 
                Offset (0xA1), 
                Offset (0xA2), 
                Offset (0xA3), 
                EACT,   8, 
                TH1R,   8, 
                TH1L,   8, 
                TH0R,   8, 
                TH0L,   8, 
                Offset (0xB0), 
                B0PN,   16, 
                Offset (0xB4), 
                Offset (0xB6), 
                Offset (0xB8), 
                Offset (0xBA), 
                Offset (0xBC), 
                Offset (0xBE), 
                B0TM,   16, 
                B0C1,   16, 
                B0C2,   16, 
                B0C3,   16, 
                B0C4,   16, 
                Offset (0xD0), 
                B1PN,   16, 
                Offset (0xD4), 
                Offset (0xD6), 
                Offset (0xD8), 
                Offset (0xDA), 
                Offset (0xDC), 
                Offset (0xDE), 
                B1TM,   16, 
                B1C1,   16, 
                B1C2,   16, 
                B1C3,   16, 
                B1C4,   16, 
                Offset (0xF0), 
                Offset (0xF2), 
                Offset (0xF4), 
                B0SN,   16, 
                Offset (0xF8), 
                Offset (0xFA), 
                Offset (0xFC), 
                B1SN,   16
            }

            Name (SMBF, Zero)
            OperationRegion (SMBX, EmbeddedControl, 0x18, 0x28)
            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                PRTC,   8, 
                SSTS,   5, 
                    ,   1, 
                ALFG,   1, 
                CDFG,   1, 
                ADDR,   8, 
                CMDB,   8, 
                BDAT,   256, 
                BCNT,   8, 
                    ,   1, 
                ALAD,   7, 
                ALD0,   8, 
                ALD1,   8
            }

            OperationRegion (SMB2, EmbeddedControl, 0x40, 0x28)
            Field (SMB2, ByteAcc, NoLock, Preserve)
            {
                PRT2,   8, 
                SST2,   5, 
                    ,   1, 
                ALF2,   1, 
                CDF2,   1, 
                ADD2,   8, 
                CMD2,   8, 
                BDA2,   256, 
                BCN2,   8, 
                    ,   1, 
                ALA2,   7, 
                ALR0,   8, 
                ALR1,   8
            }

            Field (SMB2, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DA20,   8, 
                DA21,   8
            }

            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DAT0,   8, 
                DAT1,   8
            }

            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DT2B,   16
            }

            OperationRegion (NSBS, EmbeddedControl, 0x40, 0x04)
            Field (NSBS, ByteAcc, NoLock, Preserve)
            {
                A2AD,   8, 
                A2D0,   8, 
                A2D1,   8, 
                A3AD,   8
            }

            OperationRegion (BRAM, SystemIO, 0x025A, 0x02)
            Field (BRAM, ByteAcc, Lock, Preserve)
            {
                BRAI,   8, 
                BRAD,   8
            }

            IndexField (BRAI, BRAD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x90), 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0T,   8, 
                EB1T,   8, 
                Offset (0x98), 
                ECPU,   8, 
                ECRT,   8, 
                EPSV,   8, 
                Offset (0xA0), 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0MD,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0DC,   16, 
                B0DV,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1MD,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1DC,   16, 
                B1DV,   16
            }

            OperationRegion (CRIH, SystemIO, 0x0381, One)
            Field (CRIH, ByteAcc, Lock, Preserve)
            {
                CRAH,   8
            }

            OperationRegion (XRAM, SystemIO, 0x0382, 0x02)
            Field (XRAM, ByteAcc, Lock, Preserve)
            {
                CRAI,   8, 
                CRAD,   8
            }

            IndexField (CRAI, CRAD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x9C), 
                THL0,   8, 
                THH0,   8, 
                THL1,   8, 
                THH1,   8
            }

            Mutex (CMUT, 0x00)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((MSOS () <= OSME))
                {
                    ECFL = One
                }

                KINI ()
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECFL = Arg1
                }
            }
        }
    }

    Scope (\)
    {
        Method (DIAG, 1, NotSerialized)
        {
            DBG8 = Arg0
        }

        OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
        Field (GPSC, ByteAcc, NoLock, Preserve)
        {
            SMCM,   8, 
            SMST,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMCM = Arg0
        }

        Method (ASMI, 1, Serialized)
        {
            \_SB.ALPR = Arg0
            SMCM = 0xA3
            Return (\_SB.ALPR)
        }

        Scope (_SB)
        {
            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                EIND,   8, 
                EDAT,   8
            }

            IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
            {
                Offset (0xC0), 
                IKFG,   8, 
                Offset (0xC3), 
                RAMB,   32, 
                AVOL,   8, 
                LBTN,   8, 
                ERRF,   8, 
                OCLK,   8, 
                WIDE,   1, 
                OVCK,   2, 
                SLPN,   3, 
                ACRD,   1, 
                VGAS,   1, 
                CPUR,   6, 
                CPUF,   2, 
                LBT2,   8, 
                PCMS,   8, 
                ALSL,   8, 
                ALAE,   1, 
                ALDE,   1, 
                ALSP,   1, 
                    ,   1, 
                FSTG,   4, 
                WLDP,   1, 
                BTDP,   1, 
                WRST,   1, 
                BRST,   1, 
                WRPS,   1, 
                BRPS,   1, 
                RMST,   1, 
                Offset (0xD2), 
                SYNA,   1, 
                ALPS,   1, 
                ELAN,   1, 
                STLC,   1, 
                FOLT,   1, 
                Offset (0xD3), 
                IKF2,   8, 
                UHDB,   8, 
                OSPM,   8, 
                TCGF,   8, 
                PPIS,   8, 
                PPIR,   8, 
                SIDE,   1, 
                PWBS,   1, 
                WFFG,   1, 
                OCST,   3, 
                SMTT,   1, 
                Offset (0xDA), 
                SP80,   1, 
                Offset (0xDB), 
                SWD2,   1, 
                F9KP,   1, 
                HACF,   6, 
                UWDP,   1, 
                WMDP,   1, 
                GPDP,   1, 
                TGDP,   1, 
                UWST,   1, 
                WMST,   1, 
                GPST,   1, 
                TGST,   1, 
                UWPS,   1, 
                WMPS,   1, 
                GPPS,   1, 
                TGPS,   1, 
                Offset (0xDE), 
                SPDC,   8, 
                DROK,   1, 
                SPDG,   1, 
                Offset (0xE0), 
                KBLV,   8, 
                FVGA,   1, 
                P4HN,   1, 
                USSC,   1, 
                MFTM,   1, 
                APBM,   4, 
                EGCP,   8, 
                EGC2,   2, 
                Offset (0xE4), 
                VHDA,   1, 
                DP3S,   1, 
                LTCL,   2, 
                LOLK,   2, 
                U3WA,   2, 
                GSDT,   1, 
                Offset (0xE6), 
                PA3D,   1, 
                Offset (0xE7), 
                LBCF,   1, 
                MMOD,   4, 
                Offset (0xE8), 
                S4TF,   1, 
                BECF,   1, 
                PRT0,   1, 
                Offset (0xE9), 
                CSMF,   1, 
                DS3F,   1, 
                Offset (0xEA)
            }

            OperationRegion (RAMW, SystemMemory, RAMB, 0x0100)
            Field (RAMW, AnyAcc, NoLock, Preserve)
            {
                TRTY,   8, 
                FSFN,   8, 
                FSTA,   16, 
                FADR,   64, 
                FSIZ,   16, 
                ACTD,   8, 
                AVLD,   8, 
                SETD,   8, 
                ACPF,   8, 
                DCPF,   8, 
                DCP2,   8, 
                DCTP,   8, 
                CTPY,   8, 
                OPAD,   16, 
                OCAD,   16, 
                CSTE,   16, 
                NSTE,   16, 
                SSTE,   16, 
                SFUN,   8, 
                TPSV,   8, 
                TAC0,   8, 
                TCRT,   8, 
                TDO1,   8, 
                TDO2,   8, 
                PPSV,   8, 
                PAC0,   8, 
                T0HL,   8, 
                T0LL,   8, 
                T0F1,   8, 
                T0F2,   8, 
                T1HL,   8, 
                T1LL,   8, 
                T1F1,   8, 
                T1F2,   8, 
                T2HL,   8, 
                T2LL,   8, 
                T2F1,   8, 
                T2F2,   8, 
                T3HL,   8, 
                T3LL,   8, 
                T3F1,   8, 
                T3F2,   8, 
                T4HL,   8, 
                T4LL,   8, 
                T4F1,   8, 
                T4F2,   8, 
                T5HL,   8, 
                T5LL,   8, 
                T5F1,   8, 
                T5F2,   8, 
                T6HL,   8, 
                T6LL,   8, 
                T6F1,   8, 
                T6F2,   8, 
                T7HL,   8, 
                T7LL,   8, 
                T7F1,   8, 
                T7F2,   8, 
                SLPT,   8, 
                AIBF,   8, 
                IDES,   8, 
                VGAV,   16, 
                C4CP,   8, 
                LUXS,   8, 
                LUXL,   8, 
                LUXH,   8, 
                LUXF,   8, 
                MNAM,   64, 
                LCDV,   32, 
                LCDR,   8, 
                PTIM,   8, 
                PTMP,   8, 
                SMIF,   8, 
                DTSE,   8, 
                DTS1,   8, 
                DTS2,   8, 
                MPEN,   8, 
                QFAN,   8, 
                VBIF,   16, 
                BIPA,   32, 
                RTCW,   16, 
                CPUN,   8, 
                ALPR,   32, 
                CIST,   8, 
                GNBF,   32, 
                CPUP,   16, 
                SLMT,   16, 
                LDES,   8, 
                HDDF,   8, 
                GCDF,   16, 
                SMBB,   32, 
                FEBL,   32, 
                TMPB,   8, 
                DSYN,   8, 
                LDFT,   8, 
                TBOT,   16, 
                RTC1,   8, 
                RTC2,   8, 
                RTC3,   8, 
                BRTI,   8, 
                SGEN,   8, 
                RBUF,   32, 
                RVBS,   32, 
                EXTS,   8, 
                SCMA,   32, 
                CTBO,   8, 
                DOSF,   8, 
                PTAB,   32, 
                CPCH,   32, 
                HTPT,   32, 
                CPUH,   8, 
                XHCB,   32, 
                USBC,   8, 
                VBOF,   16, 
                RSKY,   8, 
                WOLO,   8, 
                INSK,   8, 
                FPBA,   32, 
                FPTR,   32, 
                NVLK,   8, 
                NVLP,   64, 
                ACPI,   8, 
                NRS3,   16, 
                DPS3,   16, 
                S4FG,   8, 
                MODE,   8, 
                S4TM,   32, 
                EVET,   32, 
                ALSA,   16, 
                EZFU,   8, 
                SMFA,   32, 
                ISDF,   8, 
                CALB,   32, 
                CFG2,   32, 
                GSEN,   8, 
                CNFG,   32, 
                KBBL,   8
            }
        }

        OperationRegion (DBGM, SystemMemory, 0x000D0000, 0x04)
        Field (DBGM, DWordAcc, NoLock, Preserve)
        {
            DBGG,   32
        }

        Name (OSFG, Zero)
        Name (OS9X, One)
        Name (OS98, 0x02)
        Name (OSME, 0x04)
        Name (OS2K, 0x08)
        Name (OSXP, 0x10)
        Name (OSEG, 0x20)
        Name (OSVT, 0x40)
        Name (OSW7, 0x80)
        Name (OSW8, 0x0100)
        Name (OS13, 0x0110)
        Name (OS14, 0x0120)
        Name (OS15, 0x0130)
        Name (OS16, 0x0140)
        Name (OS17, 0x0150)
        Method (MSOS, 0, NotSerialized)
        {
            If ((OSFG != Zero))
            {
                Return (OSFG) /* \OSFG */
            }

            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2006"))
                {
                    OSFG = OSVT /* \OSVT */
                }

                If (_OSI ("Linux"))
                {
                    OSFG = OSEG /* \OSEG */
                }

                If (_OSI ("Windows 2009"))
                {
                    OSFG = OSW7 /* \OSW7 */
                }

                If (_OSI ("Windows 2012"))
                {
                    OSFG = OSW8 /* \OSW8 */
                }

                Return (OSFG) /* \OSFG */
            }
            ElseIf (MCTH (_OS, "Microsoft Windows"))
            {
                OSFG = OS98 /* \OS98 */
            }
            ElseIf (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSFG = OSME /* \OSME */
            }
            ElseIf (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSFG = OS2K /* \OS2K */
            }
            Else
            {
                OSFG = OSXP /* \OSXP */
            }

            Return (OSFG) /* \OSFG */
        }

        Name (ONAM, "ASUSTeK")
        Method (ADVG, 0, NotSerialized)
        {
            If (\_SB.PCI0.VGA.PRST ())
            {
                Return (\_SB.PCI0.VGA.ADVD ())
            }

            Return (0x03)
        }

        Method (GCDM, 0, NotSerialized)
        {
            If (\_SB.PCI0.VGA.PRST ())
            {
                Return (\_SB.PCI0.VGA.GCDS ())
            }

            Return (One)
        }

        Method (SWHG, 1, Serialized)
        {
            If (\_SB.PCI0.VGA.PRST ())
            {
                \_SB.PCI0.VGA.SWHD (Arg0)
                Return (One)
            }

            Return (Zero)
        }

        Method (NATK, 0, NotSerialized)
        {
            If (\_SB.PCI0.VGA.PRST ())
            {
                Return (\_SB.PCI0.VGA.NATK ())
            }

            Return (One)
        }
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (AITM, Zero)
        Name (PLMD, Zero)
        Name (MUTX, One)
        Name (LEDS, Zero)
        Name (PWKY, Zero)
        Name (FNIV, Zero)
        Device (ATKD)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((!Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                ATKQ [AQTI] = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (ATKQ [AQHI])
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   // m.].....
            })
            Method (WMNB, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, IIA0)
                CreateDWordField (Arg2, 0x04, IIA1)
                Local0 = (Arg1 & 0xFFFFFFFF)
                If ((Local0 == 0x54494E49))
                {
                    INIT (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x53545342))
                {
                    Return (BSTS ())
                }

                If ((Local0 == 0x4E554653))
                {
                    Return (SFUN ())
                }

                If ((Local0 == 0x43455053))
                {
                    Return (SPEC (IIA0))
                }

                If ((Local0 == 0x494E424B))
                {
                    Return (KBNI ())
                }

                If ((Local0 == 0x5256534F))
                {
                    OSVR (IIA0)
                    Return (Zero)
                }

                If ((Local0 == 0x53545344))
                {
                    If ((IIA0 == 0x00060023))
                    {
                        Name (LASV, Zero)
                        If ((NVLK == One))
                        {
                            Return (LASV) /* \_SB_.ATKD.WMNB.LASV */
                        }

                        Local0 = Zero
                        FSTA = 0xFFFF
                        FADR = 0x55534243
                        FSMI (0x05)
                        If ((FSTA == 0x03))
                        {
                            Local0 = (^^PCI0.SBRG.EC0.STA8 (Zero) & 0x03)
                        }

                        If (Zero)
                        {
                            Local0 |= 0x04
                        }

                        If (Ones)
                        {
                            Local0 |= 0x04
                        }

                        LASV = Local0
                        Return (Local0)
                    }

                    If ((IIA0 == 0x00060024))
                    {
                        Return (Package (0x03)
                        {
                            0x79141022, 
                            0x05, 
                            0xFFFFFFFF
                        })
                    }

                    If ((IIA0 == 0x00060026))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        Local0 &= 0x04
                        If ((Local0 == 0x04))
                        {
                            Return (0x00010001)
                        }
                        ElseIf ((Local0 == Zero))
                        {
                            Return (0x00010000)
                        }
                    }

                    If ((IIA0 == 0x00010002))
                    {
                        Return (0x00050002)
                    }

                    If ((IIA0 == 0x00020011))
                    {
                        Return ((GALE (One) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020012))
                    {
                        Return ((GALE (0x02) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020013))
                    {
                        Return ((GALE (0x04) | 0x00050000))
                    }

                    If ((IIA0 == 0x00040015))
                    {
                        Return ((GALE (0x08) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020014))
                    {
                        Return ((GALE (0x10) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020015))
                    {
                        Return ((GALE (0x20) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020016))
                    {
                        Return ((GALE (0x40) | 0x00050000))
                    }

                    If ((IIA0 == 0x00110011))
                    {
                        Return ((TMPR () & 0xFFFF))
                    }

                    If ((IIA0 == 0x00110012))
                    {
                        Local0 = TMPR ()
                        Local1 = Local0
                        Local0 = ((Local0 & 0xF0000000) >> 0x1C)
                        Local1 = ((Local1 & 0x0F000000) >> 0x18)
                        Local1 <<= 0x08
                        Return ((Local0 + Local1))
                    }

                    If ((IIA0 == 0x00050012))
                    {
                        If ((MSOS () >= OSW8))
                        {
                            Local0 = (0x64 - Zero)
                            Local0 <<= 0x08
                            Local1 = (Local0 + 0x64)
                        }
                        Else
                        {
                            Local0 = 0x0A
                            Local0 <<= 0x08
                            Local1 = (GPLV () + Local0)
                        }

                        Return (Local1)
                    }

                    If ((IIA0 == 0x00010011))
                    {
                        If (WLDP)
                        {
                            Return ((WRST + 0x00030000))
                        }
                    }

                    If ((IIA0 == 0x00010013))
                    {
                        If (BTDP)
                        {
                            Return ((BRST + 0x00050000))
                        }
                    }

                    If ((IIA0 == 0x00010021))
                    {
                        If (UWDP)
                        {
                            Return ((UWST + 0x00050000))
                        }
                    }

                    If ((IIA0 == 0x00010017))
                    {
                        If (WMDP)
                        {
                            Return ((WMST + 0x00050000))
                        }
                    }

                    If ((IIA0 == 0x00010015))
                    {
                        If (GPDP)
                        {
                            Return ((GPST + 0x00050000))
                        }
                    }

                    If ((IIA0 == 0x00010019))
                    {
                        If (TGDP)
                        {
                            Return ((TGST + 0x00050000))
                        }
                    }

                    If ((IIA0 == 0x00010001))
                    {
                        Return (0x00040000)
                    }

                    If ((IIA0 == 0x00120012))
                    {
                        Return (PSTC (Zero))
                    }

                    If ((IIA0 == 0x00120015))
                    {
                        Local0 = (SLMT - One)
                        Return ((Local0 | 0x00010000))
                    }

                    If ((IIA0 == 0x00120031))
                    {
                        If (DP3S)
                        {
                            Return (0x00010001)
                        }
                        Else
                        {
                            Return (0x00010000)
                        }
                    }

                    If ((IIA0 == 0x00120032))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080041))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080042))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080043))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080044))
                    {
                        Return (Zero)
                    }
                }

                If ((Local0 == 0x53564544))
                {
                    If ((IIA0 == 0x00060023))
                    {
                        If ((NVLK == One))
                        {
                            Return (Zero)
                        }

                        Local0 = Zero
                        FSTA = 0xFFFF
                        FADR = 0x55534243
                        FSMI (0x05)
                        Local0 = (IIA1 >> 0x09)
                        If (((Local0 & One) == One))
                        {
                            VBOF = One
                            Local0 = (IIA1 >> 0x18)
                            Local0 *= 0x0100
                            VBOF |= Local0 /* \_SB_.VBOF */
                        }
                        Else
                        {
                            VBOF = Zero
                        }

                        Local0 = (IIA1 & 0xFF)
                        ^^PCI0.SBRG.EC0.STA9 (One, Local0)
                        Local0 = (IIA1 >> 0x08)
                        Local1 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        If (((Local0 & One) == One))
                        {
                            Local1 |= 0x02
                            Local2 = (Local1 & 0x0F)
                            USBC = Local2
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local1)
                        }
                        Else
                        {
                            Local1 &= 0xFD
                            Local2 = (Local1 & 0x0F)
                            USBC = Local2
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local1)
                        }

                        FSTA = 0xFFFF
                        FADR = 0x55534243
                        FSMI (0x04)
                        If ((FSTA == 0x03))
                        {
                            FSTA = 0xFFFF
                            FSMI (0x06)
                            If ((FSTA != Zero))
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }

                    If ((IIA0 == 0x00060026))
                    {
                        Local0 = Zero
                        FSTA = 0xFFFF
                        FADR = 0x55534243
                        FSMI (0x05)
                        Local0 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        If ((IIA1 == One))
                        {
                            Local2 = (0x04 | USBC) /* \_SB_.USBC */
                            USBC = Local2
                            Local0 |= 0x04
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local0)
                        }
                        Else
                        {
                            Local2 = (0xFB & USBC) /* \_SB_.USBC */
                            USBC = Local2
                            Local0 &= 0xFB
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local0)
                        }

                        FSTA = 0xFFFF
                        FADR = 0x55534243
                        FSMI (0x04)
                        If ((FSTA == 0x03))
                        {
                            FSTA = 0xFFFF
                            FSMI (0x06)
                            If ((FSTA != Zero))
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }

                    If ((IIA0 == 0x00020011))
                    {
                        Return (SALE ((IIA1 + 0x02)))
                    }

                    If ((IIA0 == 0x00020012))
                    {
                        Return (SALE ((IIA1 + 0x04)))
                    }

                    If ((IIA0 == 0x00020013))
                    {
                        Return (SALE ((IIA1 + 0x08)))
                    }

                    If ((IIA0 == 0x00040015))
                    {
                        Return (SALE ((IIA1 + 0x10)))
                    }

                    If ((IIA0 == 0x00020014))
                    {
                        Return (SALE ((IIA1 + 0x20)))
                    }

                    If ((IIA0 == 0x00020015))
                    {
                        Return (SALE ((IIA1 + 0x40)))
                    }

                    If ((IIA0 == 0x00020016))
                    {
                        Return (SALE ((IIA1 + 0x80)))
                    }

                    If ((IIA0 == 0x00050011))
                    {
                        If ((IIA1 == 0x02))
                        {
                            ^^PCI0.SBRG.EC0.SPIN (0x72, One)
                            ^^PCI0.SBRG.EC0.BLCT = One
                        }

                        Return (One)
                    }

                    If ((IIA0 == 0x00050012))
                    {
                        SPLV (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010002))
                    {
                        OWGD (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010012))
                    {
                        WLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010013))
                    {
                        BLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010003))
                    {
                        Return (CWAP (IIA1))
                    }

                    If ((IIA0 == 0x00010015))
                    {
                        GPSC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010019))
                    {
                        GSMC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010017))
                    {
                        WMXC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010021))
                    {
                        UWBC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00120012))
                    {
                        Return (PSTC ((IIA1 + One)))
                    }

                    If ((IIA0 == 0x00100022))
                    {
                        If ((IIA1 & 0x02))
                        {
                            ^^PCI0.SBRG.EC0.STB1 (0x04)
                            ^^PCI0.SBRG.EC0.STB1 (0x05)
                            FNIV = One
                            Return (One)
                        }
                        Else
                        {
                            KINI ()
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If ((IIA0 == 0x00120053))
                    {
                        If ((IIA1 & One))
                        {
                            BATF (One)
                            Return (One)
                        }
                        Else
                        {
                            BATF (Zero)
                            Return (One)
                        }

                        Return (Zero)
                    }
                }

                If ((Local0 == 0x48534C46))
                {
                    FLSH (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x494E4946))
                {
                    Return (FINI (IIA0))
                }

                If ((Local0 == 0x53524546))
                {
                    Return (FERS (IIA0))
                }

                If ((Local0 == 0x49525746))
                {
                    Return (FWRI (IIA0))
                }

                If ((Local0 == 0x57504346))
                {
                    Return (FCPW (IIA0))
                }

                If ((Local0 == 0x50504346))
                {
                    Return (FCPP ())
                }

                If ((Local0 == 0x50525746))
                {
                    Return (FWRP ())
                }

                If ((Local0 == 0x52534345))
                {
                    Return (ECSR (IIA0))
                }

                If ((Local0 == 0x43534C46))
                {
                    Return (FLSC (IIA0))
                }

                If ((Local0 == 0x43455246))
                {
                    Return (FREC (IIA0))
                }

                If ((Local0 == 0x454D4946))
                {
                    Return (FIME (IIA0))
                }

                If ((Local0 == 0x4C425053))
                {
                    If ((IIA0 == 0x80))
                    {
                        If ((MSOS () >= OSVT))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }

                    If ((IIA0 > 0x0F))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 < Zero))
                    {
                        Return (Zero)
                    }

                    SPLV (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x50534453))
                {
                    SDSP (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x50534447))
                {
                    Return (GDSP (IIA0))
                }

                If ((Local0 == 0x44495047))
                {
                    Return (GPID ())
                }

                If ((Local0 == 0x44434C47))
                {
                    Return (GLCD ())
                }

                If ((Local0 == 0x444F4D51))
                {
                    Return (QMOD (IIA0))
                }

                If ((Local0 == 0x49564E41))
                {
                    Return (ANVI (IIA0))
                }

                If ((Local0 == 0x46494243))
                {
                    Return (CBIF (IIA0))
                }

                If ((Local0 == 0x4E464741))
                {
                    Return (AGFN (IIA0))
                }

                If ((Local0 == 0x46494643))
                {
                    CFIF (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x44495046))
                {
                    Return (0x0118)
                }

                If ((Local0 == 0x59454B48))
                {
                    Local0 = ^^PCI0.SBRG.EC0.CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                    Return (One)
                }

                If ((Local0 == 0x5446424B))
                {
                    ^^PCI0.SBRG.EC0.HKEN = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    Return (One)
                }

                If ((Local0 == 0x47444353))
                {
                    Return (SCDG (IIA0))
                }

                Return (0xFFFFFFFE)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xFF))
                {
                    Return (GANQ ())
                }

                Return (Ones)
            }

            Method (IANE, 1, Serialized)
            {
                IANQ (Arg0)
                Notify (ATKD, 0xFF) // Hardware-Specific
            }

            Method (INIT, 1, NotSerialized)
            {
                ATKP = One
                Return (MNAM) /* \_SB_.MNAM */
            }

            Method (BSTS, 0, NotSerialized)
            {
                Local0 = IKFG /* \_SB_.IKFG */
                Local0 |= (IKF2 << 0x08)
                If (ACPF)
                {
                    Local0 = Zero
                    Return (Local0)
                }
                Else
                {
                    Local0 = ^^PCI0.SBRG.EC0.RRAM (0x04FE)
                    If (((Local0 & 0xFF) == 0x34))
                    {
                        Local0 = 0x05
                        Return (Local0)
                    }
                    Else
                    {
                        Local0 = Zero
                        Return (Local0)
                    }
                }

                Local0 &= 0xFFDF
                Return (Local0)
            }

            Method (TMPR, 0, NotSerialized)
            {
                Local0 = \_TZ.RTMP ()
                Local1 = \_TZ.RFAN (Zero)
                Local1 <<= 0x10
                Local0 = (\_TZ.KELV (Local0) + Local1)
                Local2 = Zero
                If (TENA)
                {
                    Local2 = TDTY /* \TDTY */
                }
                Else
                {
                    Local3 = HKTH ()
                    If ((Local3 != 0xFFFF))
                    {
                        Local2 = Local3
                    }
                }

                Local2 <<= 0x18
                Local0 += Local2
                Local3 = \_TZ.RFSE ()
                Local3 <<= 0x1C
                Local0 += Local3
                Return (Local0)
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x37
                Local0 |= 0x40
                Local0 |= 0x00020000
                Local0 |= 0x00080000
                Return (Local0)
            }

            Method (SPEC, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (0x00070009)
                }
                ElseIf ((Arg0 == One))
                {
                    Return (One)
                }

                Return (0xFFFFFFFE)
            }

            Method (OSVR, 1, NotSerialized)
            {
                If ((OSFG == Zero))
                {
                    OSFG = Arg0
                }
            }

            Method (GPLV, 0, NotSerialized)
            {
                If (!ACPF)
                {
                    Return (LBT2) /* \_SB_.LBT2 */
                }

                Return (LBTN) /* \_SB_.LBTN */
            }

            Method (SPLV, 1, NotSerialized)
            {
                If (ACPF)
                {
                    LBTN = Arg0
                }
                Else
                {
                    LBT2 = Arg0
                }

                ^^PCI0.SBRG.EC0.STBR ()
                Return (One)
            }

            Method (SPBL, 1, NotSerialized)
            {
                If ((Arg0 == 0x0100))
                {
                    Local0 = (0x0B - One)
                    Return (Local0)
                }

                If ((Arg0 == 0x80))
                {
                    Return (One)
                }

                If ((Arg0 > 0x0F))
                {
                    Return (Zero)
                }

                If ((Arg0 < Zero))
                {
                    Return (Zero)
                }

                SPLV (Arg0)
                Return (One)
            }

            Method (WLED, 1, NotSerialized)
            {
                OWLD (Arg0)
                Return (One)
            }

            Method (KBNI, 0, NotSerialized)
            {
                Return (One)
            }

            Method (GALE, 1, NotSerialized)
            {
                If ((Arg0 == 0x04))
                {
                    If ((LEDS && 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x08))
                {
                    If ((LEDS && 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x10))
                {
                    If ((LEDS && 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (0x02)
            }

            Method (SALE, 1, NotSerialized)
            {
                If ((Arg0 == 0x10)){}
                If ((Arg0 == 0x11)){}
                Return (One)
            }

            Method (BLED, 1, NotSerialized)
            {
                OBTD (Arg0)
                Return (One)
            }

            Method (UWBC, 1, NotSerialized)
            {
                OUWD (Arg0)
                Return (One)
            }

            Method (WMXC, 1, NotSerialized)
            {
                OWMD (Arg0)
                Return (One)
            }

            Method (GPSC, 1, NotSerialized)
            {
                OGPD (Arg0)
                Return (One)
            }

            Method (GSMC, 1, NotSerialized)
            {
                OTGD (Arg0)
                Return (One)
            }

            Method (LTEC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (RSTS, 0, NotSerialized)
            {
                Return (ORST ())
            }

            Method (SDSP, 1, NotSerialized)
            {
                If (NATK ())
                {
                    Return (SWHG (Arg0))
                }

                Return (Zero)
            }

            Method (GPID, 0, NotSerialized)
            {
                Return (LCDR) /* \_SB_.LCDR */
            }

            Method (HWRS, 0, NotSerialized)
            {
                Return (OHWR ())
            }

            Method (GLCD, 0, NotSerialized)
            {
                Return (LCDV) /* \_SB_.LCDV */
            }

            Name (WAPF, Zero)
            Method (CWAP, 1, NotSerialized)
            {
                WAPF |= Arg0 /* \_SB_.ATKD.WAPF */
                Return (One)
            }

            Method (QMOD, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (Zero)
                }

                If ((Arg0 == One))
                {
                    ^^PCI0.SBRG.EC0.ST98 (QFAN)
                }

                If ((Arg0 == 0x02))
                {
                    ^^PCI0.SBRG.EC0.ST98 (0xFF)
                }

                Return (One)
            }

            Method (ANVI, 1, Serialized)
            {
                Local0 = ASMI (Arg0)
                Return (Local0)
            }

            Method (PSTC, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = CPUP /* \_SB_.CPUP */
                    Local0 <<= 0x08
                    Local0 += CPUP
                    Return (Local0)
                }

                If ((Arg0 > CPUP))
                {
                    Return (0xFFFFFFFE)
                }

                SLMT = Arg0
                If (CIST)
                {
                    Notify (\_PR.P000, 0x80) // Performance Capability Change
                    Notify (\_PR.P001, 0x80) // Performance Capability Change
                    Notify (\_PR.P002, 0x80) // Performance Capability Change
                    Notify (\_PR.P003, 0x80) // Performance Capability Change
                }

                Return (Zero)
            }

            Method (SMBB, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x10)
                Local0 &= 0xFF
                Local1 = (Arg0 >> 0x18)
                Local2 = (Arg0 & 0xFF)
                If ((Local1 & One))
                {
                    Return (RBYT (Local1, Local0))
                }
                Else
                {
                    Return (WBYT (Local1, Local0, Local2))
                }
            }

            Method (SMBW, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x10)
                Local0 &= 0xFF
                Local1 = (Arg0 >> 0x18)
                Local2 = (Arg0 & 0xFF)
                If ((Local1 & One))
                {
                    Return (RWRD (Local1, Local0))
                }
                Else
                {
                    Return (WWRD (Local1, Local0, Local2))
                }
            }

            Method (SMBK, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x08)
                Local0 &= 0xFF
                If (Local0)
                {
                    Local0 = (Arg0 >> 0x10)
                    Local0 &= 0xFF
                    Local1 = (Arg0 >> 0x18)
                    Local1 &= 0xFF
                    Local3 = (Arg0 & 0x0F)
                    If ((Local1 & One))
                    {
                        RBLK (Local1, Local0, Local3)
                    }
                    Else
                    {
                        WBLK (Local1, Local0, Local3)
                    }

                    Return (Zero)
                }
                Else
                {
                    Local2 = (Arg0 >> 0x10)
                    Local2 &= 0xFF
                    Local1 = (Arg0 >> 0x18)
                    If ((Local1 & One))
                    {
                        Return (DerefOf (RBUF [Local2]))
                    }
                    Else
                    {
                        Local1 = (Arg0 & 0xFF)
                        RBUF [Local2] = Local1
                        Return (Zero)
                    }
                }
            }

            Method (ECRW, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x18)
                Local0 &= 0xFF
                Local1 = (Arg0 >> 0x10)
                Local1 &= 0xFF
                Local2 = (Arg0 >> 0x08)
                Local2 &= 0xFF
                Local3 = (Arg0 & 0xFF)
                Acquire (^^PCI0.SBRG.EC0.MUEC, 0xFFFF)
                ^^PCI0.SBRG.EC0.CDT3 = Local0
                ^^PCI0.SBRG.EC0.CDT2 = Local1
                ^^PCI0.SBRG.EC0.CDT1 = Local2
                ^^PCI0.SBRG.EC0.CMD1 = Local3
                Local0 = 0x05
                While ((Local0 && ^^PCI0.SBRG.EC0.CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                Local0 = ^^PCI0.SBRG.EC0.CDT3 /* \_SB_.PCI0.SBRG.EC0_.CDT3 */
                Local1 = ^^PCI0.SBRG.EC0.CDT2 /* \_SB_.PCI0.SBRG.EC0_.CDT2 */
                Local2 = ^^PCI0.SBRG.EC0.CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                Local3 = ^^PCI0.SBRG.EC0.CMD1 /* \_SB_.PCI0.SBRG.EC0_.CMD1 */
                Release (^^PCI0.SBRG.EC0.MUEC)
                Local0 <<= 0x08
                Local0 |= Local1
                Local0 <<= 0x08
                Local0 |= Local2
                Local0 <<= 0x08
                Local0 |= Local3
                Return (Local0)
            }

            Method (CBIF, 1, Serialized)
            {
                TMPB = Arg0
                ALPR = 0x03
                ISMI (0xA3)
                Return (One)
            }

            Method (CFIF, 1, Serialized)
            {
                TMPB = Arg0
                ISMI (0xA6)
                Return (One)
            }

            Method (GDSP, 1, NotSerialized)
            {
                If (NATK ())
                {
                    If ((Arg0 == 0x80))
                    {
                        Return (Zero)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (GCDM ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }

            Name (CA1M, Zero)
            Method (RMEM, 1, NotSerialized)
            {
                OperationRegion (VMEM, SystemMemory, Arg0, 0x04)
                Field (VMEM, ByteAcc, NoLock, Preserve)
                {
                    MEMI,   32
                }

                Local0 = MEMI /* \_SB_.ATKD.RMEM.MEMI */
                Return (Local0)
            }

            Method (WMEM, 2, NotSerialized)
            {
                OperationRegion (VMEM, SystemMemory, Arg0, 0x04)
                Field (VMEM, ByteAcc, NoLock, Preserve)
                {
                    MEMI,   32
                }

                MEMI = Arg1
            }

            Name (MEMD, Package (0x41)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (SCDG, 1, NotSerialized)
            {
                CA1M = CALB /* \_SB_.CALB */
                If (!((ToInteger (Arg0) >= Zero) && (ToInteger (
                    Arg0) <= 0x09)))
                {
                    MEMD [Zero] = Zero
                    Return (MEMD) /* \_SB_.ATKD.MEMD */
                }

                CA1M = (CALB + (0x0100 * ToInteger (Arg0)))
                Local2 = Zero
                Local3 = One
                Local1 = CA1M /* \_SB_.ATKD.CA1M */
                MEMD [Zero] = 0x0100
                While ((Local3 < 0x41))
                {
                    MEMD [Local3] = RMEM ((Local1 + Local2))
                    Local2 += 0x04
                    Local3 += One
                }

                Return (MEMD) /* \_SB_.ATKD.MEMD */
            }
        }
    }

    Scope (_SB)
    {
        Device (ASHS)
        {
            Name (_HID, "ATK4002")  // _HID: Hardware ID
            Method (HSWC, 1, Serialized)
            {
                If ((Arg0 < 0x02))
                {
                    OWGD (Arg0)
                    Return (One)
                }

                If ((Arg0 == 0x04))
                {
                    OWGD (Zero)
                    Return (One)
                }

                If ((Arg0 == 0x05))
                {
                    OWGD (One)
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = OWGS ()
                    If (Local0)
                    {
                        Return (0x05)
                    }
                    Else
                    {
                        Return (0x04)
                    }
                }

                If ((Arg0 == 0x03))
                {
                    Return (0xFF)
                }

                If ((Arg0 == 0x80))
                {
                    Return (One)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MSOS () >= OSW8))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (AC0)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (^^SBRG.EC0.ACAP ())
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (ACAP, 0, Serialized)
        {
            Return (ACPF) /* \_SB_.ACPF */
        }
    }

    Scope (_SB.PCI0)
    {
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (^^SBRG.EC0.BATP (Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LOW2, 0x012C)
            Name (PUNT, One)
            Name (LFCC, 0x1770)
            Name (NBIF, Package (0x0D)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                0x3C, 
                0x3C, 
                "M3N", 
                " ", 
                "LIon", 
                "ASUSTeK"
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (BIXT, Package (0x14)
            {
                Zero, 
                Zero, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x3C, 
                0x3C, 
                "M3N", 
                " ", 
                "LIon", 
                "ASUSTeK"
            })
            Name (NBIX, Package (0x14)
            {
                Zero, 
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Method (FBIF, 5, NotSerialized)
            {
                PUNT = Arg0
                Local1 = Arg1
                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= 0x0A
                    Local2 *= 0x0A
                }

                PBIF [Zero] = Arg0
                PBIF [One] = Local1
                PBIF [0x02] = Local2
                LFCC = Local2
                PBIF [0x03] = Arg3
                PBIF [0x04] = Arg4
                Divide (Local1, 0x0A, Local3, Local5)
                PBIF [0x05] = Local5
                Divide (Local1, 0x64, Local3, Local6)
                PBIF [0x06] = Local6
                LOW2 = Local6
                Divide (Local1, 0x64, Local3, Local7)
                PBIF [0x07] = Local7
                PBIF [0x08] = Local7
            }

            Method (CBIF, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Local0 = DerefOf (PBIF [0x04])
                    PBIF [Zero] = Zero
                    PBIF [One] = (DerefOf (PBIF [One]) * Local0)
                    PBIF [0x02] = (DerefOf (PBIF [0x02]) * Local0)
                    PBIF [0x05] = (DerefOf (PBIF [0x05]) * Local0)
                    PBIF [0x06] = (DerefOf (PBIF [0x06]) * Local0)
                    PBIF [0x07] = (DerefOf (PBIF [0x07]) * Local0)
                    PBIF [0x08] = (DerefOf (PBIF [0x08]) * Local0)
                    Divide (DerefOf (PBIF [One]), 0x03E8, Local2, PBIF [One])
                    Divide (DerefOf (PBIF [0x02]), 0x03E8, Local2, PBIF [0x02])
                    Divide (DerefOf (PBIF [0x05]), 0x03E8, Local2, PBIF [0x05])
                    Divide (DerefOf (PBIF [0x06]), 0x03E8, Local2, PBIF [0x06])
                    Divide (DerefOf (PBIF [0x07]), 0x03E8, Local2, PBIF [0x07])
                    Divide (DerefOf (PBIF [0x08]), 0x03E8, Local2, PBIF [0x08])
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (!^^SBRG.EC0.BATP (Zero))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                If ((^^SBRG.EC0.GBTT (Zero) == 0xFF))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                BATO ()
                BATS (Zero)
                PBIF [0x09] = ^^SBRG.EC0.BIF9 ()
                PBIF [0x0C] = ONAM /* \ONAM */
                Local0 = ^^SBRG.EC0.BIF0 ()
                Local1 = ^^SBRG.EC0.BIF1 ()
                Local2 = ^^SBRG.EC0.BIF2 ()
                Local3 = ^^SBRG.EC0.BIF3 ()
                Local4 = ^^SBRG.EC0.BIF4 ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    FBIF (Local0, Local1, Local2, Local3, Local4)
                                    CBIF ()
                                }
                            }
                        }
                    }
                }

                If ((PUNT == Zero))
                {
                    Local2 *= 0x0A
                }

                LFCC = Local2
                BATR ()
                Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
            }

            Method (FBST, 4, NotSerialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local0 = Zero
                If (^^SBRG.EC0.ACAP ())
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If (CHGS (Zero))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (BLLO)
                {
                    Local2 = (One << 0x02)
                    Local0 |= Local2
                }

                If ((^^SBRG.EC0.EB0S & 0x08))
                {
                    Local2 = (One << 0x02)
                    Local0 |= Local2
                }

                If ((Local1 >= 0x8000))
                {
                    Local1 = (0xFFFF - Local1)
                }

                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= ^^SBRG.EC0.B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                    Local2 *= 0x0A
                }

                Local3 = (Local0 & 0x02)
                If (!Local3)
                {
                    Local3 = (LFCC - Local2)
                    Divide (LFCC, 0xC8, Local4, Local5)
                    If ((Local3 < Local5))
                    {
                        Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                    }
                }
                Else
                {
                    Divide (LFCC, 0xC8, Local4, Local5)
                    Local4 = (LFCC - Local5)
                    If ((Local2 > Local4))
                    {
                        Local2 = Local4
                    }
                }

                If (!^^SBRG.EC0.ACAP ())
                {
                    Divide (Local2, MBLF, Local3, Local4)
                    If ((Local1 < Local4))
                    {
                        Local1 = Local4
                    }
                }

                PBST [Zero] = Local0
                PBST [One] = Local1
                PBST [0x02] = Local2
                PBST [0x03] = Arg3
            }

            Method (CBST, 0, NotSerialized)
            {
                If (PUNT)
                {
                    PBST [0x03] = ^^SBRG.EC0.B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                    Local0 = DerefOf (PBST [0x03])
                    PBST [One] = (DerefOf (PBST [One]) * Local0)
                    Divide (DerefOf (PBST [One]), 0x03E8, Local1, PBST [One])
                    PBST [0x02] = (DerefOf (PBST [0x02]) * Local0)
                    Divide (DerefOf (PBST [0x02]), 0x03E8, Local1, PBST [0x02])
                }
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                PBST [Zero] = Zero
                PBST [One] = Ones
                PBST [0x02] = Ones
                PBST [0x03] = Ones
                If (!^^SBRG.EC0.BATP (Zero))
                {
                    PBST [Zero] = One
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If ((^^SBRG.EC0.GBTT (Zero) == 0xFF))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If (MES4)
                {
                    MES4--
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                BATO ()
                BATS (Zero)
                Local0 = ^^SBRG.EC0.BSTS ()
                Local1 = ^^SBRG.EC0.BCRT ()
                Local2 = ^^SBRG.EC0.BRCP ()
                Local3 = ^^SBRG.EC0.BVOT ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                FBST (Local0, Local1, Local2, Local3)
                                CBST ()
                            }
                        }
                    }
                }

                BATR ()
                Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                If (!^^SBRG.EC0.BATP (Zero))
                {
                    Return (NBIX) /* \_SB_.PCI0.BAT0.NBIX */
                }

                If ((^^SBRG.EC0.GBTT (Zero) == 0xFF))
                {
                    Return (NBIX) /* \_SB_.PCI0.BAT0.NBIX */
                }

                _BIF ()
                BIXT [One] = DerefOf (PBIF [Zero])
                BIXT [0x02] = DerefOf (PBIF [One])
                BIXT [0x03] = DerefOf (PBIF [0x02])
                BIXT [0x04] = DerefOf (PBIF [0x03])
                BIXT [0x05] = DerefOf (PBIF [0x04])
                BIXT [0x06] = DerefOf (PBIF [0x05])
                BIXT [0x07] = DerefOf (PBIF [0x06])
                BIXT [0x0E] = DerefOf (PBIF [0x07])
                BIXT [0x0F] = DerefOf (PBIF [0x08])
                BIXT [0x10] = DerefOf (PBIF [0x09])
                BIXT [0x11] = DerefOf (PBIF [0x0A])
                BIXT [0x12] = DerefOf (PBIF [0x0B])
                BIXT [0x13] = DerefOf (PBIF [0x0C])
                If ((DerefOf (BIXT [One]) == One))
                {
                    BIXT [One] = Zero
                    Local0 = DerefOf (BIXT [0x05])
                    BIXT [0x02] = (DerefOf (BIXT [0x02]) * Local0)
                    BIXT [0x03] = (DerefOf (BIXT [0x03]) * Local0)
                    BIXT [0x06] = (DerefOf (BIXT [0x06]) * Local0)
                    BIXT [0x07] = (DerefOf (BIXT [0x07]) * Local0)
                    BIXT [0x0E] = (DerefOf (BIXT [0x0E]) * Local0)
                    BIXT [0x0F] = (DerefOf (BIXT [0x0F]) * Local0)
                    Divide (DerefOf (BIXT [0x02]), 0x03E8, Local0, BIXT [0x02])
                    Divide (DerefOf (BIXT [0x03]), 0x03E8, Local0, BIXT [0x03])
                    Divide (DerefOf (BIXT [0x06]), 0x03E8, Local0, BIXT [0x06])
                    Divide (DerefOf (BIXT [0x07]), 0x03E8, Local0, BIXT [0x07])
                    Divide (DerefOf (BIXT [0x0E]), 0x03E8, Local0, BIXT [0x0E])
                    Divide (DerefOf (BIXT [0x0F]), 0x03E8, Local0, BIXT [0x0F])
                }

                BIXT [0x08] = ^^SBRG.EC0.B0C3 /* \_SB_.PCI0.SBRG.EC0_.B0C3 */
                BIXT [0x09] = 0x0001869F
                Return (BIXT) /* \_SB_.PCI0.BAT0.BIXT */
            }

            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                ^^SBRG.EC0.ST8E (0x29, 0xFF)
                ^^SBRG.EC0.ST8E (0x2A, 0xFF)
                ^^SBRG.EC0.ST8E (0x28, 0x0F)
                If ((Arg0 != Zero))
                {
                    Local0 = DerefOf (PBIF [0x04])
                    Local1 = (Arg0 * 0x03E8)
                    Divide (Local1, Local0, Local2, Local3)
                    ^^SBRG.EC0.ST9E (0x29, 0xFF, (Local3 & 0xFF))
                    Local2 = (Local3 >> 0x08)
                    Local2 &= 0xFF
                    ^^SBRG.EC0.ST9E (0x2A, 0xFF, Local2)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (B0CR, Zero)
        Name (B1CR, Zero)
        Method (GGCC, 1, Serialized)
        {
            BATO ()
            BATS (Arg0)
            Local0 = ^SBRG.EC0.BCRT ()
            BATR ()
            If ((Local0 == Ones))
            {
                If (Arg0)
                {
                    Local0 = B1CR /* \_SB_.PCI0.B1CR */
                }
                Else
                {
                    Local0 = B0CR /* \_SB_.PCI0.B0CR */
                }
            }

            Local1 = (Local0 & 0x8000)
            If (Local1)
            {
                Local0 = Zero
            }

            If (Arg0)
            {
                B1CR = Local0
            }
            Else
            {
                B0CR = Local0
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (BADR, 0x0B)
        Name (CADR, 0x09)
        Name (SADR, 0x0A)
        Method (ALMH, 1, NotSerialized)
        {
            If ((Arg0 == BADR))
            {
                NBAT (0x80)
            }
        }

        Method (BIFW, 1, NotSerialized)
        {
            Local0 = SMBR (RDWD, BADR, Arg0)
            Local1 = DerefOf (Local0 [Zero])
            If (Local1)
            {
                Return (Ones)
            }
            Else
            {
                Return (DerefOf (Local0 [0x02]))
            }
        }

        Method (BIF0, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.EC0_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.EC0_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local1 = (Local0 >> 0x0F)
                    Local1 &= One
                    Local0 = (Local1 ^ One)
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF1, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1DC /* \_SB_.PCI0.SBRG.EC0_.B1DC */
                }
                Else
                {
                    Local0 = B0DC /* \_SB_.PCI0.SBRG.EC0_.B0DC */
                }

                Local0 &= 0xFFFF
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF2, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1FC /* \_SB_.PCI0.SBRG.EC0_.B1FC */
                }
                Else
                {
                    Local0 = B0FC /* \_SB_.PCI0.SBRG.EC0_.B0FC */
                }

                Local0 &= 0xFFFF
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF3, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.EC0_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.EC0_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local0 >>= 0x09
                    Local0 &= One
                    Local0 ^= One
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF4, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1DV /* \_SB_.PCI0.SBRG.EC0_.B1DV */
                }
                Else
                {
                    Local0 = B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF9, 0, NotSerialized)
        {
            Name (BSTR, Buffer (0x20){})
            Local0 = SMBR (RDBL, BADR, 0x21)
            If ((DerefOf (Local0 [Zero]) != Zero))
            {
                BSTR = MNAM /* \_SB_.MNAM */
                BSTR [0x04] = Zero
            }
            Else
            {
                BSTR = DerefOf (Local0 [0x02])
                BSTR [DerefOf (Local0 [One])] = Zero
            }

            Return (BSTR) /* \_SB_.PCI0.SBRG.EC0_.BIF9.BSTR */
        }

        Method (BIFA, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1SN /* \_SB_.PCI0.SBRG.EC0_.B1SN */
                }
                Else
                {
                    Local0 = B0SN /* \_SB_.PCI0.SBRG.EC0_.B0SN */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BSTS, 0, NotSerialized)
        {
            If (BSLF)
            {
                Local0 = B1ST /* \_SB_.PCI0.SBRG.EC0_.B1ST */
            }
            Else
            {
                Local0 = B0ST /* \_SB_.PCI0.SBRG.EC0_.B0ST */
            }

            Return (Local0)
        }

        Method (BCRT, 0, NotSerialized)
        {
            If (BSLF)
            {
                Local0 = B1CC /* \_SB_.PCI0.SBRG.EC0_.B1CC */
            }
            Else
            {
                Local0 = B0CC /* \_SB_.PCI0.SBRG.EC0_.B0CC */
            }

            Return (Local0)
        }

        Method (BRCP, 0, NotSerialized)
        {
            If (BSLF)
            {
                Local0 = B1RC /* \_SB_.PCI0.SBRG.EC0_.B1RC */
            }
            Else
            {
                Local0 = B0RC /* \_SB_.PCI0.SBRG.EC0_.B0RC */
            }

            If ((Local0 == 0xFFFF))
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BVOT, 0, NotSerialized)
        {
            If (BSLF)
            {
                Local0 = B1VL /* \_SB_.PCI0.SBRG.EC0_.B1VL */
            }
            Else
            {
                Local0 = B0VL /* \_SB_.PCI0.SBRG.EC0_.B0VL */
            }

            Return (Local0)
        }
    }

    Scope (\)
    {
        Method (CHGS, 1, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.EC0.BCHG (Arg0)
            Return (Local0)
        }

        Name (BSLF, Zero)
        Method (BATS, 1, Serialized)
        {
            If (Arg0)
            {
                BSLF = One
            }
            Else
            {
                BSLF = Zero
            }
        }

        Mutex (MMPX, 0x00)
        Method (BATO, 0, Serialized)
        {
            Acquire (MMPX, 0xFFFF)
        }

        Method (BATR, 0, Serialized)
        {
            Release (MMPX)
        }

        Name (BLLO, Zero)
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DCPF = DCPS (Zero)
            If (DCPF)
            {
                Sleep (0x07D0)
            }

            Notify (BAT0, 0x80) // Status Change
            Notify (BAT0, 0x81) // Information Change
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            BLLO = One
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x6E)
            }
            ElseIf (BATP (Zero))
            {
                Notify (BAT0, 0x80) // Status Change
            }
        }

        Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (BATP (Zero))
            {
                Local0 = BCLE (Zero)
                If ((Local0 == Zero))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
                Else
                {
                    Notify (BAT0, 0x81) // Information Change
                    Notify (AC0, 0x80) // Status Change
                }
            }
        }

        Method (BATP, 1, Serialized)
        {
            If (Arg0)
            {
                Return (DCP2) /* \_SB_.DCP2 */
            }
            Else
            {
                Return (DCPF) /* \_SB_.DCPF */
            }
        }

        Method (NBAT, 1, NotSerialized)
        {
            If (BATP (Zero))
            {
                Notify (BAT0, Arg0)
            }
        }
    }

    Scope (\)
    {
        Name (MES4, Zero)
        Method (OEMS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                If ((MSOS () <= OSME))
                {
                    \_SB.WIDE = One
                }
                Else
                {
                    \_SB.WIDE = Zero
                }
            }

            SBRS (Arg0)
            \_SB.PCI0.SBRG.EC0.EC0S (Arg0)
            \_SB.SLPN = Arg0
            DIAG ((Arg0 + 0xD0))
            PPRJ (Arg0)
            \_SB.SLPT = Arg0
            If (Arg0)
            {
                STRP (One)
            }

            PRJS (Arg0)
            If ((Arg0 == 0x03))
            {
                \_SB.PCI0.SBRG.EC0.ST8E (0x12, 0xFF)
                \_SB.PCI0.SBRG.EC0.ST9E (0x12, 0x05, One)
            }

            ISMI (0x9D)
        }

        Method (OEMW, 1, NotSerialized)
        {
            ISMI (0x9E)
            \_SB.SLPT = Zero
            \_SB.PCI0.SBRG.EC0.EC0W (Arg0)
            If ((Arg0 == 0x04))
            {
                If ((MSOS () <= OSME))
                {
                    MES4 = 0x02
                }
                Else
                {
                    MES4 = Zero
                }
            }

            SBRW (Arg0)
            If ((Arg0 == 0x04))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            PRJW (Arg0)
            DIAG ((Arg0 + 0xF0))
        }
    }

    Scope (_SB.ATKD)
    {
        Method (AGFN, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (GNBF) /* \_SB_.GNBF */
            }

            Local0 = Zero
            OperationRegion (\PARM, SystemMemory, Arg0, 0x08)
            Field (PARM, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8
            }

            EROR = Zero
            STAS = One
            If ((MFUN == 0x02))
            {
                BSMI (Arg0)
                STAS &= 0xFE
            }

            Local0 = (MFUN & 0xF0)
            If ((Local0 == 0x10))
            {
                MF1X (Arg0, LEN, MFUN, SFUN)
            }

            If ((MFUN == 0x42))
            {
                MF42 (Arg0, SFUN, LEN)
                STAS &= 0xFE
            }

            If ((MFUN == One))
            {
                GVER (Arg0, LEN)
                STAS &= 0xFE
            }

            If ((MFUN == 0x30))
            {
                MF30 (Arg0, SFUN, LEN)
                STAS &= 0xFE
            }

            If ((STAS == One))
            {
                EROR = One
                STAS |= 0x02
            }

            STAS &= 0xFE
            STAS |= 0x80
            Return (Zero)
        }

        Method (GVER, 2, NotSerialized)
        {
            OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
            Field (FGVR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                APID,   16, 
                APRV,   32
            }

            Return (Zero)
        }

        Method (MF30, 3, NotSerialized)
        {
            OperationRegion (FM30, SystemMemory, Arg0, 0x08)
            Field (FM30, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8
            }

            Local0 = One
            If ((Arg1 == Zero))
            {
                Local0 = G30V (Arg0, Arg2)
            }

            If ((Arg1 == One))
            {
                Local0 = EC01 (Arg0, Arg2)
            }

            If ((Arg1 == 0x02))
            {
                Local0 = EC02 (Arg0, Arg2)
            }

            If (Local0)
            {
                EM30 = Local0
                SM30 |= 0x02
            }

            SM30 |= 0x80
            Return (Zero)
        }

        Method (G30V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F300, SystemMemory, Arg0, Arg1)
            Field (F300, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (EC01, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (FEC1, SystemMemory, Arg0, Arg1)
            Field (FEC1, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ECMD,   8, 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8
            }

            Local0 = ^^PCI0.SBRG.EC0.ECXT (ECMD, EDA1, EDA2, EDA3, EDA4, EDA5)
            EDA1 = DerefOf (Local0 [One])
            EDA2 = DerefOf (Local0 [0x02])
            EDA3 = DerefOf (Local0 [0x03])
            EDA4 = DerefOf (Local0 [0x04])
            EDA5 = DerefOf (Local0 [0x05])
            Return (DerefOf (Local0 [Zero]))
        }

        Method (EC02, 2, NotSerialized)
        {
            If ((Arg1 < 0x30))
            {
                Return (0x02)
            }

            OperationRegion (FEC2, SystemMemory, Arg0, Arg1)
            Field (FEC2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BUSN,   8, 
                PROT,   8, 
                DADD,   8, 
                DREG,   8, 
                DAT0,   8, 
                DAT1,   8, 
                BLEN,   8, 
                REVB,   8, 
                BLKK,   256
            }

            Local1 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x20){}
                }
            Local1 [Zero] = BLEN /* \_SB_.ATKD.EC02.BLEN */
            Local1 [One] = BLKK /* \_SB_.ATKD.EC02.BLKK */
            Local0 = ^^PCI0.SBRG.EC0.ECSB (BUSN, PROT, DADD, DREG, DAT0, DAT1, Local1)
            If ((DerefOf (Local0 [Zero]) == Zero))
            {
                DAT0 = DerefOf (Local0 [One])
                DAT1 = DerefOf (Local0 [0x02])
                BLEN = DerefOf (Local0 [0x03])
                BLKK = DerefOf (Local0 [0x04])
            }

            Local2 = DerefOf (Local0 [Zero])
            Local2 &= 0x3F
            Return (Local2)
        }

        Method (GENW, 1, NotSerialized)
        {
            RTCW = Zero
        }

        Method (BSMI, 1, Serialized)
        {
            BIPA = Arg0
            ISMI (0xA1)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (MF1X, 4, NotSerialized)
        {
            OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
            Field (FM1X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM1X,   8, 
                EM1X,   8
            }

            Local0 = One
            If ((Arg2 == 0x10))
            {
                Local0 = MF10 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x11))
            {
                Local0 = MF11 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x12))
            {
                Local0 = MF12 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x13))
            {
                Local0 = MF13 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x14))
            {
                Local0 = MF14 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x15))
            {
                Local0 = MF15 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x16))
            {
                Local0 = MF16 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x17))
            {
                Local0 = MF17 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x18))
            {
                Local0 = MF18 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x19))
            {
                Local0 = MF19 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x1F))
            {
                Local0 = MF1F (Arg0, Arg1, Arg3)
            }

            SM1X &= 0xFE
            If (Local0)
            {
                EM1X = Local0
                SM1X |= 0x02
            }

            SM1X |= 0x80
        }

        Method (MF10, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G10V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = SRTC (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G10V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F100, SystemMemory, Arg0, Arg1)
            Field (F100, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (SRTC, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F101, SystemMemory, Arg0, Arg1)
            Field (F101, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DLTM,   16
            }

            RTCW = DLTM /* \_SB_.ATKD.SRTC.DLTM */
            Return (Zero)
        }

        Method (MF11, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G11V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GBAT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = ASBR (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = ASBE (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = BTCR (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G11V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F110, SystemMemory, Arg0, Arg1)
            Field (F100, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GBAT, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F111, SystemMemory, Arg0, Arg1)
            Field (F111, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTTP,   8
            }

            BTNM = One
            BTTP = Zero
            Return (Zero)
        }

        Method (ASBR, 2, NotSerialized)
        {
            If ((Arg1 < 0x30))
            {
                Return (0x02)
            }

            OperationRegion (\F112, SystemMemory, Arg0, Arg1)
            Field (F112, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   16, 
                BLEN,   8, 
                BREV,   16, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            If ((BATN >= One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local0 = ^^PCI0.SBRG.EC0.SMBR (^^PCI0.SBRG.EC0.RDWD, ^^PCI0.SBRG.EC0.BADR, REGS)
                BDAT = DerefOf (Local0 [0x02])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local0 = ^^PCI0.SBRG.EC0.SMBW (^^PCI0.SBRG.EC0.WRWD, ^^PCI0.SBRG.EC0.BADR, REGS, 0x02, BDAT)
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x02))
            {
                Local0 = ^^PCI0.SBRG.EC0.SMBR (^^PCI0.SBRG.EC0.RDBL, ^^PCI0.SBRG.EC0.BADR, REGS)
                Name (BKUF, Buffer (0x20){})
                CreateDWordField (BKUF, Zero, DAT1)
                CreateDWordField (BKUF, 0x04, DAT2)
                CreateDWordField (BKUF, 0x08, DAT3)
                CreateDWordField (BKUF, 0x0C, DAT4)
                CreateDWordField (BKUF, 0x10, DAT5)
                CreateDWordField (BKUF, 0x14, DAT6)
                CreateDWordField (BKUF, 0x18, DAT7)
                CreateDWordField (BKUF, 0x1C, DAT8)
                BKUF = DerefOf (Local0 [0x02])
                BLK1 = DAT1 /* \_SB_.ATKD.ASBR.DAT1 */
                BLK2 = DAT2 /* \_SB_.ATKD.ASBR.DAT2 */
                BLK3 = DAT3 /* \_SB_.ATKD.ASBR.DAT3 */
                BLK4 = DAT4 /* \_SB_.ATKD.ASBR.DAT4 */
                BLK5 = DAT5 /* \_SB_.ATKD.ASBR.DAT5 */
                BLK6 = DAT6 /* \_SB_.ATKD.ASBR.DAT6 */
                BLK7 = DAT7 /* \_SB_.ATKD.ASBR.DAT7 */
                BLK8 = DAT8 /* \_SB_.ATKD.ASBR.DAT8 */
                BLEN = DerefOf (Local0 [One])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (ASBE, 2, Serialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F113, SystemMemory, Arg0, Arg1)
            Field (F113, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   8
            }

            If ((BATN > One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local2 = ^^PCI0.SBRG.EC0.RBEP (REGS)
                Local3 = (Local2 & 0xFF)
                BDAT = Local3
                Local2 >>= 0x08
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local2 = ^^PCI0.SBRG.EC0.WBEP (REGS, BDAT)
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (BTCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F114, SystemMemory, Arg0, Arg1)
            Field (F114, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BCDC,   8
            }

            SBTL (BCDC)
            Return (Zero)
        }

        Method (MF12, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G12V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GLDI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = LDCR (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G12V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F120, SystemMemory, Arg0, Arg1)
            Field (F120, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GLDI, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F121, SystemMemory, Arg0, Arg1)
            Field (F121, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDI0,   32, 
                LDI1,   32
            }

            Local0 = Zero
            Local0 |= 0x10
            Local0 |= 0x20
            LDI0 = Local0
            Return (Zero)
        }

        Method (LDCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F122, SystemMemory, Arg0, Arg1)
            Field (F122, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDNM,   8, 
                LCRT,   8
            }

            If ((LDNM == 0x04))
            {
                WLED (LCRT)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (MF13, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G13V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GTSI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GTSV (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GVSN (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = GVSV (Arg0, Arg1)
            }

            If ((Arg2 == 0x05))
            {
                Local0 = GFNN (Arg0, Arg1)
            }

            If ((Arg2 == 0x06))
            {
                Local0 = GFNS (Arg0, Arg1)
            }

            If ((Arg2 == 0x07))
            {
                Local0 = SFNS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G13V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F130, SystemMemory, Arg0, Arg1)
            Field (F130, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GTSI, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F131, SystemMemory, Arg0, Arg1)
            Field (F131, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                THRI,   32
            }

            Local0 = Zero
            Local0 |= One
            If ((CPUN >= One))
            {
                Local0 |= 0x0100
            }

            If ((CPUN >= 0x02))
            {
                Local0 |= 0x0200
            }

            If ((CPUN >= 0x03))
            {
                Local0 |= 0x0400
            }

            If ((CPUN >= 0x04))
            {
                Local0 |= 0x0800
            }

            THRI = Local0
            Return (Zero)
        }

        Method (GTSV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F132, SystemMemory, Arg0, Arg1)
            Field (F132, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                TSNM,   8, 
                TSVL,   8, 
                TSST,   8
            }

            TSST = Zero
            If ((TSNM == Zero))
            {
                TSVL = \_TZ.RTMP ()
                Return (Zero)
            }

            If ((TSNM == 0x08))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x09))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x0A))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x0B))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (GVSN, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F133, SystemMemory, Arg0, Arg1)
            Field (F133, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NMVS,   8
            }

            NMVS = Zero
            Return (Zero)
        }

        Method (GVSV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0B))
            {
                Return (0x02)
            }

            OperationRegion (\F134, SystemMemory, Arg0, Arg1)
            Field (F134, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VSNM,   8, 
                VSVL,   16
            }

            If ((VSNM > Zero))
            {
                Return (0x10)
            }

            Return (Zero)
        }

        Method (GFNN, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F135, SystemMemory, Arg0, Arg1)
            Field (F135, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NMFN,   32
            }

            NMFN = One
            Return (Zero)
        }

        Method (GFNS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0D))
            {
                Return (0x02)
            }

            OperationRegion (\F136, SystemMemory, Arg0, Arg1)
            Field (F136, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNNM,   8, 
                GFNS,   32
            }

            If (((FNNM == Zero) | (FNNM > One)))
            {
                Return (0x10)
            }

            Local0 = FNNM /* \_SB_.ATKD.GFNS.FNNM */
            GFNS = \_TZ.RFAN (Local0--)
            Return (Zero)
        }

        Method (SFNS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F137, SystemMemory, Arg0, Arg1)
            Field (F137, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNNB,   8, 
                FNSP,   8
            }

            If ((FNNB > One))
            {
                Return (0x10)
            }

            ^^PCI0.SBRG.EC0.SFNV (FNNB, FNSP)
            Return (Zero)
        }

        Method (MF14, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G14V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GNBT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GBTS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G14V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F140, SystemMemory, Arg0, Arg1)
            Field (F140, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GNBT, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F141, SystemMemory, Arg0, Arg1)
            Field (F141, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NBBT,   8
            }

            NBBT = 0x05
            Return (Zero)
        }

        Method (GBTS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F142, SystemMemory, Arg0, Arg1)
            Field (F142, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTST,   8
            }

            Name (BTTB, Package (0x05)
            {
                Package (0x03)
                {
                    0x0C, 
                    Zero, 
                    Zero
                }, 

                Package (0x03)
                {
                    0x0D, 
                    Zero, 
                    Zero
                }, 

                Package (0x03)
                {
                    0x0E, 
                    Zero, 
                    Zero
                }, 

                Package (0x03)
                {
                    0x0F, 
                    Zero, 
                    Zero
                }, 

                Package (0x03)
                {
                    0x15, 
                    Zero, 
                    Zero
                }
            })
            If ((BTNM > 0x05))
            {
                Return (0x10)
            }

            Local0 = BTNM /* \_SB_.ATKD.GBTS.BTNM */
            Local0--
            Local1 = DerefOf (BTTB [Local0])
            If ((DerefOf (Local1 [One]) == Zero))
            {
                Local2 = ^^PCI0.SBRG.EC0.RPIN (DerefOf (Local1 [Zero]))
            }

            If ((DerefOf (Local1 [One]) == One))
            {
                Local2 = RGPL (DerefOf (Local1 [Zero]))
            }

            If ((DerefOf (Local1 [One]) == 0x03)){}
            If ((DerefOf (Local1 [0x02]) == Local2))
            {
                BTST = Zero
            }
            Else
            {
                BTST = One
            }

            Return (Zero)
        }

        Method (MF15, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G15V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GLDB (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = SLDB (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GDPI (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = SODP (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G15V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F150, SystemMemory, Arg0, Arg1)
            Field (F150, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GLDB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F151, SystemMemory, Arg0, Arg1)
            Field (F151, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LCDB,   8, 
                MLDB,   8
            }

            LCDB = GPLV ()
            MLDB = 0x0B
            Return (Zero)
        }

        Method (SLDB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F152, SystemMemory, Arg0, Arg1)
            Field (F152, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LCDL,   8, 
                LTPE,   8
            }

            If ((LTPE == Zero))
            {
                If ((LCDL > 0x0B))
                {
                    Return (0x10)
                }

                SPLV (LCDL)
                Return (Zero)
            }

            If ((LTPE == One))
            {
                ^^PCI0.SBRG.EC0.SBRV (LCDL)
                Return (Zero)
            }

            Return (0x11)
        }

        Method (GDPI, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F153, SystemMemory, Arg0, Arg1)
            Field (F153, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ODPI,   32, 
                ODPC,   8
            }

            Local0 = Zero
            Local0 |= One
            Local0 |= 0x02
            ODPI = Local0
            BSMI (Arg0)
            Return (Zero)
        }

        Method (SODP, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F154, SystemMemory, Arg0, Arg1)
            Field (F154, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ODPM,   32
            }

            Local0 = Zero
            Local0 |= One
            Local0 |= 0x02
            Local0 &= ODPM
            If ((Local0 == ODPM))
            {
                SDSP (ODPM)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (MF16, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G16V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = SFBD (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = LCMD (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G16V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F160, SystemMemory, Arg0, Arg1)
            Field (F160, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (SFBD, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F161, SystemMemory, Arg0, Arg1)
            Field (F161, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NXBD,   8
            }

            If (OFBD (NXBD))
            {
                UHDB = NXBD /* \_SB_.ATKD.SFBD.NXBD */
                Return (Zero)
            }
            Else
            {
                Return (0x10)
            }
        }

        Method (LCMD, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (MF17, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G17V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GMDL (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GBSI (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GECI (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = GFII (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G17V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F170, SystemMemory, Arg0, Arg1)
            Field (F170, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GMDL, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F171, SystemMemory, Arg0, Arg1)
            Field (F171, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                MLEN,   8, 
                MDL1,   32, 
                MDL2,   32, 
                MDL3,   32, 
                MDL4,   32
            }

            MDL1 = Zero
            MDL2 = Zero
            MDL3 = Zero
            MDL4 = Zero
            Name (BBUF, Buffer (0x10){})
            CreateDWordField (BBUF, Zero, DAT1)
            CreateDWordField (BBUF, 0x04, DAT2)
            CreateDWordField (BBUF, 0x08, DAT3)
            CreateDWordField (BBUF, 0x0C, DAT4)
            Local0 = GBMN ()
            MLEN = SizeOf (Local0)
            BBUF = GBMN ()
            MDL1 = DAT1 /* \_SB_.ATKD.GMDL.DAT1 */
            MDL2 = DAT2 /* \_SB_.ATKD.GMDL.DAT2 */
            MDL3 = DAT3 /* \_SB_.ATKD.GMDL.DAT3 */
            MDL4 = DAT4 /* \_SB_.ATKD.GMDL.DAT4 */
            Return (Zero)
        }

        Method (GBSI, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F172, SystemMemory, Arg0, Arg1)
            Field (F172, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BLEN,   8, 
                BDL1,   32, 
                BDL2,   32, 
                BDL3,   32, 
                BDL4,   32
            }

            BDL1 = Zero
            BDL2 = Zero
            BDL3 = Zero
            BDL4 = Zero
            Name (BBUF, Buffer (0x10){})
            CreateDWordField (BBUF, Zero, DAT1)
            CreateDWordField (BBUF, 0x04, DAT2)
            CreateDWordField (BBUF, 0x08, DAT3)
            CreateDWordField (BBUF, 0x0C, DAT4)
            Local0 = GBRV ()
            BLEN = SizeOf (Local0)
            BBUF = GBRV ()
            BDL1 = DAT1 /* \_SB_.ATKD.GBSI.DAT1 */
            BDL2 = DAT2 /* \_SB_.ATKD.GBSI.DAT2 */
            BDL3 = DAT3 /* \_SB_.ATKD.GBSI.DAT3 */
            BDL4 = DAT4 /* \_SB_.ATKD.GBSI.DAT4 */
            Return (Zero)
        }

        Method (GECI, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F173, SystemMemory, Arg0, Arg1)
            Field (F173, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ELEN,   8, 
                EDL1,   32, 
                EDL2,   32, 
                EDL3,   32, 
                EDL4,   32
            }

            EDL1 = Zero
            EDL2 = Zero
            EDL3 = Zero
            EDL4 = Zero
            BSMI (Arg0)
            Return (Zero)
        }

        Method (GFII, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F174, SystemMemory, Arg0, Arg1)
            Field (F174, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SFII,   8
            }

            SFII = BECF /* \_SB_.BECF */
            Return (Zero)
        }

        Method (MF18, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G18V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GDVI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GDVS (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = SDPW (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G18V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F180, SystemMemory, Arg0, Arg1)
            Field (F180, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GDVI, 2, NotSerialized)
        {
            If ((Arg1 < 0x18))
            {
                Return (0x02)
            }

            OperationRegion (\F181, SystemMemory, Arg0, Arg1)
            Field (F181, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDI0,   32, 
                LDI1,   32
            }

            LDI0 = FEBL /* \_SB_.FEBL */
            Return (Zero)
        }

        Method (GDVS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F182, SystemMemory, Arg0, Arg1)
            Field (F182, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DNUM,   8, 
                DSTS,   8
            }

            Local0 = (One << DNUM) /* \_SB_.ATKD.GDVS.DNUM */
            If (((Local0 & FEBL) == Zero))
            {
                Return (0x10)
            }

            Return (Zero)
        }

        Method (SDPW, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F183, SystemMemory, Arg0, Arg1)
            Field (F183, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DNUM,   8, 
                DCTR,   8
            }

            Local0 = (One << DNUM) /* \_SB_.ATKD.SDPW.DNUM */
            If (((Local0 & FEBL) == Zero))
            {
                Return (0x10)
            }

            If ((DCTR > One))
            {
                Return (0x11)
            }

            Return (Zero)
        }

        Method (MF19, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G19V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = ACMS (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = CSIN (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G19V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F190, SystemMemory, Arg0, Arg1)
            Field (F190, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (ACMS, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (CSIN, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F192, SystemMemory, Arg0, Arg1)
            Field (F192, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                CMAX,   16
            }

            CMAX = 0xFF
            Return (Zero)
        }

        Method (NVIN, 2, NotSerialized)
        {
            OperationRegion (FM1F, SystemMemory, Arg0, Arg1)
            Field (FM1F, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                AM1F,   32
            }

            Return (ANVI (AM1F))
        }

        Method (BATF, 1, NotSerialized)
        {
            Local0 = GNBF /* \_SB_.GNBF */
            OperationRegion (FMAD, SystemMemory, Local0, 0x10)
            Field (FMAD, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                SM1X,   8, 
                EM1X,   8, 
                BATE,   8, 
                Offset (0x10)
            }

            MFUN = 0x1F
            SFUN = 0x14
            LEN = 0x10
            If (Arg0)
            {
                BATE = One
            }
            Else
            {
                BATE = Zero
            }

            EM1X = Zero
            SM1X = One
            MF1X (Local0, LEN, MFUN, SFUN)
        }

        Method (MF1F, 3, NotSerialized)
        {
            If ((Arg2 == 0x11))
            {
                Return (NVIN (Arg0, Arg1))
            }

            BSMI (Arg0)
            Return (Zero)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (OFBD, 1, NotSerialized)
        {
            Name (FBDT, Package (0x52)
            {
                0x88, 
                0x89, 
                0x8A, 
                0x8B, 
                0x8C, 
                0x8D, 
                0x8E, 
                0x8F, 
                0x70, 
                0x71, 
                0x72, 
                0x73, 
                0x74, 
                0x75, 
                0x76, 
                0x77, 
                0x78, 
                0x79, 
                0x7A, 
                0x7B, 
                0x7C, 
                0x7D, 
                0x7E, 
                0x7F, 
                0x60, 
                0x61, 
                0x62, 
                0x63, 
                0x64, 
                0x65, 
                0x66, 
                0x67, 
                0x91, 
                0x92, 
                0x93, 
                0x96, 
                0xE0, 
                0xE1, 
                0xE2, 
                0xE3, 
                0xE4, 
                0xE5, 
                0xE6, 
                0xE7, 
                0xE8, 
                0xE9, 
                0xEA, 
                0xEB, 
                0xEC, 
                0xED, 
                0xEE, 
                0xEF, 
                0xD0, 
                0xD1, 
                0xD2, 
                0xD3, 
                0xD4, 
                0xD5, 
                0xD6, 
                0xD7, 
                0xD8, 
                0xD9, 
                0xDA, 
                0xDB, 
                0xDC, 
                0xDD, 
                0xDE, 
                0xDF, 
                0xC0, 
                0xC1, 
                0xC2, 
                0xC3, 
                0xC4, 
                0xC5, 
                0xC6, 
                0xC7, 
                0xF1, 
                0xF2, 
                0xF3, 
                0xF6, 
                0xF7, 
                0xFA
            })
            Local0 = Match (FBDT, MEQ, Arg0, MTR, Zero, Zero)
            Local0++
            Return (Local0)
        }

        Method (GBRV, 0, NotSerialized)
        {
            Local0 = "329"
            Return (Local0)
        }

        Method (GBMN, 0, NotSerialized)
        {
            Local0 = "X555QG"
            Return (Local0)
        }

        Method (OGDP, 1, NotSerialized)
        {
            Local0 = Arg0
            Local1 = 0x02
            Return (Local1)
        }

        Method (RSID, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (OSDP, 2, NotSerialized)
        {
            Local0 = Arg0
            Local1 = Arg1
        }

        Method (MF42, 3, NotSerialized)
        {
            OperationRegion (FM42, SystemMemory, Arg0, 0x08)
            Field (FM42, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM42,   8, 
                EM42,   8
            }

            Local0 = One
            If ((Arg1 == One))
            {
                Local0 = SFBO (Arg0, Arg2)
            }

            If ((Arg1 == 0x02))
            {
                Local0 = SAOC (Arg0, Arg2)
            }

            If ((Arg1 == 0x03))
            {
                Local0 = GBST (Arg0, Arg2)
            }

            If (Local0)
            {
                EM42 = Local0
                SM42 |= 0x02
            }

            SM42 |= 0x80
            Return (Zero)
        }

        Method (SFBO, 2, NotSerialized)
        {
            OperationRegion (\F421, SystemMemory, Arg0, Arg1)
            Field (F421, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SOPT,   8
            }

            Return (Zero)
        }

        Method (SAOC, 2, NotSerialized)
        {
            OperationRegion (\F422, SystemMemory, Arg0, Arg1)
            Field (F422, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                CNTF,   8
            }

            Return (Zero)
        }

        Method (GBST, 2, NotSerialized)
        {
            OperationRegion (\F423, SystemMemory, Arg0, Arg1)
            Field (F423, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BOT1,   64, 
                BOT2,   64
            }

            BOT1 = TBOT /* \_SB_.TBOT */
            Local0 = RTC3 /* \_SB_.RTC3 */
            Local0 <<= 0x08
            Local0 += RTC2
            Local0 <<= 0x08
            Local0 += RTC1
            BOT2 = Local0
            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        OperationRegion (ECID, SystemIO, 0x0257, One)
        Field (ECID, ByteAcc, NoLock, Preserve)
        {
            EC4D,   8
        }

        OperationRegion (ECIC, SystemIO, 0x0258, One)
        Field (ECIC, ByteAcc, NoLock, Preserve)
        {
            EC4C,   8
        }

        OperationRegion (ECAD, SystemMemory, GNBF, 0x10)
        Field (ECAD, DWordAcc, NoLock, Preserve)
        {
            MFUN,   16, 
            SFUN,   16, 
            LEN,    16, 
            STAS,   8, 
            EROR,   8, 
            CMD,    8, 
            EDA1,   8, 
            EDA2,   8, 
            EDA3,   8, 
            EDA4,   8, 
            EDA5,   8, 
            Offset (0x10)
        }

        Method (WEIE, 0, Serialized)
        {
            EDA1 = One
            ECAC ()
            If ((EDA1 == 0xFF))
            {
                Return (Ones)
            }

            Return (Zero)
        }

        Method (WEOF, 0, Serialized)
        {
            EDA1 = 0x02
            ECAC ()
            If ((EDA1 == 0xFF))
            {
                Return (Ones)
            }

            Return (Zero)
        }

        Method (WEOE, 0, NotSerialized)
        {
            EDA1 = 0x03
            ECAC ()
            If ((EDA1 == 0xFF))
            {
                Return (Ones)
            }

            Return (Zero)
        }

        Method (ST83, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x83
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
            }

            Return (Ones)
        }

        Method (ST84, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x84
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST85, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x85
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
            }

            Return (Ones)
        }

        Method (ST86, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x86
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST87, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x87
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                If ((Arg0 == Zero))
                {
                    Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                }

                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST8E, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x8E
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
            }

            Return (Ones)
        }

        Method (ST95, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x95
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                If ((Arg0 == Zero))
                {
                    Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                }

                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST98, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x98
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST9E, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x9E
                EDA2 = Arg0
                EDA3 = Arg1
                EDA4 = Arg2
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STA8, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xA8
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
            }

            Return (Ones)
        }

        Method (ST9F, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x9F
                EDA2 = Arg0
                EDA3 = Arg1
                EDA4 = Arg2
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STA9, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xA9
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STB0, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                If ((WEOE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                EC4C = 0xB0
                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                EC4D = Arg0
                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STB1, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                If ((WEOE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                EC4C = 0xB1
                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                EC4D = Arg0
                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STB2, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                If ((WEOE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                EC4C = 0xB2
                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                EC4D = Arg0
                If ((WEIE () != Zero))
                {
                    Release (MU4T)
                    Return (Ones)
                }

                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (GBTT, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = EB0T /* \_SB_.PCI0.SBRG.EC0_.EB0T */
            }
            Else
            {
                Local0 = EB1T /* \_SB_.PCI0.SBRG.EC0_.EB1T */
            }

            Return (Local0)
        }

        Method (WCMD, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MUEC, 0xFFFF)
                CMD1 = Arg0
                Release (MUEC)
            }
        }

        Method (DLY0, 1, Serialized)
        {
            If (!ECAV ())
            {
                Return (Ones)
            }

            Local0 = Ones
            Acquire (MUEC, 0xFFFF)
            CDT1 = Arg0
            CDT2 = 0x6B
            CDT3 = Zero
            CMD1 = 0xBB
            Local1 = 0x7F
            While ((Local1 && CMD1))
            {
                Sleep (One)
                Local1--
            }

            If ((CMD1 == Zero))
            {
                Local0 = CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
            }

            Release (MUEC)
            Return (Local0)
        }

        Method (RRAM, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                Local0 = Arg0
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CMD = 0xFF
                EDA1 = 0x80
                EDA2 = Local0
                EDA3 = Local1
                ECAC ()
                Release (MU4T)
                Return (EDA1) /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
            }

            Return (Ones)
        }

        Method (WRAM, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                Local0 = Arg0
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CMD = 0xFF
                EDA1 = 0x81
                EDA2 = Local0
                EDA3 = Local1
                EDA4 = Arg1
                ECAC ()
                Release (MU4T)
                Return (One)
            }

            Return (Ones)
        }

        Method (STBR, 0, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            Local2 = Zero
            If ((VGAV & One))
            {
                Local0 = One
            }

            If (Local0)
            {
                Local2 = One
            }

            If (Local1)
            {
                ISMI (0x9A)
            }
            ElseIf ((Local2 == One))
            {
                If ((MSOS () != OSEG))
                {
                    ISMI (0x9A)
                }
                Else
                {
                    ISMI (0x9A)
                }
            }
            ElseIf ((Local2 == Zero))
            {
                ECCB ()
            }
            ElseIf ((Local2 == 0x02))
            {
                ISMI (0x9A)
            }
            Else
            {
            }
        }

        Method (ECCB, 0, Serialized)
        {
            If ((ACAP () || (MSOS () == OSVT)))
            {
                Local0 = LBTN /* \_SB_.LBTN */
            }
            Else
            {
                Local0 = LBT2 /* \_SB_.LBT2 */
            }

            Local1 = BRTI /* \_SB_.BRTI */
            Local1 <<= 0x04
            Local1 += Local0
            Local0 = DerefOf (PWAC [Local1])
            SADC (Local0)
        }

        Method (SBRV, 1, Serialized)
        {
            ST86 (Zero, Arg0)
        }

        Name (DECF, Zero)
        Method (SFNV, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                If ((DECF & One))
                {
                    Local0 = RRAM (0x0521)
                    Local0 |= 0x80
                    WRAM (0x0521, Local0)
                }

                If ((DECF & 0x02))
                {
                    Local0 = RRAM (0x0522)
                    Local0 |= 0x80
                    WRAM (0x0522, Local0)
                }

                DECF = Zero
                Return (Zero)
            }

            If ((Arg0 == One))
            {
                Local0 = RRAM (0x0521)
                Local0 &= 0x7F
                WRAM (0x0521, Local0)
                DECF |= One
                ST84 (Zero, Arg1)
                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                Local0 = RRAM (0x0522)
                Local0 &= 0x7F
                WRAM (0x0522, Local0)
                DECF |= 0x02
                ST84 (One, Arg1)
                Return (Zero)
            }

            Return (Zero)
        }

        Method (SADC, 1, Serialized)
        {
            Return (ST86 (Zero, Arg0))
        }

        Method (SPIN, 2, Serialized)
        {
            If (Arg1)
            {
                ST87 (0x20, Arg0)
            }
            Else
            {
                ST87 (0x40, Arg0)
            }

            Return (One)
        }

        Method (RPIN, 1, Serialized)
        {
            Local1 = ST87 (Zero, Arg0)
            Return (Local1)
        }

        Method (RBAT, 2, Serialized)
        {
            If (!ECAV ())
            {
                Return (Ones)
            }

            Acquire (MUEC, 0xFFFF)
            Local0 = 0x03
            While (Local0)
            {
                CDT2 = Arg0
                Local1 = Arg1
                Local1 <<= One
                Local1 += 0xDA
                CMD1 = Local1
                Local1 = 0x7F
                While ((CMD1 && Local1))
                {
                    Local1--
                    Sleep (One)
                }

                If ((CMD1 == Zero))
                {
                    Local1 = CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                    Local0 = Zero
                }
                Else
                {
                    Local1 = Ones
                    Local0--
                }
            }

            Release (MUEC)
            Return (Local1)
            Return (Ones)
        }

        Method (WBAT, 3, Serialized)
        {
            Local3 = (Arg0 | 0x80)
            If (!ECAV ())
            {
                Return (Ones)
            }

            Acquire (MUEC, 0xFFFF)
            Local0 = 0x03
            While (Local0)
            {
                CDT1 = Arg2
                CDT2 = Local3
                Local1 = Arg1
                Local1 <<= One
                Local1 += 0xDA
                CMD1 = Local1
                Local1 = 0x7F
                While ((CMD1 && Local1))
                {
                    Local1--
                    Sleep (One)
                }
            }

            Release (MUEC)
            Return (Local1)
            Return (Ones)
        }

        Method (FNCT, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MUEC, 0xFFFF)
                CDT2 = Arg0
                CDT1 = Arg1
                CMD1 = 0xC4
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                Release (MUEC)
            }
        }

        Name (WRQK, 0x02)
        Name (RDQK, 0x03)
        Name (SDBT, 0x04)
        Name (RCBT, 0x05)
        Name (WRBT, 0x06)
        Name (RDBT, 0x07)
        Name (WRWD, 0x08)
        Name (RDWD, 0x09)
        Name (WRBL, 0x0A)
        Name (RDBL, 0x0B)
        Name (PCLL, 0x0C)
        Name (GOOD, Zero)
        Name (UKER, 0x07)
        Name (DAER, 0x10)
        Name (CMDN, 0x12)
        Name (UKE2, 0x13)
        Name (DADN, 0x17)
        Name (SBTO, 0x18)
        Name (USPT, 0x19)
        Name (SBBY, 0x1A)
        Method (SWTC, 1, Serialized)
        {
            Local0 = UKER /* \_SB_.PCI0.SBRG.EC0_.UKER */
            Local1 = 0x03
            While ((Local0 && Local1))
            {
                Local2 = 0x23
                While (Local2)
                {
                    If (PRTC)
                    {
                        Sleep (One)
                        Local2--
                    }
                    Else
                    {
                        Local2 = Zero
                        Local0 = SSTS /* \_SB_.PCI0.SBRG.EC0_.SSTS */
                    }
                }

                If (Local0)
                {
                    PRTC = Zero
                    Local1--
                    If (Local1)
                    {
                        Sleep (One)
                        PRTC = Arg0
                    }
                }
            }

            Return (Local0)
        }

        Method (SMBR, 3, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If (!ECAV ())
            {
                Return (Local0)
            }

            If ((Arg0 != RDBL))
            {
                If ((Arg0 != RDWD))
                {
                    If ((Arg0 != RDBT))
                    {
                        If ((Arg0 != RCBT))
                        {
                            If ((Arg0 != RDQK))
                            {
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            Acquire (MUEC, 0xFFFF)
            Local1 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
            Local2 = Zero
            While ((Local1 != Zero))
            {
                Stall (0x0A)
                Local2++
                If ((Local2 > 0x03E8))
                {
                    Local0 [Zero] = SBBY /* \_SB_.PCI0.SBRG.EC0_.SBBY */
                    Local1 = Zero
                }
                Else
                {
                    Local1 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                }
            }

            If ((Local2 <= 0x03E8))
            {
                Local3 = (Arg1 << One)
                Local3 |= One
                ADDR = Local3
                If ((Arg0 != RDQK))
                {
                    If ((Arg0 != RCBT))
                    {
                        CMDB = Arg2
                    }
                }

                BDAT = Zero
                PRTC = Arg0
                Local0 [Zero] = SWTC (Arg0)
                If ((DerefOf (Local0 [Zero]) == Zero))
                {
                    If ((Arg0 == RDBL))
                    {
                        Local0 [One] = BCNT /* \_SB_.PCI0.SBRG.EC0_.BCNT */
                        Local0 [0x02] = BDAT /* \_SB_.PCI0.SBRG.EC0_.BDAT */
                    }

                    If ((Arg0 == RDWD))
                    {
                        Local0 [One] = 0x02
                        Local0 [0x02] = DT2B /* \_SB_.PCI0.SBRG.EC0_.DT2B */
                    }

                    If ((Arg0 == RDBT))
                    {
                        Local0 [One] = One
                        Local0 [0x02] = DAT0 /* \_SB_.PCI0.SBRG.EC0_.DAT0 */
                    }

                    If ((Arg0 == RCBT))
                    {
                        Local0 [One] = One
                        Local0 [0x02] = DAT0 /* \_SB_.PCI0.SBRG.EC0_.DAT0 */
                    }
                }
            }

            Release (MUEC)
            Return (Local0)
        }

        Method (SMBW, 5, Serialized)
        {
            Local0 = Package (0x01)
                {
                    0x07
                }
            If (!ECAV ())
            {
                Return (Local0)
            }

            If ((Arg0 != WRBL))
            {
                If ((Arg0 != WRWD))
                {
                    If ((Arg0 != WRBT))
                    {
                        If ((Arg0 != SDBT))
                        {
                            If ((Arg0 != WRQK))
                            {
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            Acquire (MUEC, 0xFFFF)
            Local1 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
            Local2 = Zero
            While ((Local1 != Zero))
            {
                Stall (0x0A)
                Local2++
                If ((Local2 > 0x03E8))
                {
                    Local0 [Zero] = SBBY /* \_SB_.PCI0.SBRG.EC0_.SBBY */
                    Local1 = Zero
                }
                Else
                {
                    Local1 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                }
            }

            If ((Local2 <= 0x03E8))
            {
                BDAT = Zero
                Local3 = (Arg1 << One)
                ADDR = Local3
                If ((Arg0 != WRQK))
                {
                    If ((Arg0 != SDBT))
                    {
                        CMDB = Arg2
                    }
                }

                If ((Arg0 == WRBL))
                {
                    BCNT = Arg3
                    BDAT = Arg4
                }

                If ((Arg0 == WRWD))
                {
                    DT2B = Arg4
                }

                If ((Arg0 == WRBT))
                {
                    DAT0 = Arg4
                }

                If ((Arg0 == SDBT))
                {
                    DAT0 = Arg4
                }

                PRTC = Arg0
                Local0 [Zero] = SWTC (Arg0)
            }

            Release (MUEC)
            Return (Local0)
        }

        Mutex (MUEP, 0x00)
        Method (RBEP, 1, NotSerialized)
        {
            Local1 = 0xFFFF
            Acquire (MUEP, 0xFFFF)
            Local3 = RRAM (0x0620)
            Local4 = (Local3 & 0x7F)
            WRAM (0x0620, Local4)
            Local2 = 0x10
            Local1 = 0x10
            While (((Local1 == 0x10) & (Local2 != Zero)))
            {
                SMBW (WRWD, BADR, Zero, 0x02, 0x0635)
                SMBW (WRWD, BADR, Zero, 0x02, 0x0606)
                Local0 = SMBR (RDBT, 0x50, Arg0)
                Local1 = DerefOf (Local0 [Zero])
                Local2--
            }

            WRAM (0x0620, Local3)
            Local1 <<= 0x08
            Local1 |= DerefOf (Local0 [0x02])
            Release (MUEP)
            Return (Local1)
        }

        Method (WBEP, 2, NotSerialized)
        {
            Local1 = 0xFFFF
            Acquire (MUEP, 0xFFFF)
            Local3 = RRAM (0x0620)
            Local4 = (Local3 & 0x7F)
            WRAM (0x0620, Local4)
            Local2 = 0x10
            Local1 = 0x10
            While (((Local1 == 0x10) & (Local2 != Zero)))
            {
                SMBW (WRWD, BADR, Zero, 0x02, 0x0635)
                SMBW (WRWD, BADR, Zero, 0x02, 0x0606)
                Local0 = SMBW (WRBT, 0x50, Arg0, One, Arg1)
                Local1 = DerefOf (Local0 [Zero])
                Local2--
            }

            WRAM (0x0620, Local3)
            Release (MUEP)
            Return (Local1)
        }

        Method (ECXT, 6, NotSerialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                Local0 = Package (0x06)
                    {
                        0x10, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                CMD = Arg0
                EDA1 = Arg1
                EDA2 = Arg2
                EDA3 = Arg3
                EDA4 = Arg4
                EDA5 = Arg5
                ECAC ()
                Local0 [Zero] = CMD /* \_SB_.PCI0.SBRG.EC0_.CMD_ */
                Local0 [One] = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Local0 [0x02] = EDA2 /* \_SB_.PCI0.SBRG.EC0_.EDA2 */
                Local0 [0x03] = EDA3 /* \_SB_.PCI0.SBRG.EC0_.EDA3 */
                Local0 [0x04] = EDA4 /* \_SB_.PCI0.SBRG.EC0_.EDA4 */
                Local0 [0x05] = EDA5 /* \_SB_.PCI0.SBRG.EC0_.EDA5 */
                Release (MU4T)
                Return (Local0)
            }
        }

        Method (ECSB, 7, NotSerialized)
        {
            Local1 = Package (0x05)
                {
                    0x11, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Buffer (0x20){}
                }
            If ((Arg0 > One))
            {
                Return (Local1)
            }

            If (ECAV ())
            {
                Acquire (MUEC, 0xFFFF)
                If ((Arg0 == Zero))
                {
                    Local0 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                }
                Else
                {
                    Local0 = PRT2 /* \_SB_.PCI0.SBRG.EC0_.PRT2 */
                }

                Local2 = Zero
                While ((Local0 != Zero))
                {
                    Stall (0x0A)
                    Local2++
                    If ((Local2 > 0x03E8))
                    {
                        Local1 [Zero] = SBBY /* \_SB_.PCI0.SBRG.EC0_.SBBY */
                        Local0 = Zero
                    }
                    ElseIf ((Arg0 == Zero))
                    {
                        Local0 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                    }
                    Else
                    {
                        Local0 = PRT2 /* \_SB_.PCI0.SBRG.EC0_.PRT2 */
                    }
                }

                If ((Local2 <= 0x03E8))
                {
                    If ((Arg0 == Zero))
                    {
                        ADDR = Arg2
                        CMDB = Arg3
                        If (((Arg1 == 0x0A) || (Arg1 == 0x0B)))
                        {
                            BCNT = DerefOf (Arg6 [Zero])
                            BDAT = DerefOf (Arg6 [One])
                        }
                        Else
                        {
                            DAT0 = Arg4
                            DAT1 = Arg5
                        }

                        PRTC = Arg1
                    }
                    Else
                    {
                        ADD2 = Arg2
                        CMD2 = Arg3
                        If (((Arg1 == 0x0A) || (Arg1 == 0x0B)))
                        {
                            BCN2 = DerefOf (Arg6 [Zero])
                            BDA2 = DerefOf (Arg6 [One])
                        }
                        Else
                        {
                            DA20 = Arg4
                            DA21 = Arg5
                        }

                        PRT2 = Arg1
                    }

                    Local0 = 0x7F
                    If ((Arg0 == Zero))
                    {
                        While (PRTC)
                        {
                            Sleep (One)
                            Local0--
                        }
                    }
                    Else
                    {
                        While (PRT2)
                        {
                            Sleep (One)
                            Local0--
                        }
                    }

                    If (Local0)
                    {
                        If ((Arg0 == Zero))
                        {
                            Local0 = SSTS /* \_SB_.PCI0.SBRG.EC0_.SSTS */
                            Local1 [One] = DAT0 /* \_SB_.PCI0.SBRG.EC0_.DAT0 */
                            Local1 [0x02] = DAT1 /* \_SB_.PCI0.SBRG.EC0_.DAT1 */
                            Local1 [0x03] = BCNT /* \_SB_.PCI0.SBRG.EC0_.BCNT */
                            Local1 [0x04] = BDAT /* \_SB_.PCI0.SBRG.EC0_.BDAT */
                        }
                        Else
                        {
                            Local0 = SST2 /* \_SB_.PCI0.SBRG.EC0_.SST2 */
                            Local1 [One] = DA20 /* \_SB_.PCI0.SBRG.EC0_.DA20 */
                            Local1 [0x02] = DA21 /* \_SB_.PCI0.SBRG.EC0_.DA21 */
                            Local1 [0x03] = BCN2 /* \_SB_.PCI0.SBRG.EC0_.BCN2 */
                            Local1 [0x04] = BDA2 /* \_SB_.PCI0.SBRG.EC0_.BDA2 */
                        }

                        Local0 &= 0x1F
                        If (Local0)
                        {
                            Local0 += 0x10
                        }

                        Local1 [Zero] = Local0
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }
                }

                Release (MUEC)
            }

            Return (Local1)
        }

        Method (TPSW, 1, NotSerialized)
        {
            Local0 = (Arg0 & One)
            If (Local0)
            {
                ECXT (0xB6, 0xB8, One, One, Zero, Zero)
            }
            Else
            {
                ECXT (0xB6, 0xB8, One, 0x02, Zero, Zero)
            }
        }

        Method (TPST, 0, NotSerialized)
        {
            Local0 = ECXT (0xB6, 0xB8, 0x02, Zero, Zero, Zero)
            Local1 = DerefOf (Local0 [One])
            If ((Local1 == Zero))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (LBSW, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                ECXT (0xB6, 0xB9, One, Zero, Zero, Zero)
            }
            Else
            {
                ECXT (0xB6, 0xB9, 0x02, Zero, Zero, Zero)
            }
        }

        Method (LBST, 0, NotSerialized)
        {
            Local0 = RRAM (0x044A)
            Local0 &= 0x03
            Return (Local0)
        }

        Method (ECAC, 0, NotSerialized)
        {
            BIPA = GNBF /* \_SB_.GNBF */
            MFUN = 0x30
            SFUN = One
            LEN = 0x10
            EROR = Zero
            STAS = One
            ISMI (0xA1)
        }

        Method (CSEE, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = Arg0
                EDA1 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (SCTF, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xB3
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
    }

    Scope (_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 = (0x0100 - Local0)
                Local0 *= 0x0A
                Local0 = (0x0AAC - Local0)
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (CELC, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Divide (Local0, 0x0A, Local1, Local0)
            Return (Local0)
        }

        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                RCRT ()
                Return (KELV (\_SB.TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > \_SB.TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Return (KELV (Local0))
            }

            Name (_PSL, Package (0x04)  // _PSL: Passive List
            {
                \_PR.P000, 
                \_PR.P001, 
                \_PR.P002, 
                \_PR.P003
            })
            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1) /* \TC1_ */
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2) /* \TC2_ */
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                RPSV ()
                If (PLCY)
                {
                    Return (KELV (\_SB.PPSV))
                }
                Else
                {
                    Return (KELV (\_SB.TPSV))
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Zero
                Notify (THRM, 0x81) // Thermal Trip Point Change
            }
        }
    }

    Scope (_TZ)
    {
        Name (ATMP, 0x3C)
        Name (LTMP, 0x3C)
        Name (FANS, Zero)
        Method (RTMP, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECPU
                If ((Local0 < 0x80))
                {
                    LTMP = Local0
                }
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (RCRT, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECRT
                If ((Local0 < 0x80))
                {
                    \_SB.TCRT = Local0
                }
            }
        }

        Method (RPSV, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.EPSV
                If ((Local0 < 0x80))
                {
                    \_SB.TPSV = Local0
                }
            }
        }

        Method (RFAN, 1, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ST83 (Arg0)
                If ((Local0 == 0xFF))
                {
                    Return (Local0)
                }

                Local0 = \_SB.PCI0.SBRG.EC0.TACH (Arg0)
                Divide (Local0, 0x64, Local1, Local0)
                Local0 += One
                If ((Local0 <= 0x3C))
                {
                    FANS = Local0
                }
                Else
                {
                    Local0 = FANS /* \_TZ_.FANS */
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (RFSE, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local1 = \_SB.PCI0.SBRG.EC0.ST83 (Zero)
                If ((Local1 < 0x80))
                {
                    If ((Local1 < 0x0A))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                ElseIf ((Local1 < 0xF5))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = 0x03
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (TCHG, 0, NotSerialized)
        {
        }

        Method (THDL, 0, NotSerialized)
        {
        }

        Method (TMSS, 1, NotSerialized)
        {
        }

        Method (TMSW, 1, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (PWAC, Buffer (0x40)
        {
            /* 0000 */  0x33, 0x40, 0x4D, 0x5A, 0x67, 0x73, 0x80, 0x8D,  // 3@MZgs..
            /* 0008 */  0xA7, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
            /* 0010 */  0x21, 0x2E, 0x3B, 0x48, 0x55, 0x61, 0x6E, 0x7B,  // !.;HUan{
            /* 0018 */  0x9A, 0xC5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
            /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
            /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
            /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
            /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
        })
        Name (F8FG, Zero)
        Name (BLCT, Zero)
        Method (ACPS, 0, Serialized)
        {
            Return ((GPWS () & One))
        }

        Method (DCPS, 1, Serialized)
        {
            Local0 = GPWS ()
            If (Arg0)
            {
                Local0 &= 0x04
            }
            Else
            {
                Local0 &= 0x02
            }

            If (Local0)
            {
                Local0 = One
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GPWS, 0, Serialized)
        {
            Local0 = EPWS /* \_SB_.PCI0.SBRG.EC0_.EPWS */
            Return (Local0)
        }

        Method (BCHG, 1, Serialized)
        {
            If (Arg0)
            {
                Local0 = EB1S /* \_SB_.PCI0.SBRG.EC0_.EB1S */
                Local0 &= 0xFF
                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x02
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
            Else
            {
                Local0 = EB0S /* \_SB_.PCI0.SBRG.EC0_.EB0S */
                Local0 &= 0xFF
                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x02
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
        }

        Method (BCLE, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local0 = Ones
                    Local1 = EB1S /* \_SB_.PCI0.SBRG.EC0_.EB1S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = One
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = One
                        }
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local0 = Ones
                    Local1 = EB0S /* \_SB_.PCI0.SBRG.EC0_.EB0S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = One
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = One
                        }
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Method (CHBT, 1, Serialized)
        {
            If (ECAV ())
            {
                Local1 = GBTT (Arg0)
                If ((Local1 == 0xFF))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = (Local1 & 0x10)
                    If (Local0)
                    {
                        Local0 = One
                    }
                }
            }
            Else
            {
                Local0 = DCTP /* \_SB_.DCTP */
            }

            Return (Local0)
        }

        Method (RTAH, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local2 = Acquire (CMUT, 0x00C8)
                If ((Local2 == Zero))
                {
                    CRAH = 0x09
                    Local0 = THH0 /* \_SB_.PCI0.SBRG.EC0_.THH0 */
                    Local0 <<= 0x08
                    Local1 = THL0 /* \_SB_.PCI0.SBRG.EC0_.THL0 */
                    Local0 |= Local1
                    Release (CMUT)
                }
            }
            ElseIf ((Arg0 == One))
            {
                Local2 = Acquire (CMUT, 0x00C8)
                If ((Local2 == Zero))
                {
                    CRAH = 0x09
                    Local0 = THH1 /* \_SB_.PCI0.SBRG.EC0_.THH1 */
                    Local0 <<= 0x08
                    Local1 = THL1 /* \_SB_.PCI0.SBRG.EC0_.THL1 */
                    Local0 |= Local1
                    Release (CMUT)
                }
            }
            Else
            {
                Local0 = 0xFFFF
            }

            Return (Local0)
        }

        Method (TACH, 1, Serialized)
        {
            If (ECAV ())
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = RTAH (Zero)
                        Break
                    }
                    Case (One)
                    {
                        Local0 = RTAH (One)
                        Break
                    }
                    Default
                    {
                        Return (Ones)
                    }

                }

                Local0 *= 0x02
                If ((Local0 != Zero))
                {
                    Divide (0x0041CDB4, Local0, Local1, Local0)
                    Return (Local0)
                }
                Else
                {
                    Return (Ones)
                }
            }
            Else
            {
                Return (Ones)
            }
        }

        Name (HKFG, Zero)
        Method (EC0S, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
            If (((Arg0 == 0x03) || (Arg0 == 0x04))){}
            If ((Arg0 == 0x05)){}
            If ((Arg0 > 0x04)){}
            HKFG = HKEN /* \_SB_.PCI0.SBRG.EC0_.HKEN */
        }

        Method (EC0W, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
            If ((Arg0 <= 0x04))
            {
                DCPF = DCPS (Zero)
                Local0 = ACPS ()
                If ((Local0 != ACPF))
                {
                    ACPF = ACPS ()
                }
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04))){}
            If ((Arg0 == 0x05)){}
            HKEN = HKFG /* \_SB_.PCI0.SBRG.EC0_.HKFG */
            If ((WOLO & One))
            {
                Local0 = 0x0580
                Local0 += Zero
                Local1 = RRAM (Local0)
                Local1 |= 0x05
                WRAM (Local0, Local1)
            }

            If ((DSYN & One))
            {
                ST9F (0x2B, 0x20, 0x20)
            }
        }

        Name (FHKM, One)
        Method (FHKW, 0, Serialized)
        {
            While (!FHKM)
            {
                Sleep (0x0A)
            }

            FHKM = Zero
        }

        Method (FHKS, 0, Serialized)
        {
            FHKM = One
        }

        Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x52)
            }
        }

        Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x53)
            }
        }

        Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x54)
            }
        }

        Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x55)
            }
        }

        Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x56)
            }
        }

        Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (SLPB, 0x80) // Status Change
        }

        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                Notify (ASHS, 0x88) // Device-Specific
            }
            ElseIf ((^^^^ATKD.WAPF & 0x04))
            {
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x88)
                }
            }
            Else
            {
                Local0 = OHWR ()
                If ((Local0 & 0x02))
                {
                    If ((Local0 & One))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If ((^^^^ATKD.WAPF & One))
                    {
                        If ((WLDP && BTDP))
                        {
                            Local0 = WRST /* \_SB_.WRST */
                            Local0 |= (BRST << One)
                            Local0++
                            If ((Local0 > 0x03))
                            {
                                Local0 = Zero
                            }

                            Local1 = DerefOf (WBTL [Local0])
                            If ((Local1 == Zero))
                            {
                                ^^^^ATKD.IANE (0x74)
                                OWLD (Zero)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                            }

                            If ((Local1 == One))
                            {
                                ^^^^ATKD.IANE (0x73)
                                OWLD (One)
                                Sleep (0x0DAC)
                                OBTD (One)
                            }

                            If ((Local1 == 0x02))
                            {
                                ^^^^ATKD.IANE (0x74)
                                OWLD (Zero)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                ^^^^ATKD.IANE (0x74)
                                OWLD (Zero)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                            }
                        }
                        ElseIf (WLDP)
                        {
                            ^^^^ATKD.IANE (0x5D)
                        }
                        ElseIf (BTDP)
                        {
                            If (BRST)
                            {
                                OBTD (Zero)
                                ^^^^ATKD.IANE (0x7E)
                            }
                            Else
                            {
                                OBTD (One)
                                ^^^^ATKD.IANE (0x7D)
                            }
                        }
                    }
                    ElseIf ((WLDP && BTDP))
                    {
                        Local0 = WRST /* \_SB_.WRST */
                        Local0 |= (BRST << One)
                        Local0++
                        If ((Local0 > 0x03))
                        {
                            Local0 = Zero
                        }

                        Local1 = DerefOf (WBTL [Local0])
                        If ((Local1 == Zero))
                        {
                            OWLD (Zero)
                            ^^^^ATKD.IANE (0x5F)
                            Sleep (0x0DAC)
                            OBTD (Zero)
                            ^^^^ATKD.IANE (0x7E)
                        }

                        If ((Local1 == One))
                        {
                            OWLD (One)
                            ^^^^ATKD.IANE (0x5E)
                            Sleep (0x0DAC)
                            OBTD (Zero)
                            ^^^^ATKD.IANE (0x7E)
                        }

                        If ((Local1 == 0x02))
                        {
                            OWLD (Zero)
                            ^^^^ATKD.IANE (0x5F)
                            Sleep (0x0DAC)
                            OBTD (One)
                            ^^^^ATKD.IANE (0x7D)
                        }

                        If ((Local1 == 0x03))
                        {
                            OWLD (One)
                            ^^^^ATKD.IANE (0x5E)
                            Sleep (0x0DAC)
                            OBTD (One)
                            ^^^^ATKD.IANE (0x7D)
                        }
                    }
                    ElseIf (WLDP)
                    {
                        If (WRST)
                        {
                            OWLD (Zero)
                            ^^^^ATKD.IANE (0x5F)
                        }
                        Else
                        {
                            OWLD (One)
                            ^^^^ATKD.IANE (0x5E)
                        }
                    }
                    ElseIf (BTDP)
                    {
                        If (BRST)
                        {
                            OBTD (Zero)
                            ^^^^ATKD.IANE (0x7E)
                        }
                        Else
                        {
                            OBTD (One)
                            ^^^^ATKD.IANE (0x7D)
                        }
                    }
                }
                Else
                {
                    If (WLDP){}
                    If ((WLDP && BTDP))
                    {
                        Sleep (0x0DAC)
                    }

                    If (BTDP)
                    {
                        ^^^^ATKD.IANE (0x7E)
                    }
                }
            }
        }

        Name (WBTL, Package (0x04)
        {
            Zero, 
            One, 
            0x02, 
            0x03
        })
        Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x50)
            }
        }

        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x51)
            }
        }

        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSVT))
            {
                Local0 = LBTN /* \_SB_.LBTN */
                If (^^^VGA.PRST ())
                {
                    ^^^VGA.DWBL ()
                }

                If (ATKP)
                {
                    If ((MSOS () >= OSW8)){}
                    Else
                    {
                        If ((Local0 > Zero))
                        {
                            Local0--
                        }

                        If ((Local0 > 0x0A))
                        {
                            Local0 = 0x0A
                        }

                        LBTN = Local0
                        ^^^^ATKD.IANE ((Local0 + 0x20))
                    }
                }
            }
            ElseIf (ACPF)
            {
                If ((LBTN > Zero))
                {
                    LBTN--
                }

                If ((LBTN > 0x0A))
                {
                    LBTN = 0x0A
                }

                STBR ()
                If (ATKP)
                {
                    ^^^^ATKD.IANE ((LBTN + 0x20))
                }
            }
            Else
            {
                If ((LBT2 > Zero))
                {
                    LBT2--
                }

                If ((LBT2 > 0x0A))
                {
                    LBT2 = 0x0A
                }

                STBR ()
                If (ATKP)
                {
                    ^^^^ATKD.IANE ((LBT2 + 0x20))
                }
            }

            Return (One)
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSVT))
            {
                Local0 = LBTN /* \_SB_.LBTN */
                If (^^^VGA.PRST ())
                {
                    ^^^VGA.UPBL ()
                }

                If (ATKP)
                {
                    If ((MSOS () >= OSW8)){}
                    Else
                    {
                        If ((Local0 < 0x0A))
                        {
                            Local0++
                        }
                        Else
                        {
                            Local0 = 0x0A
                        }

                        LBTN = Local0
                        ^^^^ATKD.IANE ((Local0 + 0x10))
                    }
                }
            }
            ElseIf (ACPF)
            {
                If ((LBTN < 0x0A))
                {
                    LBTN++
                }
                Else
                {
                    LBTN = 0x0A
                }

                STBR ()
                If (ATKP)
                {
                    ^^^^ATKD.IANE ((LBTN + 0x10))
                }
            }
            Else
            {
                If ((LBT2 < 0x0A))
                {
                    LBT2++
                }
                Else
                {
                    LBT2 = 0x0A
                }

                STBR ()
                If (ATKP)
                {
                    ^^^^ATKD.IANE ((LBT2 + 0x10))
                }
            }

            Return (One)
        }

        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((BLCT == Zero))
            {
                Local0 = One
                Local0 = RPIN (0x72)
                Local0 ^= One
                SPIN (0x72, Local0)
                If (ATKP)
                {
                    Local0 = (0x34 - Local0)
                    ^^^^ATKD.IANE (Local0)
                }
            }
            ElseIf ((BLCT == One))
            {
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x35)
                }
            }
        }

        Method (_Q11, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                If ((F8FG == Zero))
                {
                    F8FG = One
                    STB2 (0xE0)
                    STB2 (0x5B)
                }

                STB2 (0x19)
                STB2 (0x99)
                Return (One)
            }

            FHKW ()
            Local0 = ADVG ()
            If (NATK ())
            {
                If ((Local0 < 0x08))
                {
                    Local1 = (Local0 + 0x60)
                }
                ElseIf ((Local0 < 0x10))
                {
                    Local1 = (Local0 - 0x08)
                    Local1 += 0x8C
                }
                ElseIf ((Local0 < 0x20))
                {
                    Local1 = (Local0 & 0x07)
                    Local1 += 0xA0
                }
                ElseIf ((Local0 < 0x40))
                {
                    Switch (ToInteger (Local0))
                    {
                        Case (0x20)
                        {
                            Local1 = 0xD0
                        }
                        Case (0x21)
                        {
                            Local1 = 0xD1
                        }
                        Case (0x22)
                        {
                            Local1 = 0xD2
                        }
                        Case (0x24)
                        {
                            Local1 = 0xD3
                        }
                        Case (0x28)
                        {
                            Local1 = 0xD4
                        }
                        Case (0x30)
                        {
                            Local1 = 0xD5
                        }

                    }
                }

                If (ATKP)
                {
                    If ((Local1 != 0x60))
                    {
                        ^^^^ATKD.IANE (Local1)
                    }
                }
                Else
                {
                    SWHG (Local0)
                }
            }
            Else
            {
                SWHG (Local0)
            }

            FHKS ()
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (!(DSYN & One))
            {
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x6B)
                }
            }
            ElseIf (ATKP)
            {
                ^^^^ATKD.IANE (0x6F)
            }
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x20)
                STB2 (0xE0)
                STB2 (0xA0)
                Return (Zero)
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0x32)
            }

            Return (Zero)
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x2E)
                STB2 (0xE0)
                STB2 (0xAE)
                Return (Zero)
            }

            If ((AVOL < 0x0F))
            {
                AVOL++
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0x31)
            }

            Return (Zero)
        }

        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x30)
                STB2 (0xE0)
                STB2 (0xB0)
                Return (Zero)
            }

            If ((AVOL > Zero))
            {
                AVOL--
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0x30)
            }

            Return (Zero)
        }

        Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x45)
            }
        }

        Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x43)
            }
        }

        Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x40)
            }
        }

        Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x41)
            }
        }

        Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x5C)
            }
        }

        Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x99)
            }
        }

        Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xB5)
            }
        }

        Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x84)
            }
        }

        Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x5C)
            }
        }

        Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = OHWR ()
            If ((Local0 & 0x02))
            {
                If ((^^^^ATKD.WAPF & 0x04))
                {
                    If (ATKP)
                    {
                        If ((Local0 & One))
                        {
                            ^^^^ATKD.IANE (0x80)
                        }
                        Else
                        {
                            ^^^^ATKD.IANE (0x81)
                        }
                    }
                }
                ElseIf ((^^^^ATKD.WAPF & One))
                {
                    If ((Local0 & One))
                    {
                        If (WLDP)
                        {
                            If ((WRPS == One))
                            {
                                ^^^^ATKD.IANE (0x5E)
                            }
                            Else
                            {
                                ^^^^ATKD.IANE (0x5F)
                            }
                        }

                        If ((WLDP && BTDP))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BTDP)
                        {
                            If (BRPS)
                            {
                                OBTD (One)
                                ^^^^ATKD.IANE (0x7D)
                            }
                            Else
                            {
                                OBTD (Zero)
                                ^^^^ATKD.IANE (0x7E)
                            }
                        }
                    }
                    Else
                    {
                        If (WLDP)
                        {
                            WRPS = WRST /* \_SB_.WRST */
                            ^^^^ATKD.IANE (0x5F)
                        }

                        If ((WLDP && BTDP))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BTDP)
                        {
                            BRPS = BRST /* \_SB_.BRST */
                            OBTD (Zero)
                            ^^^^ATKD.IANE (0x7E)
                        }
                    }
                }
                ElseIf ((Local0 & One))
                {
                    If (WLDP)
                    {
                        If (WRPS)
                        {
                            OWLD (One)
                            ^^^^ATKD.IANE (0x5E)
                        }
                        Else
                        {
                            OWLD (Zero)
                            ^^^^ATKD.IANE (0x5F)
                        }
                    }

                    If ((WLDP && BTDP))
                    {
                        Sleep (0x0DAC)
                    }

                    If (BTDP)
                    {
                        If (BRPS)
                        {
                            OBTD (One)
                            ^^^^ATKD.IANE (0x7D)
                        }
                        Else
                        {
                            OBTD (Zero)
                            ^^^^ATKD.IANE (0x7E)
                        }
                    }
                }
                Else
                {
                    If (WLDP)
                    {
                        WRPS = WRST /* \_SB_.WRST */
                        OWLD (Zero)
                        ^^^^ATKD.IANE (0x5F)
                    }

                    If ((WLDP && BTDP))
                    {
                        Sleep (0x0DAC)
                    }

                    If (BTDP)
                    {
                        BRPS = BRST /* \_SB_.BRST */
                        OBTD (Zero)
                        ^^^^ATKD.IANE (0x7E)
                    }
                }
            }
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
        }

        Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ACPS ())
            {
                ACPF = One
                Local0 = 0x58
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0xCF)
                }
            }
            Else
            {
                ACPF = Zero
                Local0 = 0x57
            }

            If ((MSOS () != OSVT))
            {
                STBR ()
            }

            Notify (AC0, 0x80) // Status Change
            If (ATKP)
            {
                ^^^^ATKD.IANE (Local0)
            }

            Sleep (0x64)
            Sleep (0x0A)
            NBAT (0x80)
        }

        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (CDFG)
            {
                SMBF = One
                CDFG = Zero
            }

            If (ALFG)
            {
                ALFG = Zero
            }
        }

        Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^^^^ATKD.IANE (0x6D)
        }

        Method (ECRS, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MUEC, 0xFFFF)
                ADD2 = Arg0
                CMD2 = Arg1
                PRT2 = 0x07
                Local0 = 0x7F
                While (PRT2)
                {
                    Sleep (One)
                    Local0--
                }

                If (Local0)
                {
                    Local0 = DA20 /* \_SB_.PCI0.SBRG.EC0_.DA20 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Method (ECWS, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MUEC, 0xFFFF)
                ADD2 = Arg0
                CMD2 = Arg1
                DA20 = Arg2
                PRT2 = 0x06
                Local0 = 0x07FF
                While (PRT2)
                {
                    Sleep (One)
                    Local0--
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Method (_QAC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = ST8E (0x28, Zero)
            If (((Local0 & One) == One))
            {
                Notify (BAT0, 0x80) // Status Change
            }
        }

        Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((F8FG == One))
            {
                F8FG = Zero
                STB2 (0xE0)
                STB2 (0xDB)
            }
        }

        Method (_QDB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^^^^ATKD.IANE (0x6D)
        }

        Method (_QDC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^^^^ATKD.IANE (0x6D)
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If (SYNA)
                {
                    Return (0x190A2E4F)
                }

                If (ALPS)
                {
                    Return (0x0713A906)
                }

                If (ELAN)
                {
                    Return (0x08018416)
                }

                If (STLC)
                {
                    Return (0x41C18C4E)
                }

                If (FOLT)
                {
                    Return (0x01019419)
                }

                Return (0x060A2E4F)
            }

            Name (CID0, Package (0x05)
            {
                0x000A2E4F, 
                0x02002E4F, 
                0x030FD041, 
                0x130FD041, 
                0x120FD041
            })
            Name (CID1, Package (0x03)
            {
                0x000A2E4F, 
                0x02002E4F, 
                0x130FD041
            })
            Name (CID2, Package (0x01)
            {
                0x130FD041
            })
            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                If (SYNA)
                {
                    Return (CID1) /* \_SB_.PCI0.SBRG.PS2M.CID1 */
                }

                If (STLC)
                {
                    Return (CID2) /* \_SB_.PCI0.SBRG.PS2M.CID2 */
                }

                Return (CID0) /* \_SB_.PCI0.SBRG.PS2M.CID0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (One << 0x0E)
                If ((IOST & Local0))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Name (CRS1, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {12}
            })
            Name (CRS2, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {12}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (One << 0x0A)
                If ((IOST & Local0))
                {
                    Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                }
                Else
                {
                    Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                }
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (PS2K)
        {
            Name (_HID, EisaId ("ATK3001"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IOST & 0x0400))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
        }
    }

    Scope (_SB)
    {
        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                Local0 = ^^PCI0.SBRG.EC0.RPIN (0x11)
                If ((Local0 == Ones))
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (LID, 0x80) // Status Change
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x0B, 
                    0x04
                })
            }
        }
    }

    Scope (_SB.ATKD)
    {
        Method (FSMI, 1, NotSerialized)
        {
            FSFN = Arg0
            Local0 = (Arg0 | 0xA0)
            ISMI (0x90)
            Return (FSTA) /* \_SB_.FSTA */
        }

        Method (FLSH, 1, NotSerialized)
        {
            FSTA = Arg0
            FSMI (Zero)
        }

        Method (FINI, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (One))
        }

        Method (FERS, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x02))
        }

        Method (FWRI, 1, NotSerialized)
        {
            FADR = Arg0
            FSIZ = 0x1000
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FCPW, 1, NotSerialized)
        {
            FADR = Arg0
            FSIZ = 0x1000
            Return (FSMI (0x0D))
        }

        Method (FCPP, 0, NotSerialized)
        {
            FSIZ = Zero
            Return (FSMI (0x0D))
        }

        Method (FWRP, 0, NotSerialized)
        {
            FSIZ = Zero
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FEBW, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x04))
        }

        Method (FEBR, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x05))
        }

        Method (FEDW, 0, NotSerialized)
        {
            Return (FSMI (0x06))
        }

        Method (ECSR, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x07))
        }

        Method (FLSC, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x08))
        }

        Method (FIME, 1, NotSerialized)
        {
            FSTA = Arg0
            If (((Arg0 == 0x04) | (Arg0 == 0x05)))
            {
                FSMI (0x09)
                If ((Arg0 == 0x04))
                {
                    ULCK = FADR /* \_SB_.FADR */
                }

                FSTA = Zero
                Return (FSTA) /* \_SB_.FSTA */
            }

            If ((Arg0 == 0x8000))
            {
                FSIZ = 0x1000
                FSMI (0x09)
                Return (FSTA) /* \_SB_.FSTA */
            }

            Return (FSMI (0x09))
        }

        Method (FREC, 1, NotSerialized)
        {
            If ((Arg0 == 0x8000))
            {
                FSTA = Arg0
                FSMI (0x0A)
                FSIZ = 0x1000
                Return (FSTA) /* \_SB_.FSTA */
            }

            FSTA = Arg0
            Return (FSMI (0x0A))
        }

        Name (ULCK, Zero)
    }

    Scope (\)
    {
        OperationRegion (APIO, SystemIO, 0x0800, 0x20)
        Field (APIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            TDTY,   3, 
            TENA,   1, 
            TTDT,   3, 
            FRCT,   1, 
                ,   8, 
            THLS,   1, 
            Offset (0x13)
        }

        Method (RGPL, 1, Serialized)
        {
            Local0 = Zero
            Local0 = RWGP (Zero, Arg0, Local0)
            Return (Local0)
        }

        Method (SGPL, 2, Serialized)
        {
            RWGP (One, Arg0, Arg1)
        }

        Method (RWGP, 3, Serialized)
        {
            Local0 = 0xFED81500
            Local0 += (Arg1 << 0x02)
            Local0 += 0x02
            OperationRegion (ERMM, SystemMemory, Local0, One)
            Field (ERMM, AnyAcc, NoLock, Preserve)
            {
                GPII,   1, 
                GPIO,   5, 
                GPOO,   1
            }

            If ((Arg0 == Zero))
            {
                Return (GPII) /* \RWGP.GPII */
            }
            Else
            {
                GPOO = Arg2
                Return (Zero)
            }
        }

        Method (RGPP, 1, Serialized)
        {
            Return (Zero)
        }

        Method (TGPP, 1, Serialized)
        {
        }

        Method (SGPP, 2, Serialized)
        {
        }

        Name (PMEW, Zero)
        Method (SBRS, 1, NotSerialized)
        {
        }

        Method (SBRW, 1, NotSerialized)
        {
        }

        Method (STRP, 1, NotSerialized)
        {
        }

        Method (HKTH, 0, Serialized)
        {
            If (THLS)
            {
                Return (TTDT) /* \TTDT */
            }
            Else
            {
                Return (0xFFFF)
            }
        }

        OperationRegion (SMBX, SystemIO, SMBB, 0x10)
        Field (SMBX, ByteAcc, NoLock, Preserve)
        {
            HSTS,   8, 
            SSTS,   8, 
            HSTC,   8, 
            HCMD,   8, 
            HADR,   8, 
            HDT0,   8, 
            HDT1,   8, 
            BLKD,   8, 
            SLCT,   8, 
            SHCM,   8, 
            SLEV,   16, 
            SLDT,   16, 
            STIM,   8
        }

        OperationRegion (SBSM, SystemIO, SMB0, 0x10)
        Field (SBSM, ByteAcc, NoLock, Preserve)
        {
            SHST,   8, 
            SSSR,   8, 
            SHTC,   8, 
            SCMD,   8, 
            SADR,   8, 
            SDT0,   8, 
            SDT1,   8, 
            SLKD,   8, 
            SSCT,   8, 
            SSCM,   8, 
            SSEV,   16, 
            SSDT,   8, 
            SMAC,   8
        }

        Name (RBUF, Package (0x20){})
        Method (CSM2, 0, Serialized)
        {
        }

        Method (CSM1, 0, Serialized)
        {
        }

        Method (HBSY, 0, NotSerialized)
        {
            Local0 = 0x00FFFFFF
            While (Local0)
            {
                Local1 = (HSTS & One)
                If (!Local1)
                {
                    Return (Zero)
                }

                Local0--
            }

            Return (One)
        }

        Method (WTSB, 0, NotSerialized)
        {
            Local0 = 0x00FFFFFF
            While (Local0)
            {
                Local0--
                Local1 = (HSTS & 0x1E)
                If ((Local1 == Zero))
                {
                    Return (One)
                }

                If (Local1)
                {
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Mutex (P4SM, 0x00)
        Method (SBYT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            CSM2 ()
            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HSTS = 0xFF
                    HADR = Arg0
                    HCMD = Arg1
                    HSTC = 0x44
                    If (HBSY ())
                    {
                        Local0--
                    }
                    Else
                    {
                        CSM1 ()
                        Release (P4SM)
                        Return (One)
                    }
                }
            }

            CSM1 ()
            Release (P4SM)
            Return (Ones)
        }

        Method (WBYT, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    HDT0 = Arg2
                    HSTS = 0xFF
                    HSTC = 0x48
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (WWRD, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    Local1 = (Arg2 & 0xFF)
                    Local2 = (Arg2 >> 0x08)
                    Local2 &= 0xFF
                    HDT0 = Local2
                    HDT1 = Local1
                    HSTS = 0xFF
                    HSTC = 0x4C
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (WBLK, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    Local1 = HSTC /* \HSTC */
                    Local2 = Arg2
                    Local1 = Zero
                    While (Local2)
                    {
                        BLKD = DerefOf (RBUF [Local1])
                        Local2--
                        Local1++
                    }

                    HDT0 = Arg2
                    Local1 = HSTC /* \HSTC */
                    HSTS = 0xFF
                    HSTC = 0x54
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RSBT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x44
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (HDT0) /* \HDT0 */
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RBYT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x48
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (HDT0) /* \HDT0 */
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RWRD, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x4C
                    If (WTSB ())
                    {
                        Local1 = HDT0 /* \HDT0 */
                        Local1 <<= 0x08
                        Local2 = HDT1 /* \HDT1 */
                        Local1 += Local2
                        Release (P4SM)
                        Return (Local1)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RBLK, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x54
                    If (WTSB ())
                    {
                        Local1 = HSTC /* \HSTC */
                        Local2 = HDT0 /* \HDT0 */
                        Local3 = Local2
                        RBUF = Zero
                        Local1 = Zero
                        While (Local2)
                        {
                            RBUF [Local1] = BLKD /* \BLKD */
                            Local2--
                            Local1++
                        }

                        Release (P4SM)
                        Return (Local3)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }
    }

    Scope (\)
    {
        Name (CNTB, Buffer (0x0E)
        {
            /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00               // ......
        })
        Name (VISB, Buffer (0x0E)
        {
            /* 0000 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x01, 0x01, 0x00, 0x00               // ......
        })
        Name (SHPB, Buffer (0x0E)
        {
            /* 0000 */  0x04, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  // ........
            /* 0008 */  0x07, 0x07, 0x04, 0x04, 0x07, 0x07               // ......
        })
        Name (BUPC, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (BPLD, Buffer (0x10)
        {
             0x81, 0x00, 0x31, 0x00                           // ..1.
        })
        Method (OUPC, 1, Serialized)
        {
            Local0 = DerefOf (CNTB [Arg0])
            BUPC [Zero] = Local0
        }

        Method (OPLD, 1, Serialized)
        {
            Local0 = DerefOf (VISB [Arg0])
            Local1 = DerefOf (BPLD [0x08])
            Local1 &= 0xFE
            Local1 |= Local0
            BPLD [0x08] = Local1
            Local0 = DerefOf (SHPB [Arg0])
            Local1 = DerefOf (BPLD [0x09])
            Local1 &= 0xC3
            Local1 |= Local0
            BPLD [0x09] = Local1
        }
    }

    Name (XUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XPLD, Buffer (0x10)
    {
        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
    })
    Scope (_SB.PCI0.EHC1)
    {
        OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
        Field (PCFG, DWordAcc, NoLock, Preserve)
        {
            OSOW,   32
        }

        Method (STOS, 0, NotSerialized)
        {
            OSOW |= 0x01000000
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (GHUB)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC) /* \XUPC */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD) /* \XPLD */
                }

                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        OUPC (Zero)
                        Return (BUPC) /* \BUPC */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        OPLD (Zero)
                        Return (BPLD) /* \BPLD */
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        OUPC (One)
                        Return (BUPC) /* \BUPC */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        OPLD (One)
                        Return (BPLD) /* \BPLD */
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        OUPC (0x02)
                        Return (BUPC) /* \BUPC */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        OPLD (0x02)
                        Return (BPLD) /* \BPLD */
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        OUPC (0x03)
                        Return (BUPC) /* \BUPC */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        OPLD (0x03)
                        Return (BPLD) /* \BPLD */
                    }
                }
            }
        }
    }

    Name (CAPD, Buffer (0x10)
    {
        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x14, 0x00, 0x14, 0x00,  // ........
        /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // %.......
    })
    Name (XCPC, Package (0x04)
    {
        0xFF, 
        0x03, 
        Zero, 
        Zero
    })
    Name (XDPC, Package (0x04)
    {
        Zero, 
        0xFF, 
        Zero, 
        Zero
    })
    Scope (_SB.PCI0.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0A])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0B])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0C])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0D])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0A])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0B])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0C])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }

            Device (PRT7)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = DerefOf (CNTB [0x0D])
                    If ((Local0 == 0xFF))
                    {
                        Return (XCPC) /* \XCPC */
                    }
                    Else
                    {
                        Return (XDPC) /* \XDPC */
                    }
                }
            }
        }
    }

    Scope (\)
    {
        Method (LIMT, 0, NotSerialized)
        {
            Local0 = (\_SB.CPUP - \_SB.SLMT)
            Return (Local0)
        }

        Name (LCDB, Zero)
        Method (PRJS, 1, Serialized)
        {
        }

        Method (PRJW, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                \_SB.PCI0.SBRG.EC0.SPIN (0x35, One)
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            KINI ()
        }

        Method (GLID, 0, Serialized)
        {
            Return (\_SB.PCI0.SBRG.EC0.RPIN (0x11))
        }

        Method (TLID, 0, Serialized)
        {
        }

        Method (TGAC, 0, Serialized)
        {
        }

        Method (TGDC, 1, Serialized)
        {
        }

        Method (FCTR, 3, Serialized)
        {
        }

        Method (OWGD, 1, Serialized)
        {
            SGPL (0x05, Arg0)
        }

        Method (OWGS, 0, Serialized)
        {
            Local0 = RGPL (0x05)
            Local0 ^= One
            Return (Local0)
        }

        Method (OWLD, 1, Serialized)
        {
            If (\_SB.WLDP)
            {
                \_SB.WRST = Arg0
            }

            If (((\_SB.ATKD.WAPF && 0x05) == Zero))
            {
                SGPL (0x60, Arg0)
            }
        }

        Method (OBTD, 1, Serialized)
        {
            If (\_SB.BTDP)
            {
                \_SB.BRST = Arg0
            }

            SGPL (0x04, Arg0)
            Arg0 ^= One
            SGPL (0x05, Arg0)
        }

        Method (OUWD, 1, Serialized)
        {
            \_SB.UWST = Arg0
            Return (One)
        }

        Method (OWMD, 1, Serialized)
        {
            \_SB.WMST = Arg0
            Return (One)
        }

        Method (OGPD, 1, Serialized)
        {
            \_SB.GPST = Arg0
            Return (One)
        }

        Method (OTGD, 1, Serialized)
        {
            \_SB.TGST = Arg0
            If (Arg0)
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ST87 (0x40, 0xFF)
            }
            Else
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ST87 (0x20, 0xFF)
            }

            Return (One)
        }

        Method (OHWR, 0, Serialized)
        {
            Local0 = Zero
            Local1 = \_SB.PCI0.SBRG.EC0.RPIN (0x07)
            If (Local1)
            {
                Local0 &= 0xFFFE
            }
            Else
            {
                Local0 |= One
            }

            If (\_SB.WLDP)
            {
                Local0 |= 0x80
            }

            If (\_SB.BTDP)
            {
                Local0 |= 0x0100
            }

            If (\_SB.UWDP)
            {
                Local0 |= 0x08
            }

            If (\_SB.WMDP)
            {
                Local0 |= 0x10
            }

            If (\_SB.GPDP)
            {
                Local0 |= 0x20
            }

            If (\_SB.TGDP)
            {
                Local0 |= 0x40
            }

            If (\_SB.BTDP)
            {
                Local0 |= 0x0100
            }

            Return (Local0)
        }

        Method (ORST, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.WRST)
            {
                Local0 |= One
            }

            If (\_SB.BRST)
            {
                Local0 |= 0x02
            }

            If (\_SB.UWST)
            {
                Local0 |= 0x04
            }

            If (\_SB.WMST)
            {
                Local0 |= 0x08
            }

            If (\_SB.GPST)
            {
                Local0 |= 0x10
            }

            If (\_SB.TGST)
            {
                Local0 |= 0x20
            }

            Return (Local0)
        }

        Method (PPRJ, 1, Serialized)
        {
        }

        Method (GBTL, 0, Serialized)
        {
            Return (\_SB.PCI0.SBRG.EC0.RPIN (0x02))
        }

        Method (SBTL, 1, Serialized)
        {
            \_SB.PCI0.SBRG.EC0.SPIN (0x02, Arg0)
        }

        Method (BL2C, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (STCF, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                \_SB.PCI0.SBRG.EC0.FNCT (0x84, Zero)
            }
        }

        Method (OTGB, 0, Serialized)
        {
            Local0 = One
            Return (Local0)
        }

        Method (DCPS, 1, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.EC0.RPIN (0x04)
            Local0 ^= One
            Return (Local0)
        }

        Method (ACPS, 0, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.EC0.RPIN (0x03)
            Local0 ^= One
            Return (Local0)
        }

        Method (KINI, 0, Serialized)
        {
            If ((MSOS () >= OSW8))
            {
                \_SB.PCI0.SBRG.EC0.STB1 (0x02)
                \_SB.PCI0.SBRG.EC0.STB1 (0x04)
                \_SB.FNIV = Zero
            }
            Else
            {
                \_SB.PCI0.SBRG.EC0.STB1 (0x02)
                \_SB.PCI0.SBRG.EC0.STB1 (0x03)
                \_SB.FNIV = Zero
            }
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB.PCI0.EHC1.RHUB.GHUB.PRT4)
    {
        Name (CAPD, Buffer (0x10)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x14, 0x00, 0x14, 0x00,  // ........
            /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // %.......
        })
        Device (DCAM)
        {
            Name (_ADR, 0x04)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (CAPD) /* \_SB_.PCI0.EHC1.RHUB.GHUB.PRT4.CAPD */
            }
        }
    }
}



ECDT
----
[000h 0000 004h]                   Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004 004h]                Table Length : 000000C1
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FF
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI."
[020h 0032 004h]       Asl Compiler Revision : 00000005


[024h 0036 00Ch]     Command/Status Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 01 [SystemIO]
[025h 0037 001h]                   Bit Width : 08
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040 008h]                     Address : 0000000000000066

[030h 0048 00Ch]               Data Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 01 [SystemIO]
[031h 0049 001h]                   Bit Width : 08
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052 008h]                     Address : 0000000000000062

[03Ch 0060 004h]                         UID : 00000000
[040h 0064 001h]                  GPE Number : 03
[041h 0065 013h]                    Namepath : "\_SB.PCI0.SBRG.EC0"

Raw Table Data: Length 193 (0xC1)

    0000: 45 43 44 54 C1 00 00 00 01 FF 5F 41 53 55 53 5F  // ECDT......_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 2E  // Notebook. ..AMI.
    0020: 05 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // ........f.......
    0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 03 5C 5F 53 42 2E 50 43 49 30 2E 53 42 52 47 2E  // .\_SB.PCI0.SBRG.
    0050: 45 43 30 00 00 00 00 00 00 00 00 00 00 00 00 00  // EC0.............
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00                                               // .


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : B4
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : CD93BE80
[028h 0040 004h]                DSDT Address : CD0F01F8
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : B0
[035h 0053 001h]          ACPI Disable Value : B1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000000
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000385A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000CD0F01F8
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000000

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 B4 5F 41 53 55 53 5F  // FACP......_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 80 BE 93 CD F8 01 0F CD 01 02 09 00  // ................
    0030: B2 00 00 00 B0 B1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 85 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 F8 01 0F CD  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 34C006E4
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 E4 06 C0 34 00 00 00 00  // FACS@......4....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 4E
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 4E 5F 41 53 55 53 5F  // FIDT.....N_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 54 4C 58  // ....$FID.x.1ATLX
    0030: 30 31 30 00 37 5C D8 9F 35 1D 43 43 B9 C1 0A 83  // 010.7\..5.CC....
    0040: CA 11 A9 DB 30 35 00 31 31 00 30 30 00 31 30 00  // ....05.11.00.10.
    0050: 00 00 00 00 00 00 00 FF FF 5F 41 53 55 53 5F 4E  // ........._ASUS_N
    0060: 6F 74 65 62 6F 6F 6B 00 00 00 00 00 00 00 00 00  // otebook.........
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1D
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


[024h 0036 002h]               Subtable Type : 0001
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]         S3PT Record Address : 00000000CE550830

[034h 0052 002h]               Subtable Type : 0000
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]    FPDT Boot Record Address : 00000000CE550850

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 1D 5F 41 53 55 53 5F  // FPDTD....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 08 55 CE  // ............0.U.
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 08 55 CE  // ............P.U.
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 46
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000005

[024h 0036 004h]           Hardware Block ID : 10228201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 46 5F 41 53 55 53 5F  // HPET8....F_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000000D0
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 24
[00Ah 0010 006h]                      Oem ID : "AMD   "
[010h 0016 008h]                Oem Table ID : "AGESA   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]         Virtualization Info : 00203041
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B8
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 1
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FEB80000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0008
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A4
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 00
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 01
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B8
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 1
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000FEB80000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 000077EF22294ADA
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0008
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A4
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 00
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 01
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 24 41 4D 44 20 20 20  // IVRS.....$AMD   
    0010: 41 47 45 53 41 20 20 20 01 00 00 00 41 4D 44 20  // AGESA   ....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B8 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 00 A0 00 01  // H.......H.......
    0070: 48 00 00 00 01 01 00 01 11 B8 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 00 00 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 00 A0 00 01 48 00 00 00 01 01 00 01  // H.......H.......


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : B5
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F8000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 3F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 B5 5F 41 53 55 53 5F  // MCFG<....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  // Notebook. ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 30
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "ASUS"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 30 5F 41 53 55 53 5F /* MSDMU....0_ASUS_ */\
/* 034h 0052  16 */                            4E 6F 74 65 62 6F 6F 6B 00 00 00 00 41 53 55 53 /* Notebook....ASUS */\
/* 044h 0068  16 */                            01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 30 5F 41 53 55 53 5F  // MSDMU....0_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 00 00 00 00 41 53 55 53  // Notebook....ASUS
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 36 43 52 51 4E 2D 4D 54  // ........6CRQN-MT
    0040: 54 44 59 2D 37 42 46 52 58 2D 39 36 46 33 57 2D  // TDY-7BFRX-96F3W-
    0050: 56 48 36 33 51                                   // VH63Q


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "CPMDFDGP", 0x00000001)
{
    /*
     * iASL Warning: There were 6 external control methods found during
     * disassembly, but only 0 were resolved (6 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GFX0.HDAU, DeviceObj)
    External (_SB_.PCI0.GFX0.VGA_, DeviceObj)
    External (M010, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M097, UnknownObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M113, IntObj)
    External (M133, UnknownObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB.PCI0.GFX0.VGA)
    {
        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID, Local1))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GFX0.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GFX0.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GFX0.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GFX0.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GFX0.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GFX0.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GFX0.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GFX0.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GFX0.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 = M049 /* External reference */
            0xBF
            M187
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 = M049 /* External reference */
                (0xC0 + Local1)
                Local2
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GFX0.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GFX0.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID, Local4))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GFX0.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GFX0.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GFX0.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GFX0.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID, Local4))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            0x10 = M013 (M133, 0xD4, Zero)
            Local0
            If (Local0)
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    M133 = M049 /* External reference */
                    (0xD4 + Local1)
                    Local2
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                One = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GFX0.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GFX0.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                OperationRegion (VARM, SystemIO, 0x80, 0x02)
                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARR,   16
                }

                Local0 = (Arg0 & 0x03)
                M303 = Local0
                VARR = Local0
                Sleep (0x01F4)
                Local0 = (Arg1 & Ones)
                M304 = Local0
                VARR = ((Local0 >> 0x10) & 0xFFFF)
                Sleep (0x01F4)
                VARR = (Local0 & 0xFFFF)
                Sleep (0x01F4)
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M010 (0x5B, One)
                Notify (VGA, 0x81) // Information Change
                M010 (0x5B, Zero)
            }
        }

        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            Return (M207) /* \_SB_.PCI0.GFX0.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = 0x6F
             = \_SB.ALIB /* External reference */
            M207
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            0x15 = M100 (M162, M133 = M049 /* External reference */)
            Local0
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.GFX0.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (Zero, One))
        }
    }

    Scope (\_SB.PCI0.GFX0.HDAU)
    {
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((M097 != Zero))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD   ", "AGESA   ", 0x00000002)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0200)
        {
            /* 0000 */  0x01, 0x72, 0x72, 0x6E, 0x00, 0x03, 0x00, 0x00,  // .rrn....
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x03, 0x03, 0x01, 0x03, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0028 */  0x04, 0x00, 0x03, 0x00, 0x00, 0x02, 0x02, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x01, 0x03,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x05, 0x05, 0x04, 0x05, 0x01,  // ........
            /* 0040 */  0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x01, 0x03,  // ........
            /* 0088 */  0x00, 0x00, 0x00, 0x0F, 0x08, 0x00, 0x07, 0x00,  // ........
            /* 0090 */  0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A011)
                CreateWordField (Arg1, 0x02, A012)
                CreateDWordField (Arg1, 0x04, A013)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A014)
                A014 = A011 /* \_SB_.ALIB.A011 */
                CreateWordField (Local0, 0x02, A015)
                A015 = A012 /* \_SB_.ALIB.A012 */
                CreateDWordField (Local0, 0x04, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                A016 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A016 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A017 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Return (A018 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A086 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A087 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A014)
            CreateByteField (Local7, 0x02, A026)
            CreateByteField (Local7, 0x03, A088)
            A014 = 0x04
            A026 = 0x00
            A088 = Local1
            Return (Local7)
        }

        Method (A086, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A078 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A078 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A078 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A078 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A078 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A078 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A078 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A078 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A078 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A078 (Arg1))
            }
        }

        Method (A087, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A079 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A079 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A079 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A079 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A017, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A008 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A014)
            A014 = 0x03
            CreateByteField (Local7, 0x02, A026)
            A026 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A026 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A026 = 0x01
                Return (Local7)
            }

            A027 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A028 ()
            A026 = 0x02
            Return (Local7)
        }

        Method (A009, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A028 ()
        }

        Method (A003, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A007, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A019, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A029 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A028 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A030, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A027, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A031 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A032 (Local0)
                        A033 (Local0, Local1)
                    }
                    Else
                    {
                        A033 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A034, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A035 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A036, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A037 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A028, 0, NotSerialized)
        {
            A036 ()
            A034 ()
            If ((AP02 != AP01))
            {
                A010 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                \_SB.A038 (AP02)
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A035 (Local0)
                Local2 = A039 (Local0)
                If ((Local1 != Local2))
                {
                    A040 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A040 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                \_SB.A038 (AP02)
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                \_SB.A038 (AP02)
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A040, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A041 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A041 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A041 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 (Arg1))
            }
        }

        Method (A039, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A042 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A042 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A042 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 ())
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A043 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A043 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A043 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 ())
            }
        }

        Method (A037, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A045 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A045 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A045 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A045 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A045 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A045 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A045 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A045 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A045 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A045 ())
            }
        }

        Method (A033, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A046 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A046 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A046 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A046 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A046 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A046 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A046 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A046 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A046 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A046 (Arg1))
            }
        }

        Method (A031, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A047 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A047 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A047 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A047 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A047 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A047 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A047 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A047 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A047 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A047 (Arg1))
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A048 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A048 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A048 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A048 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A048 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A048 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A048 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A048 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A048 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A048 ())
            }
        }

        OperationRegion (A109, SystemMemory, (AGRB + 0x000C4000), 0x1000)
        Field (A109, ByteAcc, NoLock, Preserve)
        {
            Offset (0x124), 
                ,   22, 
            A110,   1, 
            A111,   4
        }

        OperationRegion (A112, SystemMemory, (AGRB + 0x000C5000), 0x1000)
        Field (A112, ByteAcc, NoLock, Preserve)
        {
            Offset (0x170), 
                ,   14, 
            A113,   1
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0x60), 
            A094,   32, 
            Offset (0x7C), 
            A095,   1, 
            Offset (0xB8), 
            A096,   32, 
            Offset (0xC8), 
            A097,   32
        }

        BankField (A093, A096, 0x13000000, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A093, A096, 0x13000010, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A093, A096, 0x13000020, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A093, A096, 0x13000024, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        BankField (A093, A096, 0x13000028, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A093, A096, 0x1300002C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A093, A096, 0x13000030, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A093, A096, 0x13000034, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A093, A096, 0xC0014000, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A106,   1
        }

        OperationRegion (A107, SystemMemory, (AGRB + 0x8000), 0x1000)
        Field (A107, DWordAcc, NoLock, Preserve)
        {
            A108,   32
        }

        OperationRegion (A114, SystemMemory, AGRB, 0x1000)
        Field (A114, ByteAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            A115,   32
        }

        BankField (A114, A115, 0x01110004, DWordAcc, NoLock, Preserve)
        {
            Offset (0xE4), 
                ,   12, 
            A116,   1
        }

        BankField (A114, A115, 0x01318070, DWordAcc, NoLock, Preserve)
        {
            Offset (0xE4), 
            A117,   1
        }

        BankField (A114, A115, 0x01410129, DWordAcc, NoLock, Preserve)
        {
            Offset (0xE4), 
            A118,   16
        }

        Method (A038, 1, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (\_SB.ADAT [0x01])
            }

            If ((Arg0 == 0x02))
            {
                Local0 = DerefOf (\_SB.ADAT [0x02])
            }

            If ((Arg0 == 0x03))
            {
                Local0 = DerefOf (\_SB.ADAT [0x03])
            }

            If ((Local0 > 0xF7))
            {
                Local0 = 0xF7
            }

            Local2 = (0x0271 * ((Local1 = (0xF7 - Local0)) + 0x01))
            Divide (Local2 *= 0x04, 0x64, Local3, Local4)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A119)
            CreateDWordField (Local7, 0x04, A120)
            CreateDWordField (Local7, 0x08, A121)
            CreateDWordField (Local7, 0x0C, A122)
            CreateDWordField (Local7, 0x10, A123)
            CreateDWordField (Local7, 0x14, A124)
            A119 = Local4
            A125 (0x3A, Local7)
        }

        Method (A126, 3, NotSerialized)
        {
        }

        Method (A082, 3, NotSerialized)
        {
            If (((Arg1 >= 0x08) && (Arg2 >= 0x08)))
            {
                If ((Arg0 == 0x01))
                {
                    A117 = 0x01
                }
                Else
                {
                    If ((Arg1 > Arg2))
                    {
                        Local1 = (Arg1 - Arg2)
                        Local2 = (Arg2 - 0x08)
                    }
                    Else
                    {
                        Local1 = (Arg2 - Arg1)
                        Local2 = (Arg1 - 0x08)
                    }

                    Local1++
                    Local1 = (0x01 << Local1)
                    Local1--
                    Local1 <<= Local2
                    Local0 = (A118 & ~Local1)
                    If ((Local0 == 0x00))
                    {
                        A116 = 0x00
                    }
                    Else
                    {
                        A116 = 0x01
                    }
                }
            }
        }

        Method (A084, 3, NotSerialized)
        {
            If (((Arg1 >= 0x08) && (Arg2 >= 0x08)))
            {
                If ((Arg0 == 0x01))
                {
                    A116 = 0x01
                }
                ElseIf (((A118 & 0xFF) == 0x00))
                {
                    A117 = 0x00
                }
            }
        }

        Method (A125, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A127)
            CreateDWordField (Arg1, 0x04, A128)
            CreateDWordField (Arg1, 0x08, A129)
            CreateDWordField (Arg1, 0x0C, A130)
            CreateDWordField (Arg1, 0x10, A131)
            CreateDWordField (Arg1, 0x14, A132)
            A099 = 0x00
            While ((A099 != 0x00))
            {
                A099 = 0x00
            }

            A100 = A127 /* \_SB_.A125.A127 */
            A101 = A128 /* \_SB_.A125.A128 */
            A102 = A129 /* \_SB_.A125.A129 */
            A103 = A130 /* \_SB_.A125.A130 */
            A104 = A131 /* \_SB_.A125.A131 */
            A105 = A132 /* \_SB_.A125.A132 */
            A098 = Arg0
            While ((A099 == 0x00)){}
        }

        Method (A051, 1, NotSerialized)
        {
        }

        Method (A005, 1, NotSerialized)
        {
            Local0 = A113 /* \_SB_.A113 */
            If ((Arg0 == 0x00))
            {
                A113 = 0x01
            }
            Else
            {
                A113 = 0x00
            }

            Return (Local0)
        }

        Method (A004, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A119)
                CreateDWordField (Local7, 0x04, A120)
                CreateDWordField (Local7, 0x08, A121)
                CreateDWordField (Local7, 0x0C, A122)
                CreateDWordField (Local7, 0x10, A123)
                CreateDWordField (Local7, 0x14, A124)
                A119 = 0x0801
                A125 (0x60, Local7)
            }
        }

        Method (A006, 1, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A119)
            CreateDWordField (Local7, 0x04, A120)
            CreateDWordField (Local7, 0x08, A121)
            CreateDWordField (Local7, 0x0C, A122)
            CreateDWordField (Local7, 0x10, A123)
            CreateDWordField (Local7, 0x14, A124)
            If (((A106 == 0x01) || (A095 == 0x01)))
            {
                If ((Arg0 == 0x00))
                {
                    A125 (0x86, Local7)
                }
            }
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A133)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A119)
            CreateDWordField (Local7, 0x04, A120)
            CreateDWordField (Local7, 0x08, A121)
            CreateDWordField (Local7, 0x0C, A122)
            CreateDWordField (Local7, 0x10, A123)
            CreateDWordField (Local7, 0x14, A124)
            Local0 = 0x02
            While ((Local0 < A133))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A119 = 0x00
                A120 = 0x00
                A121 = 0x00
                A122 = 0x00
                A123 = 0x00
                A124 = 0x00
                If ((Local1 == 0x00))
                {
                    A119 = Local2
                    A125 (0x69, Local7)
                }

                If ((Local1 == 0x01))
                {
                    A121 = Local2
                    A125 (0x6C, Local7)
                }

                If ((Local1 == 0x02))
                {
                    A119 = Local2
                    A125 (0x6C, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A119 = Local2
                    A125 (0x7C, Local7)
                }

                If ((Local1 == 0x04))
                {
                    Local3 = DerefOf (Arg0 [Local0])
                    Local0++
                    Local3 |= (DerefOf (Arg0 [Local0]) << 0x08)
                    Local0++
                    Local3 |= (DerefOf (Arg0 [Local0]) << 0x10)
                    Local0++
                    Local3 |= (DerefOf (Arg0 [Local0]) << 0x18)
                    Local0++
                    A119 = Local2
                    A120 = Local3
                    A125 (0x6A, Local7)
                }
            }
        }

        OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            A089,   8, 
            A090,   8
        }

        IndexField (A089, A090, ByteAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            A091,   32
        }

        OperationRegion (ACFG, SystemIO, A091, 0x08)
        Field (ACFG, DWordAcc, NoLock, Preserve)
        {
            A092,   32
        }

        BankField (ACFG, A092, 0x80000068, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            A059,   2
        }

        Name (ABSM, 0x00)
        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                ABSM = A059 /* \_SB_.A059 */
                A059 = 0x00
            }
            Else
            {
                A059 = ABSM /* \_SB_.ABSM */
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Name (WRBS, 0x0150)
            Name (CORE, 0x0140)
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR0.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR0.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR0.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR0.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR0.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR0.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR0.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR0.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR0.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR1.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR1.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR1.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR1.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR1.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR1.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR1.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR1.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR1.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR2.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR2.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR2.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR2.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR2.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR2.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR2.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR2.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR2.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR3.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR3.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR3.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR3.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR3.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR3.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR3.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR3.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR3.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR4.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR4.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR4.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR4.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR4.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR4.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR4.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR4.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR4.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Name (WRBS, 0x0151)
            Name (CORE, 0x0141)
            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR5.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR5.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR5.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR5.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR5.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR5.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR5.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR5.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR5.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR6.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR6.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR6.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR6.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR6.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR6.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR6.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR6.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR6.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR7.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR7.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR7.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR7.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR7.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR7.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR7.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR7.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR7.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR8.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR8.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR8.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR8.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR8.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR8.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR8.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR8.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR8.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR9.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR9.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR9.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR9.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR9.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR9.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR9.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR9.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR9.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                A003 (Arg0)
                A004 (0x00)
                A002 = A005 (0x00)
                A006 (0x00)
            }
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                A007 (Arg0)
                If ((A002 == 0x00))
                {
                    A005 (0x01)
                }
            }
        }

        Method (A008, 0, NotSerialized)
        {
            A009 ()
        }

        Method (A010, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "CPMCMN", 0x00000001)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xCD93C018, 0x0001009E)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   522240, 
        Offset (0x1005E), 
        M107,   64, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32
    }

    Method (M000, 1, Serialized)
    {
        Local0 = (Arg0 + 0x0C00)
        OperationRegion (VARM, SystemIO, 0x80, 0x02)
        Field (VARM, WordAcc, NoLock, Preserve)
        {
            VARR,   16
        }

        VARR = Local0
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                    One)
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == One))
        {
            Local1 = M038 /* External reference */
            Local2
        }
        ElseIf ((Local0 == 0x02))
        {
            (Local1 + 0x08) = M038 /* External reference */
            Local2
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                    0x02 | Arg1))
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == One))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Method (M029, 1, Serialized)
    {
        Switch (M085)
        {
            Case (0x02)
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                    0x04), Zero, One))
            }
            Case (Package (0x05)
                {
                    0x03, 
                    0x04, 
                    0x05, 
                    0x06, 
                    0x07
                }

)
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                    0x04), Zero, One))
            }
            Default
            {
                Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
            }

        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
        {
            M014 (Local0, Arg3, Arg4, Arg5, Arg6)
        }
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 == 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 == 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M019 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x68)
                                        If (((Local6 & 0x0100) && (Local6 != Ones)))
                                        {
                                            If ((M085 == 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 == 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 3, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                M120 = Zero
                \_SB.ALIB (0x06, M115)
            }
            Else
            {
                M120 = One
                \_SB.ALIB (0x06, M115)
                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2014"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Linux"))
                {
                    M046 = 0x02
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M044, 0, Serialized)
    {
        M045 ()
        Local0 = Zero
        If ((M046 == 0x02))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (Arg0)
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (Local0)
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            \_SB.PCI0.SATA.TPTS (Arg0)
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            \_SB.PCI0.SATA.TWAK (Arg0)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "CPMDFIGP", 0x00000001)
{
    /*
     * iASL Warning: There were 30 external control methods found during
     * disassembly, but only 0 were resolved (30 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GFX0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.SBRG.EC0_.WRAM, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (_SB_.PCI0.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M009, UnknownObj)
    External (M010, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M087, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M105, IntObj)
    External (M106, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M113, IntObj)
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB.PCI0.VGA)
    {
        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID, Local1))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID, Local4))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID, Local4))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, Zero), 0x10, Local0)
            Else
            {
                 = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                OperationRegion (VARM, SystemIO, 0x80, 0x02)
                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARR,   16
                }

                Local0 = (Arg0 & 0x03)
                M303 = Local0
                VARR = Local0
                Sleep (0x01F4)
                Local0 = (Arg1 & Ones)
                M304 = Local0
                VARR = ((Local0 >> 0x10) & 0xFFFF)
                Sleep (0x01F4)
                VARR = (Local0 & 0xFFFF)
                Sleep (0x01F4)
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M010 (0x5B, One)
                Notify (VGA, 0x81) // Information Change
                M010 (0x5B, Zero)
            }
        }

        Name (M189, Buffer (0x0100){})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (One, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            M133 (0x11, Local0) = M049 /* External reference */
            Local6 = One
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x86)
                M010 (0x48, Zero)
                M010 (0x15, One)
                While ((M009 != 0x09))
                {
                    One
                }

                Sleep (0x78)
                M010 (0x48, One)
                Sleep (One)
                \_SB.PCI0.SBRG.EC0.WRAM (0x0520, 0xC2, \_SB.PCI0.SBRG.EC0.WRAM (0x0521, 0xAD, M000 (0x87), HPOK = Zero), Sleep (
                    0x14))
                M201 = One
                0x06 = \_SB.ALIB /* External reference */
                Local7
                Local6
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        0xA5 = M021 (Zero, M091, M090)
                        Local0
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        M090 = M024 (Zero, M091)
                        Local5
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 == Zero))
                            {
                                M091
                                M090
                                Ones
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049, M133 (0x17, One), M111 (M049, M133 (0x18, One), HPOK = 
                                    One, Local2 = 0x10), Else
                                    {
                                        HPOK = Zero
                                        Local2 = 0x10
                                    })
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x88)
                    Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                        Local5 = 0x05, While ((Local4 && Local5))
                                {
                                    0xA5 = M021 (Zero, M091, M090)
                                    Local0
                                    Local0 &= 0x7F
                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Else
                                            {
                                                M000 (0x8A)
                                                M201 = Zero
                                                \_SB.ALIB
                                                0x06
                                                Local7
                                                M000 (0x8B)
                                                \_SB.PCI0.SBRG.EC0.WRAM (0x0521, 0x8D, \_SB.PCI0.SBRG.EC0.WRAM (0x0520, 0xC0, M111 (M049, M133 (0x17, Zero), M111 (
                                                    M049, M133 (0x18, Zero), M010 (0x48, Zero), M010 (0x15, Zero)), M023 (Zero, M091, 
                                                    M090)), Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                                    Local5 = 0x05, While ((Local4 && Local5))
                                                                    {
                                                                        0xA5 = M021 (Zero, M091, M090)
                                                                        Local0
                                                                        Local0 &= 0x7F
                                                                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                        {
                                                                            Local4 = Zero
                                                                        }
                                                                        Else
                                                                        {
                                                                            Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Local5--), 
                                                                                HPOK = 0x02, M000 (0x8C), If (HPOK)
                                                                                        {
                                                                                            Local5 = 0x7FFFFFFF
                                                                                            Local5 |= 0x80000000
                                                                                            Store (M019 (M095 (M094 (M093 (Zero, Local0), If (((HPOK == One) && 
                                                                                                (Local0 != Local5)))
                                                                                                            {
                                                                                                                M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                    Local5))
                                                                                                                            {
                                                                                                                                M020 (M095 (M094 (M191 = (M093 (One, Zero) + 0x4C), Sleep (0x0A))))
                                                                                                                            })))
                                                                                                            })))
                                                                                        }))
                                                                        }
                                                                    }))))
                                            } = M019 (
                                                                                                                                    M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Local5--), M201 = Zero, \_SB.ALIB, 
                                                                                                                                    0x06), Local7, M000 (0x89))
                                    }
                                }))
                }
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049, M133 (0x17, One), Else
                    {
                        M111 (M049, M133 (0x17, Zero))
                    })
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049, M133 (0x18, One), Else
                    {
                        M111 (M049, M133 (0x18, Zero))
                    })
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0A, Zero, 0x08, Local2)
            }
        }

        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            Return (M207) /* \_SB_.PCI0.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = 0x6F
             = \_SB.ALIB /* External reference */
            M207
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            If ((Local0 & 0x80))
                {
                    M204 = (Local0 & One)
                } = M100 (M162, M133 (0x15, Local0) = 
                        M049 /* External reference */)
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (Zero, One))
        }

        Name (M202, Buffer (0xFF00)
        {
             0x00                                             // .
        })
        Method (ATRM, 2, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            Local4 = M105 /* External reference */
            If ((Local4 > 0xFF00))
            {
                Local4 = 0xFF00
            }

            If ((Local0 <= Local4))
            {
                Local1 = (Arg1 * 0x08)
                Local2 = (Arg0 * 0x08)
                M202 = M106 /* External reference */
                CreateField (M202, Local2, Local1, TEMP)
                Name (RETB, Buffer (Arg1){})
                RETB = TEMP /* \_SB_.PCI0.VGA_.ATRM.TEMP */
                Return (RETB) /* \_SB_.PCI0.VGA_.ATRM.RETB */
            }
            ElseIf ((Arg0 < Local4))
            {
                Local3 = (M105 - Arg0)
                Local1 = (Local3 * 0x08)
                Local2 = (Arg0 * 0x08)
                M202 = M106 /* External reference */
                CreateField (M202, Local2, Local1, TEM)
                Name (RETC, Buffer (Local3){})
                RETC = TEM /* \_SB_.PCI0.VGA_.ATRM.TEM_ */
                Return (RETC) /* \_SB_.PCI0.VGA_.ATRM.RETC */
            }
            Else
            {
                Name (RETD, Buffer (One){})
                Return (RETD) /* \_SB_.PCI0.VGA_.ATRM.RETD */
            }
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN0 ()
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN1 (Arg0)
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN2 (Arg0, Arg1)
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN3 (Arg0, Arg1)
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN4 (Arg0)
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN5 ()
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN6 ()
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN7 (Arg0)
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFN8 ()
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            \_SB.PCI0.VGA.AFNC (Arg0, Arg1)
        }

        If ((M087 == One))
        {
            \_SB.PCI0.GFX0.VGA.AFNC (Arg0, Arg1)
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD   ", "AGESA   ", 0x00000001)
{
    External (_PR_.P000, DeviceObj)
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)

    Scope (\_PR.P000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P000.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P001.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P002.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00001F6F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000834, 
                0x0000159A, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000E10, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x00000B1E, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P003.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "CPMZPODD", 0x00000001)
{
    /*
     * iASL Warning: There were 13 external control methods found during
     * disassembly, but only 0 were resolved (13 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_ADR, IntObj)
    External (_SB_.PCI0.SATA, DeviceObj)
    External (_SB_.PCI0.SBRG.EC0_, DeviceObj)
    External (_SB_.PCI0.SBRG.EC0_.ECOK, UnknownObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M009, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M014, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M017, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M018, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M029, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (M031, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M032, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M044, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (M045, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (M049, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M128, UnknownObj)
    External (M134, UnknownObj)

    Scope (\_SB.PCI0.SATA)
    {
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            M134 = M049 /* External reference */
            0x15
            Local4
            If ((XCMP (Arg0, ToUUID ("e4db149b-fcfe-425b-a6d8-92357d78fc7f") /* SATA Controller */) == One))
            {
                If ((Arg2 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((Arg2 == One))
                {
                    Name (ADDR, Package (0x01)
                    {
                        0x0001FFFF
                    })
                    ADDR [Zero] = ((Local4 * 0x00010000) + 0xFFFF)
                    Return (Package (0x01)
                    {
                        ADDR
                    })
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local0 = DerefOf (Arg3 [Zero])
                    If (((Local0 == ((Local4 * 0x00010000) + 0xFFFF)) || (
                        Local0 == Ones)))
                    {
                        Local1 = DerefOf (Arg3 [One])
                        If ((Local1 == Zero))
                        {
                            \_SB.PCI0.SATA.STPT (Zero)
                            Return (Zero)
                        }
                        ElseIf ((Local1 == One))
                        {
                            If (M045 ())
                            {
                                \_SB.PCI0.SATA.ODD8._PS0 ()
                            }
                            ElseIf (M044 ())
                            {
                                \_SB.PCI0.SATA.ODDL._PS0 ()
                            }
                            Else
                            {
                                \_SB.PCI0.SATA.ODDZ._PS0 ()
                            }

                            Return (Zero)
                        }
                    }
                }
            }

            Return (One)
        }

        Method (XCMP, 2, NotSerialized)
        {
            If ((0x10 != SizeOf (Arg0)))
            {
                Return (Zero)
            }

            If ((0x10 != SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Local0 = Zero
            While ((Local0 < 0x10))
            {
                If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                    )))
                {
                    Return (Zero)
                }

                Local0++
            }

            Return (One)
        }

        Method (STDV, 0, Serialized)
        {
            Local0 = _ADR /* External reference */
            Return ((Local0 >> 0x10))
        }

        Method (STFN, 0, Serialized)
        {
            Local0 = _ADR /* External reference */
            Return ((Local0 & 0xFFFF))
        }

        Method (PBAA, 0, Serialized)
        {
            0x24 = M019 (Zero, STDV (), STFN ())
            Local0
            If ((Local0 == Ones))
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (STPT, 1, Serialized)
        {
            M134 = M049 /* External reference */
            0x15
            Local4
            M018 (Zero, STDV (), STFN (), 0x42, Local4, One, (Arg0 ^ One))
        }

        Method (STPP, 1, Serialized)
        {
            M134 = M049 /* External reference */
            0x15
            Local4
            M018 (Zero, STDV (), STFN (), 0x42, Local4, One, (Arg0 ^ One))
            If ((M017 (Zero, STDV (), STFN (), 0x0A, Zero) == 0x10))
            {
                0x0106
                If ((PBAA () != Zero))
                {
                    M018 (Zero, STDV (), STFN (), 0x40, Zero, One, One)
                    M014 (PBAA (), 0x0C, Local4, One)
                    Arg0
                    0x06 = M017 (Zero, STDV (), STFN (), 0x42, Zero)
                    Local0
                    If ((Local0 == 0x3F))
                    {
                        M014 (PBAA (), 0x0C, Zero, One)
                        One
                    }
                    ElseIf ((M017 (Zero, STDV (), STFN (), 0x42, Zero) && One))
                    {
                        ((Local0 & 0x3E) ^ 0x3E)
                        M014 (PBAA (), 0x0C, Zero, One)
                        Zero
                    }

                    0x06 = M013 (PBAA (), 0x0C, Zero)
                    Local1
                    Local2 = Zero
                    While (Local1)
                    {
                        If ((Local1 & One))
                        {
                            Local2++
                        }

                        Local1 >>= One
                    }

                    M014 (PBAA (), Zero, Zero, 0x05)
                    Local2--
                    M018 (Zero, STDV (), STFN (), 0x40, Zero, One, Zero)
                }
            }
        }

        Method (STPM, 0, Serialized)
        {
            M134 = M049 /* External reference */
            0x15
            Local4
            Local1 = Zero
            If ((PBAA () != Zero))
            {
                Local0 = (0x0118 + (0x80 * Local4))
                One = M013 (PBAA (), Local0, Zero)
                Local0
            }

            Return (Local1)
        }

        Method (STPR, 0, Serialized)
        {
            M134 = M049 /* External reference */
            0x15
            Local4
            If ((M017 (Zero, STDV (), STFN (), 0x0A, Zero) == 0x10))
            {
                0x0106
                If ((PBAA () != Zero))
                {
                    Local0 = (0x0118 + (0x80 * Local4))
                    M014 (PBAA (), Local0, Zero, One)
                    Zero
                    Sleep (One)
                    Local0 = (0x012C + (0x80 * Local4))
                    M014 (PBAA (), Local0, Zero, 0x04)
                    One
                    Sleep (0x02)
                    M014 (PBAA (), Local0, Zero, 0x04)
                    Zero
                }
            }
        }

        Device (PRT1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                If ((Local0 & One))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Device (ODD)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    M134 = M049 /* External reference */
                    0x15
                    Local4
                    Return (Local4)
                }

                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (ODD8)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x15
                Local4
                If ((Local0 & One))
                {
                    Return (((Local4 * 0x00010000) + 0xFFFF))
                }
                Else
                {
                    Return (Local4)
                }
            }

            Name (M048, One)
            Name (ODPS, Zero)
            Name (ODDB, Zero)
            Name (WDSW, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M134 = M049 /* External reference */
                0x15
                Local4
                If (M045 ())
                {
                    If ((PBAA () != Zero))
                    {
                        If ((M013 (PBAA (), (0x0129 + (Local4 * 0x80)), 
                            Zero) != 0x04))
                        {
                            Zero
                            \_SB.PCI0.SATA.ODD8.ODDB = One
                        }
                    }

                    \_SB.PCI0.SATA.SACB = One
                }
            }

            Method (ZSTA, 0, NotSerialized)
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                M134 = M049 /* External reference */
                0x12
                Local3
                M134 = M049 /* External reference */
                0x17
                Local6
                If ((Local0 & One))
                {
                    If ((Local0 & 0x02))
                    {
                        If ((Local6 == Zero))
                        {
                            If (M029 ())
                            {
                                Local3
                                Return (Zero)
                            }
                            Else
                            {
                                If ((Local0 & 0x04))
                                {
                                    \_SB.PCI0.SATA.ODD8.ODDB = One
                                }

                                Return (0x0F)
                            }
                        }
                        ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                        {
                            If (M009 ())
                            {
                                (Local3 + (Local6 << 0x08))
                                If ((\_SB.PCI0.SATA.SACB == One))
                                {
                                    \_SB.PCI0.SATA.SACB = Zero
                                    \_SB.PCI0.SATA.STPP (One)
                                    Sleep (0x28)
                                    M111 (Local1, One)
                                    Sleep (0x28)
                                    \_SB.PCI0.SBRG.EC0.XQ41 ()
                                }

                                Return (Zero)
                            }
                            Else
                            {
                                \_SB.PCI0.SATA.SACB = Zero
                                If ((Local0 & 0x04))
                                {
                                    \_SB.PCI0.SATA.ODD8.ODDB = One
                                }

                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If ((Local0 & 0x04))
                            {
                                \_SB.PCI0.SATA.ODD8.ODDB = One
                            }

                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        If ((Local0 & 0x04))
                        {
                            \_SB.PCI0.SATA.ODD8.ODDB = One
                        }

                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If (M045 ())
                {
                    If (\_SB.PCI0.SATA.ODD8.M048)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                M134 = M049 /* External reference */
                0x12
                Local3
                M134 = M049 /* External reference */
                0x17
                Local6
                If (M045 ())
                {
                    If ((Local6 == Zero))
                    {
                        Local3 = M029 ()
                        Local7
                    }
                    ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                    {
                        (Local3 + (Local6 << 0x08)) = M009 ()
                        Local7
                    }
                    Else
                    {
                        Local7 = Zero
                    }

                    If (!((Local0 & 0x02) && Local7))
                    {
                        M000 (0x84)
                        If ((Local0 & One))
                        {
                            If (((\_SB.PCI0.SATA.ODD8.ODDB == One) || ((\_SB.PCI0.SATA.ODD8.ODDB == Zero) && (\_SB.PCI0.SATA.STPM () != 
                                Zero))))
                            {
                                \_SB.PCI0.SATA.STPT (One)
                                Sleep (0x28)
                                M111 (Local1, One)
                                \_SB.PCI0.SATA.ODD8.M048 = One
                                Sleep (0x28)
                            }
                        }

                        \_SB.PCI0.SATA.ODD8.ODDB = One
                        \_SB.PCI0.SATA.ODD8.ODPS = Zero
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                If (M045 ())
                {
                    M000 (0x85)
                    If ((Local0 & One))
                    {
                        If ((\_SB.PCI0.SATA.ODD8.WDSW == One))
                        {
                            Sleep (0x28)
                            M111 (Local1, Zero)
                            Sleep (0x28)
                            \_SB.PCI0.SATA.ODD8.M048 = Zero
                            \_SB.PCI0.SATA.STPT (Zero)
                            Sleep (0x28)
                        }
                    }

                    \_SB.PCI0.SATA.ODD8.ODDB = One
                    \_SB.PCI0.SATA.ODD8.ODPS = 0x03
                }
            }

            Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
            {
                If (M045 ())
                {
                    \_SB.PCI0.SATA.ODD8._PS3 ()
                    \_SB.PCI0.SATA.STPP (Zero)
                }
            }

            Device (ODD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    M134 = M049 /* External reference */
                    0x10
                    Local1
                    If (M045 ())
                    {
                        M111 (Local1, Zero)
                        \_SB.PCI0.SATA.ODD8.M048 = Zero
                    }
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (M045 ())
                {
                    Return (\_SB.PCI0.SATA.ODD8.ZSTA ())
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (M045 ())
                {
                    If (Arg0)
                    {
                        \_SB.PCI0.SATA.ODD8.WDSW = One
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.ODD8.WDSW = Zero
                    }
                }
            }

            Name (ZPRW, Package (0x02)
            {
                0x0C, 
                0x03
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (!M045 ())
                {
                    M134 = M049 /* External reference */
                    0x13
                    \_SB.PCI0.SATA.ODD8.ZPRW [Zero]
                }

                Return (\_SB.PCI0.SATA.ODD8.ZPRW)
            }
        }

        Device (ODDZ)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                M134 = M049 /* External reference */
                0x15
                Local4
                Return (Local4)
            }

            Name (M048, One)
            Name (ODPS, Zero)
            Name (ODDB, Zero)
            Name (WDSW, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M134 = M049 /* External reference */
                0x15
                Local4
                If (!(M045 () || M044 ()))
                {
                    If ((PBAA () != Zero))
                    {
                        If ((M013 (PBAA (), (0x0129 + (Local4 * 0x80)), 
                            Zero) != 0x04))
                        {
                            Zero
                            \_SB.PCI0.SATA.ODDZ.ODDB = One
                        }
                    }

                    \_SB.PCI0.SATA.SACB = One
                }
            }

            Method (ZSTA, 0, NotSerialized)
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                M134 = M049 /* External reference */
                0x12
                Local3
                M134 = M049 /* External reference */
                0x17
                Local6
                If ((Local0 & One))
                {
                    If ((Local0 & 0x02))
                    {
                        If ((Local6 == Zero))
                        {
                            If (M029 ())
                            {
                                Local3
                                If ((\_SB.PCI0.SATA.SASS == 0x04))
                                {
                                    Sleep (0xC8)
                                }

                                Return (Zero)
                            }
                            Else
                            {
                                If ((Local0 & 0x04))
                                {
                                    \_SB.PCI0.SATA.ODDZ.ODDB = One
                                }

                                Return (0x0F)
                            }
                        }
                        ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                        {
                            If (M009 ())
                            {
                                (Local3 + (Local6 << 0x08))
                                If ((\_SB.PCI0.SATA.SACB == One))
                                {
                                    \_SB.PCI0.SATA.SACB = Zero
                                    \_SB.PCI0.SATA.STPP (One)
                                    Sleep (0x28)
                                    M111 (Local1, One)
                                    Sleep (0x28)
                                    \_SB.PCI0.SBRG.EC0.XQ41 ()
                                }

                                If ((\_SB.PCI0.SATA.SASS == 0x04))
                                {
                                    Sleep (0xC8)
                                }

                                Return (Zero)
                            }
                            Else
                            {
                                \_SB.PCI0.SATA.SACB = Zero
                                If ((Local0 & 0x04))
                                {
                                    \_SB.PCI0.SATA.ODDZ.ODDB = One
                                }

                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If ((Local0 & 0x04))
                            {
                                \_SB.PCI0.SATA.ODDZ.ODDB = One
                            }

                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        If ((Local0 & 0x04))
                        {
                            \_SB.PCI0.SATA.ODDZ.ODDB = One
                        }

                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If (!(M045 () || M044 ()))
                {
                    If (\_SB.PCI0.SATA.ODDZ.M048)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                M134 = M049 /* External reference */
                0x12
                Local3
                M134 = M049 /* External reference */
                0x17
                Local6
                If (!(M045 () || M044 ()))
                {
                    If ((Local6 == Zero))
                    {
                        Local3 = M029 ()
                        Local7
                    }
                    ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                    {
                        (Local3 + (Local6 << 0x08)) = M009 ()
                        Local7
                    }
                    Else
                    {
                        Local7 = Zero
                    }

                    If (!((Local0 & 0x02) && Local7))
                    {
                        M000 (0x84)
                        If ((Local0 & One))
                        {
                            If (((\_SB.PCI0.SATA.ODDZ.ODDB == One) || ((\_SB.PCI0.SATA.ODDZ.ODDB == Zero) && (\_SB.PCI0.SATA.STPM () != 
                                Zero))))
                            {
                                \_SB.PCI0.SATA.STPT (One)
                                Sleep (0x28)
                                M111 (Local1, One)
                                \_SB.PCI0.SATA.ODDZ.M048 = One
                                Sleep (0x28)
                            }
                        }

                        \_SB.PCI0.SATA.ODDZ.ODDB = One
                        \_SB.PCI0.SATA.ODDZ.ODPS = Zero
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                If (!(M045 () || M044 ()))
                {
                    M000 (0x85)
                    If ((Local0 & One))
                    {
                        If ((\_SB.PCI0.SATA.ODDZ.WDSW == One))
                        {
                            Sleep (0x28)
                            M111 (Local1, Zero)
                            Sleep (0x28)
                            \_SB.PCI0.SATA.ODDZ.M048 = Zero
                            \_SB.PCI0.SATA.STPT (Zero)
                            Sleep (0x28)
                        }
                    }

                    \_SB.PCI0.SATA.ODDZ.ODDB = One
                    \_SB.PCI0.SATA.ODDZ.ODPS = 0x03
                }
            }

            Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
            {
                If (!(M045 () || M044 ()))
                {
                    \_SB.PCI0.SATA.ODDZ._PS3 ()
                    \_SB.PCI0.SATA.STPP (Zero)
                }
            }

            Device (ODD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    M134 = M049 /* External reference */
                    0x10
                    Local1
                    If (!(M045 () || M044 ()))
                    {
                        M111 (Local1, Zero)
                        \_SB.PCI0.SATA.ODDZ.M048 = Zero
                    }
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (!(M045 () || M044 ()))
                {
                    Return (\_SB.PCI0.SATA.ODDZ.ZSTA ())
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (ODDL)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x15
                Local4
                If ((Local0 & One))
                {
                    Return (((Local4 * 0x00010000) + 0xFFFF))
                }
                Else
                {
                    Return (Local4)
                }
            }

            Name (M048, One)
            Name (ODPS, Zero)
            Name (ODDB, Zero)
            Name (WDSW, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M134 = M049 /* External reference */
                0x15
                Local4
                If (M044 ())
                {
                    If ((PBAA () != Zero))
                    {
                        If ((M013 (PBAA (), (0x0129 + (Local4 * 0x80)), 
                            Zero) != 0x04))
                        {
                            Zero
                            \_SB.PCI0.SATA.ODDL.ODDB = One
                        }
                    }

                    \_SB.PCI0.SATA.SACB = One
                }
            }

            Method (ZSTA, 0, NotSerialized)
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                M134 = M049 /* External reference */
                0x12
                Local3
                M134 = M049 /* External reference */
                0x17
                Local6
                If ((Local0 & One))
                {
                    If ((Local0 & 0x02))
                    {
                        If ((Local6 == Zero))
                        {
                            If (M029 ())
                            {
                                Local3
                                Return (Zero)
                            }
                            Else
                            {
                                If ((Local0 & 0x04))
                                {
                                    \_SB.PCI0.SATA.ODDL.ODDB = One
                                }

                                Return (0x0F)
                            }
                        }
                        ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                        {
                            If (M009 ())
                            {
                                (Local3 + (Local6 << 0x08))
                                If ((\_SB.PCI0.SATA.SACB == One))
                                {
                                    \_SB.PCI0.SATA.SACB = Zero
                                    \_SB.PCI0.SATA.STPP (One)
                                    Sleep (0x28)
                                    M111 (Local1, One)
                                    Sleep (0x28)
                                    \_SB.PCI0.SBRG.EC0.XQ41 ()
                                }

                                Return (Zero)
                            }
                            Else
                            {
                                \_SB.PCI0.SATA.SACB = Zero
                                If ((Local0 & 0x04))
                                {
                                    \_SB.PCI0.SATA.ODDL.ODDB = One
                                }

                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If ((Local0 & 0x04))
                            {
                                \_SB.PCI0.SATA.ODDL.ODDB = One
                            }

                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        If ((Local0 & 0x04))
                        {
                            \_SB.PCI0.SATA.ODDL.ODDB = One
                        }

                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If (M044 ())
                {
                    If (\_SB.PCI0.SATA.ODDL.M048)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                M134 = M049 /* External reference */
                0x12
                Local3
                M134 = M049 /* External reference */
                0x17
                Local6
                If (M044 ())
                {
                    If ((Local6 == Zero))
                    {
                        Local3 = M029 ()
                        Local7
                    }
                    ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                    {
                        (Local3 + (Local6 << 0x08)) = M009 ()
                        Local7
                    }
                    Else
                    {
                        Local7 = Zero
                    }

                    If (!((Local0 & 0x02) && Local7))
                    {
                        M000 (0x84)
                        If ((Local0 & One))
                        {
                            If (((\_SB.PCI0.SATA.ODDL.ODDB == One) || ((\_SB.PCI0.SATA.ODDL.ODDB == Zero) && (\_SB.PCI0.SATA.STPM () != 
                                Zero))))
                            {
                                \_SB.PCI0.SATA.STPT (One)
                                Sleep (0x28)
                                M111 (Local1, One)
                                \_SB.PCI0.SATA.ODDL.M048 = One
                                Sleep (0x28)
                            }
                        }

                        \_SB.PCI0.SATA.ODDL.ODDB = One
                        \_SB.PCI0.SATA.ODDL.ODPS = Zero
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M128 = M049 /* External reference */
                0x67
                Local0
                M134 = M049 /* External reference */
                0x10
                Local1
                If (M044 ())
                {
                    M000 (0x85)
                    If ((Local0 & One))
                    {
                        If ((\_SB.PCI0.SATA.ODDL.WDSW == One))
                        {
                            Sleep (0x28)
                            M111 (Local1, Zero)
                            Sleep (0x28)
                            \_SB.PCI0.SATA.ODDL.M048 = Zero
                            \_SB.PCI0.SATA.STPT (Zero)
                            Sleep (0x28)
                        }
                    }

                    \_SB.PCI0.SATA.ODDL.ODDB = One
                    \_SB.PCI0.SATA.ODDL.ODPS = 0x03
                }
            }

            Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
            {
                If (M044 ())
                {
                    \_SB.PCI0.SATA.ODDL._PS3 ()
                    \_SB.PCI0.SATA.STPP (Zero)
                }
            }

            Device (ODD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    M134 = M049 /* External reference */
                    0x10
                    Local1
                    If (M044 ())
                    {
                        M111 (Local1, Zero)
                        \_SB.PCI0.SATA.ODDL.M048 = Zero
                    }
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (M044 ())
                {
                    Return (\_SB.PCI0.SATA.ODDL.ZSTA ())
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (M044 ())
                {
                    If (Arg0)
                    {
                        \_SB.PCI0.SATA.ODDL.WDSW = One
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.ODDL.WDSW = Zero
                    }
                }
            }

            Name (ZPRW, Package (0x02)
            {
                0x0C, 
                0x03
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (!M044 ())
                {
                    M134 = M049 /* External reference */
                    0x13
                    \_SB.PCI0.SATA.ODDL.ZPRW [Zero]
                }

                Return (\_SB.PCI0.SATA.ODDL.ZPRW)
            }
        }

        Name (SAPO, Zero)
        Name (SACB, Zero)
        Name (SASS, Zero)
        Method (TPTS, 1, NotSerialized)
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x12
            Local3
            M134 = M049 /* External reference */
            0x17
            Local6
            If (((Local0 & 0x03) == 0x03))
            {
                If ((Local6 == Zero))
                {
                    If (M029 ())
                    {
                        Local3
                        \_SB.PCI0.SATA.SAPO = One
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.SAPO = Zero
                    }
                }
                ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                {
                    If (M009 ())
                    {
                        (Local3 + (Local6 << 0x08))
                        \_SB.PCI0.SATA.SAPO = One
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.SAPO = Zero
                    }
                }
            }
        }

        Method (TWAK, 1, NotSerialized)
        {
            \_SB.PCI0.SATA.SASS = Arg0
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x10
            Local1
            M134 = M049 /* External reference */
            0x12
            Local3
            M134 = M049 /* External reference */
            0x17
            Local6
            If (((Local0 & 0x03) == 0x03))
            {
                If ((Local6 == Zero))
                {
                    If (M029 ())
                    {
                        Local3
                        If (((Arg0 == 0x04) && (\_SB.PCI0.SATA.SAPO == Zero)))
                        {
                            If (!(M045 () || M044 ()))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, One) // Device Check
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                            }
                        }
                    }
                }
                ElseIf ((\_SB.PCI0.SBRG.EC0.ECOK == One))
                {
                    If (M009 ())
                    {
                        (Local3 + (Local6 << 0x08))
                        If (((Arg0 == 0x03) && (\_SB.PCI0.SATA.SAPO == Zero)))
                        {
                            If (!(M045 () || M044 ()))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, One) // Device Check
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                            }
                        }
                        ElseIf (((Arg0 == 0x04) && (\_SB.PCI0.SATA.SAPO == Zero)))
                        {
                            If (!(M045 () || M044 ()))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, One) // Device Check
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x11
            Local2
            M134 = M049 /* External reference */
            0x12
            Local3
            Local7 = Zero
            If ((Local0 & 0x02))
            {
                Local3 = M029 ()
                Local7
            }

            If ((Local7 == Zero))
            {
                If ((M029 () == Local2))
                {
                    Zero
                    M000 (0x81)
                    If ((Local0 & 0x10))
                    {
                        \_SB.PCI0.SATA.STPR ()
                    }

                    If (M045 ())
                    {
                        Notify (\_SB.PCI0.SATA.ODD8, 0x02) // Device Wake
                    }
                    ElseIf (M044 ())
                    {
                        Notify (\_SB.PCI0.SATA.ODDL, 0x02) // Device Wake
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                    }
                }
            }
        }

        Method (_L15, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x10
            Local1
            M134 = M049 /* External reference */
            0x12
            Local3
            Sleep (0xC8)
            If (M031 (Local3))
            {
                If (M029 ())
                {
                    Local3
                    M000 (0x82)
                    M111 (Local1, Zero)
                    If (M045 ())
                    {
                        \_SB.PCI0.SATA.ODD8.M048 = Zero
                    }
                    ElseIf (M044 ())
                    {
                        \_SB.PCI0.SATA.ODDL.M048 = Zero
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.ODDZ.M048 = Zero
                    }

                    Sleep (0x28)
                    \_SB.PCI0.SATA.STPP (Zero)
                    If (M045 ())
                    {
                        \_SB.PCI0.SATA.ODD8.ODPS = 0x03
                    }
                    ElseIf (M044 ())
                    {
                        \_SB.PCI0.SATA.ODDL.ODPS = 0x03
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.ODDZ.ODPS = 0x03
                    }

                    M032 (Local3)
                    One = (M029 () ^ Local3)
                    Zero
                }
            }
            Else
            {
                Sleep (0x14)
                If (!M029 ())
                {
                    Local3
                    M000 (0x83)
                    \_SB.PCI0.SATA.STPP (One)
                    Sleep (0x28)
                    M111 (Local1, One)
                    Sleep (0x28)
                    If (M045 ())
                    {
                        \_SB.PCI0.SATA.ODD8.M048 = One
                    }
                    ElseIf (M044 ())
                    {
                        \_SB.PCI0.SATA.ODDL.M048 = One
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.ODDZ.M048 = One
                    }

                    If (M045 ())
                    {
                        \_SB.PCI0.SATA.ODD8.ODPS = Zero
                    }
                    ElseIf (M044 ())
                    {
                        \_SB.PCI0.SATA.ODDL.ODPS = Zero
                    }
                    Else
                    {
                        \_SB.PCI0.SATA.ODDZ.ODPS = Zero
                    }

                    M032 (Local3)
                    One = (M029 () ^ Local3)
                    Zero
                }
            }

            Sleep (0x28)
            If ((Local0 & One))
            {
                If (M045 ())
                {
                    Notify (\_SB.PCI0.SATA.ODD8, One) // Device Check
                }
                ElseIf (M044 ())
                {
                    Notify (\_SB.PCI0.SATA.ODDL, One) // Device Check
                }
                Else
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, One) // Device Check
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                }
            }
            Else
            {
                Notify (\_SB.PCI0.SATA.PRT1, One) // Device Check
                If (!(M045 () || M044 ()))
                {
                    Notify (\_SB.PCI0.SATA.PRT1, 0x81) // Information Change
                }
            }
        }
    }

    Scope (\_SB.PCI0.SBRG.EC0)
    {
        Method (XQ43, 0, Serialized)
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x12
            Local3
            M134 = M049 /* External reference */
            0x17
            Local6
            If ((\_SB.PCI0.SBRG.EC0.ECOK == One))
            {
                (Local3 + (Local6 << 0x08)) = M009 ()
                Local7
            }
            Else
            {
                Local7 = Zero
            }

            If (!(Local0 & 0x02))
            {
                Local6 = One
                Local7 = Zero
            }

            If ((Local6 && (~Local7 & One)))
            {
                If ((Local0 & 0x10))
                {
                    \_SB.PCI0.SATA.STPR ()
                }

                If (M045 ())
                {
                    If ((\_SB.PCI0.SATA.ODD8.M048 == Zero))
                    {
                        Notify (\_SB.PCI0.SATA.ODD8, 0x02) // Device Wake
                        M000 (0xA4)
                    }
                }
                ElseIf (M044 ())
                {
                    If ((\_SB.PCI0.SATA.ODDL.M048 == Zero))
                    {
                        Notify (\_SB.PCI0.SATA.ODDL, 0x02) // Device Wake
                        M000 (0xA4)
                    }
                }
                ElseIf ((\_SB.PCI0.SATA.ODDZ.M048 == Zero))
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                    M000 (0xA4)
                }
            }
        }

        Method (XQ42, 0, Serialized)
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x12
            Local3
            M134 = M049 /* External reference */
            0x17
            Local6
            If ((\_SB.PCI0.SBRG.EC0.ECOK == One))
            {
                (Local3 + (Local6 << 0x08)) = M009 ()
                Local7
            }
            Else
            {
                Local7 = Zero
            }

            If (!(Local0 & 0x02))
            {
                Local6 = One
                Local7 = Zero
            }

            If ((Local6 && (~Local7 & One)))
            {
                If (M045 ())
                {
                    If ((\_SB.PCI0.SATA.ODD8.M048 == Zero))
                    {
                        Notify (\_SB.PCI0.SATA.ODD8, 0x02) // Device Wake
                        M000 (0xA5)
                    }
                }
                ElseIf (M044 ())
                {
                    If ((\_SB.PCI0.SATA.ODDL.M048 == Zero))
                    {
                        Notify (\_SB.PCI0.SATA.ODDL, 0x02) // Device Wake
                        M000 (0xA5)
                    }
                }
                ElseIf ((\_SB.PCI0.SATA.ODDZ.M048 == Zero))
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                    M000 (0xA5)
                }
            }
        }

        Method (XQ41, 0, Serialized)
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x10
            Local1
            M134 = M049 /* External reference */
            0x12
            Local3
            M134 = M049 /* External reference */
            0x17
            Local6
            If ((\_SB.PCI0.SBRG.EC0.ECOK == One))
            {
                (Local3 + (Local6 << 0x08)) = M009 ()
                Local7
            }
            Else
            {
                Local7 = One
            }

            If ((Local6 && Local7))
            {
                M000 (0xA6)
                M111 (Local1, Zero)
                If (M045 ())
                {
                    \_SB.PCI0.SATA.ODD8.M048 = Zero
                }
                ElseIf (M044 ())
                {
                    \_SB.PCI0.SATA.ODDL.M048 = Zero
                }
                Else
                {
                    \_SB.PCI0.SATA.ODDZ.M048 = Zero
                }

                Sleep (0x28)
                \_SB.PCI0.SATA.STPP (Zero)
                If (M045 ())
                {
                    \_SB.PCI0.SATA.ODD8.ODPS = 0x03
                }
                ElseIf (M044 ())
                {
                    \_SB.PCI0.SATA.ODDL.ODPS = 0x03
                }
                Else
                {
                    \_SB.PCI0.SATA.ODDZ.ODPS = 0x03
                }

                Sleep (0x28)
                If ((Local0 & One))
                {
                    If (M045 ())
                    {
                        Notify (\_SB.PCI0.SATA.ODD8, One) // Device Check
                    }
                    ElseIf (M044 ())
                    {
                        Notify (\_SB.PCI0.SATA.ODDL, One) // Device Check
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SATA.ODDZ, One) // Device Check
                        Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                    }
                }
                Else
                {
                    Notify (\_SB.PCI0.SATA.PRT1, One) // Device Check
                    If (!(M045 () || M044 ()))
                    {
                        Notify (\_SB.PCI0.SATA.PRT1, 0x81) // Information Change
                    }
                }
            }
        }

        Method (XQ40, 0, Serialized)
        {
            M128 = M049 /* External reference */
            0x67
            Local0
            M134 = M049 /* External reference */
            0x10
            Local1
            M134 = M049 /* External reference */
            0x12
            Local3
            M134 = M049 /* External reference */
            0x17
            Local6
            If ((\_SB.PCI0.SBRG.EC0.ECOK == One))
            {
                (Local3 + (Local6 << 0x08)) = M009 ()
                Local7
            }
            Else
            {
                Local7 = Zero
            }

            If ((Local6 && (~Local7 & One)))
            {
                M000 (0xA7)
                Sleep (0x28)
                \_SB.PCI0.SATA.STPP (One)
                Sleep (0x28)
                If (M045 ())
                {
                    \_SB.PCI0.SATA.ODD8.ODPS = Zero
                }
                ElseIf (M044 ())
                {
                    \_SB.PCI0.SATA.ODDL.ODPS = Zero
                }
                Else
                {
                    \_SB.PCI0.SATA.ODDZ.ODPS = Zero
                }

                M111 (Local1, One)
                Sleep (0x28)
                If (M045 ())
                {
                    \_SB.PCI0.SATA.ODD8.M048 = One
                }
                ElseIf (M044 ())
                {
                    \_SB.PCI0.SATA.ODDL.M048 = One
                }
                Else
                {
                    \_SB.PCI0.SATA.ODDZ.M048 = One
                }

                If ((Local0 & One))
                {
                    If (M045 ())
                    {
                        Notify (\_SB.PCI0.SATA.ODD8, One) // Device Check
                    }
                    ElseIf (M044 ())
                    {
                        Notify (\_SB.PCI0.SATA.ODDL, One) // Device Check
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SATA.ODDZ, One) // Device Check
                        Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                    }
                }
                Else
                {
                    Notify (\_SB.PCI0.SATA.PRT1, One) // Device Check
                    If (!(M045 () || M044 ()))
                    {
                        Notify (\_SB.PCI0.SATA.PRT1, 0x81) // Information Change
                    }
                }
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 58
[00Ah 0010 006h]                      Oem ID : ""
[010h 0016 008h]                Oem Table ID : "Tpm2Tabl"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]                    Reserved : 00000000
[028h 0040 008h]             Control Address : 00000000FE600010
[030h 0048 004h]                Start Method : 00000002
/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 34, TableLength: 34 ***/
Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 03 58 00 00 00 00 00 00  // TPM24....X......
    0010: 54 70 6D 32 54 61 62 6C 01 00 00 00 41 4D 49 20  // Tpm2Tabl....AMI 
    0020: 00 00 00 00 00 00 00 00 10 00 60 FE 00 00 00 00  // ..........`.....
    0030: 02 00 00 00                                      // ....


UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000042
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 0C
[00Ah 0010 006h]                      Oem ID : ""
[010h 0016 008h]                Oem Table ID : ""
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : ""
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 010h]             UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 0C 00 00 00 00 00 00  // UEFIB...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 00 00 00 00 00  // ...26...........
    0040: 00 00                                            // ..


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000FE84
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 31
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD"
[020h 0032 004h]       Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 65156 (0xFE84)

    0000: 56 46 43 54 84 FE 00 00 01 31 5F 41 53 55 53 5F  // VFCT.....1_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 41 4D 44 00  // Notebook....AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 01 00 00 00 00 00 00 00 02 10 74 98 00 00 00 00  // ..........t.....
    0060: 01 00 00 00 00 FE 00 00 55 AA 7F E9 1D 02 00 00  // ........U.......
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: C0 01 00 00 00 00 49 42 4D 6F C8 9F 00 00 00 00  // ......IBMo......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 15 02 00 00 00 00 00 00  // 20..............
    00B0: 9C 01 00 00 00 00 00 00 31 32 2F 32 33 2F 31 36  // ........12/23/16
    00C0: 2C 30 30 3A 34 34 3A 34 31 00 00 00 E9 36 03 00  // ,00:44:41....6..
    00D0: E9 45 03 00 00 00 80 00 00 00 00 00 00 00 00 00  // .E..............
    00E0: 00 00 00 00 00 00 00 00 31 31 33 2D 43 37 35 31  // ........113-C751
    00F0: 30 30 2D 30 33 32 00 43 41 52 52 49 5A 4F 00 50  // 00-032.CARRIZO.P
    0100: 43 49 5F 45 58 50 52 45 53 53 00 44 44 52 34 00  // CI_EXPRESS.DDR4.
    0110: 0D 0A 43 41 52 52 49 5A 4F 20 47 65 6E 65 72 69  // ..CARRIZO Generi
    0120: 63 20 56 42 49 4F 53 20 20 20 20 20 20 20 20 20  // c VBIOS         
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0150: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A  //               ..
    0160: 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D  // ... ...(C) 1988-
    0170: 32 30 31 30 2C 20 41 64 76 61 6E 63 65 64 20 4D  // 2010, Advanced M
    0180: 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E  // icro Devices, In
    0190: 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D  // c..ATOMBIOSBK-AM
    01A0: 44 20 56 45 52 30 31 35 2E 30 34 38 2E 30 30 30  // D VER015.048.000
    01B0: 2E 30 37 31 2E 30 30 37 35 35 35 00 43 61 72 72  // .071.007555.Carr
    01C0: 69 7A 6F 47 65 6E 65 72 00 31 33 35 36 36 32 36  // izoGener.1356626
    01D0: 30 00 33 37 30 32 38 30 20 20 00 20 20 20 20 20  // 0.370280  .     
    01E0: 20 20 20 00 41 4D 44 5F 43 61 72 72 69 7A 6F 5F  //    .AMD_Carrizo_
    01F0: 47 65 6E 65 72 69 63 5C 63 6F 6E 66 69 67 2E 68  // Generic\config.h
    0200: 00 00 00 90 24 00 01 01 41 54 4F 4D 00 C0 41 03  // ....$...ATOM..A.
    0210: 54 01 E5 01 A8 00 74 03 00 00 00 00 02 10 02 10  // T.....t.........
    0220: C0 01 90 A4 36 A5 A0 00 50 43 49 52 02 10 74 98  // ....6...PCIR..t.
    0230: 00 00 18 00 00 00 00 03 7F 00 30 0F 00 80 00 00  // ..........0.....
    0240: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 F0 B9 4C  // AMD ATOMBIOS...L
    0250: 45 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // E...............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 56 1E 0E  // .............V..
    0280: 1F E8 CC 32 81 4D 50 00 20 1F 5E 1E 06 66 50 66  // ...2.MP. .^..fPf
    0290: 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 B0 01  // QfRfSfUfVfW.....
    02A0: 8C 0E A4 01 B2 20 E8 DC 39 0B C0 75 14 A2 02 00  // ..... ..9..u....
    02B0: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    02C0: CB E8 E1 3A E8 BD 38 32 D2 89 16 B2 01 A1 B0 01  // ...:..82........
    02D0: 66 C1 C0 10 A1 A4 01 E8 F5 04 E8 24 05 E8 D0 04  // f..........$....
    02E0: E8 96 06 E8 69 03 E8 67 32 F7 45 50 00 20 75 13  // ....i..g2.EP. u.
    02F0: E8 15 30 0B C0 74 0C E8 49 00 E8 85 64 E8 C5 04  // ..0..t..I...d...
    0300: E8 E4 64 E8 B9 00 B4 80 E8 AE 38 8A C7 66 C1 E0  // ..d.......8..f..
    0310: 10 8A E3 B0 14 66 50 BB 08 10 E8 27 3A A8 01 66  // .....fP....':..f
    0320: 58 74 02 B0 20 66 A3 C8 9F E8 52 04 E8 DC 04 E8  // Xt.. f....R.....
    0330: 96 3A 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // .:f_f^f]f[fZfYfX
    0340: 07 1F CB 2E 8B 1E A4 01 83 3E 53 03 00 75 04 89  // .........>S..u..
    0350: 1E 51 03 1E 2E 8E 1E 49 03 9C FA 66 C7 06 08 01  // .Q.....I...f....
    0360: 65 F0 00 F0 C7 06 40 00 74 03 89 1E 42 00 C7 06  // e.....@.t...B...
    0370: B4 01 74 03 89 1E B6 01 C7 06 7C 00 B8 6C 89 1E  // ..t.......|..l..
    0380: 7E 00 C7 06 0C 01 CB 70 89 1E 0E 01 C7 06 A8 04  // ~......p........
    0390: E0 66 89 1E AA 04 2E 8E 1E 51 03 8B C3 A3 E2 66  // .f.......Q.....f
    03A0: A3 F2 66 A3 04 67 9D 1F C3 50 4D 49 44 74 03 A6  // ..f..g...PMIDt..
    03B0: 53 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB  // S...............
    03C0: 00 10 E8 7F 39 66 C1 E8 10 A3 C6 01 BB 0B 10 E8  // ....9f..........
    03D0: 72 39 8D 3E 9C 01 66 89 45 18 C3 00 E8 C6 39 E8  // r9.>..f.E.....9.
    03E0: 58 02 75 1B 2E 3A 26 BE 01 75 05 E8 47 00 EB 11  // X.u..:&..u..G...
    03F0: 80 FC 4F 75 05 E8 0C 4F EB 07 E8 7F 56 EB 02 B4  // ..Ou...O....V...
    0400: 01 E8 C4 39 CF E8 9D 39 E8 2F 02 75 05 E8 25 00  // ...9...9./.u..%.
    0410: EB 02 B4 01 E8 B1 39 CB E8 8A 39 E8 1C 02 75 0F  // ......9...9...u.
    0420: 80 FC 4F 75 05 E8 DC 4E EB 07 E8 4F 56 EB 02 B4  // ..Ou...N...OV...
    0430: 01 E8 94 39 CB 1E 06 66 50 66 51 66 52 66 53 66  // ...9...fPfQfRfSf
    0440: 55 66 56 66 57 0E 1F 3C 04 75 23 BB 0B 10 E8 F3  // UfVfW..<.u#.....
    0450: 38 8D 36 A6 00 8A 3C 80 EF 30 B3 02 8B EC 89 5E  // 8.6...<..0.....^
    0460: 0C 89 46 04 66 C1 E8 10 89 46 00 E9 AA 01 3C 05  // ..F.f....F....<.
    0470: 75 18 E8 53 03 E8 0C 37 8B EC 89 56 10 89 46 00  // u..S...7...V..F.
    0480: 66 C1 E8 10 89 46 04 E9 8E 01 3C 06 75 39 E8 45  // f....F....<.u9.E
    0490: 03 66 D1 E0 8B EC 89 46 14 BB 02 10 E8 A5 38 88  // .f.....F......8.
    04A0: 46 18 E8 35 03 66 0B C0 0F 84 64 01 66 89 46 0C  // F..5.f....d.f.F.
    04B0: BB 06 10 E8 8E 38 33 C0 66 89 46 00 2E 8B 16 C6  // .....83.f.F.....
    04C0: 01 89 56 10 E9 51 01 3C 0B 75 24 0A DB 75 11 B9  // ..V..Q.<.u$..u..
    04D0: 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 38 01  // ........^..N..8.
    04E0: 8A C7 E8 4B 01 E8 E7 11 0F 84 24 01 E9 29 01 3C  // ...K......$..).<
    04F0: 17 75 27 E8 D1 07 74 06 E8 43 10 E8 3D 1C E8 0A  // .u'...t..C..=...
    0500: 09 E8 BE 11 33 C9 50 24 03 0A C8 58 66 C1 E8 10  // ....3.P$...Xf...
    0510: 0A E8 8B EC 89 4E 14 E9 FE 00 3C 18 75 6D 0A FF  // .....N....<.um..
    0520: 75 18 E8 D1 06 8B EC 89 46 0C 66 C1 E8 10 89 46  // u.......F.f....F
    0530: 14 E8 24 0A 89 4E 10 E9 DE 00 80 FF 0F 74 0E 23  // ..$..N.......t.#
    0540: C9 0F 84 CB 00 E8 26 07 E8 7C 07 75 2D BB 00 1C  // ......&..|.u-...
    0550: E8 18 38 66 0B C0 0F 84 B6 00 E8 AE 08 0B C9 0F  // ..8f............
    0560: 84 AD 00 BE 00 1C E8 B8 02 0F 84 A3 00 BE 00 1C  // ................
    0570: B0 40 E8 51 03 E8 7E 06 EB 09 E8 AA 07 E8 1F 1C  // .@.Q..~.........
    0580: E8 96 07 8B EC 89 46 0C E9 8D 00 3C 19 75 09 E8  // ......F....<.u..
    0590: 5E 07 E8 11 1C E9 80 00 3C 82 75 2C 80 FB 01 75  // ^.......<.u,...u
    05A0: 0D 8B EC BE FF 05 89 76 00 8C 4E 10 EB 6A 80 FB  // .......v..N..j..
    05B0: 05 75 15 0A FF 75 0A E8 B5 04 8B EC 89 46 14 EB  // .u...u.......F..
    05C0: 57 E8 71 04 74 42 EB 50 3C 8E 75 12 80 FF 01 74  // W.q.tB.P<.u....t
    05D0: 08 80 FF 02 75 32 80 C1 02 E8 F9 04 EB 3A 3C 8F  // ....u2.......:<.
    05E0: 75 26 80 FF 05 75 05 E8 81 07 EB 2C 80 FF 07 75  // u&...u.....,...u
    05F0: 0A E8 85 07 8B EC 88 5E 0C EB 1D 80 FF 85 75 08  // .......^......u.
    0600: E8 68 07 E8 8B 1B EB 10 8B EC C6 46 19 02 EB 0F  // .h.........F....
    0610: 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19 66  // ...F....2....f.f
    0620: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3  // _f^f]f[fZfYfX...
    0630: 51 8A C8 B8 01 00 D3 E0 59 C3 50 32 C0 53 BB 15  // Q.......Y.P2.S..
    0640: 10 E8 00 37 5B 3C FF 74 04 24 03 0A C0 58 C3 E8  // ...7[<.t.$...X..
    0650: 89 08 F7 C1 02 00 74 0E 06 0E 07 8D 3E FF 05 B8  // ......t.....>...
    0660: 02 00 E8 26 07 07 C3 00 00 00 00 07 00 08 08 08  // ...&............
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 80 FB 01 75 04 E8 16 00 C3  // ..........u.....
    0690: 80 FB 02 75 04 E8 5F 00 C3 80 FB 1B 75 04 E8 61  // ...u.._.....u..a
    06A0: 00 C3 0C 01 C3 56 51 8A C1 BE E9 06 E8 8E 00 8A  // .....VQ.........
    06B0: F8 B8 08 4E B3 01 B1 01 E8 0C 06 75 02 32 C9 CD  // ...N.......u.2..
    06C0: 15 59 3D 00 4E 75 2C 33 C0 33 D2 F6 C3 01 74 02  // .Y=.Nu,3.3....t.
    06D0: 0C 02 F6 C3 02 74 02 0C 01 F6 C3 40 74 03 80 CA  // .....t.....@t...
    06E0: 01 81 E3 88 00 0B C3 8B D9 23 D8 74 06 8B C8 24  // .........#.t...$
    06F0: 00 5E C3 0C 01 5E C3 B8 08 4E B3 02 CD 15 3D 00  // .^...^...N....=.
    0700: 4E C3 06 57 56 57 66 33 DB 8B DF 66 33 C9 0E 59  // N..WVWf3...f3..Y
    0710: 66 C1 E1 04 66 03 CB BB 1B 00 B8 08 4E CD 15 5E  // f...f.......N..^
    0720: 3D 00 4E 75 14 B9 20 00 66 26 8B 05 66 89 04 83  // =.Nu.. .f&..f...
    0730: C6 04 83 C7 04 E2 F1 33 C0 5E 5F 07 C3 51 B9 08  // .......3.^_..Q..
    0740: 00 D0 E8 73 03 2E 0A 2C 46 FE C9 75 F4 8A C5 59  // ...s...,F..u...Y
    0750: C3 02 01 04 08 20 10 40 80 00 50 51 B0 B6 E6 43  // ..... .@..PQ...C
    0760: B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61  // .3.B...B.a.....a
    0770: 8A C4 B9 C8 00 E8 C2 2F E6 61 59 58 C3 00 1E 56  // ......./.aYX...V
    0780: 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E  // ...>...v........
    0790: 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC  // ........!..3.2..
    07A0: 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00  // .........&!.^...
    07B0: E8 23 2E 75 03 E8 58 30 E8 B3 2E E8 30 2E E8 59  // .#.u..X0....0..Y
    07C0: 2B E8 7A 0D C3 B0 01 C3 BB 01 00 E8 B6 29 C3 BB  // +.z..........)..
    07D0: 01 00 E8 B9 29 C3 E8 EF 2F C3 53 BB 04 00 E8 B7  // ....).../.S.....
    07E0: 29 24 06 3C 04 75 10 BB 05 00 E8 AB 29 66 0B C0  // )$.<.u......)f..
    07F0: 74 05 66 33 C0 EB 08 BB 04 00 E8 9B 29 33 C0 5B  // t.f3........)3.[
    0800: C3 E8 9C 2F BB 0A 00 E8 84 29 C3 BB 0A 00 E8 73  // .../.....).....s
    0810: 29 66 8B C8 E8 89 2F BB 0A 00 66 2B C1 E8 6E 29  // )f..../...f+..n)
    0820: C3 E8 29 00 0B C9 74 22 E8 7F 07 E8 99 18 66 51  // ..)...t"......fQ
    0830: 66 8B C8 BB 07 00 E8 4B 29 66 25 00 FE 00 00 66  // f......K)f%....f
    0840: 0B C1 E8 49 29 66 59 0C 01 C3 32 C0 C3 E8 0C 04  // ...I)fY...2.....
    0850: 0B C9 75 46 E8 01 07 E8 1F 19 75 12 8B D1 8B CB  // ..uF......u.....
    0860: E8 A5 2A 23 C2 74 07 E8 A7 2A 33 D2 EB 29 33 D2  // ..*#.t...*3..)3.
    0870: E8 E5 06 57 E8 10 2D 8B 45 30 5F 0B C0 74 09 23  // ...W..-.E0_..t.#
    0880: C8 74 05 E8 01 07 EB 0F E8 CD 06 E8 F9 06 EB 07  // .t..............
    0890: 33 D2 E8 73 2A 8B C8 E8 D4 03 0B D1 E8 B9 06 23  // 3..s*..........#
    08A0: CA 66 C1 E6 10 33 F6 E8 3B 0C 74 15 E8 72 0D 85  // .f...3..;.t..r..
    08B0: C1 74 F4 51 E8 DB 13 59 75 ED E8 64 0D 33 C8 EB  // .t.Q...Yu..d.3..
    08C0: E6 66 C1 EE 10 C3 A8 10 75 5A E8 0C 18 66 C1 E6  // .f......uZ...f..
    08D0: 10 33 F6 E8 0F 0C 74 24 E8 DF 0B 74 0B E8 86 0D  // .3....t$...t....
    08E0: 24 03 3C 03 75 ED EB 0A E8 7B 0D A8 01 74 E4 E8  // $.<.u....{...t..
    08F0: 01 08 E8 62 19 B5 00 E8 73 0D EB D7 E8 84 01 32  // ...b....s......2
    0900: C9 33 F6 E8 23 0C E8 CB 18 E8 9B 2D FE C1 38 C1  // .3..#......-..8.
    0910: 72 F1 66 C1 EE 10 E8 B9 17 A8 20 75 57 A8 40 75  // r.f....... uW.@u
    0920: 03 E8 04 1F E8 A0 17 0A C0 75 19 32 C9 33 F6 E8  // .........u.2.3..
    0930: F7 0B 0B F6 74 05 B5 01 E8 A2 1F E8 69 2D FE C1  // ....t.......i-..
    0940: 38 C1 72 EB 33 F6 E8 91 0B 74 26 E8 F8 0C E8 B5  // 8.r.3....t&.....
    0950: 27 75 14 E8 23 04 0A DB 74 0D E8 96 07 E8 F7 18  // 'u..#...t.......
    0960: B5 00 E8 08 0D EB DF E8 CF 18 B5 01 E8 FE 0C EB  // ................
    0970: D5 E8 1C 01 C3 E8 90 29 C3 E8 BF 17 33 C9 33 D2  // .......)....3.3.
    0980: E8 EB 02 66 33 D2 66 33 C0 E8 19 0D E8 5D 00 B1  // ...f3.f3.....]..
    0990: FF E8 A1 00 33 F6 E8 4C 0B 74 10 E8 A8 0C E8 61  // ....3..L.t.....a
    09A0: 27 74 03 E8 29 19 E8 56 19 EB EB E8 C0 17 74 02  // 't..)..V......t.
    09B0: B3 01 E8 8A 02 32 C9 E8 36 03 E8 22 2C E8 48 29  // .....2..6..",.H)
    09C0: 0B C0 C3 E8 78 0B E8 72 17 66 33 C0 66 BA 00 F0  // ....x..r.f3.f...
    09D0: 00 F0 E8 30 02 51 B1 01 E8 06 03 59 33 F6 E8 04  // ...0.Q.....Y3...
    09E0: 0B 74 05 E8 E9 18 EB F6 E8 4D 1E C3 B8 02 00 E8  // .t.......M......
    09F0: D5 0A 74 40 B1 07 E8 EE 24 E8 07 0D A8 04 75 12  // ..t@....$.....u.
    0A00: E8 C1 30 83 3D 00 75 0A E8 FD 28 83 E0 FD E8 00  // ..0.=.u...(.....
    0A10: 29 C3 66 BA FF FF FB FF 66 B8 00 00 04 00 E8 84  // ).f.....f.......
    0A20: 0C E8 05 0F E8 04 30 8A C8 BB 04 00 E8 55 27 8A  // ......0......U'.
    0A30: E1 E8 5A 27 C3 E8 6A 27 74 34 38 E1 76 04 8A CC  // ..Z'..j't48.v...
    0A40: EB 06 38 C1 73 02 8A C8 BB 02 00 E8 36 27 8A E1  // ..8.s.......6'..
    0A50: E8 3B 27 BB 02 00 E8 2B 27 66 C1 E8 18 A8 20 75  // .;'....+'f.... u
    0A60: 08 B1 04 E8 81 24 0C 01 C3 E8 41 17 0C 01 C3 51  // .....$....A....Q
    0A70: E8 2F 27 74 0C 8A CC BB 02 00 E8 07 27 8A C4 8A  // ./'t........'...
    0A80: E1 59 C3 33 F6 E8 52 0A 74 05 E8 29 17 EB F6 C3  // .Y.3..R.t..)....
    0A90: 33 F6 E8 45 0A 74 05 E8 2B 17 EB F6 C3 E8 13 2D  // 3..E.t..+......-
    0AA0: 75 1B 80 F9 01 75 17 33 F6 E8 2E 0A 74 0C 51 E8  // u....u.3....t.Q.
    0AB0: 87 17 B5 01 E8 B6 0B 59 EB EF E8 D3 FF C3 E8 C2  // .......Y........
    0AC0: FF 33 F6 E8 14 0A 74 0C 51 E8 03 18 B5 00 E8 9C  // .3....t.Q.......
    0AD0: 0B 59 EB EF C3 B8 02 00 E8 EC 09 74 03 E8 07 24  // .Y.........t...$
    0AE0: C3 E8 D1 1D 8B C8 66 C1 E8 10 8B D0 C3 8A C3 24  // ......f........$
    0AF0: 80 E8 E5 15 32 C9 B5 10 E8 73 1D E8 A9 2B FE C1  // ....2....s...+..
    0B00: 38 C1 72 F2 C3 E8 5E 15 3B C1 7C 3A 8B C1 E8 9E  // 8.r...^.;.|:....
    0B10: 15 E8 99 1F 8B C8 51 E8 CE 15 E8 92 15 59 E8 8C  // ......Q......Y..
    0B20: 1F 3B C8 72 02 8B C1 8D 5C 04 E8 C1 31 32 C9 B5  // .;.r....\...12..
    0B30: 0F E8 3A 1D E8 70 2B FE C1 38 C1 72 F2 8D 5C 04  // ..:..p+..8.r..\.
    0B40: E8 28 32 0B C0 C3 33 C0 C3 52 E8 9C 00 8A C2 8B  // .(2...3..R......
    0B50: D1 66 C1 E2 10 8A D0 32 C0 B9 00 02 E8 2D 1F 66  // .f.....2.....-.f
    0B60: C1 EA 10 8B CA 5A E8 80 00 E8 FF 31 66 C1 E8 02  // .....Z.....1f...
    0B70: 0A F6 75 04 66 C1 E8 02 67 26 88 07 66 C1 E8 0A  // ..u.f...g&..f...
    0B80: 67 26 88 47 01 66 C1 E8 0A 67 26 88 47 02 66 83  // g&.G.f...g&.G.f.
    0B90: C7 04 83 C3 04 E2 D2 C3 51 E8 4D 00 53 67 26 8A  // ........Q.M.Sg&.
    0BA0: 47 02 66 C1 E0 0A 67 26 8A 47 01 66 C1 E0 0A 67  // G.f...g&.G.f...g
    0BB0: 26 8A 07 66 C1 E0 02 0A F6 75 04 66 C1 E0 02 E8  // &..f.....u.f....
    0BC0: 14 31 66 83 C7 04 83 C3 04 E2 D2 5B 59 8A C2 8B  // .1f........[Y...
    0BD0: D1 66 C1 E2 10 8A D0 B9 00 03 53 E8 AE 1E 5B E8  // .f........S...[.
    0BE0: C5 2A FE C1 38 C1 72 F2 C3 BB 00 18 33 C0 8A C2  // .*..8.r.....3...
    0BF0: C1 E0 02 03 D8 C3 53 BB 03 00 E8 87 25 66 25 FF  // ......S.....%f%.
    0C00: 0F FF 0F 5B C3 53 66 50 66 51 66 8B C8 BB 03 00  // ...[.SfPfQf.....
    0C10: E8 71 25 66 23 C2 66 0B C1 E8 72 25 66 59 66 58  // .q%f#.f...r%fYfX
    0C20: 5B C3 53 66 50 BB 06 00 E8 59 25 8A DC 66 58 8A  // [.SfP....Y%..fX.
    0C30: C3 80 E3 20 D0 EB 24 10 C0 E8 04 0A C3 5B C3 B8  // ... ..$......[..
    0C40: 2C 06 F6 C3 01 75 03 B8 0C 06 E8 45 00 B8 2D 06  // ,....u.....E..-.
    0C50: F6 C3 10 75 03 B8 0D 06 E8 37 00 C3 BB 05 00 E8  // ...u.....7......
    0C60: 22 25 25 FF 0F 8B C8 66 C1 E0 10 8B D0 C3 E8 97  // "%%....f........
    0C70: 26 23 C8 81 E2 15 01 23 D1 66 C1 E2 10 8B D1 BB  // &#.....#.f......
    0C80: 05 00 E8 FF 24 66 25 00 F0 EA FE 66 0B C2 E8 FD  // ....$f%....f....
    0C90: 24 C3 66 50 53 51 66 52 66 33 D2 33 DB 8A DC 8A  // $.fPSQfRf3.3....
    0CA0: E8 8A C8 80 E1 1F 66 BA 01 00 00 00 66 D3 E2 E8  // ......f.....f...
    0CB0: D2 24 66 0B C2 F6 C5 20 75 03 66 33 C2 E8 CE 24  // .$f.... u.f3...$
    0CC0: 66 5A 59 5B 66 58 C3 66 50 53 BB 06 00 E8 B4 24  // fZY[fX.fPS.....$
    0CD0: A8 10 75 09 BB F0 16 E8 91 30 3D 5A A5 5B 66 58  // ..u......0=Z.[fX
    0CE0: C3 B8 04 06 80 F1 01 C0 E1 05 0A C1 E8 A3 FF C3  // ................
    0CF0: 53 66 50 BB F8 16 E8 72 30 8A C1 E8 D8 2F 66 58  // SfP....r0..../fX
    0D00: 5B C3 53 BB F8 16 E8 62 30 83 E0 01 5B C3 66 50  // [.S....b0...[.fP
    0D10: E8 E3 FE A9 EA 0E 66 58 C3 BB 06 00 E8 65 24 66  // ......fX.....e$f
    0D20: C1 E8 10 25 FF 0F C3 BB 06 00 E8 57 24 66 25 FF  // ...%.......W$f%.
    0D30: FF 00 F0 66 C1 E2 10 66 0B C2 E8 51 24 C3 53 66  // ...f...f...Q$.Sf
    0D40: 50 BB 07 00 E8 3D 24 F6 C4 01 66 58 B0 06 74 02  // P....=$...fX..t.
    0D50: B0 08 5B C3 53 BB 07 00 E8 29 24 80 E4 FE 80 FD  // ..[.S....)$.....
    0D60: 06 74 03 80 CC 01 E8 25 24 5B C3 53 B8 06 06 C0  // .t.....%$[.S....
    0D70: E3 05 0A C3 E8 1B FF 5B C3 66 50 BB 06 00 E8 03  // .......[.fP.....
    0D80: 24 24 40 C0 E8 06 8A D8 66 58 C3 57 66 50 66 33  // $$@.....fX.WfPf3
    0D90: C0 B9 08 00 FC F3 66 AB 66 58 5F E8 BA 01 0B C0  // ......f.fX_.....
    0DA0: 75 09 E8 56 07 74 3C 85 C1 74 F7 E8 19 07 8D 9C  // u..V.t<..t......
    0DB0: 6A 01 E8 B6 2F 26 89 05 8D 9C 6E 01 E8 AC 2F 26  // j.../&....n.../&
    0DC0: 89 45 02 8D 9C B5 02 E8 A1 2F 02 C0 04 04 26 88  // .E......./....&.
    0DD0: 45 06 26 88 45 07 26 88 45 08 B0 07 26 88 45 04  // E.&.E.&.E...&.E.
    0DE0: 0A C0 C3 32 C0 C3 B3 81 E8 17 2D 75 04 83 C8 01  // ...2......-u....
    0DF0: C3 33 C0 C3 66 50 53 51 52 56 57 E8 C9 FE 74 03  // .3..fPSQRVW...t.
    0E00: E8 3B 07 5F 5E 5A 59 5B 66 58 C3 33 C9 E8 A3 29  // .;._^ZY[fX.3...)
    0E10: 0F 85 B5 00 66 BA FC FC 0C FF 66 33 C0 E8 85 08  // ....f.....f3....
    0E20: 33 F6 E8 C0 06 0F 84 83 00 E8 F5 07 A9 C8 0E 74  // 3..............t
    0E30: 5B E8 CF 08 A8 04 74 38 B8 11 00 E8 24 07 74 2B  // [.....t8....$.t+
    0E40: 8D 5C 28 E8 E5 09 3C 02 74 21 3C 01 74 11 56 8B  // .\(...<.t!<.t.V.
    0E50: F7 E8 F6 14 E8 CA 07 E8 81 00 5E 85 C1 74 0C E8  // ..........^..t..
    0E60: 68 00 56 8B F7 E8 BD 00 5E EB B7 E8 B7 00 EB B2  // h.V.....^.......
    0E70: A8 08 75 F7 A8 10 75 F3 B8 11 00 E8 E4 06 74 A2  // ..u...u.......t.
    0E80: E8 47 00 56 8B F7 E8 C1 14 5E EB 96 A9 11 00 74  // .G.V.....^.....t
    0E90: 91 B8 C8 0E E8 CB 06 75 89 E8 67 08 A8 02 74 06  // .......u..g...t.
    0EA0: E8 82 00 E9 7C FF E8 A1 14 E9 76 FF E8 2C 00 75  // ....|.....v..,.u
    0EB0: 03 E8 A4 00 33 F6 E8 2C 06 74 0E E8 63 07 85 C1  // ....3..,.t..c...
    0EC0: 74 F4 51 E8 78 09 59 EB ED C3 8D 5D 28 66 C1 E3  // t.Q.x.Y....](f..
    0ED0: 10 8D 5C 28 B9 49 00 E8 24 28 C3 66 50 53 52 56  // ..\(.I..$(.fPSRV
    0EE0: 33 C9 33 D2 8D 36 B4 0E E8 D7 07 A8 03 74 03 83  // 3.3..6.......t..
    0EF0: CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74 15 66 A9 01  // ..f........t.f..
    0F00: 00 00 00 74 07 BB 01 00 D3 E3 0B D3 66 D1 E8 46  // ...t........f..F
    0F10: EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3 03 07 01 05  // ......^Z[fX.....
    0F20: 06 09 0A 0B FF 66 50 53 51 E8 F5 06 0F BC D8 81  // .....fPSQ.......
    0F30: C3 E4 0E 8A 0F 66 B8 01 00 00 00 66 D3 E0 66 BA  // .....f.....f..f.
    0F40: FF FF FF FF E8 5E 07 59 5B 66 58 C3 01 12 0B 10  // .....^.Y[fX.....
    0F50: 09 13 14 11 0C 15 16 17 50 53 52 E8 7D FF 75 13  // ........PSR.}.u.
    0F60: B9 08 00 E8 A2 23 23 C8 75 19 33 C0 E8 8C 05 8B  // .....##.u.3.....
    0F70: C8 EB 10 83 F9 02 74 0B E8 FE FD 80 FB 01 75 03  // ......t.......u.
    0F80: 83 E1 FD 5A 5B 58 C3 57 52 50 E8 EE 25 8B D1 8B  // ...Z[X.WRP..%...
    0F90: 05 83 F8 FF 74 0B 83 C7 02 23 D0 74 F0 8B CA EB  // ....t....#.t....
    0FA0: 05 E8 64 23 8B C8 58 5A 5F C3 56 83 EC 04 8B EC  // ..d#..XZ_.V.....
    0FB0: 66 33 C0 66 89 46 00 66 BA 00 F0 00 F0 E8 45 FC  // f3.f.F.f......E.
    0FC0: 66 C1 E6 10 E8 34 05 0B C0 74 1E 85 C1 74 F5 55  // f....4...t...t.U
    0FD0: E8 56 00 5D 74 04 33 C8 EB EA E8 B9 06 66 3B 56  // .V.]t.3......f;V
    0FE0: 00 76 E1 66 89 56 00 EB DB E8 0A FC 74 07 66 8B  // .v.f.V......t.f.
    0FF0: 46 00 E8 05 00 83 C4 04 5E C3 33 F6 66 50 E8 D9  // F.......^.3.fP..
    1000: 04 66 58 8D 9C D8 02 E8 CC 2C 66 8B D0 E8 E6 FB  // .fX......,f.....
    1010: E8 CC 1A 8D 9C 1C 03 E8 51 2D 38 D0 74 0A 8A C2  // ........Q-8.t...
    1020: E8 B3 2C B0 02 E8 5D 06 C3 50 51 E8 99 04 32 C0  // ..,...]..PQ...2.
    1030: E8 52 06 E8 0E 04 E8 BA 00 8D 9C 40 03 E8 2B 2D  // .R.........@..+-
    1040: 38 E8 74 0A 8A C5 E8 8D 2C B0 02 E8 37 06 E8 3B  // 8.t.....,...7..;
    1050: 01 75 7F E8 96 01 75 7A E8 B7 00 74 75 E8 02 01  // .u....uz...tu...
    1060: 74 70 8D 9C 4C 01 E8 02 2D 8B C8 8B D3 8D 9C 00  // tp..L...-.......
    1070: 03 E8 F7 2C 3B C1 74 05 B0 02 E8 08 06 E8 B8 0B  // ...,;.t.........
    1080: 8D 9C 00 03 E8 35 1A 8D 9C D8 02 E8 48 2C 66 C1  // .....5......H,f.
    1090: CE 10 8B FE 66 C1 CE 10 E8 80 01 E8 CB 01 E8 89  // ....f...........
    10A0: 05 8A E9 8D 9C DC 02 32 C9 E8 6E 2C E8 72 05 66  // .......2..n,.r.f
    10B0: 25 FF 0F 00 00 E8 EE 04 80 F9 01 75 04 66 C1 E0  // %..........u.f..
    10C0: 10 59 58 66 BA FF FF FF FF 66 33 D0 E8 36 FB 33  // .YXf.....f3..6.3
    10D0: D2 C3 E8 05 00 0C 01 59 58 C3 8D 9C 4C 03 E8 8A  // .......YX...L...
    10E0: 2C 8A C4 E8 F0 2B 8D 9C D4 02 E8 7E 2C 8A C4 E8  // ,....+.....~,...
    10F0: E4 2B C3 53 66 50 8D 9C 4C 03 E8 6E 2C 8A E0 E8  // .+.SfP..L..n,...
    1100: D4 2B 8D 9C D4 02 E8 62 2C 8A E0 E8 C8 2B 66 58  // .+.....b,....+fX
    1110: 5B C3 56 83 EC 06 8B EC E8 AB 04 89 56 00 E8 9C  // [.V.........V...
    1120: 1C 89 5E 02 E8 1F 05 89 56 04 33 F6 E8 AB 03 74  // ..^.....V.3....t
    1130: 27 E8 92 04 3B 56 00 74 1B E8 0A 05 E8 D4 1F 74  // '...;V.t.......t
    1140: 08 8B 56 04 E8 CC 1F 75 E3 E8 7A 04 E8 6E 1C 3B  // ..V....u..z..n.;
    1150: 5E 02 75 D8 33 DB EB 03 80 CB 01 83 C4 06 0A DB  // ^.u.3...........
    1160: 5E C3 E8 61 04 E8 1C 04 8A DD E8 A0 1C 8B C1 80  // ^..a............
    1170: FD FF 74 0A E8 2F 04 80 F9 00 74 02 8A C4 8A E8  // ..t../....t.....
    1180: 8D 9C 3C 03 32 C9 E8 91 2B 0B DB C3 83 EC 08 8B  // ..<.2...+.......
    1190: EC E8 32 04 E8 ED 03 E8 92 1B 56 8A 6E 00 E8 36  // ..2.......V.n..6
    11A0: 00 0B F6 5E 74 14 F6 46 01 01 75 0E 83 C5 02 FE  // ...^t..F..u.....
    11B0: C9 0A C9 75 E5 80 CB 01 EB 17 8D 9C 4C 03 E8 AA  // ...u........L...
    11C0: 2B 38 C5 74 0A 8A C5 E8 0C 2B B0 02 E8 B6 04 32  // +8.t.....+.....2
    11D0: DB 83 C4 08 0A DB C3 51 33 F6 E8 FD 02 0B F6 74  // .......Q3......t
    11E0: 07 E8 46 04 38 E9 75 F2 0B F6 59 C3 33 C9 56 E8  // ..F.8.u...Y.3.V.
    11F0: 37 03 0B F6 5E 74 0C FE C1 E8 AB 24 38 C1 75 EE  // 7...^t.....$8.u.
    1200: 0C 01 C3 8D 9C D4 02 E8 61 2B 38 C8 74 0A 8A C1  // ........a+8.t...
    1210: E8 C3 2A B0 02 E8 6D 04 32 C0 C3 E8 0A 00 8D 9C  // ..*...m.2.......
    1220: D0 02 32 C9 E8 F3 2A C3 B5 00 8D 1D E8 3C 2B 66  // ..2...*......<+f
    1230: 8B D0 8D 9C 02 03 E8 32 2B 0B C0 74 2B 51 8B C8  // .......2+..t+Q..
    1240: 8D 9C 06 03 E8 24 2B 66 C1 E0 10 8B C1 59 66 3B  // .....$+f.....Yf;
    1250: C2 75 04 B5 00 EB 11 B5 02 E8 EA 03 E8 A7 1E 75  // .u.............u
    1260: 07 E8 BE F9 75 02 B5 01 C3 E8 96 03 8D 9C 40 03  // ....u.........@.
    1270: B1 03 E8 A5 2A E8 39 07 8D 9C 40 03 B1 02 E8 99  // ....*.9...@.....
    1280: 2A E8 00 03 80 FD 00 75 1D E8 94 00 66 81 FA F0  // *......u....f...
    1290: D2 00 00 75 06 66 BA 78 69 00 00 E8 B5 00 E8 EE  // ...u.f.xi.......
    12A0: 00 E8 D4 03 EB 38 E8 AA 03 E8 CC 03 66 52 E8 20  // .....8......fR. 
    12B0: 03 0B D2 74 07 E8 3F 1B 66 5A EB 22 E8 87 03 E8  // ...t..?.fZ."....
    12C0: 74 1E 66 5A 51 E8 BC 02 80 FD 02 59 75 10 B5 04  // t.fZQ......Yu...
    12D0: 66 81 FA 74 40 00 00 76 05 B5 08 66 D1 EA 8D 9C  // f..t@..v...f....
    12E0: 54 03 66 8B C2 E8 EE 29 8D 9C 40 03 E8 7C 2A 8A  // T.f....)..@..|*.
    12F0: E5 E8 E2 29 E8 1D 01 8D 9C 48 03 32 C9 E8 1A 2A  // ...).....H.2...*
    1300: E8 C3 02 E8 7E 02 E8 F1 1A 8D 9C 58 03 32 C9 E8  // ....~......X.2..
    1310: 08 2A E8 B1 02 E8 6C 02 8D 9C 60 03 E8 52 1A C3  // .*....l...`..R..
    1320: 53 8D 9C 29 01 E8 43 2A 66 33 D2 0A C0 75 05 BA  // S..)..C*f3...u..
    1330: 48 3F 5B C3 8A D0 66 B8 8C 0A 00 00 F7 E2 66 8B  // H?[...f.......f.
    1340: F8 E8 82 02 B3 00 E8 62 19 66 3B D7 76 03 66 8B  // .......b.f;.v.f.
    1350: D7 5B C3 B7 01 53 8D 9C 42 03 E8 0E 2A 8A C8 5B  // .[...S..B...*..[
    1360: 66 52 E8 83 00 E8 EB 02 66 3B D1 66 5A 76 09 D0  // fR......f;.fZv..
    1370: E7 E8 07 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A 01  // ....8.r....S..*.
    1380: E8 E8 29 24 0F 8A E8 0A ED 75 02 B5 01 5B C3 51  // ..)$.....u...[.Q
    1390: 83 EC 08 8B EC 66 C7 46 00 48 3F 78 69 66 C7 46  // .....f.F.H?xif.F
    13A0: 04 F0 D2 00 00 E8 29 02 0B D2 74 03 E8 67 1A 8A  // ......)...t..g..
    13B0: FD 53 8D 9C 42 03 E8 B2 29 8A C8 5B E8 61 FF 66  // .S..B...)..[.a.f
    13C0: 33 C0 8B 46 00 66 3B C2 73 19 66 8B D0 E8 18 00  // 3..F.f;.s.f.....
    13D0: E8 80 02 66 3B D1 72 05 83 C5 02 EB D4 66 33 D2  // ...f;.r......f3.
    13E0: 8B 56 00 83 C4 08 59 C3 66 52 52 32 ED 83 C1 02  // .V....Y.fRR2....
    13F0: B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 33 C0 8B  // .....f3...ZQf3..
    1400: C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B  // ...f..f...Yf..f.
    1410: C8 66 5A C3 E8 BA 01 0B D2 74 0B E8 16 00 0A ED  // .fZ......t......
    1420: 75 11 E8 E9 18 C3 B5 00 E8 1B 02 E8 D4 1C 75 03  // u.............u.
    1430: E8 01 00 C3 B5 00 8D 9C 31 01 E8 2E 29 A8 01 74  // ........1...)..t
    1440: 02 B5 01 C3 53 E8 89 01 66 C1 E2 10 E8 77 01 8D  // ....S...f....w..
    1450: 9C B8 02 E8 15 29 8A E8 E8 82 18 8A EB 5B C3 57  // .....).......[.W
    1460: 53 53 E8 DF FF E8 5E 01 5B E8 60 19 74 49 80 FD  // SS....^.[.`.tI..
    1470: 00 75 24 53 E8 A9 FE E8 37 05 8A CD E8 FC FE 8A  // .u$S....7.......
    1480: FD E8 64 FF 5B E8 E3 28 66 25 FF FF 00 00 66 3B  // ..d.[..(f%....f;
    1490: C8 73 21 32 DB EB 20 80 FD 02 75 18 53 E8 A6 01  // .s!2.. ...u.S...
    14A0: E8 70 1C 5B 74 0E 8D 1D E8 C0 28 3D 74 40 76 04  // .p.[t.....(=t@v.
    14B0: 32 DB EB 03 80 CB 01 5B 5F C3 53 E8 63 01 8B D8  // 2......[_.S.c...
    14C0: E8 33 F7 85 C3 5B C3 53 8B F0 E8 3B 1E 23 F0 74  // .3...[.S...;.#.t
    14D0: 07 8B C6 E8 DC 1C 8B F3 5B C3 E8 08 00 74 05 E8  // ........[....t..
    14E0: D8 FF 74 F6 C3 33 C0 0B F6 74 03 E8 33 01 33 F6  // ..t..3...t..3.3.
    14F0: E8 08 00 74 03 E8 CF FF 0B F6 C3 57 53 E8 7B 20  // ...t.......WS.{ 
    1500: 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83  // ..t......;.u....
    1510: FB FF 74 0E 83 C7 02 E8 EE 1D 85 D8 74 EF 8B C3  // ..t.........t...
    1520: EB 02 33 C0 0B C0 5B 5F C3 51 33 F6 8A E9 E8 A9  // ..3...[_.Q3.....
    1530: FF 74 07 E8 70 00 38 E9 75 F4 0B F6 59 C3 33 C0  // .t..p.8.u...Y.3.
    1540: E8 B8 FF 74 13 E8 7F FF 8B DE B9 FB 00 E8 69 21  // ...t..........i!
    1550: 83 C6 08 E8 35 1D EB E8 BB F0 16 B8 5A A5 E8 8D  // ....5.......Z...
    1560: 27 C3 56 51 E8 DF 00 8B CA 8B FE 33 F6 E8 75 FF  // '.VQ.......3..u.
    1570: 74 0B 3B FE 74 F7 E8 CD 00 3B D1 75 F0 8B FE 0B  // t.;.t....;.u....
    1580: FF 59 5E C3 53 66 50 8D 9C 40 03 E8 DD 27 8A E8  // .Y^.SfP..@...'..
    1590: 66 58 5B C3 8D 9C 69 03 E8 D0 27 C3 8D 9C 64 03  // fX[...i...'...d.
    15A0: E8 C8 27 0B C0 C3 53 66 50 8D 9C D4 02 E8 BB 27  // ..'...SfP......'
    15B0: 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8 AB 27  // ..fX[.SfP......'
    15C0: 8A C8 66 58 5B C3 53 8D 5C 14 E8 9E 27 8B D0 5B  // ..fX[.S.\...'..[
    15D0: C3 53 66 50 8D 5C 16 E8 91 27 8B D0 66 58 5B C3  // .SfP.\...'..fX[.
    15E0: 53 66 50 8D 9C 50 03 E8 81 27 66 8B D0 66 58 5B  // SfP..P...'f..fX[
    15F0: C3 53 66 50 8D 9C 54 03 E8 70 27 66 8B D0 66 58  // .SfP..T..p'f..fX
    1600: 5B C3 53 66 50 8D 5C 10 E8 60 27 8B C8 66 58 5B  // [.SfP.\..`'..fX[
    1610: C3 66 50 53 8D 9C 41 03 E8 50 27 5B 8A D8 66 58  // .fPS..A..P'[..fX
    1620: C3 53 8D 5C 08 E8 43 27 5B C3 53 50 8D 9C 4C 03  // .S.\..C'[.SP..L.
    1630: E8 38 27 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 2A  // .8'..X[.SP..M..*
    1640: 27 8A C8 58 5B C3 53 50 8D 5C 0C E8 1D 27 8B D0  // '..X[.SP.\...'..
    1650: 58 5B C3 53 66 50 8D 9C 00 03 E8 0E 27 66 33 D2  // X[.SfP......'f3.
    1660: 8B D0 66 58 5B C3 8D 5C 04 E8 FF 26 C3 51 8D 5C  // ..fX[..\...&.Q.\
    1670: 04 32 C9 E8 A4 26 59 C3 8D 9C 50 03 E8 EC 26 8B  // .2...&Y...P...&.
    1680: C2 E8 52 26 C3 53 51 8A E8 E8 DA FF 24 FD 0A E8  // ..R&.SQ.....$...
    1690: E8 DA FF 59 5B C3 66 50 8D 9C D8 02 E8 CC 26 66  // ...Y[.fP......&f
    16A0: 8B D0 66 58 C3 53 66 50 66 51 66 8B C8 BB 00 00  // ..fX.SfPfQf.....
    16B0: E8 D1 1A 66 23 C2 66 0B C1 E8 D2 1A 66 59 66 58  // ...f#.f.....fYfX
    16C0: 5B C3 BB 00 00 E8 BC 1A 66 25 03 03 FF 00 C3 57  // [.......f%.....W
    16D0: 0B C0 75 10 33 F6 E8 0C FE 74 26 E8 25 00 A8 04  // ..u.3....t&.%...
    16E0: 74 F4 EB 13 8B C8 E8 1F 1C 23 C1 74 14 E8 D7 FD  // t........#.t....
    16F0: E8 10 00 A8 04 74 0A 5F 8D 5C 28 E8 8B 05 0B F6  // .....t._.\(.....
    1700: C3 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF E8 FF 19  // ._......tr.9....
    1710: 74 30 0A ED 74 10 8A CD B5 02 E8 67 1F B1 02 8D  // t0..t......g....
    1720: 9C 48 01 E8 F4 25 E8 92 02 A8 04 74 15 8D 5C 28  // .H...%.....t..\(
    1730: E8 A1 00 74 0D E8 0E FF E8 CB 19 74 3F 80 FD 02  // ...t.......t?...
    1740: 74 3A 8D 5C 28 E8 83 00 E8 13 0C 33 C9 50 8D 9C  // t:.\(......3.P..
    1750: 28 01 E8 16 26 66 0B C0 74 03 B9 00 08 58 0A C0  // (...&f..t....X..
    1760: 75 13 8D 5C 28 E8 8A 00 75 0B 80 CD 02 E8 64 00  // u..\(...u.....d.
    1770: 74 03 80 CD 04 8D 9C 48 01 E8 9E 25 E8 C7 FE E8  // t......H...%....
    1780: 84 19 75 43 E8 BF 22 0B FF 74 3C 66 2E 81 3D 00  // ..uC.."..t<f..=.
    1790: FF FF FF 74 0F 06 0E 07 8D 5C 28 E8 EB 04 07 E8  // ...t.....\(.....
    17A0: DD 09 75 23 8D 5C 28 56 8B F7 B9 20 00 53 E8 66  // ..u#.\(V... .S.f
    17B0: 1F 5B 5E E8 1E 00 74 0F 33 C9 8D 9C 48 01 E8 71  // .[^...t.3...H..q
    17C0: 25 80 CD 06 E8 53 25 E8 F1 01 C3 51 B9 49 00 E8  // %....S%....Q.I..
    17D0: E7 1E 59 C3 51 E8 1A 00 75 14 E8 AF 01 3C 01 75  // ..Y.Q...u....<.u
    17E0: 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9  // .. ..'.u......3.
    17F0: 59 C3 53 E8 75 25 66 3D 00 FF FF FF 75 0E 83 C3  // Y.S.u%f=....u...
    1800: 04 E8 67 25 66 3D FF FF FF 00 75 00 5B C3 50 52  // ..g%f=....u.[.PR
    1810: 32 D2 E8 56 25 02 D0 02 D4 66 C1 E8 10 02 D0 02  // 2..V%....f......
    1820: D4 83 C3 04 E2 EC 0A D2 5A 58 C3 53 83 C3 14 E8  // ........ZX.S....
    1830: 39 25 A8 80 74 04 B0 02 EB 02 B0 01 5B C3 8D 9C  // 9%..t.......[...
    1840: 4C 01 E8 1F 01 E8 73 01 B5 13 A8 08 75 0C E8 F5  // L.....s.....u...
    1850: FD 8A EA 80 FD 13 75 02 B5 03 8D 9C B8 02 66 33  // ......u.......f3
    1860: C0 8A C5 E8 70 24 E8 B8 FD A9 11 00 74 37 B5 01  // ....p$......t7..
    1870: E8 22 01 E8 45 01 A8 04 75 17 55 BD 00 00 B8 61  // ."..E...u.U....a
    1880: 40 E8 F0 02 B8 45 40 E8 EA 02 5D B5 02 E8 8A 00  // @....E@...].....
    1890: C3 E8 2F 01 B5 02 8D 5C 28 E8 DD 00 75 02 B5 01  // ../....\(...u...
    18A0: E8 77 00 EB 67 A9 C8 0E 74 3E E8 0E 01 A8 08 74  // .w..g...t>.....t
    18B0: 08 8D 5C 28 E8 B4 00 74 B5 B5 02 E8 D7 00 E8 FA  // ..\(...t........
    18C0: 00 A8 04 74 0B 8D 5C 28 E8 F8 00 E8 F8 02 EB 0A  // ...t..\(........
    18D0: 8D 9C 68 01 B8 3C 55 E8 7A 05 E8 D4 00 80 FD 00  // ..h..<U.z.......
    18E0: 75 37 B5 02 E8 C0 00 C3 A9 22 00 74 2C B5 04 E8  // u7.......".t,...
    18F0: A3 00 8D 9C 68 01 56 E8 CA 21 8B F7 E8 58 03 5E  // ....h.V..!...X.^
    1900: E8 72 21 E8 A1 00 8D 5C 28 E8 98 21 8D 9C 68 01  // .r!....\(..!..h.
    1910: E8 4F 03 66 8B D1 E8 E9 07 C3 8D 9C B4 02 B1 02  // .O.f............
    1920: E8 F7 23 B5 02 E8 7F 00 C3 8D 9C 4C 01 E8 34 00  // ..#........L..4.
    1930: E8 88 00 A8 04 74 23 8D 5C 28 E8 86 00 E8 84 21  // .....t#.\(.....!
    1940: 8D 9C 68 01 06 0E 07 B9 07 00 E8 D6 1D 07 E8 60  // ..h............`
    1950: 00 E8 F2 FC 8D 5C 28 E8 75 21 8D 5C 28 E8 24 21  // .....\(.u!.\(.$!
    1960: E8 DB FE C3 B9 61 00 E8 4F 1D C3 53 81 C3 05 01  // .....a..O..S....
    1970: E8 F8 23 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75  // ..#$.<.[....=..u
    1980: 0A 53 83 C3 18 E8 E3 23 5B A8 01 C3 53 83 C3 12  // .S.....#[...S...
    1990: E8 D8 23 5B C3 8D 9C B4 02 32 C9 E8 7C 23 C3 8D  // ..#[.....2..|#..
    19A0: 9C B4 02 E8 C5 23 C3 8D 9C B4 02 B1 01 E8 6A 23  // .....#........j#
    19B0: C3 8D 9C B4 02 B1 01 E8 78 23 C3 8D 9C 48 01 E8  // ........x#...H..
    19C0: A9 23 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B  // .#.UWQ.........+
    19D0: D9 D1 E3 8D 58 4E E8 92 23 E8 98 01 E2 EE 8D 5C  // ....XN..#......\
    19E0: 4B E8 87 23 B9 04 00 8B D0 BF E8 19 85 55 06 74  // K..#.........U.t
    19F0: 17 66 8B 05 8D 9A F4 01 E8 DB 22 8B 45 04 8D 9A  // .f........".E...
    1A00: F8 01 E8 E9 22 83 C5 08 83 C7 08 E2 DF 8D 7C 5E  // ....".........|^
    1A10: B9 04 00 33 ED 8B DF E8 51 23 0B C0 74 09 E8 12  // ...3....Q#..t...
    1A20: 01 E8 4C 00 83 C5 1C 83 C7 12 E2 E9 32 ED E8 76  // ..L.........2..v
    1A30: FF 8D 5C 28 E8 55 FF 3D 01 04 75 10 83 C3 14 E8  // ..\(.U.=..u.....
    1A40: 29 23 24 70 C0 E8 04 8A E8 E8 5B FF 59 5F 5D C3  // )#$p......[.Y_].
    1A50: 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00 08  //  .X.<.......<...
    1A60: 00 05 00 04 4B 00 00 01 80 02 E0 01 3C 00 20 00  // ....K.......<. .
    1A70: 51 8D 1D E8 F5 22 8D 9A 68 01 E8 71 22 8D 5D 02  // Q...."..h..q".].
    1A80: E8 E8 22 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 DB 22  // .."..j.....]..."
    1A90: 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 CE 22 8B C8 8A  // ..n..|..]..."...
    1AA0: DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A  // .f..............
    1AB0: EC C0 E5 06 8A FC C0 E7 04 80 E7 03 80 E4 0F C0  // ................
    1AC0: E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B  // ......?.........
    1AD0: C3 8D 9A 74 01 E8 16 22 8D 9A 72 01 8B C1 E8 0D  // ...t..."..r.....
    1AE0: 22 8D 9A 76 01 33 C0 8A C6 E8 02 22 8D 9A 78 01  // "..v.3....."..x.
    1AF0: 33 C0 8A C2 E8 F7 21 8D 5D 0C E8 6E 22 8D 9A 7A  // 3.....!.]..n"..z
    1B00: 01 E8 0F 00 8D 5D 0F E8 61 22 8D 9A 7E 01 E8 DD  // .....]..a"..~...
    1B10: 21 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F  // !Y.....f........
    1B20: 8A E8 C0 ED 04 8B C1 E8 C4 21 83 C3 02 8B C2 E8  // .........!......
    1B30: BC 21 C3 8D 5D 11 E8 32 22 8A E0 BA 06 02 C0 E8  // .!..]..2".......
    1B40: 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75  // .t.........$.<.u
    1B50: 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03  // ...@<.u.......t.
    1B60: 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A 80 01  // .....t..........
    1B70: E8 7B 21 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04  // .{!.<.t=.....$?.
    1B80: 3C 8D 9A F8 01 E8 66 21 0F B6 C2 83 C0 1F C1 E0  // <.....f!........
    1B90: 03 8D 9A F4 01 E8 56 21 0F B6 DE C1 EB 06 C1 E3  // ......V!........
    1BA0: 02 2E F7 A7 50 1B 2E F7 B7 4E 1B 8D 9A F6 01 E8  // ....P....N......
    1BB0: 3C 21 83 C5 08 C3 01 00 01 00 04 00 03 00 05 00  // <!..............
    1BC0: 04 00 10 00 09 00 57 8D 9C 68 01 8B FB 8B DF E8  // ......W..h......
    1BD0: 90 00 0B C9 74 44 8D 5D 18 E8 8F 21 A8 80 74 0D  // ....tD.]...!..t.
    1BE0: 8B DF 56 8D 36 B4 1B E8 6D 00 5E EB 28 66 8B D1  // ..V.6...m.^.(f..
    1BF0: E8 0F 05 8D 9C A6 00 E8 71 21 3C 01 75 17 66 81  // ........q!<.u.f.
    1C00: F9 80 07 38 04 74 09 66 81 F9 00 05 D0 02 75 05  // ...8.t.f......u.
    1C10: B5 03 E8 80 FD 83 C7 1C EB B3 5F C3 8C 0A D0 02  // .........._.....
    1C20: 8A 00 E0 01 2D 00 10 00 3E 00 09 00 06 00 00 00  // ....-...>.......
    1C30: 00 00 00 00 06 00 00 00 50 53 51 B9 07 00 53 8B  // ........PSQ...S.
    1C40: DA E8 27 21 83 F8 00 5B 74 09 66 C1 E3 10 8B DA  // ..'!...[t.f.....
    1C50: E8 AB 1A 59 5B 58 C3 51 53 B9 07 00 E8 B8 1A 5B  // ...Y[X.QS......[
    1C60: 59 C3 66 50 53 83 C3 06 E8 00 21 5B 8B C8 66 C1  // Y.fPS.....![..f.
    1C70: E1 10 53 83 C3 02 E8 F2 20 8B C8 5B 66 58 C3 8D  // ..S..... ..[fX..
    1C80: 9C 48 01 32 C9 E8 92 20 C3 57 B9 20 00 E8 93 1A  // .H.2... .W. ....
    1C90: 5F C3 E8 0A FD 3C 01 75 71 8D 9C B6 02 E8 CB 20  // _....<.uq...... 
    1CA0: A8 02 0F 84 89 00 66 C1 CE 10 E8 1A 04 66 C1 CE  // ......f......f..
    1CB0: 10 0A C0 75 26 8D 9C 4C 01 66 B8 C4 09 00 00 E8  // ...u&..L.f......
    1CC0: 14 20 8D 9C 4C 01 E8 96 F7 0F 85 88 00 8D 9C 4C  // . ..L..........L
    1CD0: 01 B8 3C 6A E8 7D 01 0C 01 EB 7A 8D 9C 68 01 B0  // ..<j.}....z..h..
    1CE0: 00 E8 36 01 75 07 B0 00 E8 DF 00 74 68 8D 9C 68  // ..6.u......th..h
    1CF0: 01 B0 01 E8 24 01 75 52 B0 01 E8 B0 00 75 56 B0  // ....$.uR.....uV.
    1D00: 00 E8 A9 00 EB 4F 0B F6 EB 4B 3C 04 74 21 3C 03  // .....O...K<.t!<.
    1D10: 74 1D 66 C1 CE 10 E8 AE 03 66 C1 CE 10 0A C0 74  // t.f......f.....t
    1D20: 07 B0 01 E8 A4 00 75 2D B0 00 E8 9D 00 75 26 8D  // ......u-.....u&.
    1D30: BC 68 01 8D 1D E8 33 20 0B C0 74 19 8B DF B0 00  // .h....3 ..t.....
    1D40: E8 D7 00 75 05 83 C7 1C EB E9 8B D3 8D 9C 4C 01  // ...u..........L.
    1D50: E8 E5 FE 0B F6 C3 57 53 51 E8 46 18 3B 55 02 75  // ......WSQ.F.;U.u
    1D60: 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09  // .f.....f...;].u.
    1D70: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2  // ..t.:E.t......3.
    1D80: EB 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 12 18  // ......Y[_.QfR...
    1D90: 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7  // :e.u...t.:E.t...
    1DA0: 1C E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 51 E8 F1  // ...3.....fZY.Q..
    1DB0: 17 56 8D 9C 4C 01 8B F7 E8 9C FE 5E E8 5B 00 75  // .V..L......^.[.u
    1DC0: 07 83 C7 1C E2 EB 33 FF 59 C3 8D BC F4 01 8A C8  // ......3.Y.......
    1DD0: 8D 1D E8 96 1F 0B C0 74 40 66 50 E8 C1 FB 3C 01  // .......t@fP...<.
    1DE0: 66 58 74 05 3D 40 06 73 2B 66 8B D0 8D 5D 04 E8  // fXt.=@.s+f...]..
    1DF0: 79 1F E8 61 FF 74 1D 8D 9C 4C 01 56 8B F2 E8 56  // y..a.t...L.V...V
    1E00: FE 5E 53 8D 9C 62 01 33 C0 E8 E2 1E 5B 8A C1 E8  // .^S..b.3....[...
    1E10: 08 00 75 05 83 C7 08 EB B7 C3 66 51 50 53 66 C1  // ..u.......fQPSf.
    1E20: CE 10 8B DE 66 C1 CE 10 E8 40 1F 5B 66 8B D0 E8  // ....f....@.[f...
    1E30: 30 FE 58 3C 01 75 0A 66 3B CA 75 13 E8 20 F6 75  // 0.X<.u.f;.u.. .u
    1E40: 10 3B CA 72 0A 66 3B CA 72 05 E8 12 F6 75 02 32  // .;.r.f;.r....u.2
    1E50: C0 66 59 C3 56 57 E8 31 FF 8B F7 E8 F9 FD 5F 5E  // .fY.VW.1......_^
    1E60: C3 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8  // .fPSfQRWVQ......
    1E70: 47 18 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 55  // G.Y.\...f......U
    1E80: 1E F6 C2 03 75 24 8B C1 24 7F BF 44 1F 80 3D FF  // ....u$..$..D..=.
    1E90: 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05  // ....:.u.f.E.f...
    1EA0: 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B  // .............t%.
    1EB0: C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0  // ..p.....3.......
    1EC0: 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8  // u..\.f%....f....
    1ED0: 04 1E EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2  // ................
    1EE0: F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25  // ........pr*..us%
    1EF0: 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8  // ..p..2.P.0...X8.
    1F00: 72 05 33 C0 E9 9C 00 E8 28 02 E8 5E 1E 0B C0 0F  // r.3.....(..^....
    1F10: 84 90 00 EB 1B 32 C0 E8 70 FE 0F 84 85 00 8D 5C  // .....2..p......\
    1F20: 16 8B 05 E8 C8 1D 8B 45 06 66 C1 E0 10 8B 45 02  // .......E.f....E.
    1F30: 50 E8 79 0B 66 C1 E1 10 8B C8 58 8D 1C E8 96 1D  // P.y.f.....X.....
    1F40: 66 50 8D 5C 04 66 8B C1 E8 8B 1D 66 58 66 C1 E8  // fP.\.f.....fXf..
    1F50: 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06  // .f......f..fP.\.
    1F60: E8 08 1E 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D  // .....fXf..f...@.
    1F70: 5C 14 E8 79 1D BF A4 1F 83 F9 01 74 11 BF AC 1F  // \..y.......t....
    1F80: 81 F9 01 01 74 08 BF B4 1F 83 F9 02 75 15 8D 5C  // ....t.......u..\
    1F90: 0C 66 8B 05 E8 3F 1D 8D 5C 10 66 8B 45 04 E8 35  // .f...?..\.f.E..5
    1FA0: 1D 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90  // ...^_ZfY[fX..@..
    1FB0: 01 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01  // ..@.............
    1FC0: 04 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07  // .@....@.........
    1FD0: D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80  // ..^..@..........
    1FE0: 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02  // .^....^.........
    1FF0: E0 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0  // .......# ...2 ..
    2000: 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05  // .3 ...b.........
    2010: 05 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08  // ................
    2020: 08 00 00 00 56 E8 0F 1A 80 E4 01 3B 04 74 09 83  // ....V......;.t..
    2030: C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57  // ....3....D...^.W
    2040: 53 50 E8 F2 19 83 E9 0A E8 E0 00 83 F8 05 76 03  // SP............v.
    2050: B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF  // ................
    2060: FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77  // ..X[_.fSQfR.A..w
    2070: 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66  // .f...f...f.....f
    2080: D3 E8 66 33 D2 66 F7 F3 E8 22 0A 66 5A 59 66 5B  // ..f3.f...".fZYf[
    2090: C3 53 66 50 BB 07 00 E8 EA 10 0A C0 66 58 5B C3  // .SfP........fX[.
    20A0: 53 66 50 BB 07 00 E8 DB 10 A8 01 66 58 5B C3 53  // SfP........fX[.S
    20B0: 66 50 8D 5C 06 E8 B3 1C 8A C8 66 58 5B C3 51 B9  // fP.\......fX[.Q.
    20C0: 08 00 E8 39 16 59 C3 53 8D 5C 08 E8 9D 1C 24 03  // ...9.Y.S.\....$.
    20D0: 5B C3 8D 5C 09 E8 93 1C C3 51 53 B1 01 8A E8 8D  // [..\.....QS.....
    20E0: 5C 08 E8 35 1C 5B 59 C3 53 8D 1C E8 7D 1C 5B C3  // \..5.[Y.S...}.[.
    20F0: 53 8D 5C 04 E8 74 1C 5B C3 53 8D 5C 16 E8 6B 1C  // S.\..t.[.S.\..k.
    2100: 5B C3 53 66 52 33 C0 E8 4C FC 66 5A 75 1B E8 34  // [.SfR3..L.fZu..4
    2110: 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 B7 1B 48  // .t....@...s....H
    2120: E8 0F 00 66 8B C2 E8 AD 1B 5B C3 BB 00 1E E8 3A  // ...f.....[.....:
    2130: 1C C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32  // ...............2
    2140: 00 E8 75 15 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB  // ..u..Q.....t....
    2150: 08 1E E8 16 1C 66 3B C2 74 07 83 C3 08 E2 F3 0B  // .....f;.t.......
    2160: DB 59 C3 B3 01 E8 9A 19 75 03 E8 1A E5 C3 B3 02  // .Y......u.......
    2170: E8 8F 19 75 03 E8 0F E5 C3 B3 89 E8 09 E5 C3 B3  // ...u............
    2180: 1B E8 03 E5 C3 E8 0A EB 51 B9 0B 01 E8 F5 14 59  // ........Q......Y
    2190: C3 B8 22 06 E8 EE FF C3 B8 3F 06 E8 E7 FF C3 B8  // .."......?......
    21A0: 20 06 E8 E0 FF C3 B8 2E 06 E8 D9 FF C3 B8 3E 06  //  .............>.
    21B0: E8 D2 FF C3 C3 00 BB 20 DF E8 03 3E E8 E7 F3 B5  // ....... ...>....
    21C0: 01 E8 45 07 C3 BB 00 DF E8 F4 3D E8 D8 F3 B5 00  // ..E.......=.....
    21D0: E8 36 07 C3 80 F9 00 75 17 E8 BA F4 E8 7C 19 0B  // .6.....u.....|..
    21E0: C0 74 03 E8 53 19 E8 C4 14 8A C8 B5 02 E8 0A 09  // .t..S...........
    21F0: 0B F6 74 29 E8 AF F3 B5 01 E8 21 07 56 33 F6 B5  // ..t)......!.V3..
    2200: 00 E8 6A 06 5E B5 01 E8 20 F4 E8 ED 08 E8 B5 09  // ..j.^... .......
    2210: E8 93 F3 8D 9C 00 03 E8 0A 07 E8 53 07 66 C1 CE  // ...........S.f..
    2220: 10 B5 01 E8 48 06 E8 A9 FE A8 40 75 07 32 C0 B5  // ....H.....@u.2..
    2230: 01 E8 58 08 66 C1 CE 10 C3 E8 6A F3 B5 01 E8 A3  // ..X.f.....j.....
    2240: 06 B5 00 E8 D7 06 E8 3A 07 B1 0F E8 F3 0B B1 10  // .......:........
    2250: E8 EE 0B E8 26 00 C3 E8 75 00 E8 59 F3 B5 00 E8  // ....&...u..Y....
    2260: 82 06 B5 00 E8 B6 06 E8 CE F3 E8 40 14 38 C1 74  // ...........@.8.t
    2270: 0A 80 F9 08 74 05 B5 03 E8 7F 08 C3 53 66 50 BB  // ....t.......SfP.
    2280: 02 00 E8 FF 0E 66 A9 00 00 01 00 66 58 5B 75 3E  // .....f.....fX[u>
    2290: E8 3E F3 0B D2 74 0C E8 CC F3 3C 01 74 05 B1 0F  // .>...t....<.t...
    22A0: E8 D8 0B B1 0C E8 75 00 B1 01 E8 3A 0C E8 D4 F2  // ......u....:....
    22B0: 80 FD 00 75 0D E8 FA 01 B1 0D E8 84 0B B1 03 E8  // ...u............
    22C0: 5B 00 E8 0C F3 0B D2 74 05 B1 01 E8 AD 0B C3 E8  // [......t........
    22D0: FF F2 0B D2 74 05 B1 00 E8 A0 0B B1 02 E8 3D 00  // ....t.........=.
    22E0: E8 83 F3 A8 01 74 0D E8 9A F2 80 FD 00 75 05 B0  // .....t.......u..
    22F0: 02 E8 26 04 B1 00 E8 EE 0B B1 0D E8 1F 00 C3 B1  // ..&.............
    2300: 07 E8 E3 0B E8 CA F2 0B D2 75 0C E8 38 F3 E8 F1  // .........u..8...
    2310: 0D 75 09 E8 E4 0C C3 B1 07 E8 5F 0B C3 E8 26 F3  // .u........_...&.
    2320: E8 DF 0D 75 24 51 E8 BE 0B 59 80 F9 0C 75 1A 33  // ...u$Q...Y...u.3
    2330: D2 56 83 C6 08 E8 08 0E 5E 0A C0 75 0C B9 0A 00  // .V......^..u....
    2340: E8 F7 13 42 83 FA 1E 75 E8 C3 E8 84 F2 0B D2 74  // ...B...u.......t
    2350: 06 B1 12 E8 25 0B C3 E8 6C F2 E8 C4 0A C3 56 83  // ....%...l.....V.
    2360: C6 08 E8 7C 0D 5E E8 68 F2 0B D2 74 03 E8 AD 09  // ...|.^.h...t....
    2370: 80 FD 01 0F 84 D1 00 80 FD 02 0F 85 F2 00 B1 0C  // ................
    2380: E8 9A FF 56 83 C6 08 E8 B6 0D 5E 0A C0 0F 84 DF  // ...V......^.....
    2390: 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C 35 01 E8 CA  // ............5...
    23A0: 19 A8 01 74 03 E8 7F 03 E8 26 F2 0B D2 74 05 B1  // ...t.....&...t..
    23B0: 14 E8 C7 0A 66 33 C9 E8 48 F2 66 BA 50 01 40 50  // ....f3..H.f.P.@P
    23C0: 66 C1 C9 10 8A C1 66 C1 C9 10 E8 6D 0C 0F 85 9F  // f.....f....m....
    23D0: 00 66 BA 50 01 50 4F 52 E8 F6 F1 80 FA 22 5A 74  // .f.P.POR....."Zt
    23E0: 0D 8D 9C 2D 01 E8 83 19 24 06 3C 02 75 02 B6 02  // ...-....$.<.u...
    23F0: 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8 3A 0C  // .\(f.....f....:.
    2400: 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1 C9 10  // un..2.f.....f...
    2410: 66 BA 50 01 10 30 33 DB E8 1F 0C 75 53 66 C1 C9  // f.P..03....uSf..
    2420: 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10 75 0F  // ...f.....tE...u.
    2430: 8D 5C 28 E8 35 19 66 0B C0 0F 85 7D FF EB 31 3D  // .\(.5.f....}..1=
    2440: 80 00 0F 82 74 FF EB 25 E8 B7 F1 8A E9 B1 A0 BA  // ....t..%........
    2450: 00 80 BF 32 00 8D 5C 28 E8 B4 0B 80 FF 01 74 0D  // ...2..\(......t.
    2460: B1 A2 8D 5C 28 E8 A7 0B 80 FF 01 75 03 B0 00 C3  // ...\(......u....
    2470: B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75 21 E8  // ....+.t......u!.
    2480: 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01 E8 A9  // ..u.f....C..0...
    2490: 0B 66 BA 20 00 90 41 8D 9C 34 01 E8 9C 0B 33 DB  // .f. ..A..4....3.
    24A0: C3 E8 5E F1 66 BA 00 00 90 47 8D 9C 28 01 E8 89  // ..^.f....G..(...
    24B0: 0B C3 E8 B1 F1 3C 01 75 0E E8 ED 02 80 FD 01 75  // .....<.u.......u
    24C0: 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00 E8 E8  // ................
    24D0: 11 B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9 19 01  // ....D.t.........
    24E0: B1 08 E8 5C 09 E8 66 02 B1 09 E8 54 09 E8 AC 01  // ...\..f....T....
    24F0: 8D 9C B8 03 66 33 C0 E8 DC 17 E8 47 01 B9 90 01  // ....f3.....G....
    2500: E8 2C 12 B0 01 E8 F7 01 B5 02 E8 D5 02 E8 5B 01  // .,............[.
    2510: E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8 E7 00  // ...........3....
    2520: F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6 C5 04  // ...u............
    2530: 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7 03 E8  // t...............
    2540: CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84 A9 00  // .....8.u..3.....
    2550: E8 54 01 FE C1 E8 B9 F0 38 D9 75 C1 8D 9C AC 03  // .T......8.u.....
    2560: E8 08 18 3C 03 74 05 E8 DA 00 EB A1 8D 9C B0 03  // ...<.t..........
    2570: 66 33 C0 E8 60 17 8D 9C 2A 01 E8 EE 17 A8 40 74  // f3..`...*.....@t
    2580: 0C B1 13 E8 BB 08 B0 03 E8 74 01 EB 0A B1 0A E8  // .........t......
    2590: AF 08 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC 00 E8  // .....h....F.....
    25A0: 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58 00 80  // X..8....8.3..X..
    25B0: FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23 02 59  // ..u..s.u'Q...#.Y
    25C0: F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65 00 8A  // ...u....$..-.e..
    25D0: D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00 74 19  // .....].8.u....t.
    25E0: FE C1 E8 2C F0 38 D9 75 C3 8D 9C AC 03 E8 7B 17  // ...,.8.u......{.
    25F0: 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01 B1 0B  // <.u..M..........
    2600: E8 3E 08 E8 A3 01 C3 8D 9C C0 03 E8 0F 00 8A E8  // .>..............
    2610: C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 4A  // .S.......[...Q.J
    2620: 17 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 3A  // ......$.Y......:
    2630: 17 A8 01 C3 8D 9C B8 03 E8 F7 16 C3 8D 9C B8 03  // ................
    2640: E8 D7 16 C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A  // ....3.3....8.v..
    2650: D5 FE C1 E8 BB EF 38 D9 72 EE 33 C9 8A EA 8D 9C  // ......8.r.3.....
    2660: 5C 03 E8 B5 16 B1 0B E8 7D 08 C3 E8 94 EF 8D 9C  // \.......}.......
    2670: B8 03 E8 F6 16 66 BA 03 01 80 83 E8 BC 09 C3 51  // .....f.........Q
    2680: 53 8D 9C B0 03 E8 AA 16 FE C5 E8 8D 16 80 FD 06  // S...............
    2690: 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33 C0 8D  // r....W.3.[Y.f3..
    26A0: 9C B0 03 E8 30 16 C3 32 ED E8 65 FF 80 E3 0C C0  // ....0..2..e.....
    26B0: EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03  // ....*.........r.
    26C0: 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80  // .. .K....8.r....
    26D0: FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 22 EF  // ..u.......`...".
    26E0: 8D 9C C0 03 66 BA 02 02 90 45 E8 4D 09 C3 E8 11  // ....f....E.M....
    26F0: EF 66 BA 00 01 90 42 8D 9C B4 03 E8 3C 09 C3 E8  // .f....B.....<...
    2700: 00 EF 66 BA 02 01 80 50 E8 2F 09 C3 E8 E2 EE 8B  // ..f....P./......
    2710: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 E5 EE 66 BA 00  // .f3..........f..
    2720: 06 80 50 E8 14 09 C3 E8 D8 EE 66 BA 11 01 80 50  // ..P.......f....P
    2730: B0 04 E8 05 09 C3 E8 C9 EE 66 BA 00 06 90 40 8D  // .........f....@.
    2740: 9C C8 03 E8 F4 08 8D 9C C8 03 E8 1E 16 C3 E8 BB  // ................
    2750: FF E8 BD EE 8A E3 80 CC 80 50 E8 A5 EE 58 66 BA  // .........P...Xf.
    2760: 00 01 80 61 E8 D3 08 33 C9 E8 30 EE 0B C0 74 02  // ...a...3..0...t.
    2770: B5 10 8D 9C BC 03 E8 A1 15 8A C5 E8 84 EE 66 BA  // ..............f.
    2780: 07 01 80 50 E8 B3 08 E8 BC EE E8 79 09 75 19 8D  // ...P.......y.u..
    2790: 9C 48 03 E8 D5 15 0A C0 74 0E E8 65 EE 66 BA 0A  // .H......t..e.f..
    27A0: 01 80 50 B0 01 E8 92 08 C3 E8 42 FF E8 2E FF E8  // ..P.......B.....
    27B0: 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8 47 FE  // ..<.u..q.t.3..G.
    27C0: 80 FD 07 75 0D FE C1 E8 47 EE 38 D9 75 EF B5 01  // ...u....G.8.u...
    27D0: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 39  // ...............9
    27E0: 15 C3 51 8D 9C AC 03 32 C9 E8 2E 15 59 C3 51 8D  // ..Q....2....Y.Q.
    27F0: 9C AC 03 B1 01 E8 22 15 59 C3 8D 9C 32 01 E8 6A  // ......".Y...2..j
    2800: 15 0A C0 75 15 B9 64 00 8D 9C AC 03 E8 5C 15 3C  // ...u..d......\.<
    2810: 02 74 03 B9 90 01 E8 16 0F C3 32 E4 B1 04 33 D2  // .t........2...3.
    2820: F6 E1 8B C8 E8 13 0F C3 51 8D 5C 14 E8 3C 15 66  // ........Q.\..<.f
    2830: C1 E0 10 E8 96 01 59 C3 33 C9 E8 6A 0E 38 C1 73  // ......Y.3..j.8.s
    2840: 05 B5 00 E8 A5 00 B5 00 E8 99 00 FE C1 E8 5A 0E  // ..............Z.
    2850: 38 C1 72 E6 32 C9 8A E9 E8 52 0E 38 C1 74 05 B5  // 8.r.2....R.8.t..
    2860: 03 E8 96 02 FE C1 E8 3B 0E 38 C1 72 E9 C3 83 EC  // .......;.8.r....
    2870: 0C 8B EC 0B F6 74 29 E8 6E F8 66 C1 C8 10 80 FD  // .....t).n.f.....
    2880: 10 75 06 8D 5C 18 E8 E2 14 66 89 46 00 8D 5C 04  // .u..\....f.F..\.
    2890: E8 D8 14 66 89 46 04 8D 5C 08 E8 CE 14 88 46 0A  // ...f.F..\.....F.
    28A0: 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 04  // .N...f......+...
    28B0: 0D 83 C4 0C C3 33 DB 83 EC 08 8B EC 89 5E 00 8C  // .....3.......^..
    28C0: D0 66 C1 E0 10 8B C4 BB 01 00 E8 E8 0C 8B EC 8B  // .f..............
    28D0: 4E 00 8B 56 02 66 8B 46 04 83 C4 08 C3 BB 25 00  // N..V.f.F......%.
    28E0: E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00 E8 01  // .....#..........
    28F0: 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10  // ........N...f...
    2900: 8B C4 E8 B0 0C 83 C4 04 C3 BB 22 00 E8 E3 FF 80  // ..........".....
    2910: FD 01 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB 2C 00  // ..t...........,.
    2920: E8 CF FF C3 E8 44 14 66 A9 00 00 FF FF 74 40 83  // .....D.f.....t@.
    2930: EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 2C 14 66  // ....UQ.......,.f
    2940: 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 1A  // .F..............
    2950: 14 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0  // .f...f.F.Y].N...
    2960: 66 C1 E0 10 8B C4 BB 31 00 E8 49 0C 83 C4 18 C3  // f......1..I.....
    2970: E8 33 EC 8D 9C D0 02 E8 F1 13 8A E8 BB 21 00 E8  // .3...........!..
    2980: 70 FF C3 8D 9C 3C 03 E8 E1 13 8A F8 E8 F5 EB 8A  // p....<..........
    2990: DD 53 8D 9C 42 03 E8 D2 13 8A E8 5B E8 07 EC E8  // .S..B......[....
    29A0: A4 EC E8 61 07 75 02 B3 01 83 EC 04 8B EC 88 4E  // ...a.u.........N
    29B0: 00 88 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10  // ..~..^..n...f...
    29C0: 8B C4 BB 2A 00 E8 ED 0B 83 C4 04 C3 83 EC 10 8B  // ...*............
    29D0: EC 66 8B C8 66 33 C0 66 89 46 04 BB 00 17 E8 F5  // .f..f3.f.F......
    29E0: 12 66 B8 00 80 20 50 66 89 46 0C 66 33 C0 66 89  // .f... Pf.F.f3.f.
    29F0: 46 08 56 E8 9A 0B 66 8B 44 04 66 50 66 C1 E8 16  // F.V...f.D.fPf...
    2A00: 88 46 08 66 58 66 C1 E0 0A 66 05 00 17 00 00 66  // .F.fXf...f.....f
    2A10: 89 46 00 5E 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8  // .F.^..f......5..
    2A20: 93 0B 8B EC 66 B8 00 80 00 00 66 2B C8 66 89 46  // ....f.....f+.f.F
    2A30: 04 66 05 00 00 20 40 66 89 46 0C 66 33 C0 66 89  // .f... @f.F.f3.f.
    2A40: 46 08 66 89 46 00 8C D0 66 C1 E0 10 8B C4 BB 35  // F.f.F...f......5
    2A50: 00 E8 61 0B 8B EC 66 8B 46 0C 66 25 FF FF 1F 00  // ..a...f.F.f%....
    2A60: 66 01 46 04 66 3B C8 76 1F 66 2B C8 66 8B 46 04  // f.F.f;.v.f+.f.F.
    2A70: 66 3D 00 FF 01 00 76 06 66 B8 00 FF 01 00 66 3B  // f=....v.f.....f;
    2A80: C8 73 AE 66 8B C1 EB A9 83 C4 10 C3 83 EC 08 8B  // .s.f............
    2A90: EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0  // ..N.f.V..^...f..
    2AA0: 10 8B C4 BB 2D 00 E8 0C 0B 83 C4 08 C3 3D C0 7F  // ....-........=..
    2AB0: 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 AB 12  // v.......?$..Q...
    2AC0: 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 9E 12 03 C1 66  // f3.............f
    2AD0: 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 83  // %....Y=.'s...'..
    2AE0: F8 02 75 13 66 81 FA 40 9C 00 00 77 0A E8 41 10  // ..u.f..@...w..A.
    2AF0: A8 10 74 03 B2 40 C3 32 D2 C3 66 33 FF 66 33 DB  // ..t..@.2..f3.f3.
    2B00: 66 33 C0 8A C1 66 BA 00 00 00 FF 80 FD 03 0F 84  // f3...f..........
    2B10: 87 00 80 FD 02 75 14 8D 9C 1C 03 E8 4D 12 66 C1  // .....u......M.f.
    2B20: E0 18 8A C1 E8 6F EB 33 DB EB 6E E8 98 00 53 8D  // .....o.3..n...S.
    2B30: 9C E4 02 66 8B C7 E8 9D 11 5B E8 F3 00 66 8B C3  // ...f.....[...f..
    2B40: 66 53 8D 9C E8 02 E8 8D 11 8D 9C EC 02 66 8B C7  // fS...........f..
    2B50: E8 83 11 66 5B 51 53 33 D2 80 F9 08 73 08 E8 3A  // ...f[QS3....s..:
    2B60: 01 74 03 80 CE 10 8D 9C 02 03 E8 FE 11 0B C0 75  // .t.............u
    2B70: 03 80 CE 03 E8 0D EA 8A D5 66 C1 E2 10 E8 46 EA  // .........f....F.
    2B80: 8A F2 8A D1 66 8B C2 E8 C9 EA 66 C1 E2 08 E8 15  // ....f.....f.....
    2B90: EA 8A D1 66 C1 CA 08 5B 59 83 EC 14 8B EC 66 89  // ...f...[Y.....f.
    2BA0: 46 08 66 89 5E 04 66 89 7E 0C 66 89 56 00 BB 0C  // F.f.^.f.~.f.V...
    2BB0: 00 8C D0 66 C1 E0 10 8B C4 E8 F9 09 8B EC 8A 5E  // ...f...........^
    2BC0: 0B 83 C4 14 C3 C3 83 EC 08 8B EC 51 E8 B5 E9 88  // ...........Q....
    2BD0: 6E 03 E8 0B EA 89 56 00 E8 EB E9 88 56 02 E8 F0  // n.....V.....V...
    2BE0: E9 88 56 05 80 FD 10 75 05 E8 D7 03 EB 26 33 D2  // ..V....u.....&3.
    2BF0: E8 A9 E9 74 03 80 CA 10 E8 16 EA 80 FB 04 76 03  // ...t..........v.
    2C00: 80 CA 40 8D 9C 58 03 E8 61 11 A8 02 74 03 80 CA  // ..@..X..a...t...
    2C10: 20 88 56 04 59 8C D0 66 C1 E0 10 8B C4 BB 11 00  //  .V.Y..f........
    2C20: E8 92 09 8B EC 66 8B 7E 00 8B 5E 04 83 C4 08 C3  // .....f.~..^.....
    2C30: 66 50 66 51 52 8A CF 0A FF 75 0B E8 90 0A 66 33  // fPfQR....u....f3
    2C40: D2 66 F7 F7 8A C8 8A EB 0A ED 75 03 E8 86 0A 51  // .f........u....Q
    2C50: 66 33 C0 8A C5 32 ED F7 E1 59 66 C1 E1 10 8A EF  // f3...2...Yf.....
    2C60: 66 F7 E7 66 BB E8 03 00 00 66 F7 E3 66 BB 30 00  // f..f.....f..f.0.
    2C70: 00 00 66 33 D2 66 F7 F3 66 33 D2 66 BB A0 86 01  // ..f3.f..f3.f....
    2C80: 00 66 F7 F3 66 8B D9 8B D8 66 B8 0A 00 00 00 66  // .f..f....f.....f
    2C90: F7 E2 66 8B F8 5A 66 59 66 58 C3 E8 F6 E8 A8 02  // ..f..ZfYfX......
    2CA0: C3 66 50 E8 EE E8 A8 01 66 58 C3 53 51 66 50 B9  // .fP.....fX.SQfP.
    2CB0: A0 8C 80 FB 00 75 1C B9 90 7E E8 86 08 83 E3 03  // .....u...~......
    2CC0: 80 FB 03 75 0E E8 B2 09 66 3D 50 C3 00 00 72 03  // ...u....f=P...r.
    2CD0: B9 F0 D2 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3  // ...f3...fXY[.fR.
    2CE0: 10 80 FA 14 74 25 B3 0F 80 FA 15 74 1E B3 00 66  // ....t%.....t...f
    2CF0: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    2D00: 74 09 B3 01 80 FD 0E 74 02 B3 02 66 5A C3 B5 11  // t......t...fZ...
    2D10: 80 FA 23 74 07 80 FA 22 74 02 B5 00 C3 B5 02 80  // ..#t..."t.......
    2D20: FA 23 74 07 80 FA 22 74 02 B3 01 C3 32 C9 B3 04  // .#t..."t....2...
    2D30: 80 FD 00 75 0F B3 02 E8 76 09 74 08 C7 46 00 0A  // ...u....v.t..F..
    2D40: 01 B1 01 C3 57 55 E8 7D 02 74 23 53 8B 5D 02 E8  // ....WU.}.t#S.]..
    2D50: 47 08 03 FB 5B 80 3D FF 74 14 84 5D 01 74 0A 8B  // G...[.=.t..].t..
    2D60: 05 89 46 00 83 C5 02 FE C1 83 C7 02 EB E7 5D 5F  // ..F...........]_
    2D70: C3 57 56 8B F3 8D 5C 04 66 33 C0 E8 58 0F 80 FD  // .WV...\.f3..X...
    2D80: 00 75 04 B0 07 EB 07 80 FD 01 75 23 B0 06 E8 47  // .u........u#...G
    2D90: 09 33 DB 0B FF 74 23 8D 5C 04 66 8B 45 04 E8 35  // .3...t#.\.f.E..5
    2DA0: 0F 83 C3 04 66 8B 45 08 E8 2B 0F 8B DE EB 0B 66  // ....f.E..+.....f
    2DB0: 33 C0 8D 5C 08 E8 1E 0F 8B DE 5E 5F C3 8B DA B7  // 3..\......^_....
    2DC0: 22 80 FE 21 74 02 B7 21 C3 0C 01 C3 E8 9C 0F 66  // "..!t..!.......f
    2DD0: C1 E8 10 0B C0 74 1A 53 83 C3 06 E8 8D 0F 5B 3D  // .....t.S......[=
    2DE0: E0 01 72 0D 53 83 C3 18 E8 80 0F 5B A9 10 00 74  // ..r.S......[...t
    2DF0: 03 32 C0 C3 0C 01 C3 B5 0C C3 32 ED BB 02 00 E8  // .2........2.....
    2E00: 82 03 66 C1 E8 18 A8 10 74 02 B5 02 C3 57 E8 B5  // ..f.....t....W..
    2E10: 01 8B 4D 06 5F C3 80 FA 22 75 05 C7 46 00 78 69  // ..M._..."u..F.xi
    2E20: C3 80 FA 15 75 1A 83 EC 0C 8B EC C6 46 02 00 8C  // ....u.......F...
    2E30: D0 66 C1 E0 10 8B C4 BB 15 00 E8 78 07 83 C4 0C  // .f.........x....
    2E40: C3 E8 99 01 80 FD FF 74 31 C0 E5 04 83 EC 08 8B  // .......t1.......
    2E50: EC 88 4E 03 88 6E 02 E8 53 00 80 F9 10 75 0A 8D  // ..N..n..S....u..
    2E60: 9C 48 03 E8 05 0F 88 46 04 8C D0 66 C1 E0 10 8B  // .H.....F...f....
    2E70: C4 BB 04 00 E8 3E 07 83 C4 08 C3 83 EC 10 8B EC  // .....>..........
    2E80: 88 4E 03 E8 4B E7 81 E2 00 07 FE CE C0 E6 04 88  // .N..K...........
    2E90: 76 02 E8 18 00 E8 BB E7 89 56 00 8C D0 66 C1 E0  // v........V...f..
    2EA0: 10 8B C4 BB 32 00 E8 0C 07 83 C4 10 C3 32 ED E8  // ....2........2..
    2EB0: 3F E7 81 FA 48 3F 74 1A B5 01 81 FA 78 69 74 12  // ?...H?t.....xit.
    2EC0: B5 02 81 FA F0 D2 74 0A B5 03 81 FA 90 7E 74 02  // ......t......~t.
    2ED0: 32 ED 08 6E 02 8D 9C 40 03 E8 8F 0E 66 89 46 04  // 2..n...@....f.F.
    2EE0: E8 FD E6 89 56 00 C3 80 F9 04 74 34 E8 D7 E6 80  // ....V.....t4....
    2EF0: FA 15 75 07 B5 01 BB 18 00 EB 0B 80 FA 14 75 20  // ..u...........u 
    2F00: E8 C0 00 BB 08 00 83 EC 08 8B EC 88 6E 02 88 4E  // ............n..N
    2F10: 03 8C D0 66 C1 E0 10 8B C4 E8 99 06 83 C4 08 C3  // ...f............
    2F20: 83 EC 0C 8B EC 80 F9 04 75 0A 88 4E 03 32 C0 88  // ........u..N.2..
    2F30: 46 02 EB 7D 32 C0 80 EE 21 80 FA 1E 74 15 B0 02  // F..}2...!...t...
    2F40: 80 FA 20 74 0E B0 04 80 FA 21 74 07 B0 06 80 FA  // .. t.....!t.....
    2F50: 25 75 6C 02 C6 88 46 02 88 4E 03 E8 E8 E6 88 56  // %ul...F..N.....V
    2F60: 05 8D 9C 5C 03 E8 03 0E 88 46 09 E8 94 E6 C0 E5  // ...\.....F......
    2F70: 04 8D 9C 58 03 E8 F3 0D 24 02 0A E8 E8 AB E6 80  // ...X....$.......
    2F80: F9 02 77 07 C0 E1 02 0A E9 EB 03 80 CD 0C 88 6E  // ..w............n
    2F90: 07 E8 4C E6 89 56 00 E8 77 E6 88 5E 04 E8 E4 E5  // ..L..V..w..^....
    2FA0: 88 6E 06 51 E8 36 00 8A CD B0 01 D2 E0 59 88 46  // .n.Q.6.......Y.F
    2FB0: 08 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 F6 05 83  // ...f......L.....
    2FC0: C4 0C C3 32 ED C3 E8 D0 05 03 7D 04 83 3D FF 74  // ...2......}..=.t
    2FD0: 0B 3B 15 74 05 83 C7 0A EB F2 0B FF C3 8D 9C 3C  // .;.t...........<
    2FE0: 03 E8 87 0D 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E  // ....2.<.t.<.r.<.
    2FF0: 77 05 2C 08 8A E8 C3 B5 FF C3 83 EC 08 8C D0 66  // w.,............f
    3000: C1 E0 10 8B C4 BB 4B 00 E8 AA 05 83 C4 08 C3 83  // ......K.........
    3010: EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06  // .....~..^..V..N.
    3020: 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 87 05 8B EC  // ..f......6......
    3030: 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2  // .^..~.....V3.f..
    3040: 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58  // ....u.P3.....2.X
    3050: 53 BB 04 3E E8 7F 0C 66 8B C2 BB 00 3E E8 76 0C  // S..>...f....>.v.
    3060: 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1  // [f......u.3...f.
    3070: E2 10 BA 00 3E 83 EC 08 8B EC 66 89 56 00 88 4E  // ....>.....f.V..N
    3080: 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00  // ......F..F...F..
    3090: 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 17 05 8B EC  // ..f......N......
    30A0: 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90  // .^..~......t2Q..
    30B0: 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6  // ... t....u......
    30C0: 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 5E  // ..t....<.t.....^
    30D0: 06 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E  // .Y.........v...^
    30E0: C3 8D 5C 04 E8 84 0C 8B D0 B5 02 E8 14 00 74 11  // ..\...........t.
    30F0: B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5  // .....u..a....u..
    3100: 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80  // .........t......
    3110: FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74  // ......t........t
    3120: 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04  // ........u.......
    3130: 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3  // u..........t....
    3140: 8D 5C 09 E8 25 0C 8A C8 0A C9 75 03 32 C0 C3 B5  // .\..%.....u.2...
    3150: 02 E8 30 05 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 0A  // ..0...$.....\...
    3160: 0C 8A D0 B6 01 83 EC 08 8B EC 89 56 02 8C D0 66  // ...........V...f
    3170: C1 E0 10 8B C4 BB 4F 00 E8 3A 04 8B EC 8A 56 04  // ......O..:....V.
    3180: 83 C4 08 C3 53 81 C3 C9 05 E8 B8 0B 5B C3 53 81  // ....S.......[.S.
    3190: C3 C9 05 E8 09 0B 5B C3 53 81 C3 00 10 E8 A4 0B  // ......[.S.......
    31A0: 5B C3 57 E8 AA 03 8A 45 2D B4 FF F7 45 50 20 00  // [.W....E-...EP .
    31B0: 5F C3 50 56 0F BC D8 8D 36 59 31 E8 11 06 5E 58  // _.PV....6Y1...^X
    31C0: C3 00 20 00 24 00 00 00 28 00 2C 00 30 00 34 00  // .. .$...(.,.0.4.
    31D0: 38 00 00 00 3C 00 40 00 44 53 56 51 8B F7 B3 00  // 8...<.@.DSVQ....
    31E0: E8 30 00 0B F6 74 16 49 0B C9 75 04 33 FF EB 0D  // .0...t.I..u.3...
    31F0: 8B DF 03 7D 02 3B F3 74 04 E2 F5 33 FF 0B FF 59  // ...}.;.t...3...Y
    3200: 5E 5B C3 0E 00 00 00 0A 00 06 00 08 00 0C 00 0E  // ^[..............
    3210: 00 10 00 56 8D 36 9B 31 E8 B4 05 E8 3B 03 03 DE  // ...V.6.1....;...
    3220: 8B 3F 0B FF 74 0B 03 FE 33 C9 8A 0D 83 C7 04 0B  // .?..t...3.......
    3230: FF 5E C3 51 56 53 C1 EB 0C E8 D7 FF 5B 75 04 33  // .^.QVS......[u.3
    3240: FF EB 0B 3B 1D 74 07 83 C7 08 E2 F7 33 FF 0B FF  // ...;.t......3...
    3250: 5E 59 C3 57 E8 DC FF 75 04 33 DB 5F C3 E8 02 00  // ^Y.W...u.3._....
    3260: 5F C3 52 51 8B 5D 04 0B DB 74 1B 56 E8 EA 02 03  // _.RQ.]...t.V....
    3270: DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74 06  // .^3..O..?.t.:.t.
    3280: 03 D9 EB F0 33 DB 0B DB 59 5A C3 50 8D 1C E8 45  // ....3...YZ.P...E
    3290: 0A 8B D8 E8 72 00 23 C3 74 6C 33 FF E8 3A FF 0B  // ....r.#.tl3..:..
    32A0: FF 74 63 39 05 75 F5 66 33 C0 8B 45 08 8B 4D 02  // .tc9.u.f3..E..M.
    32B0: 83 F9 0A 74 18 8B 4D 0A 8B D1 81 E2 00 70 80 FE  // ...t..M......p..
    32C0: 20 75 0A 66 C1 C8 10 8B C1 66 C1 C8 10 8D 5C 0C  //  u.f.....f....\.
    32D0: E8 03 0A 66 33 C0 8B 45 04 8D 5C 04 E8 F7 09 33  // ...f3..E..\....3
    32E0: C9 8B D8 50 B0 01 E8 6A FF 58 74 0F 8A 4F 02 8B  // ...P...j.Xt..O..
    32F0: D8 B0 02 E8 5D FF 74 03 8A 6F 02 8D 5C 08 66 33  // ....].t..o..\.f3
    3300: C0 8B C1 E8 D0 09 58 C3 56 E8 4D 02 8B 44 04 5E  // ......X.V.M..D.^
    3310: C3 56 E8 44 02 89 44 04 5E C3 E8 6A 02 8B F7 03  // .V.D..D.^..j....
    3320: 74 56 BB 00 30 B9 23 00 E8 EC 03 E8 01 00 C3 33  // tV..0.#........3
    3330: FF 33 F6 33 C9 8B FE E8 9F FE 0F 84 AA 00 8B F7  // .3.3............
    3340: 8B 54 04 80 FA 15 74 04 0B 0C EB E9 8B DA E8 E2  // .T....t.........
    3350: FE E8 E1 00 0B C8 89 04 0B C0 75 10 89 44 04 89  // ..........u..D..
    3360: 05 83 7C 02 0A 74 36 89 44 0A EB 31 E8 0F 01 89  // ..|..t6.D..1....
    3370: 44 04 89 05 83 7C 02 0A 74 06 E8 C9 00 89 44 0A  // D....|..t.....D.
    3380: F7 04 11 00 74 11 8B 44 04 E8 A2 00 75 09 33 C0  // ....t..D....u.3.
    3390: 89 05 E8 BD 00 EB 06 E8 B8 00 E8 62 01 8B 5C 08  // ...........b..\.
    33A0: B8 00 11 66 C1 E0 10 8B 44 04 E8 6F 00 E8 6A 01  // ...f....D..o..j.
    33B0: 8B 5C 08 E8 39 00 E8 63 00 74 12 8B D8 8B 44 08  // .\..9..c.t....D.
    33C0: 66 C1 E0 10 8B 44 04 E8 50 01 E8 32 01 8B 5C 04  // f....D..P..2..\.
    33D0: 0B DB 0F 84 5F FF 8B 44 08 E8 40 00 66 C1 E0 10  // ...._..D..@.f...
    33E0: 33 C0 E8 35 01 E9 4D FF E8 6E 01 89 4C 04 C3 51  // 3..5..M..n..L..Q
    33F0: 53 E8 CF 00 83 C3 0C E8 71 09 8B C8 5B B0 14 E8  // S.......q...[...
    3400: 51 FE 74 16 F6 C1 01 74 04 83 67 02 FD 83 4F 02  // Q.t....t..g...O.
    3410: 04 F6 C1 0C 75 04 83 67 02 FB 59 C3 53 83 7C 02  // ....u..g..Y.S.|.
    3420: 0A 74 09 8B 5C 0A 0B DB 74 02 8B C3 5B C3 3C 01  // .t..\...t...[.<.
    3430: 74 02 3C 02 C3 53 E8 8A 00 E8 2F 09 5B C3 E8 F4  // t.<..S..../.[...
    3440: FF 66 C1 E8 10 C3 53 E8 79 00 83 C3 08 E8 1B 09  // .f....S.y.......
    3450: 5B C3 57 B0 04 E8 0A FE C6 47 02 01 8B 05 E8 CD  // [.W......G......
    3460: FF 75 0D F7 04 11 00 74 07 C6 47 02 02 83 C3 08  // .u.....t..G.....
    3470: 8B 04 89 47 08 E8 C6 FF 66 89 47 04 5F C3 53 57  // ...G....f.G._.SW
    3480: 52 E8 3F 00 83 C3 04 E8 E1 08 8B D0 E8 84 FC 75  // R.?............u
    3490: 14 8B 5C 08 8B D3 E8 24 F9 E8 97 FD 75 07 8B D0  // ..\....$....u...
    34A0: E8 82 FC 8B C2 5A 5F 5B C3 E8 D2 FF 66 C1 E8 10  // .....Z_[....f...
    34B0: B4 11 E8 25 00 C3 E8 C5 FF 66 C1 E8 18 B4 10 E8  // ...%.....f......
    34C0: 18 00 C3 51 52 33 C9 8A CE 80 E1 07 49 B8 10 00  // ...QR3......I...
    34D0: F7 E1 BB 14 30 03 D8 5A 59 C3 57 53 51 3C FF 75  // ....0..ZY.WSQ<.u
    34E0: 04 33 C0 EB 16 33 C9 8A C8 8A C4 BB 03 71 E8 42  // .3...3.......q.B
    34F0: FD E8 6E FD 83 C3 02 03 D9 8A 07 59 5B 5F C3 B0  // ..n........Y[_..
    3500: 01 E8 5E FD 74 13 E8 A0 FF 88 47 02 B0 02 E8 51  // ..^.t.....G....Q
    3510: FD 74 06 E8 A0 FF 88 47 02 C3 E8 16 FD 74 23 56  // .t.....G.....t#V
    3520: 8B 5D 02 E8 33 00 03 DE 5E 0B C0 74 07 C6 47 03  // .]..3...^..t..G.
    3530: 01 89 47 04 66 C1 E8 10 0B C0 74 06 C6 07 01 89  // ..G.f.....t.....
    3540: 47 01 C3 8B DA B0 14 E8 09 FD 74 03 8B 5F 02 C3  // G.........t.._..
    3550: BF BC 01 8B 3D 8B 7D 0C C3 BE BC 01 8B 34 8B 74  // ....=.}......4.t
    3560: 30 C3 1E 0E 1F BF BC 01 8B 3D 8B 7D 0E 83 C7 04  // 0........=.}....
    3570: 1F C3 BE BC 01 8B 34 8B 74 10 C3 BF BC 01 8B 3D  // ......4.t......=
    3580: 8B 7D 26 83 C7 04 C3 BF BC 01 8B 3D 8B 7D 40 C3  // .}&........=.}@.
    3590: BE BC 01 8B 34 8B 74 1A C3 BF BC 01 8B 3D 8B 7D  // ....4.t......=.}
    35A0: 3A C3 BF BC 01 8B 3D 8B 7D 0A 83 C7 04 B9 08 00  // :.....=.}.......
    35B0: C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0  // ...........F.f3.
    35C0: C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 69 1A  // .F...F..R.....i.
    35D0: 5A 07 83 C4 06 C3 E8 77 FF F7 45 50 01 00 C3 E8  // Z......w..EP....
    35E0: 6E FF 83 4D 50 01 C3 E8 66 FF 88 45 58 C3 66 53  // n..MP...f..EX.fS
    35F0: 83 EC 28 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66  // ..(..f.^.f.N...f
    3600: C1 E0 10 8B C4 BB 00 00 E8 AA FF 83 C4 28 66 5B  // .............(f[
    3610: E8 40 00 83 EC 14 8B EC C6 46 01 07 8C D0 66 C1  // .@.......F....f.
    3620: E0 10 8B C4 BB 0D 00 E8 8B FF 83 C4 14 33 C9 B5  // .............3..
    3630: 00 E8 B7 F2 B5 00 E8 AB F2 FE C1 E8 69 00 38 C1  // ............i.8.
    3640: 72 ED E8 93 01 BB 04 00 E8 39 FB 66 C1 E8 10 E8  // r........9.f....
    3650: 95 FF C3 83 EC 0C 8B EC 66 89 5E 00 8C D0 66 C1  // ........f.^...f.
    3660: E0 10 8B C4 BB 0A 00 E8 4B FF 83 C4 0C C3 E8 DF  // ........K.......
    3670: FE 66 8B 5D 08 66 8B 4D 0C C3 57 E8 D2 FE 66 8B  // .f.].f.M..W...f.
    3680: 45 28 5F C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // E(_.......N...f.
    3690: E0 10 8B C4 BB 38 00 E8 1B FF 8B EC 8A 6E 02 83  // .....8.......n..
    36A0: C4 04 C3 C3 B0 03 C3 B0 02 C3 B0 03 C3 B0 08 C3  // ................
    36B0: E8 9D FE 8B 45 56 0B C0 C3 53 66 50 66 33 C0 E8  // ....EV...SfPf3..
    36C0: 14 06 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 66 B8  // .......fX[.2..f.
    36D0: C0 D4 01 00 C3 B5 02 C3 53 BF BC 01 8B 3D 8B 7D  // ........S....=.}
    36E0: 38 0B FF 74 15 8B 1D 03 DF 83 C7 04 3A 45 08 74  // 8..t........:E.t
    36F0: 09 83 C7 0C 3B FB 72 F4 33 FF 0B FF 5B C3 FC E8  // ....;.r.3...[...
    3700: 69 06 66 C1 CB 10 E8 CD 05 66 C1 CB 10 66 81 C3  // i.f......f...f..
    3710: 04 00 04 00 E2 E9 C3 FC 66 AD E8 B9 05 83 C3 04  // ........f.......
    3720: E2 F6 C3 FC E8 44 06 66 AB 83 C3 04 E2 F6 C3 66  // .....D.f.......f
    3730: 50 B8 64 00 E8 10 00 66 58 C3 66 50 B8 50 C3 D1  // P.d....fX.fP.P..
    3740: E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 35 04 66  // ....fX.R.....5.f
    3750: 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2  // S..f.....f......
    3760: 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00  // .f...f3.f.f.....
    3770: B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66  // ..f...f.3.f..s.f
    3780: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
    3790: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
    37A0: BB 42 EC E8 9E 05 66 33 D2 66 BB 64 00 00 00 66  // .B....f3.f.d...f
    37B0: F7 F3 C3 66 50 53 BB 07 00 E8 C8 F9 25 00 02 35  // ...fPS......%..5
    37C0: 00 02 0B C0 5B 66 58 C3 BB 0A 15 E8 76 05 C3 32  // ....[fX.....v..2
    37D0: FF D1 E3 03 F3 8B 1C C3 E8 ED FF 66 3D 00 08 00  // ...........f=...
    37E0: 00 76 06 BB 0C 15 E8 5B 05 66 C1 E0 0A 66 83 E8  // .v.....[.f...f..
    37F0: 20 E8 9C FD 66 89 44 04 C7 44 08 20 00 C3 56 1E  //  ...f.D..D. ..V.
    3800: 0E 1F E8 8B FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    3810: E8 C5 FF BB 00 7C 06 E8 6D FD 0E 07 BB 00 7C E8  // .....|..m.....|.
    3820: 49 05 66 3B 05 75 19 B9 80 00 FC E8 F5 FE BB 00  // I.f;.u..........
    3830: 7E BF BC 01 8B 3D 8B 7D 22 B9 80 00 FC E8 E3 FE  // ~....=.}".......
    3840: E8 0D FD 8B F7 E8 3F FD 66 8B 45 08 66 0B C0 74  // ......?.f.E.f..t
    3850: 04 66 89 44 14 66 8B 45 04 66 0B C0 74 04 66 89  // .f.D.f.E.f..t.f.
    3860: 44 08 66 8B 45 0C 66 89 44 0C 8B DF 81 C3 CE 00  // D.f.E.f.D.......
    3870: B9 08 00 66 8B 47 02 66 0B C0 75 07 83 EB 06 E2  // ...f.G.f..u.....
    3880: F2 EB 04 66 89 44 28 57 03 7D 56 8A 85 86 00 5F  // ...f.D(W.}V...._
    3890: 88 44 3C B8 DF FF 21 44 50 8B 45 40 0B C0 74 14  // .D<...!DP.E@..t.
    38A0: 83 4C 50 20 80 BD 3F 01 00 74 09 50 8A 85 3F 01  // .LP ..?..t.P..?.
    38B0: 88 44 2D 58 E8 BB FC 0B F6 74 03 89 44 32 E8 B1  // .D-X.....t..D2..
    38C0: FC 0B F6 74 70 8B 45 58 0B C0 74 08 89 44 22 B0  // ...tp.EX..t..D".
    38D0: 02 08 44 30 8B 85 34 01 0B C0 74 03 89 44 40 F6  // ..D0..4...t..D@.
    38E0: 85 36 01 08 74 24 80 64 28 FD F6 85 36 01 01 74  // .6..t$.d(...6..t
    38F0: 04 80 4C 28 02 80 64 28 8F F6 85 36 01 04 75 06  // ..L(..d(...6..u.
    3900: 80 4C 28 10 EB 04 80 4C 28 20 F6 45 34 01 75 05  // .L(....L( .E4.u.
    3910: C7 44 20 00 00 57 03 7D 56 8A 85 87 00 88 44 42  // .D ..W.}V.....DB
    3920: 5F B9 07 00 8D 9D 38 01 8A 07 0A C0 74 03 88 44  // _.....8.....t..D
    3930: 34 43 46 E2 F3 57 8B 9D 10 01 0B DB 74 1C B0 09  // 4CF..W......t...
    3940: E8 95 FD 74 05 89 5D 04 EB 10 B0 07 E8 89 FD 89  // ...t..].........
    3950: 5D 04 B0 0B E8 81 FD 89 5D 04 5F 8D 9D 18 01 B0  // ].......]._.....
    3960: 05 E8 A3 00 8D 9D 1C 01 B0 04 E8 9A 00 8D 9D 14  // ................
    3970: 01 B0 06 E8 91 00 BB 04 71 B0 09 E8 D5 F8 74 0C  // ........q.....t.
    3980: 57 03 7D 56 8A 85 85 00 88 47 04 5F 80 7D 03 07  // W.}V.....G._.}..
    3990: 72 22 8A 45 5C 0A C0 74 1B B9 28 00 8D 36 A8 00  // r".E\..t..(..6..
    39A0: 83 C6 02 8D 5D 5C 8A 07 0A C0 75 02 B0 20 88 04  // ....]\....u.. ..
    39B0: 43 46 E2 F2 80 7D 5A 04 75 0A 56 8D 36 A6 00 B0  // CF...}Z.u.V.6...
    39C0: 34 88 04 5E 07 C3 8B DF 81 C3 D4 00 B9 05 00 3A  // 4..^...........:
    39D0: 47 04 74 08 83 C3 08 E2 F6 33 C0 C3 66 33 C0 8A  // G.t......3..f3..
    39E0: 47 06 66 33 D2 66 BB 71 02 00 00 66 F7 E3 66 BA  // G.f3.f.q...f..f.
    39F0: 78 5D 02 00 66 2B D0 66 8B C2 66 33 D2 66 BB 64  // x]..f+.f..f3.f.d
    3A00: 00 00 00 66 F7 F3 C3 57 E8 CD FC 74 13 8B 07 0B  // ...f...W...t....
    3A10: C0 74 0D 89 45 04 8B 47 02 0B C0 74 03 89 45 06  // .t..E..G...t..E.
    3A20: 5F C3 57 E8 2A FB 8B 45 52 5F C3 56 E8 43 FB 8B  // _.W.*..ER_.V.C..
    3A30: 4C 22 8A 44 29 5E C3 BE BC 01 8B 34 8B 74 1E 83  // L".D)^.....4.t..
    3A40: C6 04 B9 1C 00 C3 E8 3E FB F6 45 34 01 75 03 33  // .......>..E4.u.3
    3A50: FF C3 56 53 33 FF E8 19 FB 8B 5C 20 0B DB 74 12  // ..VS3.....\ ..t.
    3A60: 03 F3 80 3C 04 75 0B 80 7C 01 80 72 05 8B FE 83  // ...<.u..|..r....
    3A70: C7 02 5B 5E C3 56 E8 F9 FA 8A 6C 28 80 E5 70 C0  // ..[^.V....l(..p.
    3A80: ED 04 5E C3 56 E8 EA FA 53 81 C3 09 01 E8 DB 02  // ..^.V...S.......
    3A90: 8A E8 5B 53 81 C3 00 01 E8 D0 02 5B 8A C5 66 89  // ..[S.......[..f.
    3AA0: 44 3C 5E C3 56 E8 CA FA 66 8B 44 3C 53 81 C3 00  // D<^.V...f.D<S...
    3AB0: 01 E8 22 02 5B 53 81 C3 08 01 B1 01 8A E8 E8 59  // ..".[S.........Y
    3AC0: 02 5B 5E C3 56 E8 AA FA 8B FE 83 C7 04 5E C3 56  // .[^.V........^.V
    3AD0: E8 9F FA 8A 44 28 80 FD 00 74 0E 24 8F C0 E5 04  // ....D(...t.$....
    3AE0: 0A C5 80 FD 20 75 02 0C 02 24 FE 81 7C 04 34 21  // .... u...$..|.4!
    3AF0: 76 02 0C 01 88 44 28 E8 08 F6 75 04 80 4C 30 01  // v....D(...u..L0.
    3B00: 5E C3 57 E8 81 FA 8A 45 34 5F 80 FB 02 75 07 A8  // ^.W....E4_...u..
    3B10: 04 75 1B 0C 01 C3 80 FB 01 75 07 A8 02 75 0F 0C  // .u.......u...u..
    3B20: 01 C3 80 FB 81 75 07 A8 08 75 03 0C 01 C3 32 C0  // .....u...u....2.
    3B30: C3 E8 53 FA 66 8B 45 38 C3 83 EC 0C 8B EC 66 C1  // ..S.f.E8......f.
    3B40: C0 10 B8 01 00 66 89 46 00 8C D0 66 C1 E0 10 8B  // .....f.F...f....
    3B50: C4 BB 43 00 E8 5E FA 83 C4 0C C3 66 57 53 51 E8  // ..C..^.....fWSQ.
    3B60: 25 FA 8B DF 81 C3 A4 00 B9 08 00 66 8B 47 02 66  // %..........f.G.f
    3B70: 3B C2 73 09 83 C3 06 E2 F2 33 C0 EB 02 8B 07 59  // ;.s......3.....Y
    3B80: 5B 66 5F C3 66 50 8C C8 3D 00 C0 75 10 BA C3 03  // [f_.fP..=..u....
    3B90: EC 8A F0 0A F6 74 06 B2 4C 66 ED EB 17 53 2E 8B  // .....t..Lf...S..
    3BA0: 1E B0 01 B2 20 E8 DD 00 A8 01 75 05 B2 14 E8 D4  // .... .....u.....
    3BB0: 00 8A F4 5B 32 D2 66 58 C3 2E 8B 1E B0 01 C3 0B  // ...[2.fX........
    3BC0: C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B  // .u.Kt.C;.w.....+
    3BD0: D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72  // ..........+..;.r
    3BE0: 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8  // .u.;.w.+...+.+..
    3BF0: 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B  // ...+.+.....UV+..
    3C00: EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8  // .....r.E;.r.w.;.
    3C10: 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1  // v....Mx ....+...
    3C20: F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1  // .r...Mx.........
    3C30: 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2  // s.............3.
    3C40: 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74  // ^]..P...t......t
    3C50: 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80  // .....X.....RfP..
    3C60: 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66  // ..f.......$....f
    3C70: EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC  // .fXZ.R...f.Z.R..
    3C80: 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF  // .f.Z..1.........
    3C90: 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52  // ...$...........R
    3CA0: 66 53 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3  // fSfP...fXf[Z.f..
    3CB0: 10 66 C1 EB 0E E8 CC FE E8 4C 01 C3 66 50 66 C1  // .f.......L..fPf.
    3CC0: E3 10 66 C1 EB 10 E8 35 FB 66 03 D8 66 81 CB 00  // ..f....5.f..f...
    3CD0: 00 00 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3  // ...fX.RfS...f[Z.
    3CE0: 66 50 E8 9F FE E8 D4 FF E8 1C 01 66 58 C3 52 51  // fP.........fX.RQ
    3CF0: 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8  // fSfP............
    3D00: 82 FE E8 B7 FF E8 E6 00 66 D3 C8 58 50 66 D3 C0  // ........f..XPf..
    3D10: E8 F4 00 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03  // ...fXf[YZ.fPQ...
    3D20: E8 48 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66  // .H.f....f.....Yf
    3D30: 58 C3 66 50 51 C0 E1 03 E8 30 00 66 D3 C8 59 8A  // X.fPQ....0.f..Y.
    3D40: E8 66 58 C3 E8 54 00 C3 E8 39 FE 66 C1 E3 10 66  // .fX..T...9.f...f
    3D50: C1 EB 0E E8 98 00 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    3D60: C3 E8 20 FE E8 55 FF E8 84 00 C3 51 66 52 8A EB  // .. ..U.....QfR..
    3D70: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    3D80: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    3D90: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 A7  // .f.....fZY.RfS..
    3DA0: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    3DB0: 89 56 08 E8 CE FD 33 C0 B2 18 EF B2 00 66 ED 66  // .V....3......f.f
    3DC0: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 B3  // .F.fXZ].fPUR....
    3DD0: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    3DE0: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 81  // .F.f.F.Z]fXfX.f.
    3DF0: FB FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00  // .....w.....f....
    3E00: 66 EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04  // f...f..f......w.
    3E10: 8A D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF  // ....f...f.f...f.
    3E20: C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B EC 53 51  // ...........U..SQ
    3E30: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    3E40: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    3E50: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    3E60: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    3E70: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    3E80: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    3E90: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    3EA0: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    3EB0: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    3EC0: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    3ED0: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    3EE0: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    3EF0: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    3F00: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    3F10: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    3F20: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    3F30: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    3F40: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    3F50: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    3F60: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    3F70: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    3F80: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    3F90: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    3FA0: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    3FB0: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    3FC0: 46 8A 04 6B F0 03 8A 84 88 A2 26 01 47 26 8C D0  // F..k......&.G&..
    3FD0: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    3FE0: F0 03 8B C3 FF 94 86 A2 26 8B 77 26 8A 04 32 E4  // ........&.w&..2.
    3FF0: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    4000: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    4010: F0 03 8A 84 88 A2 26 01 47 26 E9 80 FF 33 C0 33  // ......&.G&...3.3
    4020: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    4030: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    4040: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    4050: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    4060: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    4070: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 E4 11  // .W.&.g.&.W......
    4080: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    4090: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    40A0: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    40B0: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    40C0: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    40D0: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    40E0: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    40F0: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    4100: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    4110: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    4120: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    4130: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    4140: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    4150: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    4160: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    4170: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    4180: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    4190: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    41A0: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    41B0: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    41C0: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    41D0: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    41E0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    41F0: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    4200: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    4210: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    4220: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 96 10 E9  // ..&.G.&.T.......
    4230: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    4240: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    4250: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    4260: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    4270: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    4280: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    4290: 75 08 8B C3 E8 9A 0F 5E 5B C3 26 8A 47 34 32 E4  // u......^[.&.G42.
    42A0: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    42B0: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    42C0: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    42D0: D6 42 CB 42 E1 42 30 43 E7 42 FF 42 19 43 24 43  // .B.B.B0C.B.B.C$C
    42E0: 2A 43 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // *CSQV.........&.
    42F0: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    4300: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    4310: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    4320: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    4330: A4 68 42 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // .hB&.G.&.W..T.&.
    4340: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    4350: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    4360: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    4370: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    4380: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    4390: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    43A0: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    43B0: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    43C0: 8B C3 E8 81 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    43D0: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    43E0: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    43F0: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    4400: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    4410: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    4420: 80 E3 07 32 FF 03 DB FF 97 16 A2 5B C3 53 52 56  // ...2.......[.SRV
    4430: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    4440: 32 A2 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // 2.&.G.&.W.&.G-2.
    4450: 8B F0 03 F0 8B C3 FF 94 4A A2 26 89 47 04 26 89  // ........J.&.G.&.
    4460: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    4470: 8B F1 8A 8C 7A A2 E3 0A 26 D1 6F 06 26 D1 5F 04  // ....z...&.o.&._.
    4480: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 5A  // ..&.O+2........Z
    4490: A2 8B B4 5C A2 26 21 4F 04 26 21 77 06 26 8A 4F  // ...\.&!O.&!w.&.O
    44A0: 2A 32 ED 8B F1 8A 8C 82 A2 E3 0A 26 D1 67 04 26  // *2.........&.g.&
    44B0: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    44C0: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    44D0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    44E0: 47 2A 8B F8 8A 8D 82 A2 32 ED 8B 84 5A A2 8B 94  // G*......2...Z...
    44F0: 5C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // \.............&!
    4500: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4510: 82 A2 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // ..2...&.o.&._...
    4520: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 5A A2 8B 94 5C  // &.G+.......Z...\
    4530: A2 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    4540: F0 8A 8C 82 A2 32 ED E3 0A 26 D1 67 08 26 D1 57  // .....2...&.g.&.W
    4550: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    4560: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    4570: 4F 2B 32 ED 8B F1 8A 8C 7A A2 E3 0A 26 D1 6F 06  // O+2.....z...&.o.
    4580: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    4590: 02 8B 8C 5A A2 8B B4 5C A2 26 21 4F 04 26 21 77  // ...Z...\.&!O.&!w
    45A0: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 82 A2 E3 0A 26  // .&.O*2.........&
    45B0: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    45C0: F1 C1 E6 02 8B 8C 5A A2 8B B4 5C A2 26 21 4F 08  // ......Z...\.&!O.
    45D0: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    45E0: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    45F0: F0 8B C3 FF 94 32 A2 26 89 47 08 26 89 57 0A EB  // .....2.&.G.&.W..
    4600: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 3E  // .&.G,2.........>
    4610: A2 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 4A  // .&.G-2.........J
    4620: A2 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    4630: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    4640: 8A 47 2A 8B F8 8A 8D 82 A2 32 ED 8B 84 5A A2 8B  // .G*......2...Z..
    4650: 94 5C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // .\.............&
    4660: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    4670: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    4680: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    4690: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 26 A2 5F 5A  // G,2.........&._Z
    46A0: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    46B0: F0 8A 8C 82 A2 32 ED E3 0A 26 D1 67 04 26 D1 57  // .....2...&.g.&.W
    46C0: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    46D0: E6 02 26 8A 47 2A 8B F8 8A 8D 82 A2 32 ED 8B 84  // ..&.G*......2...
    46E0: 5A A2 8B 94 5C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // Z...\...........
    46F0: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    4700: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    4710: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    4720: C3 FF 94 32 A2 26 89 47 08 26 89 57 0A 26 8A 47  // ...2.&.G.&.W.&.G
    4730: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    4740: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 4A  // .&.O-2.........J
    4750: A2 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    4760: FA 32 E4 8B F0 8A 8C 7A A2 E3 0A 26 D1 6F 16 26  // .2.....z...&.o.&
    4770: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    4780: 8B 84 5A A2 8B 94 5C A2 26 21 47 14 26 21 57 16  // ..Z...\.&!G.&!W.
    4790: 26 8A 47 2A 32 E4 8B F0 8A 8C 82 A2 32 ED E3 0A  // &.G*2.......2...
    47A0: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    47B0: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    47C0: 8B F0 03 F0 8B C3 FF 94 26 A2 8D 66 FC 5A 59 5D  // ........&..f.ZY]
    47D0: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    47E0: 8C 7A A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .z...&.o.&._....
    47F0: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    4800: FF 94 26 A2 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ..&.Y...."....U.
    4810: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    4820: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 26 A2  // &.G,2.........&.
    4830: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    4840: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    4850: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 26 A2 5E 5B C3  // ,2.........&.^[.
    4860: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    4870: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    4880: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    4890: 26 A2 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // &.^Y[.SQV.......
    48A0: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    48B0: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    48C0: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    48D0: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    48E0: F0 8B C3 FF 94 26 A2 5A C3 52 8B D8 E8 3E FB 8B  // .....&.Z.R...>..
    48F0: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    4900: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    4910: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    4920: 26 8B 4C 06 E8 1C F3 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    4930: 59 C3 51 52 57 8B F0 E8 F3 FA 8B C6 E8 2A FC 26  // Y.QRW........*.&
    4940: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    4950: 6D F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26 8B  // m.&.D.&.T.....&.
    4960: 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 4E  // D.&.T.&.\.&.L..N
    4970: F2 26 89 5C 10 26 89 4C 12 E9 22 FD 51 52 8B D8  // .&.\.&.L..".QR..
    4980: E8 AA FA 8B C3 E8 E1 FB 8C D1 8E C1 26 8B 47 08  // ............&.G.
    4990: 26 8B 57 0A 26 3B 57 06 75 0E 26 3B 47 04 75 08  // &.W.&;W.u.&;G.u.
    49A0: 26 C6 47 30 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B  // &.G0.ZY...&.G.&;
    49B0: 47 06 72 08 75 0A 26 3B 57 04 73 04 33 C0 EB 03  // G.r.u.&;W.s.3...
    49C0: B8 02 00 26 88 47 30 5A 59 C3 51 52 57 8B D8 26  // ...&.G0ZY.QRW..&
    49D0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 32 A2 26  // .G,2.........2.&
    49E0: 89 47 08 26 89 57 0A 8C D0 8E C0 26 8A 47 2B 32  // .G.&.W.....&.G+2
    49F0: E4 8B F0 C1 E6 02 8B F8 8A 8D 7A A2 32 ED 8B 84  // ..........z.2...
    4A00: 5A A2 8B 94 5C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // Z...\...........
    4A10: F7 D2 26 21 47 08 26 21 57 0A E9 71 FC 55 8B EC  // ..&!G.&!W..q.U..
    4A20: 51 52 57 83 EC 06 8B D8 26 8A 47 2B 32 E4 8B F0  // QRW.....&.G+2...
    4A30: C1 E6 02 8B F8 8A 8D 7A A2 32 ED 8B 84 5A A2 89  // .......z.2...Z..
    4A40: 46 F4 8B 84 5C A2 89 46 F6 E3 08 D1 66 F4 D1 56  // F...\..F....f..V
    4A50: F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C  // ....~..F..F.&.G,
    4A60: 32 E4 8B F0 03 F0 8B C3 FF 94 32 A2 26 89 47 08  // 2.........2.&.G.
    4A70: 26 89 57 0A 8B C3 E8 6B F9 26 89 47 04 26 89 57  // &.W....k.&.G.&.W
    4A80: 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47 08 26 23  // ......V...&#G.&#
    4A90: 57 0A 26 89 47 14 26 89 57 16 26 21 7F 08 8B 46  // W.&.G.&.W.&!...F
    4AA0: F6 26 21 47 0A 8C D1 8D 77 35 8E C1 26 80 3C 19  // .&!G....w5..&.<.
    4AB0: 73 12 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A  // s.&.O...&.g.&.W.
    4AC0: E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1  // ....&.O...&.o.&.
    4AD0: 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26 21 47 0A 26  // _...&!...F.&!G.&
    4AE0: 8B 57 14 26 8B 47 16 26 09 57 08 26 09 47 0A 26  // .W.&.G.&.W.&.G.&
    4AF0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 26 A2 8D  // .G,2.........&..
    4B00: 66 FA 5F E9 C7 FC 52 8B D8 E8 21 F9 8B C3 E8 58  // f._...R...!....X
    4B10: FA 26 8B 47 08 26 8B 57 0A 26 85 57 06 75 06 26  // .&.G.&.W.&.W.u.&
    4B20: 85 47 04 74 05 B8 03 00 EB 03 B8 01 00 26 88 47  // .G.t.........&.G
    4B30: 30 5A C3 53 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B  // 0Z.SQRV..&.O-2..
    4B40: F1 03 F1 FF 94 4A A2 26 89 47 04 26 89 57 06 26  // .....J.&.G.&.W.&
    4B50: 8A 47 2B 32 E4 8B F0 8A 8C 7A A2 E3 0A 26 D1 6F  // .G+2.....z...&.o
    4B60: 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02  // .&._...&.G+.....
    4B70: 8B 84 5A A2 8B 94 5C A2 26 21 47 04 26 21 57 06  // ..Z...\.&!G.&!W.
    4B80: E9 E1 F9 52 8B D8 E8 AA FF 26 8B 47 04 26 8B 57  // ...R.....&.G.&.W
    4B90: 06 26 89 47 18 26 89 57 1A 5A C3 51 52 8B D8 E8  // .&.G.&.W.Z.QR...
    4BA0: 91 FF 8C D0 8E C0 26 8B 77 02 26 8B 74 02 81 3C  // ......&.w.&.t..<
    4BB0: 5A 5A 74 5B 26 8B 77 02 26 8B 74 02 80 3C 63 75  // ZZt[&.w.&.t..<cu
    4BC0: E1 26 8B 77 02 26 FF 44 02 8B C3 E8 45 F8 26 89  // .&.w.&.D....E.&.
    4BD0: 47 08 26 89 57 0A 8B C3 E8 1E F8 26 89 47 14 26  // G.&.W......&.G.&
    4BE0: 89 57 16 8C D1 8E C1 26 8B 57 04 26 8B 47 06 26  // .W.....&.W.&.G.&
    4BF0: 3B 47 0A 75 AD 26 3B 57 08 75 A7 26 8B 77 02 26  // ;G.u.&;W.u.&.w.&
    4C00: 8B 04 26 03 47 14 8B DE 26 89 47 02 5A 59 C3 26  // ..&.G...&.G.ZY.&
    4C10: 8B 5F 02 26 83 47 02 02 5A 59 C3 52 57 8B D8 8C  // ._.&.G..ZY.RW...
    4C20: D0 8E C0 26 8B 77 02 26 8B 74 02 8A 54 01 84 D2  // ...&.w.&.t..T...
    4C30: 75 08 26 C7 47 22 00 00 EB 2F 80 FA FF 75 14 26  // u.&.G".../...u.&
    4C40: 8B 77 02 26 8B 3F 26 8B 34 26 2B 75 02 26 89 77  // .w.&.?&.4&+u.&.w
    4C50: 22 EB 16 26 8B 07 E8 C7 03 8B F0 8A C2 32 E4 03  // "..&.........2..
    4C60: C0 03 F0 8B 04 26 89 47 22 26 8B 5F 02 26 83 47  // .....&.G"&._.&.G
    4C70: 02 02 5F 5A C3 8B D8 26 80 67 2F F9 26 8B 77 02  // .._Z...&.g/.&.w.
    4C80: 26 8B 74 02 8A 44 01 26 88 47 34 26 8B 5F 02 26  // &.t..D.&.G4&._.&
    4C90: 83 47 02 03 C3 8B D8 26 8B 77 02 26 8B 74 02 8B  // .G.....&.w.&.t..
    4CA0: 74 01 26 89 77 20 EB E3 53 8B D8 26 8A 47 2C 32  // t.&.w ..S..&.G,2
    4CB0: E4 24 03 26 80 67 2F F9 C1 E0 09 26 09 47 2E E9  // .$.&.g/....&.G..
    4CC0: 73 F5 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // s...&.w.&.t..D.2
    4CD0: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 24 05  // .&.G.&.G......$.
    4CE0: 26 8B 5F 02 26 83 47 02 02 C3 8B D8 26 8B 77 02  // &._.&.G.....&.w.
    4CF0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    4D00: 06 00 00 8B C3 E8 EC 04 EB D6 53 56 8B D8 26 8B  // ..........SV..&.
    4D10: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    4D20: C7 47 06 00 00 8B C3 E8 EA 04 E9 AA F4 53 56 8B  // .G...........SV.
    4D30: D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89  // .&.w.&.t..D.2.&.
    4D40: 47 04 26 C7 47 06 00 00 8B C3 E8 D4 04 E9 87 F4  // G.&.G...........
    4D50: 53 56 8B D8 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F  // SV..&.w...&._.._
    4D60: 01 83 C3 03 26 01 5C 02 5E 5B C3 51 52 8B D8 26  // ....&.\.^[.QR..&
    4D70: 8B 77 02 26 83 44 02 02 26 8B 07 E8 84 02 8B C8  // .w.&.D..&.......
    4D80: 26 8B 77 28 8A 44 01 32 E4 03 C0 8B F1 03 F0 83  // &.w(.D.2........
    4D90: 3C 00 74 4F 26 8B 77 28 8A 54 01 32 F6 8B C3 E8  // <.tO&.w(.T.2....
    4DA0: 94 02 26 88 47 31 26 8B 77 02 26 8B 34 8B 44 04  // ..&.G1&.w.&.4.D.
    4DB0: C1 E8 08 32 E4 24 7F C1 E8 02 32 E4 24 1F 26 80  // ...2.$....2.$.&.
    4DC0: 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37 26 8B 47  // g/....&.G.&.7&.G
    4DD0: 2E C1 E8 0B C1 E0 02 26 01 04 26 C6 47 32 01 26  // .......&..&.G2.&
    4DE0: 89 4F 28 5A 59 C3 53 8B D8 26 C6 47 32 82 5B C3  // .O(ZY.S..&.G2.[.
    4DF0: 57 8B D8 8C D6 8E C6 26 80 7F 2C 05 74 0A 26 8A  // W......&..,.t.&.
    4E00: 47 2C 26 3A 47 30 75 1E 26 8B 77 02 26 8B 74 02  // G,&:G0u.&.w.&.t.
    4E10: 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02  // &...&.=.t...&._.
    4E20: 26 89 77 02 5F C3 26 8B 5F 02 26 83 47 02 03 5F  // &.w._.&._.&.G.._
    4E30: C3 53 56 57 8B D8 8C D6 8E C6 26 80 7F 30 01 74  // .SVW......&..0.t
    4E40: 0A 26 8A 47 30 26 3A 47 2C 75 20 26 8B 77 02 26  // .&.G0&:G,u &.w.&
    4E50: 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26  // .t.&...&.=.t...&
    4E60: 8B 5F 02 26 89 77 02 5F 5E 5B C3 26 8B 5F 02 26  // ._.&.w._^[.&._.&
    4E70: 83 47 02 03 EB F1 53 56 57 8B D8 8C D0 8E C0 26  // .G....SVW......&
    4E80: 80 7F 30 01 74 E5 EB C3 55 8B EC 53 51 52 57 50  // ..0.t...U..SQRWP
    4E90: 8B D8 8C D1 8E C1 26 8B 77 02 26 8B 74 02 8A 04  // ......&.w.&.t...
    4EA0: 3C 80 0F 86 D0 00 26 8B 3F 26 8B 77 28 26 8B 55  // <.....&.?&.w(&.U
    4EB0: 02 8B 74 01 03 F2 89 76 F6 26 C6 47 3D 00 26 8B  // ..t....v.&.G=.&.
    4EC0: 77 28 F6 44 02 80 74 16 8B 76 F6 8A 24 26 88 67  // w(.D..t..v..$&.g
    4ED0: 35 02 C0 0C 01 FF 46 F6 26 FE 47 3D EB 04 80 46  // 5.....F.&.G=...F
    4EE0: F7 80 26 8B 77 02 26 83 44 02 03 3C 80 74 49 A8  // ..&.w.&.D..<.tI.
    4EF0: 80 74 17 26 8A 67 3D 8A D4 32 F6 FE C4 26 88 67  // .t.&.g=..2...&.g
    4F00: 3D 8B F3 03 F2 8B 7E F6 EB 21 26 8B 77 02 26 8B  // =.....~..!&.w.&.
    4F10: 7C 02 8D 55 01 26 89 54 02 26 8A 57 3D 8A CA 32  // |..U.&.T.&.W=..2
    4F20: ED FE C2 26 88 57 3D 8B F3 03 F1 8A 25 26 88 64  // ...&.W=.....%&.d
    4F30: 35 02 C0 FF 46 F6 EB B3 26 8A 47 35 8A D0 32 F6  // 5...F...&.G5..2.
    4F40: 8B F2 C1 E6 02 8A A4 A7 A2 26 88 67 3D 8D 77 35  // .........&.g=.w5
    4F50: 26 8A 64 01 80 E4 07 26 88 67 2D 8D 77 35 26 8A  // &.d....&.g-.w5&.
    4F60: 64 01 C0 EC 03 80 E4 07 26 88 67 2B 8D 77 35 26  // d.......&.g+.w5&
    4F70: 8A 64 01 E9 6B 00 26 C6 47 3D 00 8C D7 8E C7 26  // .d..k.&.G=.....&
    4F80: 80 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6  // ..=.s &.w.&.W=2.
    4F90: 26 8B 74 02 03 F2 8B FB 03 FA 8A 24 26 88 65 35  // &.t........$&.e5
    4FA0: 26 FE 47 3D EB D5 26 8B 77 02 8A D0 32 F6 8B FA  // &.G=..&.w...2...
    4FB0: C1 E7 02 8A 95 A7 A2 26 01 54 02 26 8B 77 28 8A  // .......&.T.&.w(.
    4FC0: 64 01 80 E4 07 26 88 67 2D 26 8B 77 28 8A 64 01  // d....&.g-&.w(.d.
    4FD0: C0 EC 03 80 E4 07 26 88 67 2B 26 8B 77 28 8A 64  // ......&.g+&.w(.d
    4FE0: 01 C0 EC 06 26 88 67 2A 8A D0 32 F6 8B F2 C1 E6  // ....&.g*..2.....
    4FF0: 02 8A A4 A6 A2 26 88 67 2C 8D 66 F8 5F 5A 59 5B  // .....&.g,.f._ZY[
    5000: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    5010: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    5020: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    5030: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    5040: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    5050: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    5060: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    5070: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    5080: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    5090: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    50A0: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    50B0: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    50C0: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    50D0: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    50E0: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    50F0: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    5100: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    5110: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    5120: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    5130: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    5140: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    5150: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    5160: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    5170: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    5180: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    5190: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    51A0: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    51B0: 5E B8 26 29 07 EB 91 8D 46 B8 E8 CB FC 8A D0 8D  // ^.&)....F.......
    51C0: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    51D0: 97 A4 A2 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // ....r..~.......~
    51E0: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    51F0: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 2E  // ....SQ..&.O.2...
    5200: E5 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 29  // .Y[.SQ..&.O.2..)
    5210: E5 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    5220: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 86 CF 59 5B  // .SQ..&.O.2....Y[
    5230: C3 53 57 8B D8 26 8B 5F 14 E8 0C EB 8B D0 66 C1  // .SW..&._......f.
    5240: E8 10 92 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B  // ..._[.SW..&.G.&.
    5250: 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8  // W.....f.........
    5260: FF EA EB D8 53 52 57 8B D8 26 8B 47 08 26 8B 57  // ....SRW..&.G.&.W
    5270: 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14 E8 2E EA 5F  // ..f.....&._...._
    5280: 5A 5B C3 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92  // Z[.SR..&.G.&.W..
    5290: 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F 01 E8 0D EA  // f.....&._&._....
    52A0: 5A 5B C3 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8  // Z[.SRV..&.\&._..
    52B0: 96 EA 8B D0 66 C1 E8 10 92 26 89 44 1C 26 89 54  // ....f....&.D.&.T
    52C0: 1E 5E 5A 5B C3 53 51 52 57 8B D8 26 8B 47 08 26  // .^Z[.SQRW..&.G.&
    52D0: 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14  // .W..f.......&.G.
    52E0: 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3  // &.W.....f.......
    52F0: 02 8B C1 E8 EA E9 5F 5A 59 5B C3 8B D0 66 C1 E8  // ......_ZY[...f..
    5300: 10 92 C3 00 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    5310: 66 56 66 57 0E 1F 0A C0 75 06 E8 37 01 E9 D8 00  // fVfW....u..7....
    5320: 3C 01 75 06 E8 67 01 E9 CE 00 3C 02 75 06 E8 9B  // <.u..g....<.u...
    5330: 02 E9 C4 00 3C 03 75 0B E8 EB 03 8B EC 89 5E 0C  // ....<.u.......^.
    5340: E9 B5 00 3C 04 75 0B E8 FA 03 8B EC 89 5E 0C E9  // ...<.u.......^..
    5350: A6 00 3C 05 75 0B E8 25 05 8B EC 89 56 10 E9 97  // ..<.u..%....V...
    5360: 00 3C 06 75 11 E8 A2 04 8B EC 89 5E 0C 89 4E 14  // .<.u.......^..N.
    5370: 89 56 10 E9 82 00 3C 07 75 10 E8 94 05 8B EC 88  // .V....<.u.......
    5380: 7E 0D 89 4E 14 89 56 10 EB 6E 3C 08 75 0A E8 D7  // ~..N..V..n<.u...
    5390: 04 8B EC 88 7E 0D EB 60 3C 09 75 05 E8 D0 05 EB  // ....~..`<.u.....
    53A0: 57 3C 0A 75 10 E8 18 06 8B EC 89 4E 14 89 7E 00  // W<.u.......N..~.
    53B0: 8C 46 1C EB 43 3C 0B 75 0B E8 12 06 8B EC 66 89  // .F..C<.u......f.
    53C0: 4E 14 EB 34 3C 10 75 0A E8 11 06 8B EC 89 5E 0C  // N..4<.u.......^.
    53D0: EB 26 3C 11 75 0D E8 45 06 8B EC 89 5E 0C 89 4E  // .&<.u..E....^..N
    53E0: 14 EB 15 3C 15 75 0F E8 70 06 8B EC 89 5E 0C EB  // ...<.u..p....^..
    53F0: 07 B8 4F 01 EB 02 32 C0 8B EC 89 46 18 66 5F 66  // ..O...2....F.f_f
    5400: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 50 1E  // ^f]f[fZfYfX...P.
    5410: 2E 8E 1E 51 03 8C D8 A3 E2 66 A3 F2 66 A3 04 67  // ...Q.....f..f..g
    5420: 2E 8E 1E 49 03 A3 AA 04 1F 58 CB 00 30 31 2E 30  // ...I.....X..01.0
    5430: 30 00 56 45 53 41 00 03 D8 01 00 00 01 00 00 00  // 0.VESA..........
    5440: 00 00 00 00 00 03 30 0F FF 00 00 00 8F 00 00 00  // ......0.........
    5450: C4 53 00 00 B9 3F 00 8B DF 83 C7 04 FC 66 33 C0  // .S...?.......f3.
    5460: F3 66 AB 8B FB BE CA 53 B9 22 00 F3 A4 06 1F 8C  // .f.....S."......
    5470: 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7  // O..G..O..O..O ..
    5480: 22 89 7F 0E 0E 1F E8 B6 CB B0 4F 32 E4 C3 56 51  // ".........O2..VQ
    5490: 57 B9 10 00 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F  // W...f3..f._Y....
    54A0: C7 05 BB 00 C6 45 02 07 C7 45 04 40 00 C7 45 06  // .....E...E.@..E.
    54B0: 40 00 C6 45 1B 04 C6 45 18 01 C6 45 1A 01 C6 45  // @..E...E...E...E
    54C0: 1E 01 66 C7 45 3E 00 46 C3 23 8E DB E8 0B B3 66  // ..f.E>.F.#.....f
    54D0: 0B C0 0F 84 EE 00 06 1F 66 89 45 28 8C C8 66 C1  // ........f.E(..f.
    54E0: E0 10 B8 73 58 66 89 45 0C 81 F9 FF 81 0F 84 CF  // ...sXf.E........
    54F0: 00 80 E5 03 B2 01 53 8E DB BE 80 1C E8 62 C9 5B  // ......S......b.[
    5500: 06 1F 0F 84 BE 00 53 E8 DE CB 66 89 45 12 C7 45  // ......S...f.E..E
    5510: 16 08 10 8D 5C 0C E8 52 E8 66 89 45 1F 66 89 45  // ....\..R.f.E.f.E
    5520: 36 8D 5C 10 E8 44 E8 66 89 45 23 66 89 45 3A 8D  // 6.\..D.f.E#f.E:.
    5530: 5C 08 E8 36 E8 0A C0 75 04 5B E9 87 00 E8 A8 CB  // \..6...u.[......
    5540: 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74 08 77 0A  // f...=X.t.=^.t.w.
    5550: C6 45 17 08 EB 04 C6 45 17 0E E8 52 CB 80 F9 00  // .E.....E...R....
    5560: 74 04 C6 45 1B 06 2E A1 4B 03 89 45 08 8D 5C 04  // t..E....K..E..\.
    5570: E8 F8 E7 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89  // ...f..f......E..
    5580: 45 32 B0 08 D2 E0 88 45 19 8D 5C 14 E8 DC E7 5B  // E2.....E..\....[
    5590: 3D 00 03 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B  // =..w/S.....3...[
    55A0: FE C8 88 45 1D 88 45 35 88 45 34 8E DB 57 53 BE  // ...E..E5.E4..WS.
    55B0: 80 1C E8 98 B2 5B 5F 0B C9 75 05 06 1F 83 25 FE  // .....[_..u....%.
    55C0: 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3 81 FB FF 81  // 2......O..^.....
    55D0: 0F 84 83 00 0A FF 75 04 8B C3 EB 21 F6 C7 08 75  // ......u....!...u
    55E0: 7C 8B CB B2 01 BE 20 1C E8 76 C8 74 70 E8 D7 CA  // |..... ..v.tp...
    55F0: 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8 B5 04  // ..u.f...........
    5600: EB 55 E8 C2 B6 74 05 E8 B9 B3 EB 19 E8 D7 B7 A9  // .U...t..........
    5610: 01 00 74 11 E8 C4 B8 F7 C1 02 00 74 08 E8 59 B7  // ..t........t..Y.
    5620: 80 FB 01 75 03 E8 E3 B7 BE 20 1C E8 F3 B1 74 2D  // ...u..... ....t-
    5630: E8 A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 7F CA BE  // ....,.f. .......
    5640: 00 1C E8 82 CA 66 C1 E8 10 8B D8 32 C0 F6 C7 80  // .....f.....2....
    5650: 74 02 B0 40 E8 6F B2 B0 4F 32 E4 EB 04 B0 4F B4  // t..@.o..O2....O.
    5660: 03 C3 56 06 33 C0 8E C0 BE 20 1C E8 7A CA 8B C8  // ..V.3.... ..z...
    5670: 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA  // f........&..J...
    5680: 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6  // ...&....&..Q..&.
    5690: 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00  // .P..&..I.b&..L..
    56A0: A0 26 C6 06 85 04 10 26 C7 06 0C 01 CB 70 8C C8  // .&.....&.....p..
    56B0: 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00  // &....^..........
    56C0: 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B  // @...............
    56D0: 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF  // ................
    56E0: B9 04 00 B4 01 BE 4F 56 AC 86 E0 EF 8A E0 FE C4  // ......OV........
    56F0: E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE 53  // ............2..S
    5700: 56 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC  // V....B.J........
    5710: B9 14 00 BA C0 03 32 E4 BE 5C 56 8A C4 EE AC EE  // ......2..\V.....
    5720: FE C4 E2 F7 C3 00 BE 00 1C E8 9B C9 66 C1 E8 10  // ............f...
    5730: 8B D8 E8 6B C9 75 05 E8 57 C9 75 04 B8 4F 00 C3  // ...k.u..W.u..O..
    5740: B8 4F 03 C3 83 E1 0F 0F 84 BB 00 0A D2 75 0C B8  // .O...........u..
    5750: 00 1C E8 27 03 83 C3 11 E9 A6 00 80 FA 01 75 33  // ...'..........u3
    5760: 8B FB BB C9 05 B9 08 00 FC E8 D8 E5 66 AB 43 E2  // ............f.C.
    5770: F8 66 C1 E7 10 66 C1 EF 10 B9 00 01 BA 00 01 0E  // .f...f..........
    5780: 1F E8 C5 B3 06 1F B8 01 1C B9 07 00 8B DF E8 EB  // ................
    5790: 02 EB 6E 80 FA 02 75 6E 8B F3 06 1F FC BB C9 05  // ..n...un........
    57A0: B9 08 00 66 AD E8 F7 E4 43 E2 F8 06 56 0E 1F BB  // ...f....C...V...
    57B0: D0 05 E8 8F E5 8A D0 80 E2 03 66 C1 E8 10 8B C8  // ..........f.....
    57C0: BE 00 1C E8 9B C6 BB CE 05 E8 78 E5 8B C8 66 C1  // ..........x...f.
    57D0: E8 10 8B D0 B0 18 B7 01 E8 5A AC 5B 07 53 81 C3  // .........Z.[.S..
    57E0: 00 04 B8 02 1C B9 07 00 E8 91 02 5E 8B FE 66 C1  // ...........^..f.
    57F0: E7 10 66 C1 EF 10 B9 00 01 BA 00 01 0E 1F E8 97  // ..f.............
    5800: B3 B0 4F 32 E4 C3 32 C0 C3 00 E8 93 C8 74 53 BE  // ..O2..2......tS.
    5810: 00 1C 80 FB 00 74 18 80 FB 01 75 05 E8 D1 C8 EB  // .....t....u.....
    5820: 1D 80 FB 02 75 10 8B C1 E8 84 C8 D3 E8 8B C8 E8  // ....u...........
    5830: D3 B2 74 2E EB 08 80 FB 03 75 24 E8 28 C8 E8 6E  // ..t......u$.(..n
    5840: C8 8B D8 D3 E3 50 33 C0 BA 00 03 3B DA 77 05 BA  // .....P3....;.w..
    5850: FF FF EB 04 F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32  // ........X...O..2
    5860: C0 C3 B0 4F B4 03 C3 00 0A DB 75 07 8A EF E8 E3  // ...O......u.....
    5870: B4 EB 05 E8 C8 B4 8A F8 B0 4F 32 E4 C3 00 E8 1F  // .........O2.....
    5880: C8 74 2C BE 00 1C E8 3E C8 66 C1 E8 10 F6 C4 40  // .t,....>.f.....@
    5890: 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80 FF 01 75 14  // u...u.........u.
    58A0: BB 13 00 E8 9E E4 D1 E8 8B D0 B0 4F 32 E4 C3 B0  // ...........O2...
    58B0: 4F B4 03 C3 32 C0 C3 52 53 66 50 81 E2 FF 02 D1  // O...2..RSfP.....
    58C0: E2 8B C2 40 66 C1 E0 10 8B C2 BB 13 00 E8 CF E3  // ...@f...........
    58D0: BB 12 00 E8 C9 E3 66 58 5B 5A C3 9C 1E 06 66 50  // ......fX[Z....fP
    58E0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F E8 B4  // fQfRfSfUfVfW....
    58F0: E4 E8 8A FF E8 D1 E4 8B EC 89 56 10 89 46 18 66  // ..........V..F.f
    5900: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F 9D  // _f^f]f[fZfYfX...
    5910: CB E8 8C C7 74 54 F6 C3 7F 75 38 53 BE 00 1C E8  // ....tT...u8S....
    5920: CE C7 F7 E2 66 C1 E2 10 8B D0 66 81 E1 FF FF 00  // ....f.....f.....
    5930: 00 66 03 D1 E8 78 C7 80 E2 FC 66 D3 E2 66 81 E2  // .f...x....f..f..
    5940: FF FF FF 02 8D 5C 18 66 8B C2 E8 89 E3 5B E8 9C  // .....\.f.....[..
    5950: B1 EB 0F 80 FB 82 74 C3 80 FB 01 75 0A E8 81 B1  // ......t....u....
    5960: 32 FF B0 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3 E8  // 2..O2..2...O....
    5970: 2E C7 74 47 80 FF 20 74 08 66 C1 E7 10 66 C1 EF  // ..tG.. t.f...f..
    5980: 10 81 F9 00 01 77 31 0A DB 74 05 80 FB 80 75 10  // .....w1..t....u.
    5990: 32 F6 E8 A9 B3 3C 06 74 02 B6 01 E8 FA B1 EB 13  // 2....<.t........
    59A0: 80 FB 01 75 13 32 F6 E8 94 B3 3C 06 74 02 B6 01  // ...u.2....<.t...
    59B0: E8 96 B1 B0 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3  // ....O2..2...O...
    59C0: 0E 07 BF C0 9F 2E 8B 0E BE 9F B8 4F 00 C3 0A DB  // ...........O....
    59D0: 75 02 EB 03 32 C0 C3 B0 4F B4 03 C3 0A DB 75 06  // u...2...O.....u.
    59E0: B7 04 B3 10 EB 2F 80 FB 01 75 1D 53 32 C9 0A FF  // ...../...u.S2...
    59F0: 74 02 B1 01 E8 F9 B2 B1 01 0A FF 74 02 B1 00 E8  // t..........t....
    5A00: F2 B3 E8 98 B0 5B EB 0D 80 FB 02 75 0D E8 F2 B2  // .....[.....u....
    5A10: 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 80 FB  // ......O2...O....
    5A20: 01 75 09 33 C0 E8 63 B3 74 2B EB 24 80 FB 07 75  // .u.3..c.t+.$...u
    5A30: 24 0A FF 75 0E B0 82 E8 FB A9 0A C9 74 12 B9 03  // $..u........t...
    5A40: 03 EB 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8 E5 A9  // .......t........
    5A50: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A DB 75  // .O2...O........u
    5A60: 05 BB 02 01 EB 0C 33 C0 53 E8 88 B3 E8 60 BC 5B  // ......3.S....`.[
    5A70: 74 05 B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72  // t..O2...O......r
    5A80: 03 CD 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55  // ..B...fPfQfRfSfU
    5A90: 66 56 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E  // fVfW..P.......X.
    5AA0: FF 94 5E 5A 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ..^Zf_f^f]f[fZfY
    5AB0: 66 58 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58  // fX.....P.......X
    5AC0: 2E FF 94 5E 5A C3 98 5A EF 95 08 96 25 96 A6 5B  // ...^Z..Z....%..[
    5AD0: 28 8D 5A 8D CD 8D 50 8E DE 8F E2 8F EB 92 BC 93  // (.Z...P.........
    5AE0: 3F 94 A6 94 41 96 A3 96 4C 99 BF 5D CC 9D 4C 5A  // ?...A...L..]..LZ
    5AF0: 4C 5A 4C 5A 4C 5A 4C 5A 4C 5A 9C 9E 66 82 BA 83  // LZLZLZLZLZ..f...
    5B00: 2E 8E 1E 49 03 80 26 87 04 F3 50 8A E0 80 E4 7F  // ...I..&...P.....
    5B10: E8 DF 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1  // ...;.u.X........
    5B20: 30 26 F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49  // 0&.G..t.... ..uI
    5B30: B5 09 EB 06 A8 01 74 41 B5 0B 53 E8 EA 43 0A FF  // ......tA..S..C..
    5B40: 5B 75 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80  // [u..&........+X.
    5B50: 0E 87 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63  // .....&.........c
    5B60: 04 C7 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01  // ................
    5B70: B8 68 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E  // .h.....B..&.....
    5B80: 10 04 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE 40 1C  // ..XSP..3......@.
    5B90: E8 CE C2 E8 31 B1 74 05 E8 28 AE EB 19 E8 46 B2  // ....1.t..(....F.
    5BA0: A9 01 00 74 11 E8 33 B3 F7 C1 02 00 74 08 E8 C8  // ...t..3.....t...
    5BB0: B1 80 FB 01 75 03 E8 52 B2 BE 40 1C E8 62 AC 58  // ....u..R..@..b.X
    5BC0: 5B 0F 84 53 FF 2E 8E 1E 49 03 0E 07 E8 3F 2B 0E  // [..S....I....?+.
    5BD0: 1F 53 66 BB 40 1C 00 1C E8 E3 C4 BE 00 1C B0 20  // .Sf.@.......... 
    5BE0: E8 E3 AC 5B 2E 8E 1E 49 03 0E 07 E8 48 30 E8 24  // ...[...I....H0.$
    5BF0: 00 E8 54 3F E8 D1 01 E8 8E 01 E8 E2 40 0E 1F BE  // ..T?........@...
    5C00: 00 1C B0 10 E8 BF AC E8 23 30 E8 1B 30 C3 8B EC  // ........#0..0...
    5C10: C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52  // .F..../........R
    5C20: 00 E8 CF 0B C3 53 83 C3 0A 8B 16 63 04 B9 19 00  // .....S.....c....
    5C30: B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B  // ..0.2.&.'.C....[
    5C40: 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04  // ...2...S........
    5C50: 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE  // ...&.'<.u... .C.
    5C60: C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00  // ...[&.G.........
    5C70: 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01  // .......#...&.G..
    5C80: 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9  // u........t......
    5C90: 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A  // .........t....&.
    5CA0: 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32  // ..F.....S......2
    5CB0: E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A  // ........&...C...
    5CC0: C4 EE 32 C0 EE 1E 06 E8 75 2F 0B ED 74 09 1F 1E  // ..2.....u/..t...
    5CD0: B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9  // .....F...[.S..7.
    5CE0: 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7  // ..2....&.'.C....
    5CF0: 5B C3 BB A0 5F 0E 07 8B D3 0A E4 7D 01 C3 E8 01  // [..._......}....
    5D00: 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75  // ..3.....<J.....u
    5D10: 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06  //  ...$.<.~$<.t <.
    5D20: 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 C0 04  // t.<.t..@........
    5D30: C3 B0 40 D0 EC F6 E4 03 D8 81 C3 C0 05 C3 B0 40  // ..@............@
    5D40: F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75  // ........u......u
    5D50: 05 81 C3 C0 01 C3 81 C3 40 06 C3 BF FF 5C BE 20  // ........@....\. 
    5D60: 5D 33 C9 E8 4E 00 C3 04 00 01 05 40 01 06 80 01  // ]3..N......@....
    5D70: 0D 40 03 0E 80 03 0F 40 04 10 80 04 11 80 06 12  // .@.....@........
    5D80: C0 06 13 00 07 62 00 02 53 8A 1E 49 04 80 FB 07  // .....b..S..I....
    5D90: 7F 10 32 FF D1 E3 2E 8B 87 3C 5D A2 65 04 88 26  // ..2......<].e..&
    5DA0: 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30  // f.[.,0(0-0)0*0.0
    5DB0: 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3  // .?)0.8%u...].3..
    5DC0: 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 49 03 F6  // ...;.u.......I..
    5DD0: 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04  // ....uI.>L..tB.I.
    5DE0: B9 00 20 2E 8B 3E 4F 03 26 F6 47 33 01 75 0E 26  // .. ..>O.&.G3.u.&
    5DF0: F6 47 09 01 75 1B 2E 8B 3E 4D 03 EB 14 3C 06 7E  // .G..u...>M...<.~
    5E00: 0B 2E 8B 3E 4B 03 26 8A 67 37 B5 40 66 33 C0 EB  // ...>K.&.g7.@f3..
    5E10: 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80  // .f. . ...f3..f..
    5E20: 26 87 04 7F 07 1F C3 2E 8E 1E 49 03 80 FB 10 75  // &.........I....u
    5E30: 03 E9 9D 01 80 FB 20 75 03 E9 BE 01 80 FB 32 75  // ...... u......2u
    5E40: 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 16  // ......u.........
    5E50: 01 FE C8 0F 85 16 01 EC 24 FD B2 C2 EE E9 07 01  // ........$.......
    5E60: 80 FB 35 75 4B 3C 80 75 08 80 0E 89 04 40 E9 F6  // ..5uK<.u.....@..
    5E70: 00 F6 06 89 04 40 0F 84 F3 00 0A C0 0F 84 ED 00  // .....@..........
    5E80: FE C8 75 06 E8 FB 08 E9 DD 00 F6 06 89 04 40 0F  // ..u...........@.
    5E90: 84 DA 00 FE C8 75 0C E8 7B 23 32 C0 BA C3 03 EE  // .....u..{#2.....
    5EA0: E9 C4 00 FE C8 0F 85 C4 00 E8 BD 23 B0 01 EB EC  // ...........#....
    5EB0: 80 FB 30 74 03 E9 96 00 50 E8 6C 40 8A EF BA CC  // ..0t....P.l@....
    5EC0: 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12  // ....X..u0.....u.
    5ED0: 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9  // ..u....$0<0u....
    5EE0: 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89  // .....$0<0u....&.
    5EF0: 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89  // .o......6<.uA.&.
    5F00: 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30  // .o.....u......$0
    5F10: 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10  // <0t.....t.......
    5F20: 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A  // .$0<0u.....t....
    5F30: 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02  // .............)<.
    5F40: 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB  // u+.&..o.........
    5F50: 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08  // 1u...t.<.u......
    5F60: EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB  // ...&......F.....
    5F70: 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD  // 3u.<.t.<.u..&...
    5F80: EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00  // ...........4u.<.
    5F90: 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87  // u..&.....<.u....
    5FA0: 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74  // .......6u&. .<.t
    5FB0: 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C  // ....<.t.........
    5FC0: FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3  // .......B."......
    5FD0: C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0  // ...........u....
    5FE0: 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89  // ........%.......
    5FF0: 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00  // ^..N..F.........
    6000: 53 87 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00  // S.......(.......
    6010: 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00  // .c-'(.+.........
    6020: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    6030: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    6040: 00 00 00 00 10 0E 00 FF 28 18 08 00 08 09 03 00  // ........(.......
    6050: 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00  // .c-'(.+.........
    6060: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    6070: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    6080: 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00  // ........P.......
    6090: 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00  // .c_OP.U.........
    60A0: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    60B0: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    60C0: 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00  // ........P.......
    60D0: 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00  // .c_OP.U.........
    60E0: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    60F0: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    6100: 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00  // ........(...@...
    6110: 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00  // .c-'(.+.........
    6120: 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02  // ................
    6130: 04 06 07 10 11 12 13 14 15 16 17 01 00 03 00 00  // ................
    6140: 00 00 00 00 30 0F 00 FF 28 18 08 00 40 09 03 00  // ....0...(...@...
    6150: 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00  // .c-'(.+.........
    6160: 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02  // ................
    6170: 04 06 07 10 11 12 13 14 15 16 17 01 00 03 00 00  // ................
    6180: 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00  // ....0...P...@...
    6190: 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00  // .c_OP.T.........
    61A0: 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17  // .....(..........
    61B0: 17 17 17 17 17 17 17 17 17 17 17 01 00 01 00 00  // ................
    61C0: 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00  // ........P.......
    61D0: 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    61E0: 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08  // ....](.c........
    61F0: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    6200: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    6210: 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    6220: 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04  // .....P..........
    6230: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10  // ................
    6240: 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28  // ....@..........(
    6250: 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18  // ..-2 $8?........
    6260: 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15  // . $(-28?........
    6270: 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10  // ..%/83.*%')*,#..
    6280: 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34  // #%'*,+*))-27;974
    6290: 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33  // 234551,'/0234433
    62A0: 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31  // 258:=<:98899:741
    62B0: 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13  // ................
    62C0: 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13  // ................
    62D0: 12 14 16 18 1A 19 18 17 16 17 17 17 18 15 14 11  // ................
    62E0: 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19  // ................
    62F0: 19 19 19 19 1A 18 17 16 02 03 04 05 07 06 06 05  // ................
    6300: 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04  // ................
    6310: 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D  // ................
    6320: 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D  // ................
    6330: 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C  // ................
    6340: 00 00 00 00 00 00 00 00 28 18 08 00 20 09 0F 00  // ........(... ...
    6350: 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00  // .c-'(.+.........
    6360: 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04  // ................
    6370: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    6380: 00 00 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00  // ........P...@...
    6390: 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00  // .c_OP.T.........
    63A0: 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04  // .....(..........
    63B0: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    63C0: 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28  // ..............%(
    63D0: 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36  // ... ..(,..%*..26
    63E0: 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30  // ..',. 49...$..,0
    63F0: 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D  // ..!&...3..+0.$8=
    6400: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    6410: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    6420: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    6430: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    6440: 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00  // ..-2 $8?P.......
    6450: 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    6460: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18  // ....](.c........
    6470: 18 00 00 00 08 00 00 00 18 00 00 0B 00 05 00 00  // ................
    6480: 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00  // ........P.......
    6490: 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    64A0: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04  // ....](.c........
    64B0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    64C0: 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00  // ........(.......
    64D0: 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00  // ..-'(.+....M....
    64E0: 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04  // ....]..c........
    64F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    6500: 00 00 00 00 10 0E 00 FF 28 18 0E 00 08 09 03 00  // ........(.......
    6510: 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00  // ..-'(.+....M....
    6520: 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04  // ....]..c........
    6530: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    6540: 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00  // ........P.......
    6550: 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    6560: 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04  // ....](.c........
    6570: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    6580: 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00  // ........P.......
    6590: 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    65A0: 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04  // ....](.c........
    65B0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    65C0: 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00  // ........(.......
    65D0: 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00  // .g-'(.+....O....
    65E0: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    65F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    6600: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    6610: 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .g_OP.U....O....
    6620: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    6630: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    6640: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    6650: 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .f_OP.U....O....
    6660: 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08  // .....(..........
    6670: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    6680: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    6690: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    66A0: 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F  // .....(......????
    66B0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00  // ???????????.....
    66C0: 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    66D0: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    66E0: 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04  // .....(..........
    66F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    6700: 00 00 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00  // ........(... ...
    6710: 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00  // .c_OP.T....A....
    6720: 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04  // .....(@.........
    6730: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00  // ...........A....
    6740: 00 00 00 00 40 05 0F FF A0 5F 00 C0 00 00 00 00  // ....@...._......
    6750: 00 00 00 00 00 00 00 00 00 67 00 C0 00 00 00 00  // .........g......
    6760: 00 00 00 00 00 00 00 00 1A 00 9A 9F 00 C0 00 00  // ................
    6770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6780: 00 00 1E E8 10 00 2E 8E 1E 49 03 E8 FA 37 E8 D1  // .........I...7..
    6790: 37 E8 80 1A 1F C3 2E 8E 1E 49 03 C7 06 87 04 60  // 7........I.....`
    67A0: F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04  // ...........$....
    67B0: B4 01 E8 36 1F A0 89 04 80 26 10 04 CF 80 0E 10  // ...6.....&......
    67C0: 04 20 C7 06 63 04 D4 03 0E 1F E8 19 A6 A9 01 00  // . ..c...........
    67D0: 74 11 E8 06 A7 F7 C1 02 00 74 08 E8 9B A5 80 FB  // t........t......
    67E0: 01 75 03 E8 25 A6 C3 1E 2E 8E 1E 49 03 0E 07 EB  // .u..%......I....
    67F0: 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC  // ........t..S....
    6800: B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE 6C  // ........>c..u/.l
    6810: 68 B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03  // h.@.3...........
    6820: 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E  // ........B...E...
    6830: 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47  // .E....J......&.G
    6840: 2B F6 06 89 04 06 74 31 B9 F8 00 BF E0 61 3C 08  // +.....t1.....a<.
    6850: 74 11 B9 40 00 BF 60 63 3C 38 74 07 3C 3F 74 03  // t..@..`c<8t.<?t.
    6860: BF A0 63 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE  // ..c3.........B..
    6870: EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74  // ...J....I<.t%<8t
    6880: 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 D4 CC B9 08  // .<?t*...3.Q.....
    6890: 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA  // .....t.....g.Y..
    68A0: EB 20 E8 BD CC B9 00 01 33 DB E8 57 00 EB 13 B9  // . ......3..W....
    68B0: 40 00 33 DB 51 E8 28 00 8A C3 E8 70 30 FE C3 59  // @.3.Q.(....p0..Y
    68C0: E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F  // ..[..*.*.*.*.?.?
    68D0: 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F  // .?.?.*.?.*.?.*.?
    68E0: 8B FB C1 EF 02 83 E7 0F 2E 8A B5 5C 68 8B FB D1  // ...........\h...
    68F0: EF 83 E7 0F 2E 8A AD 5C 68 8B FB 83 E7 0F 2E 8A  // .......\h.......
    6900: 8D 5C 68 C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E  // .\h.........B.G.
    6910: 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3  // ...G....G..J....
    6920: 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E  // ........~......~
    6930: 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00  // |.....|.....|8..
    6940: 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00  // .8|.|8...8....8.
    6950: 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00  // 8|..l.8...<~<...
    6960: FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00  // ..........<ff<..
    6970: FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78  // ...........6x..x
    6980: 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60  // ~..~.~.......p.`
    6990: 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00  // >>66.f...<f.f<..
    69A0: 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00  // ...........>....
    69B0: 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00  // .<~.~<..fffff.f.
    69C0: 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78  // ..{;....<f8ll8.x
    69D0: 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E  // .........<~.~<.~
    69E0: 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00  // .<~.........~<..
    69F0: 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00  // .........0p.p0..
    6A00: 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    6A10: 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00  // ..8||.....||8...
    6A20: 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00  // .........<<.....
    6A30: 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00  // lll.....ll.l.ll.
    6A40: 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00  // .~.|........0`..
    6A50: 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00 00 00  // 8l8v..v...0.....
    6A60: 18 30 60 60 60 30 18 00 60 30 18 18 18 30 60 00  // .0```0..`0...0`.
    6A70: 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00  // ..|.|......~....
    6A80: 00 00 00 00 18 18 30 00 00 00 00 FE 00 00 00 00  // ......0.........
    6A90: 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00  // .....88....0`...
    6AA0: 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00  // |.....|..x....~.
    6AB0: 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00  // |...0f..|..<..|.
    6AC0: 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00  // ..<l..........|.
    6AD0: 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00  // |.....|.........
    6AE0: 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00  // |..|..|.|..~..|.
    6AF0: 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30  // ...............0
    6B00: 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00  // ..0`0...........
    6B10: 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00  // `0...0`.|.......
    6B20: 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00  // |.....~.8l......
    6B30: FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00  // .ff|ff..<f...f<.
    6B40: F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00  // .lfffl..........
    6B50: FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00  // .b`|``..|.....|.
    6B60: C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00  // ........<.....<.
    6B70: 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00  // <.....p.........
    6B80: F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00  // .````b..........
    6B90: C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    6BA0: FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06  // .ff|``..|.....|.
    6BB0: FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    6BC0: 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00  // ~Z....<.......|.
    6BD0: C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00  // ....l8..........
    6BE0: C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00  // .l888l..fff<..<.
    6BF0: FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00  // ....0b..|`````|.
    6C00: C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00  // .`0.....|.....|.
    6C10: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF  // .8l.............
    6C20: 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00  // 00........x.|.~.
    6C30: E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00  // .`|fff....|...|.
    6C40: 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00  // ..|...~...|...|.
    6C50: 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C  // .60.00x...v..~.|
    6C60: E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00  // .`|fff....8...<.
    6C70: 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00  // .......x.`flxl..
    6C80: 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00  // ..........l.....
    6C90: 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00  // ...ffff...|...|.
    6CA0: 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E  // ...ff|`...v..|..
    6CB0: 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00  // ...f``....|.|.|.
    6CC0: 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00  // 00.006........v.
    6CD0: 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00  // ....l8........l.
    6CE0: 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C  // ...l8l.......v.|
    6CF0: 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00  // ....0d.....p....
    6D00: 18 18 18 00 18 18 18 00 70 18 18 0E 18 18 70 00  // ........p.....p.
    6D10: 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00  // v.........88ll..
    6D20: 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00  // <f.f<..x......v.
    6D30: 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00  // ..|...|.|.x.|.~.
    6D40: C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00  // ..x.|.~...x.|.~.
    6D50: 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38  // 88x.|.~...|.|.l8
    6D60: 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00  // |.|...|...|...|.
    6D70: E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00  // ..|...|.f.8...<.
    6D80: 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00  // |.8...<...8...<.
    6D90: C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00  // .8l.....88.|....
    6DA0: 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00  // ..........l.~.n.
    6DB0: 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00  // ~.......|..|..|.
    6DC0: 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00  // ...|..|....|..|.
    6DD0: 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00  // |.....v.......v.
    6DE0: 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00  // ..<...<..8l..l8.
    6DF0: C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00  // ......|...~..~..
    6E00: 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00  // 8l`.f.l..f<~.<..
    6E10: 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C  // >c8.c>...>a<.|..
    6E20: 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00  // ..x.|.~...8...<.
    6E30: 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00  // ...|..|.......v.
    6E40: 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00  // ....ff..........
    6E50: 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C  // >.>`gc=.>.v..~.|
    6E60: 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00  // ...0`f<....|``..
    6E70: 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E  // ...|.......0|6.>
    6E80: C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00  // ...0l<~.....<<..
    6E90: 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00  // .6l.l6....l6l...
    6EA0: 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA  // ".".".".U.U.U.U.
    6EB0: DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18  // .w.w.w.w........
    6EC0: 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    6ED0: 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36  // 6666.666.....666
    6EE0: 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36  // ........66...666
    6EF0: 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36  // 66666666.....666
    6F00: 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00  // 66......6666....
    6F10: 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18  // ................
    6F20: 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00  // ................
    6F30: 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18  // ................
    6F40: 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18  // ................
    6F50: 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36  // ........66667666
    6F60: 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36  // 6670?.....?07666
    6F70: 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36  // 66...........666
    6F80: 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00  // 66707666........
    6F90: 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00  // 66...666........
    6FA0: 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18  // 6666............
    6FB0: 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00  // .....6666666?...
    6FC0: 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    6FD0: 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36  // ....?6666666.666
    6FE0: 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00  // ................
    6FF0: 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF  // ................
    7000: 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7010: 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00  // ................
    7020: 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00  // ..f...f..x......
    7030: 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00  // ..b```....lllll.
    7040: FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00  // ..`0`....~....p.
    7050: 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00  // .ffff|...v....8.
    7060: FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00  // .8l.l8..8l...l8.
    7070: 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00  // 8l..ll..>`8f..x.
    7080: 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00  // ..~..~...|...|..
    7090: 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00  // 8`...`8.|.......
    70A0: 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00  // ..........~...~.
    70B0: 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00  // 0...0.~...0...~.
    70C0: 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78 30 00  // .............x0.
    70D0: 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00  // ....~....v..v...
    70E0: 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00 00 00  // |..|............
    70F0: 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00  // .............8..
    7100: D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00  // .lll....p.0.....
    7110: 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00  // ..||||..........
    7120: 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    7130: 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7140: 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00  // .....~........~.
    7150: 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00  // .....|........|.
    7160: 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00  // ......l.....|8..
    7170: 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00  // .......8|.|8....
    7180: 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00  // .......88.l.l.8.
    7190: 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00  // ......8||...l.8.
    71A0: 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00  // .........<<<....
    71B0: 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF  // ................
    71C0: FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00  // ........<fff<...
    71D0: 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF  // ................
    71E0: FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00  // ........6x....x.
    71F0: 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00  // .....<fff<.~....
    7200: 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00  // ............x.p.
    7210: 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C  // .....>6>66v.f...
    7220: 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00  // .......~<ff<~...
    7230: 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00  // ................
    7240: 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00  // ........>~.~>...
    7250: 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00  // ......<~....~<..
    7260: 00 00 00 00 00 66 66 66 66 66 66 66 00 66 66 00  // .....fffffff.ff.
    7270: 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00  // ..........{.....
    7280: 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6  // .....|..`|..|...
    7290: 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE FE 00  // |...............
    72A0: 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00  // ......<~...~<.~.
    72B0: 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00  // ......<~........
    72C0: 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00  // ............~<..
    72D0: 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00  // ................
    72E0: 00 00 00 00 00 00 00 00 30 70 FE 70 30 00 00 00  // ........0p.p0...
    72F0: 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00  // ................
    7300: 00 00 00 00 00 00 00 00 24 66 FF 66 24 00 00 00  // ........$f.f$...
    7310: 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00  // .......888||....
    7320: 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00  // ........|||88...
    7330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7340: 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00  // ......<<<<......
    7350: 00 00 00 00 36 36 36 36 14 00 00 00 00 00 00 00  // ....6666........
    7360: 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00  // .....lll.ll.lll.
    7370: 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18  // .......|..x<..|.
    7380: 18 00 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00  // ........bf..0f..
    7390: 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00  // .....8l80v~...v.
    73A0: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    73B0: 00 00 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00  // .......000000...
    73C0: 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00  // .....0........0.
    73D0: 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00  // ........l8.8l...
    73E0: 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 00  // ..........~.....
    73F0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18  // ................
    7400: 00 00 00 00 00 00 00 00 00 00 FE 00 00 00 00 00  // ................
    7410: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00  // ................
    7420: 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00  // ...........0`...
    7430: 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00  // .....|........|.
    7440: 00 00 00 00 00 18 78 18 18 18 18 18 18 18 7E 00  // ......x.......~.
    7450: 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00  // .....|.....0`...
    7460: 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00  // .....|...<....|.
    7470: 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00  // .......<l.......
    7480: 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00  // ..............|.
    7490: 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00  // .....|........|.
    74A0: 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00  // ..........00000.
    74B0: 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00  // .....|...|....|.
    74C0: 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00  // .....|....~...|.
    74D0: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00  // ................
    74E0: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18  // ................
    74F0: 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00  // ........0`.`0...
    7500: 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00  // ................
    7510: 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00  // ......`0.....0`.
    7520: 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00  // .....|..........
    7530: 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00  // .....|........~.
    7540: 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00  // .....8l.........
    7550: 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00  // ......fff|ffff..
    7560: 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00  // .....<f......f<.
    7570: 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00  // ......lffffffl..
    7580: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00  // ......f`d|d``f..
    7590: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00  // ......f`d|d```..
    75A0: 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00  // .....|........|.
    75B0: 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00  // ................
    75C0: 00 00 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00  // .....<........<.
    75D0: 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00  // .....<........p.
    75E0: 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00  // ................
    75F0: 00 00 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00  // ......``````bf..
    7600: 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00  // ................
    7610: 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00  // ................
    7620: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // .....|........|.
    7630: 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00  // ......ffff|```..
    7640: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06  // .....|........|.
    7650: 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00  // ......fff|xlff..
    7660: 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00  // .....|...p....|.
    7670: 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00  // .....~Z.......<.
    7680: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    7690: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    76A0: 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00  // ................
    76B0: 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00  // ........l88l....
    76C0: 00 00 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00  // .....fffff<...<.
    76D0: 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00  // ..........0`....
    76E0: 00 00 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00  // .....|````````|.
    76F0: 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00  // .........`0.....
    7700: 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00  // .....|........|.
    7710: 00 00 00 00 10 38 6C C6 00 00 00 00 00 00 00 00  // .....8l.........
    7720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7730: FF 00 00 00 18 18 18 0C 00 00 00 00 00 00 00 00  // ................
    7740: 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    7750: 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00  // ......``|fffff..
    7760: 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00  // ........|.....|.
    7770: 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00  // ........|.....~.
    7780: 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    7790: 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00  // ......600.0000x.
    77A0: 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6  // ........v....v..
    77B0: 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00  // |.....``|fffff..
    77C0: 00 00 00 00 00 18 18 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    77D0: 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC  // ................
    77E0: 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00  // x.....``fflxlf..
    77F0: 00 00 00 00 00 18 18 18 18 18 18 18 18 18 1C 00  // ................
    7800: 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00  // ........l.......
    7810: 00 00 00 00 00 00 00 00 DC 66 66 66 66 66 66 00  // .........ffffff.
    7820: 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    7830: 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60  // .........ffff|``
    7840: F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C  // ........v....|..
    7850: 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00  // .........f````..
    7860: 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    7870: 00 00 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00  // .....000.00006..
    7880: 00 00 00 00 00 00 00 00 CC CC CC CC CC CC 76 00  // ..............v.
    7890: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    78A0: 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00  // ..............l.
    78B0: 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00  // ..........l8l...
    78C0: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6  // .............v..
    78D0: 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00  // |...........0b..
    78E0: 00 00 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00  // .........p......
    78F0: 00 00 00 00 00 18 18 18 18 00 18 18 18 18 18 00  // ................
    7900: 00 00 00 00 00 70 18 18 18 0E 18 18 18 18 70 00  // .....p........p.
    7910: 00 00 00 00 00 76 DC 00 00 00 00 00 00 00 00 00  // .....v..........
    7920: 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00  // .........88ll...
    7930: 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC  // .....<f....f<...
    7940: 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00  // 8.............v.
    7950: 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00  // ......0.|.....|.
    7960: 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00  // ....0x..x.|...v.
    7970: 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    7980: 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00  // ....`0..x.|...v.
    7990: 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00  // ....8l8.x.|...v.
    79A0: 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C  // .......|....|..l
    79B0: 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00  // 8...0x..|.....|.
    79C0: 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    79D0: 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00  // ....0...|.....|.
    79E0: 00 00 00 00 00 66 00 00 38 18 18 18 18 18 3C 00  // .....f..8.....<.
    79F0: 00 00 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00  // .....<f.8.....<.
    7A00: 00 00 00 00 00 00 00 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    7A10: 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00  // ......8l........
    7A20: 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00  // ...8l8.8l.......
    7A30: 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00  // .....0..``|```..
    7A40: 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00  // .......f......v.
    7A50: 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00  // .....~..........
    7A60: 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00  // ....0x..|.....|.
    7A70: 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    7A80: 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00  // ....0...|.....|.
    7A90: 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00  // ....0x........v.
    7AA0: 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00  // ....`0........v.
    7AB0: 00 00 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00  // ......<.......<.
    7AC0: 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00  // ......|.......|.
    7AD0: 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    7AE0: 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00  // .......|....|...
    7AF0: 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00  // ....8l``.```f.l.
    7B00: 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00  // ....ffff<.~.<...
    7B10: 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C  // .....>cc0..cc>..
    7B20: 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C  // ........>c8.c>..
    7B30: 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00  // ......0.x.|...v.
    7B40: 00 00 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00  // ......0.8.....<.
    7B50: 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00  // ......0.|.....|.
    7B60: 00 00 00 00 18 30 60 00 CC CC CC CC CC DC 76 00  // .....0`.......v.
    7B70: 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00  // .....v...fffff..
    7B80: 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00  // ....v...........
    7B90: 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00  // ....!...3``gc3..
    7BA0: 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00  // ....B<.;fff>.f<.
    7BB0: 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00  // .....00.000`..|.
    7BC0: 00 00 00 00 00 00 00 00 00 00 7E 60 60 60 00 00  // ..........~```..
    7BD0: 00 00 00 00 00 00 00 00 00 00 7E 06 06 06 00 00  // ..........~.....
    7BE0: 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18  // ....``bfl.0`.6..
    7BF0: 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06  // >...``bfl.6n.6~.
    7C00: 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00  // ..........<<<<..
    7C10: 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00  // ........6l.l6...
    7C20: 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00  // .........l6l....
    7C30: 00 00 00 11 44 11 44 11 44 11 44 11 44 11 44 11  // ....D.D.D.D.D.D.
    7C40: 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.U.U.U.U.U.U.
    7C50: 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.w.w.w.w.w.w.
    7C60: 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18 18  // w.w.............
    7C70: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    7C80: 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18  // ................
    7C90: 18 18 18 36 36 36 36 36 36 36 F6 36 36 36 36 36  // ...6666666.66666
    7CA0: 36 36 36 00 00 00 00 00 00 00 FE 36 36 36 36 36  // 666........66666
    7CB0: 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18  // 666.............
    7CC0: 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36  // ...66666...66666
    7CD0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7CE0: 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36  // 666........66666
    7CF0: 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00  // 66666666........
    7D00: 00 00 00 36 36 36 36 36 36 36 FE 00 00 00 00 00  // ...6666666......
    7D10: 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00  // ................
    7D20: 00 00 00 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7D30: 18 18 18 18 18 18 18 18 18 18 1F 00 00 00 00 00  // ................
    7D40: 00 00 00 18 18 18 18 18 18 18 FF 00 00 00 00 00  // ................
    7D50: 00 00 00 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    7D60: 18 18 18 18 18 18 18 18 18 18 1F 18 18 18 18 18  // ................
    7D70: 18 18 18 00 00 00 00 00 00 00 FF 00 00 00 00 00  // ................
    7D80: 00 00 00 18 18 18 18 18 18 18 FF 18 18 18 18 18  // ................
    7D90: 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18  // ................
    7DA0: 18 18 18 36 36 36 36 36 36 36 37 36 36 36 36 36  // ...6666666766666
    7DB0: 36 36 36 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6666666670?.....
    7DC0: 00 00 00 00 00 00 00 00 3F 30 37 36 36 36 36 36  // ........?0766666
    7DD0: 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // 66666666........
    7DE0: 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    7DF0: 36 36 36 36 36 36 36 36 37 30 37 36 36 36 36 36  // 6666666670766666
    7E00: 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00  // 666.............
    7E10: 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36  // ...66666...66666
    7E20: 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00  // 666.............
    7E30: 00 00 00 36 36 36 36 36 36 36 FF 00 00 00 00 00  // ...6666666......
    7E40: 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18  // ................
    7E50: 18 18 18 00 00 00 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    7E60: 36 36 36 36 36 36 36 36 36 36 3F 00 00 00 00 00  // 6666666666?.....
    7E70: 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00  // ................
    7E80: 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18  // ................
    7E90: 18 18 18 00 00 00 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    7EA0: 36 36 36 36 36 36 36 36 36 36 FF 36 36 36 36 36  // 6666666666.66666
    7EB0: 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18  // 666.............
    7EC0: 18 18 18 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7ED0: 00 00 00 00 00 00 00 00 00 00 1F 18 18 18 18 18  // ................
    7EE0: 18 18 18 FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    7EF0: FF FF FF 00 00 00 00 00 00 00 00 FF FF FF FF FF  // ................
    7F00: FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7F10: F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    7F20: 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    7F30: 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00  // .......v......v.
    7F40: 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00  // .....x..........
    7F50: 00 00 00 00 00 FE 66 62 60 60 60 60 60 60 60 00  // ......fb```````.
    7F60: 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00  // .........llllll.
    7F70: 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00  // .......b0..0b...
    7F80: 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00  // ........~.....p.
    7F90: 00 00 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80  // .......fffff|`..
    7FA0: 00 00 00 00 00 00 00 00 76 DC 18 18 18 18 18 00  // ........v.......
    7FB0: 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00  // ......88l..l88..
    7FC0: 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00  // ......8l.....l8.
    7FD0: 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00  // .....8l....lll..
    7FE0: 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00  // .....>``<f....x.
    7FF0: 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00  // ........~...~...
    8000: 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00  // .......|....|`..
    8010: 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00  // .......0``|``0..
    8020: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00  // .....|..........
    8030: 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00  // ................
    8040: 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00  // .........~....~.
    8050: 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00  // .....0.....0..~.
    8060: 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00  // .......0`0....~.
    8070: 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18  // ................
    8080: 18 18 18 18 18 18 18 18 18 18 18 18 18 58 78 30  // .............Xx0
    8090: 00 00 00 00 00 00 00 18 18 00 7E 00 18 18 00 00  // ..........~.....
    80A0: 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00  // .........v..v...
    80B0: 00 00 00 00 00 78 CC CC 78 00 00 00 00 00 00 00  // .....x..x.......
    80C0: 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00  // ................
    80D0: 00 00 00 00 00 00 00 00 00 00 00 18 00 00 00 00  // ................
    80E0: 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18  // .............x8.
    80F0: 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00  // ......lllll.....
    8100: 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00  // .....p..0`......
    8110: 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00  // ........~~~~~~..
    8120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8130: 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    8140: 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0  // ..../........0`.
    8150: 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3  // .....0..~.......
    8160: C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB  // .~....M.........
    8170: C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18 18 18  // .......T........
    8180: 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3  // ...<....V.......
    8190: C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3  // ..f<.....W......
    81A0: DB DB DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3  // .....f....X.....
    81B0: 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3  // f<<f.......Y....
    81C0: C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00  // ..f<...<....\...
    81D0: 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00  // ..`0.........m..
    81E0: 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00  // ...f..........v.
    81F0: 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77  // ........f<.....w
    8200: 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00  // ...........f....
    8210: 00 00 CB 70 C3 8B FA A0 10 04 24 30 AA B9 1E 00  // ...p......$0....
    8220: BE 49 04 F3 A4 B1 07 BE 84 04 F3 A4 B1 04 BE A8  // .I..............
    8230: 04 F3 A4 9C FA B1 04 BE 14 00 F3 A4 B1 04 BE 74  // ...............t
    8240: 00 F3 A4 B1 04 BE 7C 00 F3 A4 B1 04 BE 0C 01 F3  // ......|.........
    8250: A4 C4 3E 08 01 89 3E B4 01 8C 06 B6 01 C7 06 08  // ..>...>.........
    8260: 01 14 5A 8C 0E 0A 01 9D C3 8B F2 8C C2 8E DA 33  // ..Z............3
    8270: D2 8E C2 26 8A 26 10 04 80 E4 CF AC 0A C4 26 A2  // ...&.&........&.
    8280: 10 04 B9 1E 00 BF 49 04 F3 A4 B1 07 BF 84 04 F3  // ......I.........
    8290: A4 B1 04 BF A8 04 F3 A4 9C FA B1 04 BF 14 00 F3  // ................
    82A0: A4 B1 04 BF 74 00 F3 A4 B1 04 BF 7C 00 F3 A4 B1  // ....t......|....
    82B0: 04 BF 0C 01 F3 A4 06 1F B1 04 BE B4 01 BF 08 01  // ................
    82C0: F3 A4 C7 06 B4 01 14 5A 8C 0E B6 01 9D C3 0B DB  // .......Z........
    82D0: 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 8A  // t..F.W2..@..._..
    82E0: 9F 26 89 1D 26 8C 4D 02 2E 8E 1E 49 03 57 BE 49  // .&..&.M....I.W.I
    82F0: 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2  // ..........&..FG.
    8300: F7 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26 89  // ._.....&.E"...&.
    8310: 45 23 57 E8 12 1C 5F 26 88 5D 25 26 88 7D 26 8A  // E#W..._&.]%&.}&.
    8320: 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1  // .I....t......2..
    8330: E3 2E 8A 87 62 9F 32 E4 0A C0 74 01 40 26 89 45  // ....b.2...t.@&.E
    8340: 27 2E 8A 87 63 9F 26 88 45 29 A1 85 04 8A 16 84  // '...c.&.E)......
    8350: 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E  // .......=..~...=^
    8360: 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E  // .~...=..~...=..~
    8370: 00 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04  // .&.U*.&....$....
    8380: 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A  // .............$..
    8390: E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02  // .......0.B.$....
    83A0: 0A C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8 77  // ....&.E-..&.E1.w
    83B0: 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74  // ...2.........;.t
    83C0: 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5  // 4&.w.....t....&.
    83D0: 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C  // w.....t....&.w..
    83E0: D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1  // ...t....&.w.....
    83F0: 74 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4 03  // t......&.U2.....
    8400: E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2  // ................
    8410: 04 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A  // ..%....&.E+...F.
    8420: 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B EC  // ....t...t6..tV..
    8430: C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60  // .F.... ....t...`
    8440: F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03 03  // ...t...:...t....
    8450: 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3  // ..?......F..F...
    8460: 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02  // .... ...t.......
    8470: 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6  // t.......t.......
    8480: 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6  // F......t.....%..
    8490: C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB  // ..t.......t.....
    84A0: DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04  // ....B....J....k.
    84B0: BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC  // ......2.......B.
    84C0: AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26  // ...J........ ..&
    84D0: 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0  // ....GF...&.%.G..
    84E0: E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2  // ........&..G....
    84F0: F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8  // ....QW..+.&.....
    8500: 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26 88  // ...&.D.&.TA...&.
    8510: 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44 04  // D....&.D....&.D.
    8520: B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70  // ...&...........p
    8530: FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4  // .&........&.TA2.
    8540: B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE  // ....[.&.D..._...
    8550: 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83  // 2.....I.&.D.._Y.
    8560: C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51 57  // .`......+.&.G.QW
    8570: 2E 8E 1E 49 03 A0 10 04 24 30 AA BE 49 04 B9 1E  // ...I....$0..I...
    8580: 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3  // ................
    8590: A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE  // .........t......
    85A0: 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83  // |............_Y.
    85B0: C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE  // .:....&.?....Q..
    85C0: 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8  // ................
    85D0: 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF  // ..G..&.D........
    85E0: 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0  // &...&.TA......2.
    85F0: E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE  // ...&.D.....&.D..
    8600: EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2  // ...2..... ...2..
    8610: CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B  // ....&.D..Y....&.
    8620: 7F 02 03 FB 06 51 2E 8E 1E 49 03 26 8A 05 80 26  // .....Q...I.&...&
    8630: 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E  // .......G.I......
    8640: FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E  // ...............~
    8650: FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E  // .......v..t....n
    8660: FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E  // ..|....f.......^
    8670: FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8  // .Y.......+.&.G..
    8680: A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC  // .....4.B.&......
    8690: 26 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9  // &.E.PJJ.&.E.....
    86A0: 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D  // ..B2..BB....XJ..
    86B0: C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34  // ...&.w....l....4
    86C0: EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42 42  // .&......&.D..VBB
    86D0: 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2  // ...2..B...&...F.
    86E0: F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24  // .^..&.D........$
    86F0: FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB  // ................
    8700: 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A  // ........... ..P.
    8710: E0 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F 8A  // .....&....&..$..
    8720: E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13  // .<.~.&.G3.u.<#t.
    8730: 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75  // <2t.<3t...&.G..u
    8740: 02 B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02 26  // ....&I.........&
    8750: F6 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16 63  // .G..t....&.....c
    8760: 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF  // ...N.....b......
    8770: 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4  // P.....3....&..2.
    8780: A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85  // .J.&.G....&.G...
    8790: 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60  // .&.G..L.&.G....`
    87A0: 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75  // .X.R2.3.......)u
    87B0: 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E  // .2.3.....Z...`..
    87C0: 1E 49 03 2E 83 0E 53 03 00 75 6E 80 3E 00 05 01  // .I....S..un.>...
    87D0: 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B  // tg.......b.2....
    87E0: FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04  // ...P..>b.P2.....
    87F0: 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29  // 2.AQ..J.2......)
    8800: 75 3D 51 52 89 95 50 04 B4 08 E8 6F D2 0A C0 75  // u=QR..P....o...u
    8810: 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE  // .. 3.2.....)u.Z.
    8820: C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00  // .Y....Y...w.2...
    8830: 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59  // .X..P....a...ZYY
    8840: B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06  // ....R*.8.}.2....
    8850: 4B 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA  // K.Z.............
    8860: C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A  // .........m...2..
    8870: E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57  // .........Ku.2..W
    8880: 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8  // ..S..b...u...t..
    8890: 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3  // 5.[..+.......2..
    88A0: 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04  // ..2.+...t**..&..
    88B0: 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E  // ..R... .......Z.
    88C0: 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F  // ............Hu..
    88D0: E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC  // ..............B.
    88E0: 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D  // $....J....B...J.
    88F0: C3 1E 2E 8E 1E 49 03 8B 16 63 04 80 C2 06 1F C3  // .....I...c......
    8900: 1E 2E 8E 1E 49 03 8B 16 63 04 1F C3 50 BA CC 03  // ....I...c...P...
    8910: EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2  // .....u...X......
    8920: 06 C3 1E 2E 8E 1E 49 03 80 3E 49 04 03 74 13 80  // ......I..>I..t..
    8930: 3E 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E 49  // >I..t..>I..t..>I
    8940: 04 00 1F C3 50 2E 8E 06 4D 03 A0 10 04 24 30 3C  // ....P...M....$0<
    8950: 30 74 05 2E 8E 06 4F 03 58 0B C0 74 03 E8 E1 01  // 0t....O.X..t....
    8960: 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04  // ..N.....+.2...J.
    8970: 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02  // ..............u.
    8980: 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3  // ..8.~...........
    8990: FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06  // ...:.J.t........
    89A0: 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7  // ..@.............
    89B0: DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED  // .+.......S..*.2.
    89C0: 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5  // 2.+.+...........
    89D0: 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE  // ....u.X. .......
    89E0: CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3  // .u..S..*.t......
    89F0: A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E  // .X...... .......
    8A00: 00 2E 8E 1E 4F 03 8A C3 22 DF D3 E3 A8 80 74 03  // ....O...".....t.
    8A10: 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC  // 0.....4"........
    8A20: E8 0C 00 2E 8E 1E 4F 03 8A 04 D2 E8 22 C7 C3 B0  // ......O....."...
    8A30: 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02  // (.....t.........
    8A40: 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03  // ................
    8A50: C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8  // ................
    8A60: 2E 8E 06 4F 03 8B C1 E8 86 00 75 02 8A DE 03 F0  // ...O......u.....
    8A70: E8 24 00 C3 FC 8A D8 2E 8E 06 4F 03 8A C1 8A E6  // .$........O.....
    8A80: E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0  // .m.u............
    8A90: 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA  // .+.......*..,Q..
    8AA0: 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9  // VW..........+.+.
    8AB0: 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4  // ... ... ........
    8AC0: 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57  // _^....Y........W
    8AD0: D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20  // ..........+.... 
    8AE0: D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3  // ........_....u..
    8AF0: E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51  // .......+.8.v.2.Q
    8B00: B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04  // ......Y2..P..>I.
    8B10: 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6  // .t............P.
    8B20: E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04  // ....RS..2.....P.
    8B30: E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A  // ...P...L...[..[Z
    8B40: C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A  // .R...J...2.....Z
    8B50: C3 8B E8 83 E5 0F 2E 8A A6 01 8B 8B E8 C1 ED 04  // ................
    8B60: 83 E5 0F 2E 8A 86 01 8B C3 00 03 0C 0F 30 33 3C  // .............03<
    8B70: 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00  // ?........&......
    8B80: 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88  // ....t........u..
    8B90: 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE  // V.E...c.........
    8BA0: C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32  // ...R.....&J....2
    8BB0: F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04  // ...Z.S..2.....P.
    8BC0: D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6  // .....[.R..2.R...
    8BD0: 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06  // &...&J.Z....t...
    8BE0: 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4  // L...u.Z.R...J...
    8BF0: 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E  // 2.......N.......
    8C00: E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03  // ...Z....&J......
    8C10: 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8  // ....t...2..&L...
    8C20: 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF  // ................
    8C30: B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4  // ... .......2....
    8C40: 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8  // >..&.}......S...
    8C50: 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8  // ................
    8C60: 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76  // .U......<.t....v
    8C70: FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0  // .<Ut.2.[........
    8C80: 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06  // .......[....6...
    8C90: 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6  // ...t%..*.....R2.
    8CA0: C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA  // .......+.Q....+.
    8CB0: 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6  // +.Y..Z..........
    8CC0: F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1  // ........2.......
    8CD0: E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E  // ...+.....+.Nu...
    8CE0: 8E 1E 49 03 89 0E 60 04 8A C5 24 60 A8 20 74 06  // ..I...`...$`. t.
    8CF0: B9 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00 80  // ................
    8D00: 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04  // >I..t....t......
    8D10: 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD  // .t..B..6......8.
    8D20: 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1  // ~...td.......\8.
    8D30: 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB  // tX.....|........
    8D40: 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA  // I...~D..*...u.8.
    8D50: 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A  // t8..8.t2....8.~.
    8D60: 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A  // ...~.........}..
    8D70: D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A  // ...8.t.........*
    8D80: EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3  // ................
    8D90: 2E 8E 1E 49 03 A2 62 04 32 E4 8B F0 F7 26 4C 04  // ...I..b.2....&L.
    8DA0: A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77  // .N....z.t..>I..w
    8DB0: 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27  // ............P..'
    8DC0: FE C3 2E 8E 1E 49 03 8A 26 49 04 E8 C3 92 74 07  // .....I..&I....t.
    8DD0: C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74  // ..P.....H.t....t
    8DE0: 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03  // .w..w.........|.
    8DF0: 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A  // t...N..........J
    8E00: 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA  // .R.&........Z...
    8E10: C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B  // ..0......g....R.
    8E20: 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0  // .J.....&........
    8E30: 5A E8 55 FE C3 2E 8E 1E 49 03 8A 26 49 04 E8 E1  // Z.U.....I..&I...
    8E40: FA 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8  // .t....t.w@......
    8E50: 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6  // S...............
    8E60: FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85  // .....+>J....R.&.
    8E70: 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A  // ..&J......+.Z..J
    8E80: 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74  // .............|.t
    8E90: C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9  // ................
    8EA0: 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B  // R..J..&....+...+
    8EB0: F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E 49 03 2E 8E 06  // .Z.........I....
    8EC0: 4F 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E  // O..].t..>I..|...
    8ED0: 06 4D 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07  // .M.t.....I...&..
    8EE0: 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08  // ...F...P........
    8EF0: 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00 26  // .+....>I..u....&
    8F00: 8A 04 88 46 00 45 26 8A 84 00 20 88 46 00 45 83  // ...F.E&... .F.E.
    8F10: C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00  // .P..............
    8F20: E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0  // .V.... .O.......
    8F30: EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26  // ..+..>..2....u.&
    8F40: 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6  // .}..u...........
    8F50: 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB  // .t.GVW.._^t#....
    8F60: F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E  // ...t.G..u...t...
    8F70: 1E 49 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B  // .I..>|.......2..
    8F80: E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05  // ......F...>I..|.
    8F90: 75 02 EB 5A C3 2E 8E 06 4B 03 E8 18 FC 8B F0 8B  // u..Z....K.......
    8FA0: 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03  // ...+............
    8FB0: 80 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A  // .>I..r.....`u...
    8FC0: F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05  // ....u...........
    8FD0: 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36  // ..Q..&.....F.E.6
    8FE0: 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E  // J...X....2..D...
    8FF0: 06 4B 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7  // .K..P...2.R..2..
    9000: 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04  // &J..&..Z........
    9010: 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03  // +...S.>J.O......
    9020: B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC  // ...2.&......t...
    9030: 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00  // .F...f.E..Ku.[..
    9040: 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E  // .2....3.........
    9050: 49 03 2E 8E 06 4F 03 8A 26 49 04 E8 C4 F8 74 0F  // I....O..&I....t.
    9060: 2E 8E 06 4D 03 80 FC 07 74 05 7C 3D E9 0B 02 8A  // ...M....t.|=....
    9070: E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0  // .....2.....P....
    9080: 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B  // J...2.........t.
    9090: D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75  // ...L.....u.....u
    90A0: 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 4F 03 A1  // .....G...P...O..
    90B0: 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8  // P.......P..&J...
    90C0: 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C  // X..t.$..6|....6.
    90D0: 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1  // ...2.........ti.
    90E0: E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5  // ....U...........
    90F0: 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC  // P.....u'..U.#...
    9100: E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75  // .N.#.&......N..u
    9110: E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC  // ......>.X.r.....
    9120: E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31  // ...#.&1...%.#.&1
    9130: 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E  // .. ..P..u......>
    9140: 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80  // .X.I......P.....
    9150: 74 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50 FE  // t..&0..&0.. ..P.
    9160: CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA  // ........?.X. ...
    9170: C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1  // ....&......O....
    9180: 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0  // .....?.X........
    9190: 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6  // 8.r.2...........
    91A0: E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66  // ...2...f...Q...f
    91B0: 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A  // ...J...du..h...Z
    91C0: 75 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52 F7  // u..`.....u....R.
    91D0: E2 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1  // .f...f...P.f..f.
    91E0: CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10  // ....f.......f...
    91F0: 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03  // Z..J....P.P.....
    9200: F0 2E 8E 06 4B 03 58 57 51 50 9C FC 8B CD E8 3B  // ....K.XWQP.....;
    9210: 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88  // ..........s...&.
    9220: 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F  // .fG..u.f.....XY_
    9230: 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03  // .....8.r.Q2...I.
    9240: FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0  // ......Y+.....R3.
    9250: 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 32 8E 74  // ..f.....f....2.t
    9260: 16 38 E0 74 12 0F B6 D0 E8 4C C6 8A E0 66 C1 C7  // .8.t.....L...f..
    9270: 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F  // ...f...Z.....|..
    9280: 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC  // .....b..........
    9290: 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1  // .u.......PS..2..
    92A0: E3 8B 97 50 04 5B 2E 8E 06 4B 03 E8 07 F9 8B F8  // ...P.[...K......
    92B0: 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85  // ....X2.R.6J.V.&.
    92C0: 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03  // ..6.....u..|..u.
    92D0: B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4  // ..F.........um..
    92E0: B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B  // ....ZXPRJ..WQQW.
    92F0: CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A  // .2......_G..8.v.
    9300: 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA  // 2...I..G..Y..Y_.
    9310: C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26  // .......[KZQW...&
    9320: 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A  // .%....._G+.B;.v.
    9330: 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03  // 3...I..G..Y.....
    9340: B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18  // ................
    9350: EF EB BC 2E 8E 1E 49 03 80 3E 63 04 B4 74 0B BA  // ......I..>c..t..
    9360: CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF  // .....u..B.......
    9370: 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66 04  // u.......&f...&f.
    9380: E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91  // .-...f... ......
    9390: F5 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2  // .t..f.$....t.. .
    93A0: 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3  // f.$......S...~..
    93B0: 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8  // SP..............
    93C0: 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26  // `.t......,...t.&
    93D0: 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58  // .........t.&.].X
    93E0: 5B C3 8A E0 1E 2E 8E 1E 49 03 80 3E 49 04 33 1F  // [.......I..>I.3.
    93F0: 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA  // ...........0....
    9400: E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE  // ................
    9410: 0B ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0  // ..t.G&..........
    9420: 20 EE 9D C3 2E 8E 1E 49 03 8A 26 49 04 E8 F2 F4  //  ......I..&I....
    9430: 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13  // t....w.t........
    9440: 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF  // |.tL............
    9450: 2E 8E 1E 4B 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF  // ...K....u.......
    9460: 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2  // .%.......%...%..
    9470: CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3  // ................
    9480: EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1  // ..%...%.........
    9490: 50 2E 8E 06 4B 03 A1 4A 04 C1 E0 03 F7 E2 03 C1  // P...K..J........
    94A0: 8B F8 58 26 88 05 C3 2E 8E 1E 49 03 8A 26 49 04  // ..X&......I..&I.
    94B0: E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B  // .o.t....w.t.._..
    94C0: EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7  // ..F.....|.t)..5.
    94D0: 8A CC 2E 8E 1E 4B 03 BA CE 03 32 FF B8 04 03 EF  // .....K....2.....
    94E0: D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B  // ....".t......}..
    94F0: EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B  // ..~...J.........
    9500: F8 2E 8E 1E 4B 03 8A 05 8B EC 88 46 1A C3 2E 8E  // ....K......F....
    9510: 1E 49 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04  // .I..>b.....2..P.
    9520: 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 4F  // ......I.<.vJ...O
    9530: 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3  // ....u3..J.......
    9540: 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1  // ........N.......
    9550: E9 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E  // .A..8.sY....c...
    9560: 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 4D 03 80 F9  // ............M...
    9570: 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D  // .t....u.2...<.u.
    9580: 3A 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3  // :6..u...........
    9590: 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75  // u.........L..<.u
    95A0: 04 E8 B6 71 C3 3C 08 75 83 0A D2 74 DE FE CA EB  // ...q.<.u...t....
    95B0: DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03  // .2.2.+.:6..t....
    95C0: CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1  // .......c........
    95D0: FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04  // ...+.+.&.e.P.>N.
    95E0: 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3  // ................
    95F0: A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 7B  // ...X. .........{
    9600: C4 FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2  // ...:.J.t....2.2.
    9610: 89 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E  // ..:6..t.........
    9620: 06 4F 03 E8 FC F2 74 0E 2E 8E 06 4D 03 80 F9 07  // .O....t....M....
    9630: 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F  // t.2............O
    9640: 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04  // ..J...3..6....J.
    9650: FE CA B0 01 E9 70 F7 2E 8E 1E 49 03 F6 06 87 04  // .....p....I.....
    9660: 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3  // .t..B..v....F...
    9670: 2E 8E 1E 49 03 8A DF 32 FF D1 E3 89 97 50 04 D0  // ...I...2.....P..
    9680: EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E  // .8.b.u....\.....
    9690: 49 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04  // I...2.....P...`.
    96A0: 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E 49 03 A0 87  // ...N..V.....I...
    96B0: 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08  // .$...I..&J......
    96C0: 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A  // u-.].t..>I...!Q.
    96D0: CC 8A 2E 84 04 BE 9A 96 81 FE A3 96 74 10 2E 3B  // ............t..;
    96E0: 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A  // .t......$...D.Y.
    96F0: 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56  // >b....F..^..N..V
    9700: 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E 1E 49 03  // ....#.+3.*2...I.
    9710: 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08  // <...PR......ZXt.
    9720: 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C  // .>c..t...>c..u.<
    9730: 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 D6 96 0E 97  // .s.2............
    9740: 2E 97 40 97 75 97 BF 96 BF 96 BF 96 9A 97 B2 97  // ..@.u...........
    9750: B6 97 BF 96 BF 96 BF 96 BF 96 BF 96 BF 96 E4 97  // ................
    9760: BF 96 E8 97 03 98 BF 96 42 98 BF 96 50 98 6B 98  // ........B...P.k.
    9770: 72 98 7E 98 A2 98 80 3E 49 04 13 74 15 E8 BF F4  // r.~....>I..t....
    9780: 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26  // .....p...t...2.&
    9790: 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED  // ............D...
    97A0: 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06  // t.&.}....>I..t..
    97B0: E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B  // ......t.........
    97C0: F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE  // ....2...........
    97D0: AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01  // ................
    97E0: 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26  // w..C....0...$..&
    97F0: 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE  // e.....t.....e. .
    9800: EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0  // ................
    9810: 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA  //  ....N..x.......
    9820: E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42  // ......2........B
    9830: EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11  // .&....J..G......
    9840: EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3  // .B..&......Z....
    9850: 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02  // ..Q..&.5&.m.&.M.
    9860: E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8  // ......CY.....u..
    9870: B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02  // .....0.n.$....t.
    9880: 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3  // ...0.p.....u....
    9890: B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4  // ...0.P....u.....
    98A0: 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B  // 4...Q...........
    98B0: EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00  // ..N..v....Q.....
    98C0: 26 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43 59  // &.5&.m.&.M....CY
    98D0: E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4  // ..............2.
    98E0: 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF  // ...F...?....4...
    98F0: 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00  // ....0.......u...
    9900: C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00  // ......^...Q...s.
    9910: E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89  // .*....R.CY......
    9920: 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89  // ..t.......9.....
    9930: 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E  // ..t..........P..
    9940: F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59  // ..P.;..P....Y..Y
    9950: 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A  // ...d....2|......
    9960: E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03  // ...X.R.9.ZS.....
    9970: 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3  // ...B..........[.
    9980: E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB  // ...S......BB....
    9990: 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D  // ................
    99A0: 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2  // [.PQ.........u..
    99B0: F9 59 58 C3 2E 8E 1E 49 03 8B F8 24 0F 81 E7 F0  // .YX....I...$....
    99C0: 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 66 99 6E 99  // ............f.n.
    99D0: 83 99 21 9A 7D 9A 3C 03 74 08 3C 04 7F 03 E8 CF  // ..!.}.<.t.<.....
    99E0: 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50  // ...........<.w.P
    99F0: 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC  // SPR..c..........
    9A00: 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40  // ....@t.........@
    9A10: A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04  // ..........t.....
    9A20: A1 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01  // .....=..s....=..
    9A30: 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01  // s....=|.s..^.=J.
    9A40: 73 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04 FF  // s........ZX.....
    9A50: E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C  // .].[X..2...t...<
    9A60: 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81  // .t...<.t........
    9A70: E9 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04  // ......~.........
    9A80: 53 E8 5B F2 5B E8 8D 02 C3 0A C0 74 11 FE C8 74  // S.[.[......t...t
    9A90: 1A FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E  // ...t8..t<..t@...
    9AA0: 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74  // |...~..........t
    9AB0: 07 32 FF 2E 8A 97 61 9A 89 0E 85 04 88 16 84 04  // .2....a.........
    9AC0: 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 42 03  // ............*.B.
    9AD0: B9 0E 00 EB D6 BD B8 68 B9 08 00 EB CA BD CB 70  // .......h.......p
    9AE0: B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84  // .......u........
    9AF0: 04 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06 C4  // ....w5...w...u..
    9B00: 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B  // .|..&..... ...u.
    9B10: 8C CD 8E C5 2E 8B 2E AA 81 EB 10 0E 07 8A DF 32  // ...............2
    9B20: FF 80 EB 02 D1 E3 2E 8B AF D4 9A 8B C5 8B EC 89  // ................
    9B30: 4E 16 89 56 12 89 46 0A 8C 46 1E C3 CB 70 B8 68  // N..V..F..F...p.h
    9B40: B8 6C B8 70 CB 70 CB 80 53 06 8A 26 49 04 E8 A1  // .l.p.p..S..&I...
    9B50: C1 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD CB  // .&.G.&.g3...t"..
    9B60: 70 3C 10 7D 0E E8 AA 02 8C 06 0E 01 3C 0E 7D 07  // p<.}........<.}.
    9B70: BD B8 68 8C 0E 0E 01 89 2E 0C 01 E8 18 01 EB 2D  // ..h............-
    9B80: B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02  // ..<.}...<.t.....
    9B90: 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03  // <.t......&.G..t.
    9BA0: 80 E4 7F 86 C4 32 DB E8 06 00 E8 02 02 07 5B C3  // .....2........[.
    9BB0: 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF  // ................
    9BC0: B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50  // ...............P
    9BD0: 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75  // $...t"..3....<.u
    9BE0: 07 B7 10 BD CB 70 EB 10 FE C8 75 07 B7 0E E8 21  // .....p....u....!
    9BF0: 02 EB 05 B7 08 BD B8 68 E8 35 00 58 A8 80 74 08  // .......h.5.X..t.
    9C00: E8 0B 71 75 03 E8 76 01 BA C4 03 B8 02 03 EF B8  // ..qu..v.........
    9C10: 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2  // ...........u....
    9C20: CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3  // .P.X....2.......
    9C30: FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10  // ...u.....u.&.~..
    9C40: 75 03 80 CD 80 1E 06 1F 2E 8E 06 4B 03 8B FA C1  // u..........K....
    9C50: E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02  // ...@S.....[...t.
    9C60: 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB  // . .........(2...
    9C70: 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20  // 2.Q...t.F...... 
    9C80: 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46  // t.. .+...Y...t.F
    9C90: FE C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8  // ..u....&I.P.W.>.
    9CA0: 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07  // .&.}.....t0.....
    9CB0: 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD  // &..<.t$8.t.G....
    9CC0: 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04 26  // &.......&.E....&
    9CD0: C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26  // .}..>......_.X.&
    9CE0: F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C  // .G3.t......&._..
    9CF0: C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47  // ...t....&..<.t.G
    9D00: 38 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B  // 8.I.u.&..2......
    9D10: D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80  // .......c..&.....
    9D20: E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0  // .......t....B.$.
    9D30: 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A  // ...J...B.$......
    9D40: C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07  // ..........>...u.
    9D50: A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0  // ............t...
    9D60: 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84  // H......c...J..&.
    9D70: 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 1E 32  // ...........L...2
    9D80: FF 8A DC BE CB 80 80 FB 10 74 0A BE B8 70 80 FB  // .........t...p..
    9D90: 0E 74 02 1F C3 0E 1F 8B 3C 0B FF 74 10 81 E7 FF  // .t......<..t....
    9DA0: 00 46 C1 E7 05 03 FA 8B CB F3 A4 EB EA 1F C3 8A  // .F..............
    9DB0: 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5  // &I.P.W.>..&.}...
    9DC0: 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E  // ..tJ.....&..<.t>
    9DD0: 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01  // 8.t.G....&.=&.].
    9DE0: 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02  // &.M.&.U.&.E.<.t.
    9DF0: FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58  // ..P......&.....X
    9E00: A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 A2 FD 5F 07  // ...&.}...2...._.
    9E10: 58 C3 50 53 51 52 2E A1 53 03 0B C0 74 09 2E 8B  // X.PSQR..S...t...
    9E20: 2E AA 81 0E 07 EB 08 B8 30 11 B7 02 E8 4D BC 5A  // ........0....M.Z
    9E30: 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 49  // Y[X.<.|....S...I
    9E40: 03 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B  // ...2.......P..5[
    9E50: 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F  // ..V..QS&.F.E<...
    9E60: 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 E9  // u.2..@<.t2<.u...
    9E70: 68 EB 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7  // h.b<.u...tZ...'.
    9E80: C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8  // ...t.&.^.E......
    9E90: EA BB FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36  // ....:.J.r.2...:6
    9EA0: 84 04 73 06 FE C6 89 15 EB 2B 50 E8 74 EA 75 08  // ..s......+P.t.u.
    9EB0: B8 00 08 E8 C6 BB EB 09 80 3E 49 04 07 74 F1 32  // .........>I..t.2
    9EC0: E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E  // ..>b.S..U.%.][.>
    9ED0: 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02  // b.X..[Y..Z....u.
    9EE0: 89 15 8B 05 3A 3E 62 04 75 03 E8 FB EC C3 E9 64  // ....:>b.u......d
    9EF0: FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06  // .3..6....J......
    9F00: E8 79 BB C3 2E 8E 1E 49 03 0A C0 75 0D E8 18 00  // .y.....I...u....
    9F10: 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41  // ...^..F...<.u..A
    9F20: 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 9A 9F 2E 3A  // ....F..........:
    9F30: 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D  // .r.....2.......]
    9F40: 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04  // ...t...u........
    9F50: 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74  // $0<0t....u.....t
    9F60: E9 C3 BF 9A 9F 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D  // ........2.....;.
    9F70: 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8  // t....;.t......8.
    9F80: 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02  // ~...............
    9F90: 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00  // t..........t....
    9FA0: BA B4 03 E8 A6 EC 74 21 B7 01 E8 53 E9 80 FA D4  // ......t!...S....
    9FB0: 74 17 86 FB C3 BA D4 03 E8 91 EC 74 0C B7 02 E8  // t..........t....
    9FC0: 3E E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08  // >....t..........
    9FD0: 0F 08 03 01 03 01 01 01 00 08 01 01 01 01 01 01  // ................
    9FE0: 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01  // ................
    9FF0: FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00  // ................
    A000: 3F 00 10 01 08 00 00 00 00 01 00 02 02 01 00 04  // ?...............
    A010: 04 01 00 05 02 05 00 06 01 06 05 06 00 08 01 08  // ................
    A020: 00 07 02 07 06 07 55 02 34 00 90 00 D2 00 00 00  // ......U.4.......
    A030: 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF  // ...._W..PfR.....
    A040: 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA  // .........f....f.
    A050: FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03  // ...2.f..fZX.f.O.
    A060: 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF  // fRfVSWP..uD.....
    A070: 66 33 F6 66 BB D0 05 E8 00 01 00 00 C1 E8 10 F6  // f3.f............
    A080: C4 40 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66  // .@u+f....f..f..f
    A090: 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 E8 00 00 00  // @...f..f........
    A0A0: 66 BB 12 00 E8 DF 00 00 00 66 58 32 E4 66 50 58  // f........fX2.fPX
    A0B0: 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 52 51 53 57  // _[f^fZ..f.O.RQSW
    A0C0: 66 56 50 8A FB 80 E3 7F 0A DB 75 26 E8 67 FF FF  // fVP.......u&.g..
    A0D0: FF C1 E2 10 66 8B D1 C1 E2 02 66 BE 00 00 E8 C7  // ....f.....f.....
    A0E0: 00 00 00 66 BE 00 02 E8 BE 00 00 00 66 58 32 E4  // ...f........fX2.
    A0F0: 66 50 58 66 5E 5F 5B 59 5A C3 66 B8 4F 03 66 51  // fPXf^_[YZ.f.O.fQ
    A100: 57 56 53 52 50 8A FB 80 E3 7F 0A DB 75 39 8A DA  // WVSRP.......u9..
    A110: 57 5A E8 21 FF FF FF 66 33 F6 66 53 66 BB D0 05  // WZ.!...f3.fSf...
    A120: E8 57 00 00 00 80 E4 01 66 5B 80 E7 FE 0A FC 66  // .W......f[.....f
    A130: BE 00 00 E8 DE 00 00 00 66 BE 00 02 E8 D5 00 00  // ........f.......
    A140: 00 66 58 32 E4 66 50 58 5A 5B 5E 5F 66 59 C3 90  // .fX2.fPXZ[^_fY..
    A150: 53 50 51 F6 C7 80 74 20 66 BB 9C 1B E8 1B 00 00  // SPQ...t f.......
    A160: 00 A8 01 74 13 66 B9 FF FF 66 BB A3 1B E8 0A 00  // ...t.f...f......
    A170: 00 00 A8 01 75 02 E2 F1 59 58 5B C3 66 52 E8 11  // ....u...YX[.fR..
    A180: 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF  // ....fZ..fR......
    A190: 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6  // fZ..f..P3.f..f..
    A1A0: C1 E0 02 EF 66 83 C2 04 58 C3 52 E8 A0 FF FF FF  // ....f...X.R.....
    A1B0: 81 E2 FF FF FF 02 66 BB 04 1A E8 BD FF FF FF 25  // ......f........%
    A1C0: 00 00 00 FD 03 C2 66 25 00 F0 E8 B9 FF FF FF 66  // ......f%.......f
    A1D0: BB 05 1A E8 B0 FF FF FF 66 81 E2 FF 0F 66 BB 01  // ........f....f..
    A1E0: 1A E8 96 FF FF FF 24 03 8A C8 66 D3 EA 66 BB 06  // ......$...f..f..
    A1F0: 1A E8 86 FF FF FF 66 03 C2 66 BB 0D 1A E8 86 FF  // ......f..f......
    A200: FF FF 66 8B C2 24 FC C1 E0 10 66 BB 5C 1B E8 75  // ..f..$....f.\..u
    A210: FF FF FF 5A C3 90 52 66 53 66 51 E8 30 FF FF FF  // ...Z..RfSfQ.0...
    A220: 33 C0 8A C3 66 53 66 BB 79 1A E8 59 FF FF FF 66  // 3...fSf.y..Y...f
    A230: 5B 66 49 66 81 E1 FF 00 66 41 32 C0 66 53 66 BB  // [fIf....fA2.fSf.
    A240: 78 1A E8 41 FF FF FF 66 5B 26 8A 42 02 C1 E0 0A  // x..A...f[&.B....
    A250: 26 8A 42 01 C1 E0 0A 26 8A 02 C1 E0 02 F6 C7 01  // &.B....&........
    A260: 75 03 C1 E0 02 66 53 66 BB 7C 1A E8 18 FF FF FF  // u....fSf.|......
    A270: 66 5B 83 C2 04 E2 D2 66 59 66 5B 5A C3 00 9E 43  // f[.....fYf[Z...C
    A280: 91 43 91 43 91 43 7C 43 7C 43 7C 43 7C 43 BE 3F  // .C.C.C|C|C|C|C.?
    A290: 35 40 5F 40 A0 41 9F 41 9F 41 E5 41 4A 42 7A 42  // 5@_@.A.A.A.AJBzB
    A2A0: 37 43 60 43 60 43 D7 41 CA 41 CA 41 CA 41 CA 41  // 7C`C`C.A.A.A.A.A
    A2B0: CA 41 E5 41 4A 42 7A 42 37 43 65 43 AB 43 60 43  // .A.AJBzB7CeC.C`C
    A2C0: 60 43 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // `C..............
    A2D0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A2E0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 C2 3D  // ...............=
    A2F0: 01 C2 3D 02 3B 52 03 1B 52 03 E7 3E 03 9B 3E 03  // ..=.;R..R..>..>.
    A300: C3 3D 04 DC 3D 04 EC 3D 04 C2 3D 03 00 00 00 00  // .=..=..=..=.....
    A310: 6F 45 00 02 6F 45 01 02 6F 45 02 02 6F 45 03 02  // oE..oE..oE..oE..
    A320: 6F 45 04 02 6F 45 05 02 69 47 00 02 69 47 01 02  // oE..oE..iG..iG..
    A330: 69 47 02 02 69 47 03 02 69 47 04 02 69 47 05 02  // iG..iG..iG..iG..
    A340: 9E 47 00 02 9E 47 01 02 9E 47 02 02 9E 47 03 02  // .G...G...G...G..
    A350: 9E 47 04 02 9E 47 05 02 B5 49 00 02 B5 49 01 02  // .G...G...I...I..
    A360: B5 49 02 02 B5 49 03 02 B5 49 04 02 B5 49 05 02  // .I...I...I...I..
    A370: B5 49 00 02 B5 49 01 02 B5 49 02 02 B5 49 03 02  // .I...I...I...I..
    A380: B5 49 04 02 B5 49 05 02 A0 48 00 02 A0 48 01 02  // .I...I...H...H..
    A390: A0 48 02 02 A0 48 03 02 A0 48 04 02 A0 48 05 02  // .H...H...H...H..
    A3A0: CA 48 00 02 CA 48 01 02 CA 48 02 02 CA 48 03 02  // .H...H...H...H..
    A3B0: CA 48 04 02 CA 48 05 02 4D 48 00 02 4D 48 01 02  // .H...H..MH..MH..
    A3C0: 4D 48 02 02 4D 48 03 02 4D 48 04 02 4D 48 05 02  // MH..MH..MH..MH..
    A3D0: 81 48 00 02 81 48 01 02 81 48 02 02 81 48 03 02  // .H...H...H...H..
    A3E0: 81 48 04 02 81 48 05 02 0D 4C 00 00 40 4C 01 00  // .H...H...L..@L..
    A3F0: 40 4C 02 00 2D 4C 00 00 1B 4B 00 02 14 49 00 02  // @L..-L...K...I..
    A400: 14 49 01 02 14 49 02 02 14 49 03 02 14 49 04 02  // .I...I...I...I..
    A410: 14 49 05 02 33 4B 00 02 88 4D 05 00 88 4D 01 00  // .I..3K...M...M..
    A420: 88 4D 00 00 88 4D 02 00 C9 4D 00 00 C9 4D 02 00  // .M...M...M...M..
    A430: 0E 4E 00 00 9E 4A 00 02 9E 4A 01 02 9E 4A 02 02  // .N...J...J...J..
    A440: 9E 4A 03 02 9E 4A 04 02 9E 4A 05 02 5A 4C 00 00  // .J...J...J..ZL..
    A450: 82 4C 00 00 03 4D 00 00 7E 4D 00 00 62 49 00 02  // .L...M..~M..bI..
    A460: 62 49 01 02 62 49 02 02 62 49 03 02 62 49 04 02  // bI..bI..bI..bI..
    A470: 62 49 05 02 7D 4D 00 01 7D 4D 00 01 A5 46 00 02  // bI..}M..}M...F..
    A480: A5 46 01 02 A5 46 02 02 A5 46 03 02 A5 46 04 02  // .F...F...F...F..
    A490: A5 46 05 02 A2 4C 00 00 7E 4D 00 00 7E 4D 00 00  // .F...L..~M..~M..
    A4A0: 7E 4D 00 00 B3 4B 00 00 C9 47 00 02 C9 47 01 02  // ~M...K...G...G..
    A4B0: C9 47 02 02 C9 47 03 02 C9 47 04 02 C9 47 05 02  // .G...G...G...G..
    A4C0: F8 47 00 02 F8 47 01 02 F8 47 02 02 F8 47 03 02  // .G...G...G...G..
    A4D0: F8 47 04 02 F8 47 05 02 2E 48 00 02 2E 48 01 02  // .G...G...H...H..
    A4E0: 2E 48 02 02 2E 48 03 02 2E 48 04 02 2E 48 05 02  // .H...H...H...H..
    A4F0: C5 4C 00 00 E8 4C 00 00 A6 00 01 01 3E BE 50 BE  // .L...L......>.P.
    A500: A8 BE 00 00 A4 E9 DE BE 00 00 00 00 00 00 10 BF  // ................
    A510: 10 C0 00 00 52 C0 A6 C5 00 00 00 00 00 00 2E E9  // ....R...........
    A520: 00 00 0C C8 54 C8 00 00 00 00 00 00 00 00 00 00  // ....T...........
    A530: 00 00 00 00 F6 F3 00 00 00 00 00 00 00 00 E2 C8  // ................
    A540: 5A C9 CE C9 0C CA 2C CB 00 00 00 00 58 CB 00 00  // Z.....,.....X...
    A550: 72 CB 50 CC 00 CE 4A CE 00 00 00 00 E0 CE 6E CF  // r.P...J.......n.
    A560: C2 D0 2E F4 00 00 08 F6 9C E4 00 00 BE E6 00 00  // ................
    A570: 00 00 00 00 28 E7 00 00 00 00 00 00 00 00 FC E7  // ....(...........
    A580: 00 00 70 E9 00 00 00 F6 00 00 F4 C7 00 00 70 E8  // ..p...........p.
    A590: 00 00 E2 F6 1A EB 00 00 4E F1 9A F3 00 00 4A 00  // ........N.....J.
    A5A0: 01 01 00 00 00 00 00 00 80 A5 64 A6 D0 A6 D4 A9  // ..........d.....
    A5B0: BA B1 00 00 00 00 A6 AA FC AA 08 AD 24 AD 00 00  // ............$...
    A5C0: 98 AD 00 00 A2 B1 00 00 00 00 00 00 00 00 98 AF  // ................
    A5D0: FA B0 00 00 00 00 28 B1 68 B1 00 00 00 00 08 AB  // ......(.h.......
    A5E0: 00 00 00 00 00 00 00 00 E4 00 01 02 4E 0C 80 02  // ............N...
    A5F0: C0 00 90 01 2D 00 20 00 40 00 01 00 03 00 00 00  // ....-. .@.......
    A600: 00 00 00 00 02 00 E6 55 D6 09 80 02 A0 00 E0 01  // .......U........
    A610: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    A620: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    A630: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    A640: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    A650: 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05  // ..........U<0*..
    A660: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    A670: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    A680: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    A690: 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    A6A0: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    A6B0: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    A6C0: 03 00 00 00 00 00 00 00 00 00 EC 3C 6C 00 02 02  // ...........<l...
    A6D0: 47 00 30 0F 20 4E 00 00 74 6C 01 00 00 00 00 00  // G.0. N..tl......
    A6E0: 40 7E 05 00 00 00 00 00 00 00 00 00 C0 D4 01 00  // @~..............
    A6F0: 00 00 00 00 E2 4A 01 00 00 00 00 00 58 02 B0 04  // .....J......X...
    A700: 00 00 00 00 60 EA 00 00 01 00 00 00 00 00 00 00  // ....`...........
    A710: 00 00 00 00 40 9C A3 02 88 13 00 00 3F 40 C0 12  // ....@.......?@..
    A720: 10 27 10 27 00 00 00 00 00 00 00 00 00 00 00 00  // .'.'............
    A730: 00 00 00 00 00 00 00 00 04 03 02 01 00 00 00 00  // ................
    A740: 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15  // .*.*..***..*.**.
    A750: 00 2A 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F  // .***.....?.?..??
    A760: 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F 00 00 00 05  // ?..?.???.???....
    A770: 05 05 08 08 08 0B 0B 0B 0E 0E 0E 11 11 11 14 14  // ................
    A780: 14 18 18 18 1C 1C 1C 20 20 20 24 24 24 28 28 28  // .......   $$$(((
    A790: 2D 2D 2D 32 32 32 38 38 38 3F 3F 3F 00 00 3F 10  // ---222888???..?.
    A7A0: 00 3F 1F 00 3F 2F 00 3F 3F 00 3F 3F 00 2F 3F 00  // .?..?/.??.??./?.
    A7B0: 1F 3F 00 10 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00  // .?..?..?..?..?/.
    A7C0: 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F 00 00  // ??./?..?..?..?..
    A7D0: 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F  // ?..?..?/.??./?..
    A7E0: 3F 00 10 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F 3F  // ?..?..?'.?/.?7.?
    A7F0: 3F 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F  // ?.??.7?./?.'?..?
    A800: 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F 3F  // '.?/.?7.??.7?./?
    A810: 1F 27 3F 1F 1F 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37  // .'?..?..?'.?/.?7
    A820: 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 2D 2D 3F 31  // .??.7?./?.'?--?1
    A830: 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3F 3F 2D 3A 3F 2D  // -?6-?:-??-??-:?-
    A840: 36 3F 2D 31 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D  // 6?-1?--?1-?6-?:-
    A850: 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F 2D 2D  // ??-:?-6?-1?--?--
    A860: 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36  // ?1-?6-?:-??-:?-6
    A870: 3F 2D 31 3F 00 00 1C 07 00 1C 0E 00 1C 15 00 1C  // ?-1?............
    A880: 1C 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C  // ................
    A890: 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E 1C  // ................
    A8A0: 00 07 1C 00 00 1C 00 00 1C 07 00 1C 0E 00 1C 15  // ................
    A8B0: 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C 0E 0E 1C 11  // ................
    A8C0: 0E 1C 15 0E 1C 18 0E 1C 1C 0E 1C 1C 0E 18 1C 0E  // ................
    A8D0: 15 1C 0E 11 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E  // ................
    A8E0: 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C 0E 0E  // ................
    A8F0: 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15  // ................
    A900: 1C 0E 11 1C 14 14 1C 16 14 1C 18 14 1C 1A 14 1C  // ................
    A910: 1C 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C  // ................
    A920: 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18 1C  // ................
    A930: 14 16 1C 14 14 1C 14 14 1C 16 14 1C 18 14 1C 1A  // ................
    A940: 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C 00 00 10 04  // ................
    A950: 00 10 08 00 10 0C 00 10 10 00 10 10 00 0C 10 00  // ................
    A960: 08 10 00 04 10 00 00 10 04 00 10 08 00 10 0C 00  // ................
    A970: 10 10 00 0C 10 00 08 10 00 04 10 00 00 10 00 00  // ................
    A980: 10 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08  // ................
    A990: 10 00 04 10 08 08 10 0A 08 10 0C 08 10 0E 08 10  // ................
    A9A0: 10 08 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10  // ................
    A9B0: 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C 10  // ................
    A9C0: 08 0A 10 08 08 10 08 08 10 0A 08 10 0C 08 10 0E  // ................
    A9D0: 08 10 10 08 0E 10 08 0C 10 08 0A 10 0B 0B 10 0C  // ................
    A9E0: 0B 10 0D 0B 10 0F 0B 10 10 0B 10 10 0B 0F 10 0B  // ................
    A9F0: 0D 10 0B 0C 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B  // ................
    AA00: 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10 0B 0B  // ................
    AA10: 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D  // ................
    AA20: 10 0B 0C 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA30: 00 00 00 00 00 00 00 00 00 00 00 00 D1 00 01 03  // ................
    AA40: C8 1B 56 05 65 00 00 03 28 00 30 00 20 00 04 00  // ..V.e...(.0. ...
    AA50: 04 00 58 01 C2 00 00 00 04 02 00 3B 00 00 20 00  // ..X........;.. .
    AA60: 00 00 00 00 1C 3C 01 00 00 00 00 00 01 CB C8 00  // .....<..........
    AA70: 07 5A 5A 07 7D 00 00 00 0B 0A 01 41 34 21 00 00  // .ZZ.}......A4!..
    AA80: 00 00 00 00 00 00 00 00 04 80 00 00 00 00 00 00  // ................
    AA90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AB00: 00 00 00 00 00 00 00 00 00 00 FF 00 00 00 55 00  // ..............U.
    AB10: 01 01 68 48 6A 48 6B 48 69 48 68 48 6A 48 6B 48  // ..hHjHkHiHhHjHkH
    AB20: 69 48 90 00 00 00 00 08 08 08 08 00 00 6C 48 6E  // iH...........lHn
    AB30: 48 6F 48 6D 48 6C 48 6E 48 6F 48 6D 48 91 00 00  // HoHmHlHnHoHmH...
    AB40: 00 00 08 08 08 08 00 00 70 48 72 48 73 48 71 48  // ........pHrHsHqH
    AB50: 70 48 72 48 73 48 71 48 92 00 00 00 00 08 08 08  // pHrHsHqH........
    AB60: 08 00 00 00 0C 00 01 05 E0 FF 0F 00 20 00 20 00  // ............ . .
    AB70: 00 02 01 09 20 4E 00 00 40 7E 05 00 74 6C 01 00  // .... N..@~..tl..
    AB80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AB90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ABA0: 00 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00  // ................
    ABB0: C8 00 64 01 00 00 00 00 0B 00 00 00 00 00 00 00  // ..d.............
    ABC0: 00 00 00 00 00 00 74 01 00 00 04 01 00 00 00 00  // ......t.........
    ABD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ABE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ABF0: 00 00 00 00 70 17 DC 05 00 00 00 00 00 00 00 00  // ....p...........
    AC00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC10: 00 00 00 00 45 03 30 75 00 00 5E 03 40 9C 00 00  // ....E.0u..^.@...
    AC20: 77 03 F8 C1 00 00 90 03 91 F4 00 00 A9 03 DC 0B  // w...............
    AC30: 01 00 DB 03 0E 28 01 00 F4 03 80 38 01 00 33 04  // .....(.....8..3.
    AC40: E2 4A 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // .J..............
    AC50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC70: 00 00 00 00 00 00 00 00 4C 13 00 00 D0 07 00 00  // ........L.......
    AC80: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    AC90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ACA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ACB0: 00 00 00 00 74 6C 01 00 8C 04 01 00 00 00 00 00  // ....tl..........
    ACC0: 00 00 00 00 00 00 00 00 B0 AD 01 00 A0 86 01 00  // ................
    ACD0: A0 86 01 00 70 11 01 00 62 00 66 00 66 00 72 00  // ....p...b.f.f.r.
    ACE0: 07 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    ACF0: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    AD00: 00 00 E4 00 00 00 00 00 08 00 10 02 0C 31 01 01  // .............1..
    AD10: 00 00 E4 00 00 00 00 00 80 00 20 02 13 31 02 02  // .......... ..1..
    AD20: 00 00 E4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD60: 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00  // ................
    AD70: 1C 00 01 01 8D 48 00 01 8D 48 08 02 8D 48 10 03  // .....H...H...H..
    AD80: 8D 48 18 04 8D 48 1A 05 8D 48 1C 06 74 00 01 01  // .H...H...H..t...
    AD90: 10 01 06 12 11 01 16 12 13 01 06 6A 14 01 16 6A  // ...........j...j
    ADA0: 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01 16 EA  // ...U...U........
    ADB0: 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01 0A 6A  // e...f...!..."..j
    ADC0: 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01 0A EB  // #..U$...E...F...
    ADD0: 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01 0A 70  // u...v......p...p
    ADE0: D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01 0A 72  // ...q...q...r...r
    ADF0: E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01 0A 74  // ...s...s...t...t
    AE00: EF 01 06 01 00 00 00 00 00 58 00 60 00 82 00 00  // .........X.`....
    AE10: 00 00 00 58 00 02 00 00 00 13 00 00 80 00 00 00  // ...X............
    AE20: 00 00 00 00 00 00 00 00 17 00 00 00 B4 00 00 00  // ................
    AE30: 00 00 00 00 00 00 73 01 00 00 00 00 00 00 00 00  // ......s.........
    AE40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE50: 00 00 00 00 00 00 00 00 02 02 00 00 07 01 01 00  // ................
    AE60: 08 04 00 00 00 00 01 00 00 00 02 00 00 00 03 00  // ................
    AE70: 00 00 04 00 00 00 05 00 00 00 06 00 00 00 07 00  // ................
    AE80: 00 00 02 18 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE90: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00  // ................
    AEA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AEB0: 00 00 00 00 18 00 00 00 00 00 00 00 00 00 CC 00  // ................
    AEC0: 28 01 00 00 00 00 9C 01 00 00 C6 01 00 08 30 75  // (.............0u
    AED0: 00 30 75 00 40 9C 00 40 9C 00 59 D8 00 59 D8 00  // .0u.@..@..Y..Y..
    AEE0: 91 F4 00 91 F4 00 0E 28 01 0E 28 01 90 5F 01 90  // .......(..(.._..
    AEF0: 5F 01 00 77 01 00 77 01 CA 91 01 CA 91 01 08 72  // _..w..w........r
    AF00: 00 00 6E 00 01 6A 00 02 66 00 03 62 00 04 5A 00  // ..n..j..f..b..Z.
    AF10: 05 56 00 06 4C 00 07 08 07 01 06 01 01 01 02 01  // .V..L...........
    AF20: 01 01 02 01 03 01 04 01 00 08 40 9C 00 30 75 00  // ..........@..0u.
    AF30: 74 B5 00 A0 8C 00 60 EA 00 74 B5 00 0E 28 01 60  // t.....`..t...(.`
    AF40: EA 00 90 5F 01 40 19 01 B2 B0 01 90 5F 01 C0 D4  // ..._.@......_...
    AF50: 01 00 77 01 5E FF 01 CA 91 01 08 72 00 00 6E 00  // ..w.^......r..n.
    AF60: 01 6A 00 02 66 00 03 62 00 04 5A 00 05 56 00 06  // .j..f..b..Z..V..
    AF70: 4C 00 07 08 30 75 00 72 00 80 BB 00 6E 00 56 D0  // L...0u.r....n.V.
    AF80: 00 6A 00 00 E1 00 66 00 91 F4 00 62 00 DC 0B 01  // .j....f....b....
    AF90: 5A 00 40 19 01 56 00 0E 28 01 4C 00 00 08 72 00  // Z.@..V..(.L...r.
    AFA0: 30 75 00 6E 00 40 9C 00 6A 00 59 D8 00 66 00 DC  // 0u.n.@..j.Y..f..
    AFB0: 0B 01 62 00 80 38 01 5A 00 80 38 01 56 00 80 38  // ..b..8.Z..8.V..8
    AFC0: 01 4C 00 80 38 01 08 30 75 00 72 00 80 BB 00 6E  // .L..8..0u.r....n
    AFD0: 00 56 D0 00 6A 00 00 E1 00 66 00 91 F4 00 62 00  // .V..j....f....b.
    AFE0: DC 0B 01 5C 00 40 19 01 58 00 0E 28 01 52 00 00  // ...\.@..X..(.R..
    AFF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B000: 62 01 01 03 8A 00 3A 00 00 00 BF 00 00 00 12 00  // b.....:.........
    B010: 2C 01 03 01 00 00 02 00 0C 00 14 31 00 11 1E 21  // ,..........1...!
    B020: 00 00 08 00 0C 00 0C 31 00 11 1E 22 00 00 80 00  // .......1..."....
    B030: 0C 00 13 31 00 11 20 21 00 00 03 00 00 00 14 31  // ...1.. !.......1
    B040: 56 00 5C 00 00 00 0C 31 79 00 7F 00 00 00 13 31  // V.\....1y......1
    B050: 9C 00 A2 00 00 00 01 1E 21 00 00 00 04 14 01 00  // ........!.......
    B060: 10 01 00 00 02 00 00 00 00 00 00 00 00 00 00 00  // ................
    B070: 01 04 90 00 02 04 01 00 FF 01 1E 22 00 00 00 04  // ..........."....
    B080: 14 01 00 10 02 00 00 08 00 00 00 00 00 00 00 00  // ................
    B090: 00 00 00 01 04 91 00 02 04 02 00 FF 01 20 21 00  // ............. !.
    B0A0: 00 00 04 14 01 00 20 02 00 00 80 00 00 00 00 00  // ...... .........
    B0B0: 00 00 00 00 00 00 01 04 92 00 02 04 03 00 FF 05  // ................
    B0C0: 00 00 00 1E 21 EB 00 F1 00 00 00 22 21 F6 00 FC  // ....!......"!...
    B0D0: 00 00 00 1E 22 05 01 0B 01 00 00 23 22 10 01 18  // ...."......#"...
    B0E0: 01 00 00 20 21 21 01 27 01 00 00 01 00 11 01 14  // ... !!.'........
    B0F0: 31 14 04 03 00 FF 01 1E 21 01 15 31 01 04 00 00  // 1.......!..1....
    B100: 02 04 00 00 FF 01 00 11 01 0C 31 14 04 03 00 FF  // ..........1.....
    B110: 01 1E 22 02 15 32 15 33 01 04 00 00 02 04 00 00  // .."..2.3........
    B120: FF 01 00 11 01 13 31 14 04 03 00 FF 02 00 00 00  // ......1.........
    B130: 03 71 00 00 40 01 00 00 04 71 55 01 5B 01 00 00  // .q..@....qU.[...
    B140: 10 0A 01 02 03 00 00 00 00 00 11 0A 90 91 92 00  // ................
    B150: 00 00 00 00 FF 00 00 00 00 00 00 09 06 00 01 00  // ................
    B160: 00 FF 2D 00 01 01 01 03 02 38 00 06 10 00 00 03  // ..-......8......
    B170: 38 00 02 39 00 09 10 00 01 83 02 38 00 06 10 00  // 8..9.......8....
    B180: 00 03 38 00 08 20 00 00 03 39 00 09 26 00 00 00  // ..8.. ...9..&...
    B190: 40 00 03 01 FF FF FF 00 00 00 E4 0C 04 01 00 00  // @...............
    B1A0: FF FF FF 00 00 00 E4 0C 05 01 00 00 FF FF FF 00  // ................
    B1B0: 00 00 A0 0F 06 00 00 00 FF FF FF 00 77 01 E4 0C  // ............w...
    B1C0: 07 12 00 00 FF FF FF 00 77 01 00 00 0B 12 00 00  // ........w.......
    B1D0: 39 00 02 03 14 00 00 00 49 35 00 00 6E 03 02 03  // 9.......I5..n...
    B1E0: 00 00 00 00 1E 21 34 00 4C 00 03 FF FF 00 1E 22  // .....!4.L......"
    B1F0: 34 00 4C 00 09 FF FF 00 20 21 34 00 4C 00 0A FF  // 4.L..... !4.L...
    B200: FF 00 FF FF 02 04 00 04 FF 00 18 00 02 01 02 00  // ................
    B210: 08 00 80 00 00 02 00 04 00 08 40 00 01 00 10 00  // ..........@.....
    B220: FF FF 83 0C 03 03 DA 02 22 00 52 00 AF 0B BB 0B  // ........".R.....
    B230: 00 00 00 00 41 04 84 05 D0 06 13 08 56 09 7E 0A  // ....A.......V.~.
    B240: 00 00 00 00 C0 48 00 1F C1 48 00 1F C2 48 00 1F  // .....H...H...H..
    B250: C3 48 00 1F CB 48 00 10 CD 48 00 10 C4 48 08 17  // .H...H...H...H..
    B260: CE 48 00 1F CF 48 00 1F D0 48 00 1F D1 48 00 1F  // .H...H...H...H..
    B270: D4 48 00 1F 2E 00 A4 38 02 07 77 77 F0 0F 00 00  // .H.....8..ww....
    B280: 00 00 00 00 00 00 00 00 00 00 00 00 0E 80 08 08  // ................
    B290: 01 00 20 84 C4 06 01 00 81 0A 01 00 01 00 0E 00  // .. .............
    B2A0: 02 00 00 00 FF FF 02 07 77 77 F0 0F 00 00 00 00  // ........ww......
    B2B0: 00 00 00 04 00 00 00 00 00 00 0E 80 08 08 01 00  // ................
    B2C0: 20 84 C4 06 01 00 9F 0A 01 00 01 00 0E 00 02 00  //  ...............
    B2D0: 00 00 74 40 03 02 77 77 F0 0F 00 00 00 00 00 00  // ..t@..ww........
    B2E0: 00 00 00 00 00 00 00 00 0E 80 08 08 01 00 20 84  // .............. .
    B2F0: C4 06 01 00 81 0A 01 00 01 00 0E 00 02 00 00 00  // ................
    B300: E4 57 03 02 77 77 F0 0F 00 00 00 00 00 00 00 0C  // .W..ww..........
    B310: 00 00 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06  // ............ ...
    B320: 01 00 9F 0A 01 00 01 00 0E 00 02 00 00 00 30 75  // ..............0u
    B330: 03 02 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00  // ................
    B340: 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00  // .......... .....
    B350: 9F 0A 01 00 01 80 08 00 02 00 00 00 FF FF 03 02  // ................
    B360: 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00 00 00  // ................
    B370: 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00 9F 0A  // ........ .......
    B380: 01 00 01 00 0E 00 02 00 00 00 74 40 03 04 77 77  // ..........t@..ww
    B390: F0 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B3A0: 0E 80 08 08 01 00 20 84 C4 06 01 00 81 0A 01 00  // ...... .........
    B3B0: 01 00 0E 00 02 00 00 00 E4 57 03 04 77 77 F0 0F  // .........W..ww..
    B3C0: 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 0E 80  // ................
    B3D0: 08 08 01 00 20 84 C4 06 01 00 9F 0A 01 00 01 00  // .... ...........
    B3E0: 0E 00 02 00 00 00 30 75 03 04 11 11 A0 0A 00 00  // ......0u........
    B3F0: 00 00 00 00 00 1C 00 00 00 00 00 00 0E 80 08 08  // ................
    B400: 01 00 20 84 C4 06 01 00 9F 0A 01 00 01 80 08 00  // .. .............
    B410: 02 00 00 00 FF FF 03 04 11 11 A0 0A 00 00 00 00  // ................
    B420: 00 00 00 1C 00 00 00 00 00 00 0E 80 08 08 01 00  // ................
    B430: 20 84 C4 06 01 00 9F 0A 01 00 01 00 0E 00 02 00  //  ...............
    B440: 00 00 74 40 03 07 77 77 F0 0F 00 00 00 00 00 00  // ..t@..ww........
    B450: 00 00 00 00 00 00 00 00 0E 80 08 08 01 00 20 84  // .............. .
    B460: C4 06 01 00 81 0A 01 00 01 00 0E 00 02 00 00 00  // ................
    B470: E4 57 03 07 77 77 F0 0F 00 00 00 00 00 00 00 0C  // .W..ww..........
    B480: 00 00 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06  // ............ ...
    B490: 01 00 9F 0A 01 00 01 00 0E 00 02 00 00 00 30 75  // ..............0u
    B4A0: 03 07 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00  // ................
    B4B0: 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00  // .......... .....
    B4C0: 9F 0A 01 00 01 00 0E 00 02 00 00 00 FF FF 03 07  // ................
    B4D0: 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00 00 00  // ................
    B4E0: 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00 9F 0A  // ........ .......
    B4F0: 01 00 01 00 0E 00 02 00 00 00 00 00 00 07 65 01  // ..............e.
    B500: C0 48 69 00 01 04 10 40 00 00 00 00 00 02 08 20  // .Hi....@....... 
    B510: 80 00 00 00 50 05 04 10 40 00 01 00 00 A0 0A 08  // ....P...@.......
    B520: 20 80 00 02 00 00 F0 0F 10 40 00 01 04 11 11 00  //  ........@......
    B530: 00 20 80 00 02 08 11 11 50 05 40 00 01 04 10 11  // . ......P.@.....
    B540: 11 A0 0A 80 00 02 08 20 22 22 00 00 00 01 00 00  // ....... ""......
    B550: 00 22 22 50 15 00 00 04 10 40 22 22 50 05 00 02  // .""P.....@""P...
    B560: 08 20 80 33 33 00 00 00 00 C1 48 0F 00 FF FF FF  // . .33.....H.....
    B570: FF FF 00 00 00 00 00 00 C2 48 33 00 B9 F6 FA C9  // .........H3.....
    B580: FF 00 00 00 00 06 08 00 00 00 00 00 00 14 40 01  // ..............@.
    B590: 05 22 00 00 00 00 04 00 00 00 04 00 00 00 00 18  // ."..............
    B5A0: 00 00 00 10 00 00 00 00 08 00 00 C3 48 0F 00 FF  // ............H...
    B5B0: FF FF FF FF 80 00 00 00 00 00 CB 48 0F 00 FF FF  // ...........H....
    B5C0: FF FF FF 00 00 00 00 00 00 CD 48 0F 00 FF FF FF  // ..........H.....
    B5D0: FF FF 04 80 00 00 00 00 C4 48 0F 00 FF FF FF FF  // .........H......
    B5E0: FF 00 08 08 00 00 00 CE 48 0F 00 FF FF FF FF FF  // ........H.......
    B5F0: 01 00 20 80 00 00 CF 48 0F 00 FF FF FF FF FF C4  // .. ....H........
    B600: 06 01 00 00 00 D0 48 18 00 FF FF 0F C0 FF 81 0A  // ......H.........
    B610: 01 00 00 00 F0 3F 00 9F 0A 01 00 00 00 D1 48 33  // .....?........H3
    B620: 00 01 00 00 00 00 01 00 02 00 00 04 00 00 00 01  // ................
    B630: 00 0A 00 02 00 10 01 00 01 00 0C 00 FC FB AF FE  // ................
    B640: FF 01 00 0E 00 00 00 40 00 00 01 00 00 00 00 00  // .......@........
    B650: D4 48 0F 00 FF FF FF FF FF 02 00 00 00 00 00 00  // .H..............
    B660: 00 00 00 00 07 41 01 C0 48 69 00 01 04 10 40 00  // .....A..Hi....@.
    B670: 00 00 00 00 02 08 20 80 00 00 00 50 05 04 10 40  // ...... ....P...@
    B680: 00 01 00 00 A0 0A 08 20 80 00 02 00 00 F0 0F 10  // ....... ........
    B690: 40 00 01 04 11 11 00 00 20 80 00 02 08 11 11 50  // @....... ......P
    B6A0: 05 40 00 01 04 10 11 11 A0 0A 80 00 02 08 20 22  // .@............ "
    B6B0: 22 00 00 00 01 00 00 00 22 22 50 15 00 00 04 10  // ".......""P.....
    B6C0: 40 22 22 50 05 00 02 08 20 80 33 33 00 00 00 00  // @""P.... .33....
    B6D0: C1 48 0F 00 FF FF FF FF FF 00 00 00 00 00 00 C2  // .H..............
    B6E0: 48 2A 00 B9 F6 FA C9 FF 00 00 00 00 06 08 00 00  // H*..............
    B6F0: 00 00 00 00 14 40 01 05 22 00 00 00 00 04 00 00  // .....@..".......
    B700: 00 14 00 00 00 00 08 00 00 C3 48 0F 00 FF FF FF  // ..........H.....
    B710: FF FF 80 00 00 00 00 00 CB 48 0F 00 FF FF FF FF  // .........H......
    B720: FF 00 00 00 00 00 00 CD 48 0F 00 FF FF FF FF FF  // ........H.......
    B730: 04 80 00 00 00 00 C4 48 0F 00 FF FF FF FF FF 00  // .......H........
    B740: 08 08 00 00 00 CE 48 0F 00 FF FF FF FF FF 01 00  // ......H.........
    B750: 20 80 00 00 CF 48 0F 00 FF FF FF FF FF C4 06 01  //  ....H..........
    B760: 00 00 00 D0 48 0F 00 FF FF FF FF FF 81 0A 01 00  // ....H...........
    B770: 00 00 D1 48 21 00 01 04 00 00 00 01 00 0A 00 02  // ...H!...........
    B780: 00 10 01 00 01 00 0C 00 FC FB EF FE FF 01 00 0E  // ................
    B790: 00 00 00 D4 48 0F 00 FF FF FF FF FF 02 00 00 00  // ....H...........
    B7A0: 00 00 00 00 00 00 00 07 4A 01 C0 48 69 00 01 04  // ........J..Hi...
    B7B0: 10 40 00 00 00 00 00 02 08 20 80 00 00 00 50 05  // .@....... ....P.
    B7C0: 04 10 40 00 01 00 00 A0 0A 08 20 80 00 02 00 00  // ..@....... .....
    B7D0: F0 0F 10 40 00 01 04 11 11 00 00 20 80 00 02 08  // ...@....... ....
    B7E0: 11 11 50 05 40 00 01 04 10 11 11 A0 0A 80 00 02  // ..P.@...........
    B7F0: 08 20 22 22 00 00 00 01 00 00 00 22 22 50 15 00  // . "".......""P..
    B800: 00 04 10 40 22 22 50 05 00 02 08 20 80 33 33 00  // ...@""P.... .33.
    B810: 00 00 00 C1 48 0F 00 FF FF FF FF FF 00 00 00 00  // ....H...........
    B820: 00 00 C2 48 2A 00 B9 F6 FA C9 FF 00 00 00 00 06  // ...H*...........
    B830: 08 00 00 00 00 00 00 14 40 01 05 22 00 00 00 00  // ........@.."....
    B840: 04 00 00 00 14 00 00 00 00 08 00 00 C3 48 0F 00  // .............H..
    B850: FF FF FF FF FF 80 00 00 00 00 00 CB 48 0F 00 FF  // ............H...
    B860: FF FF FF FF 00 00 00 00 00 00 CD 48 0F 00 FF FF  // ...........H....
    B870: FF FF FF 04 80 00 00 00 00 C4 48 0F 00 FF FF FF  // ..........H.....
    B880: FF FF 00 08 08 00 00 00 CE 48 0F 00 FF FF FF FF  // .........H......
    B890: FF 01 00 20 80 00 00 CF 48 0F 00 FF FF FF FF FF  // ... ....H.......
    B8A0: C4 06 01 20 00 00 D0 48 0F 00 FF FF FF FF FF 81  // ... ...H........
    B8B0: 0A 01 00 00 00 D1 48 2A 00 01 04 00 00 00 01 00  // ......H*........
    B8C0: 0A 00 00 00 F0 3F 00 01 00 00 00 FC FB 0F C0 FF  // .....?..........
    B8D0: 01 00 0E 00 02 00 00 00 00 01 00 0C 00 00 00 D4  // ................
    B8E0: 48 0F 00 FF FF FF FF FF 02 00 00 00 00 00 00 00  // H...............
    B8F0: 00 00 00 07 41 01 C0 48 69 00 01 04 10 40 00 00  // ....A..Hi....@..
    B900: 00 00 00 02 08 20 80 00 00 00 50 05 04 10 40 00  // ..... ....P...@.
    B910: 01 00 00 A0 0A 08 20 80 00 02 00 00 F0 0F 10 40  // ...... ........@
    B920: 00 01 04 11 11 00 00 20 80 00 02 08 11 11 50 05  // ....... ......P.
    B930: 40 00 01 04 10 11 11 A0 0A 80 00 02 08 20 22 22  // @............ ""
    B940: 00 00 00 01 00 00 00 22 22 50 15 00 00 04 10 40  // .......""P.....@
    B950: 22 22 50 05 00 02 08 20 80 33 33 00 00 00 00 C1  // ""P.... .33.....
    B960: 48 0F 00 FF FF FF FF FF 00 00 00 00 00 00 C2 48  // H..............H
    B970: 2A 00 B9 F6 FA C9 FF 00 00 00 00 06 08 00 00 00  // *...............
    B980: 00 00 00 14 40 01 05 22 00 00 00 00 04 00 00 00  // ....@.."........
    B990: 14 00 00 00 00 08 00 00 C3 48 0F 00 FF FF FF FF  // .........H......
    B9A0: FF 80 00 00 00 00 00 CB 48 0F 00 FF FF FF FF FF  // ........H.......
    B9B0: 00 00 00 00 00 00 CD 48 0F 00 FF FF FF FF FF 04  // .......H........
    B9C0: 80 00 00 00 00 C4 48 0F 00 FF FF FF FF FF 00 08  // ......H.........
    B9D0: 08 00 00 00 CE 48 0F 00 FF FF FF FF FF 01 00 20  // .....H......... 
    B9E0: 80 00 00 CF 48 0F 00 FF FF FF FF FF C4 06 01 40  // ....H..........@
    B9F0: 00 00 D0 48 0F 00 FF FF FF FF FF 81 0A 01 00 00  // ...H............
    BA00: 00 D1 48 21 00 01 04 00 00 00 01 00 0A 00 02 00  // ..H!............
    BA10: 10 01 00 01 00 0C 00 FC FB EF FE FF 01 00 0E 00  // ................
    BA20: 00 00 D4 48 0F 00 FF FF FF FF FF 02 00 00 00 00  // ...H............
    BA30: 00 00 00 00 00 00 07 41 01 C0 48 69 00 01 04 10  // .......A..Hi....
    BA40: 40 00 00 00 00 00 02 08 20 80 00 00 00 50 05 04  // @....... ....P..
    BA50: 10 40 00 01 00 00 A0 0A 08 20 80 00 02 00 00 F0  // .@....... ......
    BA60: 0F 10 40 00 01 04 11 11 00 00 20 80 00 02 08 11  // ..@....... .....
    BA70: 11 50 05 40 00 01 04 10 11 11 A0 0A 80 00 02 08  // .P.@............
    BA80: 20 22 22 00 00 00 01 00 00 00 22 22 50 15 00 00  //  "".......""P...
    BA90: 04 10 40 22 22 50 05 00 02 08 20 80 33 33 00 00  // ..@""P.... .33..
    BAA0: 00 00 C1 48 0F 00 FF FF FF FF FF 00 00 00 00 00  // ...H............
    BAB0: 00 C2 48 2A 00 B9 F6 FA C9 FF 00 00 00 00 06 08  // ..H*............
    BAC0: 00 00 00 00 00 00 14 40 01 05 22 00 00 00 00 04  // .......@..".....
    BAD0: 00 00 00 14 00 00 00 00 08 00 00 C3 48 0F 00 FF  // ............H...
    BAE0: FF FF FF FF 80 00 00 00 00 00 CB 48 0F 00 FF FF  // ...........H....
    BAF0: FF FF FF 00 00 00 00 00 00 CD 48 0F 00 FF FF FF  // ..........H.....
    BB00: FF FF 04 80 00 00 00 00 C4 48 0F 00 FF FF FF FF  // .........H......
    BB10: FF 00 08 08 00 00 00 CE 48 0F 00 FF FF FF FF FF  // ........H.......
    BB20: 01 00 20 80 00 00 CF 48 0F 00 FF FF FF FF FF C4  // .. ....H........
    BB30: 06 01 80 00 00 D0 48 0F 00 FF FF FF FF FF 81 0A  // ......H.........
    BB40: 01 00 00 00 D1 48 21 00 01 04 00 00 00 01 00 0A  // .....H!.........
    BB50: 00 02 00 10 01 00 01 00 0C 00 FC FB EF FE FF 01  // ................
    BB60: 00 0E 00 00 00 D4 48 0F 00 FF FF FF FF FF 02 00  // ......H.........
    BB70: 00 00 00 00 00 00 00 00 00 07 26 01 C0 48 69 00  // ..........&..Hi.
    BB80: 01 04 10 40 00 00 00 00 00 02 08 20 80 00 00 00  // ...@....... ....
    BB90: 50 05 04 10 40 00 01 00 00 A0 0A 08 20 80 00 02  // P...@....... ...
    BBA0: 00 00 F0 0F 10 40 00 01 04 11 11 00 00 20 80 00  // .....@....... ..
    BBB0: 02 08 11 11 50 05 40 00 01 04 10 11 11 A0 0A 80  // ....P.@.........
    BBC0: 00 02 08 20 22 22 00 00 00 01 00 00 00 22 22 50  // ... "".......""P
    BBD0: 15 00 00 04 10 40 22 22 50 05 00 02 08 20 80 33  // .....@""P.... .3
    BBE0: 33 00 00 00 00 C1 48 0F 00 FF FF FF FF FF 00 00  // 3.....H.........
    BBF0: 00 00 00 00 C2 48 0F 00 FF FF FF FF FF 00 00 00  // .....H..........
    BC00: 00 00 00 C3 48 0F 00 FF FF FF FF FF 80 00 00 00  // ....H...........
    BC10: 00 00 CB 48 0F 00 FF FF FF FF FF 00 00 00 00 00  // ...H............
    BC20: 00 CD 48 0F 00 FF FF FF FF FF 04 80 00 00 00 00  // ..H.............
    BC30: C4 48 0F 00 FF FF FF FF FF 00 08 08 00 00 00 CE  // .H..............
    BC40: 48 0F 00 FF FF FF FF FF 01 00 20 80 00 00 CF 48  // H......... ....H
    BC50: 0F 00 FF FF FF FF FF C4 06 01 20 00 00 D0 48 0F  // .......... ...H.
    BC60: 00 FF FF FF FF FF 81 0A 01 00 00 00 D1 48 21 00  // .............H!.
    BC70: FF FF 0F 00 00 01 00 0A 00 00 00 F0 3F 00 01 00  // ............?...
    BC80: 0C 00 00 00 00 C0 FF 01 00 0E 00 00 00 D4 48 0F  // ..............H.
    BC90: 00 FF FF FF FF FF 02 00 00 00 00 00 00 00 00 00  // ................
    BCA0: 00 07 2F 01 C0 48 69 00 01 04 10 40 00 00 00 00  // ../..Hi....@....
    BCB0: 00 02 08 20 80 00 00 00 50 05 04 10 40 00 01 00  // ... ....P...@...
    BCC0: 00 A0 0A 08 20 80 00 02 00 00 F0 0F 10 40 00 01  // .... ........@..
    BCD0: 04 11 11 00 00 20 80 00 02 08 11 11 50 05 40 00  // ..... ......P.@.
    BCE0: 01 04 10 11 11 A0 0A 80 00 02 08 20 22 22 00 00  // ........... ""..
    BCF0: 00 01 00 00 00 22 22 50 15 00 00 04 10 40 22 22  // .....""P.....@""
    BD00: 50 05 00 02 08 20 80 33 33 00 00 00 00 C1 48 0F  // P.... .33.....H.
    BD10: 00 FF FF FF FF FF 00 00 00 00 00 00 C2 48 18 00  // .............H..
    BD20: 0F 3E F8 E0 83 00 00 00 00 F0 C1 07 1F 7C 00 00  // .>...........|..
    BD30: 00 14 00 00 C3 48 0F 00 FF FF FF FF FF 80 00 00  // .....H..........
    BD40: 00 00 00 CB 48 0F 00 FF FF FF FF FF 00 00 00 00  // ....H...........
    BD50: 00 00 CD 48 0F 00 FF FF FF FF FF 04 80 00 00 00  // ...H............
    BD60: 00 C4 48 0F 00 FF FF FF FF FF 00 08 08 00 00 00  // ..H.............
    BD70: CE 48 0F 00 FF FF FF FF FF 01 00 20 80 00 00 CF  // .H......... ....
    BD80: 48 0F 00 FF FF FF FF FF C4 06 01 20 00 00 D0 48  // H.......... ...H
    BD90: 0F 00 FF FF FF FF FF 81 0A 01 00 00 00 D1 48 21  // ..............H!
    BDA0: 00 0F 00 00 00 00 01 00 0A 00 80 FF 0F FF FF 01  // ................
    BDB0: 00 0E 00 70 00 F0 00 00 01 00 0C 00 00 00 D4 48  // ...p...........H
    BDC0: 0F 00 FF FF FF FF FF 02 00 00 00 00 00 00 00 00  // ................
    BDD0: 00 C5 48 00 1F C6 48 00 1F C7 48 10 1F 0E 00 48  // ..H...H...H....H
    BDE0: 3F 00 07 00 80 28 00 5D 00 12 00 10 00 78 69 00  // ?....(.].....xi.
    BDF0: 07 00 00 1B 00 5D 00 1A 00 00 00 90 7E 00 07 68  // .....]......~..h
    BE00: 66 20 00 5D 00 0A 00 00 00 F0 D2 00 07 00 00 36  // f .]...........6
    BE10: 00 5D 00 1A 00 00 00 35 0C 02 07 00 00 50 00 1D  // .].....5.....P..
    BE20: 00 85 10 00 C0 6A 18 02 07 00 00 28 00 1D 00 32  // .....j.....(...2
    BE30: 10 00 A0 D4 30 02 07 00 00 14 00 1D 00 0A 10 00  // ....0...........
    BE40: 80 FF FF 02 07 00 00 14 00 1D 00 2A 10 00 01 A0  // ...........*....
    BE50: 0F 03 07 00 00 50 00 1D 00 85 10 00 C0 4C 1D 03  // .....P.......L..
    BE60: 07 00 00 14 00 1D 00 0A 10 00 80 74 40 03 07 00  // ...........t@...
    BE70: 00 14 00 1D 00 0A 10 00 01 E4 57 03 07 00 00 14  // ..........W.....
    BE80: 00 5D 00 00 10 00 01 30 75 03 07 00 00 1E 00 5D  // .].....0u......]
    BE90: 00 11 10 00 02 FF FF 03 07 00 00 3C 00 5D 00 22  // ...........<.]."
    BEA0: 00 00 02 00 00 00 12 00 01 02 00 08 52 47 52 02  // ............RGR.
    BEB0: 52 05 0D 65 D0 05 02 5B 57 00 01 02 00 00 37 00  // R..e...[W.....7.
    BEC0: 00 52 14 02 08 00 0D 1A 32 08 00 0B 1A 02 88 00  // .R......2.......
    BED0: 0E 1A 32 88 00 0C 1A 03 00 46 04 1A 09 05 46 FF  // ..2......F....F.
    BEE0: FF FF 02 56 00 40 03 20 40 01 1A 09 25 40 03 75  // ...V.@. @...%@.u
    BEF0: 02 46 40 03 18 40 5C 1B 2D 02 46 40 27 00 46 06  // .F@..@\.-.F@'.F.
    BF00: 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A 01 40 5B 00  // .-.@\....A...@[.
    BF10: 36 00 01 01 00 00 37 00 00 01 05 00 0B 21 00 20  // 6.....7......!. 
    BF20: 0F 5C 05 D3 0B 00 00 E0 FF E0 1B 32 00 01 05 02  // .\.........2....
    BF30: 14 A1 03 03 00 01 05 03 14 A0 03 03 00 01 05 17  // ................
    BF40: 15 10 C1 10 40 5B 32 00 01 01 00 00 37 00 00 54  // ....@[2.....7..T
    BF50: 20 24 15 56 00 41 03 88 41 09 08 01 02 01 0B 41  //  $.V.A..A......A
    BF60: 01 3A C9 00 41 15 05 41 08 01 02 C4 00 41 54 20  // .:..A..A.....AT 
    BF70: 2B 08 0D 25 24 15 03 5B FF 00 02 01 00 04 37 00  // +..%$..[......7.
    BF80: 00 66 0C 03 0C 41 00 00 2D 0A 41 42 2D 0D 42 04  // .f...A..-.AB-.B.
    BF90: 00 3D 24 00 03 00 44 30 00 2D 0D 42 04 00 3E 0A  // .=$...D0.-.B..>.
    BFA0: 42 41 44 FB 00 43 19 00 56 00 43 03 A4 41 02 00  // BAD..C..V.C..A..
    BFB0: 03 F2 41 41 03 0C 41 00 00 3E 0D 41 00 00 44 FB  // ..AA..A..>.A..D.
    BFC0: 00 3E 0D 41 61 48 49 6B 00 3E E5 41 10 46 5F 00  // .>.AaHIk.>.A.F_.
    BFD0: 1B 3D 41 01 43 6B 00 09 E5 41 03 15 3D 41 02 2D  // .=A.Ck...A..=A.-
    BFE0: E5 41 0C 03 3A 43 41 54 00 00 00 33 0D 41 01 00  // .A..:CAT...3.A..
    BFF0: 01 0A 00 00 41 0D 02 01 00 44 2D 0D 41 02 00 01  // ....A....D-.A...
    C000: 0A 00 00 41 03 32 43 41 4B E5 00 01 49 D7 00 07  // ...A.2CAK...I...
    C010: 02 01 00 45 2D 0D 41 01 00 01 0A 00 00 41 4A 02  // ...E-.A......AJ.
    C020: 01 00 44 44 B9 00 03 29 43 00 0E A2 00 44 43 C1  // ..DD...)C....DC.
    C030: 00 03 29 43 00 08 A2 00 45 33 0D 41 03 00 01 0A  // ..)C....E3.A....
    C040: 00 00 41 03 3A 43 41 07 02 01 00 45 43 FA 00 0D  // ..A.:CA....EC...
    C050: 02 01 00 44 33 0D 41 01 00 01 0A 00 00 41 3D A5  // ...D3.A......A=.
    C060: 00 01 44 F5 00 07 02 01 00 45 43 FA 00 0D 02 01  // ..D......EC.....
    C070: 00 44 5B 55 20 00 5B 00 41 00 01 01 00 04 02 01  // .D[U .[.A.......
    C080: 01 00 02 E5 01 02 52 3C 37 00 00 01 05 82 01 EC  // ......R<7.......
    C090: 00 22 D8 4A A5 83 01 01 44 13 00 01 05 82 01 D0  // .".J....D.......
    C0A0: 00 22 D8 01 39 83 01 01 01 05 82 01 EC 00 22 D8  // ."..9.........".
    C0B0: 4A A5 83 01 01 44 30 00 5B 00 54 05 01 06 00 00  // J....D0.[.T.....
    C0C0: 37 00 00 3D 25 02 08 49 49 02 3D 05 00 00 00 00  // 7..=%..II.=.....
    C0D0: 00 44 33 02 07 25 1E 17 FE 54 20 68 18 02 01 01  // .D3..%...T h....
    C0E0: 00 4A 25 51 18 10 44 40 00 4B E5 02 40 44 40 00  // .J%Q..D@.K..@D@.
    C0F0: 02 05 00 40 9C 00 00 43 47 00 02 05 00 60 EA 00  // ...@...CG....`..
    C100: 00 52 3C 03 01 46 00 3C F9 24 01 00 44 AC 00 02  // .R<..F.<.$..D...
    C110: 05 00 07 00 00 00 52 13 4A A5 24 01 10 44 5E 00  // ......R.J.$..D^.
    C120: 07 25 15 01 FE 03 00 40 24 01 03 FA 40 46 3E 25  // .%.....@$...@F>%
    C130: 40 00 49 7F 00 03 25 40 68 01 02 24 01 40 4A A5  // @.I...%@h..$.@J.
    C140: 24 01 10 44 84 00 02 02 00 46 4A 25 51 18 10 44  // $..D.....FJ%Q..D
    C150: AC 00 4B E5 02 40 44 AC 00 02 05 00 06 00 04 00  // ..K..@D.........
    C160: 52 13 02 02 00 46 55 38 00 20 05 00 50 C3 00 00  // R....FU8. ..P...
    C170: 03 02 46 40 20 05 00 05 00 00 00 66 1E 56 00 41  // ..F@ ......f.V.A
    C180: 03 0C 41 10 01 21 02 40 41 27 05 40 14 00 00 00  // ..A..!.@A'.@....
    C190: 33 02 46 40 01 02 42 01 46 01 02 46 01 46 01 02  // 3.F@..B.F..F.F..
    C1A0: 4A 01 46 01 02 4E 01 46 03 0C 41 10 01 3E 0D 41  // J.F..N.F..A..>.A
    C1B0: 00 00 44 1A 01 01 A5 15 01 01 01 05 13 01 00 0E  // ..D.............
    C1C0: 27 07 01 02 14 01 46 0D 25 15 01 01 4A 65 15 01  // '.....F.%...Je..
    C1D0: 02 44 12 01 55 38 03 56 00 46 01 05 82 01 88 01  // .D..U8.V.F......
    C1E0: 22 D8 03 00 41 83 01 09 05 41 07 00 03 00 4C 25  // "...A....A....L%
    C1F0: 41 07 44 8B 01 0E E5 03 01 03 0D 46 40 9C 3E 25  // A.D........F@.>%
    C200: 41 04 44 5C 01 03 0D 46 30 75 3E 25 41 03 44 5C  // A.D\...F0u>%A.D\
    C210: 01 03 0D 46 10 27 3E A5 41 00 44 8B 01 3E A5 41  // ...F.'>.A.D..>.A
    C220: 02 49 71 01 1B 0D 46 01 43 8B 01 3E A5 41 01 49  // .Iq...F.C..>.A.I
    C230: 7C 01 15 0D 46 01 03 05 41 03 00 00 00 27 02 46  // |...F...A....'.F
    C240: 41 03 02 46 40 4A 25 51 18 10 44 D7 01 4B E5 02  // A..F@J%Q..D..K..
    C250: 40 44 D7 01 3D 05 01 40 9C 00 00 46 D7 01 0E E5  // @D..=..@...F....
    C260: 03 02 66 FF 2D 0D 42 30 05 3D 04 01 00 00 47 BF  // ..f.-.B0.=....G.
    C270: 01 2D 0D 42 06 00 43 AF 01 02 04 01 00 00 02 0C  // .-.B..C.........
    C280: 03 04 00 3D 02 01 46 49 D7 01 0E E5 03 04 43 E7  // ...=..FI......C.
    C290: 01 4B E5 03 01 44 E7 01 02 05 00 05 00 00 00 52  // .K...D.........R
    C2A0: 13 02 01 00 01 52 3C 02 01 02 00 55 38 02 3C 39  // .....R<....U8.<9
    C2B0: 24 01 00 44 11 02 4A A5 24 01 08 44 FC 01 01 39  // $..D..J.$..D...9
    C2C0: 24 01 00 4A A5 24 01 08 44 09 02 4B E5 03 02 44  // $..J.$..D..K...D
    C2D0: 2E 02 02 01 02 01 4B E5 03 04 49 2E 02 02 89 00  // ......K...I.....
    C2E0: 03 02 0D 00 04 00 52 13 02 01 00 02 5B 3A 00 00  // ......R.....[:..
    C2F0: 0D 25 1E 17 01 0D 25 68 18 01 4A 65 68 18 01 44  // .%....%h..Jeh..D
    C300: 40 02 5B 4B 05 00 FF FF FF 00 44 6E 02 3D 65 02  // @.[K......Dn.=e.
    C310: 24 49 5E 02 02 A5 02 00 3D 25 02 02 46 B8 03 52  // $I^.....=%..F..R
    C320: 24 4B E5 02 01 44 B8 03 3D E5 00 02 46 86 02 03  // $K...D..=...F...
    C330: 01 46 00 02 39 00 00 55 28 00 52 23 02 02 00 46  // .F..9..U(.R#...F
    C340: 3D 25 02 02 44 97 02 3A 2A 00 3D 25 02 00 49 FD  // =%..D..:*.=%..I.
    C350: 04 54 00 06 17 07 65 04 17 EF 54 00 05 17 54 00  // .T....e...T...T.
    C360: 03 17 07 25 07 17 F7 0D 25 07 17 01 51 32 07 25  // ...%....%...Q2.%
    C370: 07 17 7F 51 32 0D 25 07 17 02 51 C8 4B 05 00 FF  // ...Q2.%...Q.K...
    C380: FF FF 00 44 FD 04 66 FF 2D 0D 42 04 05 3D 0C 01  // ...D..f.-.B..=..
    C390: 00 00 47 E3 02 2D 0D 42 06 00 43 D3 02 3D A5 02  // ..G..-.B..C..=..
    C3A0: 03 49 0E 03 03 01 46 00 56 38 46 3E 05 46 E4 57  // .I....F.V8F>.F.W
    C3B0: 00 00 47 0E 03 3D 0D 01 1D 00 46 0E 03 01 05 08  // ..G..=....F.....
    C3C0: 17 44 B9 DE 19 43 14 03 01 04 08 17 02 00 01 65  // .D...C.........e
    C3D0: 00 17 40 4B E5 02 10 44 29 03 5C A5 07 17 F8 00  // ..@K...D).\.....
    C3E0: 43 2F 03 5C A5 07 17 F8 01 0D 25 0C 17 01 4B E5  // C/.\......%...K.
    C3F0: 02 02 44 46 03 01 05 02 17 7E 7E 7E 00 43 64 03  // ..DF.....~~~.Cd.
    C400: 01 39 00 17 01 01 89 01 17 01 07 25 01 17 F0 01  // .9.........%....
    C410: B1 02 17 01 01 39 02 17 03 01 71 02 17 01 51 64  // .....9....q...Qd
    C420: 54 20 0C 17 07 25 07 17 FD 51 32 0D 25 07 17 80  // T ...%...Q2.%...
    C430: 50 02 07 25 07 17 FE 51 0A 4A A5 07 17 10 44 7D  // P..%...Q.J....D}
    C440: 03 4A A5 07 17 20 44 87 03 4B E5 02 02 49 AE 03  // .J... D..K...I..
    C450: 01 31 01 17 03 3D 0D 03 00 00 44 AE 03 01 09 05  // .1...=....D.....
    C460: 17 03 5C A5 05 17 FC 01 0D 25 07 17 08 01 25 06  // ..\......%....%.
    C470: 17 1F 3A 00 00 3D E5 00 02 46 FD 04 03 01 46 00  // ..:..=...F....F.
    C480: 56 38 46 56 00 41 03 39 41 02 09 25 41 0C 1B 25  // V8FV.A.9A..%A..%
    C490: 41 01 66 FF 2D 0D 42 28 05 2D 0A 42 41 03 24 41  // A.f.-.B(.-.BA.$A
    C4A0: 01 00 21 02 46 41 03 24 41 00 00 27 02 40 41 03  // ..!.FA.$A..'.@A.
    C4B0: 05 41 00 E1 F5 05 27 02 41 40 3E 05 40 00 00 01  // .A....'.A@>.@...
    C4C0: 00 45 0F 04 03 0D 40 FF FF 02 39 00 00 52 14 01  // .E....@...9..R..
    C4D0: 0A 30 1B 40 3A 00 00 55 00 03 02 39 03 00 14 0D  // .0.@:..U...9....
    C4E0: 03 02 3D A5 02 00 49 84 04 03 09 48 03 21 05 46  // ..=...I....H.!.F
    C4F0: 50 C3 00 00 03 02 46 40 3C 02 41 01 40 49 4E 04  // P.....F@<.A.@IN.
    C500: 4A 25 40 01 10 49 FD 04 3A 00 00 55 28 00 52 23  // J%@..I..:..U(.R#
    C510: 03 09 48 03 07 25 40 01 EF 01 02 41 01 46 66 1E  // ..H..%@....A.Ff.
    C520: 03 0C 41 10 01 3E 0D 41 00 00 49 7C 04 5C 25 40  // ..A..>.A..I|.\%@
    C530: 01 DF 10 43 FD 04 0D 25 40 01 30 43 FD 04 03 09  // ...C...%@.0C....
    C540: 48 03 03 39 46 02 09 25 46 0C 15 25 46 02 0F 25  // H..9F..%F..%F..%
    C550: 46 01 02 A1 02 02 2C A5 02 01 3D 25 02 02 49 AA  // F.....,...=%..I.
    C560: 04 55 30 02 4B E5 02 01 49 CA 04 3C 31 40 01 02  // .U0.K...I..<1@..
    C570: 49 C5 04 03 21 48 02 3C 22 38 01 46 44 FD 04 55  // I...!H.<"8.FD..U
    C580: 28 00 52 23 03 21 48 02 07 25 38 01 FE 03 09 48  // (.R#.!H..%8....H
    C590: 03 01 31 40 01 02 03 21 48 02 01 22 38 01 46 4B  // ..1@...!H.."8.FK
    C5A0: E5 02 02 44 FD 04 3A 00 00 03 21 43 00 0D 22 C1  // ...D..:...!C..".
    C5B0: 00 44 0D 62 C1 00 44 3A 00 00 5B 7A 50 00 1D 00  // .D.b..D:..[zP...
    C5C0: 44 B5 DE 9D 22 00 44 B6 DE 9D 2D 00 44 B7 DE 9D  // D...".D...-.D...
    C5D0: 3B 00 44 65 DE 9D 45 00 44 66 DE 9D FF FF 44 67  // ;.De..E.Df....Dg
    C5E0: DE 9D 01 01 05 04 03 02 02 01 88 13 00 00 01 02  // ................
    C5F0: 10 27 00 00 01 00 98 3A 00 00 03 02 20 4E 00 00  // .'.....:.... N..
    C600: 04 02 30 75 00 00 03 00 40 9C 00 00 04 00 4D 02  // ..0u....@.....M.
    C610: 02 01 00 00 37 00 00 3D 65 00 07 44 0F 01 03 0D  // ....7..=e..D....
    C620: 48 1B 00 3D 25 00 10 44 27 00 56 00 40 20 25 00  // H..=%..D'.V.@ %.
    C630: 03 03 0A 48 40 3D 65 00 01 44 02 01 54 20 C1 02  // ...H@=e..D..T ..
    C640: 3C E5 C2 02 30 49 32 00 56 08 48 3D 25 00 10 44  // <...0I2.V.H=%..D
    C650: BF 00 03 21 48 00 01 0D FA 02 02 00 52 14 01 05  // ...!H.......R...
    C660: 8D 1A 00 00 20 00 01 25 BE 1B 02 01 A5 CC 1A C0  // .... ..%........
    C670: 01 0D 91 1A 45 01 5C 05 DA 1A F0 FF FF FF 02 00  // ....E.\.........
    C680: 00 00 07 25 03 1B FB 0D 25 7D 1A 01 0D 25 34 1B  // ...%....%}...%4.
    C690: 01 5C 05 36 1B EE FE 00 00 11 01 FF 7F 01 25 3A  // .\.6..........%:
    C6A0: 1B 11 01 0D 33 1B FF 7F 01 05 B3 1B 07 40 00 00  // ....3........@..
    C6B0: 0D A5 B6 1B 01 01 05 31 1B 00 08 00 04 01 0D 86  // .......1........
    C6C0: 1B 04 00 01 0D E7 1B 01 00 3A 00 00 5B 01 05 34  // .........:..[..4
    C6D0: 47 01 30 00 00 01 05 31 47 00 08 00 04 01 05 33  // G.0....1G......3
    C6E0: 47 FF 7F 00 00 01 05 38 47 11 00 00 00 01 05 41  // G......8G......A
    C6F0: 47 01 30 00 00 01 05 3E 47 00 08 00 04 01 05 40  // G.0....>G......@
    C700: 47 FF 7F 00 00 01 05 45 47 11 00 00 00 43 BB 00  // G......EG....C..
    C710: 54 08 C0 02 0D 25 C1 02 01 3A 00 00 5B 5C 05 F6  // T....%...:..[\..
    C720: 02 FF 00 FF 9F 04 FC 00 20 01 05 F9 02 61 51 02  // ........ ....aQ.
    C730: 00 01 05 0C 03 00 90 00 10 01 25 09 01 03 0D 65  // ..........%....e
    C740: 10 17 01 5C 65 07 17 E7 08 01 05 3B 01 30 02 12  // ...\e......;.0..
    C750: 00 01 05 30 01 80 BB 10 00 01 8D E5 17 30 00 01  // ...0.........0..
    C760: 25 E4 17 01 01 05 31 01 3C 00 01 08 5C 65 D4 00  // %.....1.<...\e..
    C770: FC 02 01 0D FC 00 00 01 01 05 2F 48 00 00 00 00  // ........../H....
    C780: 01 05 04 48 00 00 00 00 01 05 3A 48 0F 00 00 00  // ...H......:H....
    C790: 0D E5 CB 05 10 01 05 F8 16 00 00 00 30 01 0D 34  // ............0..4
    C7A0: 46 40 01 01 25 32 01 00 01 05 34 47 01 30 00 00  // F@..%2....4G.0..
    C7B0: 01 05 31 47 00 08 00 04 01 05 33 47 FF 7F 00 00  // ..1G......3G....
    C7C0: 01 05 38 47 11 00 00 00 01 05 41 47 01 30 00 00  // ..8G......AG.0..
    C7D0: 01 05 3E 47 00 08 00 04 01 05 40 47 FF 7F 00 00  // ..>G......@G....
    C7E0: 01 05 45 47 11 00 00 00 54 20 D2 02 4A 25 D5 02  // ..EG....T ..J%..
    C7F0: 01 49 DE 01 01 05 D4 02 00 20 00 00 01 05 D3 02  // .I....... ......
    C800: FF 10 00 10 4A 25 D5 02 01 49 F6 01 01 05 D4 02  // ....J%...I......
    C810: 28 05 1B 00 01 05 D3 02 FF 10 00 20 0D 25 D2 02  // (.......... .%..
    C820: 01 02 8D 00 00 07 52 18 55 00 00 52 4E 02 25 00  // ......R.U..RN.%.
    C830: 07 52 33 66 16 03 0C 41 04 00 4C 0D 41 02 00 44  // .R3f...A..L.A..D
    C840: BB 00 0D A5 C9 05 04 52 4B 66 1E 03 24 41 38 00  // .......RKf..$A8.
    C850: 09 25 41 3C 5C 22 51 18 C3 41 5B 00 17 00 01 01  // .%A<\"Q..A[.....
    C860: 00 00 37 00 00 01 05 82 01 00 00 20 D0 07 A5 83  // ..7........ ....
    C870: 01 FC 5B 00 48 00 01 02 00 04 37 00 00 42 21 00  // ..[.H.....7..B!.
    C880: 63 05 1F 00 63 04 1F 00 63 07 1F 00 63 06 1F 00  // c...c...c...c...
    C890: 5A 5A 5B 54 00 D8 01 56 00 41 03 31 41 00 03 B9  // ZZ[T...V.A.1A...
    C8A0: 41 00 01 02 E8 01 41 56 00 41 03 09 41 00 01 02  // A.....AV.A..A...
    C8B0: C8 01 41 3C 25 D8 01 00 44 3F 00 5B 8E 00 01 02  // ..A<%...D?.[....
    C8C0: 00 04 66 FF 56 08 47 2D 0D 42 5C 00 03 21 47 00  // ..f.V.G-.B\..!G.
    C8D0: 09 25 47 F0 42 22 47 63 00 43 00 63 40 2E 00 63  // .%G.B"Gc.C.c@..c
    C8E0: 80 36 00 63 60 3E 00 5A 5A 5B 2D 0D 42 26 00 43  // .6.c`>.ZZ[-.B&.C
    C8F0: 43 00 2D 0D 42 0C 00 43 43 00 2D 0D 42 18 00 03  // C.-.B..CC.-.B...
    C900: 21 47 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03  // !G..%G.-.BG-.BG.
    C910: 0C 48 00 00 5B 7A 32 00 00 00 00 02 00 04 00 26  // .H..[z2........&
    C920: 00 28 00 2A 00 00 02 00 2C 00 2D 00 2E 00 2F 00  // .(.*....,.-.../.
    C930: 00 00 00 01 00 02 00 03 00 04 00 05 00 0A 00 00  // ................
    C940: 01 00 07 00 08 00 0B 00 0C 00 78 00 01 01 00 00  // ..........x.....
    C950: 37 00 00 52 14 0D A5 51 1B 01 54 20 54 1B 07 25  // 7..R...Q..T T..%
    C960: 44 1B FE 54 20 45 1B 42 29 00 63 00 31 00 63 01  // D..T E.B).c.1.c.
    C970: 39 00 63 02 4D 00 5A 5A 43 70 00 01 25 45 1B 02  // 9.c.M.ZZCp..%E..
    C980: 43 3E 00 01 25 45 1B 01 54 20 42 1B 54 00 43 1B  // C>..%E..T B.T.C.
    C990: 54 00 47 1B 43 70 00 01 0D 43 1B 01 01 01 05 47  // T.G.Cp...C.....G
    C9A0: 1B 01 00 01 00 0D 65 48 1B 01 0D 65 4B 1B 01 01  // ......eH...eK...
    C9B0: 0D 53 1B 10 10 01 25 42 1B 01 54 30 51 1B 3A 00  // .S....%B..T0Q.:.
    C9C0: 00 5B 74 00 01 01 00 00 37 00 00 4A A5 CB 05 01  // .[t.....7..J....
    C9D0: 44 15 00 02 65 00 01 0E 25 00 80 52 14 03 00 46  // D...e...%..R...F
    C9E0: CC 00 08 25 00 0F 52 14 54 30 9D 1B 3C 69 9D 1B  // ...%..R.T0..<i..
    C9F0: 00 44 65 00 01 69 9D 1B 00 3D 65 00 00 44 65 00  // .De..i...=e..De.
    CA00: 4A A5 9C 1B 01 44 65 00 4C 25 46 01 44 69 00 4A  // J....De.L%F.Di.J
    CA10: 25 A3 1B 01 49 4D 00 4A 25 A3 1B 01 44 55 00 4A  // %...IM.J%...DU.J
    CA20: 25 A3 1B 01 49 5D 00 3A 00 00 5B 4A 25 9D 1B 01  // %...I].:..[J%...
    CA30: 44 69 00 43 65 00 3E 00 01 01 00 00 37 00 00 52  // Di.Ce.>.....7..R
    CA40: 14 3D 65 00 01 44 30 00 0D 65 9C 1B 03 07 25 9C  // .=e..D0..e....%.
    CA50: 1B FE 4A A5 9C 1B 01 49 1C 00 07 E5 00 1B 7F 54  // ..J....I.......T
    CA60: 20 A9 1B 43 3A 00 0D E5 00 1B 80 0D 25 9C 1B 01  //  ..C:.......%...
    CA70: 3A 00 00 5B 20 01 01 03 00 0C 37 00 00 56 00 40  // :..[ .....7..V.@
    CA80: 03 09 40 01 21 05 40 40 42 0F 00 2D 01 40 03 27  // ..@.!.@@B..-.@.'
    CA90: 05 40 0A 00 00 00 21 05 40 30 00 00 00 56 00 41  // .@....!.@0...V.A
    CAA0: 03 39 41 01 27 02 40 41 27 05 40 E8 03 00 00 03  // .9A.'.@A'.@.....
    CAB0: 02 46 40 3E 05 41 F4 01 00 00 47 50 00 2D 05 46  // .F@>.A....GP.-.F
    CAC0: 01 00 00 00 3D 05 03 00 00 00 00 44 84 00 2C 0D  // ....=......D..,.
    CAD0: 01 01 00 03 05 40 40 42 0F 00 33 01 40 03 27 05  // .....@@B..3.@.'.
    CAE0: 40 A0 86 01 00 02 A2 03 40 15 05 41 0E 27 05 41  // @.......@..A.'.A
    CAF0: A8 61 00 00 02 0A 03 40 02 F1 03 01 3D A5 02 00  // .a.....@....=...
    CB00: 44 A5 00 2D 05 46 E0 01 00 00 03 01 41 00 56 38  // D..-.F......A.V8
    CB10: 41 27 02 46 41 02 E2 03 40 0E A5 03 10 4B E5 02  // A'.FA...@....K..
    CB20: 01 49 18 01 3D 25 02 02 44 C4 00 3A 2A 00 3D 25  // .I..=%..D..:*.=%
    CB30: 02 00 44 C4 00 3A 54 00 03 00 41 07 17 5E 05 41  // ..D..:T...A..^.A
    CB40: FC FF F8 FF 08 00 01 00 4B E5 02 10 44 E0 00 5E  // ........K...D..^
    CB50: A5 41 F8 00 3C 02 07 17 41 49 18 01 3C 39 00 17  // .A..<...AI..<9..
    CB60: 01 49 18 01 3C 89 01 17 01 49 18 01 3C 31 01 17  // .I..<....I..<1..
    CB70: 03 49 18 01 3C 09 05 17 03 49 18 01 3C B1 02 17  // .I..<....I..<...
    CB80: 01 49 18 01 3C 39 02 17 03 44 1C 01 0E E5 02 01  // .I..<9...D......
    CB90: 3A 00 00 5B 2C 00 02 01 00 00 37 00 00 3C 21 FC  // :..[,.....7..<!.
    CBA0: 00 00 49 19 00 0D A5 C0 00 01 43 26 00 3C 61 FC  // ..I.......C&.<a.
    CBB0: 00 00 49 26 00 0D A5 C0 00 02 0D A5 C1 00 01 5B  // ..I&...........[
    CBC0: 19 00 01 01 00 08 37 00 00 52 14 01 01 5E 1B 00  // ......7..R...^..
    CBD0: 01 01 5F 1B 01 3A 00 00 5B 00 DE 00 01 03 04 00  // .._..:..[.......
    CBE0: 37 00 00 56 00 46 56 00 00 03 21 00 00 55 20 00  // 7..V.FV...!..U .
    CBF0: 3D 65 00 03 44 2C 00 3D 65 00 0A 46 D3 00 02 29  // =e..D,.=e..F...)
    CC00: 00 00 32 25 00 08 0E 25 00 60 52 14 5C 22 00 4A  // ..2%...%.`R.\".J
    CC10: F8 00 02 22 00 00 3D A5 00 01 49 54 00 66 1E 03  // ..."..=...IT.f..
    CC20: 04 46 40 01 3E 05 46 00 00 00 00 49 BF 00 52 14  // .F@.>.F....I..R.
    CC30: 03 08 41 C0 1A 09 0D 41 03 00 66 FF 2D 0D 42 DA  // ..A....A..f.-.B.
    CC40: 00 2D 0A 42 41 03 24 00 00 00 3D E2 00 00 48 BF  // .-.BA.$...=...H.
    CC50: 00 3E 25 00 04 44 8E 00 03 22 46 00 33 25 46 01  // .>%..D..."F.3%F.
    CC60: 15 25 46 04 0F 25 46 01 33 39 00 00 3E 25 00 01  // .%F..%F.39..>%..
    CC70: 44 AB 00 3E 25 00 02 44 A4 00 03 25 46 21 03 65  // D..>%..D...%F!.e
    CC80: 00 2F 43 AF 00 03 65 00 13 03 79 46 00 33 65 46  // ./C...e...yF.3eF
    CC90: 01 15 2D 46 03 0F 65 46 01 52 14 01 02 F2 1B 46  // ..-F..eF.R.....F
    CCA0: 01 52 EE 1B 00 54 00 F9 1B 54 00 ED 1B 3A 00 00  // .R...T...T...:..
    CCB0: 5B 7A 04 00 03 02 01 04 AF 01 01 04 00 08 37 00  // [z............7.
    CCC0: 00 3D 65 02 01 49 44 01 4B A5 02 03 49 5D 00 02  // .=e..ID.K...I]..
    CCD0: 05 00 00 03 00 05 02 05 01 00 05 02 00 3C 21 FC  // .............<!.
    CCE0: 00 02 49 57 00 01 8D C0 00 00 02 51 02 01 05 C6  // ..IW.......Q....
    CCF0: 00 00 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3  // ...........P....
    CD00: 00 02 00 54 20 CA 00 01 05 C2 00 00 01 00 00 56  // ...T ..........V
    CD10: 20 40 43 83 00 0E 25 02 80 52 14 54 00 CC 00 56  //  @C...%..R.T...V
    CD20: 08 48 08 25 02 07 0D 25 CA 00 01 01 25 C2 00 01  // .H.%...%....%...
    CD30: 54 00 C6 00 54 00 C8 00 56 20 40 3D A5 01 00 49  // T...T...V @=...I
    CD40: 8F 00 0D 25 C2 00 10 07 65 D0 05 FE 3D A5 01 01  // ...%....e...=...
    CD50: 47 A0 00 0D 65 D0 05 01 03 A0 40 C9 00 03 00 46  // G...e.....@....F
    CD60: C4 00 03 02 41 46 2D 00 46 C6 00 2D 00 41 C8 00  // ....AF-.F..-.A..
    CD70: 52 14 01 32 07 1A 40 01 32 08 1A 40 01 02 04 1A  // R..2..@.2..@....
    CD80: 46 01 02 05 1A 41 54 30 C1 1A 54 00 5C 1B 01 01  // F....AT0..T.\...
    CD90: 5D 1B 00 54 08 09 1A 54 08 0A 1A 54 08 0B 1A 54  // ]..T...T...T...T
    CDA0: 08 0C 1A 01 09 0E 1A 00 01 19 0D 1A 00 5C 19 01  // .............\..
    CDB0: 1A FC F8 01 5C A5 01 1A 0F 10 01 09 06 1A 01 01  // ....\...........
    CDC0: 25 00 1A 01 0D 25 B3 1B 04 5C 62 B3 1B FE 40 54  // %....%...\b...@T
    CDD0: 20 35 1A 54 20 3C 1A 54 00 CA 1B 54 00 C8 1B 54  //  5.T <.T...T...T
    CDE0: 00 CC 1B 4B A5 02 03 49 40 01 0E 25 02 80 52 14  // ...K...I@..%..R.
    CDF0: 01 05 CC 00 01 00 00 00 3A 00 00 5B 52 14 3D 65  // ........:..[R.=e
    CE00: 02 00 49 61 01 54 20 00 1A 3A 00 00 3C 21 FC 00  // ..Ia.T ..:..<!..
    CE10: 02 49 60 01 54 08 C1 00 5B 3D 65 02 10 44 6E 01  // .I`.T...[=e..Dn.
    CE20: 01 09 06 1A 01 5B 03 00 40 04 1A 09 05 40 00 00  // .....[..@....@..
    CE30: 00 FD 2D 01 40 00 09 0D 40 00 F0 01 02 04 1A 40  // ..-.@...@......@
    CE40: 08 0D 00 FF 0F 56 00 41 03 31 41 01 74 0A 00 41  // .....V.A.1A.t..A
    CE50: 2C 09 01 00 08 25 00 FC 14 05 00 10 01 01 5C 1B  // ,....%........\.
    CE60: 00 01 09 0D 1A 01 5B 00 49 00 01 01 00 00 37 00  // ......[.I.....7.
    CE70: 00 52 14 07 65 B6 1B FE 3D 65 00 01 44 37 00 54  // .R..e...=e..D7.T
    CE80: 30 6E 1A 54 30 11 1A 54 20 B5 1B 54 20 BD 1B 54  // 0n.T0..T ..T ..T
    CE90: 30 BD 1B 4A 25 B6 1B 01 49 2B 00 3A 00 00 5B 0D  // 0..J%...I+.:..[.
    CEA0: 25 BD 1B 01 54 00 9E 1B 07 25 C0 1A F4 3A 00 00  // %...T....%...:..
    CEB0: 5B 00 95 00 01 03 00 00 37 00 00 52 14 0D 25 03  // [.......7..R..%.
    CEC0: 1B 04 54 20 78 1A 54 00 80 1A 3D 65 00 01 49 56  // ..T x.T...=e..IV
    CED0: 00 0D 25 7E 1A 07 01 25 7F 1A 01 51 01 4A 25 7F  // ..%~...%...Q.J%.
    CEE0: 1A 02 44 29 00 54 20 7F 1A 54 08 81 1A 54 08 82  // ..D).T ..T...T..
    CEF0: 1A 54 08 83 1A 01 0D 84 1A FF FF 01 0D 85 1A FF  // .T..............
    CF00: FF 01 0D 86 1A FF FF 5B 01 31 79 1A 00 56 00 41  // .......[.1y..V.A
    CF10: 03 19 41 01 3B 02 41 3D 65 00 02 49 78 00 03 00  // ..A.;.A=e..Ix...
    CF20: 40 7C 1A 04 02 00 40 43 81 00 03 03 40 00 01 02  // @|....@C....@...
    CF30: 7C 1A 40 2D 05 46 04 00 00 00 2D 8D 41 01 00 3E  // |.@-.F....-.A..>
    CF40: 89 41 01 45 65 00 5B 00 8D 00 01 01 00 04 01 05  // .A.Ee.[.........
    CF50: 82 01 EC 00 22 D8 03 00 40 83 01 09 05 40 00 00  // ...."...@....@..
    CF60: F0 07 1B 05 40 14 66 FF 2D 0D 42 65 00 3E 0C 40  // ....@.f.-.Be.>.@
    CF70: 02 00 47 35 00 2D 0D 42 08 00 43 25 00 33 0C 40  // ..G5.-.B..C%.3.@
    CF80: 04 00 21 0C 40 06 00 2D 0C 40 00 00 56 18 40 03  // ..!.@..-.@..V.@.
    CF90: 02 46 40 66 1E 02 04 00 08 00 20 05 00 64 00 00  // .F@f...... ..d..
    CFA0: 00 27 02 40 46 02 02 00 40 5B 7A 28 00 64 00 00  // .'.@F...@[z(.d..
    CFB0: 00 00 00 00 00 FF FF 07 00 01 00 00 00 C8 00 3F  // ...............?
    CFC0: 00 08 00 19 00 40 06 5F 00 40 00 32 00 80 0C 7F  // .....@._.@.2....
    CFD0: 00 60 00 64 00 00 53 01 02 03 00 18 37 00 00 66  // .`.d..S.....7..f
    CFE0: FF 2D 0D 42 47 01 55 28 05 2D 09 42 05 2D 09 42  // .-.BG.U(.-.B.-.B
    CFF0: 05 03 0C 48 00 00 03 09 41 03 2D 19 41 03 3E 0D  // ...H....A.-.A.>.
    D000: 41 03 00 46 3F 00 5C 05 B3 1B FB 0F F0 FF 00 30  // A..F?.\........0
    D010: 00 00 43 4B 00 5C 05 B3 1B FF 0F F0 FF 04 40 00  // ..CK.\........@.
    D020: 00 03 09 41 00 2D 19 41 00 33 0D 41 01 00 01 0A  // ...A.-.A.3.A....
    D030: 80 1B 41 54 08 82 1B 01 99 82 1B 02 03 19 41 00  // ..AT..........A.
    D040: 33 09 41 02 56 18 41 03 B1 41 04 33 1A 41 41 01  // 3.A.V.A..A.3.AA.
    D050: 8A 81 1B 41 03 19 41 00 33 09 41 02 2D 1A 41 41  // ...A..A.3.A.-.AA
    D060: 2D 09 41 00 4B 25 04 10 44 99 00 2D 09 41 00 01  // -.A.K%..D..-.A..
    D070: 0A 81 1B 41 03 21 41 04 09 25 41 02 1B 25 41 01  // ...A.!A..%A..%A.
    D080: 01 22 83 1B 41 54 00 5E 1B 01 31 5E 1B 04 01 B1  // ."..AT.^..1^....
    D090: 5E 1B 04 03 09 41 01 2D 19 41 01 33 0D 41 01 00  // ^....A.-.A.3.A..
    D0A0: 01 0A 87 1B 41 54 08 8E 1B 01 99 8E 1B 03 03 19  // ....AT..........
    D0B0: 41 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41  // A.3.A.V.A..A.3.A
    D0C0: 41 01 8A 8D 1B 41 03 19 41 01 33 09 41 03 2D 1A  // A....A..A.3.A.-.
    D0D0: 41 41 2D 09 41 01 4B 25 04 20 44 0B 01 2D 09 41  // AA-.A.K%. D..-.A
    D0E0: 01 01 0A 8D 1B 41 03 21 41 04 09 25 41 04 1B 25  // .....A.!A..%A..%
    D0F0: 41 02 01 22 8F 1B 41 54 00 5F 1B 01 39 5F 1B 04  // A.."..AT._..9_..
    D100: 01 B9 5F 1B 04 03 21 41 04 09 25 41 80 1B 25 41  // .._...!A..%A..%A
    D110: 07 01 22 9E 1B 41 3A 00 00 5B 7A 0C 00 00 00 00  // .."..A:..[z.....
    D120: 02 00 04 00 26 00 28 00 2A 00 DA 13 02 03 08 00  // ....&.(.*.......
    D130: 37 00 00 56 00 00 03 09 00 00 02 0D 00 23 21 4B  // 7..V.........#!K
    D140: A5 00 10 44 21 00 02 0D 00 23 22 52 49 3E 0D 42  // ...D!....#"RI>.B
    D150: 00 00 44 C3 05 03 0C 41 04 00 3E 25 41 00 44 C3  // ..D....A..>%A.D.
    D160: 05 3E 25 41 15 44 C3 05 42 39 00 63 07 83 02 63  // .>%A.D..B9.c...c
    D170: 05 FC 00 63 06 FC 00 63 12 2C 02 63 01 5C 00 63  // ...c...c.,.c.\.c
    D180: 00 76 00 5A 5A 5B 4B A5 00 10 44 72 0A 4A A5 CB  // .v.ZZ[K...Dr.J..
    D190: 05 01 49 76 00 07 E5 1F 48 FE 0D E5 1B 48 03 5B  // ..Iv....H....H.[
    D1A0: 4B A5 00 10 44 72 0A 03 0C 41 01 00 66 FF 2D 0D  // K...Dr...A..f.-.
    D1B0: 42 BE 13 3E 0C 41 00 00 44 99 00 2D 0D 42 04 00  // B..>.A..D..-.B..
    D1C0: 43 89 00 03 0C 48 02 00 4A 25 48 4A 01 44 72 0A  // C....H..J%HJ.Dr.
    D1D0: 03 0D 41 01 00 66 FF 2D 0D 42 BE 13 4A 62 47 4A  // ..A..f.-.B..JbGJ
    D1E0: 41 49 CD 00 15 25 41 01 2D 0D 42 04 00 3E 25 41  // AI...%A.-.B..>%A
    D1F0: 80 49 B2 00 43 E2 00 03 0C 48 02 00 54 08 A4 4A  // .I..C....H..T..J
    D200: 51 C8 0D 25 A5 4A 01 51 32 56 08 48 03 25 01 03  // Q..%.J.Q2V.H.%..
    D210: 03 05 00 01 BC FF 00 43 3E 01 4C A5 41 02 44 72  // .......C>.L.A.Dr
    D220: 0A 50 01 43 E2 00 56 20 01 03 05 00 00 F3 FE 01  // .P.C..V ........
    D230: 3D E5 00 05 44 3E 01 03 8D 00 FE 00 43 3E 01 66  // =...D>......C>.f
    D240: 06 03 24 41 28 00 4C 25 41 01 44 72 0A 03 25 01  // ..$A(.L%A.Dr..%.
    D250: 01 03 05 00 00 F4 FB 04 3D E5 00 05 44 3E 01 03  // ........=...D>..
    D260: 8D 00 FB 00 43 3E 01 5B 56 28 01 03 99 01 00 3B  // ....C>.[V(.....;
    D270: 05 00 4C 00 00 04 05 00 F0 05 80 61 57 00 01 04  // ..L........aW...
    D280: 0A 01 00 02 21 01 00 02 E9 01 00 02 05 00 00 4C  // ....!..........L
    D290: 00 00 55 10 01 52 4E 3D 65 01 00 44 84 01 51 C8  // ..U..RN=e..D..Q.
    D2A0: 51 C8 2D 65 01 01 3E 65 01 0C 45 61 01 5B 56 28  // Q.-e..>e..Ea.[V(
    D2B0: 01 3B 05 00 4C 00 00 04 05 00 F2 05 90 40 02 05  // .;..L........@..
    D2C0: 00 00 4C 04 4C 55 10 01 52 4E 3D 65 01 00 44 B3  // ..L.LU..RN=e..D.
    D2D0: 01 2D 65 01 01 3E 65 01 06 45 87 01 5B 56 00 41  // .-e..>e..E..[V.A
    D2E0: 3B 05 04 4C 00 00 03 A3 41 00 3E A5 00 FF 44 06  // ;..L....A.>...D.
    D2F0: 02 09 B2 41 00 0F BA 41 00 03 0A 41 00 3B 05 00  // ...A...A...A.;..
    D300: 4C 00 00 04 05 00 F0 05 80 72 04 02 01 41 56 28  // L........r...AV(
    D310: 01 02 05 00 00 4C 00 00 55 10 01 52 4E 3D 65 01  // .....L..U..RN=e.
    D320: 00 44 06 02 2D 65 01 01 3E 65 01 06 45 E7 01 5B  // .D..-e..>e..E..[
    D330: 02 9A 00 01 02 21 00 01 02 79 00 01 42 22 01 63  // .....!...y..B".c
    D340: 00 15 01 63 01 3D 01 63 02 B8 02 63 03 F0 00 63  // ...c.=.c...c...c
    D350: 04 CD 02 5A 5A 5B 07 25 C9 05 FC 56 30 00 3B 05  // ...ZZ[.%...V0.;.
    D360: 00 4C 00 00 04 05 00 00 02 90 40 02 21 01 00 02  // .L........@.!...
    D370: E9 01 00 02 05 00 00 4C 04 4C 55 10 01 52 4E 3D  // .......L.LU..RN=
    D380: 65 01 00 44 6C 02 51 C8 51 C8 2D A5 00 01 3E A5  // e..Dl.Q.Q.-...>.
    D390: 00 06 45 34 02 5B 3B 05 04 4C 00 00 0A 25 00 3F  // ..E4.[;..L...%.?
    D3A0: 3F 25 00 00 44 82 02 0D 25 C9 05 02 5B 56 00 41  // ?%..D...%...[V.A
    D3B0: 03 21 41 00 09 25 41 0F 15 0D 41 01 66 FF 2D 0D  // .!A..%A...A.f.-.
    D3C0: 42 76 0A 2D 0A 42 41 03 0C 48 00 00 07 A5 00 5C  // Bv.-.BA..H.....\
    D3D0: FB 56 08 48 03 25 01 02 03 05 00 00 02 FF 00 43  // .V.H.%.........C
    D3E0: 3E 01 3E A5 41 20 49 DE 02 03 25 01 04 03 05 00  // >.>.A I...%.....
    D3F0: 00 03 FF 00 43 3E 01 3E A5 41 31 49 DE 02 66 FF  // ....C>.>.A1I..f.
    D400: 2D 0D 42 FA 12 43 F1 02 66 FF 2D 0D 42 FE 11 4B  // -.B..C..f.-.B..K
    D410: A5 00 10 44 F1 02 2D 0D 42 40 00 03 05 41 80 4C  // ...D..-.B@...A.L
    D420: 00 00 3B 02 41 04 04 00 00 00 2D 0D 42 04 00 2D  // ..;.A.....-.B..-
    D430: 05 41 04 00 00 00 3F 05 00 FF FF FF FF 49 F8 02  // .A....?......I..
    D440: 4B A5 00 10 44 5C 05 02 05 01 06 00 00 00 56 00  // K...D\........V.
    D450: 41 66 1A 03 0C 41 00 00 2D 0A 41 42 2D 0D 42 04  // Af...A..-.AB-.B.
    D460: 00 3D 24 01 08 00 44 53 03 2D 0D 42 0C 00 3E 0A  // .=$...DS.-.B..>.
    D470: 42 41 49 37 03 03 0D 41 00 00 43 2C 04 03 0C 41  // BAI7...A..C,...A
    D480: 04 00 3E 0D 41 00 00 44 2C 04 02 0C 01 06 00 03  // ..>.A..D,.......
    D490: 02 46 41 26 05 01 64 00 00 00 03 02 01 40 21 02  // .FA&..d......@!.
    D4A0: 46 01 02 02 01 40 21 02 40 46 21 05 40 00 04 00  // F....@!.@F!.@...
    D4B0: 00 27 05 40 7D 01 00 00 03 02 46 40 20 05 01 00  // .'.@}.....F@ ...
    D4C0: 00 08 00 27 05 40 71 02 00 00 21 05 40 10 00 00  // ...'.@q...!.@...
    D4D0: 00 2D 02 46 40 03 02 41 46 66 06 55 00 01 02 0C  // .-.F@..AFf.U....
    D4E0: 01 04 00 20 05 01 30 02 00 00 3D 0D 01 97 06 47  // ... ..0...=....G
    D4F0: F0 03 1B 05 40 01 3D 0D 01 2F 0D 47 F0 03 1B 05  // ....@.=../.G....
    D500: 40 01 3D 0D 01 5E 1A 47 F0 03 1B 05 40 01 3D 0D  // @.=..^.G....@.=.
    D510: 01 BC 34 47 F0 03 1B 05 40 01 03 02 00 40 3B 05  // ..4G....@....@;.
    D520: E8 4C 00 00 27 02 41 00 04 A2 00 40 3B 05 EC 4C  // .L..'.A....@;..L
    D530: 00 00 15 05 01 09 27 02 00 01 0F 25 40 80 04 A2  // ......'....%@...
    D540: 00 40 3B 05 18 4D 00 00 04 A5 00 00 3B 05 20 4D  // .@;..M......;. M
    D550: 00 00 04 A5 00 02 3B 05 F0 4C 00 00 66 06 03 E4  // ......;..L..f...
    D560: 41 28 00 4C E5 41 01 49 44 04 04 A5 00 00 3B 05  // A(.L.A.ID.....;.
    D570: 1C 4D 00 00 66 06 03 E4 41 28 00 4C E5 41 01 49  // .M..f...A(.L.A.I
    D580: 5C 04 04 A5 00 3C 3B 05 A4 4C 00 00 66 06 03 E4  // \....<;..L..f...
    D590: 41 28 00 4C E5 41 02 44 7F 04 04 A5 00 46 4C E5  // A(.L.A.D.....FL.
    D5A0: 41 10 49 7F 04 04 A5 00 4A 3B 05 20 4D 00 00 66  // A.I.....J;. M..f
    D5B0: 06 03 E4 41 28 00 4C E5 41 20 49 97 04 10 A5 00  // ...A(.L.A I.....
    D5C0: 04 66 06 03 24 41 34 00 3B 05 C4 4C 00 00 04 A2  // .f..$A4.;..L....
    D5D0: 00 41 03 24 41 35 00 3B 05 C8 4C 00 00 04 A2 00  // .A.$A5.;..L.....
    D5E0: 41 03 24 41 39 00 3B 05 CC 4C 00 00 04 A2 00 41  // A.$A9.;..L.....A
    D5F0: 03 24 41 37 00 3B 05 D0 4C 00 00 04 A2 00 41 03  // .$A7.;..L.....A.
    D600: 24 41 36 00 3B 05 D4 4C 00 00 04 A2 00 41 03 24  // $A6.;..L.....A.$
    D610: 41 3A 00 3B 05 D8 4C 00 00 04 A2 00 41 03 24 41  // A:.;..L.....A.$A
    D620: 38 00 3B 05 DC 4C 00 00 04 A2 00 41 3B 05 A8 4C  // 8.;..L.....A;..L
    D630: 00 00 66 1E 03 E4 41 36 01 4C E5 41 02 44 2E 05  // ..f...A6.L.A.D..
    D640: 04 A5 00 67 04 A5 01 89 04 A5 02 AB 04 A5 03 01  // ...g............
    D650: 04 A5 04 23 04 A5 05 45 3B 05 C0 4C 00 00 66 1E  // ...#...E;..L..f.
    D660: 03 E4 41 36 01 4C E5 41 20 44 4B 05 03 E4 41 37  // ..A6.L.A DK...A7
    D670: 01 04 BA 00 41 3B 05 08 4D 00 00 4C E5 41 10 44  // ....A;..M..L.A.D
    D680: 5C 05 04 A5 00 80 03 05 00 80 4C 00 00 02 21 01  // \.........L...!.
    D690: 00 02 E9 01 00 56 00 41 03 0A 41 00 3B 02 41 03  // .....V.A..A.;.A.
    D6A0: 03 41 00 3E 05 41 FF FF FF FF 44 C2 05 3B 05 00  // .A.>.A....D..;..
    D6B0: 4C 00 00 04 05 01 F0 05 80 72 04 02 02 41 02 05  // L........r...A..
    D6C0: 00 04 4C 00 00 55 10 01 52 4E 3D 65 01 00 44 B7  // ..L..U..RN=e..D.
    D6D0: 05 51 C8 51 C8 2D A5 00 01 3E A5 00 07 45 6B 05  // .Q.Q.-...>...Ek.
    D6E0: 5B 2D 0D 00 04 00 56 18 00 43 6B 05 5B 02 0D 00  // [-....V..Ck.[...
    D6F0: 22 21 52 49 3E 0D 42 00 00 44 72 0A 42 39 00 63  // "!RI>.B..Dr.B9.c
    D700: 07 F0 05 63 00 CE 06 63 01 DD 06 63 0F 0A 07 63  // ...c...c...c...c
    D710: 12 EC 06 63 14 FB 06 5A 5A 5B 56 00 41 03 21 41  // ...c...ZZ[V.A.!A
    D720: 00 09 25 41 0F 15 0D 41 01 66 FF 2D 0D 42 76 0A  // ..%A...A.f.-.Bv.
    D730: 2D 0A 42 41 03 0C 48 00 00 07 A5 00 5C FB 56 08  // -.BA..H.....\.V.
    D740: 48 03 01 01 00 02 21 01 00 02 E9 01 00 3B 05 00  // H.....!......;..
    D750: 4C 00 00 04 05 00 A8 50 98 43 55 10 01 02 05 00  // L......P.CU.....
    D760: 00 4C 04 4C 52 4E 3B 05 00 4C 00 00 03 03 40 01  // .L.LRN;..L....@.
    D770: 3D 65 01 00 44 63 06 51 C8 51 C8 2D A5 00 01 02  // =e..Dc.Q.Q.-....
    D780: 02 00 01 3E A5 00 07 45 1B 06 56 00 40 02 02 00  // ...>...E..V.@...
    D790: 01 56 18 00 66 FF 2D 0D 42 82 0A 03 0D 01 C0 01  // .V..f.-.B.......
    D7A0: 03 05 41 80 4C 00 00 3B 02 41 04 04 00 00 00 2D  // ..A.L..;.A.....-
    D7B0: 0D 42 04 00 2D 05 41 04 00 00 00 33 0D 01 04 00  // .B..-.A....3....
    D7C0: 3E 0D 01 00 00 49 7D 06 3E 25 40 00 44 BA 06 3E  // >....I}.>%@.D..>
    D7D0: 25 40 32 49 B0 06 03 25 40 1F 3B 05 30 4E 00 00  // %@2I...%@.;.0N..
    D7E0: 04 22 00 40 3E 65 40 00 44 0E 09 3B 05 38 4E 00  // .".@>e@.D..;.8N.
    D7F0: 00 04 6A 00 40 43 0E 09 66 FF 2D 0D 42 82 0F 03  // ..j.@C..f.-.B...
    D800: 0D 40 64 01 43 16 07 66 FF 2D 0D 42 2A 0F 03 0D  // .@d.C..f.-.B*...
    D810: 40 58 00 43 16 07 66 FF 2D 0D 42 E6 10 03 0D 40  // @X.C..f.-.B....@
    D820: 04 01 43 16 07 66 FF 2D 0D 42 EA 11 03 0D 40 14  // ..C..f.-.B....@.
    D830: 00 43 16 07 66 FF 2D 0D 42 42 0C 03 0D 40 E8 02  // .C..f.-.BB...@..
    D840: 03 05 41 80 4C 00 00 3B 02 41 04 04 00 00 00 2D  // ..A.L..;.A.....-
    D850: 0D 42 04 00 2D 05 41 04 00 00 00 33 0D 40 04 00  // .B..-.A....3.@..
    D860: 3E 0D 40 00 00 49 1D 07 3D E5 00 0F 49 0E 09 03  // >.@..I..=...I...
    D870: 05 41 00 00 64 00 03 05 40 00 00 22 00 4B A5 00  // .A..d...@..".K..
    D880: 01 44 68 07 03 05 41 00 00 23 00 03 05 40 00 00  // .Dh...A..#...@..
    D890: 1B 00 3B 05 BC 4D 00 00 04 02 00 41 3B 05 C4 4D  // ..;..M.....A;..M
    D8A0: 00 00 04 02 00 40 03 05 41 80 00 00 00 4B A5 00  // .....@..A....K..
    D8B0: 01 44 91 07 03 05 41 00 00 00 00 3B 05 18 4E 00  // .D....A....;..N.
    D8C0: 00 0F 03 41 00 0F 0D 41 01 02 03 8A 41 41 0F 0D  // ...A...A....AA..
    D8D0: 41 00 08 03 0A 40 41 0F 0D 40 20 00 04 0A 00 41  // A....@A..@ ....A
    D8E0: 04 1A 09 41 04 0A 0B 40 3D 65 01 01 44 F0 07 04  // ...A...@=e..D...
    D8F0: 0A 02 41 04 1A 0D 41 04 0A 0F 40 3D 65 01 02 44  // ..A...A...@=e..D
    D900: F0 07 04 0A 04 41 04 0A 06 41 04 1A 11 41 04 0A  // .....A...A...A..
    D910: 13 40 04 1A 15 41 04 0A 17 40 03 05 40 00 1B B7  // .@...A...@..@...
    D920: 00 27 02 40 00 27 05 40 64 00 00 00 03 02 01 40  // .'.@.'.@d......@
    D930: 21 02 01 00 21 05 40 01 00 00 00 03 8A 00 01 03  // !...!.@.........
    D940: 02 01 40 21 05 40 F5 28 00 00 03 02 41 40 03 02  // ..@!.@.(....A@..
    D950: 40 01 03 02 01 41 21 05 40 4C 00 00 00 27 05 40  // @....A!.@L...'.@
    D960: 64 00 00 00 2D 02 40 01 2D 05 40 0C 00 00 00 27  // d...-.@.-.@....'
    D970: 05 40 19 00 00 00 03 05 01 01 40 00 00 3B 05 9C  // .@........@..;..
    D980: 4E 00 00 04 02 00 01 3B 05 A4 4E 00 00 04 02 00  // N......;..N.....
    D990: 40 3B 05 7C 4E 00 00 1B 05 40 14 15 05 40 10 2D  // @;.|N....@...@.-
    D9A0: 05 40 00 00 00 00 04 02 00 40 56 00 01 03 1A 01  // .@.......@V.....
    D9B0: 00 3B 05 B4 4E 00 00 04 02 00 01 21 8A 00 00 27  // .;..N......!...'
    D9C0: 05 40 C4 09 00 00 03 02 01 40 2D 05 01 01 00 00  // .@.......@-.....
    D9D0: 00 3E 05 41 00 00 00 00 49 BF 08 33 05 01 01 00  // .>.A....I..3....
    D9E0: 00 00 15 05 01 10 43 F3 08 15 05 01 10 03 05 40  // ......C........@
    D9F0: C4 09 00 00 33 02 40 41 21 05 40 0A 00 00 00 27  // ....3.@A!.@....'
    DA00: 05 40 C4 09 00 00 15 05 40 1C 2D 02 01 40 15 05  // .@......@.-..@..
    DA10: 41 10 27 05 41 C4 09 00 00 03 0A 01 40 3B 05 18  // A.'.A.......@;..
    DA20: 4F 00 00 04 02 00 01 56 00 01 03 29 01 01 3B 05  // O......V...)..;.
    DA30: 60 4F 00 00 2E 02 00 01 03 99 01 00 03 05 00 80  // `O..............
    DA40: 4C 00 00 02 21 01 00 02 E9 01 00 3B 02 00 03 03  // L...!......;....
    DA50: 41 00 03 03 40 01 3E 05 41 FF FF FF FF 44 50 0A  // A...@.>.A....DP.
    DA60: 3E E5 41 00 44 47 09 3E E5 41 01 44 47 09 43 CF  // >.A.DG.>.A.DG.C.
    DA70: 09 3B 02 00 03 03 41 00 5E 05 41 FF FF 0F 00 00  // .;....A.^.A.....
    DA80: 00 90 43 3B 05 00 4C 00 00 04 02 00 41 55 10 01  // ..C;..L.....AU..
    DA90: 02 05 00 00 4C 04 4C 52 4E 3B 05 00 4C 00 00 03  // ....L.LRN;..L...
    DAA0: 03 40 01 3D 65 01 00 44 90 09 51 C8 51 C8 2D 25  // .@.=e..D..Q.Q.-%
    DAB0: 01 01 3E 25 01 07 45 47 09 5B 3B 02 00 03 03 41  // ..>%..EG.[;....A
    DAC0: 00 3E E5 41 00 44 B8 09 03 03 41 01 2D 05 41 80  // .>.A.D....A.-.A.
    DAD0: 4C 00 00 3B 02 41 04 02 00 40 2D 0D 00 08 00 43  // L..;.A...@-....C
    DAE0: 21 09 0F 05 41 00 00 80 83 09 03 40 01 0F 03 40  // !...A......@...@
    DAF0: 02 2D 0D 00 04 00 43 16 0A 3E 8D 41 FE FF 49 16  // .-....C..>.A..I.
    DB00: 0A 3E 0D 41 64 00 45 FF 09 27 0D 41 64 00 03 0A  // .>.Ad.E..'.Ad...
    DB10: 41 40 50 01 33 0D 41 01 00 3E 0D 41 00 00 49 E8  // A@P.3.A..>.A..I.
    DB20: 09 2D 0D 00 04 00 43 21 09 51 0A 33 0D 41 01 00  // .-....C!.Q.3.A..
    DB30: 3E 0D 41 00 00 49 FF 09 2D 0D 00 04 00 43 21 09  // >.A..I..-....C!.
    DB40: 3B 05 00 4C 00 00 04 02 00 41 04 02 01 40 02 05  // ;..L.....A...@..
    DB50: 00 00 4C 00 00 55 10 01 52 4E 3D 65 01 00 44 45  // ..L..U..RN=e..DE
    DB60: 0A 51 C8 2D A5 00 01 3E A5 00 07 45 24 0A 5B 2D  // .Q.-...>...E$.[-
    DB70: 0D 00 08 00 56 18 00 43 21 09 3E E5 01 12 49 72  // ....V..C!.>...Ir
    DB80: 0A 3B 05 3C 4D 00 00 03 03 41 00 07 25 C9 05 FC  // .;.<M....A..%...
    DB90: 3E 25 41 00 44 72 0A 0D 25 C9 05 02 5B 7A 64 09  // >%A.Dr..%...[zd.
    DBA0: 00 00 1C 00 38 00 54 00 70 00 8C 00 08 80 88 83  // ....8.T.p.......
    DBB0: 7F 0F 00 00 00 80 88 83 10 00 00 00 10 05 80 50  // ...............P
    DBC0: E4 00 00 00 11 05 80 50 00 00 00 00 82 05 80 83  // .......P........
    DBD0: 01 00 00 00 A1 05 80 83 F0 00 00 00 18 80 88 83  // ................
    DBE0: 10 01 00 00 80 80 88 83 01 00 00 00 70 80 88 83  // ............p...
    DBF0: 01 00 00 00 30 80 88 83 03 00 00 00 20 80 88 83  // ....0....... ...
    DC00: 01 00 00 00 08 10 88 83 00 00 00 10 04 10 88 83  // ................
    DC10: 10 00 23 00 08 10 88 83 00 00 1B 10 04 11 88 83  // ..#.............
    DC20: 00 00 00 00 00 04 88 83 01 00 00 00 04 00 88 83  // ................
    DC30: 00 06 00 00 08 00 08 00 F4 FF FF FF 08 20 00 00  // ............. ..
    DC40: 04 01 88 83 00 06 00 00 08 01 08 00 F4 FF FF FF  // ................
    DC50: 08 20 00 00 04 02 88 83 00 06 00 00 08 02 08 00  // . ..............
    DC60: F4 FF FF FF 08 20 00 00 04 03 88 83 00 06 00 00  // ..... ..........
    DC70: 08 03 08 00 F4 FF FF FF 08 20 00 00 24 30 88 83  // ......... ..$0..
    DC80: 03 04 06 00 20 30 88 83 85 6F 07 29 38 30 88 83  // .... 0...o.)80..
    DC90: 00 00 00 20 40 30 08 00 FE FF EF FF 01 00 00 00  // ... @0..........
    DCA0: 00 30 88 83 01 00 00 00 00 50 88 83 00 00 00 00  // .0.......P......
    DCB0: 50 50 88 83 01 01 01 01 A4 50 08 00 FE FF FF FF  // PP.......P......
    DCC0: 01 00 00 00 14 05 00 00 FE FF FF FF 00 00 00 00  // ................
    DCD0: 20 05 80 83 EE 02 00 00 1C 05 80 83 D0 07 00 00  //  ...............
    DCE0: 18 05 80 83 00 00 00 00 13 05 80 50 00 00 00 00  // ...........P....
    DCF0: 14 05 00 00 F9 FF FF FF 06 00 00 00 38 70 88 83  // ............8p..
    DD00: 00 01 00 00 30 70 08 00 FF F0 FF FF 00 04 00 00  // ....0p..........
    DD10: 30 70 08 00 FF FF FF FD 00 00 00 02 08 70 08 00  // 0p...........p..
    DD20: BF FF FF FF 40 00 00 00 14 05 00 00 FE FF FF FF  // ....@...........
    DD30: 01 00 00 00 30 70 08 00 FE FF FF FF 00 00 00 00  // ....0p..........
    DD40: F4 01 FE FF 14 70 88 83 02 00 11 00 A8 50 08 00  // .....p.......P..
    DD50: FF FF FE FF 00 00 00 00 88 50 88 83 1F 00 00 00  // .........P......
    DD60: 74 50 88 83 02 1B 00 00 FF FF FF FF 08 80 88 83  // tP..............
    DD70: 7F 0F 00 00 00 80 88 83 10 00 00 00 18 80 08 00  // ................
    DD80: CF FF FF FF 10 00 00 00 24 30 88 83 03 04 06 00  // ........$0......
    DD90: 38 30 88 83 00 00 00 20 00 30 88 83 00 00 00 00  // 80..... .0......
    DDA0: 00 06 80 50 02 00 00 00 04 00 08 00 DF FF FF FF  // ...P............
    DDB0: 00 00 00 00 04 00 08 00 FF F7 FF FF 00 00 00 00  // ................
    DDC0: 04 01 08 00 DF FF FF FF 00 00 00 00 04 01 08 00  // ................
    DDD0: FF F7 FF FF 00 00 00 00 04 02 08 00 DF FF FF FF  // ................
    DDE0: 00 00 00 00 04 02 08 00 FF F7 FF FF 00 00 00 00  // ................
    DDF0: 04 03 08 00 DF FF FF FF 00 00 00 00 04 03 08 00  // ................
    DE00: FF F7 FF FF 00 00 00 00 04 00 08 00 FE FF FF FF  // ................
    DE10: 00 00 00 00 04 01 08 00 FE FF FF FF 00 00 00 00  // ................
    DE20: 04 02 08 00 FE FF FF FF 00 00 00 00 04 03 08 00  // ................
    DE30: FE FF FF FF 00 00 00 00 08 00 08 00 FF FF FF FF  // ................
    DE40: 00 20 00 00 08 01 08 00 FF FF FF FF 00 20 00 00  // . ........... ..
    DE50: 08 02 08 00 FF FF FF FF 00 20 00 00 08 03 08 00  // ......... ......
    DE60: FF FF FF FF 00 20 00 00 18 80 08 00 FF FC FF FF  // ..... ..........
    DE70: 00 01 00 00 04 11 88 83 00 00 00 00 04 10 08 00  // ................
    DE80: FF FF 00 FC 00 00 00 00 04 80 88 83 00 00 00 00  // ................
    DE90: F4 01 FE FF 18 80 08 00 FF F7 FF FF 00 08 00 00  // ................
    DEA0: 01 00 FE FF 04 10 88 83 00 00 00 00 08 10 88 83  // ................
    DEB0: 00 00 00 00 04 11 88 83 0B 00 00 00 0A 00 FE FF  // ................
    DEC0: 18 80 08 00 FF FC FF FF 04 02 00 00 0A 00 FE FF  // ................
    DED0: 08 00 08 00 FF DF FF FF 00 00 00 00 08 01 08 00  // ................
    DEE0: FF DF FF FF 00 00 00 00 08 02 08 00 FF DF FF FF  // ................
    DEF0: 00 00 00 00 08 03 08 00 FF DF FF FF 00 00 00 00  // ................
    DF00: 04 00 88 83 00 06 00 00 04 01 88 83 00 06 00 00  // ................
    DF10: 04 02 88 83 00 06 00 00 04 03 88 83 00 06 00 00  // ................
    DF20: 03 00 FE FF 04 00 88 83 00 06 00 00 04 00 88 83  // ................
    DF30: 00 06 00 00 04 01 88 83 00 06 00 00 04 01 88 83  // ................
    DF40: 00 06 00 00 04 02 88 83 00 06 00 00 04 02 88 83  // ................
    DF50: 00 06 00 00 04 03 88 83 00 06 00 00 04 03 88 83  // ................
    DF60: 00 06 00 00 58 30 88 83 00 00 00 00 34 30 88 83  // ....X0......40..
    DF70: 00 00 08 00 54 30 88 83 00 00 00 00 54 30 88 83  // ....T0......T0..
    DF80: 01 00 00 00 04 30 88 83 00 40 00 00 18 30 88 83  // .....0...@...0..
    DF90: 00 00 00 00 14 30 88 83 10 00 00 00 1C 30 88 83  // .....0.......0..
    DFA0: 00 00 00 00 14 00 FE FF 38 30 08 00 FF FF FF EF  // ........80......
    DFB0: 00 00 00 10 01 00 FE FF 38 30 08 00 FF FF FF EF  // ........80......
    DFC0: 00 00 00 00 01 00 FE FF 38 30 08 00 FF FF FF DF  // ........80......
    DFD0: 00 00 00 00 2C 01 FE FF 00 30 88 83 01 00 00 00  // ....,....0......
    DFE0: 24 30 08 00 FD FF FF FF 00 00 00 00 05 00 FE FF  // $0..............
    DFF0: 24 30 08 00 FE FF FF FF 00 00 00 00 40 00 FE FF  // $0..........@...
    E000: 58 30 88 83 00 00 00 00 34 30 08 00 FF FF FC FF  // X0......40......
    E010: 00 00 01 00 54 30 08 00 FD FF FF FF 02 00 00 00  // ....T0..........
    E020: 05 00 FE FF 24 30 08 00 FF FF F9 FC 00 00 00 01  // ....$0..........
    E030: 54 30 08 00 FE FF FF FF 00 00 00 00 18 80 08 00  // T0..............
    E040: CF FF FF FF 30 00 00 00 01 01 80 83 80 00 00 00  // ....0...........
    E050: FF FF FF FF 08 80 88 83 7F 0F 00 00 00 80 88 83  // ................
    E060: 10 00 00 00 50 50 08 00 FE FF FF FF 00 00 00 00  // ....PP..........
    E070: 0A 00 FE FF A4 50 08 00 FE FF FF FF 00 00 00 00  // .....P..........
    E080: 64 00 FE FF 50 50 88 83 00 00 00 00 64 00 FE FF  // d...PP......d...
    E090: 00 50 88 83 01 00 00 00 08 80 88 83 53 0F 00 00  // .P..........S...
    E0A0: 00 80 88 83 00 00 00 00 FF FF FF FF 08 80 88 83  // ................
    E0B0: 7F 0F 00 00 00 80 88 83 13 00 00 00 18 80 08 00  // ................
    E0C0: FF FF FF FF 00 01 00 00 00 50 88 83 00 00 00 00  // .........P......
    E0D0: 50 50 88 83 01 01 01 01 A4 50 08 00 FE FF FF FF  // PP.......P......
    E0E0: 01 00 00 00 18 80 08 00 DF FF FF FF 00 00 00 00  // ................
    E0F0: 24 30 08 00 FF FF FF FC 03 04 06 00 38 30 88 83  // $0..........80..
    E100: 00 00 00 20 00 06 80 83 02 00 00 00 04 00 08 00  // ... ............
    E110: DF FF FF FF 00 00 00 00 04 00 08 00 FF F7 FF FF  // ................
    E120: 00 00 00 00 04 01 08 00 DF FF FF FF 00 00 00 00  // ................
    E130: 04 01 08 00 FF F7 FF FF 00 00 00 00 04 02 08 00  // ................
    E140: DF FF FF FF 00 00 00 00 04 02 08 00 FF F7 FF FF  // ................
    E150: 00 00 00 00 04 03 08 00 DF FF FF FF 00 00 00 00  // ................
    E160: 04 03 08 00 FF F7 FF FF 00 00 00 00 04 00 08 00  // ................
    E170: FE FF FF FF 00 00 00 00 04 01 08 00 FE FF FF FF  // ................
    E180: 00 00 00 00 04 02 08 00 FE FF FF FF 00 00 00 00  // ................
    E190: 04 03 08 00 FE FF FF FF 00 00 00 00 08 00 08 00  // ................
    E1A0: FF FF FF FF 00 20 00 00 08 01 08 00 FF FF FF FF  // ..... ..........
    E1B0: 00 20 00 00 08 02 08 00 FF FF FF FF 00 20 00 00  // . ........... ..
    E1C0: 08 03 08 00 FF FF FF FF 00 20 00 00 18 80 08 00  // ......... ......
    E1D0: FF FD FF FF 00 00 00 00 04 11 88 83 00 00 00 00  // ................
    E1E0: 04 10 88 83 00 00 00 00 08 80 88 83 53 0F 00 00  // ............S...
    E1F0: 00 80 88 83 00 00 00 00 18 80 08 00 FF F7 FF FF  // ................
    E200: 00 00 00 00 04 80 88 83 01 00 00 00 FF FF FF FF  // ................
    E210: 00 50 08 01 C4 00 00 00 28 50 08 01 CC 00 00 00  // .P......(P......
    E220: 40 50 08 01 D4 00 00 00 58 50 08 01 DC 00 00 00  // @P......XP......
    E230: 5C 50 08 01 E4 00 00 00 50 50 08 01 EC 00 00 00  // \P......PP......
    E240: 04 80 08 01 F4 00 00 00 A4 50 08 01 FC 00 00 00  // .........P......
    E250: 04 80 88 83 00 00 00 00 01 00 FE FF 00 50 88 83  // .............P..
    E260: 01 00 00 00 28 50 08 00 FC FF FF FF 00 00 00 00  // ....(P..........
    E270: 40 50 88 83 00 00 00 00 58 50 88 83 01 00 00 00  // @P......XP......
    E280: 5C 50 88 83 00 00 07 00 50 50 08 00 FE FF FF FF  // \P......PP......
    E290: 00 00 00 00 0A 00 FE FF A4 50 08 00 FE FF FF FF  // .........P......
    E2A0: 00 00 00 00 F4 01 FE FF 50 50 88 83 00 00 00 00  // ........PP......
    E2B0: 40 50 88 83 E6 01 00 00 14 00 FE FF 5C 50 88 83  // @P..........\P..
    E2C0: 00 01 07 00 0A 00 FE FF 60 50 08 01 BC 00 00 00  // ........`P......
    E2D0: 00 50 88 83 00 00 00 00 28 50 88 83 00 00 00 00  // .P......(P......
    E2E0: 40 50 88 83 00 00 00 00 58 50 88 83 00 00 00 00  // @P......XP......
    E2F0: 5C 50 88 83 00 00 00 00 50 50 88 83 00 00 00 00  // \P......PP......
    E300: 04 80 88 83 00 00 00 00 A4 50 88 83 00 00 00 00  // .........P......
    E310: FF FF FF FF 30 70 08 00 FE FF FF FF 00 00 00 00  // ....0p..........
    E320: F4 01 FE FF FF FF FF FF 00 05 3D 00 00 1F 01 00  // ..........=.....
    E330: 00 BA 00 00 00 BB 08 00 00 B1 4B 00 01 73 69 00  // ..........K..si.
    E340: 01 9F 26 00 00 19 33 00 00 89 39 00 01 9E 05 00  // ..&...3...9.....
    E350: 01 CB 80 00 00 16 44 00 00 F1 20 00 00 DC 00 00  // ......D... .....
    E360: 00 DD 00 00 FF FF FF FF 00 05 3D 00 00 1F 03 00  // ..........=.....
    E370: 00 BA 00 00 00 BB 08 00 00 B1 4B 00 01 73 69 00  // ..........K..si.
    E380: 01 9F 24 00 00 19 33 00 00 89 39 00 00 F8 42 00  // ..$...3...9...B.
    E390: 00 F9 01 00 00 FA 23 00 00 FB 45 00 00 FC 67 00  // ......#...E...g.
    E3A0: 00 FD 89 00 00 FE AB 00 00 1D 25 00 01 C3 07 00  // ..........%.....
    E3B0: 01 C2 5A 00 01 C4 00 00 01 C0 07 00 01 C1 5A 00  // ..Z...........Z.
    E3C0: 01 B1 00 00 01 BF 7D 00 01 B5 63 00 01 CB 80 00  // ......}...c.....
    E3D0: 01 B3 00 00 01 B2 00 00 00 9F 10 00 01 83 14 00  // ................
    E3E0: 00 A7 C2 00 01 71 12 00 01 82 5D 00 01 89 24 00  // .....q....]...$.
    E3F0: 01 BE 01 00 00 8A 53 00 00 0A 01 00 01 D4 10 00  // ......S.........
    E400: 00 F3 40 00 00 F4 00 00 01 B4 00 00 00 DC 00 00  // ..@.............
    E410: 00 DD 00 00 01 91 20 00 00 D1 06 00 00 D6 01 00  // ...... .........
    E420: FF FF FF FF 00 05 3D 00 00 1F 03 00 00 BA 00 00  // ......=.........
    E430: 00 BB 08 00 00 B1 4B 00 01 73 69 00 01 9F 24 00  // ......K..si...$.
    E440: 00 19 33 00 00 89 39 00 00 F8 42 00 00 F9 01 00  // ..3...9...B.....
    E450: 00 FA 23 00 00 FB 45 00 00 FC 67 00 00 FD 89 00  // ..#...E...g.....
    E460: 00 FE AB 00 00 1D 25 00 01 C3 07 00 01 C2 5A 00  // ......%.......Z.
    E470: 01 C4 00 00 01 C0 07 00 01 C1 5A 00 01 B1 00 00  // ..........Z.....
    E480: 01 BF 7D 00 01 B5 63 00 01 CB 80 00 01 B3 00 00  // ..}...c.........
    E490: 01 B2 00 00 00 9F 10 00 01 83 14 00 00 A7 C2 00  // ................
    E4A0: 01 71 12 00 01 82 5D 00 01 89 28 00 01 BE 01 00  // .q....]...(.....
    E4B0: 00 8A 53 00 00 0A 01 00 01 D4 10 00 00 F3 40 00  // ..S...........@.
    E4C0: 00 F4 00 00 01 B4 00 00 00 DC 00 00 00 DD 00 00  // ................
    E4D0: 01 91 20 00 00 D1 06 00 00 D6 01 00 01 D2 08 00  // .. .............
    E4E0: 01 D3 80 00 FF FF FF FF 1E 21 00 00 1E 22 00 01  // .........!..."..
    E4F0: 20 21 00 02 20 22 00 03 21 21 00 04 21 22 00 05  //  !.. "..!!..!"..
    E500: 25 21 00 0A 21 02 01 01 00 08 37 00 00 0D 25 F4  // %!..!.....7...%.
    E510: 16 08 07 25 62 18 FE 56 00 41 03 39 41 01 09 25  // ...%b..V.A.9A..%
    E520: 41 0F 03 0A 40 42 66 FF 2D 0D 42 11 02 15 25 41  // A...@Bf.-.B...%A
    E530: 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00 41 07  // .-.BA..A......A.
    E540: A5 01 00 FE 54 08 01 00 01 0C FB 16 02 00 03 0A  // ....T...........
    E550: 42 40 03 05 40 C0 5D 00 00 56 00 41 03 21 41 00  // B@..@.]..V.A.!A.
    E560: 27 02 40 41 01 8A F7 16 40 01 25 F7 16 02 0D 25  // '.@A....@.%....%
    E570: F5 16 02 01 A9 F9 16 01 4B 25 01 01 49 7F 00 54  // ........K%..I..T
    E580: 30 F9 16 01 0D F9 16 00 31 2B A5 F9 16 01 4B 25  // 0.......1+....K%
    E590: 01 02 44 96 00 2B A5 F9 16 01 56 00 41 03 71 41  // ..D..+....V.A.qA
    E5A0: 01 0F E5 41 80 01 02 FA 16 41 03 69 41 00 2D A5  // ...A.....A.iA.-.
    E5B0: 41 01 01 02 FA 16 41 4B 25 01 02 44 C6 00 56 28  // A.....AK%..D..V(
    E5C0: 41 2D A5 41 01 01 02 FA 16 41 4B 25 01 01 44 E7  // A-.A.....AK%..D.
    E5D0: 00 03 71 41 00 2D A5 41 01 01 02 FA 16 41 03 79  // ..qA.-.A.....A.y
    E5E0: 41 00 2D A5 41 01 01 02 FA 16 41 0D 25 F4 16 01  // A.-.A.....A.%...
    E5F0: 03 A5 41 01 43 BA 01 03 29 40 01 03 65 40 01 03  // ..A.C...)@..e@..
    E600: 99 40 00 56 00 41 03 71 41 01 0F 65 41 01 0F E5  // .@.V.A.qA..eA...
    E610: 41 80 01 02 FA 16 41 01 A5 F9 16 04 3D 65 01 04  // A.....A.....=e..
    E620: 47 28 01 01 0D F9 16 01 13 43 57 01 01 A2 F9 16  // G(.......CW.....
    E630: 40 01 0D F9 16 01 31 43 57 01 07 65 F9 16 EF 01  // @.....1CW..e....
    E640: A5 F9 16 03 3E 25 40 04 46 57 01 01 A2 F9 16 40  // ....>%@.FW.....@
    E650: 31 A5 F9 16 01 5C 65 F9 16 FD 20 0D 25 F4 16 01  // 1....\e... .%...
    E660: 03 A5 41 00 43 BA 01 03 05 41 01 00 00 80 03 AA  // ..A.C....A......
    E670: 41 40 01 02 FA 16 41 3D 65 01 01 49 82 01 02 A8  // A@....A=e..I....
    E680: 00 FA 16 43 F9 01 56 00 41 03 1A 41 40 3B 02 41  // ...C..V.A..A@;.A
    E690: 03 28 41 FA 16 03 68 41 FA 16 03 A8 41 FA 16 03  // .(A...hA....A...
    E6A0: E8 41 FA 16 04 02 00 41 56 28 40 2D 8D 40 04 00  // .A.....AV(@-.@..
    E6B0: 3E 25 40 04 47 F9 01 33 25 40 04 43 36 01 02 65  // >%@.G..3%@.C6..e
    E6C0: 00 02 03 0D 41 64 00 33 0D 41 01 00 3E 0D 41 00  // ....Ad.3.A..>.A.
    E6D0: 00 44 F9 01 51 64 4A 25 F6 16 10 44 C3 01 4A 65  // .D..QdJ%...D..Je
    E6E0: F6 16 06 49 F9 01 02 65 00 01 0D 25 F5 16 02 3E  // ...I...e...%...>
    E6F0: A5 41 00 44 63 01 4B 25 01 01 44 F3 00 0D 25 F5  // .A.Dc.K%..D...%.
    E700: 16 02 01 25 F4 16 02 51 01 54 00 F4 16 54 00 FB  // ...%...Q.T...T..
    E710: 16 5B 7A 10 00 68 48 01 00 6C 48 03 02 70 48 05  // .[z..hH..lH..pH.
    E720: 04 98 48 29 28 00 6A 00 02 02 00 04 37 00 00 3D  // ..H)(.j.....7..=
    E730: 65 00 01 44 54 00 55 30 00 3D 25 00 06 46 50 00  // e..DT.U0.=%..FP.
    E740: 32 25 00 01 20 25 00 08 56 08 48 03 22 48 40 0D  // 2%.. %..V.H."H@.
    E750: A5 99 18 01 02 A0 00 98 18 08 A5 00 03 4A 25 98  // .............J%.
    E760: 18 02 44 4A 00 5C 0D 99 18 FF FE 01 00 43 50 00  // ..DJ.\.......CP.
    E770: 0D 0D 99 18 01 01 3A 00 00 5B 0D 65 CF 05 08 01  // ......:..[.e....
    E780: 05 C8 01 01 00 00 00 3C 25 D8 01 00 44 61 00 5B  // .......<%...Da.[
    E790: D3 00 01 04 00 08 08 05 00 FF FF FF 00 66 1E 03  // .............f..
    E7A0: 04 46 08 00 03 05 40 38 18 00 00 3D 05 00 00 00  // .F....@8...=....
    E7B0: 00 00 44 5D 00 21 05 46 64 00 00 00 2D 01 40 00  // ..D].!.Fd...-.@.
    E7C0: 33 05 40 01 00 00 00 27 01 40 00 3E 05 40 38 18  // 3.@....'.@.>.@8.
    E7D0: 00 00 45 4C 00 03 05 40 38 18 00 00 3E 05 40 C8  // ..EL...@8...>.@.
    E7E0: 00 00 00 46 5D 00 03 05 40 C8 00 00 00 66 FF 2D  // ...F]...@....f.-
    E7F0: 0D 42 BB 00 3E 0C 40 02 00 47 74 00 2D 0D 42 08  // .B..>.@..Gt.-.B.
    E800: 00 43 64 00 33 0C 40 00 00 2D 0C 40 06 00 33 0D  // .Cd.3.@..-.@..3.
    E810: 40 01 00 27 0C 40 06 00 2D 0C 40 04 00 02 E2 00  // @..'.@..-.@.....
    E820: 40 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00  // @3.@..!.@..-.@..
    E830: 03 02 41 40 21 05 46 64 00 00 00 27 02 40 41 02  // ..A@!.Fd...'.@A.
    E840: 0A 00 40 02 B2 00 40 5B 7A 18 00 C8 00 40 06 08  // ..@...@[z....@..
    E850: 00 19 00 40 06 80 0C 40 00 32 00 80 0C 38 18 60  // ...@...@.2...8.`
    E860: 00 64 00 00 74 00 01 03 00 08 37 00 00 3A 2A 00  // .d..t.....7..:*.
    E870: 4B A5 00 0C 44 20 00 3A 54 00 4B A5 00 04 49 20  // K...D .:T.K...I 
    E880: 00 3A 00 00 3D E5 00 01 44 3D 00 07 65 04 17 EF  // .:..=...D=..e...
    E890: 3C 0D 05 17 00 00 49 70 00 07 A5 05 17 FC 43 70  // <.....Ip......Cp
    E8A0: 00 4A 65 04 17 10 49 70 00 07 25 07 17 F7 5C A5  // .Je...Ip..%...\.
    E8B0: 05 17 FC 01 4B A5 00 01 49 5B 00 0E 65 01 20 0E  // ....K...I[..e. .
    E8C0: 65 01 10 01 09 03 17 00 01 01 04 17 01 50 01 0D  // e............P..
    E8D0: 25 07 17 08 3A 00 00 5B BD 00 02 01 00 04 03 09  // %...:..[........
    E8E0: 40 00 02 0D 00 00 FF 66 16 03 0A 41 40 1B 0D 41  // @......f...A@..A
    E8F0: 0C 3E 25 41 02 44 2F 00 3E 25 41 03 49 B9 00 2D  // .>%A.D/.>%A.I..-
    E900: 0C 42 06 00 43 34 00 2D 0C 42 0A 00 03 24 41 00  // .B..C4.-.B...$A.
    E910: 00 3E 25 41 00 44 B9 00 3E 0C 40 04 00 44 54 00  // .>%A.D..>.@..DT.
    E920: 2D 0D 42 08 00 33 25 41 01 43 39 00 03 0C 40 06  // -.B..3%A.C9...@.
    E930: 00 03 0C 41 08 00 66 16 2D 0A 40 42 3E 0D 41 00  // ...A..f.-.@B>.A.
    E940: 00 44 A7 00 2D 0A 42 41 56 00 41 03 24 41 00 00  // .D..-.BAV.A.$A..
    E950: 03 A4 41 01 00 3E 25 41 FF 44 A7 00 3E 25 41 01  // ..A..>%A.D..>%A.
    E960: 49 90 00 02 24 00 02 00 3E 25 41 02 49 A0 00 02  // I...$...>%A.I...
    E970: 64 00 02 00 32 65 00 01 2D 1A 42 41 43 73 00 03  // d...2e..-.BACs..
    E980: 0A 42 40 03 0C 41 01 00 3E 0D 41 00 00 44 B9 00  // .B@..A..>.A..D..
    E990: 5B 56 08 42 5B 00 41 00 01 03 00 08 37 00 00 03  // [V.B[.A.....7...
    E9A0: 01 41 00 55 18 00 55 08 01 3E E5 41 03 44 21 00  // .A.U..U..>.A.D!.
    E9B0: 3E E5 41 02 49 40 00 3D 0D 00 30 75 45 40 00 03  // >.A.I@.=..0uE@..
    E9C0: 05 40 C0 D4 01 00 27 01 40 00 15 25 40 01 02 62  // .@....'.@..%@..b
    E9D0: 01 40 1A 05 00 01 5B 00 34 00 01 03 00 04 37 00  // .@....[.4.....7.
    E9E0: 00 3D 0D 00 01 00 49 33 00 54 00 D8 01 56 00 41  // .=....I3.T...V.A
    E9F0: 03 19 41 00 15 05 41 02 01 02 E8 01 41 01 0D C8  // ..A...A.....A...
    EA00: 01 02 00 3C 25 D8 01 00 44 2B 00 5B 75 01 01 04  // ...<%...D+.[u...
    EA10: 00 04 37 00 00 03 01 46 01 02 31 01 00 1A 25 01  // ..7....F..1...%.
    EA20: 04 03 21 41 01 0E 25 01 60 52 14 02 02 01 46 42  // ..!A..%.`R....FB
    EA30: 39 00 63 0F 4F 00 63 08 24 01 63 09 0D 01 63 0A  // 9.c.O.c.$.c...c.
    EA40: 14 01 63 13 1C 01 63 0B 2C 01 63 0C 34 01 63 0D  // ..c...c.,.c.4.c.
    EA50: 44 01 63 10 5D 01 5A 5A 43 09 01 54 00 72 4A 01  // D.c.].ZZC..T.rJ.
    EA60: 0D 03 4A 1F 00 3D 25 01 00 44 6E 00 3D 25 01 02  // ..J..=%..Dn.=%..
    EA70: 44 F7 00 3D 25 01 05 49 FF 00 54 08 A1 4A 3D A5  // D..=%..I..T..J=.
    EA80: 01 00 49 7D 00 02 A5 01 02 32 A5 01 01 01 F1 A1  // ..I}.....2......
    EA90: 4A 01 4A 25 A4 4A 01 49 DB 00 66 FF 2D 0D 42 6D  // J.J%.J.I..f.-.Bm
    EAA0: 01 03 31 41 00 09 05 41 03 00 00 00 2D 0A 42 41  // ..1A...A....-.BA
    EAB0: 2D 0A 42 41 03 0C 41 00 00 07 65 A8 4A FE 01 05  // -.BA..A...e.J...
    EAC0: A9 4A 00 80 00 00 56 00 40 03 09 40 00 21 05 40  // .J....V.@..@.!.@
    EAD0: 00 80 00 00 27 02 40 41 01 02 AA 4A 40 0D E5 AB  // ....'.@A...J@...
    EAE0: 4A 10 0D 65 00 4A 04 02 20 01 00 4A 08 25 01 07  // J..e.J.. ..J.%..
    EAF0: 0E 25 01 00 52 14 15 2D 46 04 01 AA 9C 1B 46 3A  // .%..R..-F.....F:
    EB00: 00 00 5B 01 05 72 4A 00 00 00 00 07 E5 00 4A 2F  // ..[..rJ.......J/
    EB10: 0D 65 00 4A 04 3A 00 00 5B 54 20 B0 4A 43 09 01  // .e.J.:..[T .JC..
    EB20: 01 25 B0 4A 01 43 09 01 01 25 B0 4A 02 43 09 01  // .%.J.C...%.J.C..
    EB30: 07 25 A0 4A EF 43 09 01 0D 25 A0 4A 10 43 09 01  // .%.J.C...%.J.C..
    EB40: 54 08 A4 4A 51 C8 0D 25 A5 4A 01 51 32 43 09 01  // T..JQ..%.J.Q2C..
    EB50: 0D 65 A8 4A 01 51 0A 07 25 A5 4A FE 51 0A 01 0D  // .e.J.Q..%.J.Q...
    EB60: A4 4A 01 02 51 C8 43 09 01 0D 25 B6 4A 10 01 21  // .J..Q.C...%.J..!
    EB70: A7 4A 01 43 09 01 7A 08 00 48 3F 78 69 F0 D2 90  // .J.C..z..H?xi...
    EB80: 7E 00 33 06 01 05 04 08 37 00 00 03 01 46 02 56  // ~.3.....7....F.V
    EB90: 18 46 03 B1 46 00 15 1D 46 05 42 39 00 63 07 46  // .F..F...F.B9.c.F
    EBA0: 04 63 01 34 00 63 00 52 03 63 0B 47 04 63 04 F7  // .c.4.c.R.c.G.c..
    EBB0: 05 5A 5A 43 03 06 03 20 40 CF 05 02 31 02 00 0E  // .ZZC... @...1...
    EBC0: 25 02 60 52 14 01 62 47 4A 46 4C 25 40 10 49 66  // %.`R..bGJFL%@.If
    EBD0: 00 3D A5 01 03 49 66 00 4A 25 0D 4A 10 49 66 00  // .=...If.J%.J.If.
    EBE0: 01 A5 47 4A 02 43 6B 00 01 B1 47 4A 01 03 39 41  // ..GJ.Ck...GJ..9A
    EBF0: 01 09 25 41 70 3E 25 41 00 44 83 00 33 25 41 10  // ..%Ap>%A.D..3%A.
    EC00: 01 E2 47 4A 41 3D A5 01 05 44 A8 00 3D A5 01 00  // ..GJA=...D..=...
    EC10: 44 A8 00 01 0D 79 4A 0F 01 3D 0D 00 A4 38 45 CA  // D....yJ..=...8E.
    EC20: 00 01 0D 79 4A 0F 00 43 CA 00 02 A5 01 00 0E E5  // ...yJ..C........
    EC30: 01 02 03 21 43 01 03 02 40 44 33 25 40 01 32 25  // ...!C...@D3%@.2%
    EC40: 01 01 01 21 A3 4A 01 01 0A 79 4A 40 03 1A 48 46  // ...!.J...yJ@..HF
    EC50: 4A 25 C6 48 01 49 42 04 66 FF 2D 0D 42 0D 06 56  // J%.H.IB.f.-.B..V
    EC60: 00 40 20 A5 00 06 2D 0A 42 40 07 A5 CA 48 FE 0D  // .@ ...-.B@...H..
    EC70: 25 CA 48 01 0D 64 C7 48 05 00 56 08 48 20 A5 00  // %.H..d.H..V.H ..
    EC80: 02 03 22 48 40 01 04 06 48 00 00 01 64 05 48 04  // .."H@...H...d.H.
    EC90: 00 07 E5 05 48 FC 03 1A 48 46 3D A5 01 00 44 B2  // ....H...HF=...D.
    ECA0: 01 66 07 2D 0C 42 08 00 02 01 02 00 02 F1 02 01  // .f.-.B..........
    ECB0: 52 1C 03 1A 48 46 01 04 C0 48 04 00 01 04 C1 48  // R...HF...H.....H
    ECC0: 08 00 01 04 C2 48 0C 00 01 04 C3 48 10 00 01 0C  // .....H.....H....
    ECD0: CB 48 14 00 01 0C CD 48 16 00 01 4C C4 48 18 00  // .H.....H...L.H..
    ECE0: 03 04 40 1A 00 09 05 40 FE FF FF 7F 0F 05 40 02  // ..@....@......@.
    ECF0: 00 00 00 01 02 CE 48 40 03 04 40 1E 00 0F 05 40  // ......H@..@....@
    ED00: 00 00 02 00 01 02 CF 48 40 03 04 40 22 00 0F 05  // .......H@..@"...
    ED10: 40 00 40 00 40 01 02 D0 48 40 03 04 40 26 00 0F  // @.@.@...H@..@&..
    ED20: 05 40 00 40 00 00 01 02 D1 48 40 01 04 D4 48 2A  // .@.@.....H@...H*
    ED30: 00 43 B8 01 56 08 46 43 47 04 03 1A 48 46 07 25  // .C..V.FCG...HF.%
    ED40: C4 48 FE 07 25 CE 48 FD 07 25 CF 48 FB 07 25 C4  // .H..%.H..%.H..%.
    ED50: 48 FD 51 05 07 A5 CF 48 FD 51 03 0D 25 CE 48 01  // H.Q....H.Q..%.H.
    ED60: 51 03 07 05 D0 48 FE BF FE BF 51 01 4A A5 D3 48  // Q....H....Q.J..H
    ED70: 80 44 E8 01 4A E5 D3 48 01 49 42 04 0D E5 CE 48  // .D..J..H.IB....H
    ED80: 80 51 03 07 0D D1 48 FE BF 51 01 4A E5 D3 48 40  // .Q....H..Q.J..H@
    ED90: 44 07 02 0D 25 D1 48 01 51 01 4A A5 D3 48 02 44  // D...%.H.Q.J..H.D
    EDA0: 16 02 4A A5 D3 48 04 49 42 04 0D 05 D0 48 01 00  // ..J..H.IB....H..
    EDB0: 01 00 51 01 0D 25 CD 48 04 0D 25 CF 48 04 03 20  // ..Q..%.H..%.H.. 
    EDC0: 41 D3 48 09 25 41 AA 3E 25 41 AA 49 3C 02 3A 00  // A.H.%A.>%A.I<.:.
    EDD0: 00 66 FF 2D 0D 42 1F 06 56 08 41 03 39 41 01 09  // .f.-.B..V.A.9A..
    EDE0: 25 41 0C 1B 25 41 01 2D 0A 42 41 03 0C 46 00 00  // %A..%A.-.BA..F..
    EDF0: 66 07 2D 0C 42 0C 00 02 01 02 00 02 F1 02 01 52  // f.-.B..........R
    EE00: 1C 03 1A 48 46 03 00 40 C7 48 03 8C 40 0C 00 5E  // ...HF..@.H..@..^
    EE10: 0A 40 00 20 46 3D A5 01 00 44 A5 02 4B E5 01 02  // .@. F=...D..K...
    EE20: 44 A5 02 0F 25 40 02 01 04 C5 48 04 00 01 02 C7  // D...%@....H.....
    EE30: 48 40 03 04 41 08 00 5E 25 41 07 07 01 02 C6 48  // H@..A..^%A.....H
    EE40: 41 51 0F 07 25 C6 48 FD 51 04 01 24 C6 48 08 00  // AQ..%.H.Q..$.H..
    EE50: 51 04 0D 25 C4 48 02 3A 00 00 03 31 41 00 15 25  // Q..%.H.:...1A..%
    EE60: 41 01 2D 25 41 01 03 22 43 41 03 02 41 44 0D 0A  // A.-%A.."CA..AD..
    EE70: 36 48 41 51 05 03 1A 48 46 07 25 C4 48 FD 56 08  // 6HAQ...HF.%.H.V.
    EE80: 48 03 31 48 00 0D 25 60 01 01 51 01 3A 00 00 54  // H.1H..%`..Q.:..T
    EE90: 08 36 48 51 0A 56 08 48 20 A5 00 02 03 22 48 40  // .6HQ.V.H ...."H@
    EEA0: 5C A5 05 48 8F 10 02 31 02 00 0E 25 02 60 52 14  // \..H...1...%.`R.
    EEB0: 0D 25 48 4A 01 51 0A 56 08 48 20 A5 00 02 03 22  // .%HJ.Q.V.H ...."
    EEC0: 48 40 0D 25 05 48 01 51 0A 0D E5 06 48 10 3A 00  // H@.%.H.Q....H.:.
    EED0: 00 43 42 04 02 31 02 00 0E 25 02 60 52 14 4A 25  // .CB..1...%.`R.J%
    EEE0: 48 4A 01 44 42 04 3C A5 47 4A 02 44 74 03 3C A5  // HJ.DB.<.GJ.Dt.<.
    EEF0: 47 4A 03 49 82 03 54 00 48 4A 50 02 07 25 47 4A  // GJ.I..T.HJP..%GJ
    EF00: FE 43 A6 03 03 31 43 00 4A 62 47 4A 44 44 A6 03  // .C...1C.JbGJDD..
    EF10: 54 08 A4 4A 51 C8 0D 25 A5 4A 01 51 32 54 20 A0  // T..JQ..%.J.Q2T .
    EF20: 4A 54 20 B0 4A 43 A6 03 56 08 48 20 A5 00 02 03  // JT .JC..V.H ....
    EF30: 22 48 40 07 E5 06 48 EF 07 A5 05 48 8F 03 1A 48  // "H@...H....H...H
    EF40: 46 07 25 CD 48 FB 54 00 C3 48 54 00 C2 48 02 31  // F.%.H.T..HT..H.1
    EF50: 02 00 0E 25 02 60 52 14 54 20 48 4A 54 28 47 4A  // ...%.`R.T HJT(GJ
    EF60: 54 00 79 4A 56 08 48 03 31 48 00 07 25 60 01 FE  // T.yJV.H.1H..%`..
    EF70: 03 1A 48 46 07 25 C6 48 07 51 0A 07 25 C6 48 FE  // ..HF.%.H.Q..%.H.
    EF80: 51 0A 07 25 CE 48 FE 51 01 07 E5 CE 48 7F 51 01  // Q..%.H.Q....H.Q.
    EF90: 0D 05 D0 48 01 00 01 00 0D 25 D1 48 01 51 0A 0D  // ...H.....%.H.Q..
    EFA0: 25 CE 48 02 0D 25 C4 48 02 51 28 0D A5 CF 48 02  // %.H..%.H.Q(...H.
    EFB0: 51 0A 0D 05 D0 48 00 40 00 40 0D 65 D1 48 40 0D  // Q....H.@.@.e.H@.
    EFC0: 25 C4 48 01 3A 00 00 5B 5B 09 65 46 1B 66 FF 2D  // %.H.:..[[.eF.f.-
    EFD0: 0D 42 27 06 56 00 40 3E 64 46 00 00 44 6E 04 2D  // .B'.V.@>dF..Dn.-
    EFE0: 25 40 01 2D 0D 42 01 00 3E 25 40 0A 45 55 04 5B  // %@.-.B..>%@.EU.[
    EFF0: 56 08 48 03 22 43 40 03 02 41 44 03 0A 46 41 3D  // V.H."C@..AD..FA=
    F000: 0D 00 48 3F 44 B7 04 15 05 41 0A 3D 0D 00 78 69  // ..H?D....A.=..xi
    F010: 44 B7 04 15 05 41 0A 3D 0D 00 F0 D2 44 B7 04 3D  // D....A.=....D..=
    F020: 0D 00 90 7E 49 EF 05 15 05 41 0A 3E 25 40 02 45  // ...~I....A.>%@.E
    F030: B7 04 1B 0D 46 02 43 BA 04 56 08 46 56 00 40 3D  // ....F.C..V.FV.@=
    F040: 65 01 14 49 D3 04 66 1E 03 24 40 72 01 15 25 40  // e..I..f..$@r..%@
    F050: 01 2D 25 40 0E 66 07 2D 0A 42 40 2D 0C 42 04 00  // .-%@.f.-.B@-.B..
    F060: 33 0A 42 40 55 30 01 03 31 43 00 03 22 40 44 3D  // 3.B@U0..1C.."@D=
    F070: A4 01 00 00 49 FD 04 4C 24 40 01 00 49 05 05 2D  // ....I..L$@..I..-
    F080: 0C 42 02 00 43 ED 04 2D 0D 42 04 00 03 04 40 00  // .B..C..-.B....@.
    F090: 00 3E 0D 40 00 00 44 EF 05 2D 8A 40 42 4C 04 41  // .>.@..D..-.@BL.A
    F0A0: 04 00 49 33 05 4C 24 46 08 00 49 33 05 2D 0D 42  // ..I3.L$F..I3.-.B
    F0B0: 09 00 43 1B 05 54 00 00 00 3D E5 00 01 49 D9 05  // ..C..T...=...I..
    F0C0: 3E 0D 40 CE 48 49 6A 05 2D 1A 40 46 01 0A 00 00  // >.@.HIj.-.@F....
    F0D0: 40 03 04 00 09 00 09 05 00 FE FF FF 7F 0F 05 00  // @...............
    F0E0: 02 00 00 00 01 02 01 00 00 43 E8 05 3E 0D 40 CF  // .........C..>.@.
    F0F0: 48 49 8F 05 2D 1A 40 46 01 0A 00 00 40 03 04 00  // HI..-.@F....@...
    F100: 09 00 0F 05 00 00 00 02 00 01 02 01 00 00 43 E8  // ..............C.
    F110: 05 3E 0D 40 D0 48 49 B4 05 2D 1A 40 46 01 0A 00  // .>.@.HI..-.@F...
    F120: 00 40 03 04 00 09 00 0F 05 00 00 40 00 40 01 02  // .@.........@.@..
    F130: 01 00 00 43 E8 05 3E 0D 40 D1 48 49 D9 05 2D 1A  // ...C..>.@.HI..-.
    F140: 40 46 01 0A 00 00 40 03 04 00 09 00 0F 05 00 00  // @F....@.........
    F150: 40 00 00 01 02 01 00 00 43 E8 05 2D 1A 40 46 01  // @.......C..-.@F.
    F160: 0A 00 00 40 01 04 01 00 09 00 03 1A 42 40 43 0A  // ...@........B@C.
    F170: 05 3D E5 00 01 44 B8 01 5B 66 06 02 8C 02 32 00  // .=...D..[f....2.
    F180: 02 68 02 CB 05 02 39 02 00 52 33 5B 7A 26 00 00  // .h....9..R3[z&..
    F190: 01 02 03 01 00 00 01 02 03 01 00 00 01 02 03 01  // ................
    F1A0: 00 08 05 08 05 04 05 20 0A 00 01 02 03 08 09 0A  // ....... ........
    F1B0: 10 11 18 FF FF 00 4C 02 01 02 00 08 37 00 00 3D  // ......L.....7..=
    F1C0: 0D 00 00 00 44 CE 01 56 00 41 03 21 41 01 09 25  // ....D..V.A.!A..%
    F1D0: 41 0F 15 0D 41 02 03 0A 40 42 66 FF 2D 0D 42 34  // A...A...@Bf.-.B4
    F1E0: 02 2D 0A 42 41 03 0C 48 02 00 0D A5 68 48 01 54  // .-.BA..H....hH.T
    F1F0: 08 68 48 03 0C 48 00 00 03 F9 41 01 15 3D 41 04  // .hH..H....A..=A.
    F200: 5C BA 00 5C 8F 41 03 0A 42 40 4A 25 00 5C 01 49  // \..\.A..B@J%.\.I
    F210: 81 00 0D 0D 00 5C 01 01 0D 25 00 5C 10 4A 25 00  // .....\...%.\.J%.
    F220: 5C 20 44 67 00 07 25 00 5C EF 4A 25 00 5C 20 49  // \ Dg..%.\.J%.\ I
    F230: 74 00 0D 25 03 5C 40 56 00 41 03 09 41 00 3B 02  // t..%.\@V.A..A.;.
    F240: 41 03 3B 41 00 1B 25 41 04 01 A2 01 5C 41 03 69  // A.;A..%A....\A.i
    F250: 41 01 15 2D 41 04 01 2A 01 5C 41 56 00 40 0F E5  // A..-A..*.\AV.@..
    F260: 40 80 03 73 40 00 01 02 06 5C 40 56 00 40 03 6B  // @..s@....\@V.@.k
    F270: 40 00 01 02 06 5C 40 03 63 40 00 01 02 06 5C 40  // @....\@.c@....\@
    F280: 03 7B 40 00 09 65 40 0F 01 02 06 5C 40 3E 25 41  // .{@..e@....\@>%A
    F290: 04 47 10 01 33 25 41 04 2D 05 46 04 00 00 00 03  // .G..3%A.-.F.....
    F2A0: 63 40 00 01 02 06 5C 40 03 6B 40 00 01 02 06 5C  // c@....\@.k@....\
    F2B0: 40 03 73 40 00 01 02 06 5C 40 03 7B 40 00 01 02  // @.s@....\@.{@...
    F2C0: 06 5C 40 43 D7 00 0D 25 03 5C 02 0D 25 01 5C 01  // .\@C...%.\..%.\.
    F2D0: 03 29 40 01 21 25 40 0A 2D 25 40 32 4A 25 04 5C  // .)@.!%@.-%@2J%.\
    F2E0: 01 49 42 01 51 0A 33 25 40 01 3E 25 40 00 49 26  // .IB.Q.3%@.>%@.I&
    F2F0: 01 02 65 01 01 43 CA 01 4A 05 04 5C F0 8F FF 00  // ..e..C..J..\....
    F300: 44 54 01 02 65 01 02 43 CA 01 01 05 06 5C 01 00  // DT..e..C.....\..
    F310: 00 80 03 00 40 06 5C 02 6A 01 40 02 B8 01 04 5C  // ....@.\.j.@....\
    F320: 08 A5 01 1F 3D A5 01 00 46 7C 01 02 65 01 03 43  // ....=...F|..e..C
    F330: CA 01 32 A5 01 01 3D 8D 00 00 00 44 CA 01 3D A5  // ..2...=....D..=.
    F340: 01 00 44 CA 01 03 31 41 01 03 19 40 00 56 18 40  // ..D...1A...@.V.@
    F350: 3B 02 40 03 28 40 06 5C 03 68 40 06 5C 03 A8 40  // ;.@.(@.\.h@.\..@
    F360: 06 5C 03 E8 40 06 5C 04 02 00 40 3E 25 41 04 47  // .\..@.\...@>%A.G
    F370: CA 01 33 25 41 04 2D 05 46 04 00 00 00 43 9D 01  // ..3%A.-.F....C..
    F380: 3A 00 00 5B 66 FF 2D 0D 42 34 02 03 0C 48 00 00  // :..[f.-.B4...H..
    F390: 01 8D 08 5C 18 00 01 05 09 5C 00 1C 02 00 01 05  // ...\.....\......
    F3A0: 0A 5C 10 12 3D 12 2D 0D 42 04 00 2C 25 00 01 3D  // .\..=.-.B..,%..=
    F3B0: 25 00 03 49 D5 01 56 08 48 03 25 41 10 0D 65 97  // %..I..V.H.%A..e.
    F3C0: 48 40 07 65 97 48 BF 33 25 41 01 3E 25 41 00 49  // H@.e.H.3%A.>%A.I
    F3D0: 07 02 0D 25 3B 48 01 54 30 3B 48 0D 25 3C 48 01  // ...%;H.T0;H.%<H.
    F3E0: 54 30 3C 48 51 32 5B 7A 18 00 00 00 00 00 1C 00  // T0<HQ2[z........
    F3F0: 04 00 38 00 08 00 54 00 0C 00 70 00 10 00 8C 00  // ..8...T...p.....
    F400: 14 00 5C 00 01 02 00 04 02 25 01 04 03 31 41 00  // ..\......%...1A.
    F410: 09 0D 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00  // ..A....A.f.-.BP.
    F420: 2D 0A 42 41 03 0C 48 00 00 07 A5 68 48 FE 01 0D  // -.BA..H....hH...
    F430: 68 48 11 11 50 02 4A 0D 6B 48 01 00 49 41 00 02  // hH..P.J.kH..IA..
    F440: 25 01 13 54 08 68 48 54 00 6A 48 3A 00 00 5B 7A  // %..T.hHT.jH:..[z
    F450: 0C 00 00 00 04 00 08 00 0C 00 10 00 14 00 38 00  // ..............8.
    F460: 01 01 00 00 03 0C 41 00 00 2D 0D 42 02 00 03 31  // ......A..-.B...1
    F470: 43 00 03 A2 41 44 3D E4 00 02 00 49 30 00 4C A4  // C...AD=....I0.L.
    F480: 41 03 00 44 30 00 3D 0C 00 00 00 47 37 00 2D 0A  // A..D0.=....G7.-.
    F490: 42 41 43 18 00 5B D1 01 02 01 04 04 37 00 00 42  // BAC..[......7..B
    F4A0: 21 00 63 07 29 00 63 03 66 00 63 02 D5 00 63 04  // !.c.).c.f.c...c.
    F4B0: FA 00 63 0C 85 01 63 0D A8 01 5A 5A 43 D0 01 01  // ..c...c...ZZC...
    F4C0: 0D 1D 48 9F 0F 01 05 1E 48 00 00 00 00 01 05 1F  // ..H.....H.......
    F4D0: 48 7D 00 00 00 66 06 01 4C 1F 48 39 00 03 24 46  // H}...f..L.H9..$F
    F4E0: 42 00 3E 25 46 00 44 58 00 01 25 1F 48 00 4A 25  // B.>%F.DX..%.H.J%
    F4F0: 1B 48 10 49 D0 01 0D E5 1B 48 02 5B 4A A5 CB 05  // .H.I.....H.[J...
    F500: 01 49 D0 01 4A 25 1B 48 01 44 D0 01 4A 25 1C 48  // .I..J%.H.D..J%.H
    F510: 10 44 76 00 4A E5 1B 48 02 49 91 00 4A 25 1C 48  // .Dv.J..H.I..J%.H
    F520: 08 49 D0 01 43 C5 00 4A E5 1B 48 01 49 D0 01 4A  // .I..C..J..H.I..J
    F530: 25 1B 48 10 44 C5 00 0D A5 1B 48 03 0D 65 1B 48  // %.H.D.....H..e.H
    F540: 03 01 0D 1D 48 00 00 5C 25 1B 48 EF 01 4A 25 1C  // ....H..\%.H..J%.
    F550: 48 10 44 B7 00 01 0D 1D 48 9F 0F 07 E5 1B 48 FC  // H.D.....H.....H.
    F560: 0D E5 1F 48 01 0D 25 1B 48 11 5B 66 06 03 24 46  // ...H..%.H.[f..$F
    F570: 42 00 3E 25 46 00 49 D0 01 4A 25 1B 48 01 44 D0  // B.>%F.I..J%.H.D.
    F580: 01 4A 25 1C 48 10 44 EB 00 5C E5 1B 48 FE 02 5B  // .J%.H.D..\..H..[
    F590: 4A 65 D0 05 02 44 07 01 0D 25 23 48 01 3D 8D 00  // Je...D...%#H.=..
    F5A0: 00 00 44 84 01 03 05 46 00 36 6E 01 56 00 41 03  // ..D....F.6n.V.A.
    F5B0: 19 41 00 21 05 41 FF 0F 00 00 27 02 46 40 3E 05  // .A.!.A....'.F@>.
    F5C0: 41 00 00 00 00 44 37 01 2D 0D 40 01 00 01 8A 1D  // A....D7.-.@.....
    F5D0: 48 40 56 00 41 03 19 41 00 21 02 40 41 27 02 46  // H@V.A..A.!.@A'.F
    F5E0: 40 01 A5 22 48 0C 01 0A 22 48 40 15 05 40 04 56  // @.."H..."H@..@.V
    F5F0: 00 41 03 29 41 00 2D 0D 41 01 00 21 02 40 41 1B  // .A.)A.-.A..!.@A.
    F600: 05 40 08 01 0A 20 48 40 0D E5 20 48 C0 07 25 23  // .@... H@.. H..%#
    F610: 48 FE 4A 65 23 48 01 49 7C 01 5B 4A 25 1B 48 01  // H.Je#H.I|.[J%.H.
    F620: 44 9D 01 4A 25 1B 48 10 49 D0 01 4A 25 1C 48 10  // D..J%.H.I..J%.H.
    F630: 44 95 01 07 E5 1F 48 FE 0D 25 1B 48 11 5B 4A 25  // D.....H..%.H.[J%
    F640: 1B 48 01 44 D0 01 4A 25 1B 48 10 44 D0 01 4A 25  // .H.D..J%.H.D..J%
    F650: 1C 48 10 44 B8 01 07 A5 1B 48 FC 07 65 1B 48 FC  // .H.D.....H..e.H.
    F660: 5C 25 1B 48 EF 01 5B 00 07 00 03 01 08 00 5B 00  // \%.H..[.......[.
    F670: DA 00 03 01 00 10 37 00 00 56 00 40 4A 25 00 EC  // ......7..V.@J%..
    F680: 01 44 31 00 4A 20 05 EC 1E 00 49 31 00 03 25 40  // .D1.J ....I1..%@
    F690: 01 01 05 05 EC 03 00 00 00 4A 65 05 EC 0F 49 29  // .........Je...I)
    F6A0: 00 3D 65 02 00 49 3D 00 2C 28 02 09 08 3D E5 02  // .=e..I=.,(...=..
    F6B0: 00 49 49 00 2C A8 02 09 08 3D E5 02 03 49 5F 00  // .II.,....=...I_.
    F6C0: 01 01 82 01 01 02 05 01 0C 06 00 00 43 77 00 3D  // ............Cw.=
    F6D0: E5 02 04 49 77 00 01 01 42 FB 01 02 05 01 0C ED  // ...Iw...B.......
    F6E0: 03 00 07 25 00 EC FE 54 00 63 C0 01 01 64 C0 00  // ...%...T.c...d..
    F6F0: 01 21 65 C0 02 01 01 66 C0 01 01 31 67 C0 02 01  // .!e....f...1g...
    F700: 01 E8 C0 03 3D 65 02 01 44 A4 00 3D E5 02 01 44  // ....=e..D..=...D
    F710: A4 00 51 02 4A E5 A0 21 80 49 A4 00 3D E5 02 04  // ..Q.J..!.I..=...
    F720: 49 C2 00 0D 25 00 EC 01 0D 25 45 EC 03 0D 25 46  // I...%....%E...%F
    F730: FB 01 3E 25 40 01 49 D9 00 01 05 05 EC 01 00 00  // ..>%@.I.........
    F740: 00 4A 65 05 EC 0F 49 D1 00 5B 32 05 01 01 04 00  // .Je...I..[2.....
    F750: 37 00 00 56 00 00 66 1E 2D 0D 42 88 01 56 00 40  // 7..V..f.-.B..V.@
    F760: 21 25 00 10 2D 0A 42 40 03 24 41 0C 00 4C 25 41  // !%..-.B@.$A..L%A
    F770: 7C 44 B2 00 02 25 00 64 02 0D 01 01 01 02 E4 01  // |D...%.d........
    F780: 06 00 0E E5 01 90 66 1E 03 24 41 38 00 4C 25 41  // ......f..$A8.L%A
    F790: 20 49 5C 00 02 A4 01 88 00 03 64 00 89 00 2D 0D  //  I\.......d...-.
    F7A0: 42 8A 00 43 98 00 3E 0D 00 00 00 44 77 00 3E 0D  // B..C..>....Dw.>.
    F7B0: 00 01 00 44 89 00 3E 0D 00 02 00 44 4A 00 43 B2  // ...D..>....DJ.C.
    F7C0: 00 02 A4 01 5C 00 03 64 00 5D 00 2D 0D 42 5E 00  // ....\..d.].-.B^.
    F7D0: 43 98 00 02 A4 01 70 00 03 64 00 71 00 2D 0D 42  // C.....p..d.q.-.B
    F7E0: 72 00 3E 65 00 00 44 B2 00 33 65 00 01 02 4C 00  // r.>e..D..3e...L.
    F7F0: 00 00 52 36 2D 0D 42 02 00 43 98 00 2D 25 00 01  // ..R6-.B..C..-%..
    F800: 3E 25 00 03 45 0C 00 4A A5 C9 05 04 44 AE 04 66  // >%..E..J....D..f
    F810: 06 03 24 00 42 00 3E 25 00 02 45 AE 04 02 0D 00  // ..$.B.>%..E.....
    F820: 00 FF 03 0D 40 14 31 66 16 2D 0C 42 06 00 03 24  // ....@.1f.-.B...$
    F830: 41 00 00 3E 25 41 00 44 68 01 3E 0C 40 04 00 44  // A..>%A.Dh.>.@..D
    F840: 04 01 2D 0D 42 08 00 33 25 41 01 43 E9 00 03 0C  // ..-.B..3%A.C....
    F850: 40 06 00 03 0C 41 08 00 66 16 2D 0A 40 42 3E 0D  // @....A..f.-.@B>.
    F860: 41 00 00 44 57 01 2D 0A 42 41 56 00 41 03 24 41  // A..DW.-.BAV.A.$A
    F870: 00 00 03 A4 41 01 00 3E 25 41 FF 44 57 01 3E 25  // ....A..>%A.DW.>%
    F880: 41 01 49 40 01 02 24 00 02 00 3E 25 41 02 49 50  // A.I@..$...>%A.IP
    F890: 01 02 64 00 02 00 32 65 00 01 2D 1A 42 41 43 23  // ..d...2e..-.BAC#
    F8A0: 01 03 0A 42 40 03 0C 41 01 00 3E 0D 41 00 00 49  // ...B@..A..>.A..I
    F8B0: 6C 01 56 08 42 5B 42 22 00 63 02 76 01 5A 5A 5B  // l.V.B[B".c.v.ZZ[
    F8C0: 3B 05 00 4C 00 00 03 01 00 00 04 05 00 09 05 90  // ;..L............
    F8D0: 40 55 00 01 02 21 01 00 02 E9 01 00 02 05 00 00  // @U...!..........
    F8E0: 4C 04 4C 52 4E 3D 65 01 00 44 B0 01 51 90 2C E5  // L.LRN=e..D..Q.,.
    F8F0: 00 01 3D E5 00 10 45 92 01 5B 02 02 00 00 03 E5  // ..=...E..[......
    F900: 40 01 3B 05 04 4C 00 00 3F 25 00 04 44 C9 01 03  // @.;..L..?%..D...
    F910: E5 40 02 66 FF 2D 0D 42 F2 04 03 05 41 80 4C 00  // .@.f.-.B....A.L.
    F920: 00 3B 02 41 04 04 00 00 00 2D 0D 42 04 00 2D 05  // .;.A.....-.B..-.
    F930: 41 04 00 00 00 3F 05 00 FF FF FF FF 49 D7 01 66  // A....?......I..f
    F940: 06 03 24 41 34 00 15 25 41 02 3B 05 80 4C 00 00  // ..$A4..%A.;..L..
    F950: 04 62 00 41 56 00 41 03 24 41 35 00 3B 05 84 4C  // .b.AV.A.$A5.;..L
    F960: 00 00 04 62 00 41 56 00 41 03 24 41 39 00 15 0D  // ...b.AV.A.$A9...
    F970: 41 02 3B 05 88 4C 00 00 04 62 00 41 56 00 41 03  // A.;..L...b.AV.A.
    F980: 24 41 3A 00 15 0D 41 02 3B 05 8C 4C 00 00 04 62  // $A:...A.;..L...b
    F990: 00 41 56 00 41 03 24 41 36 00 3B 05 90 4C 00 00  // .AV.A.$A6.;..L..
    F9A0: 04 62 00 41 03 24 41 37 00 15 25 41 02 3B 05 94  // .b.A.$A7..%A.;..
    F9B0: 4C 00 00 04 62 00 41 56 00 41 03 24 41 38 00 3B  // L...b.AV.A.$A8.;
    F9C0: 05 98 4C 00 00 04 62 00 41 56 00 41 3E E5 40 01  // ..L...b.AV.A>.@.
    F9D0: 49 8D 02 0F 25 41 08 66 06 03 E4 41 28 00 4C E5  // I...%A.f...A(.L.
    F9E0: 41 01 44 9F 02 0F 25 41 80 4C E5 41 02 49 AA 02  // A.D...%A.L.A.I..
    F9F0: 0F 25 41 04 4C E5 41 20 44 B5 02 0F 25 41 01 3B  // .%A.L.A D...%A.;
    FA00: 05 A4 4C 00 00 04 62 00 41 02 05 01 06 00 00 00  // ..L...b.A.......
    FA10: 56 00 41 66 1A 03 0C 41 00 00 2D 0A 41 42 2D 0D  // V.Af...A..-.AB-.
    FA20: 42 04 00 3D 24 01 08 00 44 F4 02 2D 0D 42 0C 00  // B..=$...D..-.B..
    FA30: 3E 0A 42 41 49 D9 02 03 25 41 00 43 3E 04 03 8C  // >.BAI...%A.C>...
    FA40: 41 04 00 3E 8D 41 00 00 44 ED 02 3E E5 40 01 49  // A..>.A..D..>.@.I
    FA50: 7B 03 03 25 41 00 3E 8D 41 17 00 45 E8 03 03 25  // {..%A.>.A..E...%
    FA60: 41 01 3E 8D 41 47 00 45 E8 03 03 25 41 02 3E 8D  // A.>.AG.E...%A.>.
    FA70: 41 7C 00 45 E8 03 03 25 41 03 3E 8D 41 AC 00 45  // A|.E...%A.>.A..E
    FA80: E8 03 03 25 41 04 3E 8D 41 D3 00 45 E8 03 03 25  // ...%A.>.A..E...%
    FA90: 41 05 3E 8D 41 10 01 45 E8 03 03 25 41 06 3E 8D  // A.>.A..E...%A.>.
    FAA0: 41 4B 01 45 E8 03 03 25 41 07 3E 8D 41 71 01 45  // AK.E...%A.>.Aq.E
    FAB0: E8 03 03 25 41 08 3E 8D 41 AC 01 45 E8 03 03 25  // ...%A.>.A..E...%
    FAC0: 41 09 43 E8 03 03 02 00 42 66 06 55 00 01 02 0C  // A.C.....Bf.U....
    FAD0: 01 04 00 66 FF 2D 0D 42 B2 04 3D 04 01 00 00 45  // ...f.-.B..=....E
    FAE0: A0 03 2D 0D 42 08 00 43 90 03 03 24 41 04 00 3E  // ..-.B..C...$A..>
    FAF0: 8D 41 28 00 45 DF 03 3E 8D 41 3C 00 45 E2 03 03  // .A(.E..>.A<.E...
    FB00: 24 41 05 00 3E 8D 41 50 00 45 DF 03 3E 8D 41 78  // $A..>.AP.E..>.Ax
    FB10: 00 45 E2 03 03 24 41 06 00 3E 8D 41 78 00 45 DF  // .E...$A..>.Ax.E.
    FB20: 03 3E 8D 41 B4 00 45 E2 03 43 ED 02 66 1A 03 02  // .>.A..E..C..f...
    FB30: 42 00 3B 05 A0 4C 00 00 04 62 00 41 03 8C 41 06  // B.;..L...b.A..A.
    FB40: 00 03 25 41 00 3E 8D 41 AB 09 45 1F 04 03 25 41  // ..%A.>.A..E...%A
    FB50: 20 3E 8D 41 36 10 45 1F 04 03 25 41 40 3E 8D 41  //  >.A6.E...%A@>.A
    FB60: A8 16 45 1F 04 03 25 41 60 0F 25 41 80 03 A4 41  // ..E...%A`.%A...A
    FB70: 09 00 4C A5 41 01 49 3E 04 0F 25 41 10 3E E5 40  // ..L.A.I>..%A.>.@
    FB80: 01 44 3E 04 09 25 41 7F 3B 05 9C 4C 00 00 04 62  // .D>..%A.;..L...b
    FB90: 00 41 03 05 00 80 4C 00 00 02 21 01 00 02 E9 01  // .A....L...!.....
    FBA0: 00 56 00 41 03 0A 41 00 3B 02 41 03 03 41 00 3E  // .V.A..A.;.A..A.>
    FBB0: 05 41 FF FF FF FF 44 AE 04 3B 05 00 4C 00 00 04  // .A....D..;..L...
    FBC0: 05 01 F0 03 80 61 04 02 02 41 02 05 00 04 4C 00  // .....a...A....L.
    FBD0: 00 55 10 01 52 4E 3D 65 01 00 44 A3 04 51 C8 51  // .U..RN=e..D..Q.Q
    FBE0: C8 2D A5 00 01 3E A5 00 07 45 57 04 5B 2D 0D 00  // .-...>...EW.[-..
    FBF0: 04 00 56 18 00 43 57 04 5B 7A 80 00 AC 0D 00 00  // ..V..CW.[z......
    FC00: 0D 1A 27 00 94 11 00 00 08 10 18 00 7C 15 00 00  // ..'.........|...
    FC10: 0A 14 1E 00 58 1B 00 00 0D 1A 27 00 28 23 00 00  // ....X.....'.(#..
    FC20: 08 10 18 00 F8 2A 00 00 0A 14 1E 00 4C 36 00 00  // .....*......L6..
    FC30: 0D 1A 27 00 50 46 00 00 08 10 18 00 01 1E 00 00  // ..'.PF..........
    FC40: 02 5A 00 00 03 00 00 00 04 00 00 00 05 5A 00 00  // .Z...........Z..
    FC50: 06 1E 00 00 07 7D 00 00 08 20 00 00 09 01 00 00  // .....}... ......
    FC60: 0A 0C 00 00 0B 00 00 00 0C 06 00 00 0E 38 00 00  // .............8..
    FC70: 10 00 00 00 0D 01 00 00 FF FF FF FF FF FF FF FF  // ................
    FC80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FC90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    FE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FE80: 00 00 00 00                                      // ....


