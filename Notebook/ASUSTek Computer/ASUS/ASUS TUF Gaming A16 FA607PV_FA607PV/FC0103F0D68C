
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000388A  0x01  "OptRf2"  "Opt2Tabl"  0x00001000  "INTL"   0x20200717
 02)  MCFG  0x0000003C  0x01  "_ASUS_"  "Notebook"  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x05  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00001D28  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x000003F1  0x02  "_ASUS_"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 06)  SSDT  0x0000008D  0x02  "AMD   "  "CPMMSLPI"  0x00000001  "INTL"   0x20200717
 07)  TPM2  0x0000004C  0x04  "_ASUS_"  "Notebook"  0x00000001  "AMI "   0x00000000
 08)  VFCT  0x0000AE84  0x01  "_ASUS_"  "Notebook"  0x00000001  "AMD "   0x31504F47
 09)  SSDT  0x00000464  0x02  "AMD   "  "AMDWOV  "  0x00000001  "INTL"   0x20200717
 10)  SSDT  0x00009707  0x02  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20200717
 11)  SSDT  0x0000102E  0x02  "AMD   "  "CPMACPV7"  0x00000001  "INTL"   0x20200717
 12)  SSDT  0x000006DA  0x02  "AMD   "  "EXTGPP00"  0x00000001  "INTL"   0x20200717
 13)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 14)  IVRS  0x000001A4  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 15)  DSDT  0x0000FE57  0x02  "_ASUS_"  "Notebook"  0x01072009  "INTL"   0x20200717
 16)  SSDT  0x000015B8  0x02  "AMD   "  "CPMDFIG2"  0x00000001  "INTL"   0x20200717
 17)  SSDT  0x00000F7C  0x02  "AMD   "  "UPEPRPL "  0x00000001  "INTL"   0x20200717
 18)  WSMT  0x00000028  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 19)  SSDT  0x00000EA2  0x02  "AMD   "  "NVME    "  0x00000001  "INTL"   0x20200717
 20)  SSDT  0x000009AB  0x01  "NvDDS "  "Nv20DDS "  0x00001000  "INTL"   0x20200717
 21)  SSDT  0x0000066F  0x02  "AMD   "  "XHCI    "  0x00000001  "INTL"   0x20200717
 22)  SSDT  0x000022AD  0x02  "AMD   "  "AOD     "  0x00000001  "INTL"   0x20200717
 23)  SSDT  0x00009BAE  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 24)  SSDT  0x0000094C  0x02  "AMD   "  "TZ01    "  0x00000001  "INTL"   0x20200717
 25)  FACP  0x00000114  0x06  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 26)  FPDT  0x00000044  0x01  "_ASUS_"  "A M I   "  0x01072009  "AMI "   0x01000013
 27)  SSDT  0x00007F51  0x02  "AMD   "  "Vortex  "  0x00000002  "MSFT"   0x05000000
 28)  SSDT  0x00000E06  0x02  "AMD   "  "CPMUCSI "  0x00000001  "INTL"   0x20200717
 29)  MSDM  0x00000055  0x03  "_ASUS_"  "Notebook"  0x01072009  "ASUS"   0x00000001
 30)  SSDT  0x00000952  0x02  "AMD   "  "CPMMSOSC"  0x00000001  "INTL"   0x20200717
 31)  SSDT  0x000029DC  0x02  "AMD   "  "CDFAAIG2"  0x00000001  "INTL"   0x20200717
 32)  SSDT  0x0000067B  0x02  "AMD   "  "GPPRPL  "  0x00000001  "INTL"   0x20200717
 33)  SSDT  0x00001BAF  0x02  "AMD   "  "GPP_PME_"  0x00000001  "INTL"   0x20200717
 34)  HPET  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00000005
 35)  SSDT  0x000006B5  0x02  "AMD   "  "CPMWLRC "  0x00000001  "INTL"   0x20200717
 36)  SSDT  0x0000070D  0x02  "AMD   "  "GPIORPL "  0x00000001  "INTL"   0x20200717
 37)  FIDT  0x0000009C  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 38)  FACS  0x00000040  0x02
 39)  BGRT  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 40)  SSDT  0x00000EA2  0x02  "AMD   "  "NVME    "  0x00000001  "INTL"   0x20200717

Found 40 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000015E
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : E0
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 04
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 06
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 08
[04Fh 0079 001h]               Local Apic ID : 08
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 0A
[057h 0087 001h]               Local Apic ID : 0A
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 0C
[05Fh 0095 001h]               Local Apic ID : 0C
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 0E
[067h 0103 001h]               Local Apic ID : 0E
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 10
[06Fh 0111 001h]               Local Apic ID : 10
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 12
[077h 0119 001h]               Local Apic ID : 12
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 14
[07Fh 0127 001h]               Local Apic ID : 14
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 16
[087h 0135 001h]               Local Apic ID : 16
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 18
[08Fh 0143 001h]               Local Apic ID : 18
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 1A
[097h 0151 001h]               Local Apic ID : 1A
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 1C
[09Fh 0159 001h]               Local Apic ID : 1C
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 1E
[0A7h 0167 001h]               Local Apic ID : 1E
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 00 [Processor Local APIC]
[0ADh 0173 001h]                      Length : 08
[0AEh 0174 001h]                Processor ID : 01
[0AFh 0175 001h]               Local Apic ID : 01
[0B0h 0176 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180 001h]               Subtable Type : 00 [Processor Local APIC]
[0B5h 0181 001h]                      Length : 08
[0B6h 0182 001h]                Processor ID : 03
[0B7h 0183 001h]               Local Apic ID : 03
[0B8h 0184 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188 001h]               Subtable Type : 00 [Processor Local APIC]
[0BDh 0189 001h]                      Length : 08
[0BEh 0190 001h]                Processor ID : 05
[0BFh 0191 001h]               Local Apic ID : 05
[0C0h 0192 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196 001h]               Subtable Type : 00 [Processor Local APIC]
[0C5h 0197 001h]                      Length : 08
[0C6h 0198 001h]                Processor ID : 07
[0C7h 0199 001h]               Local Apic ID : 07
[0C8h 0200 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204 001h]               Subtable Type : 00 [Processor Local APIC]
[0CDh 0205 001h]                      Length : 08
[0CEh 0206 001h]                Processor ID : 09
[0CFh 0207 001h]               Local Apic ID : 09
[0D0h 0208 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212 001h]               Subtable Type : 00 [Processor Local APIC]
[0D5h 0213 001h]                      Length : 08
[0D6h 0214 001h]                Processor ID : 0B
[0D7h 0215 001h]               Local Apic ID : 0B
[0D8h 0216 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220 001h]               Subtable Type : 00 [Processor Local APIC]
[0DDh 0221 001h]                      Length : 08
[0DEh 0222 001h]                Processor ID : 0D
[0DFh 0223 001h]               Local Apic ID : 0D
[0E0h 0224 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228 001h]               Subtable Type : 00 [Processor Local APIC]
[0E5h 0229 001h]                      Length : 08
[0E6h 0230 001h]                Processor ID : 0F
[0E7h 0231 001h]               Local Apic ID : 0F
[0E8h 0232 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236 001h]               Subtable Type : 00 [Processor Local APIC]
[0EDh 0237 001h]                      Length : 08
[0EEh 0238 001h]                Processor ID : 11
[0EFh 0239 001h]               Local Apic ID : 11
[0F0h 0240 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244 001h]               Subtable Type : 00 [Processor Local APIC]
[0F5h 0245 001h]                      Length : 08
[0F6h 0246 001h]                Processor ID : 13
[0F7h 0247 001h]               Local Apic ID : 13
[0F8h 0248 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252 001h]               Subtable Type : 00 [Processor Local APIC]
[0FDh 0253 001h]                      Length : 08
[0FEh 0254 001h]                Processor ID : 15
[0FFh 0255 001h]               Local Apic ID : 15
[100h 0256 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260 001h]               Subtable Type : 00 [Processor Local APIC]
[105h 0261 001h]                      Length : 08
[106h 0262 001h]                Processor ID : 17
[107h 0263 001h]               Local Apic ID : 17
[108h 0264 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268 001h]               Subtable Type : 00 [Processor Local APIC]
[10Dh 0269 001h]                      Length : 08
[10Eh 0270 001h]                Processor ID : 19
[10Fh 0271 001h]               Local Apic ID : 19
[110h 0272 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276 001h]               Subtable Type : 00 [Processor Local APIC]
[115h 0277 001h]                      Length : 08
[116h 0278 001h]                Processor ID : 1B
[117h 0279 001h]               Local Apic ID : 1B
[118h 0280 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284 001h]               Subtable Type : 00 [Processor Local APIC]
[11Dh 0285 001h]                      Length : 08
[11Eh 0286 001h]                Processor ID : 1D
[11Fh 0287 001h]               Local Apic ID : 1D
[120h 0288 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292 001h]               Subtable Type : 00 [Processor Local APIC]
[125h 0293 001h]                      Length : 08
[126h 0294 001h]                Processor ID : 1F
[127h 0295 001h]               Local Apic ID : 1F
[128h 0296 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300 001h]               Subtable Type : 04 [Local APIC NMI]
[12Dh 0301 001h]                      Length : 06
[12Eh 0302 001h]                Processor ID : FF
[12Fh 0303 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305 001h]        Interrupt Input LINT : 01

[132h 0306 001h]               Subtable Type : 01 [I/O APIC]
[133h 0307 001h]                      Length : 0C
[134h 0308 001h]                 I/O Apic ID : 20
[135h 0309 001h]                    Reserved : 00
[136h 0310 004h]                     Address : FEC00000
[13Ah 0314 004h]                   Interrupt : 00000000

[13Eh 0318 001h]               Subtable Type : 01 [I/O APIC]
[13Fh 0319 001h]                      Length : 0C
[140h 0320 001h]                 I/O Apic ID : 21
[141h 0321 001h]                    Reserved : 00
[142h 0322 004h]                     Address : FEC01000
[146h 0326 004h]                   Interrupt : 00000018

[14Ah 0330 001h]               Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331 001h]                      Length : 0A
[14Ch 0332 001h]                         Bus : 00
[14Dh 0333 001h]                      Source : 00
[14Eh 0334 004h]                   Interrupt : 00000002
[152h 0338 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340 001h]               Subtable Type : 02 [Interrupt Source Override]
[155h 0341 001h]                      Length : 0A
[156h 0342 001h]                         Bus : 00
[157h 0343 001h]                      Source : 09
[158h 0344 004h]                   Interrupt : 00000009
[15Ch 0348 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 05 E0 5F 41 53 55 53 5F  // APIC^....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 10 10  // ................
    0070: 01 00 00 00 00 08 12 12 01 00 00 00 00 08 14 14  // ................
    0080: 01 00 00 00 00 08 16 16 01 00 00 00 00 08 18 18  // ................
    0090: 01 00 00 00 00 08 1A 1A 01 00 00 00 00 08 1C 1C  // ................
    00A0: 01 00 00 00 00 08 1E 1E 01 00 00 00 00 08 01 01  // ................
    00B0: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00C0: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00D0: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00E0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 11 11  // ................
    00F0: 01 00 00 00 00 08 13 13 01 00 00 00 00 08 15 15  // ................
    0100: 01 00 00 00 00 08 17 17 01 00 00 00 00 08 19 19  // ................
    0110: 01 00 00 00 00 08 1B 1B 01 00 00 00 00 08 1D 1D  // ................
    0120: 01 00 00 00 00 08 1F 1F 01 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 20 00 00 00 C0 FE 00 00 00 00 01 0C  // .... ...........
    0140: 21 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // !...............
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DC
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000899FA018
[030h 0048 004h]               Image OffsetX : 000003DE
[034h 0052 004h]               Image OffsetY : 00000280

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 DC 5F 41 53 55 53 5F  // BGRT8....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 A0 9F 89 00 00 00 00  // ................
    0030: DE 03 00 00 80 02 00 00                          // ........


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E7
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00001D28
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 6F
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 7464 (0x1D28)

    0000: 43 52 41 54 28 1D 00 00 01 6F 41 4D 44 00 00 00  // CRAT(....oAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 75 00 00 00 01 00 00 00 00 00 00 00  // ....u...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 20 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  //  ...............
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A0  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 60 07 00 00 00 40 00 00 00  // .......`....@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0560: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0570: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    05F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0620: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0630: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0660: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0670: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    06E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    06F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0720: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0730: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0760: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0770: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    07A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    07B0: 10 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    07E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    07F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0820: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0830: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0860: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0870: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    08A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    08B0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    08E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    08F0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0920: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0930: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0960: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0970: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    09B0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    09F0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0A20: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0A30: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0A60: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0A70: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0AA0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0AB0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0AE0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0AF0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0B20: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0B30: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0B60: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0B70: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0BA0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0BB0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0BE0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0BF0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0C20: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0C30: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0C60: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0C70: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CA0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0CB0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CE0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0CF0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0D20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D30: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0D60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0D70: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DB0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0DE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0DF0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0E20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E30: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0E60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0E70: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0EA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EB0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0EE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0EF0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0F20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0F30: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0F60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0F70: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0FA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0FB0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0FE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0FF0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    1000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1010: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1020: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1030: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1050: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1060: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1070: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1090: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    10A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    10B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    10C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    10E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    10F0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1120: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1130: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1150: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1160: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1170: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1190: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    11A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    11B0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    11C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    11E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    11F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1210: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1220: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1230: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1250: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1260: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1270: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1290: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    12A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    12B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    12E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    12F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1310: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1320: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1330: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1360: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1370: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1390: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    13A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    13B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    13C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    13E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    13F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1410: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1420: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1430: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1450: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1460: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1470: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1490: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    14A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    14B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    14C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    14E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    14F0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1510: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1520: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1530: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1550: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1560: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1570: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    15A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    15B0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    15C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    15E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    15F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1610: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1620: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1630: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1650: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1660: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1670: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1690: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    16A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    16B0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    16C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    16E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    16F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1710: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1720: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1730: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1750: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1760: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1770: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1790: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    17A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    17B0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    17E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    17F0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1810: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1820: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1830: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1860: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1870: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1890: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    18A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    18B0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    18E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    18F0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1910: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1920: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1930: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1950: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1960: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1970: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1990: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    19A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    19B0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    19E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    19F0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1A20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1A30: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1A60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1A70: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1AA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1AB0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1AE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1AF0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1B20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1B30: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1B60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1B70: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1BA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1BB0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1BE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1BF0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1C20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1C30: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1C60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1C70: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1CA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1CB0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1CE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1CF0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1D20: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "_ASUS_", "Notebook", 0x01072009)
{
    External (____, UnknownObj)
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.ATKD.MAKY, UnknownObj)
    External (_SB_.ATKD.WMNB.PANL, UnknownObj)
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.NPCF, DeviceObj)
    External (_SB_.NPCF.ACBT, IntObj)
    External (_SB_.NPCF.AMAT, IntObj)
    External (_SB_.NPCF.ATPP, IntObj)
    External (_SB_.NPCF.AVRT, IntObj)
    External (_SB_.NPCF.DBAC, IntObj)
    External (_SB_.NPCF.DBDC, IntObj)
    External (_SB_.NPCF.DTPP, IntObj)
    External (_SB_.NPCF.NTCU, MethodObj)    // 0 Arguments
    External (_SB_.NPCF.WM2C, IntObj)
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP19.XHC2.RHUB, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2.RHUB.PRT1, DeviceObj)
    External (_SB_.PCI0.GPP0.GPST, IntObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.EDP1, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.PEGP.MGPU, IntObj)
    External (_SB_.PCI0.GPP0.PEGP.NLIM, IntObj)
    External (_SB_.PCI0.GPP0.SGPC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SBRG.EC0_.SKEY, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SBRG.MBF3, FieldUnitObj)
    External (_SB_.UBTC, DeviceObj)
    External (_SB_.UBTC.CCI0, IntObj)
    External (_SB_.UBTC.CCI1, IntObj)
    External (_SB_.UBTC.CCI2, IntObj)
    External (_SB_.UBTC.CCI3, IntObj)
    External (_SB_.UBTC.MGI0, IntObj)
    External (_SB_.UBTC.MGI1, IntObj)
    External (_SB_.UBTC.MGI2, IntObj)
    External (_SB_.UBTC.MGI3, IntObj)
    External (_SB_.UBTC.MGI4, IntObj)
    External (_SB_.UBTC.MGI5, IntObj)
    External (_SB_.UBTC.MGI6, IntObj)
    External (_SB_.UBTC.MGI7, IntObj)
    External (_SB_.UBTC.MGI8, IntObj)
    External (_SB_.UBTC.MGI9, IntObj)
    External (_SB_.UBTC.MGIA, IntObj)
    External (_SB_.UBTC.MGIB, IntObj)
    External (_SB_.UBTC.MGIC, IntObj)
    External (_SB_.UBTC.MGID, IntObj)
    External (_SB_.UBTC.MGIE, IntObj)
    External (_SB_.UBTC.MGIF, IntObj)
    External (_SB_.UBTC.STS0, IntObj)
    External (_SB_.UBTC.STS1, IntObj)
    External (_SB_.UBTC.STS2, IntObj)
    External (_SB_.UBTC.STS3, IntObj)
    External (_SB_.UBTC.STS4, IntObj)
    External (_SB_.UBTC.STS5, IntObj)
    External (_SB_.UBTC.STS6, IntObj)
    External (_SB_.UBTC.STS7, IntObj)
    External (_SB_.WAT1, MethodObj)    // 0 Arguments
    External (_SB_.WAT2, MethodObj)    // 0 Arguments
    External (_SB_.WOSR, IntObj)
    External (_TZ_.TZ01.CRTM, MethodObj)    // 1 Arguments
    External (_TZ_.TZ01.CRTT, IntObj)
    External (AFN4, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments
    External (TPSL, UnknownObj)

    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (PWEN, 0x07)
    Name (REST, 0x28)
    Name (PWOK, 0x0C)
    Name (IOBS, Zero)
    Name (IOB2, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0x94B51000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0x94B55000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0x96C63E98)
    Name (PPIL, 0x1C)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AMDT, 0x01)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Name (OSFG, Zero)
    Name (EXSI, 0xAB)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xC400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Name (OGAD, 0x96C76698)
    Name (OGSZ, 0x0003)
    OperationRegion (OGNV, SystemMemory, OGAD, OGSZ)
    Field (OGNV, AnyAcc, Lock, Preserve)
    {
        PANL,   8, 
        TPSL,   8, 
        ABOT,   8
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD00, Package (0x08)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x08)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x19
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG2E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG2E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG2F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG2F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG32, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG32, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG33, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG33, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG34, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG34, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xA0000000)
            Name (MBL, 0x5D000000)
            Name (MAB, 0x0000000860000000)
            Name (MAL, 0x000000F5A0000000)
            Name (MAM, 0x000000FDFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000020000000)
                    Name (UMAB, 0x0000000838000000)
                    Name (UMAM, 0x0000000857FFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (D007)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (D00A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (D00B)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (D00C)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0D) /* \_SB_.AG0D */
                    }

                    Return (PG0D) /* \_SB_.PG0D */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Scope (\)
                    {
                        Mutex (PXPX, 0x00)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Device (I2SC)
                    {
                        Name (_HID, "I2SC1002")  // _HID: Hardware ID
                        Name (_CID, "AMD1234")  // _CID: Compatible ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ACPM)
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                        }
                    }
                }

                Device (D011)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG14) /* \_SB_.AG14 */
                    }

                    Return (PG14) /* \_SB_.PG14 */
                }

                Device (D015)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D019)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y18)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1A, 0x04))
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG2E) /* \_SB_.AG2E */
                    }

                    Return (PG2E) /* \_SB_.PG2E */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG2F) /* \_SB_.AG2F */
                    }

                    Return (PG2F) /* \_SB_.PG2F */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG30) /* \_SB_.AG30 */
                    }

                    Return (PG30) /* \_SB_.PG30 */
                }

                Device (GLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG32) /* \_SB_.AG32 */
                    }

                    Return (PG32) /* \_SB_.PG32 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG33) /* \_SB_.AG33 */
                    }

                    Return (PG33) /* \_SB_.PG33 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG34) /* \_SB_.AG34 */
                    }

                    Return (PG34) /* \_SB_.PG34 */
                }

                Device (D009)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (XL19, 0, NotSerialized)
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (XL08, 0, NotSerialized)
        {
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
        }

        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (XS3X, Package (0x04)
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.LPTS (Arg0)
            XPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        XWAK (Arg0)
        \_SB.LWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x0E)
    Name (UR2I, 0x05)
    Name (UR3I, 0x0F)
    Name (UR4I, 0x0D)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x16)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }
            ElseIf ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y19)
                    IRQNoFlags (_Y1A)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y19._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y19._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y1A._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (Zero) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y1B)
                    IRQNoFlags (_Y1C)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y1B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y1B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y1C._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (One) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y1D)
                    IRQNoFlags (_Y1E)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y1D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y1D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y1E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x02) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y1F)
                    IRQNoFlags (_Y20)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y1F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y1F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y20._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x03) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PS2K)
        {
            Name (_HID, "MSFT0001")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                KBFG = Arg0
            }
        }

        Scope (\)
        {
            Name (KBFG, One)
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y21)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y22)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y23)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y24)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y25,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                )
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                )
            Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y26)
            {
                0x00000031,
            }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y21._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y21._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y22._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y22._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y23._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y23._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) || (TMRQ == 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y24._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y24._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y25._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y22._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02))
                {
                    CreateDWordField (Arg0, 0x1D, SRQ0)
                    CreateDWordField (CRSI, \_SB.TPM._Y26._INT, SIRQ)  // _INT: Interrupts
                    SIRQ = SRQ0 /* \_SB_.TPM_._SRS.SRQ0 */
                    CreateBitField (Arg0, 0xD9, ITRS)
                    CreateBitField (CRSI, \_SB.TPM._Y26._HE, LTRS)  // _HE_: High-Edge
                    LTRS = ITRS /* \_SB_.TPM_._SRS.ITRS */
                    ITRV = ITRS /* \_SB_.TPM_._SRS.ITRS */
                    CreateBitField (Arg0, 0xDA, SILV)
                    CreateBitField (CRSI, \_SB.TPM._Y26._LL, SLLV)  // _LL_: Low Level
                    SLLV = SILV /* \_SB_.TPM_._SRS.SILV */
                    ILVV = SILV /* \_SB_.TPM_._SRS.SILV */
                }
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y25._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y25._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Name (BDID, 0xFF)
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                }

                Device (WCAM)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.WCAM._PLD.PLDP */
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC1 */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x0A, 
                    Zero, 
                    Zero
                })
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDP) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLDP */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x0A, 
                    Zero, 
                    Zero
                })
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDP) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLDP */
                }
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDP) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.PLDP */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLDP) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.PLDP */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.UPC1 */
                }

                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        Zero, 
                        Zero
                    })
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x91, 0x0C, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PRT1.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (PLDP) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PRT1.PLDP */
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x91, 0x0C, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PRT2.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (PLDP) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PRT2.PLDP */
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.UPC1 */
                }

                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        Zero, 
                        Zero
                    })
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x91, 0x0C, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PRT1.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (PLDP) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PRT1.PLDP */
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x91, 0x0C, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PRT2.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (PLDP) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PRT2.PLDP */
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.GP19.XHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.PLD1 */
                }
            }
        }
    }

    OperationRegion (EXBU, SystemMemory, 0x96C64018, 0x0C57)
    Field (EXBU, AnyAcc, Lock, Preserve)
    {
        FADR,   32, 
        FSIZ,   16, 
        FSTA,   16, 
        FSFN,   8, 
        AMLA,   32, 
        CCNM,   8, 
        FSMI,   8, 
        ALPR,   32, 
        ACPF,   8, 
        ALSP,   8, 
        ALAE,   8, 
        LBTN,   8, 
        KBLC,   8, 
        KBLV,   8, 
        WLDP,   8, 
        BTDP,   8, 
        TPME,   8, 
        INSK,   8, 
        LBLV,   8, 
        LBLS,   8, 
        EDID,   32, 
        WNVA,   32, 
        WNVB,   32, 
        WNVC,   32, 
        WNVD,   32, 
        CALX,   32, 
        AII0,   32, 
        AII1,   32, 
        AII2,   32, 
        AII3,   32, 
        AII4,   32, 
        UMAM,   32, 
        DGPM,   32, 
        CUMA,   8, 
        AACI,   8, 
        GDPM,   8, 
        SDPM,   8, 
        IEB0,   3072
    }

    Scope (_SB.PCI0.SBRG)
    {
        Name (ECOK, One)
        Name (DNOT, 0xD1)
        Name (RDNT, Zero)
        Name (LA0V, Zero)
        Name (SLED, Zero)
        Name (BTSS, Zero)
        Name (WISS, Zero)
        Name (MSIN, Zero)
        Name (MO2B, Zero)
        Name (DBBK, Zero)
        Name (Q9DF, Zero)
        Name (MDSA, Zero)
        Name (MDSE, Zero)
        Name (NDSE, Zero)
        Name (KBFL, Zero)
        OperationRegion (IT55, SystemMemory, 0xFE700600, 0x0100)
        Field (IT55, ByteAcc, Lock, Preserve)
        {
            Offset (0x01), 
            Offset (0x02), 
            FA1L,   8, 
            FA1H,   8, 
            RCPU,   8, 
            Offset (0x06), 
                ,   1, 
            GC6S,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x07), 
            Offset (0x08), 
            Offset (0x09), 
            Offset (0x0A), 
            RVGA,   8, 
            Offset (0x0C), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10), 
            Offset (0x11), 
            Offset (0x12), 
            Offset (0x13), 
            Offset (0x14), 
            Offset (0x15), 
            Offset (0x16), 
            Offset (0x17), 
            GPG1,   8, 
            Offset (0x19), 
            Offset (0x1A), 
            Offset (0x1B), 
            Offset (0x1C), 
            Offset (0x1D), 
            MSCK,   1, 
            HOTF,   1, 
            Offset (0x1E), 
            PTSF,   8, 
            Offset (0x20), 
            Offset (0x21), 
            Offset (0x22), 
            FA3L,   8, 
            FA3H,   8, 
            FA2L,   8, 
            FA2H,   8, 
            CHBS,   8, 
            Offset (0x28), 
            Offset (0x29), 
            Offset (0x2A), 
            Offset (0x2B), 
            Offset (0x2C), 
            Offset (0x2D), 
            Offset (0x2E), 
            Offset (0x2F), 
                ,   1, 
                ,   1, 
                ,   1, 
            ESCI,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x30), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x31), 
            Offset (0x32), 
            Offset (0x33), 
            Offset (0x34), 
            Offset (0x35), 
            Offset (0x36), 
            Offset (0x37), 
            Offset (0x38), 
            Offset (0x39), 
            Offset (0x3A), 
            KBTP,   8, 
            Offset (0x3C), 
            Offset (0x3D), 
            VGAT,   8, 
            Offset (0x3F), 
            Offset (0x40), 
            LIDC,   1, 
                ,   1, 
            TPWS,   1, 
            ACIN,   1, 
            PDIN,   1, 
            SOKY,   1, 
            ACNG,   1, 
            Offset (0x41), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x42), 
            PFB1,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            CFB1,   1, 
                ,   1, 
                ,   1, 
            Offset (0x43), 
            DFB1,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x44), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x45), 
            Offset (0x46), 
            Offset (0x47), 
            Offset (0x48), 
            Offset (0x49), 
            Offset (0x4A), 
            Offset (0x4B), 
            Offset (0x4C), 
            Offset (0x4D), 
            M64D,   8, 
            ECA4,   8, 
            Offset (0x50), 
            Offset (0x51), 
            M651,   8, 
            M652,   8, 
            ECAA,   8, 
            ECAB,   8, 
            ECAC,   8, 
            ECAD,   8, 
            ECAE,   8, 
            ECAF,   8, 
                ,   1, 
                ,   1, 
                ,   1, 
            PBDF,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x5A), 
                ,   1, 
            ECS4,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x5B), 
            ECB9,   8, 
            ECBA,   8, 
            M65D,   8, 
            M65E,   8, 
            ECBF,   8, 
            ECC0,   8, 
            M661,   8, 
            M662,   8, 
            ECC5,   8, 
            ECC6,   8, 
            M665,   8, 
            M666,   8, 
            Offset (0x68), 
            Offset (0x69), 
            M669,   8, 
            Offset (0x6B), 
            Offset (0x6C), 
                ,   1, 
                ,   1, 
                ,   1, 
            ITEP,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x6D), 
            Offset (0x6E), 
            M66E,   8, 
            BMEH,   8, 
            M670,   8, 
            M671,   8, 
            M672,   8, 
            M673,   8, 
            BCM2,   96, 
            Offset (0x81), 
            Offset (0x82), 
            Offset (0x83), 
            Offset (0x84), 
            BCM3,   96, 
            Offset (0x91), 
            Offset (0x92), 
            Offset (0x93), 
            Offset (0x94), 
            M694,   8, 
            M695,   8, 
            Offset (0x97), 
            DCTH,   8, 
            Offset (0x99), 
            Offset (0x9A), 
            Offset (0x9B), 
            Offset (0x9C), 
            Offset (0x9D), 
            Offset (0x9E), 
            Offset (0x9F), 
            M69F,   8, 
            M6A0,   8, 
            Offset (0xA2), 
            ACTH,   8, 
            Offset (0xA4), 
            Offset (0xA5), 
            Offset (0xA6), 
            Offset (0xA7), 
            Offset (0xA8), 
            Offset (0xA9), 
            Offset (0xAA), 
            Offset (0xAB), 
            Offset (0xAC), 
            Offset (0xAD), 
            Offset (0xAE), 
            Offset (0xAF), 
            Offset (0xB0), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            TC80,   1, 
                ,   1, 
                ,   1, 
            Offset (0xB1), 
            M6B1,   8, 
            M6B2,   8, 
            Offset (0xB4), 
            M6B4,   8, 
            Offset (0xB6), 
            Offset (0xB7), 
            Offset (0xB8), 
            EEV0,   8, 
            EEV1,   8, 
            EEV2,   8, 
            EEV3,   8, 
            EEV4,   8, 
            EEV5,   8, 
            EEV6,   8, 
            EEV7,   8, 
            Offset (0xC1), 
            Offset (0xC2), 
            BDIC,   1, 
                ,   1, 
            MSAS,   1, 
            RSSF,   1, 
            Offset (0xC3), 
            Offset (0xC4), 
            Offset (0xC5), 
            Offset (0xC6), 
            Offset (0xC7), 
            Offset (0xC8), 
            Offset (0xC9), 
                ,   1, 
            PHCS,   1, 
            SFAN,   1, 
            CFAN,   1, 
            GFAN,   1, 
                ,   1, 
                ,   1, 
            Offset (0xCA), 
            Offset (0xCB), 
            M6CB,   8, 
            Offset (0xCD), 
            Offset (0xCE), 
            CMMV,   8, 
            Offset (0xD0), 
            Offset (0xD1), 
            Offset (0xD2), 
            Offset (0xD3), 
            Offset (0xD4), 
            Offset (0xD5), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Q4HU,   1, 
                ,   1, 
            Q4LU,   1, 
            M6D6,   8, 
            M6D7,   8, 
            M6D8,   8, 
            M6D9,   8, 
            Offset (0xDB), 
            Offset (0xDC), 
            Q4HI,   8, 
            Q4LO,   8, 
            M6DE,   8, 
            M6DF,   8, 
            M6E0,   8, 
            PDWA,   8, 
            Offset (0xE3), 
            Offset (0xE4), 
            Offset (0xE5), 
            Offset (0xE6), 
            Offset (0xE7), 
            Offset (0xE8), 
            Offset (0xE9), 
            Offset (0xEA), 
            Offset (0xEB), 
            Offset (0xEC), 
            M6EC,   8, 
            M6ED,   8, 
            Offset (0xEF), 
            M6EF,   8, 
            M6F0,   8, 
            M6F1,   8, 
            Offset (0xF3), 
            FPPT,   8, 
            Offset (0xF5), 
            Offset (0xF6), 
            Offset (0xF7), 
            Offset (0xF8), 
            SPPT,   8, 
            STAP,   8, 
            Offset (0xFB), 
            Offset (0xFC), 
            Offset (0xFD), 
            Offset (0xFE), 
            Offset (0xFF), 
            Offset (0x100)
        }

        OperationRegion (MB00, SystemMemory, 0xFE700B00, 0x0100)
        Field (MB00, ByteAcc, Lock, Preserve)
        {
            SMPL,   8, 
            SMSS,   8, 
            SMAD,   8, 
            SMCD,   8, 
            SM00,   8, 
            SM01,   8, 
            SM02,   8, 
            SM03,   8, 
            SM04,   8, 
            SM05,   8, 
            SM06,   8, 
            SM07,   8, 
            SM08,   8, 
            SM09,   8, 
            SM0A,   8, 
            SM0B,   8, 
            SM0C,   8, 
            SM0D,   8, 
            SM0E,   8, 
            SM0F,   8, 
            SM10,   8, 
            SM11,   8, 
            SM12,   8, 
            SM13,   8, 
            SM14,   8, 
            SM15,   8, 
            SM16,   8, 
            SM17,   8, 
            SM18,   8, 
            SM19,   8, 
            SM1A,   8, 
            SM1B,   8, 
            SM1C,   8, 
            SM1D,   8, 
            SM1E,   8, 
            SM1F,   8, 
            SMCT,   8, 
            Offset (0x30), 
            MB30,   8, 
            MB31,   8, 
            MB32,   8, 
            MB33,   8, 
            MB34,   8, 
            Offset (0x3B), 
            MB3B,   8, 
            MB3C,   8, 
            MB3D,   8, 
            MB3E,   8, 
            MB3F,   8, 
            MB40,   8, 
            MB41,   8, 
            MB42,   8, 
            MB43,   8, 
            MB44,   8, 
            MB45,   8, 
            MB46,   8, 
            MB47,   8, 
            MB48,   8, 
            MB49,   8, 
            MB4A,   8, 
            MB4B,   8, 
            MB4C,   8, 
            MB4D,   8, 
            MB4E,   8, 
            MB4F,   8, 
            MB50,   8, 
            MB51,   8, 
            MB52,   8, 
            MB53,   8, 
            Offset (0x61), 
            MB61,   8, 
            MB62,   8, 
            Offset (0x75), 
            ECST,   1, 
            BSST,   1, 
            Offset (0x76), 
            Offset (0x7C), 
            MB7C,   8, 
            Offset (0x86), 
            MB86,   8, 
            Offset (0x88), 
            MB88,   8, 
            MB89,   8, 
            MB8A,   8, 
            MB8B,   8, 
            Offset (0xD0), 
            DBCP,   8, 
            MBD1,   8, 
            MBD2,   8, 
            MBD3,   8, 
            MBD4,   8, 
            MBD5,   8, 
            MBD6,   8, 
            MBD7,   8, 
            MBD8,   8, 
            MBD9,   8, 
            MBDA,   8, 
            Offset (0xDF), 
            MBDF,   8, 
            Offset (0xE7), 
            WDLF,   1, 
            Offset (0xE8), 
            Offset (0xF0), 
            MBF0,   8, 
            MBF1,   8, 
            MBF2,   8, 
            MBF3,   8, 
            MBF4,   8, 
            MBF5,   8, 
            MBF6,   8, 
            MBF7,   8, 
            Offset (0xF9), 
            FANM,   8, 
            IVGA,   1, 
            L95I,   1, 
            CPU9,   1, 
            HIDP,   1, 
            WM2S,   1, 
            RSTF,   1, 
            O120,   1, 
            NEDP,   1, 
            DDSS,   1, 
            HDRP,   1, 
            DOMF,   1, 
            BRMF,   1, 
            Offset (0xFC), 
            MSDL,   8, 
            CMAX,   8, 
            BH30,   8, 
            ODPL,   8
        }

        OperationRegion (MC00, SystemMemory, 0xFE700C00, 0x0100)
        Field (MC00, ByteAcc, Lock, Preserve)
        {
            VER1,   8, 
            VER2,   8, 
            RSV1,   8, 
            RSV2,   8, 
            CCI0,   8, 
            CCI1,   8, 
            CCI2,   8, 
            CCI3,   8, 
            CTL0,   8, 
            CTL1,   8, 
            CTL2,   8, 
            CTL3,   8, 
            CTL4,   8, 
            CTL5,   8, 
            CTL6,   8, 
            CTL7,   8, 
            MGI0,   8, 
            MGI1,   8, 
            MGI2,   8, 
            MGI3,   8, 
            MGI4,   8, 
            MGI5,   8, 
            MGI6,   8, 
            MGI7,   8, 
            MGI8,   8, 
            MGI9,   8, 
            MGIA,   8, 
            MGIB,   8, 
            MGIC,   8, 
            MGID,   8, 
            MGIE,   8, 
            MGIF,   8, 
            MGO0,   8, 
            MGO1,   8, 
            MGO2,   8, 
            MGO3,   8, 
            MGO4,   8, 
            MGO5,   8, 
            MGO6,   8, 
            MGO7,   8, 
            MGO8,   8, 
            MGO9,   8, 
            MGOA,   8, 
            MGOB,   8, 
            MGOC,   8, 
            MGOD,   8, 
            MGOE,   8, 
            MGOF,   8, 
            Offset (0x58), 
            MC58,   32, 
            MC5C,   32, 
            MC60,   32, 
            MC64,   32, 
            MC68,   32, 
            MC6C,   8, 
            MC6D,   8, 
            MC6E,   8, 
            MC6F,   8, 
            MC70,   8, 
            MC71,   8, 
            MC72,   8, 
            MC73,   8, 
            MC74,   8, 
            MC75,   8, 
            MC76,   8, 
            MC77,   8, 
            MC78,   8, 
            MC79,   8, 
            MC7A,   8, 
            MC7B,   8, 
            MC7C,   8, 
            MC7D,   8, 
            Offset (0xCD), 
            MCCD,   8
        }

        OperationRegion (IO, SystemIO, 0x60, 0x07)
        Field (IO, ByteAcc, Lock, Preserve)
        {
            IO60,   8, 
            Offset (0x04), 
            IO64,   8
        }

        Field (IO, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            OUTS,   1, 
            INPS,   1
        }

        OperationRegion (I68C, SystemIO, 0x68, 0x05)
        Field (I68C, ByteAcc, NoLock, Preserve)
        {
            IO68,   8, 
            Offset (0x02), 
            Offset (0x03), 
            Offset (0x04), 
            IO6C,   8
        }

        Method (WIBF, 1, Serialized)
        {
            Local1 = Zero
            While (One)
            {
                Local0 = IO6C /* \_SB_.PCI0.SBRG.IO6C */
                Local0 &= 0x02
                If ((Local0 != 0x02))
                {
                    Break
                }

                If ((Local1 >= 0x00010000))
                {
                    Break
                }

                Local1++
            }
        }

        Method (COBF, 1, Serialized)
        {
            WIBF (Arg0)
            If (((IO6C && One) == One))
            {
                Local0 = IO68 /* \_SB_.PCI0.SBRG.IO68 */
                WIBF (Arg0)
            }
        }

        Method (SECC, 2, Serialized)
        {
            COBF (0x6C)
            IO6C = Arg0
            WIBF (0x6C)
            IO68 = Arg1
            WIBF (0x6C)
        }

        Method (GECD, 1, NotSerialized)
        {
            COBF (0x6C)
            IO6C = Arg0
            WIBF (0x6C)
            COBF (0x6C)
            Return (IO68) /* \_SB_.PCI0.SBRG.IO68 */
        }

        Method (SEC1, 1, Serialized)
        {
            COBF (0x6C)
            IO6C = Arg0
            WIBF (0x6C)
        }

        OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
        Field (PSMI, ByteAcc, NoLock, Preserve)
        {
            APMC,   8, 
            APMD,   8
        }

        Method (OSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE9
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        OperationRegion (XCMS, SystemIO, 0x72, 0x02)
        Field (XCMS, ByteAcc, NoLock, Preserve)
        {
            XCMX,   8, 
            XCMA,   8
        }

        IndexField (XCMX, XCMA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x51), 
            UMAT,   8, 
            BAPS,   8, 
            G97D,   8, 
            WM29,   8, 
            XC55,   8, 
            Offset (0x60), 
            CS60,   8, 
            CS61,   8, 
            CS62,   8, 
            CS63,   8, 
            CS64,   8, 
            CS65,   8, 
            CS66,   8, 
            CS67,   8, 
            CS68,   8, 
            CS69,   8, 
            CS6A,   8, 
            CS6B,   8, 
            CS6C,   8, 
            CS6D,   8, 
            CS6E,   8, 
            CS6F,   8
        }

        OperationRegion (GRST, SystemMemory, 0xFED815A2, One)
        Field (GRST, ByteAcc, NoLock, Preserve)
        {
                ,   6, 
            REST,   1, 
            Offset (0x01)
        }

        OperationRegion (GPWE, SystemMemory, 0xFED8151E, One)
        Field (GPWE, ByteAcc, NoLock, Preserve)
        {
                ,   6, 
            PWEN,   1, 
            Offset (0x01)
        }

        OperationRegion (GPWK, SystemMemory, 0xFED81532, One)
        Field (GPWK, ByteAcc, NoLock, Preserve)
        {
            PWOK,   1, 
            Offset (0x01)
        }

        Name (DPTB, Buffer (0x22){})
        Method (PDPT, 1, Serialized)
        {
            CreateWordField (DPTB, Zero, BFSZ)
            CreateByteField (DPTB, 0x02, CID1)
            CreateDWordField (DPTB, 0x03, BVL1)
            CreateByteField (DPTB, 0x07, CID2)
            CreateDWordField (DPTB, 0x08, BVL2)
            CreateByteField (DPTB, 0x0C, CID3)
            CreateDWordField (DPTB, 0x0D, BVL3)
            CreateByteField (DPTB, 0x11, CID4)
            CreateDWordField (DPTB, 0x12, BVL4)
            BFSZ = 0x16
            CID1 = 0x05
            CID2 = 0x06
            CID3 = 0x07
            CID4 = 0x08
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    BVL1 = 0x88B8
                    BVL2 = 0xFDE8
                    BVL3 = 0xD2F0
                    BVL4 = 0x05
                }
                Case (0x02)
                {
                    BVL1 = 0x6D60
                    BVL2 = 0xFDE8
                    BVL3 = 0xD2F0
                    BVL4 = 0x05
                }
                Default
                {
                    BVL1 = 0xD2F0
                    BVL2 = 0xFDE8
                    BVL3 = 0xD2F0
                    BVL4 = 0x05
                }

            }

            If (((Arg0 >= Zero) && (Arg0 <= 0x04)))
            {
                ALIB (0x0C, DPTB)
            }
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (S2SC, 1, Serialized)
            {
            }
        }

        Device (ADP0)
        {
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (XX00, Buffer (0x03){})
            Name (ACDC, 0xFF)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECOK)
                {
                    SACM ()
                    CreateWordField (XX00, Zero, SSZE)
                    CreateByteField (XX00, 0x02, ACST)
                    SSZE = 0x03
                    If ((ACPF != ACDC))
                    {
                        If ((ACPF == One))
                        {
                            AFN4 (One)
                            ACST = Zero
                        }
                        Else
                        {
                            AFN4 (0x02)
                            ACST = One
                        }

                        ALIB (One, XX00)
                        ACDC = ACPF /* \ACPF */
                    }

                    Return (ACPF) /* \ACPF */
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (ITOS, 1, NotSerialized)
            {
                Local0 = ""
                Local1 = 0x04
                While (Local1)
                {
                    Local1--
                    Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                    Local2 = DerefOf (CHAR [Local4])
                    Concatenate (Local0, Local2, Local5)
                    Local0 = Local5
                }

                Return (Local0)
            }

            Name (CHAR, Package (0x10)
            {
                "0", 
                "1", 
                "2", 
                "3", 
                "4", 
                "5", 
                "6", 
                "7", 
                "8", 
                "9", 
                "A", 
                "B", 
                "C", 
                "D", 
                "E", 
                "F"
            })
            Name (BACY, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            Name (BIF1, Package (0x0D)
            {
                Zero, 
                0x10CC, 
                0x10CC, 
                One, 
                0x3A98, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "NAME", 
                "0000", 
                "Lion", 
                "Manuf"
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECOK)
                {
                    If (PFB1)
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (BST1, Package (0x04)
            {
                One, 
                0x0A90, 
                0x1000, 
                0x23A0
            })
            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (ECOK)
                {
                    Local0 = ECAE /* \_SB_.PCI0.SBRG.ECAE */
                    Local5 = ECAF /* \_SB_.PCI0.SBRG.ECAF */
                    Local5 <<= 0x08
                    Local0 += Local5
                    BIF1 [0x04] = Local0
                    Local2 = Local0
                    Local0 = ECAA /* \_SB_.PCI0.SBRG.ECAA */
                    Local5 = ECAB /* \_SB_.PCI0.SBRG.ECAB */
                    Local5 <<= 0x08
                    Local0 += Local5
                    Local0 *= Local2
                    Divide (Local0, 0x03E8, Local3, Local0)
                    BIF1 [0x02] = Local0
                    Local1 = ECAC /* \_SB_.PCI0.SBRG.ECAC */
                    Local5 = ECAD /* \_SB_.PCI0.SBRG.ECAD */
                    Local5 <<= 0x08
                    Local1 += Local5
                    Local1 *= Local2
                    Divide (Local1, 0x03E8, Local3, Local1)
                    BIF1 [One] = Local1
                    BIF1 [0x08] = Local0
                    BIF1 [0x09] = BCM3 /* \_SB_.PCI0.SBRG.BCM3 */
                    Local0 = ECB9 /* \_SB_.PCI0.SBRG.ECB9 */
                    Local5 = ECBA /* \_SB_.PCI0.SBRG.ECBA */
                    Local5 <<= 0x08
                    Local0 += Local5
                    Local1 = ITOS (Local0)
                    BIF1 [0x0A] = Local1
                    BACY [Zero] = MB30 /* \_SB_.PCI0.SBRG.MB30 */
                    BACY [One] = MB31 /* \_SB_.PCI0.SBRG.MB31 */
                    BACY [0x02] = MB32 /* \_SB_.PCI0.SBRG.MB32 */
                    BACY [0x03] = MB33 /* \_SB_.PCI0.SBRG.MB33 */
                    BACY [0x04] = MB34 /* \_SB_.PCI0.SBRG.MB34 */
                    BIF1 [0x0B] = ToString (BACY, Ones)
                    BIF1 [0x0C] = BCM2 /* \_SB_.PCI0.SBRG.BCM2 */
                }
                Else
                {
                    BIF1 [One] = 0xFFFFFFFF
                    BIF1 [0x04] = 0xFFFFFFFF
                }

                Return (BIF1) /* \_SB_.PCI0.SBRG.BAT0.BIF1 */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECOK)
                {
                    Local1 = (CFB1 & One)
                    Local0 = (DFB1 & One)
                    Local2 = (Local1 << One)
                    Local3 = (Local0 | Local2)
                    Local2 = ECC6 /* \_SB_.PCI0.SBRG.ECC6 */
                    Local1 = (Local2 * 0x0100)
                    Local0 = ECC5 /* \_SB_.PCI0.SBRG.ECC5 */
                    Local1 += Local0
                    Local4 = (ECAE + (ECAF << 0x08))
                    Local1 *= Local4
                    Divide (Local1, 0x03E8, Local0, Local1)
                    BST1 [One] = Local1
                    Local0 = ECA4 /* \_SB_.PCI0.SBRG.ECA4 */
                    If ((Local0 < 0x0F))
                    {
                        Local3 |= 0x04
                    }

                    If ((BH30 == 0x50))
                    {
                        Local3 |= 0x08
                    }

                    BST1 [Zero] = Local3
                    Local1 = DerefOf (BIF1 [0x02])
                    Local2 = (Local1 * Local0)
                    Divide (Local2, 0x64, Local3, Local2)
                    Local2 += One
                    BST1 [0x02] = Local2
                    Local3 = DerefOf (BIF1 [0x04])
                    Local0 = ECBF /* \_SB_.PCI0.SBRG.ECBF */
                    Local3 = ECC0 /* \_SB_.PCI0.SBRG.ECC0 */
                    Local3 <<= 0x08
                    Local3 += Local0
                    BST1 [0x03] = Local3
                }
                Else
                {
                    BST1 [Zero] = One
                    BST1 [One] = 0xFFFFFFFF
                    BST1 [0x02] = 0xFFFFFFFF
                    BST1 [0x03] = 0xFFFFFFFF
                }

                Return (BST1) /* \_SB_.PCI0.SBRG.BAT0.BST1 */
            }
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (ECOK)
                {
                    If (LIDC)
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }
        }

        Name (LEGA, Package (0x35)
        {
            0x13, 
            0x14, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x25, 
            0x36, 
            0x4B, 
            0x91, 
            0x95, 
            0x96, 
            0x97, 
            0x98, 
            0x99, 
            0x9A, 
            0x12, 
            0xA9, 
            0x9D, 
            0x9E, 
            0x9F, 
            0xA0, 
            0xA8, 
            0xA7, 
            0xA1, 
            0xAA, 
            0xB0, 
            0xB1, 
            0x4E, 
            0xD3, 
            0x9B, 
            0x9C, 
            0xD4, 
            0xD5, 
            0xD6, 
            0xD8, 
            0xD9, 
            0xDA, 
            0x87, 
            0x88, 
            0x89, 
            0x8B, 
            0x8C, 
            0x8D, 
            0x8E, 
            0x8F, 
            0x90, 
            0x8A, 
            0x63, 
            0x64, 
            0xDE, 
            0xDB, 
            0xE0
        })
        Method (LGPA, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    ADTM (Zero)
                    PWCG (Arg0)
                }
                Case (One)
                {
                    If (LIDC)
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = 0x02
                    }

                    ALED (Local0)
                    ^EC0._Q80 ()
                }
                Case (0x02)
                {
                }
                Case (0x03)
                {
                    PWCG (Arg0)
                }
                Case (0x04)
                {
                    ^EC0._Q61 ()
                }
                Case (0x05)
                {
                    CACN ()
                }
                Case (0x06)
                {
                }
                Case (0x07)
                {
                    ADTM (One)
                }
                Case (0x08)
                {
                }
                Case (0x09)
                {
                    ^^^UBTC.MGI0 = MGI0 /* \_SB_.PCI0.SBRG.MGI0 */
                    ^^^UBTC.MGI1 = MGI1 /* \_SB_.PCI0.SBRG.MGI1 */
                    ^^^UBTC.MGI2 = MGI2 /* \_SB_.PCI0.SBRG.MGI2 */
                    ^^^UBTC.MGI3 = MGI3 /* \_SB_.PCI0.SBRG.MGI3 */
                    ^^^UBTC.MGI4 = MGI4 /* \_SB_.PCI0.SBRG.MGI4 */
                    ^^^UBTC.MGI5 = MGI5 /* \_SB_.PCI0.SBRG.MGI5 */
                    ^^^UBTC.MGI6 = MGI6 /* \_SB_.PCI0.SBRG.MGI6 */
                    ^^^UBTC.MGI7 = MGI7 /* \_SB_.PCI0.SBRG.MGI7 */
                    ^^^UBTC.MGI8 = MGI8 /* \_SB_.PCI0.SBRG.MGI8 */
                    ^^^UBTC.MGI9 = MGI9 /* \_SB_.PCI0.SBRG.MGI9 */
                    ^^^UBTC.MGIA = MGIA /* \_SB_.PCI0.SBRG.MGIA */
                    ^^^UBTC.MGIB = MGIB /* \_SB_.PCI0.SBRG.MGIB */
                    ^^^UBTC.MGIC = MGIC /* \_SB_.PCI0.SBRG.MGIC */
                    ^^^UBTC.MGID = MGID /* \_SB_.PCI0.SBRG.MGID */
                    ^^^UBTC.MGIE = MGIE /* \_SB_.PCI0.SBRG.MGIE */
                    ^^^UBTC.MGIF = MGIF /* \_SB_.PCI0.SBRG.MGIF */
                    ^^^UBTC.CCI0 = CCI0 /* \_SB_.PCI0.SBRG.CCI0 */
                    ^^^UBTC.CCI1 = CCI1 /* \_SB_.PCI0.SBRG.CCI1 */
                    ^^^UBTC.CCI2 = CCI2 /* \_SB_.PCI0.SBRG.CCI2 */
                    ^^^UBTC.CCI3 = CCI3 /* \_SB_.PCI0.SBRG.CCI3 */
                    Notify (UBTC, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    L95I = One
                    NOD2 (0xD2)
                }
                Case (0x0B)
                {
                }
                Case (0x0C)
                {
                }
                Case (0x0D)
                {
                }
                Case (0x0E)
                {
                    ATKM (0xB4)
                }
                Case (0x0F)
                {
                    If (ATKP)
                    {
                        O120 = One
                        ^^^ATKD.IANE (0xE5)
                    }
                }
                Case (0x10)
                {
                    ADTM (Zero)
                    PWCG (Arg0)
                }
                Case (0x11)
                {
                }
                Case (0x12)
                {
                    Q9DF = One
                    PPAB (Zero)
                }
                Case (0x13)
                {
                    PPAB (One)
                    Q9DF = Zero
                }
                Case (0x14)
                {
                }
                Case (0x15)
                {
                    LA0V = VGAT /* \_SB_.PCI0.SBRG.VGAT */
                    SID2 ()
                }
                Case (0x16)
                {
                    CPWF (One)
                    M6CK (0x0A)
                }
                Case (0x17)
                {
                    Local0 = Zero
                    If ((RSTF == One))
                    {
                        Local0 = FANM /* \_SB_.PCI0.SBRG.FANM */
                        RSTF = Zero
                    }

                    STTM (Local0)
                }
                Case (0x18)
                {
                    If ((M6EF == One))
                    {
                        Local0 = 0xD2
                    }
                    Else
                    {
                        Local0 = 0xD1
                    }

                    NOD2 (Local0)
                }
                Case (0x19)
                {
                    Switch (MBD9)
                    {
                        Case (One)
                        {
                            SECC (0x46, One)
                            M6F0 = 0x64
                            M6F1 = 0x64
                            M6B2 = 0x7D
                        }
                        Case (0x02)
                        {
                            SECC (0x46, One)
                            M6F0 = MBD1 /* \_SB_.PCI0.SBRG.MBD1 */
                            M6F1 = MBD2 /* \_SB_.PCI0.SBRG.MBD2 */
                            M6B2 = MBD3 /* \_SB_.PCI0.SBRG.MBD3 */
                        }
                        Case (0x03)
                        {
                            SECC (0x3F, One)
                            SECC (0x4D, One)
                        }
                        Case (0x04)
                        {
                            SECC (0x3F, Zero)
                            SECC (0x4D, Zero)
                        }
                        Case (0x05)
                        {
                            NOD2 (MBDA)
                        }
                        Case (0x06)
                        {
                            Local0 = KBTP /* \_SB_.PCI0.SBRG.KBTP */
                            Local1 = Zero
                            If (Ones)
                            {
                                Local1 = M009 (0x12)
                            }

                            Local1 <<= 0x02
                            Local0 += Local1
                        }
                        Case (0x07)
                        {
                            ^^^NPCF.NTCU ()
                        }
                        Default
                        {
                        }

                    }
                }
                Case (0x1A)
                {
                    ALED (Zero)
                    SLED = Zero
                }
                Case (0x1B)
                {
                    ALED (One)
                    SLED = Zero
                }
                Case (0x1C)
                {
                }
                Case (0x1D)
                {
                    ATKM (0xB8)
                }
                Case (0x1E)
                {
                    Notify (^^GPP0.PEGP, 0xD5) // Hardware-Specific
                }
                Case (0x1F)
                {
                    Notify (^^GPP0.PEGP, DNOT)
                }
                Case (0x20)
                {
                    ATKM (0x98)
                }
                Case (0x21)
                {
                    If ((^^^NPCF.ACBT != Zero))
                    {
                        ^^^NPCF.ACBT = Zero
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }
                }
                Case (0x22)
                {
                    If ((^^^NPCF.ACBT == Zero))
                    {
                        ^^^NPCF.ACBT = MO2B /* \_SB_.PCI0.SBRG.MO2B */
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }
                }
                Case (0x23)
                {
                    ATKM (0xE5)
                }
                Case (0x24)
                {
                    ADTM (Zero)
                }
                Case (0x25)
                {
                    If ((RSSF == One))
                    {
                        Notify (PWRB, 0x80) // Status Change
                        Sleep (0x0A)
                        ATKM (0x66)
                    }

                    If ((NDSE == Zero))
                    {
                        ATKM (0x68)
                    }
                }
                Case (0x26)
                {
                    ATKM (0x38)
                }
                Case (0x27)
                {
                    ATKM (0x7C)
                }
                Case (0x28)
                {
                    ATKM (0xB5)
                }
                Case (0x29)
                {
                    TPME = One
                    If (TPME)
                    {
                        ATKM (0x6B)
                    }
                    Else
                    {
                        ATKM (0x6F)
                    }
                }
                Case (0x2A)
                {
                    KBLC |= 0x80
                    Local1 = (KBLC & 0x80)
                    If (Local1)
                    {
                        ATKM (0xC5)
                    }
                }
                Case (0x2B)
                {
                    KBLC |= 0x80
                    Local1 = (KBLC & 0x80)
                    If (Local1)
                    {
                        ATKM (0xC4)
                    }
                }
                Case (0x2C)
                {
                    ATKM (0xB3)
                }
                Case (0x2D)
                {
                    ATKM (0xAE)
                }
                Case (0x2E)
                {
                    ATKM (0x88)
                }
                Case (0x2F)
                {
                    ATKM (0x4F)
                }
                Case (0x30)
                {
                    BRTN (0x87)
                }
                Case (0x31)
                {
                    BRTN (0x86)
                }
                Case (0x32)
                {
                    \_TZ.TZ01.CRTM (\_TZ.TZ01.CRTT)
                }
                Case (0x33)
                {
                    ^^^FAN0.SFST ()
                }
                Case (0x34)
                {
                    \_TZ.TZ01.CRTM ((\_TZ.TZ01.CRTT - 0x0A))
                }
                Default
                {
                }

            }
        }

        Method (PWCG, 1, Serialized)
        {
            Notify (ADP0, Zero) // Bus Check
            Sleep (0x32)
            If (((Arg0 == Zero) || (Arg0 == 0x10)))
            {
                ^EC0._QA0 ()
            }

            ^BAT0._BST ()
            Sleep (0x64)
            Notify (BAT0, 0x80) // Status Change
            Sleep (0x32)
            ^BAT0._BIF ()
            Sleep (0x64)
            Notify (BAT0, 0x81) // Information Change
        }

        Mutex (MUTL, 0x00)
        Name (LEVC, Zero)
        Name (LEVB, Buffer (0x08)
        {
             0x00                                             // .
        })
        Name (TI3S, Zero)
        Name (TIMC, Zero)
        Name (SLEC, Zero)
        Name (SLEV, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (SLEN, Package (0x08)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (CLBF, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    EEV0 = Zero
                }
                Case (One)
                {
                    EEV1 = Zero
                }
                Case (0x02)
                {
                    EEV2 = Zero
                }
                Case (0x03)
                {
                    EEV3 = Zero
                }
                Case (0x04)
                {
                    EEV4 = Zero
                }
                Case (0x05)
                {
                    EEV5 = Zero
                }
                Case (0x06)
                {
                    EEV6 = Zero
                }
                Case (0x07)
                {
                    EEV7 = Zero
                }

            }
        }

        Method (CKEV, 0, Serialized)
        {
            Name (TMPB, Buffer (0x08)
            {
                 0x00                                             // .
            })
            Acquire (MUTL, 0xFFFF)
            If ((LEVC == Zero))
            {
                TMPB [Zero] = EEV0 /* \_SB_.PCI0.SBRG.EEV0 */
                TMPB [One] = EEV1 /* \_SB_.PCI0.SBRG.EEV1 */
                TMPB [0x02] = EEV2 /* \_SB_.PCI0.SBRG.EEV2 */
                TMPB [0x03] = EEV3 /* \_SB_.PCI0.SBRG.EEV3 */
                TMPB [0x04] = EEV4 /* \_SB_.PCI0.SBRG.EEV4 */
                TMPB [0x05] = EEV5 /* \_SB_.PCI0.SBRG.EEV5 */
                TMPB [0x06] = EEV6 /* \_SB_.PCI0.SBRG.EEV6 */
                TMPB [0x07] = EEV7 /* \_SB_.PCI0.SBRG.EEV7 */
                Local0 = Zero
                While ((Local0 < 0x08))
                {
                    Local1 = DerefOf (TMPB [Local0])
                    If ((Local1 != Zero))
                    {
                        LEVB [LEVC] = Local1
                        LEVC++
                        CLBF (Local0)
                    }

                    Local0++
                }
            }

            Local2 = LEVC /* \_SB_.PCI0.SBRG.LEVC */
            Release (MUTL)
            Return (Local2)
        }

        Method (GEVT, 0, NotSerialized)
        {
            Acquire (MUTL, 0xFFFF)
            Local0 = Zero
            If ((LEVC != Zero))
            {
                LEVC--
                Local0 = DerefOf (LEVB [LEVC])
                LEVB [LEVC] = Zero
            }

            Release (MUTL)
            Return (Local0)
        }

        Method (ECLV, 0, NotSerialized)
        {
            While ((((CKEV () != Zero) || (SLEC != Zero)) && (
                TI3S < 0x78)))
            {
                Local1 = One
                While ((Local1 != Zero))
                {
                    Local1 = GEVT ()
                    LEVN (Local1)
                    TIMC += 0x19
                    If (((SLEC != Zero) && (Local1 == Zero)))
                    {
                        If ((TIMC == 0x19))
                        {
                            Sleep (0x64)
                            TIMC = 0x64
                            TI3S += 0x04
                        }
                        Else
                        {
                            Sleep (0x19)
                            TI3S++
                        }
                    }

                    If ((TIMC == 0x64))
                    {
                        TIMC = Zero
                        If ((SLEC != Zero))
                        {
                            Local0 = 0x08
                            While (Local0)
                            {
                                Local0--
                                Local3 = DerefOf (SLEN [Local0])
                                If ((Local3 != Zero))
                                {
                                    Local3--
                                    SLEN [Local0] = Local3
                                    If ((Local3 == Zero))
                                    {
                                        Local1 = One
                                        Local2 = DerefOf (SLEV [Local0])
                                        SLEV [Local0] = Zero
                                        ILEV (Local2)
                                        SLEC--
                                    }
                                }
                            }
                        }
                    }
                }
            }

            If ((TI3S >= 0x78))
            {
                TI3S = Zero
                If ((EEV0 == Zero))
                {
                    EEV0 = 0xFF
                }
            }
        }

        Method (CLRL, 0, Serialized)
        {
            SLEC = Zero
            TIMC = Zero
            Local0 = 0x08
            While (Local0)
            {
                Local0--
                SLEV [Local0] = Zero
                SLEN [Local0] = Zero
            }
        }

        Method (ILEV, 1, NotSerialized)
        {
            Acquire (MUTL, 0xFFFF)
            If ((EEV0 == Zero))
            {
                EEV0 = 0xFF
            }

            If ((LEVC < 0x08))
            {
                LEVB [LEVC] = Arg0
                LEVC++
            }

            Release (MUTL)
        }

        Method (LEVN, 1, NotSerialized)
        {
            If ((Arg0 != Zero))
            {
                MBF0 = Arg0
                Local6 = Match (LEGA, MEQ, Arg0, MTR, Zero, Zero)
                If ((Local6 != Ones))
                {
                    LGPA (Local6)
                }
            }
        }

        Method (SACM, 0, NotSerialized)
        {
            ACPF = Zero
            If (((PDIN == One) && (PDWA >= 0x2D)))
            {
                ACPF = One
            }

            If ((ACIN == One))
            {
                ACPF = One
            }
        }

        Name (TUF5, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (TU56, 3, Serialized)
        {
            MC58 = Arg0
            MC5C = Arg1
            MC60 = Arg2
            MC7D = 0x03
            MC7C = One
            Return (One)
        }

        Method (TU57, 2, Serialized)
        {
            MC58 = Arg0
            MC5C = Arg1
            MC7D = 0x05
            MC7C = One
            Return (One)
        }

        Method (FNSF, 2, Serialized)
        {
            MC58 = Arg0
            MC5C = Arg1
            MC7D = 0x85
            MC7C = One
            Return (One)
        }

        Method (TU5A, 3, Serialized)
        {
            MC58 = Arg0
            MC5C = Arg1
            MC60 = Arg2
            MC7D = 0x06
            MC7C = One
            Return (One)
        }

        Method (TU5B, 1, Serialized)
        {
            MC58 = Arg0
            MC7D = 0x04
            WCMR ()
            Sleep (0x0A)
            TUF5 [Zero] = MC6C /* \_SB_.PCI0.SBRG.MC6C */
            TUF5 [One] = MC6D /* \_SB_.PCI0.SBRG.MC6D */
            TUF5 [0x02] = MC6E /* \_SB_.PCI0.SBRG.MC6E */
            TUF5 [0x03] = MC6F /* \_SB_.PCI0.SBRG.MC6F */
            TUF5 [0x04] = MC70 /* \_SB_.PCI0.SBRG.MC70 */
            TUF5 [0x05] = MC71 /* \_SB_.PCI0.SBRG.MC71 */
            TUF5 [0x06] = MC72 /* \_SB_.PCI0.SBRG.MC72 */
            TUF5 [0x07] = MC73 /* \_SB_.PCI0.SBRG.MC73 */
            Return (TUF5) /* \_SB_.PCI0.SBRG.TUF5 */
        }

        Method (MS01, 2, Serialized)
        {
            MC58 = 0x0012007E
            MC5C = Arg0
            MC60 = Arg1
            MC7D = 0x83
            MC7C = One
            Return (One)
        }

        Method (MS02, 2, Serialized)
        {
            MC58 = Arg0
            MC5C = Arg1
            MC7D = 0x84
            MC7C = One
            Return (One)
        }

        Name (FCBF, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (FLBF, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (DSFC, 2, Serialized)
        {
            FANC (Arg0, One)
            MC5C = Arg1
            WCMR ()
            FCBF [Zero] = MC6C /* \_SB_.PCI0.SBRG.MC6C */
            FCBF [One] = MC6D /* \_SB_.PCI0.SBRG.MC6D */
            FCBF [0x02] = MC6E /* \_SB_.PCI0.SBRG.MC6E */
            FCBF [0x03] = MC6F /* \_SB_.PCI0.SBRG.MC6F */
            FCBF [0x04] = MC70 /* \_SB_.PCI0.SBRG.MC70 */
            FCBF [0x05] = MC71 /* \_SB_.PCI0.SBRG.MC71 */
            FCBF [0x06] = MC72 /* \_SB_.PCI0.SBRG.MC72 */
            FCBF [0x07] = MC73 /* \_SB_.PCI0.SBRG.MC73 */
            FCBF [0x08] = MC74 /* \_SB_.PCI0.SBRG.MC74 */
            FCBF [0x09] = MC75 /* \_SB_.PCI0.SBRG.MC75 */
            FCBF [0x0A] = MC76 /* \_SB_.PCI0.SBRG.MC76 */
            FCBF [0x0B] = MC77 /* \_SB_.PCI0.SBRG.MC77 */
            FCBF [0x0C] = MC78 /* \_SB_.PCI0.SBRG.MC78 */
            FCBF [0x0D] = MC79 /* \_SB_.PCI0.SBRG.MC79 */
            FCBF [0x0E] = MC7A /* \_SB_.PCI0.SBRG.MC7A */
            FCBF [0x0F] = MC7B /* \_SB_.PCI0.SBRG.MC7B */
            Return (FCBF) /* \_SB_.PCI0.SBRG.FCBF */
        }

        Method (DSFL, 1, Serialized)
        {
            FANC (Arg0, 0x02)
            WCMR ()
            FLBF [Zero] = MC6C /* \_SB_.PCI0.SBRG.MC6C */
            FLBF [One] = MC6D /* \_SB_.PCI0.SBRG.MC6D */
            FLBF [0x02] = MC6E /* \_SB_.PCI0.SBRG.MC6E */
            FLBF [0x03] = MC6F /* \_SB_.PCI0.SBRG.MC6F */
            FLBF [0x04] = MC70 /* \_SB_.PCI0.SBRG.MC70 */
            FLBF [0x05] = MC71 /* \_SB_.PCI0.SBRG.MC71 */
            FLBF [0x06] = MC72 /* \_SB_.PCI0.SBRG.MC72 */
            FLBF [0x07] = MC73 /* \_SB_.PCI0.SBRG.MC73 */
            Return (FLBF) /* \_SB_.PCI0.SBRG.FLBF */
        }

        Method (DEFC, 5, Serialized)
        {
            FANM = 0x04
            M6CB = 0x04
            CPWF (One)
            FANC (Arg0, Zero)
            MC5C = Arg1
            MC60 = Arg2
            MC64 = Arg3
            MC68 = Arg4
            WCMR ()
            Return (One)
        }

        Method (FANC, 2, Serialized)
        {
            Local0 = Zero
            While ((Local0 < 0x10))
            {
                FCBF [Local0] = Buffer (0x08)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    }
                If ((Local0 < 0x08))
                {
                    FLBF [Local0] = Buffer (0x08)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                }

                Local0++
            }

            MC7D = Arg1
            MC58 = Arg0
        }

        Method (WCMR, 0, Serialized)
        {
            MC7C = One
            While ((MC7C == One))
            {
                If ((MC7C != One))
                {
                    Break
                }
            }
        }

        Method (ADTM, 1, Serialized)
        {
            If (((Arg0 == Zero) && (ACPF == Zero)))
            {
                Local4 = One
                If ((FANM == 0x02))
                {
                    Local4 = Zero
                }

                If ((Local4 != ^^^NPCF.DBDC))
                {
                    ^^^NPCF.DBDC = Local4
                    Notify (NPCF, 0xC0) // Hardware-Specific
                }
            }

            Local0 = 0xD1
            If (((PDIN == One) && (PDWA >= 0x2D)))
            {
                Local0 = 0xD2
            }

            If ((Arg0 == One))
            {
                Local0 = DCTH /* \_SB_.PCI0.SBRG.DCTH */
                If ((Local0 < 0x03))
                {
                    Local0 += 0xD1
                }
                Else
                {
                    Local0 += 0xD0
                    If ((Local0 > 0xD5))
                    {
                        Local0 = 0xD5
                    }
                }

                If ((Local0 == 0xD0))
                {
                    Local0 = 0xD1
                }
            }

            If (ACIN)
            {
                Local0 = 0xD1
            }

            NOD2 (Local0)
        }

        Method (DGD2, 0, Serialized)
        {
            If ((ACIN == One))
            {
                Local0 = 0xD1
            }
            ElseIf ((PDIN == One))
            {
                Local0 = 0xD2
            }
            Else
            {
                Local0 = DCTH /* \_SB_.PCI0.SBRG.DCTH */
                If ((Local0 < 0x03))
                {
                    Local0 += 0xD1
                }
                Else
                {
                    Local0 += 0xD0
                    If ((Local0 > 0xD5))
                    {
                        Local0 = 0xD5
                    }
                }
            }

            NOD2 (Local0)
        }

        Method (DEBG, 1, Serialized)
        {
            If ((CS60 == Zero))
            {
                CS60 = Arg0
            }
            ElseIf ((CS61 == Zero))
            {
                CS61 = Arg0
            }
            ElseIf ((CS62 == Zero))
            {
                CS62 = Arg0
            }
            ElseIf ((CS63 == Zero))
            {
                CS63 = Arg0
            }
            ElseIf ((CS64 == Zero))
            {
                CS64 = Arg0
            }
            ElseIf ((CS65 == Zero))
            {
                CS65 = Arg0
            }
            ElseIf ((CS66 == Zero))
            {
                CS66 = Arg0
            }
            ElseIf ((CS67 == Zero))
            {
                CS67 = Arg0
            }
            ElseIf ((CS68 == Zero))
            {
                CS68 = Arg0
            }
            ElseIf ((CS69 == Zero))
            {
                CS69 = Arg0
            }
            ElseIf ((CS6A == Zero))
            {
                CS6A = Arg0
            }
            ElseIf ((CS6B == Zero))
            {
                CS6B = Arg0
            }
            ElseIf ((CS6C == Zero))
            {
                CS6C = Arg0
            }
            ElseIf ((CS6D == Zero))
            {
                CS6D = Arg0
            }
            ElseIf ((CS6E == Zero))
            {
                CS6E = Arg0
            }
            Else
            {
                CS6F = 0x5A
            }
        }

        Method (ECLX, 2, Serialized)
        {
            While ((M695 != Zero))
            {
                Sleep (0x64)
            }

            Sleep (0x64)
            M695 = Arg1
            M694 = Arg0
        }

        Method (PPAB, 1, NotSerialized)
        {
            Local0 = Zero
            If ((Arg0 == Zero))
            {
                Local0 = One
            }

            Local1 = Zero
            If ((Local0 != ^^^NPCF.DBAC))
            {
                ^^^NPCF.DBAC = Local0
                ^^^NPCF.DBDC = Local0
                If (^^^NPCF.DBAC)
                {
                    ^^^NPCF.AMAT = Zero
                }
                Else
                {
                    ^^^NPCF.AMAT = DBBK /* \_SB_.PCI0.SBRG.DBBK */
                }

                Local1 |= One
            }

            If ((Local1 != Zero))
            {
                Notify (NPCF, 0xC0) // Hardware-Specific
            }
        }

        Method (WM2M, 1, NotSerialized)
        {
        }

        Method (CPWF, 1, NotSerialized)
        {
            If ((FANM == 0x02))
            {
                Local0 = 0x4B
            }
            Else
            {
                Local0 = 0x57
            }

            If ((FANM != 0x04))
            {
                RCTT (Local0)
            }

            SID2 ()
            RCCT ()
        }

        Method (RCTT, 1, NotSerialized)
        {
            If ((Arg0 != ^^GPP0.PEGP.MGPU))
            {
                ^^GPP0.PEGP.NLIM = One
                ^^GPP0.PEGP.MGPU = Arg0
                Notify (^^GPP0.PEGP, 0xC0) // Hardware-Specific
            }
        }

        Method (SID2, 0, NotSerialized)
        {
        }

        Method (NOD2, 1, Serialized)
        {
            If ((IVGA == Zero))
            {
                If ((Arg0 != DNOT))
                {
                    Local0 = Zero
                    Local1 = DNOT /* \_SB_.PCI0.SBRG.DNOT */
                    DNOT = Arg0
                    RDNT = Zero
                    While ((Arg0 != RDNT))
                    {
                        If ((Local0 >= 0x0A))
                        {
                            DNOT = Local1
                            Break
                        }

                        Notify (^^GPP0.PEGP, Arg0)
                        Local0++
                        Local2 = (Local0 * 0x64)
                        Sleep (Local2)
                    }
                }
            }
        }

        Method (RCCT, 0, Serialized)
        {
            Local0 = Zero
            Local1 = ^^^NPCF.ATPP /* External reference */
            Local2 = ^^^NPCF.AMAT /* External reference */
            Local3 = ^^^NPCF.ACBT /* External reference */
            Switch (FANM)
            {
                Case (One)
                {
                    Local1 = 0x37
                    Local2 = 0x19
                    Local3 = 0x3C
                    If ((ACPF == Zero))
                    {
                        Local4 = One
                    }
                }
                Case (0x02)
                {
                    Local1 = 0x1E
                    Local2 = 0x0F
                    Local3 = Zero
                    If ((ACPF == Zero))
                    {
                        Local4 = Zero
                    }
                }
                Case (0x04)
                {
                    Local1 = 0x37
                    Local2 = 0x19
                    Local3 = 0x3C
                    If ((ACPF == Zero))
                    {
                        Local4 = One
                    }
                }
                Default
                {
                    Local1 = 0x23
                    Local2 = 0x0F
                    Local3 = 0x19
                    If ((ACPF == Zero))
                    {
                        Local4 = One
                    }
                }

            }

            Local1 <<= 0x03
            If ((Local1 != ^^^NPCF.ATPP))
            {
                ^^^NPCF.ATPP = Local1
                Local0 |= One
            }

            Local2 <<= 0x03
            DBBK = Local2
            If ((Q9DF == Zero))
            {
                If ((Local2 != ^^^NPCF.AMAT))
                {
                    ^^^NPCF.AMAT = Local2
                    Local0 |= 0x02
                }
            }

            Local3 <<= 0x03
            MO2B = Local3
            If ((Local3 != ^^^NPCF.ACBT))
            {
                ^^^NPCF.ACBT = Local3
                Local0 |= 0x04
            }

            If ((ACPF == Zero))
            {
                If ((Local4 != ^^^NPCF.DBDC))
                {
                    ^^^NPCF.DBDC = Local4
                    Local0 |= 0x08
                }
            }

            If ((Local0 != Zero))
            {
                Notify (NPCF, 0xC0) // Hardware-Specific
            }
        }

        Method (SPLX, 2, Serialized)
        {
            If ((FANM == 0x04))
            {
                SECC (0x46, One)
                Switch (Arg0)
                {
                    Case (0x001200A0)
                    {
                        M6F1 = Arg1
                    }
                    Case (0x001200A3)
                    {
                        M6F0 = Arg1
                    }
                    Case (0x001200B0)
                    {
                        M6EC = Arg1
                    }
                    Case (0x001200B1)
                    {
                        M6F1 = Arg1
                    }
                    Case (0x001200C1)
                    {
                        M6B2 = Arg1
                    }
                    Default
                    {
                        SECC (0x46, Zero)
                    }

                }
            }
        }

        Method (AADN, 0, Serialized)
        {
            If ((ACIN == One))
            {
                Local0 = 0x8200
                ^^GP17.VGA.AFNC (0x02, Local0)
            }
            ElseIf ((PDIN == One))
            {
                Local0 = 0x3700
                ^^GP17.VGA.AFNC (0x02, Local0)
            }
            Else
            {
                ACPT ()
            }
        }

        Method (ACPT, 0, Serialized)
        {
            If (((ACIN == One) && (PDIN == One))){}
            Else
            {
            }
        }

        Method (CACN, 0, Serialized)
        {
            ATKM (0xCF)
        }

        Method (UMAC, 1, Serialized)
        {
            If (Arg0)
            {
                If (((Arg0 == One) && (CUMA != Arg0)))
                {
                    WOSR = One
                    Notify (^^GPP0.PEGP, 0x03) // Eject Request
                    If ((WAT1 () == One))
                    {
                        Return (Zero)
                    }

                    CUMA = Arg0
                    Return (One)
                }
            }
            ElseIf (((Arg0 == Zero) && (CUMA != Arg0)))
            {
                ^^GPP0.SGPC (One)
                Sleep (0x01F4)
                Local0 = M249 (Zero, Zero, Zero, 0x13B31004)
                M250 (Zero, Zero, Zero, 0x13B31004, (Local0 & 0xFFFFFFFE))
                Notify (^^GPP0.PEGP, One) // Device Check
                If ((WAT2 () == One))
                {
                    Return (Zero)
                }

                CUMA = Arg0
                Return (One)
            }

            Return (Zero)
        }

        Method (FGON, 0, Serialized)
        {
            If ((PWOK == One))
            {
                Return (Zero)
            }

            REST = Zero
            Sleep (One)
            PWEN = Zero
            Local0 = 0x64
            While (Local0)
            {
                If ((PWOK == One))
                {
                    Break
                }

                Sleep (One)
                Local0--
            }

            M012 (0xFED80E00, Zero, Zero, 0x02, 0x03)
            Sleep (One)
            REST = One
            Sleep (0x32)
            ALIB (0x13, 0x09)
            Sleep (0x32)
            Local1 = Zero
            Local2 = 0xC8
            While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
            {
                Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                Local2 = (Local2 - One)
                Sleep (One)
            }
        }

        Method (ATKM, 1, Serialized)
        {
            If (ATKP)
            {
                ^^^ATKD.IANE (Arg0)
            }
        }

        Method (M6CK, 1, Serialized)
        {
            If (((MB4C >= 0x55) && (M6EF == One)))
            {
                DNOT = Zero
                ECLX (0xA1, Arg0)
            }
        }

        Method (ALED, 1, Serialized)
        {
            Local0 = Arg0
            Local1 = Arg0
            Switch (Arg0)
            {
                Case (Zero)
                {
                    If ((SLED == Zero))
                    {
                        SLED = One
                        If (Zero)
                        {
                            WISS = M009 (0xFF)
                        }

                        If (Zero)
                        {
                            BTSS = M009 (0xFF)
                        }
                    }
                }
                Case (One)
                {
                }
                Case (0x02)
                {
                    SLED = Zero
                    Local0 = BTSS /* \_SB_.PCI0.SBRG.BTSS */
                    Local1 = WISS /* \_SB_.PCI0.SBRG.WISS */
                }

            }

            If (Zero)
            {
                M010 (0xFF, Local1)
            }

            If (Zero)
            {
                M010 (0xFF, Local0)
            }
        }

        Method (STTM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    ALBC (0x23, 0x2800)
                    ALBC (0x26, 0x7B)
                    ALBC (0x27, 0x0204)
                    ALBC (0x28, 0x4E)
                    ALBC (0x29, 0xFFFFFFFFFFFFFF27)
                    ALBC (0x2A, 0x02DC)
                    ALBC (0x2B, 0x6C)
                    ALBC (0x2C, 0x1B1D)
                    ALBC (0x2D, 0x28E3)
                    ALBC (0x2E, 0x0002BF20)
                }
                Case (0x02)
                {
                    ALBC (0x23, 0x2880)
                    ALBC (0x26, 0xA3)
                    ALBC (0x27, 0x0239)
                    ALBC (0x28, 0xFFFFFFFFFFFFFFFD)
                    ALBC (0x29, 0xFFFFFFFFFFFFFF76)
                    ALBC (0x2A, 0x02F0)
                    ALBC (0x2B, 0x14)
                    ALBC (0x2C, 0x19A5)
                    ALBC (0x2D, 0x2671)
                    ALBC (0x2E, 0x00015F90)
                }
                Case (0x04)
                {
                    ALBC (0x23, 0x4100)
                    ALBC (0x26, 0x7B)
                    ALBC (0x27, 0x0204)
                    ALBC (0x28, 0x4E)
                    ALBC (0x29, 0xFFFFFFFFFFFFFF27)
                    ALBC (0x2A, 0x02DC)
                    ALBC (0x2B, 0x6C)
                    ALBC (0x2C, 0x1B1D)
                    ALBC (0x2D, 0x28E3)
                    ALBC (0x2E, 0x0002E630)
                }
                Default
                {
                    ALBC (0x23, 0x2780)
                    ALBC (0x26, 0x0130)
                    ALBC (0x27, 0x01E7)
                    ALBC (0x28, 0xFFFFFFFFFFFFFFA5)
                    ALBC (0x29, 0xFFFFFFFFFFFFFF71)
                    ALBC (0x2A, 0x02AB)
                    ALBC (0x2B, 0x36)
                    ALBC (0x2C, 0x1D9B)
                    ALBC (0x2D, 0x2C5E)
                    ALBC (0x2E, 0x0001ADB0)
                }

            }

            ECLX (0xAA, 0x14)
        }

        Name (UTDP, Buffer (0x08){})
        CreateWordField (UTDP, Zero, M254)
        CreateByteField (UTDP, 0x02, M255)
        CreateDWordField (UTDP, 0x03, M256)
        Method (RVDD, 0, Serialized)
        {
            If ((CPU9 == One))
            {
                ALBC (0x0B, 0xFDE8)
                ALBC (0x0C, 0x000222E0)
            }
        }

        Method (ALBC, 2, Serialized)
        {
            Local0 = Zero
            While ((ECST == One))
            {
                If ((Local0 >= 0x00010000))
                {
                    Break
                }

                Local0++
            }

            BSST = One
            M254 = 0x07
            M255 = Arg0
            M256 = Arg1
            ALIB (0x0C, UTDP)
            Sleep (0x0A)
            BSST = Zero
        }

        Mutex (TMUT, 0x00)
        Method (SSML, 1, Serialized)
        {
            Acquire (TMUT, 0xFFFF)
            Local0 = Zero
            While ((ECST == One))
            {
                If ((Local0 >= 0x00010000))
                {
                    Break
                }

                Local0++
            }

            BSST = One
            Local0 = (PEBS + 0xB8)
            OperationRegion (HSMP, SystemMemory, Local0, 0x08)
            Field (HSMP, DWordAcc, NoLock, Preserve)
            {
                HSMC,   32, 
                HSMD,   32
            }

            HSMC = 0x03B10564
            HSMD = Zero
            HSMC = 0x03B10998
            HSMD = Arg0
            HSMC = 0x03B1099C
            HSMD = 0x01BFD3FF
            HSMC = 0x03B109A0
            HSMD = Zero
            HSMC = 0x03B109A4
            HSMD = Zero
            HSMC = 0x03B109A8
            HSMD = Zero
            HSMC = 0x03B109AC
            HSMD = Zero
            HSMC = 0x03B10528
            HSMD = 0x53
            Local0 = Zero
            While ((Local0 == Zero))
            {
                HSMC = 0x03B10564
                Local0 = HSMD /* \_SB_.PCI0.SBRG.SSML.HSMD */
                If ((Local0 != Zero))
                {
                    Break
                }
            }

            Release (TMUT)
            Sleep (0x0A)
            BSST = Zero
        }
    }

    Scope (_GPE)
    {
        Method (_E07, 0, Serialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBRG.ECLV ()
        }
    }

    Scope (_SB)
    {
        Device (FAN0)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (LRPM, Zero)
            Name (URPM, Zero)
            Name (CFST, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Name (GRAN, 0xC8)
            Name (FOPR, Package (0x04)
            {
                0x07D0, 
                0x0BB8, 
                0x0F3C, 
                0x19C8
            })
            Method (_FST, 0, NotSerialized)  // _FST: Fan Status
            {
                Local0 = GCFR ()
                CFST [0x02] = Local0
                If ((Local0 > DerefOf (FOPR [0x02])))
                {
                    CFST [One] = 0x04
                }
                ElseIf ((Local0 > DerefOf (FOPR [One])))
                {
                    CFST [One] = 0x03
                }
                ElseIf ((Local0 > DerefOf (FOPR [Zero])))
                {
                    CFST [One] = 0x02
                }
                ElseIf ((Local0 <= DerefOf (FOPR [Zero])))
                {
                    CFST [One] = One
                }

                Return (CFST) /* \_SB_.FAN0.CFST */
            }

            Method (GCFR, 0, NotSerialized)
            {
                Local0 = (^^PCI0.SBRG.FA1H << 0x08)
                Local0 |= ^^PCI0.SBRG.FA1L /* \_SB_.PCI0.SBRG.FA1L */
                Return (Local0)
            }

            Method (CRNF, 0, NotSerialized)
            {
                Local0 = Zero
                Local0 = LRPM /* \_SB_.FAN0.LRPM */
                Local0 &= 0xFFFF
                Local1 = Zero
                Local1 = URPM /* \_SB_.FAN0.URPM */
                Local1 <<= 0x10
                Local1 &= 0xFFFF0000
                Local0 |= Local1
                ^^PCI0.SBRG.FNSF (Zero, Local0)
            }

            Method (SFST, 0, NotSerialized)
            {
                Notify (FAN0, 0x80) // Status Change
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("a7611840-99fe-41ae-a488-35c75926c8eb") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (GRAN) /* \_SB_.FAN0.GRAN */
                        }
                        Case (0x02)
                        {
                            LRPM = DerefOf (Arg3 [Zero])
                            URPM = DerefOf (Arg3 [One])
                            CRNF ()
                            Return (Zero)
                        }
                        Case (0x03)
                        {
                            Return (FOPR) /* \_SB_.FAN0.FOPR */
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (ATKD)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Name (WAPF, Zero)
            Name (PCDV, Zero)
            Name (SWKP, Zero)
            Method (IANQ, 1, Serialized)
            {
                P8XH (Zero, 0xD3)
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                ATKQ [AQTI] = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                P8XH (Zero, 0xF2)
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (ATKQ [AQHI])
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (IANE, 1, Serialized)
            {
                ^^PCI0.SBRG.MBF3 = Arg0
                P8XH (Zero, 0xF1)
                IANQ (Arg0)
                Notify (ATKD, 0xFF) // Hardware-Specific
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08,  // m.].....
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x4D, 0x4F, 0x01, 0x00                           // MO..
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xFF))
                {
                    Return (GANQ ())
                }

                Return (One)
            }

            Method (INIT, 1, NotSerialized)
            {
                ATKP = One
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x21
                Return (Local0)
            }

            Method (OSVR, 1, NotSerialized)
            {
                OSFG = Arg0
                Return (One)
            }

            Method (SPLV, 1, Serialized)
            {
                Local0 = Arg0
                Switch (Local0)
                {
                    Case (Zero)
                    {
                        Local1 = 0x33
                    }
                    Case (One)
                    {
                        Local1 = 0x40
                    }
                    Case (0x02)
                    {
                        Local1 = 0x4D
                    }
                    Case (0x03)
                    {
                        Local1 = 0x59
                    }
                    Case (0x04)
                    {
                        Local1 = 0x66
                    }
                    Case (0x05)
                    {
                        Local1 = 0x73
                    }
                    Case (0x06)
                    {
                        Local1 = 0x80
                    }
                    Case (0x07)
                    {
                        Local1 = 0x8C
                    }
                    Case (0x08)
                    {
                        Local1 = 0xA6
                    }
                    Case (0x09)
                    {
                        Local1 = 0xCC
                    }
                    Case (0x0A)
                    {
                        Local1 = 0xFF
                    }

                }

                LBTN = Local0
                Return (Local1)
            }

            Method (ANVI, 1, Serialized)
            {
                If ((Arg0 == 0x05))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x06))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x0105))
                {
                    Return (Zero)
                }

                Return (One)
                FSMI = 0x04
                Return (ASMI (Arg0))
            }

            Method (ICAW, 2, Serialized)
            {
                WNVA = 0x9603
                WNVB = 0x03
                WNVC = Arg0
                AII0 = Arg0
                AII1 = Arg1
                AII2 = Zero
                AII3 = Zero
                AII4 = Zero
                Return (W15H ())
            }
        }
    }

    Scope (_SB.ATKD)
    {
        Method (WMNB, 3, Serialized)
        {
            P8XH (Zero, 0x11)
            CreateDWordField (Arg2, Zero, IIA0)
            CreateDWordField (Arg2, 0x04, IIA1)
            CreateDWordField (Arg2, 0x08, IIA2)
            CreateDWordField (Arg2, 0x0C, IIA3)
            CreateDWordField (Arg2, 0x10, IIA4)
            Local0 = (Arg1 & 0xFFFFFFFF)
            If ((Local0 == 0x54494E49))
            {
                INIT (IIA0)
                Return (One)
            }

            If ((Local0 == 0x53545342))
            {
                Return (BSTS ())
            }

            If ((Local0 == 0x4E554653))
            {
                Return (SFUN ())
            }

            If ((Local0 == 0x47444353))
            {
                Return (SCDG (IIA0, IIA1))
            }

            If ((Local0 == 0x53524556))
            {
                Return (VERS (IIA0, IIA1))
            }

            If ((Local0 == 0x44434C47))
            {
                Return (GLCD ())
            }

            If ((Local0 == 0x474F4457))
            {
                Return (WDOG (IIA0))
            }

            If ((Local0 == 0x5256534F))
            {
                Return (OSVR (IIA0))
            }

            If ((Local0 == 0x49564E41))
            {
                Return (ANVI (IIA0))
            }

            If ((Local0 == 0x53545344))
            {
                If ((IIA0 == 0x00130031))
                {
                    WNVA = 0x9601
                    WNVB = 0x00130031
                    WNVC = IIA1 /* \_SB_.ATKD.WMNB.IIA1 */
                    WNVD = Zero
                    Return (W15H ())
                }

                If ((IIA0 == 0x00060024))
                {
                    Return (Package (0x03)
                    {
                        0x8C318086, 
                        One, 
                        0xFFFFFFFF
                    })
                }

                If ((IIA0 == 0x00060025))
                {
                    Return (0xFFFFFFFE)
                    Return (Package (0x03)
                    {
                        0x04, 
                        0x1D00, 
                        0xFFFFFFFF
                    })
                }

                If ((IIA0 == 0x00100051))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00130021))
                {
                    Local0 = 0x00010000
                    Local0 |= 0x00020004
                    Return (Local0)
                }

                If ((IIA0 == 0x00130022))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0xA0000001))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00040017))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00040019))
                {
                    Return (0xFFFFFFFE)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0004001A))
                {
                    Return (0xFFFFFFFE)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050001))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050013))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00050021))
                {
                    Local0 = ^^PCI0.SBRG.M64D /* \_SB_.PCI0.SBRG.M64D */
                    Local0 &= 0x0F
                    Local0 |= 0x00050000
                    Return (Local0)
                }

                If ((IIA0 == 0x00050031))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050032))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050033))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050035))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050043))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00050051))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00060023))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060026))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060059))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0006005C))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0006005D))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060061))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00080041))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00080042))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00080043))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0009001D))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00100043))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00100046))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00100053))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00110011))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0011001C))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0011001E))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120058))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00120061))
                {
                    If ((^^PCI0.SBRG.ACNG == One))
                    {
                        Return (0x00030002)
                    }
                    ElseIf (ACPF)
                    {
                        Return (0x00030001)
                    }
                    Else
                    {
                        Return (0x00030000)
                    }
                }

                If ((IIA0 == 0x00120063))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120065))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120082))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120083))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120087))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120088))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00010031))
                {
                    Local0 = Zero
                    If (M009 (0xFF))
                    {
                        Local0 |= 0x22
                    }

                    If (M009 (0xFF))
                    {
                        Local0 |= 0x11
                    }

                    Local0 |= 0x00010200
                    Return (Local0)
                }

                If ((IIA0 == 0x0005001A))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005001F))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00050020))
                {
                    If ((PANL <= ^^PCI0.SBRG.ODPL))
                    {
                        Return (0x00010001)
                    }
                    Else
                    {
                        Return (0x00010000)
                    }
                }

                If ((IIA0 == 0x00050024))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050025))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050026))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00030022))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050036))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005003A))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x0005003B))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x0006005B))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060064))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x0006006A))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0006006B))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060091))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060093))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060094))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090014))
                {
                    Return (0xFFFFFFFE)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0009001A))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00100052))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00100054))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00100055))
                {
                    Return (0x00010004)
                }

                If ((IIA0 == 0x00100056))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00100057))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00100058))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00100059))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0010005A))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0010005C))
                {
                    If ((^^PCI0.SBRG.WDLF == One))
                    {
                        Return (0x00010001)
                    }
                    Else
                    {
                        Return (0x00010000)
                    }
                }

                If ((IIA0 == 0x00100066))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0010005B))
                {
                    Return (^^PCI0.SBRG.TU5B (IIA0))
                }

                If ((IIA0 == 0x00110013))
                {
                    Local0 = ^^PCI0.SBRG.FA1L /* \_SB_.PCI0.SBRG.FA1L */
                    Local1 = ^^PCI0.SBRG.FA1H /* \_SB_.PCI0.SBRG.FA1H */
                    Local1 *= 0x0100
                    Local0 += Local1
                    Divide (Local0, 0x64, Local1, Local0)
                    Local2 = (^^PCI0.SBRG.CFAN << 0x13)
                    Local0 += Local2
                    Return ((0x00010000 + Local0))
                }

                If ((IIA0 == 0x00110014))
                {
                    Local0 = ^^PCI0.SBRG.FA2L /* \_SB_.PCI0.SBRG.FA2L */
                    Local1 = ^^PCI0.SBRG.FA2H /* \_SB_.PCI0.SBRG.FA2H */
                    Local1 *= 0x0100
                    Local0 += Local1
                    Divide (Local0, 0x64, Local1, Local0)
                    Local2 = (^^PCI0.SBRG.GFAN << 0x13)
                    Local0 += Local2
                    Return ((0x00010000 + Local0))
                }

                If ((IIA0 == 0x00110015))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110016))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110018))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110021))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120058))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00120067))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120072))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120081))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120089))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120090))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120094))
                {
                    Local0 = 0x00010000
                    Local0 += ^^PCI0.SBRG.RCPU /* \_SB_.PCI0.SBRG.RCPU */
                    Return (Local0)
                }

                If ((IIA0 == 0x00130041))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005001C))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005001D))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005001E))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005002E))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060077))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060095))
                {
                    Return (0x00010001)
                }

                If ((IIA0 == 0x000600C1))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x000600C2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x000600C3))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00090017))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090018))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090019))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0009001C))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090021))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090029))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090030))
                {
                    Local0 = 0x00010050
                    If (Ones)
                    {
                        If ((M009 (0x04) == Zero))
                        {
                            Local0 |= One
                        }
                    }

                    If (Zero)
                    {
                        If ((M009 (0xFF) == Zero))
                        {
                            Local0 |= 0x04
                        }
                    }

                    Return (Local0)
                }

                If ((IIA0 == 0x0010005B))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0011001D))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110013))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00110014))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0011001B))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110024))
                {
                    Return (^^PCI0.SBRG.DSFC (IIA0, IIA1))
                }

                If ((IIA0 == 0x00110025))
                {
                    Return (^^PCI0.SBRG.DSFC (IIA0, IIA1))
                }

                If ((IIA0 == 0x00110026))
                {
                    Return (^^PCI0.SBRG.DSFL (IIA0))
                }

                If ((IIA0 == 0x00110027))
                {
                    Return (^^PCI0.SBRG.DSFL (IIA0))
                }

                If ((IIA0 == 0x00110028))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110029))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110031))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110032))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110033))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0012005A))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0012005B))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0012006C))
                {
                    Local0 = 0x00010000
                    Local0 += ^^PCI0.SBRG.ACIN /* \_SB_.PCI0.SBRG.ACIN */
                    If (^^PCI0.SBRG.PDIN)
                    {
                        Local0 += 0x02
                        If ((^^PCI0.SBRG.PDWA < 0x2D))
                        {
                            Local0 += 0x04
                        }

                        If ((^^PCI0.SBRG.PDWA == 0x64))
                        {
                            Local0 += 0x10
                        }
                    }

                    Return (Local0)
                }

                If ((IIA0 == 0x00120070))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00120076))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120077))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0012007B))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0012007E))
                {
                    Return (0x00010001)
                }

                If ((IIA0 == 0x00120091))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120092))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120095))
                {
                    If ((^^PCI0.SBRG.CPU9 == One))
                    {
                        Local0 = 0x00010000
                        Local0 |= ^^PCI0.SBRG.MCCD /* \_SB_.PCI0.SBRG.MCCD */
                        Return (Local0)
                    }

                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120096))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120097))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00120098))
                {
                    Local0 = 0x00010000
                    Local1 = ^^NPCF.ACBT /* External reference */
                    Divide (Local1, 0x08, Local2, Local1)
                    Local0 += Local1
                    Return (Local0)
                }

                If ((IIA0 == 0x00120099))
                {
                    Local0 = 0x00010000
                    Local1 = ^^NPCF.AVRT /* External reference */
                    Local0 += Local1
                    Return (Local0)
                }

                If ((IIA0 == 0x001200A0))
                {
                    Return (0x00010000)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200A1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200A2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200A3))
                {
                    Return (0x00010000)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200B0))
                {
                    Return (0x00010000)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200B1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200C0))
                {
                    Return (0x00010000)
                    Return (Zero)
                }

                If ((IIA0 == 0x001200C1))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x001200C2))
                {
                    Return (0x00010000)
                    Return (Zero)
                }

                If ((IIA0 == 0x001200C3))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200D1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200D2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200D3))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200D4))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200E1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200E2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00130021))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00130023))
                {
                    Return (0x00010000)
                }

                If ((IIA0 == 0x00130024))
                {
                    If ((^^PCI0.SBRG.TPWS == Zero))
                    {
                        Return (0x00010001)
                    }
                    Else
                    {
                        Return (0x00010000)
                    }
                }

                If ((IIA0 == 0x00090020))
                {
                    CUMA = ^^PCI0.SBRG.IVGA /* \_SB_.PCI0.SBRG.IVGA */
                    Local0 = UMAM /* \UMAM */
                    Local0 |= CUMA /* \CUMA */
                    Return (Local0)
                }

                If ((IIA0 == 0x00090016))
                {
                    Return (DGPM) /* \DGPM */
                }

                If ((IIA0 == 0x00130026))
                {
                    Local0 = 0x00010000
                    Local0 |= One
                    Return (Local0)
                }

                If ((IIA0 == 0x00120057))
                {
                    If (^^PCI0.SBRG.O120)
                    {
                        ^^PCI0.SBRG.O120 = Zero
                        Return (0x00990A00)
                    }

                    If (^^PCI0.SBRG.PHCS)
                    {
                        Return (0x00890800)
                    }

                    Return (0x00890000)
                }

                If (WCHK (Zero, IIA0))
                {
                    WNVA = 0x9603
                    WNVB = 0x02
                    WNVC = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    AII0 = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    AII1 = IIA1 /* \_SB_.ATKD.WMNB.IIA1 */
                    AII2 = IIA2 /* \_SB_.ATKD.WMNB.IIA2 */
                    AII3 = IIA3 /* \_SB_.ATKD.WMNB.IIA3 */
                    AII4 = IIA4 /* \_SB_.ATKD.WMNB.IIA4 */
                    Return (W15H ())
                }

                Return (0xFFFFFFFE)
            }

            If ((Local0 == 0x53564544))
            {
                If ((IIA0 == 0x00050011))
                {
                    If ((Arg0 == 0x02))
                    {
                        BLCT = One
                    }
                    Else
                    {
                        BLCT = Zero
                    }
                }

                If ((IIA0 == 0x00100021))
                {
                    Return (^^PCI0.SBRG.EC0.SKEY (IIA1))
                }

                If ((IIA0 == 0x00130022))
                {
                    WNVA = 0x9602
                    WNVB = 0x00130022
                    WNVC = IIA1 /* \_SB_.ATKD.WMNB.IIA1 */
                    WNVD = Zero
                    Return (W15H ())
                }

                If ((IIA0 == 0x00040017))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00040019))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00050001))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050013))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00050021))
                {
                    Local0 = (IIA1 & 0x8F)
                    ^^PCI0.SBRG.SECC (0x05, Local0)
                    Return (One)
                }

                If ((IIA0 == 0x00050031))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050032))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050035))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060023))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00060026))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00090014))
                {
                    Return (0xFFFFFFFE)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0009001D))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00100021))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00100066))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0011001C))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0011001E))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00120058))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00010031))
                {
                    Local0 = (IIA1 & One)
                    If (Zero)
                    {
                        M010 (0xFF, Local0)
                    }

                    Local0 = (IIA1 & 0x02)
                    If (Zero)
                    {
                        M010 (0xFF, (Local0 >> One))
                    }

                    Return (One)
                }

                If ((IIA0 == 0x0005001A))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050024))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050025))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050026))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00030022))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00050036))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060064))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00060091))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0009001A))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090040))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00100052))
                {
                    Return (0xFFFFFFFE)
                    Return (Zero)
                }

                If ((IIA0 == 0x00100054))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00100056))
                {
                    Sleep (0x10)
                    Return (^^PCI0.SBRG.TU56 (IIA0, IIA1, IIA2))
                }

                If ((IIA0 == 0x00100057))
                {
                    Return (^^PCI0.SBRG.TU57 (IIA0, IIA1))
                }

                If ((IIA0 == 0x00100013))
                {
                    ^^PCI0.SBRG.SEC1 (0x3D)
                    Return (One)
                }

                If ((IIA0 == 0x00110013))
                {
                    ^^PCI0.SBRG.SECC (0x3F, IIA1)
                    Return (One)
                }

                If ((IIA0 == 0x00110014))
                {
                    ^^PCI0.SBRG.SECC (0x4D, IIA1)
                    Return (One)
                }

                If ((IIA0 == 0x00110015))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110016))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00110018))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00110021))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120072))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120073))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00120074))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00120000))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00120089))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00130025))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0xC0400000))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0xC0400001))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0005001C))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005001D))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005001E))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0005002E))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00060097))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x000600C1))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x000600C2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x000600C3))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00090019))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090029))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090041))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00110024))
                {
                    Return (^^PCI0.SBRG.DEFC (IIA0, IIA1, IIA2, IIA3, IIA4))
                }

                If ((IIA0 == 0x00110025))
                {
                    Return (^^PCI0.SBRG.DEFC (IIA0, IIA1, IIA2, IIA3, IIA4))
                }

                If ((IIA0 == 0x00110028))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00110031))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00110032))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x0012005B))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x00120070))
                {
                    ^^PCI0.SBRG.MSAS = IIA1 /* \_SB_.ATKD.WMNB.IIA1 */
                    Return (One)
                }

                If ((IIA0 == 0x00120076))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120092))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120095))
                {
                    If ((^^PCI0.SBRG.CPU9 == One))
                    {
                        If ((IIA1 == Zero))
                        {
                            ^^PCI0.SBRG.MCCD = Zero
                            Return (One)
                        }
                    }

                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00120098))
                {
                    Local0 = IIA1 /* \_SB_.ATKD.WMNB.IIA1 */
                    Local0 *= 0x08
                    ^^NPCF.ACBT = Local0
                    Notify (NPCF, 0xC0) // Hardware-Specific
                    Return (One)
                }

                If ((IIA0 == 0x001200A0))
                {
                    ^^PCI0.SBRG.SPLX (IIA0, IIA1)
                    Return (One)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200A1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200A2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200A3))
                {
                    ^^PCI0.SBRG.SPLX (IIA0, IIA1)
                    Return (One)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200B0))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200B1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200D2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200C0))
                {
                    If ((IIA1 < 0x05))
                    {
                        ^^PCI0.SBRG.PPAB (Zero)
                    }
                    Else
                    {
                        If (((^^NPCF.DBAC == One) || (^^NPCF.DBDC == One)))
                        {
                            ^^NPCF.DBAC = Zero
                            ^^NPCF.DBDC = Zero
                        }

                        Local0 = (IIA1 << 0x03)
                        If ((Local0 != ^^NPCF.AMAT))
                        {
                            ^^NPCF.AMAT = Local0
                            Notify (NPCF, 0xC0) // Hardware-Specific
                        }
                    }

                    Return (One)
                    Return (Zero)
                }

                If ((IIA0 == 0x001200C1))
                {
                    ^^PCI0.SBRG.SPLX (IIA0, IIA1)
                    Return (One)
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200C2))
                {
                    ^^PCI0.SBRG.RCTT (IIA1)
                    Return (One)
                    Return (Zero)
                }

                If ((IIA0 == 0x00130024))
                {
                    If ((IIA1 == Zero))
                    {
                        ^^PCI0.SBRG.TPWS = One
                    }
                    Else
                    {
                        ^^PCI0.SBRG.TPWS = Zero
                    }

                    Return (One)
                }

                If ((IIA0 == 0x00060095))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0012007B))
                {
                    Return (Zero)
                }

                If ((IIA0 == 0x0012007E))
                {
                    Local0 = (IIA1 + 0x000A0000)
                    ^^PCI0.SBRG.MDSA = Local0
                    ^^PCI0.SBRG.MDSE = IIA2 /* \_SB_.ATKD.WMNB.IIA2 */
                    Return (One)
                }

                If ((IIA0 == 0x0012007F))
                {
                    ^^PCI0.SBRG.MS02 (IIA0, IIA1)
                    Return (One)
                }

                If ((IIA0 == 0x001200E1))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x001200E2))
                {
                    Return (0xFFFFFFFE)
                }

                If ((IIA0 == 0x00090020))
                {
                    If ((^^PCI0.SBRG.UMAC (IIA1) == Zero))
                    {
                        If ((IIA1 == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x02)
                        }
                    }

                    If ((^^PCI0.SBRG.HDRP == Zero))
                    {
                        ^^PCI0.SBRG.SECC (0x40, CUMA)
                    }

                    If ((CUMA == One))
                    {
                        ^^PCI0.SBRG.UMAT = 0xCA
                    }
                    Else
                    {
                        ^^PCI0.SBRG.UMAT = Zero
                    }

                    ^^PCI0.SBRG.IVGA = CUMA /* \CUMA */
                    ^^PCI0.SBRG.OSMI (0xA0)
                    Local0 = ^^PCI0.SBRG.CMMV /* \_SB_.PCI0.SBRG.CMMV */
                    If ((^^PCI0.SBRG.CMMV == 0x02))
                    {
                        If ((CUMA == One))
                        {
                            Local0 = 0x03
                        }
                    }
                    ElseIf ((^^PCI0.SBRG.CMMV == 0x03))
                    {
                        If ((CUMA == Zero))
                        {
                            Local0 = 0x02
                        }
                    }

                    If ((Local0 != ^^PCI0.SBRG.CMMV))
                    {
                        ^^PCI0.SBRG.SECC (0x1E, Local0)
                    }

                    Return (One)
                }

                If ((IIA0 == 0x00120057))
                {
                    If ((IIA1 <= 0x50))
                    {
                        ^^PCI0.SBRG.BH30 = 0x50
                        Notify (^^PCI0.SBRG.BAT0, 0x80) // Status Change
                    }
                    Else
                    {
                        ^^PCI0.SBRG.BH30 = Zero
                        Notify (^^PCI0.SBRG.BAT0, 0x80) // Status Change
                    }

                    Return (SRSC (IIA1))
                }

                If (WCHK (One, IIA0))
                {
                    WNVA = 0x9603
                    WNVB = 0x03
                    WNVC = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    AII0 = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    AII1 = IIA1 /* \_SB_.ATKD.WMNB.IIA1 */
                    AII2 = IIA2 /* \_SB_.ATKD.WMNB.IIA2 */
                    AII3 = IIA3 /* \_SB_.ATKD.WMNB.IIA3 */
                    AII4 = IIA4 /* \_SB_.ATKD.WMNB.IIA4 */
                    Return (W15H ())
                }

                Return (0xFFFFFFFE)
            }

            Return (0xFFFFFFFE)
        }
    }

    Scope (_SB)
    {
        Mutex (MSMI, 0x00)
        Method (W15H, 0, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            WSCP = 0xAA
            Release (MSMI)
            Return (WNVA) /* \WNVA */
        }
    }

    Scope (\)
    {
        Device (UAT2)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AHWM")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x85, 0x19, 0xB5, 0x49, 0xF2, 0xEE, 0x71, 0x44,  // ...I..qD
                /* 0008 */  0xB0, 0x05, 0xB9, 0xFA, 0xB4, 0xCC, 0xEB, 0xC1,  // ........
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
        }
    }

    Scope (UAT2)
    {
        Method (MSCV, 0, Serialized)
        {
            Return (Zero)
        }

        Method (M12V, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MS5V, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MS3V, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MCUT, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MCPT, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MMBT, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MSCF, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MSSF, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MA1F, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MA2F, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MBTV, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MPCT, 0, Serialized)
        {
            Return (Zero)
        }

        Method (MBTT, 0, Serialized)
        {
            Return (Zero)
        }
    }

    Scope (UAT2)
    {
        Method (ASMS, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (0x06020011)
                {
                    Return (MSCV ())
                }
                Case (0x06020061)
                {
                    Return (M12V ())
                }
                Case (0x06020062)
                {
                    Return (MS5V ())
                }
                Case (0x06020063)
                {
                    Return (MS3V ())
                }
                Case (0x06030012)
                {
                    Return (MCUT ())
                }
                Case (0x06030015)
                {
                    Return (MCPT ())
                }
                Case (0x06030014)
                {
                    Return (MMBT ())
                }
                Case (0x06030020)
                {
                    Return (MBTT ())
                }
                Case (0x06040013)
                {
                    Return (MSCF ())
                }
                Case (0x06040073)
                {
                    Return (MSSF ())
                }
                Case (0x06040083)
                {
                    Return (MA1F ())
                }
                Case (0x06040093)
                {
                    Return (MA2F ())
                }

            }

            Return (IDF) /* \UAT2.IDF_ */
        }

        Name (HWTB, Package (0x03)
        {
            Package (0x0C)
            {
                0x06030012, 
                0x64, 
                0x64, 
                Zero, 
                Zero, 
                0x78, 
                0xFFFFFFFFFFFFFFCE, 
                One, 
                0x0A, 
                One, 
                0x02, 
                "CPU"
            }, 

            Package (0x0C)
            {
                0x06030020, 
                0x39, 
                0x39, 
                0x03, 
                0x03, 
                0x3C, 
                Zero, 
                One, 
                0x0A, 
                One, 
                0x02, 
                "Battery"
            }, 

            Package (0x0C)
            {
                0x06040013, 
                0x1C20, 
                0x1C20, 
                Zero, 
                Zero, 
                0x1F40, 
                Zero, 
                One, 
                0x08, 
                0x04, 
                0x02, 
                "CPU fan"
            }
        })
        Name (HWSZ, Zero)
        HWSZ = SizeOf (HWTB)
        Name (HMSZ, 0x14)
        HMSZ = (0x08 * HMSZ)
        Name (ITSZ, Zero)
        ITSZ = SizeOf (HWTB [Zero])
        Name (IDOS, Zero)
        Name (IDF, 0xFFFFFFFF)
        Name (IBSZ, Zero)
        IBSZ = ((ITSZ * 0x08) + 0x20)
        Name (RIDB, Buffer (((HMSZ * 0x08) + 0x08)){})
        Name (RVUB, Buffer (((HWSZ * 0x10) + 0x08)){})
        Name (RITB, Buffer ((IBSZ * 0x08)){})
        Method (CP2B, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = ITSZ /* \UAT2.ITSZ */
            Local2 = DerefOf (Arg0)
            Local3 = Buffer (Zero){}
            Concatenate (Local3, ToBuffer (Arg1), Local3)
            While ((Local0 < Local1))
            {
                Concatenate (Local3, ToBuffer (DerefOf (Local2 [Local0])), Local3)
                Local0 += One
            }

            Return (Local3)
        }

        Method (ID2I, 1, NotSerialized)
        {
            Local0 = Zero
            Local1 = HWSZ /* \UAT2.HWSZ */
            Local2 = Arg0
            Local3 = IDF /* \UAT2.IDF_ */
            While ((Local0 < Local1))
            {
                Local4 = DerefOf (DerefOf (HWTB [Local0]) [IDOS])
                If ((Local2 == Local4))
                {
                    Local3 = Local0
                    Break
                }

                Local0 += One
            }

            Return (Local3)
        }

        Method (GIDP, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = HWSZ /* \UAT2.HWSZ */
            Local2 = Package (HWSZ){}
            While ((Local0 < Local1))
            {
                Local2 [Local0] = DerefOf (DerefOf (HWTB [Local0]) [
                    Zero])
                Local0 += One
            }

            Return (Local2)
        }

        Method (GHID, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = HWSZ /* \UAT2.HWSZ */
            Local2 = GIDP ()
            Local3 = Buffer (Zero){}
            Concatenate (Local3, ToBuffer (Local1), Local3)
            While ((Local0 < Local1))
            {
                Concatenate (Local3, ToBuffer (DerefOf (Local2 [Local0])), Local3)
                Local0 += One
            }

            Return (Local3)
        }

        Method (GASV, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = HWSZ /* \UAT2.HWSZ */
            Local2 = GIDP ()
            Local3 = Buffer (Zero){}
            Concatenate (Local3, ToBuffer (Local1), Local3)
            While ((Local0 < Local1))
            {
                Local4 = DerefOf (Local2 [Local0])
                Concatenate (Local3, ToBuffer (Local4), Local3)
                Concatenate (Local3, ToBuffer (ASMS (Local4)), Local3)
                Local0 += One
            }

            Return (Local3)
        }
    }

    Scope (UAT2)
    {
        Method (WMBC, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, IIA0)
            CreateDWordField (Arg2, 0x04, IIA1)
            Switch (Arg1)
            {
                Case (0x0B)
                {
                    RIDB = GASV ()
                    Return (RIDB) /* \UAT2.RIDB */
                }
                Case (0x0C)
                {
                    RIDB = GHID ()
                    Return (RIDB) /* \UAT2.RIDB */
                }
                Case (0x0D)
                {
                    Local0 = ID2I (IIA0)
                    Local1 = Zero
                    If ((Local0 == IDF))
                    {
                        Return (Buffer ((IBSZ * 0x08)){})
                    }
                    Else
                    {
                        Local1 = ASMS (IIA0)
                        RITB = CP2B (HWTB [Local0], Local1)
                        Return (RITB) /* \UAT2.RITB */
                    }
                }
                Default
                {
                    Return (IDF) /* \UAT2.IDF_ */
                }

            }

            Return (Zero)
        }
    }

    Scope (UAT2)
    {
        Name (WQMO, Buffer (0x0573)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x63, 0x05, 0x00, 0x00, 0x14, 0x16, 0x00, 0x00,  // c.......
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x18, 0x54, 0x8A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .T.....B
            /* 0020 */  0x20, 0xE2, 0x01, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
            /* 0028 */  0x48, 0x01, 0x0C, 0x46, 0x02, 0x84, 0xE4, 0x40,  // H..F...@
            /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
            /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
            /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
            /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
            /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
            /* 0058 */  0x81, 0x53, 0x02, 0xEF, 0xC4, 0x42, 0x05, 0x28,  // .S...B.(
            /* 0060 */  0x17, 0xE0, 0x5B, 0x80, 0x76, 0x44, 0x49, 0x16,  // ..[.vDI.
            /* 0068 */  0x60, 0x19, 0x46, 0x04, 0x1E, 0x45, 0x64, 0xA3,  // `.F..Ed.
            /* 0070 */  0x71, 0x82, 0xB2, 0xA1, 0x51, 0x32, 0x20, 0xE4,  // q...Q2 .
            /* 0078 */  0x59, 0x80, 0x75, 0x60, 0x42, 0x60, 0xF7, 0x93,  // Y.u`B`..
            /* 0080 */  0x90, 0x39, 0x01, 0x8A, 0x05, 0x58, 0x13, 0x60,  // .9...X.`
            /* 0088 */  0x0C, 0x44, 0xE2, 0x40, 0x64, 0x6B, 0x08, 0x42,  // .D.@dk.B
            /* 0090 */  0xA8, 0x59, 0x80, 0x32, 0x14, 0xC1, 0x45, 0xE8,  // .Y.2..E.
            /* 0098 */  0x0D, 0x4D, 0x28, 0x11, 0x0B, 0x43, 0x10, 0x9E,  // .M(..C..
            /* 00A0 */  0x51, 0x82, 0xC6, 0x3B, 0xAB, 0x20, 0xE1, 0xCE,  // Q..;. ..
            /* 00A8 */  0x2A, 0x42, 0xD8, 0x28, 0x31, 0x42, 0xB6, 0x3F,  // *B.(1B.?
            /* 00B0 */  0x08, 0x12, 0x6E, 0xC1, 0x1A, 0xAA, 0x23, 0x8D,  // ..n...#.
            /* 00B8 */  0x06, 0x35, 0xBC, 0x04, 0x87, 0xEB, 0xA1, 0x9E,  // .5......
            /* 00C0 */  0x63, 0xE7, 0x02, 0xA4, 0xC3, 0x0B, 0x24, 0xB8,  // c.....$.
            /* 00C8 */  0x75, 0x8E, 0x93, 0x80, 0x24, 0x30, 0x56, 0x82,  // u...$0V.
            /* 00D0 */  0x0E, 0x06, 0x0E, 0xC5, 0x35, 0xA0, 0x66, 0x7C,  // ....5.f|
            /* 00D8 */  0xBC, 0x4C, 0x10, 0x1C, 0x6A, 0x88, 0x1E, 0x68,  // .L..j..h
            /* 00E0 */  0xB8, 0x13, 0x38, 0x44, 0x06, 0xE8, 0x81, 0x1D,  // ..8D....
            /* 00E8 */  0x0D, 0xE6, 0x00, 0x60, 0x87, 0x93, 0xD1, 0x3D,  // ...`...=
            /* 00F0 */  0xA0, 0x54, 0x01, 0x66, 0xC7, 0x2C, 0x8B, 0x40,  // .T.f.,.@
            /* 00F8 */  0x1A, 0x8F, 0xA1, 0x4F, 0xF7, 0x7C, 0x4E, 0x38,  // ...O.|N8
            /* 0100 */  0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43, 0xDB,  // ....52C.
            /* 0108 */  0xE0, 0xB4, 0x84, 0x19, 0xF2, 0xF0, 0x0F, 0x8B,  // ........
            /* 0110 */  0x89, 0x85, 0xD0, 0x07, 0xC1, 0xE3, 0x81, 0xF7,  // ........
            /* 0118 */  0xFF, 0x1F, 0x0F, 0x78, 0x46, 0xFE, 0x4C, 0x10,  // ...xF.L.
            /* 0120 */  0xE1, 0x95, 0x20, 0xB6, 0x07, 0x94, 0xA0, 0x48,  // .. ....H
            /* 0128 */  0x60, 0xF4, 0x80, 0xEC, 0x57, 0x00, 0x42, 0xF0,  // `...W.B.
            /* 0130 */  0x32, 0x47, 0x24, 0xA7, 0x08, 0x1A, 0x93, 0x27,  // 2G$....'
            /* 0138 */  0xF7, 0x6A, 0x10, 0x22, 0xEC, 0x9B, 0x83, 0xF1,  // .j."....
            /* 0140 */  0x83, 0x1F, 0xD6, 0x71, 0x05, 0x39, 0x9E, 0xB7,  // ...q.9..
            /* 0148 */  0x07, 0x3E, 0x04, 0xAC, 0x98, 0x21, 0xA0, 0xCE,  // .>...!..
            /* 0150 */  0x01, 0xF1, 0x43, 0x9E, 0xCE, 0x21, 0x1C, 0x50,  // ..C..!.P
            /* 0158 */  0x94, 0xB3, 0x38, 0x22, 0x1F, 0x1A, 0x8C, 0x70,  // ..8"...p
            /* 0160 */  0x02, 0xE5, 0x9E, 0x1D, 0xC8, 0x09, 0xC1, 0xF3,  // ........
            /* 0168 */  0x38, 0xA9, 0xD7, 0x01, 0x8F, 0x40, 0x4A, 0x0E,  // 8....@J.
            /* 0170 */  0x04, 0x4C, 0xC2, 0xFB, 0x40, 0x36, 0xD6, 0x6A,  // .L..@6.j
            /* 0178 */  0x02, 0xC9, 0x82, 0x50, 0xF4, 0x43, 0x82, 0xE6,  // ...P.C..
            /* 0180 */  0x1E, 0x37, 0xE6, 0x31, 0x86, 0x37, 0x74, 0xE4,  // .7.1.7t.
            /* 0188 */  0xA3, 0x08, 0xF4, 0x8A, 0xE0, 0x29, 0x59, 0x2B,  // .....)Y+
            /* 0190 */  0x12, 0x19, 0x42, 0xA4, 0x40, 0x09, 0x1C, 0x12,  // ..B.@...
            /* 0198 */  0x58, 0x47, 0x0E, 0x04, 0x85, 0x0E, 0x0D, 0x1E,  // XG......
            /* 01A0 */  0x95, 0xE1, 0x1C, 0x07, 0x8E, 0x82, 0x78, 0x2C,  // ......x,
            /* 01A8 */  0x0E, 0x72, 0xC2, 0xA0, 0x07, 0x02, 0x7E, 0x0C,  // .r....~.
            /* 01B0 */  0xF0, 0x38, 0x8E, 0xB4, 0xFA, 0xF3, 0x00, 0x15,  // .8......
            /* 01B8 */  0x7E, 0x6A, 0x80, 0x36, 0x9C, 0x83, 0x39, 0x3B,  // ~j.6..9;
            /* 01C0 */  0xCF, 0xC2, 0x70, 0x86, 0x34, 0x1C, 0x9F, 0xF5,  // ..p.4...
            /* 01C8 */  0xDB, 0x47, 0x02, 0x7E, 0x68, 0x00, 0xC3, 0x99,  // .G.~h...
            /* 01D0 */  0xC1, 0x53, 0xA8, 0xED, 0x16, 0x42, 0x08, 0x46,  // .S...B.F
            /* 01D8 */  0x1C, 0x94, 0xC7, 0x4B, 0x07, 0xE5, 0x43, 0x89,  // ...K..C.
            /* 01E0 */  0xC7, 0x0A, 0xEF, 0x14, 0x10, 0x28, 0x42, 0xA0,  // .....(B.
            /* 01E8 */  0xFF, 0xFF, 0x73, 0x85, 0x63, 0x9C, 0x53, 0xA0,  // ..s.c.S.
            /* 01F0 */  0x0D, 0x0D, 0xEE, 0x90, 0x4E, 0xE0, 0x39, 0xC2,  // ....N.9.
            /* 01F8 */  0xA2, 0xC0, 0xE9, 0x08, 0xE1, 0x8C, 0xDD, 0x23,  // .......#
            /* 0200 */  0x04, 0x9F, 0xC0, 0x63, 0x04, 0x28, 0x80, 0x7C,  // ...c.(.|
            /* 0208 */  0x6B, 0xB0, 0xD2, 0x93, 0x03, 0x9D, 0x43, 0x88,  // k.....C.
            /* 0210 */  0x30, 0xD1, 0x0C, 0x8F, 0x89, 0xBF, 0x1E, 0x59,  // 0......Y
            /* 0218 */  0x38, 0x31, 0xD0, 0x71, 0xF1, 0x83, 0x84, 0xCF,  // 81.q....
            /* 0220 */  0x31, 0x0C, 0xFB, 0xA5, 0xC1, 0xA2, 0x27, 0xAA,  // 1.....'.
            /* 0228 */  0x2B, 0xC4, 0x41, 0xBD, 0x71, 0x78, 0xB8, 0x86,  // +.A.qx..
            /* 0230 */  0xF5, 0x80, 0x39, 0xAC, 0xD1, 0xC2, 0x3E, 0x21,  // ..9...>!
            /* 0238 */  0x3C, 0x6D, 0xF8, 0xA6, 0xE2, 0x99, 0x19, 0x23,  // <m.....#
            /* 0240 */  0xAC, 0xCF, 0x28, 0xE0, 0x00, 0xC4, 0x7B, 0xBF,  // ..(...{.
            /* 0248 */  0x9E, 0x90, 0x09, 0x18, 0x90, 0xC9, 0x1D, 0x98,  // ........
            /* 0250 */  0x8E, 0x1B, 0xB8, 0xC9, 0xBF, 0x15, 0xF8, 0x7C,  // .......|
            /* 0258 */  0x12, 0xD3, 0xA3, 0x79, 0x41, 0xF1, 0xE1, 0xC3,  // ...yA...
            /* 0260 */  0x60, 0xF0, 0xD4, 0x0D, 0x44, 0x93, 0x3E, 0x98,  // `...D.>.
            /* 0268 */  0x48, 0x3E, 0x19, 0x1C, 0x8F, 0x81, 0x0E, 0xC8,  // H>......
            /* 0270 */  0xA0, 0x47, 0x19, 0x25, 0xF0, 0xD3, 0x02, 0x06,  // .G.%....
            /* 0278 */  0xE7, 0x95, 0xE5, 0x6D, 0x81, 0xC3, 0x04, 0x0C,  // ...m....
            /* 0280 */  0x65, 0x60, 0xE3, 0x85, 0x3F, 0x05, 0xFF, 0xFF,  // e`..?...
            /* 0288 */  0x27, 0xF7, 0x10, 0xC3, 0x10, 0x5F, 0x19, 0xEA,  // '...._..
            /* 0290 */  0x42, 0xD4, 0x01, 0x83, 0x4F, 0xC4, 0x60, 0xB1,  // B...O.`.
            /* 0298 */  0x4F, 0xF7, 0x75, 0xE5, 0xB1, 0xC8, 0x38, 0x71,  // O.u...8q
            /* 02A0 */  0x5F, 0x46, 0x8E, 0x03, 0x8B, 0x11, 0x99, 0x5D,  // _F.....]
            /* 02A8 */  0x24, 0xE0, 0x8F, 0xC1, 0x98, 0xB8, 0x83, 0x83,  // $.......
            /* 02B0 */  0x91, 0x1E, 0x61, 0x3C, 0x9F, 0x20, 0xA1, 0x31,  // ..a<. .1
            /* 02B8 */  0x30, 0x47, 0x15, 0xE6, 0x80, 0x22, 0x1E, 0x86,  // 0G..."..
            /* 02C0 */  0x81, 0x8A, 0x47, 0x27, 0x6E, 0x4F, 0x10, 0x42,  // ..G'nO.B
            /* 02C8 */  0x09, 0xF1, 0xE2, 0x10, 0xE2, 0x29, 0xE9, 0x0D,  // .....)..
            /* 02D0 */  0xC9, 0x67, 0xA3, 0x08, 0xCF, 0x06, 0xD1, 0x62,  // .g.....b
            /* 02D8 */  0x04, 0x32, 0x44, 0x18, 0x23, 0x47, 0xB0, 0xDD,  // .2D.#G..
            /* 02E0 */  0x23, 0x07, 0x7B, 0x2C, 0xE8, 0xC4, 0xC2, 0x4F,  // #.{,...O
            /* 02E8 */  0x1C, 0x8E, 0x7C, 0x62, 0x81, 0x7E, 0xB8, 0xE0,  // ..|b.~..
            /* 02F0 */  0x01, 0xCF, 0x2B, 0xA8, 0x68, 0x14, 0x0A, 0x76,  // ..+.h..v
            /* 02F8 */  0x5E, 0x41, 0x45, 0x81, 0xA3, 0x20, 0x3E, 0xAF,  // ^AE.. >.
            /* 0300 */  0x00, 0x4E, 0xE2, 0x9D, 0x57, 0xD0, 0xE3, 0xF0,  // .N..W...
            /* 0308 */  0x48, 0xF1, 0xA7, 0x15, 0x38, 0xFF, 0xFF, 0xD3,  // H...8...
            /* 0310 */  0x0A, 0x38, 0x87, 0xEB, 0xD3, 0x0A, 0xE0, 0x24,  // .8.....$
            /* 0318 */  0xE6, 0x69, 0x05, 0x74, 0xA7, 0x03, 0x9F, 0x56,  // .i.t...V
            /* 0320 */  0x80, 0xAB, 0xAC, 0xD3, 0x0A, 0x10, 0xF0, 0x38,  // .......8
            /* 0328 */  0x42, 0x02, 0xF2, 0x06, 0xE6, 0x23, 0x06, 0xBB,  // B....#..
            /* 0330 */  0xAB, 0xE0, 0xCF, 0x21, 0xFC, 0xAA, 0xC0, 0x4F,  // ...!...O
            /* 0338 */  0x29, 0xF0, 0xFF, 0xFF, 0xA7, 0x14, 0x30, 0x5C,  // ).....0\
            /* 0340 */  0x1F, 0xB0, 0x67, 0x14, 0x78, 0x83, 0xC1, 0x5D,  // ..g.x..]
            /* 0348 */  0x4F, 0xC0, 0x00, 0x06, 0xC3, 0xD9, 0x0D, 0x05,  // O.......
            /* 0350 */  0x2D, 0x4E, 0xC5, 0x09, 0x05, 0x73, 0x92, 0x72,  // -N...s.r
            /* 0358 */  0xFC, 0xE5, 0xEB, 0x84, 0xC2, 0xE6, 0x83, 0x3B,  // .......;
            /* 0360 */  0x38, 0x9C, 0xE6, 0x73, 0x82, 0xB1, 0x2A, 0x1C,  // 8..s..*.
            /* 0368 */  0x8F, 0x4E, 0x14, 0x3C, 0x2A, 0xAC, 0x8E, 0x14,  // .N.<*...
            /* 0370 */  0x3E, 0xEE, 0x39, 0x24, 0x8C, 0x22, 0x9F, 0x22,  // >.9$."."
            /* 0378 */  0xE8, 0x41, 0x8D, 0x9C, 0x2C, 0x28, 0x88, 0x01,  // .A..,(..
            /* 0380 */  0x9D, 0x00, 0x42, 0x4E, 0x8E, 0x28, 0x28, 0x0D,  // ..BN.((.
            /* 0388 */  0x67, 0x0C, 0xC4, 0xD5, 0xE1, 0x0D, 0x82, 0x5D,  // g......]
            /* 0390 */  0x0D, 0x7C, 0x4B, 0xE0, 0x78, 0x3E, 0x5F, 0x18,  // .|K.x>_.
            /* 0398 */  0xD6, 0x6A, 0x6E, 0x12, 0x28, 0x6C, 0x0C, 0x81,  // .jn.(l..
            /* 03A0 */  0x27, 0xF8, 0xC0, 0x01, 0xFB, 0x7E, 0xE9, 0x6B,  // '....~.k
            /* 03A8 */  0x84, 0x47, 0x7B, 0xBE, 0x09, 0xEA, 0xBB, 0x6F,  // .G{....o
            /* 03B0 */  0x80, 0x1C, 0x9D, 0x07, 0xF6, 0x30, 0x52, 0x4C,  // .....0RL
            /* 03B8 */  0x44, 0x18, 0x8D, 0xD4, 0x20, 0xD6, 0x71, 0xB6,  // D... .q.
            /* 03C0 */  0x81, 0x76, 0x1B, 0xE2, 0xFF, 0xFF, 0x73, 0x85,  // .v....s.
            /* 03C8 */  0xCF, 0x36, 0xE0, 0x3E, 0xAC, 0x80, 0x33, 0xCC,  // .6.>..3.
            /* 03D0 */  0xA0, 0xD0, 0x30, 0x3E, 0x14, 0xC1, 0x19, 0x16,  // ..0>....
            /* 03D8 */  0xB8, 0xCF, 0x09, 0x1E, 0x16, 0xF8, 0x4E, 0x3D,  // ......N=
            /* 03E0 */  0x1E, 0x16, 0x0E, 0xDE, 0x07, 0xCB, 0xD8, 0xC7,  // ........
            /* 03E8 */  0x04, 0x7E, 0x28, 0x8F, 0x09, 0x58, 0x5C, 0x71,  // .~(..X\q
            /* 03F0 */  0x8E, 0x09, 0xFC, 0xA7, 0x25, 0x8F, 0x09, 0xF7,  // ....%...
            /* 03F8 */  0xFF, 0x1F, 0x13, 0x78, 0xCF, 0x15, 0x87, 0x0D,  // ...x....
            /* 0400 */  0x0C, 0xCE, 0x46, 0x1E, 0x13, 0xB0, 0x18, 0x36,  // ..F....6
            /* 0408 */  0x30, 0xB8, 0xA0, 0x78, 0x4C, 0xC0, 0x01, 0xF8,  // 0..xL...
            /* 0410 */  0x31, 0xE4, 0x39, 0xE7, 0x98, 0xC0, 0xFE, 0x3B,  // 1.9....;
            /* 0418 */  0xD1, 0x98, 0x80, 0xC6, 0xD9, 0x86, 0x8D, 0x09,  // ........
            /* 0420 */  0xEE, 0xFF, 0x7F, 0x4C, 0xF0, 0x61, 0x3C, 0x26,  // ...L.a<&
            /* 0428 */  0xF0, 0x45, 0x19, 0x13, 0x1A, 0xDA, 0xC8, 0x31,  // .E.....1
            /* 0430 */  0xC3, 0x9E, 0x76, 0xD4, 0x37, 0x6C, 0x8F, 0x0A,  // ..v.7l..
            /* 0438 */  0xEC, 0x26, 0x46, 0x05, 0xCA, 0x13, 0x0F, 0x9C,  // .&F.....
            /* 0440 */  0xB3, 0x81, 0x41, 0x5F, 0xCC, 0x9F, 0x1F, 0xC0,  // ..A_....
            /* 0448 */  0xFF, 0xB5, 0xD2, 0xA0, 0x40, 0x18, 0x68, 0x50,  // ....@.hP
            /* 0450 */  0xE8, 0xC3, 0x21, 0x1E, 0xFD, 0x21, 0xEB, 0xA8,  // ..!..!..
            /* 0458 */  0x02, 0x3D, 0xF3, 0x00, 0x07, 0x60, 0x0F, 0x0C,  // .=...`..
            /* 0460 */  0xDE, 0xFF, 0xFF, 0x84, 0x00, 0xAE, 0x81, 0x3D,  // .......=
            /* 0468 */  0xCD, 0xF9, 0x32, 0xEB, 0xB3, 0x37, 0x1B, 0x15,  // ..2..7..
            /* 0470 */  0xB8, 0x0F, 0x04, 0x1E, 0x15, 0xF8, 0xA2, 0x41,  // .......A
            /* 0478 */  0xC8, 0xC8, 0x49, 0x13, 0x75, 0x2D, 0xF3, 0xE8,  // ..I.u-..
            /* 0480 */  0x71, 0xA7, 0xF7, 0xF3, 0x7A, 0x3B, 0x34, 0x81,  // q...z;4.
            /* 0488 */  0x43, 0x1C, 0x34, 0x41, 0xBD, 0x11, 0x0F, 0x0F,  // C.4A....
            /* 0490 */  0x9E, 0x8D, 0xD3, 0x23, 0x3D, 0xA8, 0x81, 0x43,  // ...#=..C
            /* 0498 */  0xDC, 0x39, 0x13, 0xA8, 0x88, 0x3A, 0x67, 0x82,  // .9...:g.
            /* 04A0 */  0x6E, 0x68, 0xFC, 0x9C, 0x09, 0xFF, 0xFF, 0x7F,  // nh......
            /* 04A8 */  0xCE, 0x04, 0x1E, 0x87, 0x01, 0x9F, 0x33, 0x81,  // ......3.
            /* 04B0 */  0xC5, 0x25, 0x01, 0x87, 0x73, 0x6E, 0x2F, 0x8A,  // .%..sn/.
            /* 04B8 */  0xFC, 0x3A, 0x61, 0x5C, 0x86, 0x75, 0x58, 0x71,  // .:a\.uXq
            /* 04C0 */  0x7C, 0x3F, 0x31, 0xCC, 0x33, 0xE6, 0xAB, 0xC7,  // |?1.3...
            /* 04C8 */  0xE3, 0x26, 0x3B, 0x0E, 0x5A, 0xA1, 0x4D, 0x9F,  // .&;.Z.M.
            /* 04D0 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
            /* 04D8 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0x4C, 0xD3,  // .Z}*5fL.
            /* 04E0 */  0xB9, 0xC7, 0xA7, 0x63, 0x2A, 0xE2, 0xD5, 0x26,  // ...c*..&
            /* 04E8 */  0x10, 0x07, 0xA0, 0x90, 0x11, 0x10, 0xC5, 0x01,  // ........
            /* 04F0 */  0x11, 0x90, 0x25, 0x3E, 0x1D, 0x04, 0x64, 0xC1,  // ..%>..d.
            /* 04F8 */  0x20, 0x02, 0xB2, 0xFC, 0x07, 0x91, 0x80, 0x1C,  //  .......
            /* 0500 */  0x06, 0x44, 0x40, 0x16, 0xB7, 0x4C, 0x01, 0x59,  // .D@..L.Y
            /* 0508 */  0x2A, 0x88, 0x80, 0xAC, 0x6E, 0xC9, 0x02, 0x22,  // *...n.."
            /* 0510 */  0x20, 0x02, 0xB2, 0xA8, 0x45, 0x0B, 0xC8, 0x12,  //  ...E...
            /* 0518 */  0x41, 0x04, 0xE4, 0x80, 0x40, 0x34, 0x2E, 0x10,  // A...@4..
            /* 0520 */  0x95, 0xF9, 0x26, 0x10, 0x90, 0x45, 0x83, 0x08,  // ..&..E..
            /* 0528 */  0xC8, 0x61, 0x81, 0x68, 0x74, 0x20, 0x2A, 0xF9,  // .a.ht *.
            /* 0530 */  0x65, 0x28, 0x20, 0x07, 0x00, 0x11, 0x90, 0x83,  // e( .....
            /* 0538 */  0x03, 0x51, 0x19, 0x3E, 0x06, 0x45, 0x41, 0x34,  // .Q.>.EA4
            /* 0540 */  0x28, 0x02, 0x44, 0x45, 0x3C, 0x21, 0x04, 0x64,  // (.DE<!.d
            /* 0548 */  0x49, 0x20, 0x02, 0x72, 0x1C, 0x20, 0x1A, 0x0E,  // I .r. ..
            /* 0550 */  0x88, 0xCA, 0xA2, 0x11, 0x90, 0x45, 0x52, 0x08,  // .....ER.
            /* 0558 */  0xC8, 0x31, 0x81, 0x68, 0x68, 0x20, 0x2A, 0x58,  // .1.hh *X
            /* 0560 */  0x09, 0x10, 0x93, 0x0F, 0xA2, 0xFF, 0xFF, 0x45,  // .......E
            /* 0568 */  0x93, 0x3C, 0x38, 0x05, 0x64, 0x69, 0x20, 0x02,  // .<8.di .
            /* 0570 */  0xF2, 0xFF, 0x1F                                 // ...
        })
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (AITM, Zero)
        Name (PLMD, Zero)
        Name (MUTX, One)
        Name (LEDS, Zero)
        Name (PWKY, Zero)
        Name (BLCT, Zero)
        OperationRegion (WSMI, SystemIO, 0xB2, 0x02)
        Field (WSMI, ByteAcc, NoLock, Preserve)
        {
            WSCP,   8, 
            WSSP,   8
        }

        Mutex (MMTX, 0x00)
        Method (WISM, 1, NotSerialized)
        {
            Acquire (MMTX, 0xFFFF)
            WSCP = Arg0
            Release (MMTX)
        }

        Method (ASMI, 1, Serialized)
        {
            ALPR = Arg0
            WSCP = EXSI /* \EXSI */
            Return (ALPR) /* \ALPR */
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (QLIB, 1, Serialized)
        {
            MBF2 = Arg0
            Switch (Arg0)
            {
                Case (0x15)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x7C)
                    }
                }
                Case (0x24)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x99)
                    }
                }
                Case (0x25)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0xAE)
                    }
                }
                Case (One)
                {
                    If ((OSYS >= 0x07DC))
                    {
                        S2SC (0xE0)
                        S2SC (0x20)
                        S2SC (0xE0)
                        S2SC (0xA0)
                    }
                }
                Case (0x02)
                {
                    If ((OSYS >= 0x07DC))
                    {
                        S2SC (0xE0)
                        S2SC (0x2E)
                        S2SC (0xE0)
                        S2SC (0xAE)
                    }
                }
                Case (0x03)
                {
                    If ((OSYS >= 0x07DC))
                    {
                        S2SC (0xE0)
                        S2SC (0x30)
                        S2SC (0xE0)
                        S2SC (0xB0)
                    }
                }
                Case (0x09)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x40)
                    }
                }
                Case (0x0A)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x0A)
                    }
                }
                Case (0x0B)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x43)
                    }
                }
                Case (0x0C)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x45)
                    }
                }
                Case (0x22)
                {
                    Notify (SLPB, 0x80) // Status Change
                }
                Case (0x17)
                {
                    If (ATKP)
                    {
                        KBLC |= 0x80
                        Local1 = (KBLC & 0x80)
                        If (Local1)
                        {
                            ^^^^ATKD.IANE (0xC4)
                        }
                    }
                }
                Case (0x16)
                {
                    If (ATKP)
                    {
                        KBLC |= 0x80
                        Local1 = (KBLC & 0x80)
                        If (Local1)
                        {
                            ^^^^ATKD.IANE (0xC5)
                        }
                    }
                }
                Case (0x1A)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x1A)
                    }
                }
                Case (0x19)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0xB3)
                    }
                }
                Case (0x27)
                {
                    If ((OSYS >= 0x07DC))
                    {
                        BRTN (0x86)
                    }
                }
                Case (0x26)
                {
                    If ((OSYS >= 0x07DC))
                    {
                        BRTN (0x87)
                    }
                }
                Case (0x28)
                {
                    If ((BLCT == Zero)){}
                    ElseIf ((BLCT == One)){}
                }
                Case (0x29)
                {
                    If ((OSYS >= 0x07DC))
                    {
                        If ((F8FG == Zero))
                        {
                            F8FG = One
                            S2SC (0xE0)
                            S2SC (0x5B)
                        }

                        S2SC (0x19)
                        S2SC (0x99)
                        Return (One)
                    }

                    If ((OSYS == 0x07D9))
                    {
                        If ((^^^^ATKD.SWKP == One))
                        {
                            S2SC (0xE0)
                            S2SC (0x5B)
                            S2SC (0x19)
                            S2SC (0x99)
                            Return (One)
                        }
                    }
                }
                Case (0x2A)
                {
                    If (ATKP)
                    {
                        If (TPME)
                        {
                            ^^^^ATKD.IANE (0x6B)
                        }
                        Else
                        {
                            ^^^^ATKD.IANE (0x6F)
                        }
                    }
                }
                Case (0x2B)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x88)
                    }
                }
                Case (0x2C)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x8A)
                    }
                }
                Case (0x2D)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x82)
                    }
                }
                Case (0x2E)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0xB5)
                    }
                }
                Case (0x33)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x7A)
                    }
                }
                Case (0x30)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x9E)
                    }
                }
                Case (0x32)
                {
                }
                Case (0x34)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x9D)
                    }
                }
                Case (0x35)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0xCA)
                    }
                }
                Case (0x36)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0xCB)
                    }
                }
                Case (0x37)
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x86)
                    }
                }

            }
        }
    }

    Name (FNF8, Zero)
    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (HDMI, Zero)
        Name (F8FG, Zero)
        Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0xAD
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xE7)
            }
        }

        Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0xB0
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x6E)
            }
            Else
            {
                Notify (BAT0, 0x80) // Status Change
            }
        }

        Method (_QB7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0xB9
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x98)
            }
        }

        Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x62
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x75)
            }
        }

        Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x63
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x75)
            }
        }

        Method (_QA0, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0xAC
            Local0 = Zero
            If (ACIN)
            {
                Local0 |= 0x04
            }

            If (((PDIN == One) && (PDWA >= 0x2D)))
            {
                Local0 |= 0x02
            }

            If (((PDIN == One) && (PDWA < 0x2D)))
            {
                Local0 |= One
            }

            Switch (Local0)
            {
                Case (Zero)
                {
                    ATKM (0x57)
                    Sleep (0x0A)
                    ATKM (0x7B)
                }
                Case (0x04)
                {
                    ATKM (0x58)
                    Sleep (0x0A)
                    ATKM (0x7B)
                }
                Default
                {
                    ATKM (0x7B)
                }

            }
        }

        Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (LID0, 0x80) // Status Change
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x11
            QLIB (One)
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x12
            QLIB (0x17)
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x13
            QLIB (0x16)
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x14
            QLIB (0x19)
        }

        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x15
            QLIB (0x25)
        }

        Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x17
            QLIB (0x26)
        }

        Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x18
            QLIB (0x27)
        }

        Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x19
            QLIB (0x32)
        }

        Method (_Q1A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x1A
            QLIB (0x2A)
        }

        Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x1B
            QLIB (0x22)
        }

        Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x1C
            QLIB (0x2B)
        }

        Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x46
            QLIB (0x2C)
        }

        Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x33
            QLIB (0x30)
        }

        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x20
            QLIB (0x2E)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (RMEM, 1, NotSerialized)
        {
            OperationRegion (VMEM, SystemMemory, Arg0, 0x04)
            Field (VMEM, ByteAcc, NoLock, Preserve)
            {
                MEMI,   32
            }

            Local0 = MEMI /* \_SB_.ATKD.RMEM.MEMI */
            Return (Local0)
        }

        Name (BUFF, Package (0x81)
        {
            0x0200, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Method (SCDG, 2, Serialized)
        {
            WNVA = 0x9605
            WNVB = 0x47444353
            WNVC = Arg0
            WNVD = Arg1
            BUFF [Zero] = W15H ()
            Local2 = Zero
            Local3 = One
            Local1 = CALX /* \CALX */
            While ((Local3 < 0x81))
            {
                BUFF [Local3] = RMEM ((Local1 + Local2))
                Local2 += 0x04
                Local3 += One
            }

            Return (BUFF) /* \_SB_.ATKD.BUFF */
        }
    }

    Scope (_SB.ATKD)
    {
        Method (VERS, 2, Serialized)
        {
            Local0 = Zero
            Local0 += 0x0F
            Return (Local0)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (OFBD, 1, NotSerialized)
        {
            Name (FBDT, Package (0x53)
            {
                0x88, 
                0x89, 
                0x8A, 
                0x8B, 
                0x8C, 
                0x8D, 
                0x8E, 
                0x8F, 
                0x70, 
                0x71, 
                0x72, 
                0x73, 
                0x74, 
                0x75, 
                0x76, 
                0x77, 
                0x78, 
                0x79, 
                0x7A, 
                0x7B, 
                0x7C, 
                0x7D, 
                0x7E, 
                0x7F, 
                0x60, 
                0x61, 
                0x62, 
                0x63, 
                0x64, 
                0x65, 
                0x66, 
                0x67, 
                0x91, 
                0x92, 
                0x93, 
                0x96, 
                0xE0, 
                0xE1, 
                0xE2, 
                0xE3, 
                0xE4, 
                0xE5, 
                0xE6, 
                0xE7, 
                0xE8, 
                0xE9, 
                0xEA, 
                0xEB, 
                0xEC, 
                0xED, 
                0xEE, 
                0xEF, 
                0xD0, 
                0xD1, 
                0xD2, 
                0xD3, 
                0xD4, 
                0xD5, 
                0xD6, 
                0xD7, 
                0xD8, 
                0xD9, 
                0xDA, 
                0xDB, 
                0xDC, 
                0xDD, 
                0xDE, 
                0xDF, 
                0xC0, 
                0xC1, 
                0xC2, 
                0xC3, 
                0xC4, 
                0xC5, 
                0xC6, 
                0xC7, 
                0xF0, 
                0xF1, 
                0xF2, 
                0xF3, 
                0xF6, 
                0xF7, 
                0xFA
            })
            Local0 = Match (FBDT, MEQ, Arg0, MTR, Zero, Zero)
            Local0++
            Return (Local0)
        }

        Method (MWGF, 3, Serialized)
        {
            If ((Arg0 == 0x00010016))
            {
                Arg2 = OFBD (Arg1)
                If (Arg2)
                {
                    FSMI = One
                    Return (ASMI (Arg1))
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((Arg0 == 0x0006001F))
            {
                FSMI = 0x02
                Return (ASMI (Zero))
            }
        }
    }

    Scope (_SB.ATKD)
    {
        Method (GLCD, 0, NotSerialized)
        {
            Return (EDID) /* \EDID */
        }
    }

    Scope (_SB.ATKD)
    {
        Name (WQMO, Buffer (0x0A40)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x30, 0x0A, 0x00, 0x00, 0xCE, 0x35, 0x00, 0x00,  // 0....5..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0xA8, 0xD4, 0x99, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
            /* 0020 */  0x10, 0x05, 0x10, 0xCA, 0xE7, 0x8B, 0x42, 0x04,  // ......B.
            /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x44, 0x86, 0xA1, 0x12,  // ...8D...
            /* 0030 */  0x20, 0x24, 0x09, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
            /* 0038 */  0x21, 0x10, 0x92, 0x28, 0xC0, 0xBC, 0x00, 0xDD,  // !..(....
            /* 0040 */  0x02, 0x0C, 0x0B, 0xB0, 0x2D, 0xC0, 0xB4, 0x00,  // ....-...
            /* 0048 */  0xC7, 0x40, 0xEA, 0xDF, 0x1F, 0xA2, 0x34, 0x10,  // .@....4.
            /* 0050 */  0x89, 0x80, 0xA4, 0x52, 0x20, 0x24, 0x54, 0x80,  // ...R $T.
            /* 0058 */  0x72, 0x01, 0xBE, 0x05, 0x68, 0x47, 0x94, 0x64,  // r...hG.d
            /* 0060 */  0x01, 0x96, 0x61, 0x44, 0x60, 0xAF, 0xC8, 0x04,  // ..aD`...
            /* 0068 */  0x8D, 0x13, 0x94, 0x33, 0x0C, 0x14, 0xBC, 0x01,  // ...3....
            /* 0070 */  0xDB, 0x14, 0x60, 0x72, 0x10, 0x54, 0xF6, 0x20,  // ..`r.T. 
            /* 0078 */  0x50, 0x32, 0x20, 0xE4, 0x51, 0x80, 0x55, 0x38,  // P2 .Q.U8
            /* 0080 */  0x4D, 0x27, 0x81, 0xDD, 0x0B, 0x30, 0x27, 0xC0,  // M'...0'.
            /* 0088 */  0x9B, 0x00, 0x71, 0xA3, 0x91, 0x35, 0x01, 0x16,  // ..q..5..
            /* 0090 */  0xA1, 0x24, 0x4C, 0x80, 0x2D, 0x18, 0xA1, 0xD4,  // .$L.-...
            /* 0098 */  0x06, 0x23, 0x94, 0xC6, 0x10, 0x04, 0x12, 0x27,  // .#.....'
            /* 00A0 */  0x4A, 0xC4, 0x06, 0x05, 0xEC, 0x34, 0x6C, 0x94,  // J....4l.
            /* 00A8 */  0x88, 0x61, 0x42, 0x44, 0xA8, 0x0C, 0x83, 0x38,  // .aBD...8
            /* 00B0 */  0x84, 0x12, 0x5A, 0xDC, 0x08, 0xED, 0x0F, 0x82,  // ..Z.....
            /* 00B8 */  0x44, 0x5B, 0xB1, 0x86, 0xEA, 0x48, 0xA3, 0x41,  // D[...H.A
            /* 00C0 */  0x8D, 0x28, 0xC1, 0x81, 0x79, 0x34, 0xA7, 0xDA,  // .(..y4..
            /* 00C8 */  0xB9, 0x00, 0xE9, 0x73, 0x15, 0xC8, 0xB1, 0x9E,  // ...s....
            /* 00D0 */  0x62, 0x9D, 0xC3, 0x25, 0x20, 0x09, 0x8C, 0x95,  // b..% ...
            /* 00D8 */  0xA0, 0x83, 0x21, 0x42, 0x71, 0x0D, 0xA8, 0x89,  // ..!Bq...
            /* 00E0 */  0x1F, 0x22, 0x13, 0x04, 0x87, 0x1A, 0xA2, 0xC7,  // ."......
            /* 00E8 */  0x1B, 0xEE, 0x04, 0x8E, 0xFA, 0x48, 0x18, 0xC4,  // .....H..
            /* 00F0 */  0x39, 0x1D, 0x0D, 0xE6, 0x1C, 0xE0, 0x71, 0x9D,  // 9.....q.
            /* 00F8 */  0xCC, 0x19, 0x97, 0x2A, 0xC0, 0xEC, 0xD0, 0x35,  // ...*...5
            /* 0100 */  0xC2, 0x04, 0xC7, 0x63, 0xE8, 0xB3, 0x3F, 0x9F,  // ...c..?.
            /* 0108 */  0x9E, 0x21, 0x89, 0xFC, 0x41, 0xA0, 0x46, 0x66,  // .!..A.Ff
            /* 0110 */  0x68, 0x8F, 0xF1, 0xB4, 0x62, 0x86, 0x7C, 0x0A,  // h...b.|.
            /* 0118 */  0x38, 0x2C, 0x26, 0xF6, 0x94, 0x40, 0xC7, 0x03,  // 8,&..@..
            /* 0120 */  0xEF, 0xFF, 0x3F, 0x1E, 0xF0, 0x28, 0x3E, 0x1A,  // ..?..(>.
            /* 0128 */  0x08, 0xE1, 0x95, 0x20, 0xB6, 0x07, 0xF4, 0xB8,  // ... ....
            /* 0130 */  0x60, 0x60, 0xEC, 0x80, 0xEC, 0x57, 0x00, 0x42,  // ``...W.B
            /* 0138 */  0xF0, 0x32, 0x47, 0x24, 0xA7, 0x08, 0x1A, 0x93,  // .2G$....
            /* 0140 */  0x27, 0xD7, 0x3A, 0x84, 0x40, 0x4E, 0xEA, 0x90,  // '.:.@N..
            /* 0148 */  0x5F, 0x16, 0x18, 0xE2, 0x6B, 0x82, 0xA7, 0x5F,  // _...k.._
            /* 0150 */  0x21, 0xA0, 0x44, 0x8E, 0x00, 0x25, 0x66, 0x04,  // !.D..%f.
            /* 0158 */  0x28, 0xBC, 0xC8, 0x21, 0xCF, 0xE6, 0x08, 0x8E,  // (..!....
            /* 0160 */  0x27, 0xCA, 0x49, 0x1C, 0x90, 0x8F, 0x0E, 0x46,  // '.I....F
            /* 0168 */  0x38, 0x84, 0x72, 0x4F, 0x10, 0x44, 0xF3, 0x8C,  // 8.rO.D..
            /* 0170 */  0x34, 0x8D, 0x73, 0x7A, 0x1B, 0x30, 0x41, 0x1D,  // 4.sz.0A.
            /* 0178 */  0xAF, 0x84, 0x02, 0x94, 0x40, 0x7A, 0xA9, 0xB2,  // ....@z..
            /* 0180 */  0xB1, 0x54, 0x8F, 0x94, 0xE6, 0x3F, 0x23, 0x68,  // .T...?#h
            /* 0188 */  0x86, 0xE7, 0x10, 0xE2, 0x10, 0x13, 0x38, 0x39,  // ......89
            /* 0190 */  0x90, 0x4E, 0x1A, 0x3C, 0x33, 0x89, 0x52, 0x8F,  // .N.<3.R.
            /* 0198 */  0x86, 0xC2, 0x39, 0xE7, 0x81, 0x83, 0x82, 0x18,  // ..9.....
            /* 01A0 */  0xD0, 0x21, 0x20, 0xE4, 0xE4, 0x1C, 0x80, 0x1A,  // .! .....
            /* 01A8 */  0x84, 0x07, 0xF5, 0xBC, 0x60, 0x88, 0xD7, 0x00,  // ....`...
            /* 01B0 */  0x8B, 0x3E, 0x2C, 0xD0, 0xE1, 0xF9, 0x18, 0xC0,  // .>,.....
            /* 01B8 */  0x35, 0x40, 0xE8, 0x5E, 0x60, 0x64, 0xAB, 0x01,  // 5@.^`d..
            /* 01C0 */  0xA4, 0x60, 0xFC, 0x70, 0xC1, 0x09, 0xEA, 0xBA,  // .`.p....
            /* 01C8 */  0x0A, 0x40, 0x1F, 0xE6, 0x11, 0x78, 0x26, 0xEF,  // .@...x&.
            /* 01D0 */  0x16, 0x2F, 0x16, 0x09, 0xEA, 0x3B, 0x0A, 0x80,  // ./...;..
            /* 01D8 */  0x02, 0xC8, 0x53, 0xB7, 0xD2, 0xE1, 0xD3, 0x31,  // ..S....1
            /* 01E0 */  0x84, 0x08, 0x13, 0xCD, 0xE8, 0x3C, 0xFC, 0x54,  // .....<.T
            /* 01E8 */  0x51, 0x71, 0xA7, 0x4A, 0x41, 0x3C, 0xD5, 0xFF,  // Qq.JA<..
            /* 01F0 */  0x7F, 0x82, 0x51, 0xA6, 0x8A, 0x9E, 0x89, 0xA7,  // ..Q.....
            /* 01F8 */  0xCA, 0xEF, 0x07, 0x26, 0xB0, 0xF0, 0x7B, 0x06,  // ...&..{.
            /* 0200 */  0xB4, 0x4B, 0x41, 0xC4, 0x27, 0x02, 0x4F, 0xC3,  // .KA.'.O.
            /* 0208 */  0x70, 0x9E, 0x2C, 0x87, 0xF3, 0x64, 0xF9, 0x58,  // p.,..d.X
            /* 0210 */  0x7C, 0x8F, 0x80, 0x3F, 0x5A, 0x2C, 0x41, 0x81,  // |..?Z,A.
            /* 0218 */  0xB3, 0x05, 0x39, 0x3C, 0x46, 0xF0, 0x48, 0xA9,  // ..9<F.H.
            /* 0220 */  0xAC, 0x71, 0xA1, 0x2E, 0x07, 0x3E, 0x53, 0x30,  // .q...>S0
            /* 0228 */  0xEC, 0x57, 0x84, 0xA3, 0x79, 0x45, 0x38, 0xC3,  // .W..yE8.
            /* 0230 */  0xA7, 0x88, 0x83, 0x7A, 0xE6, 0xB0, 0x49, 0x9D,  // ...z..I.
            /* 0238 */  0x26, 0xA5, 0xC2, 0x7A, 0xA4, 0x1C, 0xD6, 0x68,  // &..z...h
            /* 0240 */  0x61, 0x0F, 0xF8, 0x75, 0xC3, 0x67, 0x15, 0xCF,  // a..u.g..
            /* 0248 */  0xCC, 0x18, 0x61, 0x3D, 0x5A, 0x07, 0x5A, 0xA7,  // ..a=Z.Z.
            /* 0250 */  0x2E, 0x13, 0x38, 0x59, 0x40, 0xBA, 0x66, 0x1C,  // ..8Y@.f.
            /* 0258 */  0xD1, 0x31, 0x1D, 0x12, 0x13, 0x74, 0x99, 0xA0,  // .1...t..
            /* 0260 */  0x10, 0x96, 0x42, 0x21, 0x21, 0x10, 0x3A, 0x12,  // ..B!!.:.
            /* 0268 */  0xF0, 0xE8, 0x60, 0x14, 0xC4, 0x23, 0x73, 0xAC,  // ..`..#s.
            /* 0270 */  0x23, 0x01, 0x5A, 0xD4, 0x1D, 0x82, 0x5E, 0x66,  // #.Z...^f
            /* 0278 */  0x70, 0x93, 0x7D, 0x88, 0x61, 0x20, 0xB1, 0xD8,  // p.}.a ..
            /* 0280 */  0xC5, 0x80, 0x1F, 0x0C, 0xC0, 0xFC, 0xFF, 0x27,  // .......'
            /* 0288 */  0x60, 0x07, 0x03, 0xC0, 0x93, 0x42, 0xA7, 0x52,  // `....B.R
            /* 0290 */  0x9D, 0x1E, 0x0C, 0xC0, 0x15, 0xF2, 0x60, 0x80,  // ......`.
            /* 0298 */  0x96, 0x0A, 0xA4, 0x09, 0xD5, 0x78, 0x80, 0xD2,  // .....x..
            /* 02A0 */  0xAD, 0x25, 0x81, 0x45, 0x1E, 0x0C, 0x50, 0xF2,  // .%.E..P.
            /* 02A8 */  0x28, 0x24, 0xEE, 0x60, 0x80, 0x92, 0x03, 0x47,  // ($.`...G
            /* 02B0 */  0x41, 0x3C, 0x32, 0x47, 0x3D, 0x18, 0xA0, 0xC7,  // A<2G=...
            /* 02B8 */  0x99, 0xE0, 0x20, 0x8F, 0xE5, 0x78, 0x0E, 0xEC,  // .. ..x..
            /* 02C0 */  0xBD, 0xE6, 0x6C, 0x9E, 0x0A, 0x3C, 0xF4, 0x38,  // ..l..<.8
            /* 02C8 */  0x81, 0xF8, 0x8C, 0x0C, 0xF5, 0x6A, 0x13, 0xEA,  // .....j..
            /* 02D0 */  0xF9, 0xC0, 0xA7, 0x22, 0x83, 0xBD, 0x23, 0x18,  // ..."..#.
            /* 02D8 */  0xEA, 0xF1, 0x20, 0xA6, 0x27, 0xF7, 0xF2, 0xE5,  // .. .'...
            /* 02E0 */  0x13, 0x82, 0xD1, 0xF8, 0x11, 0x01, 0x38, 0xFF,  // ......8.
            /* 02E8 */  0xFF, 0x8F, 0x08, 0xC0, 0xDA, 0xA9, 0x46, 0xAB,  // ......F.
            /* 02F0 */  0x3A, 0x8F, 0x08, 0xE0, 0x8A, 0x74, 0x4D, 0x42,  // :....tMB
            /* 02F8 */  0x0B, 0x03, 0xD2, 0x38, 0x0E, 0xB7, 0xCF, 0x33,  // ...8...3
            /* 0300 */  0x9B, 0x08, 0x2C, 0x09, 0x48, 0xD7, 0x24, 0x2E,  // ..,.H.$.
            /* 0308 */  0x86, 0x42, 0x32, 0x8E, 0x08, 0xA8, 0xE0, 0x07,  // .B2.....
            /* 0310 */  0x05, 0x0A, 0x62, 0x40, 0xA7, 0x3A, 0x22, 0xA0,  // ..b@.:".
            /* 0318 */  0x0F, 0x45, 0xF6, 0x7E, 0x24, 0x20, 0x77, 0x82,  // .E.~$ w.
            /* 0320 */  0x23, 0x3B, 0x99, 0x33, 0x7B, 0x0F, 0x3B, 0xD9,  // #;.3{.;.
            /* 0328 */  0xB7, 0x02, 0x0F, 0xC9, 0x57, 0x84, 0x30, 0xC1,  // ....W.0.
            /* 0330 */  0x1E, 0x0C, 0x7C, 0x1E, 0xF3, 0x85, 0xCB, 0xE7,  // ..|.....
            /* 0338 */  0x25, 0xC0, 0x97, 0x88, 0x31, 0xA3, 0x62, 0x8F,  // %...1.b.
            /* 0340 */  0x99, 0x82, 0x78, 0xCC, 0xBE, 0xE9, 0xFD, 0xFF,  // ..x.....
            /* 0348 */  0x8F, 0x19, 0xFB, 0x11, 0xF0, 0x74, 0x71, 0x57,  // .....tqW
            /* 0350 */  0x0C, 0x9F, 0x65, 0x80, 0xCB, 0x99, 0x09, 0x70,  // ..e....p
            /* 0358 */  0xE5, 0x55, 0xA2, 0x4F, 0x8F, 0x27, 0x0B, 0x70,  // .U.O.'.p
            /* 0360 */  0x85, 0x3B, 0xCB, 0xA0, 0x25, 0x02, 0xC9, 0xE5,  // .;..%...
            /* 0368 */  0x9D, 0x49, 0x07, 0x3A, 0x13, 0xF8, 0x1C, 0xE3,  // .I.:....
            /* 0370 */  0xB3, 0x0C, 0x3F, 0x3A, 0x59, 0xD4, 0xB1, 0x00,  // ..?:Y...
            /* 0378 */  0x75, 0xB8, 0x30, 0x98, 0x41, 0x3C, 0x32, 0x47,  // u.0.A<2G
            /* 0380 */  0x3C, 0x16, 0xA0, 0x47, 0xEC, 0xF3, 0xC0, 0x63,  // <..G...c
            /* 0388 */  0x81, 0x6F, 0x7B, 0x3E, 0xD1, 0xB1, 0x7B, 0x8C,  // .o{>..{.
            /* 0390 */  0xEF, 0x4C, 0xEC, 0x5C, 0x68, 0xA8, 0x57, 0x83,  // .L.\h.W.
            /* 0398 */  0x48, 0x1E, 0xD5, 0x9B, 0x9F, 0x51, 0x1F, 0x67,  // H....Q.g
            /* 03A0 */  0xDE, 0x63, 0xB0, 0xC7, 0x03, 0x78, 0xFF, 0xFF,  // .c...x..
            /* 03A8 */  0x73, 0x0C, 0x60, 0xD4, 0xA5, 0xC2, 0x17, 0xDA,  // s.`.....
            /* 03B0 */  0xE3, 0x01, 0xB8, 0x44, 0xAD, 0x42, 0xC7, 0x03,  // ...D.B..
            /* 03B8 */  0x5C, 0xB4, 0xB5, 0x68, 0x42, 0x67, 0x76, 0xBA,  // \..hBgv.
            /* 03C0 */  0xCF, 0x31, 0x2C, 0xD4, 0x39, 0x06, 0x75, 0xE7,  // .1,.9.u.
            /* 03C8 */  0x75, 0xA4, 0xE3, 0x01, 0x2A, 0xC4, 0xF1, 0x80,  // u...*...
            /* 03D0 */  0x82, 0x78, 0x5C, 0x0E, 0x77, 0x3C, 0x40, 0xCB,  // .x\.w<@.
            /* 03D8 */  0xBB, 0xDB, 0x92, 0x89, 0xF9, 0x06, 0xE2, 0x09,  // ........
            /* 03E0 */  0x45, 0x79, 0x2A, 0x78, 0x2E, 0xE0, 0xC7, 0x18,  // Ey*x....
            /* 03E8 */  0x1F, 0x0C, 0xDE, 0x98, 0x7C, 0x40, 0x78, 0x3E,  // ....|@x>
            /* 03F0 */  0x78, 0x35, 0xC0, 0x80, 0x9D, 0x56, 0x1C, 0x43,  // x5...V.C
            /* 03F8 */  0xBC, 0xCA, 0x00, 0xC7, 0xFF, 0xFF, 0xDD, 0x80,  // ........
            /* 0400 */  0xA5, 0x18, 0x1E, 0x5A, 0xC7, 0xB1, 0x81, 0x0C,  // ...Z....
            /* 0408 */  0x2D, 0xC2, 0xD9, 0x9D, 0x9F, 0xA7, 0x04, 0xDE,  // -.......
            /* 0410 */  0x71, 0xFB, 0xB4, 0x03, 0x9C, 0x4F, 0x81, 0x3E,  // q....O.>
            /* 0418 */  0x19, 0xF0, 0xB0, 0x43, 0xA2, 0x20, 0x3E, 0x21,  // ...C. >!
            /* 0420 */  0x38, 0xC8, 0x35, 0x15, 0xCA, 0x65, 0x00, 0x73,  // 8.5..e.s
            /* 0428 */  0xF4, 0x00, 0xFB, 0x40, 0x7C, 0x22, 0x03, 0x44,  // ...@|".D
            /* 0430 */  0x39, 0x94, 0x78, 0xD0, 0xD1, 0xFF, 0xFF, 0xE8,  // 9.x.....
            /* 0438 */  0x01, 0xA6, 0x4C, 0x27, 0x32, 0xB4, 0xB2, 0xA3,  // ..L'2...
            /* 0440 */  0x07, 0x19, 0xA5, 0xA7, 0x96, 0xC0, 0x9A, 0x8E,  // ........
            /* 0448 */  0x1E, 0x28, 0x35, 0x14, 0xD2, 0x73, 0xF4, 0x40,  // .(5..s.@
            /* 0450 */  0x29, 0xB8, 0x0E, 0xF3, 0x83, 0x0E, 0x8D, 0x77,  // )......w
            /* 0458 */  0xD0, 0x81, 0x72, 0xF4, 0x80, 0x77, 0xED, 0xC0,  // ..r..w..
            /* 0460 */  0x1D, 0xAA, 0xD8, 0xB8, 0xCE, 0xD0, 0x90, 0x87,  // ........
            /* 0468 */  0xF6, 0x68, 0xE6, 0x03, 0x4F, 0x60, 0x5F, 0x8A,  // .h..O`_.
            /* 0470 */  0x01, 0xBF, 0x87, 0x73, 0x1F, 0x24, 0x7D, 0xDA,  // ...s.$}.
            /* 0478 */  0xE6, 0x37, 0x32, 0xE0, 0xF1, 0xFF, 0xBF, 0x59,  // .72....Y
            /* 0480 */  0x00, 0x82, 0x84, 0x5A, 0x74, 0x78, 0x75, 0x04,  // ...Ztxu.
            /* 0488 */  0xFF, 0xCD, 0xF1, 0x88, 0x6A, 0x9D, 0x92, 0xAE,  // ....j...
            /* 0490 */  0x8E, 0x70, 0xEE, 0xA9, 0x3E, 0x12, 0x70, 0x32,  // .p..>.p2
            /* 0498 */  0xC3, 0x99, 0xC2, 0x80, 0x4E, 0x77, 0x24, 0x40,  // ....Nw$@
            /* 04A0 */  0x5F, 0x17, 0x3C, 0x9E, 0x83, 0x79, 0xAC, 0x78,  // _.<..y.x
            /* 04A8 */  0xA4, 0xF0, 0x78, 0xCE, 0xF5, 0x3D, 0x2D, 0xD0,  // ..x..=-.
            /* 04B0 */  0x79, 0xF8, 0x8C, 0xE4, 0xC9, 0x87, 0x7A, 0x33,  // y.....z3
            /* 04B8 */  0xF0, 0xA0, 0x0C, 0x14, 0x8B, 0x69, 0x3F, 0x02,  // .....i?.
            /* 04C0 */  0x92, 0xEB, 0x99, 0x4F, 0x64, 0xEC, 0x64, 0x01,  // ...Od.d.
            /* 04C8 */  0x18, 0xF9, 0xFF, 0xDF, 0xDE, 0x01, 0x0E, 0xF9,  // ........
            /* 04D0 */  0x74, 0xAA, 0x55, 0xE9, 0xC9, 0x02, 0x5C, 0x8A,  // t.U...\.
            /* 04D8 */  0x2F, 0x73, 0xE8, 0xDC, 0x6B, 0xD1, 0xC1, 0xE2,  // /s..k...
            /* 04E0 */  0x90, 0x30, 0x89, 0x4F, 0x16, 0xA8, 0xAC, 0x14,  // .0.O....
            /* 04E8 */  0x4A, 0x76, 0xB2, 0x40, 0x65, 0x39, 0x59, 0x50,  // Jv.@e9YP
            /* 04F0 */  0x10, 0x8F, 0xCB, 0xB7, 0x77, 0xFC, 0xE8, 0x7D,  // ....w..}
            /* 04F8 */  0xC0, 0x7D, 0x05, 0x62, 0x87, 0x47, 0x8F, 0x08,  // .}.b.G..
            /* 0500 */  0xC6, 0xAD, 0x02, 0xFB, 0xFF, 0xBF, 0x55, 0x00,  // ......U.
            /* 0508 */  0xD7, 0xBB, 0x2C, 0xFE, 0xA2, 0xEF, 0x1B, 0xC1,  // ..,.....
            /* 0510 */  0x33, 0x37, 0x9C, 0x91, 0x01, 0x8F, 0x03, 0x1D,  // 37......
            /* 0518 */  0xF0, 0x16, 0x74, 0x39, 0x40, 0x49, 0xB8, 0x1C,  // ..t9@I..
            /* 0520 */  0x50, 0x10, 0x9F, 0xB7, 0xE0, 0x88, 0x9B, 0x21,  // P......!
            /* 0528 */  0xB9, 0x1A, 0x80, 0xE3, 0x92, 0x60, 0x0C, 0xDF,  // .....`..
            /* 0530 */  0x66, 0xF8, 0xD9, 0x0E, 0x38, 0xFC, 0xFF, 0x2F,  // f...8../
            /* 0538 */  0x22, 0x80, 0x25, 0xAD, 0x16, 0x95, 0x3A, 0xBD,  // ".%...:.
            /* 0540 */  0x88, 0x80, 0x2B, 0xCC, 0x8D, 0x09, 0x7D, 0x5B,  // ..+...}[
            /* 0548 */  0xF2, 0xD9, 0xCE, 0xD3, 0x3F, 0xB4, 0x03, 0x20,  // ....?.. 
            /* 0550 */  0x17, 0x11, 0x94, 0x0C, 0x0A, 0x09, 0x39, 0x1C,  // ......9.
            /* 0558 */  0xA0, 0xCE, 0x8F, 0x86, 0x33, 0x88, 0x01, 0x9D,  // ....3...
            /* 0560 */  0xEB, 0x70, 0x80, 0x9E, 0xB2, 0x87, 0x72, 0x66,  // .p....rf
            /* 0568 */  0x8F, 0x76, 0x3E, 0x13, 0xFB, 0x40, 0x77, 0xB0,  // .v>..@w.
            /* 0570 */  0x2F, 0xA8, 0x46, 0x7A, 0x1C, 0x39, 0xBA, 0x33,  // /.Fz.9.3
            /* 0578 */  0x3A, 0xA5, 0x57, 0x33, 0x23, 0xC4, 0x3A, 0x2E,  // :.W3#.:.
            /* 0580 */  0x5F, 0x10, 0x7C, 0x7A, 0x07, 0xDC, 0xFC, 0xFF,  // _.|z....
            /* 0588 */  0xEF, 0x75, 0x00, 0x7F, 0x14, 0xCA, 0x3C, 0x56,  // .u....<V
            /* 0590 */  0x80, 0x2B, 0xC0, 0xB1, 0x02, 0x7D, 0x9E, 0xF0,  // .+...}..
            /* 0598 */  0x84, 0x0E, 0xF7, 0xB9, 0xC2, 0xAF, 0x12, 0x7E,  // .......~
            /* 05A0 */  0xAC, 0xE0, 0xD1, 0x49, 0x74, 0x24, 0x80, 0x9B,  // ...It$..
            /* 05A8 */  0xE5, 0x48, 0x80, 0xBE, 0x40, 0xF8, 0x58, 0x81,  // .H..@.X.
            /* 05B0 */  0xBF, 0x7A, 0xF2, 0x03, 0x05, 0xCC, 0xFF, 0xFF,  // .z......
            /* 05B8 */  0x75, 0x0E, 0x60, 0xAF, 0x53, 0x89, 0x17, 0x8A,  // u.`.S...
            /* 05C0 */  0x07, 0x0A, 0x70, 0x85, 0x38, 0x50, 0xA0, 0xA5,  // ..p.8P..
            /* 05C8 */  0x28, 0xF8, 0xFF, 0x1F, 0x87, 0x7D, 0xA0, 0xC0,  // (....}..
            /* 05D0 */  0x88, 0x38, 0x50, 0xA0, 0xE2, 0x93, 0xF8, 0xD8,  // .8P.....
            /* 05D8 */  0x83, 0x8A, 0x3C, 0x6E, 0x0A, 0x62, 0x40, 0xE7,  // ..<n.b@.
            /* 05E0 */  0x39, 0x12, 0xA0, 0x15, 0x5D, 0xE7, 0x50, 0x47,  // 9...].PG
            /* 05E8 */  0x0A, 0x80, 0xA9, 0xFF, 0xFF, 0x23, 0x05, 0xB0,  // .....#..
            /* 05F0 */  0xF0, 0x78, 0xA4, 0x00, 0x5D, 0x9C, 0x75, 0xEA,  // .x..].u.
            /* 05F8 */  0x48, 0x81, 0x13, 0x05, 0xA4, 0x23, 0xC5, 0x91,  // H....#..
            /* 0600 */  0x1D, 0xDA, 0xF1, 0xB2, 0x5B, 0xB1, 0xFF, 0x13,  // ....[...
            /* 0608 */  0xF4, 0x5C, 0x46, 0x64, 0x1C, 0x29, 0x50, 0xC1,  // .\Fd.)P.
            /* 0610 */  0xC1, 0x28, 0x88, 0x47, 0xE6, 0x50, 0x47, 0x02,  // .(.G.PG.
            /* 0618 */  0xB4, 0xA4, 0x43, 0x15, 0xBD, 0x11, 0x18, 0xE4,  // ..C.....
            /* 0620 */  0xE1, 0xCF, 0x33, 0x7A, 0x2A, 0x78, 0x2B, 0xF3,  // ..3z*x+.
            /* 0628 */  0xE1, 0xDD, 0x63, 0x3D, 0x91, 0x17, 0x01, 0x76,  // ..c=...v
            /* 0630 */  0x2E, 0x00, 0x37, 0x81, 0xCF, 0x05, 0x80, 0x28,  // ..7....(
            /* 0638 */  0x99, 0x0E, 0x25, 0x9E, 0x0B, 0x60, 0xFE, 0xFF,  // ..%..`..
            /* 0640 */  0xCF, 0x05, 0x30, 0xC4, 0x9F, 0x5C, 0xD0, 0x12,  // ..0..\..
            /* 0648 */  0x80, 0x34, 0xA7, 0x3A, 0x2F, 0xB6, 0xC2, 0x7E,  // .4.:/..~
            /* 0650 */  0xEA, 0x20, 0xE7, 0x02, 0x3A, 0x22, 0xC7, 0x26,  // . ..:".&
            /* 0658 */  0xD1, 0x91, 0xC0, 0xE7, 0x02, 0x1E, 0xF5, 0x5C,  // .......\
            /* 0660 */  0x40, 0x41, 0x0C, 0xE8, 0x1C, 0xE7, 0x02, 0xB4,  // @A......
            /* 0668 */  0x92, 0x93, 0x07, 0x19, 0xEC, 0x91, 0x3E, 0xB5,  // ......>.
            /* 0670 */  0x00, 0xA6, 0xCF, 0x7D, 0x80, 0x9D, 0xFF, 0xFF,  // ...}....
            /* 0678 */  0x71, 0x02, 0x98, 0x19, 0xD4, 0xA9, 0xD5, 0xE4,  // q.......
            /* 0680 */  0x71, 0x02, 0x5C, 0x79, 0x8E, 0x13, 0x68, 0x55,  // q.\y..hU
            /* 0688 */  0x40, 0x1A, 0xD9, 0xB3, 0xAE, 0x35, 0x42, 0x11,  // @....5B.
            /* 0690 */  0x3D, 0xE7, 0x2A, 0x94, 0x12, 0x0A, 0x69, 0x39,  // =.*...i9
            /* 0698 */  0xB5, 0xA0, 0xD2, 0x8F, 0x9B, 0x82, 0x18, 0xD0,  // ........
            /* 06A0 */  0xD1, 0x4E, 0xC2, 0x50, 0xC6, 0xF0, 0x04, 0xEC,  // .N.P....
            /* 06A8 */  0xC9, 0x3C, 0x14, 0x04, 0x79, 0x65, 0xF1, 0x0D,  // .<..ye..
            /* 06B0 */  0x98, 0xDF, 0x82, 0xD9, 0x94, 0x7C, 0x77, 0xF1,  // .....|w.
            /* 06B8 */  0xD5, 0x25, 0x9C, 0x35, 0x5F, 0xAF, 0xC8, 0x1D,  // .%.5_...
            /* 06C0 */  0xEB, 0x0D, 0xC9, 0xF7, 0x0A, 0xC0, 0xEE, 0xFF,  // ........
            /* 06C8 */  0xFF, 0x72, 0x05, 0x78, 0x77, 0xA8, 0xD0, 0xA4,  // .r.xw...
            /* 06D0 */  0xC6, 0x7B, 0x05, 0xB8, 0x84, 0xAC, 0x42, 0xF7,  // .{....B.
            /* 06D8 */  0x0A, 0x5C, 0x9C, 0xB5, 0x68, 0x16, 0xE7, 0xF1,  // .\..h...
            /* 06E0 */  0x76, 0xF5, 0x5E, 0xC1, 0x82, 0xDC, 0x2B, 0x50,  // v.^...+P
            /* 06E8 */  0x11, 0x28, 0x14, 0xE2, 0x5E, 0x81, 0x92, 0x7D,  // .(..^..}
            /* 06F0 */  0xF9, 0xA1, 0x20, 0x1E, 0x97, 0x83, 0x1C, 0x09,  // .. .....
            /* 06F8 */  0xD0, 0x52, 0x40, 0x74, 0x01, 0x78, 0x76, 0xF6,  // .R@t.xv.
            /* 0700 */  0x8D, 0xDF, 0x20, 0xE7, 0xFA, 0x12, 0xC0, 0xAE,  // .. .....
            /* 0708 */  0x13, 0xC0, 0xF1, 0xFF, 0x7F, 0x23, 0xF0, 0x15,  // .....#..
            /* 0710 */  0x16, 0xCE, 0xDD, 0x03, 0x3F, 0xD3, 0x97, 0x0E,  // ....?...
            /* 0718 */  0x36, 0x2B, 0xF0, 0x0E, 0xD8, 0x77, 0x23, 0xC0,  // 6+...w#.
            /* 0720 */  0xF7, 0x48, 0x7C, 0xE8, 0x00, 0xFC, 0xFC, 0xFF,  // .H|.....
            /* 0728 */  0x0F, 0x1D, 0xDC, 0xA6, 0x57, 0x8F, 0x87, 0x0E,  // ....W...
            /* 0730 */  0x90, 0x65, 0xB8, 0x1B, 0xA1, 0x2F, 0x45, 0x3E,  // .e.../E>
            /* 0738 */  0xC2, 0x7A, 0x4C, 0x87, 0xC4, 0x34, 0x1C, 0x3A,  // .zL..4.:
            /* 0740 */  0x50, 0xE9, 0x49, 0x94, 0xFC, 0x48, 0x80, 0xCA,  // P.I..H..
            /* 0748 */  0x7A, 0x24, 0xA0, 0x20, 0x06, 0xF4, 0xA1, 0x03,  // z$. ....
            /* 0750 */  0xF0, 0x71, 0x9D, 0x00, 0x16, 0x12, 0x2E, 0x2C,  // .q.....,
            /* 0758 */  0xA8, 0xD0, 0x93, 0xA5, 0x20, 0x9E, 0xAC, 0x03,  // .... ...
            /* 0760 */  0x4D, 0x16, 0x7D, 0x81, 0xF0, 0x99, 0xCF, 0x93,  // M.}.....
            /* 0768 */  0xC5, 0x9C, 0x28, 0x1E, 0x8B, 0x70, 0xB7, 0x22,  // ..(..p."
            /* 0770 */  0x60, 0xF6, 0xFF, 0xBF, 0x51, 0x00, 0x36, 0x7E,  // `...Q.6~
            /* 0778 */  0xB0, 0xA5, 0x3A, 0xBD, 0x51, 0x80, 0x4B, 0xCA,  // ..:.Q.K.
            /* 0780 */  0xAD, 0x08, 0x1D, 0xE8, 0x46, 0x41, 0x86, 0xF4,  // ....FA..
            /* 0788 */  0x6C, 0x79, 0x48, 0x2C, 0xCA, 0x8D, 0x02, 0x75,  // lyH,...u
            /* 0790 */  0xDE, 0x76, 0x8C, 0x53, 0x01, 0x4A, 0xF8, 0xAD,  // .v.S.J..
            /* 0798 */  0x88, 0x82, 0xF8, 0x56, 0x04, 0x38, 0x49, 0x33,  // ...V.8I3
            /* 07A0 */  0x28, 0xB4, 0x9E, 0x5B, 0x11, 0x94, 0x9B, 0x03,  // (..[....
            /* 07A8 */  0x76, 0x5A, 0xE0, 0xFC, 0xFF, 0x5F, 0x8B, 0x00,  // vZ..._..
            /* 07B0 */  0x86, 0x4A, 0xB4, 0xA8, 0xF5, 0xD4, 0x01, 0xB2,  // .J......
            /* 07B8 */  0x00, 0xAB, 0xA0, 0x67, 0x19, 0x4B, 0x86, 0x41,  // ...g.K.A
            /* 07C0 */  0x49, 0x80, 0xD0, 0xB9, 0xDB, 0x43, 0xE0, 0x23,  // I....C.#
            /* 07C8 */  0xF4, 0x9C, 0xFF, 0xFF, 0xCD, 0x9F, 0x36, 0xC9,  // ......6.
            /* 07D0 */  0x74, 0x7C, 0xD2, 0x38, 0x00, 0x26, 0x6D, 0x6C,  // t|.8.&ml
            /* 07D8 */  0xA8, 0x13, 0x87, 0x07, 0xF9, 0x2E, 0xE1, 0x1B,  // ........
            /* 07E0 */  0x87, 0x2F, 0x36, 0x86, 0x49, 0xE0, 0xB1, 0x31,  // ./6.I..1
            /* 07E8 */  0x34, 0x7E, 0x22, 0x80, 0x01, 0x78, 0x88, 0xEF,  // 4~"..x..
            /* 07F0 */  0xCE, 0x1E, 0x84, 0x67, 0x76, 0x10, 0x98, 0x93,  // ...gv...
            /* 07F8 */  0x89, 0x2F, 0x7F, 0xAD, 0x1E, 0x09, 0x10, 0xEE,  // ./......
            /* 0800 */  0x6F, 0x04, 0x3A, 0x92, 0xBE, 0x08, 0x3C, 0xAA,  // o.:...<.
            /* 0808 */  0x1A, 0xC4, 0xD6, 0x04, 0xD8, 0x9A, 0xBC, 0x80,  // ........
            /* 0810 */  0x7C, 0x1A, 0x88, 0x72, 0x4A, 0x81, 0x1E, 0xCE,  // |..rJ...
            /* 0818 */  0x8D, 0xD2, 0x9C, 0x00, 0x63, 0x50, 0x08, 0x90,  // ....cP..
            /* 0820 */  0x58, 0xEF, 0x01, 0xB5, 0x81, 0x09, 0x2A, 0x58,  // X.....*X
            /* 0828 */  0x98, 0x20, 0x86, 0x6A, 0x7F, 0x10, 0x44, 0xFE,  // . .j..D.
            /* 0830 */  0x33, 0x40, 0xD7, 0x0C, 0x47, 0x1A, 0x0D, 0xEA,  // 3@..G...
            /* 0838 */  0x20, 0xC4, 0x47, 0x73, 0xAA, 0x0F, 0x1F, 0x0C,  //  .Gs....
            /* 0840 */  0xE4, 0x21, 0xC5, 0x97, 0xEC, 0xC3, 0xF5, 0x81,  // .!......
            /* 0848 */  0xDA, 0x04, 0x0F, 0x0F, 0x3E, 0x43, 0xC0, 0x71,  // ....>C.q
            /* 0850 */  0x0D, 0xA8, 0x89, 0x1F, 0x22, 0xFB, 0xC9, 0x18,  // ...."...
            /* 0858 */  0x8E, 0x0F, 0xD1, 0x87, 0x0A, 0x4F, 0xE0, 0x6D,  // .....O.m
            /* 0860 */  0xC0, 0x80, 0xEC, 0x10, 0x01, 0x7F, 0x3C, 0x86,  // ......<.
            /* 0868 */  0x7E, 0x8A, 0xF0, 0x0D, 0xD0, 0x63, 0xD3, 0x20,  // ~....c. 
            /* 0870 */  0x50, 0x27, 0x0D, 0x3E, 0xCC, 0xD3, 0x8A, 0x19,  // P'.>....
            /* 0878 */  0xF2, 0x29, 0xE0, 0xB0, 0x98, 0xD8, 0xB3, 0x03,  // .)......
            /* 0880 */  0x1D, 0x0F, 0xF8, 0x15, 0x1F, 0x0D, 0x74, 0x79,  // ......ty
            /* 0888 */  0x31, 0xB6, 0xCF, 0x2C, 0x8E, 0x70, 0x10, 0x41,  // 1..,.p.A
            /* 0890 */  0xFC, 0xFF, 0xC7, 0x83, 0x01, 0x3D, 0x1B, 0x9F,  // .....=..
            /* 0898 */  0x21, 0x7C, 0x2F, 0x60, 0x47, 0x0B, 0x2E, 0xEA,  // !|/`G...
            /* 08A0 */  0x68, 0x81, 0x3A, 0x34, 0xF8, 0xBC, 0xC0, 0x10,  // h.:4....
            /* 08A8 */  0x1F, 0x67, 0x0C, 0xF1, 0x64, 0xC1, 0x4E, 0x52,  // .g..d.NR
            /* 08B0 */  0xE0, 0x1C, 0x89, 0x0F, 0x21, 0xF0, 0x41, 0x5E,  // ....!.A^
            /* 08B8 */  0x56, 0x0C, 0x11, 0x24, 0xF8, 0x33, 0xC1, 0xE9,  // V..$.3..
            /* 08C0 */  0xB0, 0xA1, 0x61, 0x08, 0x8A, 0x1C, 0x01, 0xEA,  // ..a.....
            /* 08C8 */  0xD8, 0xE1, 0x11, 0xF0, 0x73, 0xC2, 0x03, 0x09,  // ....s...
            /* 08D0 */  0x1B, 0xC1, 0x3B, 0x89, 0x27, 0x71, 0x40, 0x3E,  // ..;.'q@>
            /* 08D8 */  0x5B, 0x18, 0x21, 0x76, 0xB9, 0x47, 0x0C, 0x72,  // [.!v.G.r
            /* 08E0 */  0x51, 0x3E, 0xBE, 0x67, 0x18, 0xCC, 0x98, 0x70,  // Q>.g...p
            /* 08E8 */  0x27, 0x06, 0x0F, 0x81, 0x0F, 0xE0, 0xD9, 0xE2,  // '.......
            /* 08F0 */  0xFC, 0x7C, 0x42, 0x39, 0x2B, 0xDC, 0x88, 0xF9,  // .|B9+...
            /* 08F8 */  0x94, 0x70, 0x03, 0xC0, 0x28, 0xB4, 0xE9, 0x53,  // .p..(..S
            /* 0900 */  0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69,  // .Q..ej.i
            /* 0908 */  0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0x0D, 0xE9,  // P.O.....
            /* 0910 */  0x71, 0x8A, 0x9D, 0x00, 0x2C, 0xE2, 0x11, 0x20,  // q...,.. 
            /* 0918 */  0x10, 0x8B, 0xA5, 0x90, 0x91, 0x51, 0x19, 0x44,  // .....Q.D
            /* 0920 */  0x40, 0x56, 0xF9, 0x2E, 0x11, 0x90, 0x35, 0x83,  // @V....5.
            /* 0928 */  0x08, 0xC8, 0xA9, 0x2D, 0x00, 0x31, 0x0D, 0x6F,  // ...-.1.o
            /* 0930 */  0x0C, 0x01, 0x39, 0x99, 0x07, 0x20, 0x96, 0x13,  // ..9.. ..
            /* 0938 */  0x44, 0x40, 0x96, 0x6A, 0x02, 0x88, 0xE9, 0x06,  // D@.j....
            /* 0940 */  0x11, 0x90, 0xB5, 0xAA, 0x18, 0x04, 0x05, 0x11,  // ........
            /* 0948 */  0x90, 0x75, 0xBC, 0x1C, 0x04, 0x64, 0x55, 0x20,  // .u...dU 
            /* 0950 */  0x02, 0x72, 0x3E, 0x1B, 0x40, 0x2C, 0x2C, 0x88,  // .r>.@,,.
            /* 0958 */  0x80, 0x2C, 0x52, 0x07, 0x10, 0x53, 0xAC, 0xE3,  // .,R..S..
            /* 0960 */  0xFF, 0x0F, 0xC4, 0xB4, 0xF9, 0x00, 0x62, 0x4A,  // ......bJ
            /* 0968 */  0x41, 0x34, 0x20, 0xF2, 0x28, 0x10, 0x90, 0x25,  // A4 .(..%
            /* 0970 */  0x50, 0x08, 0xC8, 0x71, 0x41, 0x04, 0xE4, 0xF0,  // P..qA...
            /* 0978 */  0x40, 0x34, 0xC7, 0xFB, 0x41, 0x40, 0x0E, 0x05,  // @4..A@..
            /* 0980 */  0x22, 0x20, 0x07, 0x78, 0x36, 0x08, 0xC8, 0x71,  // " .x6..q
            /* 0988 */  0x40, 0x04, 0x64, 0x49, 0x5A, 0x80, 0x98, 0x3E,  // @.dIZ..>
            /* 0990 */  0x10, 0x01, 0x39, 0x24, 0x10, 0x4D, 0x0C, 0x44,  // ..9$.M.D
            /* 0998 */  0x13, 0x7B, 0x01, 0x62, 0xF9, 0x41, 0x04, 0xE4,  // .{.b.A..
            /* 09A0 */  0x10, 0x66, 0x80, 0x58, 0x22, 0x10, 0x01, 0x59,  // .f.X"..Y
            /* 09A8 */  0xFD, 0xD7, 0x4A, 0x40, 0xCE, 0x02, 0xA2, 0xE1,  // ..J@....
            /* 09B0 */  0x93, 0x57, 0x81, 0x80, 0xAC, 0x08, 0x44, 0x40,  // .W....D@
            /* 09B8 */  0x4E, 0x0F, 0x44, 0xB5, 0xD8, 0x39, 0x9F, 0xD1,  // N.D..9..
            /* 09C0 */  0x77, 0x97, 0x80, 0x9C, 0x0A, 0x44, 0x40, 0x4E,  // w....D@N
            /* 09C8 */  0xE0, 0x07, 0x88, 0xE5, 0x01, 0x11, 0x90, 0xF5,  // ........
            /* 09D0 */  0x18, 0x02, 0x62, 0xEA, 0x40, 0x04, 0xE4, 0x48,  // ..b.@..H
            /* 09D8 */  0x8A, 0x80, 0x58, 0x3E, 0x10, 0x01, 0x39, 0x8B,  // ..X>..9.
            /* 09E0 */  0x23, 0x20, 0x96, 0x0C, 0x44, 0x40, 0x56, 0x68,  // # ..D@Vh
            /* 09E8 */  0x09, 0x88, 0xC9, 0x05, 0x11, 0x90, 0xA5, 0x69,  // .......i
            /* 09F0 */  0x02, 0x62, 0x42, 0x41, 0x04, 0xE4, 0x78, 0x9E,  // .bBA..x.
            /* 09F8 */  0x80, 0x58, 0x56, 0x10, 0x01, 0x59, 0xE9, 0xCB,  // .XV..Y..
            /* 0A00 */  0x43, 0x40, 0x96, 0x0D, 0x22, 0x20, 0x4B, 0x34,  // C@.." K4
            /* 0A08 */  0x05, 0xC4, 0x04, 0x83, 0x08, 0xC8, 0x31, 0x55,  // ......1U
            /* 0A10 */  0x01, 0xB1, 0xCC, 0x20, 0x02, 0x72, 0x4A, 0x57,  // ... .rJW
            /* 0A18 */  0x40, 0x14, 0x44, 0x03, 0x20, 0xCF, 0x9C, 0x03,  // @.D. ...
            /* 0A20 */  0x60, 0x20, 0x02, 0x72, 0x6C, 0x20, 0xAA, 0xE1,  // ` .rl ..
            /* 0A28 */  0x59, 0x26, 0x20, 0xE7, 0x05, 0x11, 0x90, 0xD3,  // Y& .....
            /* 0A30 */  0x03, 0x51, 0x95, 0x9F, 0x9D, 0x20, 0x24, 0x23,  // .Q... $#
            /* 0A38 */  0x08, 0x55, 0xF9, 0x09, 0x11, 0x88, 0xFF, 0xFF   // .U......
        })
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_QA9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x60
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xA9)
            }
        }

        Method (_Q39, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x61
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x38)
            }
        }

        Method (_Q35, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x23
            QLIB (0x02)
        }

        Method (_Q36, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x24
            QLIB (0x03)
        }

        Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x25
            QLIB (0x15)
        }

        Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0x26
            QLIB (0x24)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (SKEY, 1, Serialized)
        {
            MBF1 = Arg0
            Switch (Arg0)
            {
                Case (0x86)
                {
                    ^^^^ATKD.MAKY ()
                }
                Case (0x6C)
                {
                    _Q1B ()
                }
                Case (0x88)
                {
                    _Q1C ()
                }
                Case (0x6B)
                {
                    _Q1A ()
                }
                Case (0x8A)
                {
                    _Q70 ()
                }
                Case (0xB5)
                {
                    _Q20 ()
                }
                Case (0x38)
                {
                    _Q39 ()
                }
                Case (0x31)
                {
                    _Q35 ()
                }
                Case (0x30)
                {
                    _Q36 ()
                }
                Case (0x7C)
                {
                    _Q37 ()
                }
                Case (0x99)
                {
                    _Q38 ()
                }
                Case (0x9E)
                {
                    _Q51 ()
                }
                Case (0xA9)
                {
                    _QA9 ()
                }
                Case (0xAE)
                {
                    _Q15 ()
                }
                Case (0xB3)
                {
                    _Q14 ()
                }
                Case (0x2E)
                {
                    _Q17 ()
                }
                Case (0x2F)
                {
                    _Q18 ()
                }
                Case (0xC4)
                {
                    _Q12 ()
                }
                Case (0xC5)
                {
                    _Q13 ()
                }
                Default
                {
                    Return (Zero)
                }

            }

            Return (One)
        }
    }

    Name (OSYS, 0x07DF)
    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        Method (BRTN, 1, Serialized)
        {
            If (M009 (0x1D))
            {
                Notify (^PCI0.GPP0.PEGP.EDP1 (), Arg0)
            }
            Else
            {
                Notify (^PCI0.GP17.VGA.LCD, Arg0)
            }
        }
    }

    Scope (_SB)
    {
        Method (P8XH, 2, Serialized)
        {
        }
    }

    Scope (_SB)
    {
        Method (PSTC, 1, Serialized)
        {
            Return (Zero)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (CRFC, 0, NotSerialized)
        {
            Return (Ones)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (SRSC, 1, NotSerialized)
        {
            ^^PCI0.SBRG.SECC (0x0C, ToInteger (Arg0))
            Return (One)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (FANL, 1, Serialized)
        {
            Return (One)
        }

        Method (GQFS, 0, NotSerialized)
        {
            Return (0x00020000)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (MAKY, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (BSTS, 0, NotSerialized)
        {
            If (ACPF)
            {
                Local0 = Zero
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (WDOG, 1, NotSerialized)
        {
            Return (Zero)
        }

        Method (WLED, 1, NotSerialized)
        {
            M010 (0xFF, Arg0)
            Return (One)
        }

        Method (BLED, 1, NotSerialized)
        {
            If (Zero)
            {
                M010 (0xFF, Arg0)
            }

            Return (One)
        }

        Method (WMXC, 1, NotSerialized)
        {
            Return (Zero)
        }

        Method (OWGD, 1, Serialized)
        {
        }
    }

    Scope (_SB.ATKD)
    {
        Method (WCHK, 2, Serialized)
        {
            WNVA = 0x9603
            WNVB = One
            WNVC = Arg1
            WNVD = Arg0
            Return (W15H ())
        }
    }

    Scope (_SB)
    {
        Device (ARLS)
        {
            Name (_HID, "ASUS9001")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((AACI == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (ASUP)
        {
            Name (_HID, "ASUS2018")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P80H = 0xB4
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xE5)
            }
        }
    }

    Scope (_SB)
    {
        Device (WMIT)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ITKS")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07DC))
                {
                    Return (Zero)
                }

                Return (0x0B)
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x49, 0x54, 0x01, 0x00, 0x51, 0x82, 0xF3, 0xFE,  // IT..Q...
                /* 0018 */  0x14, 0x82, 0x1F, 0x4D, 0xA9, 0x8A, 0x71, 0xA0,  // ...M..q.
                /* 0020 */  0x10, 0xEB, 0xFF, 0x7B, 0x54, 0x4B, 0x01, 0x02,  // ...{TK..
                /* 0028 */  0xDC, 0x5A, 0x76, 0x88, 0xFE, 0x4F, 0x24, 0x48,  // .Zv..O$H
                /* 0030 */  0xA4, 0x8C, 0xC6, 0x8B, 0xBD, 0x71, 0x82, 0x1B,  // .....q..
                /* 0038 */  0x58, 0x00, 0x01, 0x08                           // X...
            })
            Name (EVCF, Zero)
            Name (CCTK, Zero)
            Name (RET1, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            Name (RET2, Package (0x08)
            {
                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (0x08)
                {
                     0x00                                             // .
                }, 

                Buffer (One)
                {
                     0x00                                             // .
                }
            })
            Method (WCTK, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCTK == Zero)){}
                }
                ElseIf ((CCTK != Zero)){}
                CCTK = Arg0
            }

            Method (WQTK, 1, NotSerialized)
            {
            }

            Method (WSTK, 2, NotSerialized)
            {
            }

            Method (SMRD, 2, Serialized)
            {
                ^^PCI0.SBRG.SMSS = Zero
                ^^PCI0.SBRG.SMAD = 0x16
                ^^PCI0.SBRG.SMCD = Arg0
                ^^PCI0.SBRG.SMPL = Arg1
                Local0 = Zero
                While ((^^PCI0.SBRG.SMSS != 0x80))
                {
                    If ((Local0 >= 0x00010000))
                    {
                        Break
                    }

                    Local0++
                }
            }

            Method (RECM, 2, NotSerialized)
            {
                OperationRegion (VMEM, SystemMemory, Arg0, 0x04)
                Field (VMEM, ByteAcc, NoLock, Preserve)
                {
                    MEMI,   32
                }

                If ((Arg1 == One))
                {
                    Local0 = (MEMI & 0xFF)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local0 = (MEMI & 0xFFFF)
                }
                Else
                {
                    Local0 = MEMI /* \_SB_.WMIT.RECM.MEMI */
                }

                Return (Local0)
            }

            Method (WECM, 2, NotSerialized)
            {
                OperationRegion (VARM, SystemMemory, Arg0, One)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARR,   8
                }

                VARR = Arg1
            }

            Method (CRT2, 0, NotSerialized)
            {
                Local0 = Zero
                While ((Local0 < 0x08))
                {
                    RET2 [Local0] = Buffer (0x08)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    Local0++
                }
            }

            Method (WMTK, 3, Serialized)
            {
                Name (SNSR, Buffer (0x08)
                {
                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        RET1 = Arg2
                        Local1 = DerefOf (RET1 [Zero])
                        Local2 = DerefOf (RET1 [One])
                        RET1 [Zero] = Zero
                        Return (RET1) /* \_SB_.WMIT.RET1 */
                    }
                    Case (0x02)
                    {
                        CreateQWordField (Arg2, Zero, F2P0)
                        CreateQWordField (Arg2, 0x08, F2P1)
                        CreateQWordField (Arg2, 0x10, F2P2)
                        CreateQWordField (Arg2, 0x18, F2P3)
                        CreateQWordField (Arg2, 0x20, F2P4)
                        CreateQWordField (Arg2, 0x28, F2P5)
                        CreateQWordField (Arg2, 0x30, F2P6)
                        RET2 [Zero] = Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        Local0 = (F2P0 >> 0x20)
                        Local1 = (F2P0 & 0xFFFFFFFF)
                        If ((Local0 == 0x2357))
                        {
                            If ((Local1 == 0x00800001))
                            {
                                SNSR [Zero] = ^^PCI0.SBRG.MB45 /* \_SB_.PCI0.SBRG.MB45 */
                                SNSR [One] = ^^PCI0.SBRG.MB46 /* \_SB_.PCI0.SBRG.MB46 */
                                SNSR [0x02] = ^^PCI0.SBRG.MB47 /* \_SB_.PCI0.SBRG.MB47 */
                                SNSR [0x03] = ^^PCI0.SBRG.MB48 /* \_SB_.PCI0.SBRG.MB48 */
                                SNSR [0x04] = ^^PCI0.SBRG.MB49 /* \_SB_.PCI0.SBRG.MB49 */
                                SNSR [0x05] = ^^PCI0.SBRG.MB4A /* \_SB_.PCI0.SBRG.MB4A */
                                SNSR [0x06] = ^^PCI0.SBRG.MB4B /* \_SB_.PCI0.SBRG.MB4B */
                                SNSR [0x07] = ^^PCI0.SBRG.MB4C /* \_SB_.PCI0.SBRG.MB4C */
                                RET2 [One] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.MB4D /* \_SB_.PCI0.SBRG.MB4D */
                                SNSR [One] = ^^PCI0.SBRG.MB4E /* \_SB_.PCI0.SBRG.MB4E */
                                SNSR [0x02] = ^^PCI0.SBRG.MB4F /* \_SB_.PCI0.SBRG.MB4F */
                                SNSR [0x03] = ^^PCI0.SBRG.MB50 /* \_SB_.PCI0.SBRG.MB50 */
                                SNSR [0x04] = ^^PCI0.SBRG.MB51 /* \_SB_.PCI0.SBRG.MB51 */
                                SNSR [0x05] = ^^PCI0.SBRG.MB52 /* \_SB_.PCI0.SBRG.MB52 */
                                SNSR [0x06] = ^^PCI0.SBRG.MB53 /* \_SB_.PCI0.SBRG.MB53 */
                                SNSR [0x07] = Zero
                                RET2 [0x02] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.FA1L /* \_SB_.PCI0.SBRG.FA1L */
                                SNSR [One] = ^^PCI0.SBRG.FA1H /* \_SB_.PCI0.SBRG.FA1H */
                                SNSR [0x02] = ^^PCI0.SBRG.FA2L /* \_SB_.PCI0.SBRG.FA2L */
                                SNSR [0x03] = ^^PCI0.SBRG.FA2H /* \_SB_.PCI0.SBRG.FA2H */
                                SNSR [0x04] = 0xFF
                                SNSR [0x05] = 0xFF
                                SNSR [0x06] = 0xFF
                                SNSR [0x07] = 0xFF
                                RET2 [0x03] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.M661 /* \_SB_.PCI0.SBRG.M661 */
                                SNSR [One] = ^^PCI0.SBRG.M669 /* \_SB_.PCI0.SBRG.M669 */
                                SNSR [0x02] = ^^PCI0.SBRG.M662 /* \_SB_.PCI0.SBRG.M662 */
                                SNSR [0x03] = ^^PCI0.SBRG.M6E0 /* \_SB_.PCI0.SBRG.M6E0 */
                                SNSR [0x04] = ^^PCI0.SBRG.M6B1 /* \_SB_.PCI0.SBRG.M6B1 */
                                SNSR [0x05] = 0xFF
                                SNSR [0x06] = 0xFF
                                SNSR [0x07] = 0xFF
                                RET2 [0x04] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.M6F0 /* \_SB_.PCI0.SBRG.M6F0 */
                                SNSR [One] = 0xFF
                                SNSR [0x02] = 0xFF
                                SNSR [0x03] = 0xFF
                                SNSR [0x04] = 0xFF
                                SNSR [0x05] = 0xFF
                                SNSR [0x06] = 0xFF
                                SNSR [0x07] = 0xFF
                                RET2 [0x05] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = Zero
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [0x06] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            ElseIf ((Local1 == 0x00800002))
                            {
                                If ((F2P1 == Zero)){}
                                Else
                                {
                                    ^^PCI0.SBRG.SECC (0x1B, F2P2)
                                    ^^PCI0.SBRG.SECC (0x1C, F2P3)
                                }

                                ^^PCI0.SBRG.SECC (0x16, F2P1)
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            ElseIf ((Local1 == 0x00800003))
                            {
                                SNSR [Zero] = ^^PCI0.SBRG.M665 /* \_SB_.PCI0.SBRG.M665 */
                                SNSR [One] = ^^PCI0.SBRG.M666 /* \_SB_.PCI0.SBRG.M666 */
                                SNSR [0x02] = ^^PCI0.SBRG.M65D /* \_SB_.PCI0.SBRG.M65D */
                                SNSR [0x03] = ^^PCI0.SBRG.M65E /* \_SB_.PCI0.SBRG.M65E */
                                SNSR [0x04] = ^^PCI0.SBRG.ECBF /* \_SB_.PCI0.SBRG.ECBF */
                                SNSR [0x05] = ^^PCI0.SBRG.ECC0 /* \_SB_.PCI0.SBRG.ECC0 */
                                SNSR [0x06] = ^^PCI0.SBRG.M6DE /* \_SB_.PCI0.SBRG.M6DE */
                                SNSR [0x07] = ^^PCI0.SBRG.M6DF /* \_SB_.PCI0.SBRG.M6DF */
                                RET2 [One] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.M670 /* \_SB_.PCI0.SBRG.M670 */
                                SNSR [One] = ^^PCI0.SBRG.M671 /* \_SB_.PCI0.SBRG.M671 */
                                SNSR [0x02] = ^^PCI0.SBRG.ECAE /* \_SB_.PCI0.SBRG.ECAE */
                                SNSR [0x03] = ^^PCI0.SBRG.ECAF /* \_SB_.PCI0.SBRG.ECAF */
                                SNSR [0x04] = ^^PCI0.SBRG.M69F /* \_SB_.PCI0.SBRG.M69F */
                                SNSR [0x05] = ^^PCI0.SBRG.M6A0 /* \_SB_.PCI0.SBRG.M6A0 */
                                SNSR [0x06] = ^^PCI0.SBRG.M651 /* \_SB_.PCI0.SBRG.M651 */
                                SNSR [0x07] = ^^PCI0.SBRG.M652 /* \_SB_.PCI0.SBRG.M652 */
                                RET2 [0x02] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.M66E /* \_SB_.PCI0.SBRG.M66E */
                                SNSR [One] = ^^PCI0.SBRG.M6B4 /* \_SB_.PCI0.SBRG.M6B4 */
                                SNSR [0x02] = ^^PCI0.SBRG.ECAC /* \_SB_.PCI0.SBRG.ECAC */
                                SNSR [0x03] = ^^PCI0.SBRG.ECAD /* \_SB_.PCI0.SBRG.ECAD */
                                SNSR [0x04] = ^^PCI0.SBRG.M6D8 /* \_SB_.PCI0.SBRG.M6D8 */
                                SNSR [0x05] = ^^PCI0.SBRG.M6D9 /* \_SB_.PCI0.SBRG.M6D9 */
                                SNSR [0x06] = ^^PCI0.SBRG.ECAA /* \_SB_.PCI0.SBRG.ECAA */
                                SNSR [0x07] = ^^PCI0.SBRG.ECAB /* \_SB_.PCI0.SBRG.ECAB */
                                RET2 [0x03] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = 0x29
                                SNSR [One] = ^^PCI0.SBRG.M6D6 /* \_SB_.PCI0.SBRG.M6D6 */
                                SNSR [0x02] = ^^PCI0.SBRG.M6D7 /* \_SB_.PCI0.SBRG.M6D7 */
                                SNSR [0x03] = ^^PCI0.SBRG.MB86 /* \_SB_.PCI0.SBRG.MB86 */
                                SNSR [0x04] = ^^PCI0.SBRG.M672 /* \_SB_.PCI0.SBRG.M672 */
                                SNSR [0x05] = ^^PCI0.SBRG.M673 /* \_SB_.PCI0.SBRG.M673 */
                                SNSR [0x06] = ^^PCI0.SBRG.BDIC /* \_SB_.PCI0.SBRG.BDIC */
                                SNSR [0x07] = Zero
                                RET2 [0x04] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.MB3D /* \_SB_.PCI0.SBRG.MB3D */
                                SNSR [One] = ^^PCI0.SBRG.MB3E /* \_SB_.PCI0.SBRG.MB3E */
                                SNSR [0x02] = ^^PCI0.SBRG.MB3F /* \_SB_.PCI0.SBRG.MB3F */
                                SNSR [0x03] = ^^PCI0.SBRG.MB40 /* \_SB_.PCI0.SBRG.MB40 */
                                SNSR [0x04] = ^^PCI0.SBRG.MB41 /* \_SB_.PCI0.SBRG.MB41 */
                                SNSR [0x05] = ^^PCI0.SBRG.MB42 /* \_SB_.PCI0.SBRG.MB42 */
                                SNSR [0x06] = ^^PCI0.SBRG.MB43 /* \_SB_.PCI0.SBRG.MB43 */
                                SNSR [0x07] = ^^PCI0.SBRG.MB44 /* \_SB_.PCI0.SBRG.MB44 */
                                RET2 [0x05] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = Zero
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [0x06] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            ElseIf ((Local1 == 0x00800004))
                            {
                                Local0 = ^^PCI0.SBRG.KBTP /* \_SB_.PCI0.SBRG.KBTP */
                                If ((Local0 == 0x03))
                                {
                                    RET2 [Zero] = Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        }
                                }
                                Else
                                {
                                    Local1 = Zero
                                    If (Ones)
                                    {
                                        Local1 = M009 (0x12)
                                    }

                                    Local1 <<= 0x02
                                    Local0 += Local1
                                    SNSR [Zero] = Local0
                                    SNSR [One] = 0xFF
                                    SNSR [0x02] = 0xFF
                                    SNSR [0x03] = 0xFF
                                    SNSR [0x04] = 0xFF
                                    SNSR [0x05] = 0xFF
                                    SNSR [0x06] = 0xFF
                                    SNSR [0x07] = 0xFF
                                    RET2 [One] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                    SNSR [Zero] = Zero
                                    SNSR [One] = Zero
                                    SNSR [0x02] = Zero
                                    SNSR [0x03] = Zero
                                    SNSR [0x04] = Zero
                                    SNSR [0x05] = Zero
                                    SNSR [0x06] = Zero
                                    SNSR [0x07] = Zero
                                    RET2 [0x02] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                    SNSR [Zero] = Zero
                                    SNSR [One] = Zero
                                    SNSR [0x02] = Zero
                                    SNSR [0x03] = Zero
                                    SNSR [0x04] = Zero
                                    SNSR [0x05] = Zero
                                    SNSR [0x06] = Zero
                                    SNSR [0x07] = Zero
                                    RET2 [0x03] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                    SNSR [Zero] = Zero
                                    SNSR [One] = Zero
                                    SNSR [0x02] = Zero
                                    SNSR [0x03] = Zero
                                    SNSR [0x04] = Zero
                                    SNSR [0x05] = Zero
                                    SNSR [0x06] = Zero
                                    SNSR [0x07] = Zero
                                    RET2 [0x04] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                    SNSR [Zero] = Zero
                                    SNSR [One] = Zero
                                    SNSR [0x02] = Zero
                                    SNSR [0x03] = Zero
                                    SNSR [0x04] = Zero
                                    SNSR [0x05] = Zero
                                    SNSR [0x06] = Zero
                                    SNSR [0x07] = Zero
                                    RET2 [0x05] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                    SNSR [Zero] = Zero
                                    SNSR [One] = Zero
                                    SNSR [0x02] = Zero
                                    SNSR [0x03] = Zero
                                    SNSR [0x04] = Zero
                                    SNSR [0x05] = Zero
                                    SNSR [0x06] = Zero
                                    SNSR [0x07] = Zero
                                    RET2 [0x06] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                    RET2 [Zero] = Buffer (0x08)
                                        {
                                             0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        }
                                }
                            }
                            ElseIf ((Local1 == 0x00800005))
                            {
                                SNSR [Zero] = ^^PCI0.SBRG.ECA4 /* \_SB_.PCI0.SBRG.ECA4 */
                                SNSR [One] = ^^PCI0.SBRG.MB3B /* \_SB_.PCI0.SBRG.MB3B */
                                SNSR [0x02] = ^^PCI0.SBRG.MB3C /* \_SB_.PCI0.SBRG.MB3C */
                                SNSR [0x03] = ^^PCI0.SBRG.MB61 /* \_SB_.PCI0.SBRG.MB61 */
                                SNSR [0x04] = ^^PCI0.SBRG.MB62 /* \_SB_.PCI0.SBRG.MB62 */
                                SNSR [0x05] = ^^PCI0.SBRG.MB86 /* \_SB_.PCI0.SBRG.MB86 */
                                SNSR [0x06] = ^^PCI0.SBRG.MB88 /* \_SB_.PCI0.SBRG.MB88 */
                                SNSR [0x07] = ^^PCI0.SBRG.MB89 /* \_SB_.PCI0.SBRG.MB89 */
                                RET2 [One] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.MB8A /* \_SB_.PCI0.SBRG.MB8A */
                                SNSR [One] = ^^PCI0.SBRG.MB8B /* \_SB_.PCI0.SBRG.MB8B */
                                SMRD (0x91, 0x09)
                                SNSR [0x02] = ^^PCI0.SBRG.SM00 /* \_SB_.PCI0.SBRG.SM00 */
                                SNSR [0x03] = ^^PCI0.SBRG.SM01 /* \_SB_.PCI0.SBRG.SM01 */
                                SMRD (0x92, 0x09)
                                SNSR [0x04] = ^^PCI0.SBRG.SM00 /* \_SB_.PCI0.SBRG.SM00 */
                                SNSR [0x05] = ^^PCI0.SBRG.SM01 /* \_SB_.PCI0.SBRG.SM01 */
                                SMRD (0x99, 0x09)
                                SNSR [0x06] = ^^PCI0.SBRG.SM00 /* \_SB_.PCI0.SBRG.SM00 */
                                SNSR [0x07] = ^^PCI0.SBRG.SM01 /* \_SB_.PCI0.SBRG.SM01 */
                                RET2 [0x02] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = Zero
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [0x03] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = Zero
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [0x04] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = Zero
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [0x05] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = Zero
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [0x06] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            ElseIf ((Local1 == 0x00800006))
                            {
                                SMRD (0x70, 0x0B)
                                SNSR [Zero] = ^^PCI0.SBRG.SM00 /* \_SB_.PCI0.SBRG.SM00 */
                                SNSR [One] = ^^PCI0.SBRG.SM01 /* \_SB_.PCI0.SBRG.SM01 */
                                SNSR [0x02] = ^^PCI0.SBRG.SM02 /* \_SB_.PCI0.SBRG.SM02 */
                                SNSR [0x03] = ^^PCI0.SBRG.SM03 /* \_SB_.PCI0.SBRG.SM03 */
                                SNSR [0x04] = ^^PCI0.SBRG.SM04 /* \_SB_.PCI0.SBRG.SM04 */
                                SNSR [0x05] = ^^PCI0.SBRG.SM05 /* \_SB_.PCI0.SBRG.SM05 */
                                SNSR [0x06] = ^^PCI0.SBRG.SM06 /* \_SB_.PCI0.SBRG.SM06 */
                                SNSR [0x07] = ^^PCI0.SBRG.SM07 /* \_SB_.PCI0.SBRG.SM07 */
                                RET2 [One] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.SM08 /* \_SB_.PCI0.SBRG.SM08 */
                                SNSR [One] = ^^PCI0.SBRG.SM09 /* \_SB_.PCI0.SBRG.SM09 */
                                SNSR [0x02] = ^^PCI0.SBRG.SM0A /* \_SB_.PCI0.SBRG.SM0A */
                                SNSR [0x03] = ^^PCI0.SBRG.SM0B /* \_SB_.PCI0.SBRG.SM0B */
                                SNSR [0x04] = ^^PCI0.SBRG.SM0C /* \_SB_.PCI0.SBRG.SM0C */
                                SNSR [0x05] = ^^PCI0.SBRG.SM0D /* \_SB_.PCI0.SBRG.SM0D */
                                SNSR [0x06] = ^^PCI0.SBRG.SM0E /* \_SB_.PCI0.SBRG.SM0E */
                                SNSR [0x07] = Zero
                                RET2 [0x02] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SMRD (0x70, 0x0B)
                                SNSR [Zero] = ^^PCI0.SBRG.SM00 /* \_SB_.PCI0.SBRG.SM00 */
                                SNSR [One] = ^^PCI0.SBRG.SM01 /* \_SB_.PCI0.SBRG.SM01 */
                                SNSR [0x02] = ^^PCI0.SBRG.SM02 /* \_SB_.PCI0.SBRG.SM02 */
                                SNSR [0x03] = ^^PCI0.SBRG.SM03 /* \_SB_.PCI0.SBRG.SM03 */
                                SNSR [0x04] = ^^PCI0.SBRG.SM04 /* \_SB_.PCI0.SBRG.SM04 */
                                SNSR [0x05] = ^^PCI0.SBRG.SM05 /* \_SB_.PCI0.SBRG.SM05 */
                                SNSR [0x06] = ^^PCI0.SBRG.SM06 /* \_SB_.PCI0.SBRG.SM06 */
                                SNSR [0x07] = ^^PCI0.SBRG.SM07 /* \_SB_.PCI0.SBRG.SM07 */
                                RET2 [0x03] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.SM08 /* \_SB_.PCI0.SBRG.SM08 */
                                SNSR [One] = ^^PCI0.SBRG.SM09 /* \_SB_.PCI0.SBRG.SM09 */
                                SNSR [0x02] = ^^PCI0.SBRG.SM0A /* \_SB_.PCI0.SBRG.SM0A */
                                SNSR [0x03] = ^^PCI0.SBRG.SM0B /* \_SB_.PCI0.SBRG.SM0B */
                                SNSR [0x04] = ^^PCI0.SBRG.SM0C /* \_SB_.PCI0.SBRG.SM0C */
                                SNSR [0x05] = ^^PCI0.SBRG.SM0D /* \_SB_.PCI0.SBRG.SM0D */
                                SNSR [0x06] = ^^PCI0.SBRG.SM0E /* \_SB_.PCI0.SBRG.SM0E */
                                SNSR [0x07] = ^^PCI0.SBRG.SM0F /* \_SB_.PCI0.SBRG.SM0F */
                                RET2 [0x04] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.SM10 /* \_SB_.PCI0.SBRG.SM10 */
                                SNSR [One] = ^^PCI0.SBRG.SM11 /* \_SB_.PCI0.SBRG.SM11 */
                                SNSR [0x02] = ^^PCI0.SBRG.SM12 /* \_SB_.PCI0.SBRG.SM12 */
                                SNSR [0x03] = ^^PCI0.SBRG.SM13 /* \_SB_.PCI0.SBRG.SM13 */
                                SNSR [0x04] = ^^PCI0.SBRG.SM14 /* \_SB_.PCI0.SBRG.SM14 */
                                SNSR [0x05] = ^^PCI0.SBRG.SM15 /* \_SB_.PCI0.SBRG.SM15 */
                                SNSR [0x06] = ^^PCI0.SBRG.SM16 /* \_SB_.PCI0.SBRG.SM16 */
                                SNSR [0x07] = ^^PCI0.SBRG.SM17 /* \_SB_.PCI0.SBRG.SM17 */
                                RET2 [0x05] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                SNSR [Zero] = ^^PCI0.SBRG.SM18 /* \_SB_.PCI0.SBRG.SM18 */
                                SNSR [One] = ^^PCI0.SBRG.SM19 /* \_SB_.PCI0.SBRG.SM19 */
                                SNSR [0x02] = ^^PCI0.SBRG.SM1A /* \_SB_.PCI0.SBRG.SM1A */
                                SNSR [0x03] = ^^PCI0.SBRG.SM1B /* \_SB_.PCI0.SBRG.SM1B */
                                SNSR [0x04] = ^^PCI0.SBRG.SM1C /* \_SB_.PCI0.SBRG.SM1C */
                                SNSR [0x05] = ^^PCI0.SBRG.SM1D /* \_SB_.PCI0.SBRG.SM1D */
                                SNSR [0x06] = ^^PCI0.SBRG.SM1E /* \_SB_.PCI0.SBRG.SM1E */
                                SNSR [0x07] = ^^PCI0.SBRG.SM1F /* \_SB_.PCI0.SBRG.SM1F */
                                RET2 [0x06] = SNSR /* \_SB_.WMIT.WMTK.SNSR */
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            ElseIf ((Local1 == 0x00800007))
                            {
                                CRT2 ()
                                Local0 = (F2P2 & 0xFFFFFF00)
                                If ((((Local0 == 0xFE700600) || (Local0 == 0xFE700B00)) || (Local0 == 0xFE700C00)))
                                {
                                    Local2 = F2P1 /* \_SB_.WMIT.WMTK.F2P1 */
                                    Local3 = F2P2 /* \_SB_.WMIT.WMTK.F2P2 */
                                    Local4 = (F2P3 & 0xFF)
                                    If ((Local2 == Zero))
                                    {
                                        RET2 [One] = ToBuffer (RECM (Local3, Local4))
                                        RET2 [Zero] = Buffer (0x08)
                                            {
                                                 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            }
                                    }
                                    ElseIf ((Local2 == One))
                                    {
                                        WECM (Local3, Local4)
                                        If ((RECM (Local3, One) == Local4))
                                        {
                                            RET2 [Zero] = Buffer (0x08)
                                                {
                                                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                }
                                        }
                                    }
                                    Else
                                    {
                                    }
                                }
                                Else
                                {
                                    RET2 [Zero] = Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        }
                                }
                            }
                            ElseIf ((Local1 == 0x00800008))
                            {
                                CRT2 ()
                                Local2 = F2P1 /* \_SB_.WMIT.WMTK.F2P1 */
                                If (((Local2 >= Zero) && (Local2 <= 0x9F)))
                                {
                                    Local3 = (F2P2 & 0xFF)
                                    If ((Local3 == 0xFF))
                                    {
                                        ^^PCI0.SBRG.SEC1 (Local2)
                                    }
                                    Else
                                    {
                                        ^^PCI0.SBRG.SECC (Local2, Local3)
                                    }

                                    RET2 [Zero] = Buffer (0x08)
                                        {
                                             0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        }
                                }
                                Else
                                {
                                    RET2 [Zero] = Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        }
                                }
                            }
                            ElseIf ((Local1 == 0x00800009))
                            {
                                CRT2 ()
                                SNSR [Zero] = ^^PCI0.SBRG.VGAT /* \_SB_.PCI0.SBRG.VGAT */
                                SNSR [One] = Zero
                                SNSR [0x02] = Zero
                                SNSR [0x03] = Zero
                                SNSR [0x04] = Zero
                                SNSR [0x05] = Zero
                                SNSR [0x06] = Zero
                                SNSR [0x07] = Zero
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                RET2 [One] = ToBuffer (SNSR)
                                RET2 [0x02] = Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                RET2 [0x03] = Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                RET2 [0x04] = Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                RET2 [0x05] = Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                RET2 [0x06] = Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                RET2 [0x07] = Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            ElseIf ((Local1 == 0x0080000A))
                            {
                                CRT2 ()
                                Local2 = F2P1 /* \_SB_.WMIT.WMTK.F2P1 */
                                RET2 [One] = ToBuffer (^^PCI0.SBRG.GECD (Local2))
                                RET2 [Zero] = Buffer (0x08)
                                    {
                                         0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                            }
                            Else
                            {
                                RET2 [Zero] = ToBuffer (F2P0)
                                RET2 [One] = ToBuffer (F2P1)
                                RET2 [0x02] = ToBuffer (F2P2)
                                RET2 [0x03] = ToBuffer (F2P3)
                                RET2 [0x04] = ToBuffer (F2P4)
                                RET2 [0x05] = ToBuffer (F2P5)
                                RET2 [0x06] = ToBuffer (F2P6)
                            }
                        }

                        Return (RET2) /* \_SB_.WMIT.RET2 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (WE58, 1, NotSerialized)
            {
                EVCF = Arg0
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                DBG8 = Arg0
                If ((Arg0 == 0x58))
                {
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.WMIT)
    {
        Name (WQIT, Buffer (0x04DD)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0xCD, 0x04, 0x00, 0x00, 0x66, 0x11, 0x00, 0x00,  // ....f...
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x98, 0x52, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,  // .R.....B
            /* 0020 */  0x10, 0x05, 0x10, 0xD2, 0x22, 0x83, 0x42, 0x04,  // ....".B.
            /* 0028 */  0x0A, 0x45, 0x24, 0xC9, 0x0E, 0x60, 0x30, 0x1A,  // .E$..`0.
            /* 0030 */  0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  // @$.B....
            /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
            /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0xD4,  //  ....$8.
            /* 0048 */  0x26, 0x24, 0x40, 0xA2, 0x00, 0xF3, 0x02, 0x74,  // &$@....t
            /* 0050 */  0x0B, 0x30, 0x2C, 0xC0, 0xB6, 0x00, 0xD3, 0x02,  // .0,.....
            /* 0058 */  0x1C, 0x43, 0x52, 0x69, 0xE0, 0x94, 0xC0, 0x52,  // .CRi...R
            /* 0060 */  0x20, 0x24, 0x54, 0x80, 0x72, 0x01, 0xBE, 0x05,  //  $T.r...
            /* 0068 */  0x68, 0x47, 0x94, 0x64, 0x01, 0x96, 0x61, 0x44,  // hG.d..aD
            /* 0070 */  0xE0, 0x51, 0x44, 0x36, 0x1A, 0x87, 0xC6, 0x0E,  // .QD6....
            /* 0078 */  0xC3, 0x32, 0xC1, 0x34, 0x88, 0xC3, 0x28, 0x1B,  // .2.4..(.
            /* 0080 */  0x59, 0x04, 0x9E, 0x50, 0xA7, 0x02, 0xE4, 0x0A,  // Y..P....
            /* 0088 */  0x10, 0x26, 0x40, 0x3C, 0xAA, 0x30, 0x9A, 0x83,  // .&@<.0..
            /* 0090 */  0x22, 0x31, 0xA0, 0x51, 0x62, 0xC6, 0x44, 0x60,  // "1.Qb.D`
            /* 0098 */  0x3B, 0xC7, 0xD6, 0x28, 0x4E, 0xA3, 0x70, 0x01,  // ;..(N.p.
            /* 00A0 */  0xD2, 0x31, 0x34, 0x82, 0xE3, 0x4A, 0xD0, 0xE1,  // .14..J..
            /* 00A8 */  0x0C, 0x34, 0x85, 0x68, 0x11, 0x0A, 0x12, 0x60,  // .4.h...`
            /* 00B0 */  0x1D, 0x43, 0x98, 0x87, 0x14, 0x25, 0x60, 0xBC,  // .C...%`.
            /* 00B8 */  0x18, 0x21, 0xA2, 0x1E, 0x95, 0x01, 0x03, 0x05,  // .!......
            /* 00C0 */  0x09, 0x54, 0x33, 0xB6, 0x70, 0x8E, 0xAB, 0x77,  // .T3.p..w
            /* 00C8 */  0x24, 0x81, 0x44, 0x32, 0xA8, 0x11, 0x4E, 0xA0,  // $.D2..N.
            /* 00D0 */  0x6B, 0x34, 0xC1, 0x04, 0x8A, 0x71, 0x14, 0x61,  // k4...q.a
            /* 00D8 */  0x8D, 0x17, 0x36, 0xE4, 0xB9, 0x1C, 0x18, 0x03,  // ..6.....
            /* 00E0 */  0x3C, 0x26, 0xCC, 0x37, 0xC0, 0x9E, 0xA7, 0xA2,  // <&.7....
            /* 00E8 */  0xC1, 0x9A, 0xC0, 0xEE, 0x05, 0x68, 0x14, 0x60,  // .....h.`
            /* 00F0 */  0x11, 0x42, 0xCE, 0x04, 0x88, 0x13, 0xA0, 0x4C,  // .B.....L
            /* 00F8 */  0x80, 0x35, 0x01, 0xC6, 0x04, 0xD8, 0x42, 0x21,  // .5....B!
            /* 0100 */  0x20, 0xC7, 0x18, 0x25, 0xC4, 0xE1, 0x45, 0x89,  //  ..%..E.
            /* 0108 */  0x17, 0xA5, 0xC1, 0x61, 0x0A, 0x2C, 0x46, 0x94,  // ...a.,F.
            /* 0110 */  0xDE, 0x90, 0x04, 0x72, 0xA8, 0x31, 0x42, 0x44,  // ...r.1BD
            /* 0118 */  0xAF, 0x10, 0x4F, 0x08, 0xA1, 0x82, 0xB4, 0x3F,  // ..O....?
            /* 0120 */  0x08, 0x12, 0xEF, 0x68, 0x20, 0x09, 0x20, 0x8A,  // ...h . .
            /* 0128 */  0x34, 0x1A, 0xD4, 0x71, 0x20, 0xC1, 0xE3, 0x81,  // 4..q ...
            /* 0130 */  0x8F, 0x06, 0xE7, 0x75, 0xA2, 0x07, 0x76, 0x5A,  // ...u..vZ
            /* 0138 */  0x41, 0x8E, 0xCB, 0x3A, 0x51, 0xF4, 0xFF, 0x9F,  // A..:Q...
            /* 0140 */  0xE3, 0x91, 0x31, 0xAC, 0x04, 0xBF, 0x0A, 0x3E,  // ..1....>
            /* 0148 */  0x28, 0xE0, 0xA7, 0x19, 0xF0, 0x0D, 0xE1, 0xF9,  // (.......
            /* 0150 */  0x80, 0x0D, 0x34, 0x1C, 0x66, 0x88, 0x1E, 0xB1,  // ..4.f...
            /* 0158 */  0x27, 0x70, 0x88, 0x0C, 0xD0, 0x83, 0x7A, 0x34,  // 'p....z4
            /* 0160 */  0xC0, 0x9E, 0x03, 0x4E, 0xE6, 0xB9, 0xA0, 0x54,  // ...N...T
            /* 0168 */  0x01, 0x66, 0xCF, 0x08, 0x9A, 0x5A, 0x82, 0xE3,  // .f...Z..
            /* 0170 */  0xF1, 0x81, 0xC0, 0xF3, 0x39, 0xE1, 0x04, 0x96,  // ....9...
            /* 0178 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69, 0x9E,  // ?.....i.
            /* 0180 */  0xD6, 0x7B, 0x81, 0x8F, 0x0B, 0x87, 0xC5, 0xC4,  // .{......
            /* 0188 */  0x9E, 0x2A, 0xE8, 0x78, 0xC0, 0xAF, 0xF8, 0x6A,  // .*.x...j
            /* 0190 */  0x40, 0xB1, 0x7D, 0x5C, 0xF0, 0x09, 0x22, 0x30,  // @.}\.."0
            /* 0198 */  0x76, 0x40, 0xF6, 0x2B, 0x00, 0x21, 0x78, 0xB4,  // v@.+.!x.
            /* 01A0 */  0x23, 0x7A, 0x88, 0x88, 0x70, 0xF0, 0xC6, 0x3D,  // #z..p..=
            /* 01A8 */  0xA7, 0x23, 0x78, 0x52, 0xC0, 0x9D, 0x00, 0x7C,  // .#xR...|
            /* 01B0 */  0x51, 0xC0, 0x8B, 0x3C, 0x4B, 0xA0, 0xC7, 0xC0,  // Q..<K...
            /* 01B8 */  0x0F, 0x02, 0xA7, 0x70, 0x44, 0xE7, 0x73, 0x0C,  // ...pD.s.
            /* 01C0 */  0x47, 0x14, 0xE5, 0x34, 0x0E, 0xC9, 0x47, 0x8B,  // G..4..G.
            /* 01C8 */  0x08, 0x75, 0x41, 0xE8, 0x9C, 0x61, 0x84, 0x53,  // .uA..a.S
            /* 01D0 */  0x88, 0xF2, 0x0E, 0xF1, 0xAE, 0x61, 0x02, 0xE7,  // .....a..
            /* 01D8 */  0x59, 0x81, 0xC6, 0x6A, 0x95, 0x0F, 0x04, 0xD9,  // Y..j....
            /* 01E0 */  0x58, 0xAC, 0x07, 0x41, 0xD5, 0x3C, 0x0B, 0x34,  // X..A.<.4
            /* 01E8 */  0x23, 0x18, 0x03, 0x0A, 0x14, 0x58, 0x70, 0x3A,  // #....Xp:
            /* 01F0 */  0x9E, 0xF0, 0xEC, 0x14, 0xD2, 0x49, 0xA3, 0x01,  // .....I..
            /* 01F8 */  0x19, 0xDE, 0xCA, 0x60, 0x04, 0x67, 0x10, 0x03,  // ...`.g..
            /* 0200 */  0x3A, 0x36, 0x84, 0x8C, 0x0C, 0x83, 0x42, 0x5A,  // :6....BZ
            /* 0208 */  0x07, 0x88, 0xFE, 0xFF, 0x53, 0xF0, 0x49, 0xE2,  // ....S.I.
            /* 0210 */  0x45, 0xC3, 0x10, 0x09, 0xA6, 0x84, 0x90, 0x85,  // E.......
            /* 0218 */  0xD9, 0xD0, 0xBB, 0x00, 0xBF, 0xAD, 0xF8, 0x74,  // .......t
            /* 0220 */  0x60, 0x68, 0x4F, 0x15, 0x7F, 0x0B, 0x81, 0x77,  // `hO....w
            /* 0228 */  0x6B, 0x61, 0x5B, 0x39, 0x77, 0x18, 0x50, 0x8F,  // ka[9w.P.
            /* 0230 */  0x17, 0x6F, 0x12, 0xEC, 0x19, 0x43, 0x07, 0x41,  // .o...C.A
            /* 0238 */  0x70, 0x0F, 0xFC, 0x55, 0xC1, 0xD7, 0x0B, 0xAB,  // p..U....
            /* 0240 */  0x81, 0x43, 0x8D, 0xC7, 0x23, 0x38, 0x93, 0x04,  // .C..#8..
            /* 0248 */  0x4C, 0xD6, 0x49, 0x01, 0xFA, 0x2D, 0xC4, 0x83,  // L.I..-..
            /* 0250 */  0xF1, 0xD1, 0x23, 0x41, 0x7D, 0x07, 0x05, 0x50,  // ..#A}..P
            /* 0258 */  0x00, 0xF9, 0x5A, 0x60, 0xA5, 0x47, 0x03, 0x3A,  // ..Z`.G.:
            /* 0260 */  0x85, 0x10, 0x61, 0xA2, 0x19, 0x9D, 0x47, 0xBA,  // ..a...G.
            /* 0268 */  0x03, 0xA0, 0x42, 0xDC, 0x01, 0x28, 0x88, 0x07,  // ..B..(..
            /* 0270 */  0xE6, 0x58, 0x77, 0x00, 0xF4, 0x4C, 0xEC, 0x73,  // .Xw..L.s
            /* 0278 */  0x44, 0x1A, 0xD0, 0x43, 0x00, 0x26, 0xC4, 0x28,  // D..C.&.(
            /* 0280 */  0xE9, 0x2D, 0x04, 0x3F, 0xF3, 0xA0, 0xBE, 0x5E,  // .-.?...^
            /* 0288 */  0xB0, 0x31, 0xC3, 0x85, 0xC3, 0x8F, 0x99, 0x0F,  // .1......
            /* 0290 */  0xC9, 0x73, 0x06, 0x57, 0x94, 0xB1, 0xF9, 0x2A,  // .s.W...*
            /* 0298 */  0x82, 0xBA, 0x0E, 0x79, 0xAA, 0xCF, 0x07, 0xFE,  // ...y....
            /* 02A0 */  0xFF, 0x9F, 0x0B, 0x7C, 0x16, 0xF1, 0x15, 0x84,  // ...|....
            /* 02A8 */  0x5D, 0x6D, 0x7C, 0x63, 0x81, 0x33, 0x38, 0xB8,  // ]m|c.38.
            /* 02B0 */  0xA3, 0xE2, 0x17, 0x09, 0x8F, 0x0A, 0x5C, 0x02,  // ......\.
            /* 02B8 */  0x2F, 0x06, 0x20, 0x87, 0xC7, 0xC8, 0x59, 0xB3,  // /. ...Y.
            /* 02C0 */  0x4E, 0x17, 0x1E, 0x8F, 0x87, 0xC5, 0xCF, 0x15,  // N.......
            /* 02C8 */  0xBE, 0x41, 0x31, 0xEC, 0xE3, 0x3C, 0x98, 0xA2,  // .A1..<..
            /* 02D0 */  0x27, 0xA8, 0x89, 0x1E, 0xD3, 0x99, 0x7A, 0xFC,  // '.....z.
            /* 02D8 */  0x7C, 0xA0, 0x1C, 0xD6, 0x68, 0x61, 0x1F, 0x30,  // |...ha.0
            /* 02E0 */  0xDE, 0x5B, 0x7C, 0xE8, 0xF1, 0xE9, 0x82, 0xC1,  // .[|.....
            /* 02E8 */  0xFA, 0xB6, 0x03, 0x0E, 0x40, 0xFC, 0x21, 0xE5,  // ....@.!.
            /* 02F0 */  0x9D, 0xC3, 0x13, 0x30, 0x20, 0xBB, 0xE9, 0xF8,  // ...0 ...
            /* 02F8 */  0xF4, 0x01, 0x8E, 0xA9, 0xE1, 0xCE, 0x54, 0x30,  // ......T0
            /* 0300 */  0x70, 0x22, 0xC5, 0x8D, 0x10, 0x26, 0xF8, 0xAB,  // p"...&..
            /* 0308 */  0x94, 0x81, 0xDE, 0x8A, 0x1E, 0x82, 0x3C, 0x39,  // ......<9
            /* 0310 */  0x5F, 0xAB, 0x8C, 0xF7, 0x94, 0xE4, 0x39, 0x70,  // _.....9p
            /* 0318 */  0xB4, 0x27, 0x99, 0x04, 0x96, 0x79, 0x85, 0x41,  // .'...y.A
            /* 0320 */  0x1D, 0x0F, 0x2C, 0x69, 0xE1, 0x9A, 0x7F, 0x74,  // ..,i...t
            /* 0328 */  0xCC, 0x68, 0xFE, 0xFF, 0x47, 0x83, 0x39, 0x05,  // .h..G.9.
            /* 0330 */  0x90, 0x3B, 0x0C, 0x2A, 0x3E, 0x85, 0x84, 0x1E,  // .;.*>...
            /* 0338 */  0x38, 0x50, 0xD2, 0x0E, 0x1C, 0x14, 0xC4, 0x80,  // 8P......
            /* 0340 */  0xCE, 0x0D, 0x21, 0x2B, 0x77, 0x18, 0xC8, 0x31,  // ..!+w..1
            /* 0348 */  0xEF, 0x30, 0x40, 0xF1, 0xEA, 0xF5, 0x02, 0x02,  // .0@.....
            /* 0350 */  0xD3, 0xC3, 0x1D, 0x06, 0xF2, 0xC4, 0x7D, 0xB6,  // ......}.
            /* 0358 */  0x00, 0x87, 0xB6, 0x03, 0x1D, 0x39, 0xC4, 0x00,  // .....9..
            /* 0360 */  0x8B, 0x1B, 0xA0, 0x0F, 0x01, 0x3C, 0xC6, 0x21,  // .....<.!
            /* 0368 */  0x80, 0x82, 0x78, 0x62, 0x0E, 0x76, 0x08, 0x40,  // ..xb.v.@
            /* 0370 */  0x1F, 0x62, 0xE0, 0xDC, 0xF2, 0x7C, 0x88, 0x01,  // .b...|..
            /* 0378 */  0xEF, 0x9C, 0x7D, 0x3E, 0x81, 0xF1, 0xFF, 0x3F,  // ..}>...?
            /* 0380 */  0xC4, 0x60, 0x2E, 0x60, 0xF0, 0x07, 0x8D, 0x3D,  // .`.`...=
            /* 0388 */  0xC5, 0x00, 0x76, 0xA5, 0x9C, 0x62, 0x40, 0x37,  // ..v..b@7
            /* 0390 */  0x34, 0x7E, 0x8A, 0x01, 0x9E, 0xC3, 0xF7, 0x29,  // 4~.....)
            /* 0398 */  0x06, 0x58, 0xFC, 0xFF, 0x4F, 0x31, 0xB8, 0xBB,  // .X..O1..
            /* 03A0 */  0xC4, 0x21, 0x44, 0x7E, 0x87, 0x81, 0x17, 0xE8,  // .!D~....
            /* 03A8 */  0x39, 0x61, 0x02, 0xC5, 0x19, 0xB7, 0x22, 0xC0,  // 9a....".
            /* 03B0 */  0xA0, 0x6E, 0xAD, 0xC0, 0x3B, 0xC0, 0x45, 0x15,  // .n..;.E.
            /* 03B8 */  0x94, 0x78, 0xA1, 0x7C, 0x06, 0xF1, 0xE9, 0xC1,  // .x.|....
            /* 03C0 */  0x57, 0x4A, 0x86, 0x15, 0xFC, 0xDD, 0xC2, 0x60,  // WJ.....`
            /* 03C8 */  0x86, 0x09, 0x14, 0xC5, 0xB7, 0x55, 0xCC, 0xDC,  // .....U..
            /* 03D0 */  0x6D, 0xF5, 0x32, 0x4B, 0x60, 0x19, 0xD0, 0x33,  // m.2K`..3
            /* 03D8 */  0x09, 0xBF, 0xD5, 0x82, 0xF3, 0xCA, 0x0A, 0xFB,  // ........
            /* 03E0 */  0x82, 0x11, 0xE1, 0x15, 0xF5, 0x41, 0xE4, 0x8D,  // .....A..
            /* 03E8 */  0xF5, 0xB5, 0xE2, 0x1C, 0x0F, 0xEF, 0x81, 0xD5,  // ........
            /* 03F0 */  0xF7, 0x54, 0x1F, 0x2C, 0xA2, 0xF8, 0xD6, 0xEA,  // .T.,....
            /* 03F8 */  0x53, 0xAB, 0xE1, 0xC2, 0x18, 0xCF, 0x10, 0x61,  // S......a
            /* 0400 */  0xA3, 0xBC, 0xAE, 0x46, 0x88, 0xFB, 0xD6, 0xEA,  // ...F....
            /* 0408 */  0xE3, 0x2B, 0xBB, 0xB2, 0xF2, 0xD0, 0xAF, 0x0A,  // .+......
            /* 0410 */  0x9D, 0x0B, 0x7C, 0x65, 0x85, 0xFD, 0xFF, 0xBF,  // ..|e....
            /* 0418 */  0xB2, 0x02, 0x0C, 0x88, 0x0E, 0x21, 0x27, 0xE3,  // .....!'.
            /* 0420 */  0x41, 0x8D, 0xC2, 0x97, 0x05, 0x0C, 0xC1, 0xA8,  // A.......
            /* 0428 */  0x37, 0x2C, 0x2A, 0xEA, 0xCC, 0x82, 0x3A, 0x59,  // 7,*...:Y
            /* 0430 */  0xF8, 0x50, 0xC1, 0xCE, 0x45, 0xFC, 0x1C, 0x87,  // .P..E...
            /* 0438 */  0x39, 0xA7, 0x80, 0xFF, 0x18, 0x81, 0x3B, 0x66,  // 9.....;f
            /* 0440 */  0xC0, 0xBD, 0x35, 0x61, 0xCE, 0x47, 0x60, 0xBA,  // ..5a.G`.
            /* 0448 */  0x49, 0x3F, 0x7C, 0xF9, 0xE8, 0x83, 0xFB, 0xFF,  // I?|.....
            /* 0450 */  0x1F, 0x7D, 0x60, 0xDE, 0xCB, 0xDE, 0x88, 0x0C,  // .}`.....
            /* 0458 */  0x15, 0xE6, 0x0C, 0x42, 0x04, 0x39, 0x84, 0x5A,  // ...B.9.Z
            /* 0460 */  0x21, 0x74, 0x75, 0x38, 0x8B, 0x97, 0x5D, 0x60,  // !tu8..]`
            /* 0468 */  0x72, 0x53, 0xF2, 0x11, 0x11, 0x31, 0x04, 0xD4,  // rS...1..
            /* 0470 */  0x00, 0x5E, 0x08, 0x4E, 0xCF, 0xC7, 0xA2, 0x93,  // .^.N....
            /* 0478 */  0xC2, 0x9D, 0x06, 0x38, 0xD8, 0xC3, 0x09, 0x3F,  // ...8...?
            /* 0480 */  0x1D, 0xE1, 0x14, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8,  // ........
            /* 0488 */  0x55, 0x83, 0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5,  // U.25.4..
            /* 0490 */  0xA7, 0x52, 0x63, 0xC6, 0xCE, 0x55, 0x96, 0xF9,  // .Rc..U..
            /* 0498 */  0x78, 0xD0, 0xE9, 0xC0, 0x21, 0x41, 0x68, 0x92,  // x...!Ah.
            /* 04A0 */  0xE3, 0x8D, 0xC0, 0x1C, 0x0B, 0x44, 0x40, 0xCE,  // .....D@.
            /* 04A8 */  0xF3, 0x4C, 0x10, 0x90, 0xD3, 0x81, 0x08, 0xC8,  // .L......
            /* 04B0 */  0xCA, 0x1E, 0x1F, 0x02, 0xB2, 0x4E, 0x10, 0x01,  // .....N..
            /* 04B8 */  0x39, 0xF0, 0x3A, 0x04, 0xE4, 0xF4, 0x20, 0x02,  // 9.:... .
            /* 04C0 */  0x72, 0x6E, 0x13, 0x40, 0x4C, 0x85, 0x0A, 0x20,  // rn.@L.. 
            /* 04C8 */  0x96, 0x01, 0x44, 0x40, 0x4E, 0x04, 0x44, 0xB5,  // ..D@N.D.
            /* 04D0 */  0xBE, 0xF8, 0x04, 0xE2, 0xA4, 0x20, 0x34, 0xA3,  // ..... 4.
            /* 04D8 */  0x0F, 0x10, 0xF6, 0xFF, 0x07                     // .....
        })
    }

    Method (XPTS, 1, NotSerialized)
    {
    }

    Method (XWAK, 1, NotSerialized)
    {
    }

    Scope (_SB.I2CA)
    {
        Device (TPD0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((TPSL == 0xAC))
                {
                    _HID = "ASUP1205"
                }

                If ((TPSL == 0xFC))
                {
                    _HID = "ASUF1204"
                    SLAV = 0x38
                }
            }

            Name (_HID, "MSFT0001")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (HIDD, One)
            Name (RBUF, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, _Y27, Exclusive,
                    )
                GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0008
                    }
            })
            CreateWordField (RBUF, \_SB.I2CA.TPD0._Y27._ADR, SLAV)  // _ADR: Address
            CreateDWordField (RBUF, \_SB.I2CA.TPD0._Y27._SPE, SPED)  // _SPE: Speed
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBUF) /* \_SB_.I2CA.TPD0.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                TPME = One
                If (((TPSL != Zero) && (TPME == One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (HIDD) /* \_SB_.I2CA.TPD0.HIDD */
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Buffer (0x04)
                        {
                             0xE7, 0x00, 0x6B, 0x00                           // ..k.
                        })
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (SMKB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "ITE5570")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x003A, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x005B
                    }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBUF) /* \_SB_.SMKB.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.GPP6)
    {
        Device (WLAN)
        {
            OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
            Field (PCIS, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16
            }

            Name (_ADR, Zero)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (MTDS, Package (0x12)
            {
                0x4D, 
                0x54, 
                0x44, 
                0x53, 
                One, 
                0x02, 
                One, 
                0x1C, 
                0x18, 
                0x18, 
                0x18, 
                0x18, 
                0x02, 
                0x1C, 
                0x18, 
                0x18, 
                0x18, 
                0x18
            })
            Name (MTGS, Package (0x1F)
            {
                0x4D, 
                0x54, 
                0x47, 
                0x53, 
                0x02, 
                0x05, 
                One, 
                0x3C, 
                Zero, 
                0x3C, 
                Zero, 
                0x02, 
                0x3C, 
                0x3C, 
                0x3C, 
                0x3C, 
                0x03, 
                0x3C, 
                Zero, 
                0x3C, 
                Zero, 
                0x04, 
                0x3C, 
                0x3C, 
                0x3C, 
                0x3C, 
                0x05, 
                0x3C, 
                0x3C, 
                0x3C, 
                0x3C
            })
            Name (MTFG, Package (0x09)
            {
                0x4D, 
                0x54, 
                0x46, 
                0x47, 
                Zero, 
                Zero, 
                One, 
                Zero, 
                0x08
            })
            Method (RWGS, 0, Serialized)
            {
                Name (RWGY, Package (0x18)
                {
                    0xFF, 
                    Zero, 
                    0xFF, 
                    Zero, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18, 
                    0xFF, 
                    0x18
                })
                Return (RWGY) /* \_SB_.PCI0.GPP6.WLAN.RWGS.RWGY */
            }

            Method (RWRD, 0, Serialized)
            {
                Name (RWRY, Package (0x0E)
                {
                    0x52, 
                    0x54, 
                    One, 
                    One, 
                    0x6C, 
                    0x60, 
                    0x60, 
                    0x60, 
                    0x60, 
                    0x6C, 
                    0x60, 
                    0x60, 
                    0x60, 
                    0x60
                })
                Return (RWRY) /* \_SB_.PCI0.GPP6.WLAN.RWRD.RWRY */
            }

            Name (WRDS, Package (0x02)
            {
                0x02, 
                Package (0x18)
                {
                    0x07, 
                    One, 
                    0x88, 
                    0x7C, 
                    0x7C, 
                    0x7C, 
                    0x7C, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x88, 
                    0x7C, 
                    0x7C, 
                    0x7C, 
                    0x7C, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x68, 
                    0x68
                }
            })
            Name (EWRD, Package (0x02)
            {
                One, 
                Package (0x21)
                {
                    0x07, 
                    Zero, 
                    0x02, 
                    0x8C, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x8C, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x8C, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x8C, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x8C, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x8C, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Name (WGDS, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0xFF, 
                    Zero, 
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                }
            })
            Method (RWBC, 0, Serialized)
            {
                Name (RWBY, Package (0x3E)
                {
                    Zero, 
                    0x12, 
                    0x42, 
                    0x4F, 
                    0x43, 
                    0x52, 
                    0x45, 
                    0x43, 
                    0x53, 
                    0x56, 
                    0x48, 
                    0x4E, 
                    0x4E, 
                    0x49, 
                    0x50, 
                    0x41, 
                    0x55, 
                    0x59, 
                    0x56, 
                    0x45, 
                    0x44, 
                    0x4F, 
                    0x54, 
                    0x57, 
                    0x54, 
                    0x54, 
                    0x41, 
                    0x57, 
                    0x42, 
                    0x53, 
                    0x42, 
                    0x42, 
                    0x42, 
                    0x4D, 
                    0x46, 
                    0x4A, 
                    0x48, 
                    0x54, 
                    0x55, 
                    0x53, 
                    0x49, 
                    0x44, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Return (RWBY) /* \_SB_.PCI0.GPP6.WLAN.RWBC.RWBY */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d2a8c3e8-4b69-4f00-82bd-fe8607803aa7") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (Buffer (0x05)
                        {
                             0x52, 0x54, 0x4B, 0x01, 0x01                     // RTK..
                        })
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (Buffer (One)
                        {
                             0x01                                             // .
                        })
                    }

                    If ((Arg2 == 0x06))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (LPTS, 1, Serialized)
        {
            ^PCI0.SBRG.PTSF = 0x02
            Switch (Arg0)
            {
                Case (0x03)
                {
                }
                Case (0x04)
                {
                    ^PCI0.SBRG.ECS4 = One
                    ^PCI0.SBRG.PBDF = One
                }
                Case (0x05)
                {
                }

            }
        }
    }

    Scope (_SB)
    {
        Method (LWAK, 1, Serialized)
        {
            ^PCI0.SBRG.ADP0.ACDC = 0xFF
            Switch (Arg0)
            {
                Case (0x03)
                {
                }
                Case (0x04)
                {
                }
                Case (0x05)
                {
                }

            }
        }
    }

    Name (DRP1, Buffer (0xD7)
    {
        /* 0000 */  0xE3, 0xE8, 0xFD, 0xB1, 0xBA, 0x62, 0x1C, 0xC2,  // .....b..
        /* 0008 */  0x52, 0x44, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x87, 0x00, 0x00, 0x00, 0x04, 0x00, 0x85, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x83, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x81, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x7F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7D, 0x00,  // ......}.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC4, 0xD5, 0xC4, 0x32, 0x00, 0x00, 0x00,  // ....2...
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
        /* 0098 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2A,  // .1.6.5.*
        /* 00A0 */  0x00, 0x31, 0x00, 0x34, 0x00, 0x37, 0x00, 0x30,  // .1.4.7.0
        /* 00A8 */  0x00, 0x35, 0x00, 0x3B, 0x00, 0x36, 0x00, 0x30,  // .5.;.6.0
        /* 00B0 */  0x00, 0x2A, 0x00, 0x32, 0x00, 0x36, 0x00, 0x33,  // .*.2.6.3
        /* 00B8 */  0x00, 0x31, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00,  // .1.5....
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (DRP2, Buffer (0xD7)
    {
        /* 0000 */  0x0E, 0xBF, 0xE9, 0x0B, 0x9C, 0xC0, 0xB3, 0x4C,  // .......L
        /* 0008 */  0x52, 0x44, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x87, 0x00, 0x00, 0x00, 0x04, 0x00, 0x85, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x83, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x81, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x7F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7D, 0x00,  // ......}.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC4, 0xD5, 0xC4, 0x32, 0x00, 0x00, 0x00,  // ....2...
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
        /* 0098 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2A,  // .1.6.5.*
        /* 00A0 */  0x00, 0x31, 0x00, 0x34, 0x00, 0x37, 0x00, 0x30,  // .1.4.7.0
        /* 00A8 */  0x00, 0x35, 0x00, 0x3B, 0x00, 0x36, 0x00, 0x30,  // .5.;.6.0
        /* 00B0 */  0x00, 0x2A, 0x00, 0x33, 0x00, 0x32, 0x00, 0x32,  // .*.3.2.2
        /* 00B8 */  0x00, 0x35, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00,  // .5.8....
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (DRP3, Buffer (0xD7)
    {
        /* 0000 */  0xE3, 0xE8, 0xFD, 0xB1, 0xBA, 0x62, 0x1C, 0xC2,  // .....b..
        /* 0008 */  0x52, 0x44, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x87, 0x00, 0x00, 0x00, 0x04, 0x00, 0x85, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x83, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x81, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x7F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7D, 0x00,  // ......}.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC4, 0xD5, 0xC4, 0x32, 0x00, 0x00, 0x00,  // ....2...
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
        /* 0098 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2A,  // .1.6.5.*
        /* 00A0 */  0x00, 0x31, 0x00, 0x34, 0x00, 0x37, 0x00, 0x30,  // .1.4.7.0
        /* 00A8 */  0x00, 0x35, 0x00, 0x3B, 0x00, 0x36, 0x00, 0x30,  // .5.;.6.0
        /* 00B0 */  0x00, 0x2A, 0x00, 0x32, 0x00, 0x36, 0x00, 0x33,  // .*.2.6.3
        /* 00B8 */  0x00, 0x31, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00,  // .1.5....
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (DRP4, Buffer (0xD9)
    {
        /* 0000 */  0xBD, 0x30, 0x6A, 0x83, 0x42, 0x75, 0x47, 0x1E,  // .0j.BuG.
        /* 0008 */  0x52, 0x44, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x89, 0x00, 0x00, 0x00, 0x04, 0x00, 0x87, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x83, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7F, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC4, 0xD5, 0xC4, 0x34, 0x00, 0x00, 0x00,  // ....4...
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(..
        /* 0098 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2A,  // .1.6.5.*
        /* 00A0 */  0x00, 0x31, 0x00, 0x34, 0x00, 0x37, 0x00, 0x30,  // .1.4.7.0
        /* 00A8 */  0x00, 0x35, 0x00, 0x3B, 0x00, 0x36, 0x00, 0x30,  // .5.;.6.0
        /* 00B0 */  0x00, 0x2A, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33,  // .*.3.3.3
        /* 00B8 */  0x00, 0x33, 0x00, 0x33, 0x00, 0x30, 0x00, 0x00,  // .3.3.0..
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00                                             // .
    })
    Name (DRP5, Buffer (0xD7)
    {
        /* 0000 */  0x0E, 0xBF, 0xE9, 0x0B, 0x9C, 0xC0, 0xB3, 0x4C,  // .......L
        /* 0008 */  0x52, 0x44, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x87, 0x00, 0x00, 0x00, 0x04, 0x00, 0x85, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x83, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x81, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x7F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7D, 0x00,  // ......}.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC4, 0xD5, 0xC4, 0x32, 0x00, 0x00, 0x00,  // ....2...
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
        /* 0098 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2A,  // .1.6.5.*
        /* 00A0 */  0x00, 0x31, 0x00, 0x34, 0x00, 0x37, 0x00, 0x30,  // .1.4.7.0
        /* 00A8 */  0x00, 0x35, 0x00, 0x3B, 0x00, 0x36, 0x00, 0x30,  // .5.;.6.0
        /* 00B0 */  0x00, 0x2A, 0x00, 0x33, 0x00, 0x32, 0x00, 0x32,  // .*.3.2.2
        /* 00B8 */  0x00, 0x35, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00,  // .5.8....
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (DRP6, Buffer (0xD7)
    {
        /* 0000 */  0xBB, 0x82, 0x1B, 0x12, 0xEF, 0x27, 0x9E, 0x89,  // .....'..
        /* 0008 */  0x52, 0x44, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x87, 0x00, 0x00, 0x00, 0x04, 0x00, 0x85, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x83, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x81, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x7F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7D, 0x00,  // ......}.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC4, 0xD5, 0xC4, 0x32, 0x00, 0x00, 0x00,  // ....2...
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
        /* 0098 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2A,  // .1.6.5.*
        /* 00A0 */  0x00, 0x31, 0x00, 0x34, 0x00, 0x37, 0x00, 0x30,  // .1.4.7.0
        /* 00A8 */  0x00, 0x35, 0x00, 0x3B, 0x00, 0x36, 0x00, 0x30,  // .5.;.6.0
        /* 00B0 */  0x00, 0x2A, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33,  // .*.3.3.3
        /* 00B8 */  0x00, 0x33, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00,  // .3.3....
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (VKP1, Buffer (0xC9)
    {
        /* 0000 */  0x36, 0x24, 0x1D, 0x16, 0x95, 0xD5, 0x23, 0x86,  // 6$....#.
        /* 0008 */  0x4B, 0x56, 0xC9, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x39, 0x31, 0x34, 0x35, 0x37, 0x32, 0x32, 0x32,  // 91457222
        /* 0018 */  0x37, 0x37, 0x31, 0x36, 0x47, 0x65, 0x6E, 0x75,  // 7716Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x47, 0x4D,  // m for GM
        /* 0050 */  0x4E, 0x50, 0x4D, 0x54, 0x57, 0x49, 0x46, 0x57,  // NPMTWIFW
        /* 0058 */  0x50, 0x54, 0x4D, 0x43, 0x4E, 0x53, 0x58, 0x58,  // PTMCNSXX
        /* 0060 */  0x48, 0x49, 0x20, 0x2D, 0x20, 0x57, 0x57, 0x3A,  // HI - WW:
        /* 0068 */  0x28, 0x42, 0x35, 0x41, 0x22, 0x4D, 0x35, 0x53,  // (B5A"M5S
        /* 0070 */  0x5A, 0x3F, 0x3A, 0x5D, 0x48, 0x52, 0x56, 0x22,  // Z?:]HRV"
        /* 0078 */  0x51, 0x57, 0x4F, 0x2F, 0x20, 0x40, 0x45, 0x49,  // QWO/ @EI
        /* 0080 */  0x2E, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79,  // . - Copy
        /* 0088 */  0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30,  // right 20
        /* 0090 */  0x32, 0x33, 0x20, 0x4E, 0x56, 0x49, 0x44, 0x49,  // 23 NVIDI
        /* 0098 */  0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72,  // A Corpor
        /* 00A0 */  0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x6C,  // ation Al
        /* 00A8 */  0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,  // l Rights
        /* 00B0 */  0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,  //  Reserve
        /* 00B8 */  0x64, 0x2D, 0x37, 0x32, 0x35, 0x31, 0x31, 0x35,  // d-725115
        /* 00C0 */  0x36, 0x36, 0x31, 0x33, 0x33, 0x31, 0x28, 0x52,  // 661331(R
        /* 00C8 */  0x29                                             // )
    })
    Name (VKP2, Buffer (0xC9)
    {
        /* 0000 */  0xD3, 0x97, 0x0F, 0x49, 0x85, 0x52, 0xCD, 0x0E,  // ...I.R..
        /* 0008 */  0x4B, 0x56, 0xC9, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x39, 0x31, 0x34, 0x35, 0x37, 0x32, 0x32, 0x32,  // 91457222
        /* 0018 */  0x37, 0x37, 0x31, 0x36, 0x47, 0x65, 0x6E, 0x75,  // 7716Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x53, 0x4C,  // m for SL
        /* 0050 */  0x54, 0x50, 0x42, 0x56, 0x54, 0x4D, 0x4F, 0x47,  // TPBVTMOG
        /* 0058 */  0x48, 0x4F, 0x46, 0x43, 0x5A, 0x4F, 0x51, 0x4B,  // HOFCZOQK
        /* 0060 */  0x56, 0x55, 0x20, 0x2D, 0x20, 0x53, 0x53, 0x3E,  // VU - SS>
        /* 0068 */  0x2C, 0x5E, 0x31, 0x45, 0x3E, 0x49, 0x31, 0x57,  // ,^1E>I1W
        /* 0070 */  0x56, 0x3B, 0x3E, 0x59, 0x54, 0x52, 0x59, 0x3E,  // V;>YTRY>
        /* 0078 */  0x52, 0x54, 0x3D, 0x56, 0x4D, 0x42, 0x3B, 0x4E,  // RT=VMB;N
        /* 0080 */  0x57, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79,  // W - Copy
        /* 0088 */  0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30,  // right 20
        /* 0090 */  0x32, 0x33, 0x20, 0x4E, 0x56, 0x49, 0x44, 0x49,  // 23 NVIDI
        /* 0098 */  0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72,  // A Corpor
        /* 00A0 */  0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x6C,  // ation Al
        /* 00A8 */  0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,  // l Rights
        /* 00B0 */  0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,  //  Reserve
        /* 00B8 */  0x64, 0x2D, 0x37, 0x32, 0x35, 0x31, 0x31, 0x35,  // d-725115
        /* 00C0 */  0x36, 0x36, 0x31, 0x33, 0x33, 0x31, 0x28, 0x52,  // 661331(R
        /* 00C8 */  0x29                                             // )
    })
    Name (VKP3, Buffer (0xC9)
    {
        /* 0000 */  0xDC, 0x85, 0x6A, 0x6D, 0xB7, 0xF5, 0x92, 0xEA,  // ..jm....
        /* 0008 */  0x4B, 0x56, 0xC9, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x39, 0x31, 0x34, 0x35, 0x37, 0x32, 0x32, 0x32,  // 91457222
        /* 0018 */  0x37, 0x37, 0x31, 0x36, 0x47, 0x65, 0x6E, 0x75,  // 7716Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4E, 0x57,  // m for NW
        /* 0050 */  0x44, 0x48, 0x42, 0x44, 0x5A, 0x4C, 0x49, 0x4F,  // DHBDZLIO
        /* 0058 */  0x47, 0x5A, 0x43, 0x4B, 0x49, 0x41, 0x42, 0x45,  // GZCKIABE
        /* 0060 */  0x58, 0x47, 0x20, 0x2D, 0x20, 0x26, 0x51, 0x46,  // XG - &QF
        /* 0068 */  0x3C, 0x34, 0x53, 0x2E, 0x33, 0x47, 0x38, 0x47,  // <4S.3G8G
        /* 0070 */  0x4D, 0x59, 0x45, 0x2C, 0x52, 0x2D, 0x58, 0x57,  // MYE,R-XW
        /* 0078 */  0x42, 0x3A, 0x4E, 0x22, 0x28, 0x4D, 0x57, 0x2C,  // B:N"(MW,
        /* 0080 */  0x37, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79,  // 7 - Copy
        /* 0088 */  0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30,  // right 20
        /* 0090 */  0x32, 0x33, 0x20, 0x4E, 0x56, 0x49, 0x44, 0x49,  // 23 NVIDI
        /* 0098 */  0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72,  // A Corpor
        /* 00A0 */  0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x6C,  // ation Al
        /* 00A8 */  0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,  // l Rights
        /* 00B0 */  0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,  //  Reserve
        /* 00B8 */  0x64, 0x2D, 0x37, 0x32, 0x35, 0x31, 0x31, 0x35,  // d-725115
        /* 00C0 */  0x36, 0x36, 0x31, 0x33, 0x33, 0x31, 0x28, 0x52,  // 661331(R
        /* 00C8 */  0x29                                             // )
    })
    Name (VKP4, Buffer (0xC9)
    {
        /* 0000 */  0x56, 0xA1, 0x93, 0xE6, 0x90, 0x67, 0x00, 0xE5,  // V....g..
        /* 0008 */  0x4B, 0x56, 0xC9, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x39, 0x31, 0x34, 0x35, 0x37, 0x32, 0x32, 0x32,  // 91457222
        /* 0018 */  0x37, 0x37, 0x31, 0x36, 0x47, 0x65, 0x6E, 0x75,  // 7716Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4F, 0x56,  // m for OV
        /* 0050 */  0x48, 0x55, 0x4D, 0x4F, 0x4B, 0x45, 0x45, 0x59,  // HUMOKEEY
        /* 0058 */  0x55, 0x58, 0x4C, 0x43, 0x57, 0x45, 0x4A, 0x4D,  // UXLCWEJM
        /* 0060 */  0x4F, 0x4A, 0x20, 0x2D, 0x20, 0x25, 0x25, 0x28,  // OJ - %%(
        /* 0068 */  0x5E, 0x2C, 0x42, 0x34, 0x30, 0x5B, 0x42, 0x21,  // ^,B40[B!
        /* 0070 */  0x24, 0x4A, 0x4F, 0x2F, 0x26, 0x32, 0x26, 0x30,  // $JO/&2&0
        /* 0078 */  0x53, 0x24, 0x4F, 0x3A, 0x32, 0x50, 0x43, 0x5E,  // S$O:2PC^
        /* 0080 */  0x5E, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79,  // ^ - Copy
        /* 0088 */  0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30,  // right 20
        /* 0090 */  0x32, 0x33, 0x20, 0x4E, 0x56, 0x49, 0x44, 0x49,  // 23 NVIDI
        /* 0098 */  0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72,  // A Corpor
        /* 00A0 */  0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x6C,  // ation Al
        /* 00A8 */  0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,  // l Rights
        /* 00B0 */  0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,  //  Reserve
        /* 00B8 */  0x64, 0x2D, 0x37, 0x32, 0x35, 0x31, 0x31, 0x35,  // d-725115
        /* 00C0 */  0x36, 0x36, 0x31, 0x33, 0x33, 0x31, 0x28, 0x52,  // 661331(R
        /* 00C8 */  0x29                                             // )
    })
    Name (VKP5, Buffer (0xC9)
    {
        /* 0000 */  0x06, 0xC4, 0x31, 0x67, 0x6B, 0x75, 0xCF, 0x17,  // ..1gku..
        /* 0008 */  0x4B, 0x56, 0xC9, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x39, 0x31, 0x34, 0x35, 0x37, 0x32, 0x32, 0x32,  // 91457222
        /* 0018 */  0x37, 0x37, 0x31, 0x36, 0x47, 0x65, 0x6E, 0x75,  // 7716Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x46, 0x48,  // m for FH
        /* 0050 */  0x5A, 0x4B, 0x4B, 0x50, 0x5A, 0x51, 0x4C, 0x41,  // ZKKPZQLA
        /* 0058 */  0x4E, 0x47, 0x50, 0x44, 0x55, 0x52, 0x4D, 0x48,  // NGPDURMH
        /* 0060 */  0x43, 0x52, 0x20, 0x2D, 0x20, 0x31, 0x30, 0x52,  // CR - 10R
        /* 0068 */  0x41, 0x34, 0x59, 0x52, 0x54, 0x3F, 0x25, 0x42,  // A4YRT?%B
        /* 0070 */  0x44, 0x2A, 0x2E, 0x4A, 0x42, 0x21, 0x2D, 0x29,  // D*.JB!-)
        /* 0078 */  0x58, 0x55, 0x29, 0x5F, 0x57, 0x46, 0x45, 0x4A,  // XU)_WFEJ
        /* 0080 */  0x2E, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79,  // . - Copy
        /* 0088 */  0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30,  // right 20
        /* 0090 */  0x32, 0x33, 0x20, 0x4E, 0x56, 0x49, 0x44, 0x49,  // 23 NVIDI
        /* 0098 */  0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72,  // A Corpor
        /* 00A0 */  0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x6C,  // ation Al
        /* 00A8 */  0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,  // l Rights
        /* 00B0 */  0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,  //  Reserve
        /* 00B8 */  0x64, 0x2D, 0x37, 0x32, 0x35, 0x31, 0x31, 0x35,  // d-725115
        /* 00C0 */  0x36, 0x36, 0x31, 0x33, 0x33, 0x31, 0x28, 0x52,  // 661331(R
        /* 00C8 */  0x29                                             // )
    })
    Name (VKP6, Buffer (0xC9)
    {
        /* 0000 */  0x06, 0x95, 0xE2, 0x0D, 0x2A, 0x59, 0x6A, 0x0A,  // ....*Yj.
        /* 0008 */  0x4B, 0x56, 0xC9, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x39, 0x31, 0x34, 0x35, 0x37, 0x32, 0x32, 0x32,  // 91457222
        /* 0018 */  0x37, 0x37, 0x31, 0x36, 0x47, 0x65, 0x6E, 0x75,  // 7716Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4A, 0x45,  // m for JE
        /* 0050 */  0x56, 0x4D, 0x44, 0x4D, 0x53, 0x47, 0x44, 0x48,  // VMDMSGDH
        /* 0058 */  0x46, 0x47, 0x45, 0x4E, 0x56, 0x42, 0x45, 0x47,  // FGENVBEG
        /* 0060 */  0x53, 0x41, 0x20, 0x2D, 0x20, 0x35, 0x3D, 0x28,  // SA - 5=(
        /* 0068 */  0x26, 0x5C, 0x2B, 0x57, 0x58, 0x2A, 0x5B, 0x22,  // &\+WX*["
        /* 0070 */  0x53, 0x38, 0x25, 0x4E, 0x30, 0x33, 0x3E, 0x32,  // S8%N03>2
        /* 0078 */  0x59, 0x53, 0x53, 0x5F, 0x56, 0x22, 0x25, 0x5E,  // YSS_V"%^
        /* 0080 */  0x5B, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79,  // [ - Copy
        /* 0088 */  0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30,  // right 20
        /* 0090 */  0x32, 0x33, 0x20, 0x4E, 0x56, 0x49, 0x44, 0x49,  // 23 NVIDI
        /* 0098 */  0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72,  // A Corpor
        /* 00A0 */  0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41, 0x6C,  // ation Al
        /* 00A8 */  0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,  // l Rights
        /* 00B0 */  0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,  //  Reserve
        /* 00B8 */  0x64, 0x2D, 0x37, 0x32, 0x35, 0x31, 0x31, 0x35,  // d-725115
        /* 00C0 */  0x36, 0x36, 0x31, 0x33, 0x33, 0x31, 0x28, 0x52,  // 661331(R
        /* 00C8 */  0x29                                             // )
    })
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : F3
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : 96C61000
[028h 0040 004h]                DSDT Address : 94C5E000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 000000B4
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0002
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0023C5B5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 1
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : BE
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 04
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 0000000094C5E000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 00000000000000B4

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 F3 5F 41 53 55 53 5F  // FACP......_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 10 C6 96 00 E0 C5 94 00 02 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 02 00 00  // e...........2...
    0070: B5 C5 23 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ..#.............
    0080: BE 00 00 04 00 00 00 00 00 00 00 00 00 E0 C5 94  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 9CFD78C9
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 C9 78 FD 9C 00 00 00 00  // FACS@....x......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 6F
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 6F 5F 41 53 55 53 5F  // FIDT.....o_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 33 43 4E 5A 4F  // ....$FID.x.3CNZO
    0030: 30 31 35 00 9F 36 7C 27 86 0E 00 9D 77 F5 5E 5A  // 015..6|'....w.^Z
    0040: DE C8 AF 9F 30 35 00 32 39 00 30 30 00 31 35 00  // ....05.29.00.15.
    0050: E8 07 03 1B 10 16 1D FF FF 5F 41 53 55 53 5F 4E  // ........._ASUS_N
    0060: 6F 74 65 62 6F 6F 6B 31 00 00 00 FF FF FF FF FF  // otebook1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : A8
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 0000000094B62000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 0000000094B7A000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 A8 5F 41 53 55 53 5F  // FPDTD....._ASUS_
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 20 B6 94  // ............. ..
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 A0 B7 94  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 46
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000005

[024h 0036 004h]           Hardware Block ID : 10228201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 46 5F 41 53 55 53 5F  // HPET8....F_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001A4
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : CA
[00Ah 0010 006h]                      Oem ID : "AMD  "
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]         Virtualization Info : 00203043
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FD400000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0003
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 20
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 21
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000FD400000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 246577EFA2254AFA
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0003
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A5
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 20
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 21
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

[0D0h 0208 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210 002h]                      Length : 00D4
[0D4h 0212 002h]                    DeviceId : 0002
[0D6h 0214 002h]           Capability Offset : 0040
[0D8h 0216 008h]                Base Address : 00000000FD400000
[0E0h 0224 002h]           PCI Segment Group : 0000
[0E2h 0226 002h]         Virtualization Info : 0000
[0E4h 0228 004h]                  Attributes : 00040200
[0E8h 0232 008h]                   EFR Image : 246577EFA2254AFA
[0F0h 0240 008h]                    Reserved : 0000000000000000

[0F8h 0248 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249 002h]                   Device ID : 0003
[0FBh 0251 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253 002h]                   Device ID : FFFE
[0FFh 0255 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257 002h]                   Device ID : FF00
[103h 0259 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260 001h]                    Reserved : 00
[105h 0261 002h]       Source Used Device ID : 00A5
[107h 0263 001h]                    Reserved : 00

[108h 0264 001h]               Subtable Type : 04 [Device Entry: End of Range]
[109h 0265 002h]                   Device ID : FFFF
[10Bh 0267 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269 002h]                   Device ID : 0000
[10Fh 0271 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272 001h]               Subtable Type : 48 [Device Entry: Special Device]
[111h 0273 002h]                   Device ID : 0000
[113h 0275 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276 001h]                      Handle : 00
[115h 0277 002h]       Source Used Device ID : 00A0
[117h 0279 001h]                     Variety : 02

[118h 0280 001h]               Subtable Type : 48 [Device Entry: Special Device]
[119h 0281 002h]                   Device ID : 0000
[11Bh 0283 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284 001h]                      Handle : 20
[11Dh 0285 002h]       Source Used Device ID : 00A0
[11Fh 0287 001h]                     Variety : 01

[120h 0288 001h]               Subtable Type : 48 [Device Entry: Special Device]
[121h 0289 002h]                   Device ID : 0000
[123h 0291 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292 001h]                      Handle : 21
[125h 0293 002h]       Source Used Device ID : 0001
[127h 0295 001h]                     Variety : 01

[128h 0296 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297 002h]                   Device ID : 00A5
[12Bh 0299 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300 008h]                    ACPI HID : "AMDI0020"
[134h 0308 008h]                    ACPI CID : 0000000000000000
[13Ch 0316 001h]                  UID Format : 02
[13Dh 0317 001h]                  UID Length : 09
[13Eh 0318 009h]                         UID : "\_SB.FUR0"

[147h 0327 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328 002h]                   Device ID : 00A5
[14Ah 0330 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331 008h]                    ACPI HID : "AMDI0020"
[153h 0339 008h]                    ACPI CID : 0000000000000000
[15Bh 0347 001h]                  UID Format : 02
[15Ch 0348 001h]                  UID Length : 09
[15Dh 0349 009h]                         UID : "\_SB.FUR1"

[166h 0358 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359 002h]                   Device ID : 00A5
[169h 0361 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362 008h]                    ACPI HID : "AMDI0020"
[172h 0370 008h]                    ACPI CID : 0000000000000000
[17Ah 0378 001h]                  UID Format : 02
[17Bh 0379 001h]                  UID Length : 09
[17Ch 0380 009h]                         UID : "\_SB.FUR2"

[185h 0389 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390 002h]                   Device ID : 00A5
[188h 0392 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393 008h]                    ACPI HID : "AMDI0020"
[191h 0401 008h]                    ACPI CID : 0000000000000000
[199h 0409 001h]                  UID Format : 02
[19Ah 0410 001h]                  UID Length : 09
[19Bh 0411 009h]                         UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 CA 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 40 FD 00 00 00 00  // ..H...@...@.....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 40 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..@.............
    0090: FA 4A 25 A2 EF 77 65 24 00 00 00 00 00 00 00 00  // .J%..we$........
    00A0: 03 03 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 40 FD 00 00 00 00  // @.....@...@.....
    00E0: 00 00 00 00 00 02 04 00 FA 4A 25 A2 EF 77 65 24  // .........J%..we$
    00F0: 00 00 00 00 00 00 00 00 03 03 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0120: 48 00 00 00 21 01 00 01 F0 A5 00 40 41 4D 44 49  // H...!......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 7D
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 7F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 7D 5F 41 53 55 53 5F  // MCFG<....}_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  // Notebook. ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 33
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "ASUS"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 33 5F 41 53 55 53 5F /* MSDMU....3_ASUS_ */\
/* 034h 0052  16 */                            4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 53 55 53 /* Notebook. ..ASUS */\
/* 044h 0068  16 */                            01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 33 5F 41 53 55 53 5F  // MSDMU....3_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 53 55 53  // Notebook. ..ASUS
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 34 50 4A 4E 54 2D 4B 58  // ........4PJNT-KX
    0040: 38 39 4D 2D 47 43 37 37 54 2D 38 4A 32 44 52 2D  // 89M-GC77T-8J2DR-
    0050: 54 56 4A 34 39                                   // TVJ49


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "OptRf2", "Opt2Tabl", 0x00001000)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0._ADR, IntObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.SBRG.ACIN, FieldUnitObj)
    External (_SB_.PCI0.SBRG.DBCP, FieldUnitObj)
    External (_SB_.PCI0.SBRG.ECA4, FieldUnitObj)
    External (_SB_.PCI0.SBRG.GC6S, FieldUnitObj)
    External (_SB_.PCI0.SBRG.IVGA, FieldUnitObj)
    External (_SB_.PCI0.SBRG.MSIN, FieldUnitObj)
    External (_SB_.PCI0.SBRG.NEDP, FieldUnitObj)
    External (_SB_.PCI0.SBRG.PWEN, FieldUnitObj)
    External (_SB_.PCI0.SBRG.PWOK, FieldUnitObj)
    External (_SB_.PCI0.SBRG.RCPU, IntObj)
    External (_SB_.PCI0.SBRG.RDNT, IntObj)
    External (_SB_.PCI0.SBRG.REST, FieldUnitObj)
    External (_SB_.PCI0.SBRG.RVGA, IntObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)
    External (CUMA, IntObj)
    External (DRP1, UnknownObj)
    External (DRP2, UnknownObj)
    External (DRP3, UnknownObj)
    External (DRP4, UnknownObj)
    External (DRP5, UnknownObj)
    External (DRP6, UnknownObj)
    External (IOB2, UnknownObj)
    External (IOBS, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M027, MethodObj)    // 3 Arguments
    External (M028, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M402, MethodObj)    // 3 Arguments
    External (M403, MethodObj)    // 4 Arguments
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (PANL, UnknownObj)
    External (PEBS, BuffFieldObj)
    External (PWEN, UnknownObj)
    External (PWOK, UnknownObj)
    External (REST, UnknownObj)
    External (VKP1, UnknownObj)
    External (VKP2, UnknownObj)
    External (VKP3, UnknownObj)
    External (VKP4, UnknownObj)
    External (VKP5, UnknownObj)
    External (VKP6, UnknownObj)

    Name (TOPT, 0x02)
    OperationRegion (TPNV, SystemMemory, 0x9650B000, 0x004D)
    Field (TPNV, AnyAcc, Lock, Preserve)
    {
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        EBAS,   32, 
        DGVS,   32, 
        DGVB,   32, 
        HYSS,   32, 
        NVAF,   8, 
        DEID,   16, 
        DPMF,   8, 
        SDMF,   8, 
        SGFL,   8, 
        NVGA,   32, 
        NVHA,   32, 
        TCNT,   8, 
        CMPL,   8, 
        CNPL,   8, 
        CNLL,   8, 
        CLPL,   8, 
        KFAX,   8, 
        PTOF,   8, 
        TM00,   8, 
        TM01,   8, 
        TM02,   8, 
        TM03,   8, 
        TM04,   32
    }

    Method (TPV0, 0, Serialized)
    {
        M402 (Zero, One, One)
    }

    Method (TPV1, 0, Serialized)
    {
        M403 (Zero, One, One, One)
    }

    Method (TPV2, 0, Serialized)
    {
        M403 (Zero, One, One, Zero)
    }

    Scope (\_SB.PCI0.GPP0)
    {
        Method (BPGN, 0, Serialized)
        {
        }

        Method (APGN, 0, Serialized)
        {
        }

        Method (BPGF, 0, Serialized)
        {
        }

        Method (APGF, 0, Serialized)
        {
        }
    }

    Scope (\_SB)
    {
        Name (WOSR, Zero)
        Method (WAT1, 0, Serialized)
        {
            Local0 = Zero
            While ((WOSR == One))
            {
                Sleep (0x64)
                Local0 = (One + Local0)
                If ((Local0 == 0x01F4))
                {
                    WOSR = Zero
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (WAT2, 0, Serialized)
        {
            Local0 = M019 (One, Zero, Zero, Zero)
            Local1 = Zero
            While ((Local0 == Ones))
            {
                Sleep (0x64)
                Local0 = M019 (One, Zero, Zero, Zero)
                Local1 = (One + Local1)
                If ((Local1 == 0x01F4))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PCI0.GPP0)
    {
        Device (PEGP)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((\_SB.PCI0.SBRG.IVGA == Zero) || (\_SB.PCI0.SBRG.NEDP == One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            If ((\_SB.PCI0.SBRG.NEDP == Zero))
            {
                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    \_SB.PCI0.GPP0.SGPC (Zero)
                    WOSR = Zero
                    GPST = One
                    Local0 = M249 (Zero, Zero, Zero, 0x13B31004)
                    M250 (Zero, Zero, Zero, 0x13B31004, (Local0 | One))
                }
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        Device (NHDA)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((M097 != Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x06)
            {
                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                Package (0x00){}, 
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        CreateBitField (OPTS, 0x0A, FUNA)
                        CreateBitField (OPTS, 0x0B, FUNB)
                        If ((Arg1 >= 0x04))
                        {
                            FUNA = One
                            FUNB = One
                        }

                        Return (OPTS) /* \_SB_.PCI0.GPP0._DSM.OPTS */
                    }
                    Case (0x0A)
                    {
                        Return (One)
                    }
                    Case (0x0B)
                    {
                        Local0 = ToInteger (Arg3)
                        Return (Local0)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
        }

        Name (GPST, Zero)
        Method (WAK4, 1, NotSerialized)
        {
            If (((CUMA == One) || (\_SB.PCI0.SBRG.IVGA == One)))
            {
                \_SB.PCI0.SBRG.REST = Zero
                Sleep (0x05)
                \_SB.PCI0.SBRG.PWEN = One
            }
        }

        Method (PON, 0, NotSerialized)
        {
            M010 (REST, Zero)
            Sleep (One)
            M010 (PWEN, Zero)
            Local0 = 0x20
            While (Local0)
            {
                If ((M009 (PWOK) == One))
                {
                    Break
                }

                Sleep (One)
                Local0--
            }

            Sleep (One)
            M010 (REST, One)
            Sleep (0x32)
        }

        Method (L23D, 1, Serialized)
        {
            Local1 = TM02 /* \TM02 */
            If ((Local1 == Zero))
            {
                Local1 = 0x0A
            }

            Sleep (Local1)
            \_SB.ALIB (0x13, 0x09)
            Sleep (0x32)
            If ((Arg0 == Zero))
            {
                Local0 = Zero
                While (((M017 (Zero, One, One, 0x6A, Zero, 0x04) < 0x04) || 
                    (M017 (Zero, One, One, 0x6A, 0x0D, One) != One)))
                {
                    If ((Local0 > 0x13BB))
                    {
                        Break
                    }

                    Stall (0x63)
                    Local0++
                }

                Local0 = Zero
                Local1 = (M249 (Zero, Zero, Zero, 0x11140294) & 0x3F)
                While ((Local1 != 0x10))
                {
                    If ((Local0 > 0x13BB))
                    {
                        Break
                    }

                    Stall (0x63)
                    Local1 = (M249 (Zero, Zero, Zero, 0x11140294) & 0x3F)
                    M000 (Local1)
                    Local0++
                }
            }
            Else
            {
                Sleep (0x32)
                Local1 = Zero
                Local2 = 0x13BB
                Local3 = (M249 (Zero, Zero, Zero, 0x11140294) & 0x3F)
                While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
                {
                    Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                    Local2 = (Local2 - One)
                    M000 (Local3)
                    Sleep (0x63)
                }
            }

            TPV2 ()
            Local1 = TM03 /* \TM03 */
            If ((Local1 == Zero))
            {
                Local1 = 0x64
            }

            Sleep (Local1)
        }

        Method (POFF, 0, NotSerialized)
        {
            M010 (REST, Zero)
            Sleep (One)
            M010 (PWEN, One)
            Sleep (0x64)
        }

        Method (DL23, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                TPV0 ()
            }

            Local1 = TM04 /* \TM04 */
            If ((Local1 == Zero))
            {
                Local1 = 0x0A
            }

            Sleep (Local1)
        }

        OperationRegion (RPCX, SystemMemory, ((\PEBS + (((\_SB.PCI0.GPP0._ADR & 0x00FF0000) >> 0x10) << 
            0x0F)) + ((\_SB.PCI0.GPP0._ADR & 0xFF) << 0x0C)), 0x1000)
        Field (RPCX, DWordAcc, NoLock, Preserve)
        {
            RVID,   32, 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x54), 
            D0ST,   2, 
            Offset (0x62), 
            CEDR,   1, 
            Offset (0x68), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0x80), 
            Offset (0x81), 
                ,   2, 
            LREN,   1
        }

        Method (GSTA, 0, NotSerialized)
        {
            If ((M009 (PWOK) == Zero))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        Method (SGPC, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                \_SB.PCI0.GPP0.BPGN ()
                \_SB.PCI0.GPP0.PON ()
                \_SB.PCI0.GPP0.L23D (Zero)
                \_SB.PCI0.GPP0.CMDR |= 0x07
                \_SB.PCI0.GPP0.D0ST = Zero
                If ((CUMA != One))
                {
                    While ((\_SB.PCI0.GPP0.PEGP.NVID != 0x10DE))
                    {
                        Sleep (One)
                    }
                }

                \_SB.PCI0.GPP0.LREN = \_SB.PCI0.GPP0.PEGP.LTRE
                \_SB.PCI0.GPP0.CEDR = One
                \_SB.PCI0.GPP0.PEGP.SSSV = HYSS /* \HYSS */
                \_SB.PCI0.GPP0.APGN ()
            }
            Else
            {
                \_SB.PCI0.GPP0.BPGF ()
                \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
                Sleep (0x18)
                Local1 = M019 (Zero, One, One, 0x54)
                M020 (Zero, One, One, 0x54, (Local1 & 0xFFFF7FFC))
                Sleep (One)
                Local2 = M017 (Zero, One, One, 0x19, Zero, 0x08)
                M028 (Local2, Zero, Zero, Zero)
                Local3 = M027 (Local2, Zero, Zero)
                M020 (Zero, One, One, 0x54, (Local1 & 0xFFFF7FFF))
                \_SB.PCI0.GPP0.DL23 (One)
                Local2 = M017 (Zero, One, One, 0x70, Zero, 0x10)
                M018 (Zero, One, One, 0x70, Zero, 0x10, (Local2 & 0xEFD7))
                \_SB.ALIB (0x12, 0x09)
                \_SB.PCI0.GPP0.POFF ()
                Sleep (0x1E)
                M018 (Zero, One, One, 0x70, Zero, 0x10, Local2)
                M023 (Zero, One, One)
                \_SB.PCI0.GPP0.APGF ()
            }
        }

        PowerResource (PG00, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((RVID == Ones))
                {
                    Return (Zero)
                }

                Return (GSTA ())
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If (((CUMA == One) || (\_SB.PCI0.SBRG.IVGA == One)))
                {
                    Return (Zero)
                }

                M023 (Zero, One, One)
                If ((GSTA () != Zero))
                {
                    Return (Zero)
                }

                Local4 = M453 /* External reference */
                M453 = Zero
                If ((\_SB.PCI0.GPP0.TDGC == One))
                {
                    If ((\_SB.PCI0.GPP0.DGCX == 0x03))
                    {
                        \_SB.PCI0.GPP0.PEGP.GC6O ()
                    }
                    ElseIf ((\_SB.PCI0.GPP0.DGCX == 0x04))
                    {
                        \_SB.PCI0.GPP0.PEGP.GC6O ()
                    }

                    \_SB.PCI0.GPP0.TDGC = Zero
                    \_SB.PCI0.GPP0.DGCX = Zero
                }
                Else
                {
                    \_SB.PCI0.GPP0.SGPC (One)
                }

                M453 = Local4
                If ((GPST == 0x02))
                {
                    GPST = Zero
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((GSTA () != One))
                {
                    Return (Zero)
                }

                Local4 = M453 /* External reference */
                M453 = Zero
                If ((\_SB.PCI0.GPP0.TDGC == One))
                {
                    CreateField (\_SB.PCI0.GPP0.TGPC, Zero, 0x03, GPPC)
                    If ((ToInteger (GPPC) == One))
                    {
                        \_SB.PCI0.GPP0.PEGP.GC6I ()
                    }
                    ElseIf ((ToInteger (GPPC) == 0x02))
                    {
                        \_SB.PCI0.GPP0.PEGP.GC6I ()
                    }
                }
                Else
                {
                    \_SB.PCI0.GPP0.SGPC (Zero)
                    Sleep (0x64)
                }

                M453 = Local4
                If ((GPST == One))
                {
                    GPST = 0x02
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PG00
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PG00
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PG00
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x04)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (PCIM, SystemMemory, EBAS, 0x0500)
        Field (PCIM, DWordAcc, Lock, Preserve)
        {
            NVID,   16, 
            NDID,   16, 
            CMDR,   8, 
            VGAR,   2008, 
            Offset (0x48B), 
                ,   1, 
            HDAE,   1
        }

        OperationRegion (MSID, SystemMemory, EBAS, 0x0500)
        Field (MSID, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
            SSSV,   32
        }

        Name (VGAB, Buffer (0xFA)
        {
             0x00                                             // .
        })
        Name (GPRF, Zero)
        Name (LTRE, Zero)
        Name (OMPR, 0x02)
        Name (DGPS, Zero)
        OperationRegion (NVHM, SystemMemory, NVHA, 0x00030400)
        Field (NVHM, DWordAcc, NoLock, Preserve)
        {
            NVSG,   128, 
            NVSZ,   32, 
            NVVR,   32, 
            NVHO,   32, 
            RVBS,   32, 
            RBF1,   262144, 
            RBF2,   262144, 
            RBF3,   262144, 
            RBF4,   262144, 
            RBF5,   262144, 
            RBF6,   262144, 
            MXML,   32, 
            MXM3,   1600
        }

        Method (SGST, 0, Serialized)
        {
            If ((NVID != 0xFFFF))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (_PSC, Zero)  // _PSC: Power State Current
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            _PSC = Zero
            If ((DGPS != Zero))
            {
                \_SB.PCI0.GPP0.PG00._ON ()
                If ((GPRF != One))
                {
                    VGAR = VGAB /* \_SB_.PCI0.GPP0.PEGP.VGAB */
                }

                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OMPR == 0x03))
            {
                If ((GPRF != One))
                {
                    VGAB = VGAR /* \_SB_.PCI0.GPP0.PEGP.VGAR */
                }

                \_SB.PCI0.GPP0.PG00._OFF ()
                DGPS = One
                OMPR = 0x02
            }

            _PSC = 0x03
        }

        Method (NBCI, 4, Serialized)
        {
            Debug = "<<< NBCI >>>"
            If ((Arg1 != 0x0102))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x11, 0x00                           // ....
                    })
                }
                Case (0x10)
                {
                    CreateWordField (Arg3, 0x02, USRG)
                    If ((USRG == 0x4452))
                    {
                        Debug = "Get DR key"
                        Switch (PANL)
                        {
                            Case (One)
                            {
                                Return (DRP1) /* External reference */
                            }
                            Case (0x02)
                            {
                                Return (DRP2) /* External reference */
                            }
                            Case (0x03)
                            {
                                Return (DRP3) /* External reference */
                            }
                            Case (0x04)
                            {
                                Return (DRP4) /* External reference */
                            }
                            Case (0x05)
                            {
                                Return (DRP5) /* External reference */
                            }
                            Case (0x06)
                            {
                                Return (DRP6) /* External reference */
                            }

                        }
                    }

                    If ((USRG == 0x564B))
                    {
                        Debug = "Get VK key"
                        Switch (PANL)
                        {
                            Case (One)
                            {
                                Return (VKP1) /* External reference */
                            }
                            Case (0x02)
                            {
                                Return (VKP2) /* External reference */
                            }
                            Case (0x03)
                            {
                                Return (VKP3) /* External reference */
                            }
                            Case (0x04)
                            {
                                Return (VKP4) /* External reference */
                            }
                            Case (0x05)
                            {
                                Return (VKP5) /* External reference */
                            }
                            Case (0x06)
                            {
                                Return (VKP6) /* External reference */
                            }

                        }
                    }

                    Return (0x80000002)
                }
                Case (0x14)
                {
                    Return (Package (0x20)
                    {
                        0x8000A450, 
                        0x0200, 
                        Zero, 
                        Zero, 
                        0x05, 
                        One, 
                        0xC8, 
                        0x32, 
                        0x03E8, 
                        0x0B, 
                        0x32, 
                        0x64, 
                        0x96, 
                        0xC8, 
                        0x012C, 
                        0x0190, 
                        0x01FE, 
                        0x0276, 
                        0x02F8, 
                        0x0366, 
                        0x03E8, 
                        Zero, 
                        0x64, 
                        0xC8, 
                        0x012C, 
                        0x0190, 
                        0x01F4, 
                        0x0258, 
                        0x02BC, 
                        0x0320, 
                        0x0384, 
                        0x03E8
                    })
                }

            }

            Return (0x80000002)
        }

        Method (NVOP, 4, Serialized)
        {
            Debug = "<<< NVOP >>>"
            If ((Arg1 != 0x0100))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x00, 0x0C                           // ....
                    })
                }
                Case (0x1A)
                {
                    CreateField (Arg3, Zero, One, FLCH)
                    CreateField (Arg3, One, One, DVSR)
                    CreateField (Arg3, 0x02, One, DVSC)
                    CreateField (Arg3, 0x18, 0x02, OPCE)
                    If ((ToInteger (FLCH) & (ToInteger (OPCE) != OMPR)))
                    {
                        \_SB.PCI0.GPP0.PEGP.OMPR = OPCE /* \_SB_.PCI0.GPP0.PEGP.NVOP.OPCE */
                    }

                    Local0 = Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    CreateField (Local0, Zero, One, OPEN)
                    CreateField (Local0, 0x03, 0x02, CGCS)
                    CreateField (Local0, 0x06, One, SHPC)
                    CreateField (Local0, 0x08, One, SNSR)
                    CreateField (Local0, 0x18, 0x03, DGPC)
                    CreateField (Local0, 0x1B, 0x02, OHAC)
                    OPEN = One
                    SHPC = One
                    DGPC = One
                    OHAC = 0x03
                    If (ToInteger (DVSC))
                    {
                        If (ToInteger (DVSR))
                        {
                            GPRF = One
                        }
                        Else
                        {
                            GPRF = Zero
                        }
                    }

                    SNSR = GPRF /* \_SB_.PCI0.GPP0.PEGP.GPRF */
                    If ((DGPS == Zero))
                    {
                        CGCS = 0x03
                    }
                    Else
                    {
                        CGCS = Zero
                    }

                    Return (Local0)
                }
                Case (0x1B)
                {
                    Name (BUFF, Zero)
                    CreateField (Arg3, Zero, One, OACC)
                    CreateField (Arg3, One, One, UOAC)
                    CreateField (Arg3, 0x02, 0x08, OPDA)
                    CreateField (Arg3, 0x0A, One, OPDE)
                    Local1 = Zero
                    Local1 = \_SB.PCI0.GPP0.PEGP.HDAE
                    Return (Local1)
                }

            }

            Return (0x80000002)
        }

        Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
        {
            Local0 = Arg0
            Local1 = Arg1
            If ((Local1 > 0x1000))
            {
                Local1 = 0x1000
            }

            If ((Local0 > 0x00030000))
            {
                Return (Buffer (Local1)
                {
                     0x00                                             // .
                })
            }

            Local3 = (Local1 * 0x08)
            Name (ROM1, Buffer (0x8000)
            {
                 0x00                                             // .
            })
            Name (ROM2, Buffer (Local1)
            {
                 0x00                                             // .
            })
            If ((Local0 < 0x8000))
            {
                ROM1 = RBF1 /* \_SB_.PCI0.GPP0.PEGP.RBF1 */
            }
            ElseIf ((Local0 < 0x00010000))
            {
                Local0 -= 0x8000
                ROM1 = RBF2 /* \_SB_.PCI0.GPP0.PEGP.RBF2 */
            }
            ElseIf ((Local0 < 0x00018000))
            {
                Local0 -= 0x00010000
                ROM1 = RBF3 /* \_SB_.PCI0.GPP0.PEGP.RBF3 */
            }
            ElseIf ((Local0 < 0x00020000))
            {
                Local0 -= 0x00018000
                ROM1 = RBF4 /* \_SB_.PCI0.GPP0.PEGP.RBF4 */
            }
            ElseIf ((Local0 < 0x00028000))
            {
                Local0 -= 0x00020000
                ROM1 = RBF5 /* \_SB_.PCI0.GPP0.PEGP.RBF5 */
            }
            ElseIf ((Local0 < 0x00030000))
            {
                Local0 -= 0x00028000
                ROM1 = RBF6 /* \_SB_.PCI0.GPP0.PEGP.RBF6 */
            }

            Local2 = (Local0 * 0x08)
            CreateField (ROM1, Local2, Local3, TMPB)
            ROM2 = TMPB /* \_SB_.PCI0.GPP0.PEGP._ROM.TMPB */
            Return (ROM2) /* \_SB_.PCI0.GPP0.PEGP._ROM.ROM2 */
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            CreateByteField (Arg0, 0x03, GUID)
            If ((Arg0 == ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NBCI (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.GPS (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVOP (Arg0, Arg1, Arg2, Arg3))
            }

            Return (0x80000001)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (GC6I, 0, Serialized)
        {
            Debug = "<<< GC6I >>>"
            \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
            \_SB.PCI0.GPP0.DL23 (One)
            Sleep (0x0A)
            Local2 = M017 (Zero, One, One, 0x70, Zero, 0x10)
            M018 (Zero, One, One, 0x70, Zero, 0x10, (Local2 & 0xEFD7))
            \_SB.ALIB (0x12, 0x09)
            Sleep (0x1E)
            M010 (REST, Zero)
            M018 (Zero, One, One, 0x70, Zero, 0x10, Local2)
            M023 (Zero, One, One)
        }

        Method (GC6O, 0, Serialized)
        {
            Debug = "<<< GC6O >>>"
            M010 (REST, One)
            Sleep (0x0A)
            \_SB.PCI0.GPP0.L23D (One)
            \_SB.PCI0.GPP0.CMDR |= 0x04
            \_SB.PCI0.GPP0.D0ST = Zero
            While ((\_SB.PCI0.GPP0.PEGP.NVID != 0x10DE))
            {
                Sleep (One)
            }

            \_SB.PCI0.GPP0.LREN = \_SB.PCI0.GPP0.PEGP.LTRE
            \_SB.PCI0.GPP0.CEDR = One
        }

        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((Arg1 < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "JT fun0 JT_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x1B, 0x00, 0x00, 0x00                           // ....
                    })
                }
                Case (One)
                {
                    Debug = "JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    RPCL = One
                    SREN = One
                    FBPR = Zero
                    MHYB = One
                    GC6V = 0x02
                    JTRV = 0x0200
                    Return (JTCA) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GPPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    \_SB.PCI0.GPP0.TGPC = Arg3
                    If (((ToInteger (GPPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        TDGC = ToInteger (DFGC)
                        DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                    }

                    If ((ToInteger (GPPC) == One))
                    {
                        GC6I ()
                        PLST = One
                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x02))
                    {
                        GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x03))
                    {
                        GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GPPC) == 0x04))
                    {
                        GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((M009 (0x28) == One))
                    {
                        Debug = "   JT GETS() return 0x1"
                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "   JT GETS() return 0x3"
                        GPWO = Zero
                        GUPS = 0x03
                    }

                    Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "   JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    CreateField (Arg3, 0x04, 0x04, PDGS)
                    Local0 = Zero
                    Local0 = (\_SB.PCI0.GPP0.PEGP.HDAE << 0x02)
                    Return (Local0)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (NLIM, Zero)
        Name (PSLS, Zero)
        Name (CTGP, Zero)
        Name (MGPU, 0x57)
        Name (GPSP, Buffer (0x28){})
        CreateDWordField (GPSP, Zero, RETN)
        CreateDWordField (GPSP, 0x04, VRV1)
        CreateDWordField (GPSP, 0x08, TGPU)
        CreateDWordField (GPSP, 0x0C, PDTS)
        CreateDWordField (GPSP, 0x10, SFAN)
        CreateDWordField (GPSP, 0x14, SKNT)
        CreateDWordField (GPSP, 0x18, CPUE)
        CreateDWordField (GPSP, 0x1C, TMP1)
        CreateDWordField (GPSP, 0x20, TMP2)
        Method (GPS, 4, Serialized)
        {
            Debug = "------- NV GPS DSM --------"
            If ((Arg1 != 0x0200))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "GPS fun 0"
                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x08, 0x00, 0x01, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x13)
                {
                    Debug = "   GPS fun 19"
                    CreateDWordField (Arg3, Zero, TEMP)
                    If ((TEMP == Zero))
                    {
                        Return (0x04)
                    }

                    Local1 = (TEMP & 0xFF)
                    Local1 >>= 0x04
                    \_SB.PCI0.SBRG.RDNT = (Local1 + 0xD1)
                    If ((TEMP && 0x04))
                    {
                        Return (0x04)
                    }
                }
                Case (0x20)
                {
                    Debug = "   GPS fun 32"
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x02, SPBI)
                    If (NLIM)
                    {
                        RET1 |= One
                    }

                    If (PSLS)
                    {
                        RET1 |= 0x02
                    }

                    If (CTGP)
                    {
                        RET1 |= 0x00400000
                    }

                    Return (RET1) /* \_SB_.PCI0.GPP0.PEGP.GPS_.RET1 */
                }
                Case (0x2A)
                {
                    Debug = "   GPS fun 42"
                    CreateField (Arg3, Zero, 0x04, PSH0)
                    CreateBitField (Arg3, 0x08, GPUT)
                    VRV1 = 0x00010000
                    Switch (ToInteger (PSH0))
                    {
                        Case (Zero)
                        {
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (One)
                        {
                            RETN = 0x0100
                            RETN |= ToInteger (PSH0)
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            TGPU = MGPU /* \_SB_.PCI0.GPP0.PEGP.MGPU */
                            NLIM = Zero
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }

                    }

                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB)
    {
        Device (NPCF)
        {
            Name (ACBT, 0xC8)
            Name (AVRT, Zero)
            Name (DCBT, Zero)
            Name (DBAC, Zero)
            Name (DBDC, One)
            Name (AMAT, 0x78)
            Name (AMIT, 0xFFB0)
            Name (ATPP, 0x0118)
            Name (DTPP, Zero)
            Name (TPPL, Zero)
            Name (DROS, Zero)
            Name (WM2C, Zero)
            Name (HPCT, 0x02)
            Name (CDIS, Zero)
            Name (CUSL, Zero)
            Name (CUCT, Zero)
            Name (CTDI, Zero)
            Name (GTDI, Zero)
            Name (AVGF, Zero)
            Name (AVGI, Zero)
            Name (AVG0, Zero)
            Name (AVG1, Zero)
            Name (AVG2, Zero)
            Name (AVG3, Zero)
            Name (AVG4, Zero)
            Method (GMIN, 2, Serialized)
            {
                If ((Arg0 > Arg1))
                {
                    Return (Arg1)
                }
                Else
                {
                    Return (Arg0)
                }
            }

            Method (GMAX, 2, Serialized)
            {
                If ((Arg0 > Arg1))
                {
                    Return (Arg0)
                }
                Else
                {
                    Return (Arg1)
                }
            }

            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                CDIS = Zero
                Return ("NVDA0820")
            }

            Name (_UID, "NPCF")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CDIS == One))
                {
                    Return (0x0D)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                CDIS = One
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("36b49710-2483-11e7-9598-0800200c9a66") /* Unknown UUID */))
                {
                    Return (NPCF (Arg0, Arg1, Arg2, Arg3))
                }
            }

            Method (NTCU, 0, Serialized)
            {
                Switch (ToInteger (TCNT))
                {
                    Case (0x20)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C014, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C015, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C016, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C017, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C018, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C019, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C01A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C01B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C01C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C01D, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C01E, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C01F, 0x85) // Device-Specific
                    }
                    Case (0x18)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C014, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C015, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C016, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C017, 0x85) // Device-Specific
                    }
                    Case (0x14)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
                    }
                    Case (0x12)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
                    }
                    Case (0x10)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
                    }
                    Case (0x0E)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
                    }
                    Case (0x0C)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
                    }
                    Case (0x0A)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
                    }
                    Case (0x08)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
                    }
                    Case (0x07)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
                    }
                    Case (0x06)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
                    }
                    Case (0x05)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
                    }
                    Case (0x04)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
                    }
                    Case (0x03)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
                    }
                    Case (0x02)
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
                    }
                    Default
                    {
                        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
                    }

                }
            }

            Method (NPCF, 4, Serialized)
            {
                Debug = "------- NVPCF DSM --------"
                If ((ToInteger (Arg1) != 0x0200))
                {
                    Return (0x80000001)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Debug = "   NVPCF sub-func#0"
                        Return (Buffer (0x04)
                        {
                             0x87, 0x03, 0x00, 0x00                           // ....
                        })
                    }
                    Case (One)
                    {
                        Debug = "   NVPCF sub-func#1"
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x20, 0x03, 0x01, 0x01, 0x23, 0x04, 0x05, 0x01,  //  ...#...
                            /* 0008 */  0x01, 0x01, 0x00, 0x00, 0x00, 0xAC               // ......
                        })
                    }
                    Case (0x02)
                    {
                        Debug = "   NVPCF sub-func#2"
                        Name (PBD2, Buffer (0x31)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD2, Zero, PTV2)
                        CreateByteField (PBD2, One, PHB2)
                        CreateByteField (PBD2, 0x02, GSB2)
                        CreateByteField (PBD2, 0x03, CTB2)
                        CreateByteField (PBD2, 0x04, NCE2)
                        PTV2 = 0x23
                        PHB2 = 0x05
                        GSB2 = 0x10
                        CTB2 = 0x1C
                        NCE2 = One
                        CreateWordField (PBD2, 0x05, TGPA)
                        CreateWordField (PBD2, 0x07, TGPD)
                        CreateByteField (PBD2, 0x15, PC01)
                        CreateByteField (PBD2, 0x16, PC02)
                        CreateWordField (PBD2, 0x19, TPPA)
                        CreateWordField (PBD2, 0x1B, TPPD)
                        CreateWordField (PBD2, 0x1D, MAGA)
                        CreateWordField (PBD2, 0x1F, MAGD)
                        CreateWordField (PBD2, 0x21, MIGA)
                        CreateWordField (PBD2, 0x23, MIGD)
                        CreateDWordField (PBD2, 0x25, DROP)
                        CreateDWordField (PBD2, 0x29, PA5O)
                        CreateDWordField (PBD2, 0x2D, PA6O)
                        CreateField (Arg3, 0x28, 0x02, NIGS)
                        CreateByteField (Arg3, 0x15, IORC)
                        CreateField (Arg3, 0xB0, One, PWCS)
                        CreateField (Arg3, 0xB1, One, PWTS)
                        CreateField (Arg3, 0xB2, One, CGPS)
                        If ((ToInteger (NIGS) == Zero))
                        {
                            TGPA = ACBT /* \_SB_.NPCF.ACBT */
                            TGPD = DCBT /* \_SB_.NPCF.DCBT */
                            PC01 = Zero
                            PC02 = (DBAC | (DBDC << One))
                            TPPA = ATPP /* \_SB_.NPCF.ATPP */
                            TPPD = DTPP /* \_SB_.NPCF.DTPP */
                            MAGA = AMAT /* \_SB_.NPCF.AMAT */
                            MIGA = AMIT /* \_SB_.NPCF.AMIT */
                            DROP = DROS /* \_SB_.NPCF.DROS */
                        }

                        If ((ToInteger (NIGS) == One))
                        {
                            If ((ToInteger (PWCS) == One)){}
                            Else
                            {
                            }

                            If ((ToInteger (PWTS) == One)){}
                            Else
                            {
                            }

                            If ((ToInteger (CGPS) == One)){}
                            Else
                            {
                            }

                            TGPA = Zero
                            TGPD = Zero
                            PC01 = Zero
                            PC02 = Zero
                            TPPA = Zero
                            TPPD = Zero
                            MAGA = Zero
                            MIGA = Zero
                            MAGD = Zero
                            MIGD = Zero
                        }

                        Return (PBD2) /* \_SB_.NPCF.NPCF.PBD2 */
                    }
                    Case (0x07)
                    {
                        Debug = "   NVPCF sub-func#7"
                        CreateDWordField (Arg3, 0x05, AMAX)
                        CreateDWordField (Arg3, 0x09, ARAT)
                        CreateDWordField (Arg3, 0x0D, DMAX)
                        CreateDWordField (Arg3, 0x11, DRAT)
                        CreateDWordField (Arg3, 0x15, TGPM)
                        Local1 = ARAT /* \_SB_.NPCF.NPCF.ARAT */
                        Divide (Local1, 0x03E8, Local0, Local1)
                        AVRT = Local1
                        Return (Zero)
                    }
                    Case (0x08)
                    {
                        Debug = "   NVPCF sub-func#8"
                        Return (Buffer (0x6A)
                        {
                            /* 0000 */  0x10, 0x04, 0x11, 0x06, 0x64, 0x58, 0x1B, 0x00,  // ....dX..
                            /* 0008 */  0x00, 0xB8, 0x88, 0x00, 0x00, 0xB0, 0xB3, 0x00,  // ........
                            /* 0010 */  0x00, 0x50, 0xC3, 0x00, 0x00, 0x50, 0x58, 0x1B,  // .P...PX.
                            /* 0018 */  0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0x28, 0xA0,  // ......(.
                            /* 0020 */  0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00, 0x3C, 0x58,  // ......<X
                            /* 0028 */  0x1B, 0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0x58,  // .......X
                            /* 0030 */  0x98, 0x00, 0x00, 0xF8, 0xA7, 0x00, 0x00, 0x32,  // .......2
                            /* 0038 */  0x64, 0x19, 0x00, 0x00, 0xB8, 0x88, 0x00, 0x00,  // d.......
                            /* 0040 */  0xD0, 0x84, 0x00, 0x00, 0x88, 0x90, 0x00, 0x00,  // ........
                            /* 0048 */  0x19, 0x64, 0x19, 0x00, 0x00, 0xB8, 0x88, 0x00,  // .d......
                            /* 0050 */  0x00, 0xE8, 0x80, 0x00, 0x00, 0x88, 0x90, 0x00,  // ........
                            /* 0058 */  0x00, 0x0A, 0x64, 0x19, 0x00, 0x00, 0xB8, 0x88,  // ..d.....
                            /* 0060 */  0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0xB8, 0x88,  // ...}....
                            /* 0068 */  0x00, 0x00                                       // ..
                        })
                    }
                    Case (0x09)
                    {
                        Debug = "   NVPCF sub-func#9"
                        CreateDWordField (Arg3, 0x03, CPTD)
                        Divide (ToInteger (CPTD), 0x03E8, Local1, Local0)
                        \_SB.PCI0.SBRG.DBCP = Local0
                        Return (Zero)
                    }
                    Case (0x0A)
                    {
                        Debug = "   NVPCF sub-func#10"
                        Name (PBDA, Buffer (0x08)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBDA, Zero, DTTV)
                        CreateByteField (PBDA, One, DTSH)
                        CreateByteField (PBDA, 0x02, DTSE)
                        CreateByteField (PBDA, 0x03, DTTE)
                        CreateDWordField (PBDA, 0x04, DTTL)
                        DTTV = 0x10
                        DTSH = 0x04
                        DTSE = 0x04
                        DTTE = One
                        DTTL = TPPL /* \_SB_.NPCF.TPPL */
                        Return (PBDA) /* \_SB_.NPCF.NPCF.PBDA */
                    }

                }

                Return (0x80000002)
            }

            Name (SFTN, Zero)
            Name (SCFI, Buffer (0x0C)
            {
                /* 0000 */  0xFF, 0x00, 0x2D, 0x32, 0x37, 0x3C, 0x3D, 0x41,  // ..-27<=A
                /* 0008 */  0x42, 0x46, 0x47, 0x4B                           // BFGK
            })
            Name (SGFI, Buffer (0x0C)
            {
                /* 0000 */  0xFF, 0x00, 0x2D, 0x32, 0x37, 0x3C, 0x3D, 0x41,  // ..-27<=A
                /* 0008 */  0x42, 0x46, 0x47, 0x4B                           // BFGK
            })
            Method (MAVT, 1, Serialized)
            {
                Switch (ToInteger (AVGI))
                {
                    Case (Zero)
                    {
                        AVG0 = Arg0
                    }
                    Case (One)
                    {
                        AVG1 = Arg0
                    }
                    Case (0x02)
                    {
                        AVG2 = Arg0
                    }
                    Case (0x03)
                    {
                        AVG3 = Arg0
                    }
                    Case (0x04)
                    {
                        AVG4 = Arg0
                    }

                }

                If ((AVGI >= 0x04))
                {
                    AVGI = Zero
                    AVGF = One
                }
                Else
                {
                    AVGI += One
                }

                If ((AVGF >= One))
                {
                    Divide ((AVG0 + (AVG1 + (AVG2 + (AVG3 + AVG4))
                        )), 0x05, Local1, Local0)
                }
                Else
                {
                    Divide ((AVG0 + (AVG1 + (AVG2 + (AVG3 + AVG4))
                        )), AVGI, Local1, Local0)
                }

                Return (Local0)
            }

            Method (FCGI, 2, Serialized)
            {
                Local0 = CTDI /* \_SB_.NPCF.CTDI */
                While ((Local0 < SFTN))
                {
                    Local1 = ((Local0 * 0x02) + One)
                    If ((Arg0 >= DerefOf (SCFI [Local1])))
                    {
                        CTDI = Local0
                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                If ((CTDI == Local0))
                {
                    While ((Local0 > Zero))
                    {
                        Local1 = (Local0 * 0x02)
                        If ((Arg0 <= DerefOf (SCFI [Local1])))
                        {
                            Local0--
                            CTDI = Local0
                        }
                        Else
                        {
                            Break
                        }
                    }
                }

                Local0 = GTDI /* \_SB_.NPCF.GTDI */
                While ((Local0 < SFTN))
                {
                    Local1 = ((Local0 * 0x02) + One)
                    If ((Arg1 >= DerefOf (SGFI [Local1])))
                    {
                        GTDI = Local0
                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                If ((GTDI == Local0))
                {
                    While ((Local0 > Zero))
                    {
                        Local1 = (Local0 * 0x02)
                        If ((Arg1 <= DerefOf (SGFI [Local1])))
                        {
                            Local0--
                            GTDI = Local0
                        }
                        Else
                        {
                            Break
                        }
                    }
                }

                Local0 = (CTDI | (GTDI << 0x08))
                Return (Local0)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "NVME    ", 0x00000001)
{
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP3._ADR, IntObj)
    External (_SB_.PCI0.GPP3.PWEN, MethodObj)    // 0 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M472, MethodObj)    // 4 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GPP3)
    {
        Name (WD3C, Zero)
        Name (NBRI, 0x5A)
        Name (NBAR, 0x5A)
        Name (NCMD, 0x5A)
        Name (PXDC, 0x5A)
        Name (PXLC, 0x5A)
        Name (PXD2, 0x5A)
        Name (ASMI, 0xB2)
        Name (LCR1, 0x5A5A5A5A)
        Name (LCR2, 0x5A5A5A5A)
        Name (D3PK, Package (0x07)
        {
            Package (0x02)
            {
                "D3 Enabled", 
                Zero
            }, 

            Package (0x02)
            {
                "Reset Pin", 
                0x00000006
            }, 

            Package (0x02)
            {
                "Power Pin", 
                0x00000000
            }, 

            Package (0x02)
            {
                "Clk Req Mask", 
                0xFFFFFFCF
            }, 

            Package (0x02)
            {
                "Tpvperl", 
                0x0032
            }, 

            Package (0x02)
            {
                "Trst-cfg", 
                0x0000
            }, 

            Package (0x05)
            {
                "APM SMI", 
                0x02, 
                0xD1, 
                0xD8, 
                0x5A
            }
        })
        OperationRegion (PSMI, SystemIO, ASMI, 0x02)
        Field (PSMI, AnyAcc, NoLock, Preserve)
        {
            ASMO,   8
        }

        OperationRegion (PMXX, SystemMemory, 0xFED80300, 0x0100)
        Field (PMXX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x78), 
                ,   20, 
            SI3V,   1
        }

        Method (PWEN, 0, NotSerialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP3.PWEN\n", Zero, Zero, Zero, Zero, Zero, Zero)
            OperationRegion (VAMN, SystemMemory, 0xFED80E00, 0x04)
            Field (VAMN, ByteAcc, NoLock, Preserve)
            {
                CLKR,   32
            }

            If (CondRefOf (\_SB.PCI0.GPP3._ADR))
            {
                Name (ADDR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateByteField (ADDR, Zero, PFUN)
                CreateByteField (ADDR, 0x02, PDEV)
                ADDR = \_SB.PCI0.GPP3._ADR /* External reference */
            }

            Local0 = DerefOf (DerefOf (D3PK [One]) [One])
            Local2 = M009 (Local0)
            Local1 = DerefOf (DerefOf (D3PK [0x02]) [One])
            Local3 = One
            Local6 = CLKR /* \_SB_.PCI0.GPP3.PWEN.CLKR */
            If (((Local2 == Zero) && (Local3 == Zero)))
            {
                WD3C = One
                M020 (Zero, PDEV, PFUN, 0x88, LCR2)
                M020 (Zero, PDEV, PFUN, 0x68, LCR1)
                Local4 = DerefOf (DerefOf (D3PK [0x03]) [One])
                CLKR &= Local4
                CLKR = Local6
                Local4 = DerefOf (DerefOf (D3PK [0x04]) [One])
                If ((Local4 != Zero))
                {
                    Sleep (Local4)
                }
                Else
                {
                    Sleep (0x64)
                }

                M472 (Zero, PDEV, PFUN, Zero)
                M010 (Local0, One)
                Local4 = DerefOf (DerefOf (D3PK [0x05]) [One])
                If ((Local4 != Zero))
                {
                    Sleep (Local4)
                }

                Local1 = Zero
                Local2 = 0x2775
                While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
                {
                    Local1 = M017 (Zero, PDEV, PFUN, 0x6B, Zero, 0x08)
                    Local2 = (Local2 - One)
                    Stall (0x63)
                }

                Local0 = M019 (Zero, PDEV, PFUN, 0x18)
                Local1 = ((Local0 & 0xFF00) >> 0x08)
                Local1 = M019 (Local1, Zero, Zero, Zero)
            }
        }

        Method (GPCG, 3, Serialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP3.GPCG Bus = 0x%X Dev = 0x%X Fun = 0x%X\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Local0 = Zero
            Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
            While ((Local1 != Zero))
            {
                Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == 0x10))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
            }

            M460 ("PLA-ASL-_SB.PCI0.GPP3.GPCG Bus = 0x%X Dev = 0x%X Fun = 0x%X PCIe Cap Offset = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (RPCF, 0, NotSerialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP3.RPCF NBRI=0x%X\n", NBRI, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GPP3._ADR))
            {
                Local1 = GPCG (NBRI, Zero, Zero)
                M460 ("PLA-ASL-_SB.PCI0.GPP3.RPCF PXDC = 0x%X PXLC = 0x%X PXD2 = 0x%X NBAR = 0x%X NCMD = 0x%X\n", PXDC, PXLC, PXD2, NBAR, NCMD, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                Local2 = (NCMD & 0xFFFFFBFF)
                M020 (NBRI, Zero, Zero, 0x04, (Local2 | 0x06))
            }
        }

        Method (SPCF, 0, NotSerialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP3.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GPP3._ADR))
            {
                Name (ADDR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateByteField (ADDR, Zero, PFUN)
                CreateByteField (ADDR, 0x02, PDEV)
                ADDR = \_SB.PCI0.GPP3._ADR /* External reference */
                M460 ("PLA-ASL-_SB.PCI0.GPP3.SPCF Dev = 0x%X Func = 0x%X\n", PDEV, PFUN, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, PDEV, PFUN, 0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = GPCG (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
                M460 ("PLA-ASL-_SB.PCI0.GPP3.RPCF NBRI = 0x%X NCMD = 0x%X NBAR = 0x%X \n", NBRI, NCMD, NBAR, Zero, Zero, Zero)
                M460 ("PLA-ASL-_SB.PCI0.GPP3.RPCF PXDC = 0x%X PXLC = 0x%X PXD2 = 0x%X \n", PXDC, PXLC, PXD2, Zero, Zero, Zero)
                LCR1 = M019 (Zero, PDEV, PFUN, 0x68)
                M460 ("PLA-ASL-_SB.PCI0.GPP3.PWDI.LCR1 : %x\n", LCR1, Zero, Zero, Zero, Zero, Zero)
                LCR2 = M019 (Zero, PDEV, PFUN, 0x88)
                M460 ("PLA-ASL-_SB.PCI0.GPP3.PWDI.LCR2 : %x\n", LCR2, Zero, Zero, Zero, Zero, Zero)
            }
        }

        PowerResource (P0NV, 0x00, 0x0000)
        {
            Name (D0NV, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x30AA)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP3.P0NV._STA\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (D0NV) /* \_SB_.PCI0.GPP3.P0NV.D0NV */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x30D0)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP3.P0NV._ON\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = DerefOf (DerefOf (D3PK [Zero]) [One])
                Local1 = DerefOf (DerefOf (D3PK [0x06]) [One])
                Local2 = 0x02
                M460 ("PLA-ASL-\\_SB.PCI0.GPP3.P0NV._ON D3Cold = 0x%X WD3C First = 0x%X SI3V = 0x%X\n", Local0, WD3C, SI3V, Zero, Zero, Zero)
                If ((Local0 == One))
                {
                    PWEN ()
                }

                If (((WD3C == One) || (SI3V == One))){}
                D0NV = One
                M000 (0x30D1)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x30D3)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP3.P0NV._OFF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M000 (0x30D5)
            }
        }

        Device (NVME)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                P0NV
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                P0NV
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                P0NV
            })
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M000 (0x3050)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP3.NVME._PS0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0x3053)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP3.NVME._PS3\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        One
                    }
                }
            })
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "NvDDS", "Nv20DDS", 0x00001000)
{
    External (_SB_.ATKD.ICAW, MethodObj)    // 2 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.SBRG.DDSS, FieldUnitObj)
    External (_SB_.PCI0.SBRG.HDRP, FieldUnitObj)
    External (_SB_.PCI0.SBRG.IVGA, FieldUnitObj)
    External (_SB_.PCI0.SBRG.MBDF, FieldUnitObj)
    External (_SB_.PCI0.SBRG.NEDP, FieldUnitObj)
    External (_SB_.PCI0.SBRG.SECC, MethodObj)    // 2 Arguments
    External (DPMF, UnknownObj)
    External (GDPM, IntObj)
    External (IEB0, IntObj)
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (SDMF, UnknownObj)
    External (SDPM, IntObj)
    External (SMIC, UnknownObj)

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        If (\_SB.PCI0.SBRG.DDSS)
        {
            Name (MMID, Package (0x02)
            {
                Package (0x03)
                {
                    Zero, 
                    "PS8461E", 
                    0x00010003
                }, 

                Package (0x03)
                {
                    One, 
                    "NON-MUX or Error", 
                    Zero
                }
            })
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x03)
            {
                0x8000A450, 
                0x80007320, 
                0x80007330
            })
        }

        Device (EDP1)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                Return (0x8000A450)
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1F)
            }

            If (\_SB.PCI0.SBRG.DDSS)
            {
                Method (_DDC, 1, Serialized)  // _DDC: Display Data Current
                {
                    Name (BUF2, Buffer (0x0180){})
                    CreateField (BUF2, Zero, 0x0400, EDB0)
                    CreateField (BUF2, Zero, 0x0800, EDB1)
                    CreateField (BUF2, Zero, 0x0C00, EDB2)
                    EDB2 = IEB0 /* External reference */
                    If ((Arg0 == One))
                    {
                        Return (EDB0) /* \_SB_.PCI0.GPP0.PEGP.EDP1._DDC.EDB0 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (EDB1) /* \_SB_.PCI0.GPP0.PEGP.EDP1._DDC.EDB1 */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Return (EDB2) /* \_SB_.PCI0.GPP0.PEGP.EDP1._DDC.EDB2 */
                    }
                }
            }

            If (\_SB.PCI0.SBRG.DDSS)
            {
                Method (MXDS, 1, NotSerialized)
                {
                    Local0 = Arg0
                    Local1 = (Local0 & 0x0F)
                    Local2 = (Local0 & 0x10)
                    If ((Local1 == Zero))
                    {
                        If ((M009 (0x1D) == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (0x02)
                        }
                    }
                    ElseIf ((Local1 == One))
                    {
                        If ((Local2 == 0x10))
                        {
                            M010 (0x1D, One)
                            \_SB.PCI0.SBRG.NEDP = One
                        }
                        Else
                        {
                            M010 (0x1D, Zero)
                            \_SB.PCI0.SBRG.NEDP = Zero
                        }

                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Method (MXDM, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x07)
                If ((Local1 == Zero))
                {
                    Local2 = GDPM /* External reference */
                    Return (Local2)
                }
                ElseIf ((Local1 < 0x05))
                {
                    If ((Local1 == 0x02))
                    {
                        SDPM = Zero
                    }
                    Else
                    {
                        SDPM = One
                    }

                    \_SB.ATKD.ICAW (0x00090016, SDPM)
                }
                Else
                {
                    Return (Zero)
                }

                Return (One)
            }

            If (\_SB.PCI0.SBRG.DDSS)
            {
                Method (MXID, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = DerefOf (DerefOf (MMID [Zero]) [0x02])
                        Return (Local0)
                    }
                }

                Method (LRST, 1, NotSerialized)
                {
                    Local0 = Arg0
                    Local1 = (Local0 & 0x07)
                    If ((Local1 == Zero))
                    {
                        If ((M009 (0x43) == Zero))
                        {
                            Return (One)
                        }
                        ElseIf ((M009 (0x43) == One))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((Local1 == One))
                    {
                        M010 (0x43, Zero)
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        M010 (0x43, One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Device (HDM1)
        {
            Name (_ADR, 0x80007320)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1F)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }

        Device (DP1)
        {
            Name (_ADR, 0x80006320)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1F)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (AWMI)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "0x00")  // _UID: Unique ID
            Name (LEDC, 0x23)
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x96, 0x3E, 0x60, 0x25, 0xEF, 0x38, 0x43,  // ..>`%.8C
                /* 0008 */  0xA3, 0xD0, 0xC4, 0x61, 0x77, 0x51, 0x6D, 0xB7,  // ...awQm.
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x30, 0x30, 0x01, 0x00   // ..).00..
            })
            Method (WMAA, 3, Serialized)
            {
                CreateByteField (Arg2, Zero, MODF)
                CreateDWordField (Arg2, 0x04, LEDB)
                Switch (Arg1)
                {
                    Case (One)
                    {
                        If ((MODF == Zero))
                        {
                            LEDB = LEDC /* \_SB_.PCI0.AWMI.LEDC */
                            Return (LEDB) /* \_SB_.PCI0.AWMI.WMAA.LEDB */
                        }
                        ElseIf ((MODF == One))
                        {
                            LEDC = (LEDB & 0xFF)
                            \_SB.PCI0.SBRG.MBDF = LEDC /* \_SB_.PCI0.AWMI.LEDC */
                            Return (Zero)
                        }
                        ElseIf ((MODF == 0x02))
                        {
                            LEDB = 0x64
                            Return (LEDB) /* \_SB_.PCI0.AWMI.WMAA.LEDB */
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((MODF == Zero))
                        {
                            If (\_SB.PCI0.SBRG.DDSS)
                            {
                                LEDB = 0x02
                            }
                            Else
                            {
                                LEDB = One
                            }

                            If (\_SB.PCI0.SBRG.HDRP)
                            {
                                LEDB = 0x03
                            }

                            If (\_SB.PCI0.SBRG.IVGA)
                            {
                                LEDB = One
                            }

                            Return (LEDB) /* \_SB_.PCI0.AWMI.WMAA.LEDB */
                        }
                        ElseIf ((MODF == One))
                        {
                            If ((LEDB < 0x03))
                            {
                                If ((LEDB == One))
                                {
                                    Local0 = One
                                }

                                \_SB.PCI0.SBRG.SECC (0x40, Local0)
                                Return (Zero)
                            }

                            Return (One)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    Default
                    {
                        Return (One)
                    }

                }
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "AMD", "XHCI    ", 0x00000001)
{
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Name (D0U0, One)
        PowerResource (P0U0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x3C05)
                Return (D0U0) /* \_SB_.PCI0.GP17.XHC0.D0U0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x3C06)
                D0U0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x3C08)
                D0U0 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P0U0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3C04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M000 (0x3C01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M000 (0x3C03)
        }
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Name (D0U1, One)
        PowerResource (P0U1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x3D05)
                Return (D0U1) /* \_SB_.PCI0.GP17.XHC1.D0U1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x3D06)
                D0U1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x3D08)
                D0U1 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P0U1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3D04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M000 (0x3D01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M000 (0x3D03)
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Name (D0U2, One)
        PowerResource (P0U2, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x3F05)
                Return (D0U2) /* \_SB_.PCI0.GP19.XHC2.D0U2 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x3F06)
                D0U2 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x3F08)
                D0U2 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U2
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P0U2
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M000 (0x3F01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M000 (0x3F03)
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AOD     ", 0x00000001)
{
    External (OBID, PkgObj)
    External (OBIE, PkgObj)
    External (OBIT, PkgObj)

    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        0x00020038, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x44)
    {
        0x43, 
        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x42, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x4C, 0x04, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // L...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x3B, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3A, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x6C, 0x0A, 0x00, 0x00,  // ....l...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x36, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // 4...d...
                /* 0010 */  0xC8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0020 */  0xA5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x60, 0x04, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // `...w...
                /* 0030 */  0xB0, 0x04, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0038 */  0xE9, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0040 */  0x14, 0x05, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // ....(...
                /* 0048 */  0x35, 0x05, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // 5...[...
                /* 0050 */  0x78, 0x05, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00,  // x.......
                /* 0058 */  0xBB, 0x05, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0xDC, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0068 */  0x40, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // @...r...
                /* 0070 */  0x90, 0x06, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 0080 */  0x08, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // ........
                /* 0088 */  0xF1, 0x07, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0090 */  0x34, 0x08, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // 4...U...
                /* 0098 */  0x77, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // w.......
                /* 00A0 */  0xB9, 0x08, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // ........
                /* 00A8 */  0x60, 0x09, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // `.......
                /* 00B0 */  0xA3, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 00B8 */  0xF6, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 00C0 */  0x8C, 0x0A, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF0, 0x0A, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // ...."...
                /* 00D0 */  0x54, 0x0B, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // T.......
                /* 00D8 */  0xB8, 0x0B, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x34, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0x9A, 0x10, 0x00, 0x00, 0x4A, 0x15, 0x00, 0x00,  // ....J...
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // ........
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00,  // .....q..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xA5, 0x01, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x2F, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xA7, 0x02, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2E, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x29, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // ....<...
                /* 0050 */  0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // =...>...
                /* 0058 */  0x3F, 0x00, 0x00, 0x00                           // ?...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x25, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // (...<...
                /* 0018 */  0x78, 0x00, 0x00, 0x00                           // x...
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0x38, 0x01, 0x00, 0x00,  // =...8...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0x80, 0x01, 0x00, 0x00,  // ........
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0xC4, 0x02, 0x00, 0x00,  // <.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x48, 0x00, 0x00, 0x00,  // ....H...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x74, 0x00, 0x00, 0x00,  // ....t...
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00,  // ....'...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00,  // ;...'...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0C, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,  // ....@...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (DSMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0x9650C018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1600, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID) /* External reference */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = DSMI /* \DSMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE) /* External reference */
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C010.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C011.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C012.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C013.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C014.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C015.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C016.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C017.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C018)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C018.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C019)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C019.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C01A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C01B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C01C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C01D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C01E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Scope (\_SB.PLTF.C01F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00000BB8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000961
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C014, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C015, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C016, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C017, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C018, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C019, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01F, 0x85) // Device-Specific
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "AMD", "TZ01    ", 0x00000001)
{
    External (_SB_.PCI0.SBRG.RCPU, FieldUnitObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTF, Zero)
            Name (CRTV, Zero)
            Name (CRTT, 0x78)
            Name (PSVT, 0x32)
            Name (TSPS, 0x14)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (CRTF)
                {
                    CRTF = Zero
                    Return (CTOK (CRTV))
                }

                Return (CTOK (\_SB.PCI0.SBRG.RCPU))
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x20)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007, 
                    \_SB.PLTF.C008, 
                    \_SB.PLTF.C009, 
                    \_SB.PLTF.C00A, 
                    \_SB.PLTF.C00B, 
                    \_SB.PLTF.C00C, 
                    \_SB.PLTF.C00D, 
                    \_SB.PLTF.C00E, 
                    \_SB.PLTF.C00F, 
                    \_SB.PLTF.C010, 
                    \_SB.PLTF.C011, 
                    \_SB.PLTF.C012, 
                    \_SB.PLTF.C013, 
                    \_SB.PLTF.C014, 
                    \_SB.PLTF.C015, 
                    \_SB.PLTF.C016, 
                    \_SB.PLTF.C017, 
                    \_SB.PLTF.C018, 
                    \_SB.PLTF.C019, 
                    \_SB.PLTF.C01A, 
                    \_SB.PLTF.C01B, 
                    \_SB.PLTF.C01C, 
                    \_SB.PLTF.C01D, 
                    \_SB.PLTF.C01E, 
                    \_SB.PLTF.C01F
                })
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (CTOK ((CRTT - 0x0A)))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (CTOK (CRTT))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (One)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }

            Method (CRTM, 1, Serialized)
            {
                CRTF = One
                CRTV = Arg0
                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
            }

            Method (CTOK, 1, Serialized)
            {
                Return (((Arg0 * 0x0A) + 0x0AAC))
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "AMD", "Vortex  ", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07,  // ........
            /* 0028 */  0x00, 0xFF, 0xFF, 0x00, 0x03, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x10,  // ........
            /* 0078 */  0x13, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x18, 0x18, 0xFF, 0xFF, 0x03,  // ........
            /* 00B8 */  0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1B,  // ........
            /* 00F0 */  0x1B, 0xFF, 0xFF, 0x06, 0x00, 0x01, 0x06, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, One)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            A002 = (Arg0 | 0xB0000000)
        }

        Method (ALIB, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, Zero, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, Zero, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [Zero]) > Zero))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = One
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == One))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, Zero, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = Zero
                A034 = Zero
                A035 = Zero
                A036 = Zero
                A037 = Zero
                A038 = Zero
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                A007 (0xAA94)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = Zero
                A040 = Zero
                A041 = Zero
                A042 = Zero
                A043 = Zero
                A044 = Zero
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A039 = Local5
                    A040 = 0x02
                    A046 (0x24, Local6)
                }

                A007 (0xAA95)
            }

            If ((Arg0 == 0x13))
            {
                A007 (0xAA96)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = Zero
                A048 = Zero
                A049 = Zero
                A050 = Zero
                A051 = Zero
                A052 = Zero
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A047 = Local5
                    A048 = One
                    A046 (0x24, Local6)
                }

                A007 (0xAA97)
            }

            If ((Arg0 == 0x16))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Arg1
                A054 = Zero
                A055 = Zero
                A056 = Zero
                A057 = Zero
                A058 = Zero
                A018 (0x6F, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A059)
                CreateDWordField (Local6, 0x04, A060)
                CreateDWordField (Local6, 0x08, A061)
                CreateDWordField (Local6, 0x0C, A062)
                CreateDWordField (Local6, 0x10, A063)
                CreateDWordField (Local6, 0x14, A064)
                A059 = Zero
                A060 = Zero
                A061 = Zero
                A062 = Zero
                A063 = Zero
                A064 = Zero
                A065 (Arg1)
                A007 (0xAA99)
            }

            Return (Zero)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A116 (Local0, Arg1)
                If ((Local1 == One))
                {
                    Local2 = A117 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, Zero, A023)
            CreateByteField (Local7, 0x02, A067)
            CreateByteField (Local7, 0x03, A118)
            A023 = 0x04
            A067 = Zero
            If ((Local2 == Zero))
            {
                A118 = Zero
            }
            Else
            {
                A118 = One
            }

            Return (Local7)
        }

        Method (A116, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A112 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A112 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A112 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A112 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A112 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A112 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A112 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A112 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A112 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A112 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A112 (Arg1))
            }
        }

        Method (A117, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A113 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A113 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A113 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A113 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A113 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A113 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A113 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A113 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A113 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A113 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A113 (Arg1))
            }
        }

        Name (AD00, Zero)
        Name (DK00, Zero)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, Zero)
        Name (AP02, Zero)
        Name (AP03, Zero)
        Name (AP05, Zero)
        Name (AP0B, 0xFF)
        Name (AP10, Zero)
        Method (A066, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, Zero, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A067)
            A067 = One
            If ((DerefOf (\_SB.ADAT [Zero]) == One))
            {
                A067 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [Zero]) == Zero))
            {
                A067 = One
                Return (Local7)
            }

            A068 (Arg0)
            If ((AP05 != One))
            {
                Return (Local7)
            }

            A069 ()
            A067 = 0x02
            Return (Local7)
        }

        Method (A070, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            If ((AP05 != One))
            {
                Return (Zero)
            }

            A069 ()
        }

        Method (A071, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = Zero
            }
        }

        Method (A072, 1, NotSerialized)
        {
            AP10 = One
        }

        Method (A073, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == Zero))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A074 (Local0)
                    Local0++
                }

                AP0B = Zero
            }

            A069 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [Zero] = 0x03
            Local7 [One] = Zero
            Local7 [0x02] = Zero
            Return (Local7)
        }

        Method (A075, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A068, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                If ((A076 (Local0, AP06) == One))
                {
                    If (((AP07 & AP08) == One))
                    {
                        Local1 = A077 (Local0)
                        A078 (Local0, Local1)
                    }
                    Else
                    {
                        A078 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A079, 0, NotSerialized)
        {
            AP02 = One
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A080 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A081, 0, NotSerialized)
        {
            AP03 = Zero
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A082 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A069, 0, NotSerialized)
        {
            A081 ()
            A079 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A080 (Local0)
                Local2 = A083 (Local0)
                If ((Local1 != Local2))
                {
                    A084 (Local0, Local1)
                }
                ElseIf ((AP10 == One))
                {
                    A084 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == One))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = Zero
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A085 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A085 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A085 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A085 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A085 (Arg1))
            }
        }

        Method (A083, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A086 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A086 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A086 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A086 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A086 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A086 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A086 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A086 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A086 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A086 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A086 ())
            }
        }

        Method (A080, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A087 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A087 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A087 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A087 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A087 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A087 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A087 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A087 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A087 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A087 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A087 ())
            }
        }

        Method (A082, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A088 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A088 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A088 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A088 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A088 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A088 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A088 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A088 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A088 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A088 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A088 ())
            }
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A089 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A089 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A089 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A089 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A089 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A089 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A089 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A089 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A089 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A089 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A089 ())
            }
        }

        Method (A078, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A090 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A090 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A090 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A090 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A090 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A090 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A090 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A090 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A090 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A090 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A090 (Arg1))
            }
        }

        Method (A076, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A091 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A091 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A091 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A091 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A091 (Arg1))
            }
        }

        Method (A074, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A092 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A092 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A092 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A092 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A092 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A092 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A092 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A092 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A092 ())
            }
        }

        OperationRegion (A161, SystemMemory, AGRB, 0x1000)
        Field (A161, DWordAcc, Lock, Preserve)
        {
            Offset (0xA0), 
            A162,   32
        }

        BankField (A161, A162, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A146,   32
        }

        BankField (A161, A162, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A139,   32
        }

        BankField (A161, A162, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A140,   32
        }

        BankField (A161, A162, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A141,   32
        }

        BankField (A161, A162, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A142,   32
        }

        BankField (A161, A162, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A143,   32
        }

        BankField (A161, A162, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A144,   32
        }

        BankField (A161, A162, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A145,   32
        }

        BankField (A161, A162, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A121,   32
        }

        BankField (A161, A162, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A122,   32
        }

        BankField (A161, A162, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A123,   32
        }

        BankField (A161, A162, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A124,   32
        }

        BankField (A161, A162, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A125,   32
        }

        BankField (A161, A162, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A126,   32
        }

        BankField (A161, A162, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A127,   32
        }

        BankField (A161, A162, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A128,   32
        }

        BankField (A161, A162, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A129,   32
        }

        BankField (A161, A162, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A130,   32
        }

        BankField (A161, A162, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A131,   32
        }

        BankField (A161, A162, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A132,   32
        }

        BankField (A161, A162, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A160,   32
        }

        BankField (A161, A162, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A153,   32
        }

        BankField (A161, A162, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A154,   32
        }

        BankField (A161, A162, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A155,   32
        }

        BankField (A161, A162, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A156,   32
        }

        BankField (A161, A162, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A157,   32
        }

        BankField (A161, A162, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A158,   32
        }

        BankField (A161, A162, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A159,   32
        }

        BankField (A161, A162, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A168,   32
        }

        BankField (A161, A162, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A169,   32
        }

        BankField (A161, A162, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A170,   32
        }

        BankField (A161, A162, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A171,   32
        }

        Method (A119, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A100 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A100 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A100 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A100 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A100 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A100 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A100 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A100 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A100 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A100 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A100 (Arg1))
            }
        }

        Method (A120, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == One))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A121 /* \_SB_.A121 */
                Local1 &= 0xFF00FCFF
                A121 = (Local0 | Local1)
                Local1 = A121 /* \_SB_.A121 */
                A121 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0x00400000 | Local1)
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == One))
                {
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0x00400000 | Local1)
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0x00400000 | Local1)
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0x00400000 | Local1)
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0x00400000 | Local1)
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A127 /* \_SB_.A127 */
                    A127 = (0x00400000 | Local1)
                    Local1 = A127 /* \_SB_.A127 */
                    A127 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A128 /* \_SB_.A128 */
                    A128 = (0x00400000 | Local1)
                    Local1 = A128 /* \_SB_.A128 */
                    A128 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0x00400000 | Local1)
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0x00400000 | Local1)
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0x00400000 | Local1)
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0x00400000 | Local1)
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A119 (Local0, Arg1)
                If ((Local1 == One))
                {
                    A120 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A045, 1, NotSerialized)
        {
            Local0 = 0xFF
            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR0.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR1.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR2.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR3.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR4.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR5.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR6.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR7.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR8.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR9.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABRA.A104 (Arg0)
            }

            Return (Local0)
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A133)
            CreateDWordField (Arg1, 0x04, A134)
            CreateDWordField (Arg1, 0x08, A135)
            CreateDWordField (Arg1, 0x0C, A136)
            CreateDWordField (Arg1, 0x10, A137)
            CreateDWordField (Arg1, 0x14, A138)
            A139 = Zero
            While ((A139 != Zero)){}
            A140 = A133 /* \_SB_.A018.A133 */
            A141 = A134 /* \_SB_.A018.A134 */
            A142 = A135 /* \_SB_.A018.A135 */
            A143 = A136 /* \_SB_.A018.A136 */
            A144 = A137 /* \_SB_.A018.A137 */
            A145 = A138 /* \_SB_.A018.A138 */
            A146 = Arg0
            While ((A139 == Zero)){}
            Release (\_SB.AM00)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A147)
            CreateDWordField (Arg1, 0x04, A148)
            CreateDWordField (Arg1, 0x08, A149)
            CreateDWordField (Arg1, 0x0C, A150)
            CreateDWordField (Arg1, 0x10, A151)
            CreateDWordField (Arg1, 0x14, A152)
            Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            }

            A154 = A147 /* \_SB_.A046.A147 */
            A155 = A148 /* \_SB_.A046.A148 */
            A156 = A149 /* \_SB_.A046.A149 */
            A157 = A150 /* \_SB_.A046.A150 */
            A158 = A151 /* \_SB_.A046.A151 */
            A159 = A152 /* \_SB_.A046.A152 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A153 = Local1
            A160 = 0xFFFFFFFF
            Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A161, A162, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                A163,   32
            }

            Release (\_SB.AM00)
            Return (A163) /* \_SB_.AMNR.A163 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A161, A162, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                A164,   32
            }

            A164 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, A165)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A165))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                If ((Local1 == One))
                {
                    A012 = Local2
                    A018 (0x4E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x4F, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x61, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x60, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x50, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x51, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x52, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x53, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x57, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x58, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x59, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x5A, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x5B, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x5C, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x5D, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x5E, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x6B, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, Zero, A166)
                    CreateDWordField (Local3, 0x04, A167)
                    A166 = A140 /* \_SB_.A140 */
                    A167 = A141 /* \_SB_.A141 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x6C, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x6D, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR0.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR0.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR0.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR0.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR1.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR1.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR1.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR1.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR2.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR2.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR2.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR2.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR3.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR3.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR3.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR3.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR4.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR4.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR4.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR4.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR5.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR5.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR5.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR5.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR6.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR6.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR6.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR6.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR7.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR7.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR7.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR7.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR8.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR8.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR8.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR8.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR9.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR9.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR9.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR9.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABRA.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABRA.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABRA.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABRA.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A172, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == One))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A173 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A103, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A173, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A101 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A101 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A101 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A101 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A101 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A101 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A101 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A101 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A101 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A101 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A101 (Arg1))
            }
        }

        Method (A065, 1, Serialized)
        {
            Local0 = Zero
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((Local1 == Zero))
            {
                A012 = Local2
                A172 (Zero)
            }

            If ((Local1 == One))
            {
                A012 = Local2
                A172 (One)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, One)
        Name (A009, Zero)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((AD00 == Zero))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMUCSI", 0x00000001)
{
    External (_SB_.PCI0.SBRG.SEC1, MethodObj)    // 1 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB)
    {
        OperationRegion (PM0A, SystemMemory, M322, 0x02)
        Field (PM0A, ByteAcc, Lock, Preserve)
        {
            VER0,   8, 
            VER1,   8
        }

        OperationRegion (PM04, SystemMemory, M323, 0x04)
        Field (PM04, ByteAcc, Lock, Preserve)
        {
            CCI0,   8, 
            CCI1,   8, 
            CCI2,   8, 
            CCI3,   8
        }

        OperationRegion (PM05, SystemMemory, M324, 0x08)
        Field (PM05, ByteAcc, Lock, Preserve)
        {
            CTL0,   8, 
            CTL1,   8, 
            CTL2,   8, 
            CTL3,   8, 
            CTL4,   8, 
            CTL5,   8, 
            CTL6,   8, 
            CTL7,   8
        }

        OperationRegion (PM06, SystemMemory, M325, 0x10)
        Field (PM06, ByteAcc, Lock, Preserve)
        {
            MGI0,   8, 
            MGI1,   8, 
            MGI2,   8, 
            MGI3,   8, 
            MGI4,   8, 
            MGI5,   8, 
            MGI6,   8, 
            MGI7,   8, 
            MGI8,   8, 
            MGI9,   8, 
            MGIA,   8, 
            MGIB,   8, 
            MGIC,   8, 
            MGID,   8, 
            MGIE,   8, 
            MGIF,   8
        }

        OperationRegion (PM07, SystemMemory, M326, 0x10)
        Field (PM07, ByteAcc, Lock, Preserve)
        {
            MGO0,   8, 
            MGO1,   8, 
            MGO2,   8, 
            MGO3,   8, 
            MGO4,   8, 
            MGO5,   8, 
            MGO6,   8, 
            MGO7,   8, 
            MGO8,   8, 
            MGO9,   8, 
            MGOA,   8, 
            MGOB,   8, 
            MGOC,   8, 
            MGOD,   8, 
            MGOE,   8, 
            MGOF,   8
        }

        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (M311, Buffer (0x14)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Device (CR01)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    CreateDWordField (M311, Zero, M312)
                    CreateDWordField (M311, 0x04, M313)
                    CreateDWordField (M311, 0x08, M314)
                    CreateDWordField (M311, 0x0C, M315)
                    CreateDWordField (M311, 0x10, M316)
                    Local0 = M310 /* External reference */
                    If (Local0)
                    {
                        Local0 += 0x4E
                        M312 = M013 ((Local0 + Zero), Zero, Zero, 0x20)
                        M313 = M013 ((Local0 + 0x04), Zero, Zero, 0x20)
                        M314 = M013 ((Local0 + 0x08), Zero, Zero, 0x20)
                        M315 = M013 ((Local0 + 0x0C), Zero, Zero, 0x20)
                        M316 = M013 ((Local0 + 0x10), Zero, Zero, 0x20)
                    }

                    Return (M311) /* \_SB_.UBTC.M311 */
                }
            }

            Device (CR02)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    CreateDWordField (M311, Zero, M312)
                    CreateDWordField (M311, 0x04, M313)
                    CreateDWordField (M311, 0x08, M314)
                    CreateDWordField (M311, 0x0C, M315)
                    CreateDWordField (M311, 0x10, M316)
                    Local0 = M310 /* External reference */
                    If (Local0)
                    {
                        Local0 += 0x62
                        M312 = M013 ((Local0 + Zero), Zero, Zero, 0x20)
                        M313 = M013 ((Local0 + 0x04), Zero, Zero, 0x20)
                        M314 = M013 ((Local0 + 0x08), Zero, Zero, 0x20)
                        M315 = M013 ((Local0 + 0x0C), Zero, Zero, 0x20)
                        M316 = M013 ((Local0 + 0x10), Zero, Zero, 0x20)
                    }

                    Return (M311) /* \_SB_.UBTC.M311 */
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, M317)  // _BAS: Base Address
                Local0 = M310 /* External reference */
                M317 = (Local0 + 0x1D)
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((M049 (M128, 0x78) == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (PM08, SystemMemory, M320, 0x30)
            Field (PM08, ByteAcc, Lock, Preserve)
            {
                VER0,   8, 
                VER1,   8, 
                RSV0,   8, 
                RSV1,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (M318, 0, Serialized)
            {
                \_SB.UBTC.MGI0 = \_SB.MGI0
                \_SB.UBTC.MGI1 = \_SB.MGI1
                \_SB.UBTC.MGI2 = \_SB.MGI2
                \_SB.UBTC.MGI3 = \_SB.MGI3
                \_SB.UBTC.MGI4 = \_SB.MGI4
                \_SB.UBTC.MGI5 = \_SB.MGI5
                \_SB.UBTC.MGI6 = \_SB.MGI6
                \_SB.UBTC.MGI7 = \_SB.MGI7
                \_SB.UBTC.MGI8 = \_SB.MGI8
                \_SB.UBTC.MGI9 = \_SB.MGI9
                \_SB.UBTC.MGIA = \_SB.MGIA
                \_SB.UBTC.MGIB = \_SB.MGIB
                \_SB.UBTC.MGIC = \_SB.MGIC
                \_SB.UBTC.MGID = \_SB.MGID
                \_SB.UBTC.MGIE = \_SB.MGIE
                \_SB.UBTC.MGIF = \_SB.MGIF
                \_SB.UBTC.CCI0 = \_SB.CCI0
                \_SB.UBTC.CCI1 = \_SB.CCI1
                \_SB.UBTC.CCI2 = \_SB.CCI2
                \_SB.UBTC.CCI3 = \_SB.CCI3
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == One))
                    {
                        M000 (0x0DA8)
                        \_SB.MGO0 = \_SB.UBTC.MGO0
                        \_SB.MGO1 = \_SB.UBTC.MGO1
                        \_SB.MGO2 = \_SB.UBTC.MGO2
                        \_SB.MGO3 = \_SB.UBTC.MGO3
                        \_SB.MGO4 = \_SB.UBTC.MGO4
                        \_SB.MGO5 = \_SB.UBTC.MGO5
                        \_SB.MGO6 = \_SB.UBTC.MGO6
                        \_SB.MGO7 = \_SB.UBTC.MGO7
                        \_SB.MGO8 = \_SB.UBTC.MGO8
                        \_SB.MGO9 = \_SB.UBTC.MGO9
                        \_SB.MGOA = \_SB.UBTC.MGOA
                        \_SB.MGOB = \_SB.UBTC.MGOB
                        \_SB.MGOC = \_SB.UBTC.MGOC
                        \_SB.MGOD = \_SB.UBTC.MGOD
                        \_SB.MGOE = \_SB.UBTC.MGOE
                        \_SB.MGOF = \_SB.UBTC.MGOF
                        \_SB.CTL0 = \_SB.UBTC.CTL0
                        \_SB.CTL1 = \_SB.UBTC.CTL1
                        \_SB.CTL2 = \_SB.UBTC.CTL2
                        \_SB.CTL3 = \_SB.UBTC.CTL3
                        \_SB.CTL4 = \_SB.UBTC.CTL4
                        \_SB.CTL5 = \_SB.UBTC.CTL5
                        \_SB.CTL6 = \_SB.UBTC.CTL6
                        \_SB.CTL7 = \_SB.UBTC.CTL7
                        \_SB.CCI0 = Zero
                        \_SB.CCI1 = Zero
                        \_SB.CCI2 = Zero
                        \_SB.CCI3 = Zero
                        \_SB.PCI0.SBRG.SEC1 (0x18)
                        M000 (0x0DA9)
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        M000 (0x0DAA)
                        M318 ()
                        M000 (0x0DAB)
                    }
                }

                Return (Zero)
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMMSOSC", 0x00000001)
{
    External (_SB_.M625, MethodObj)    // 2 Arguments
    External (DDEP, IntObj)
    External (DIMS, IntObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB)
    {
        Name (M630, 0x5555)
        Name (U4PC, 0xFF)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, One)
            CreateDWordField (Arg0, Zero, UID0)
            CreateDWordField (Arg3, Zero, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((Arg1 == One))
                {
                    Local5 = Zero
                    If ((\_SB.U4PC != 0xFF))
                    {
                        Local5 = (\_SB.U4PC & 0x0F)
                        Local3 &= 0xFFFFFFF0
                        Local3 |= Local5
                    }
                    ElseIf ((CondRefOf (\_SB.M625) && (M620 != Zero)))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((\_SB.M630 == 0x5555))
                            {
                                Local1 = \_SB.M625 (0x0180, 0x03E8)
                                \_SB.M630 = Local1
                            }
                            Else
                            {
                                Local1 = \_SB.M630
                            }

                            If (((Local1 & 0xFF) == Zero))
                            {
                                Local5 = ((Local1 >> 0x10) & 0x0F)
                                Local3 &= 0xFFFFFFF0
                                Local3 |= Local5
                            }
                        }
                    }

                    If ((Local5 == Zero))
                    {
                        CDW1 |= 0x04
                    }
                    ElseIf ((Local3 != CDW3))
                    {
                        CDW3 = Local3
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CondRefOf (\DIMS) && CondRefOf (\DDEP)))
                    {
                        If (((\DDEP == One) && ((CDW2 & 0x00040000) == 0x00040000)))
                        {
                            M460 ("    Disable USB4 ACPI _DEP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Local1 = \DIMS /* External reference */
                            M232 (Local1, 0x55, Zero)
                            \DDEP = Zero
                        }
                    }

                    Local2 |= 0x04
                    If ((MSDB == One))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }
                    ElseIf ((M620 != Zero))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((M049 (M620, 0x45) == Zero))
                            {
                                Local2 &= 0xFFFBFFFF
                            }
                        }
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }

                    If ((((CDW1 & One) != One) && CondRefOf (\_SB.M625)))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 (M620, 0x10) != Zero))
                            {
                                Local4 = M049 (M620, 0x43)
                                Local1 = \_SB.M625 ((0x0102 + (Local4 << 0x10)), 0x03E8)
                            }
                        }
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            Return (Arg3)
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CDFAAIG2", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATPX Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0C))
            {
                PX12 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (((M098 & 0x02) == 0x02))
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            M460 ("    Return Supported Functions Bit Vector = 0x%X\n", M160, Zero, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x000C4800
            M162 = M099 /* External reference */
            M460 ("    Return Valid Flags Mask = 0x%X  Flags = 0x%X\n", M161, M162, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
            M460 ("    Set _SB.MACO to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Method (PX12, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            Local0 = M049 (M133, 0x17)
            If ((Local0 != Zero))
            {
                M111 (Local0, (Arg0 & One))
            }

            M460 ("    Set Display Panel Reset to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Name (ATIB, Buffer (0x0100){})
        Name (M291, 0x81)
        Method (ATIF, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x15))
            {
                Return (AF21 ())
            }

            If ((Arg0 == 0x16))
            {
                Return (AF22 ())
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = Zero
            M158 = Zero
            M159 = Zero
            M160 = Zero
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            M460 ("    Return Supported Notifications Mask = 0x%X  Supported Functions Bit Vector = 0x%X\n", M159, M160, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            M161 = 0x03
            Local0 = ((M103 >> 0x18) & 0xFF)
            Local1 = (M103 & 0x03)
            M162 = Local1
            If (((Local0 >= 0xD0) && (Local0 <= 0xD9)))
            {
                M157 = 0x0B
                M163 = Local0
                M291 = Local0
            }
            Else
            {
                M157 = 0x0A
                If ((M291 != 0x81))
                {
                    M291 = 0x81
                }
            }

            M460 ("    Return Flags = 0x%X  Notify Command Code = 0x%X\n", M162, M291, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            ATIB = Zero
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            M460 ("    Return Pending System BIOS Requests                        = 0x%X\n", M174, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Expansion Mode                                      = 0x%X\n", M175, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: Target Graphics Controller           = 0x%X\n", M176, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: State Id                             = 0x%X\n", M177, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: Target Graphics Controller      = 0x%X\n", M178, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: State Id                        = 0x%X\n", M179, Zero, Zero, Zero, Zero, Zero)
            M460 ("           System Power Source                                 = 0x%X\n", M180, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Panel Brightness Backlight Level                    = 0x%X\n", M181, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = 0x%X\n", M301, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M302, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFFFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFFFFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M04A (M133, 0xD4)
            If ((Local0 != Zero))
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M162)
            CreateByteField (ATIB, 0x04, M292)
            CreateByteField (ATIB, 0x05, M293)
            CreateByteField (ATIB, 0x06, M294)
            CreateByteField (ATIB, 0x07, M295)
            CreateByteField (ATIB, 0x08, M296)
            CreateByteField (ATIB, 0x09, M297)
            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Flags                  = 0x%X\n", M162, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Error Code             = 0x%X\n", M292, Zero, Zero, Zero, Zero, Zero)
            If ((M157 > 0x05))
            {
                M460 ("           AC Level               = 0x%X\n", M293, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Level               = 0x%X\n", M294, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Min Input Signal Level = 0x%X\n", M295, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Max Input Signal Level = 0x%X\n", M296, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Count                  = %d\n", M297, Zero, Zero, Zero, Zero, Zero)
                If ((M157 > 0x0A))
                {
                    Local1 = 0x0A
                    While ((Local1 < M157))
                    {
                        Local2 = DerefOf (ATIB [Local1])
                        Local1++
                        Local3 = DerefOf (ATIB [Local1])
                        Local1++
                        Local4 = ((Local1 - 0x0A) >> One)
                        M460 ("           Count[%d]  Luminance Level = 0x%X  Signal Level = %d\n", Local4, Local2, Local3, Zero, Zero, Zero)
                    }
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF21, 0, NotSerialized)
        {
            ATIB = M29A /* External reference */
            CreateWordField (ATIB, Zero, M297)
            CreateWordField (ATIB, 0x02, M157)
            M460 ("    Return Num Devices            = 0x%X\n", M297, Zero, Zero, Zero, Zero, Zero)
            M460 ("    Return Device Structure size  = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            Local0 = Zero
            If (((M297 > Zero) && (M297 < 0x04)))
            {
                While ((Local0 < M297))
                {
                    Local1 = ((Local0 << 0x02) + 0x04)
                    Local2 = (Local1 + 0x02)
                    Local3 = DerefOf (ATIB [Local1])
                    Local4 = DerefOf (ATIB [Local2])
                    M460 ("    Return Device Structure [%d] Flags              = 0x%X\n", Local0, Local3, Zero, Zero, Zero, Zero)
                    M460 ("    Return Device Structure [%d] Bus                = 0x%X\n", Local0, Local4, Zero, Zero, Zero, Zero)
                    Local0++
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF22, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M298)
            CreateDWordField (ATIB, 0x03, M299)
            Local0 = M049 (M133, 0x01F9)
            If ((Local0 >= One))
            {
                M157 = 0x07
                Local0--
                M298 = Local0
                M299 = M04B (M133, 0x01FA)
            }
            Else
            {
                M157 = Zero
                M298 = Zero
                M299 = Zero
            }

            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = %d\n", M298, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M299, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M305)
            CreateByteField (ATIB, 0x03, M306)
            CreateByteField (ATIB, 0x04, M307)
            CreateByteField (ATIB, 0x05, M308)
            CreateByteField (ATIB, 0x06, M309)
            CreateByteField (ATIB, 0x07, M30A)
            CreateByteField (ATIB, 0x08, M30B)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            If ((M157 >= 0x02))
            {
                M460 ("           AC Maximum Performance Limit = %d\n", M305, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Performance Limit  = %d\n", M306, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Battery Limit      = %d\n", M307, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Maximum Performance Limit = %d\n", M308, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Performance Limit  = %d\n", M309, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Battery Limit      = %d\n", M30A, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Battery Saver Limit       = %d\n", M30B, Zero, Zero, Zero, Zero, Zero)
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN0  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                M460 ("    Notify (VGA, 0x%X)\n", M291, Zero, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN1, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN1  Supported Notification Mask = 0x%X  Save Expansion Mode = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN2, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN2  Supported Notification Mask = 0x%X  Thermal State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN3, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN3  Supported Notification Mask = 0x%X  Forced Power State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN4, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN4  Supported Notification Mask = 0x%X  System Power Source = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 != Local1))
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                    Notify (VGA, M291)
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN5  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN6, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN6  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN7, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN7  Supported Notification Mask = 0x%X  Panel Brightness: Backlight Level = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN8, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN8  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFNC  Supported Notification Mask = 0x%X  Power Limit: Target Graphics Controller = 0x%X  Value = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "_ASUS_", "CPUSSDT", 0x01072009)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (C010)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }

            Device (C011)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
            }

            Device (C012)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
            }

            Device (C013)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
            }

            Device (C014)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
            }

            Device (C015)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
            }

            Device (C016)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
            }

            Device (C017)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
            }

            Device (C018)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x18)  // _UID: Unique ID
            }

            Device (C019)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x19)  // _UID: Unique ID
            }

            Device (C01A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1A)  // _UID: Unique ID
            }

            Device (C01B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1B)  // _UID: Unique ID
            }

            Device (C01C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1C)  // _UID: Unique ID
            }

            Device (C01D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1D)  // _UID: Unique ID
            }

            Device (C01E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1E)  // _UID: Unique ID
            }

            Device (C01F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1F)  // _UID: Unique ID
            }
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 2, "AMD", "GPPRPL  ", 0x00000001)
{
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP5.LAN_, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Name (DSEN, 0x01)
    Name (DSI1, 0x5A5A5A5A)
    Scope (\_SB.PCI0.GPP5)
    {
        PowerResource (PWR1, 0x00, 0x0000)
        {
            Name (PWRS, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (PWRS) /* \_SB_.PCI0.GPP5.PWR1.PWRS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                PWRS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                PWRS = Zero
            }
        }

        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWR1
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PWR1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWR1
        })
    }

    If (CondRefOf (\_SB.PCI0.GPP5.LAN))
    {
        Scope (\_SB.PCI0.GPP5.LAN)
        {
            Name (SXXX, One)
            OperationRegion (PCIF, PCI_Config, Zero, 0x0100)
            Field (PCIF, ByteAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   32
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                Local0 = Arg0
                Local1 = Arg1
                Local3 = SXXX /* \_SB_.PCI0.GPP5.LAN_.SXXX */
                M460 ("  LN00 DSEN =0x%X Arg0 = 0x%X  Arg01 = 0x%X \n", DSEN, Arg0, Arg1, Zero, Zero, Zero)
                If (((DSEN == Zero) && (Local3 == One)))
                {
                    If (((Local0 == 0x02) && (Local1 == One)))
                    {
                        If ((DSI1 != 0x5A5A5A5A))
                        {
                            Local2 = DSI1 /* \DSI1 */
                            Local2 &= 0xFFF0
                            OperationRegion (VAIO, SystemIO, Local2, 0x0100)
                            Field (VAIO, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x64), 
                                XX64,   32, 
                                XX68,   32
                            }

                            M460 ("  LN00 Addr =0x%X Arg0 = 0x%X  Arg01 = 0x%X \n", Local2, Arg0, Arg1, Zero, Zero, Zero)
                            XX64 = 0xFFFFFFFF
                            XX68 = 0x8001F000
                            Sleep (0x02)
                            XX64 = 0xFFFFFFFF
                            XX68 = 0x8002F000
                            Sleep (0x02)
                            XX64 = 0xFFFFFFFF
                            XX68 = 0x8003F000
                            Sleep (0x02)
                        }
                    }
                }
            }
        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "AMD", "GPP_PME_", 0x00000001)
{
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP18, DeviceObj)
    External (_SB_.PCI0.GP28, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPPA, DeviceObj)
    External (_SB_.PCI0.GPPB, DeviceObj)
    External (_SB_.PCI0.GPPC, DeviceObj)
    External (_SB_.PCI0.GPPD, DeviceObj)
    External (_SB_.PCI0.GPPE, DeviceObj)
    External (_SB_.PCI0.GPPF, DeviceObj)
    External (_SB_.PCI0.GPPG, DeviceObj)
    External (_SB_.PCI0.GPPH, DeviceObj)
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_GPE)
    {
        Name (ETP0, 0x55)
        Name (ETP1, 0x55)
        Name (ETP2, 0x55)
        Name (ETP3, 0x55)
        Name (ETP4, 0x55)
        Name (ETP5, 0x55)
        Name (ETP6, 0x55)
        Name (ETP7, 0x55)
        Name (ETP8, 0x55)
        Name (ETP9, 0x55)
        Name (ETPA, 0x55)
        Name (ETPB, 0x55)
        Name (ETPC, 0x55)
        Name (ETPD, 0x55)
        Name (ETPE, 0x55)
        Name (ETPF, 0x55)
        Name (ETPG, 0x55)
        Name (ETPH, 0x55)
        Name (ET17, 0x55)
        Name (ET18, 0x55)
        Name (ET28, 0x55)
        Method (_E10, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._E10\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.ETP1 != 0xFF))
            {
                \_GPE.ETP1 = (M017 (Zero, One, 0x02, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP1 == One) || (\_GPE.ETP1 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP1))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP2 != 0xFF))
            {
                \_GPE.ETP2 = (M017 (Zero, One, 0x03, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP2 == One) || (\_GPE.ETP2 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP2))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP3 != 0xFF))
            {
                \_GPE.ETP3 = (M017 (Zero, One, 0x04, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP3 == One) || (\_GPE.ETP3 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP3))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP4 != 0xFF))
            {
                \_GPE.ETP4 = (M017 (Zero, One, 0x05, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP4 == One) || (\_GPE.ETP4 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP4))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP5 != 0xFF))
            {
                \_GPE.ETP5 = (M017 (Zero, One, 0x06, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP5 == One) || (\_GPE.ETP5 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP5))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP5, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, One, 0x06, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP6 != 0xFF))
            {
                \_GPE.ETP6 = (M017 (Zero, One, 0x07, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP6 == One) || (\_GPE.ETP6 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP6))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP6, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, One, 0x07, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x07, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP7 != 0xFF))
            {
                \_GPE.ETP7 = (M017 (Zero, 0x02, One, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP7 == One) || (\_GPE.ETP7 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP2))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 (M620, 0x10) == 0x02))
                            {
                                If (((M049 (M620, 0x52) & 0x02) == Zero))
                                {
                                    M460 ("    Notify (\\_SB.PCI0.GPP2, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Notify (\_SB.PCI0.GPP2, Zero) // Bus Check
                                }
                            }
                        }

                        M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP8 != 0xFF))
            {
                \_GPE.ETP8 = (M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP8 == One) || (\_GPE.ETP8 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP3))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETP9 != 0xFF))
            {
                \_GPE.ETP9 = (M017 (Zero, 0x03, One, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETP9 == One) || (\_GPE.ETP9 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPP4))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPA != 0xFF))
            {
                \_GPE.ETPA = (M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPA == One) || (\_GPE.ETPA == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPA))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPA, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, 0x02, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPB != 0xFF))
            {
                \_GPE.ETPB = (M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPB == One) || (\_GPE.ETPB == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPB))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPB, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, 0x03, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPC != 0xFF))
            {
                \_GPE.ETPC = (M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPC == One) || (\_GPE.ETPC == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPC))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPC, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, 0x04, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPD != 0xFF))
            {
                \_GPE.ETPD = (M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPD == One) || (\_GPE.ETPD == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPD))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPD, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, 0x05, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPE != 0xFF))
            {
                \_GPE.ETPE = (M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPE == One) || (\_GPE.ETPE == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPE))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPE, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, 0x06, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPF != 0xFF))
            {
                \_GPE.ETPF = (M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPF == One) || (\_GPE.ETPF == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPF))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPF, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x03, 0x07, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x07, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPG != 0xFF))
            {
                \_GPE.ETPG = (M017 (Zero, 0x04, One, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPG == One) || (\_GPE.ETPG == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPG))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPG, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPG, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ETPH != 0xFF))
            {
                \_GPE.ETPH = (M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ETPH == One) || (\_GPE.ETPH == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GPPH))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPPH, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPPH, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x04, 0x02, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ET17 != 0xFF))
            {
                \_GPE.ET17 = (M017 (Zero, 0x08, One, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ET17 == One) || (\_GPE.ET17 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GP17))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GP17, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ET18 != 0xFF))
            {
                \_GPE.ET18 = (M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ET18 == One) || (\_GPE.ET18 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GP18))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GP18, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }

            If ((\_GPE.ET28 != 0xFF))
            {
                \_GPE.ET28 = (M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x18) >> 0x10)
                If (((\_GPE.ET28 == One) || (\_GPE.ET28 == 0x03)))
                {
                    If (CondRefOf (\_SB.PCI0.GP28))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GP28, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GP28, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }
            }
        }
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMWLRC", 0x00000001)
{
    External (_SB_.PCI0.GP19.XHC2.RHUB.GHBX.PRT1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2.RHUB.PRT1, DeviceObj)
    External (_SB_.PCI0.GPP6.WLAN, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M112, MethodObj)    // 2 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    If (CondRefOf (\_SB.PCI0.GPP6.WLAN))
    {
        Scope (\_SB.PCI0.GPP6.WLAN)
        {
            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                \_SB.PRWL
            })
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.GP19.XHC2.RHUB.PRT1))
    {
        Scope (\_SB.PCI0.GP19.XHC2.RHUB.PRT1)
        {
            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                \_SB.PRWB
            })
        }
    }

    If (CondRefOf (\_SB.PCI0.GP19.XHC2.RHUB.GHBX.PRT1))
    {
        Scope (\_SB.PCI0.GP19.XHC2.RHUB.GHBX.PRT1)
        {
            Name (YPRR, Package (0x01)
            {
                \_SB.PRWB
            })
        }
    }

    Scope (\_SB)
    {
        Name (WLPS, One)
        PowerResource (PRWL, 0x00, 0x0000)
        {
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                M000 (0x0DC2)
                Local2 = M04B (M290, 0x28)
                If ((Local2 != 0x02))
                {
                    Local0 = M049 (M290, 0x16)
                    Local1 = M04B (M290, 0x12)
                    M112 (Local0, Zero)
                    Sleep (Local1)
                    M112 (Local0, One)
                    Sleep (0x64)
                }

                M000 (0x0DC3)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (WLPS) /* \_SB_.WLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                WLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                WLPS = Zero
            }
        }

        Name (BLPS, One)
        PowerResource (PRWB, 0x00, 0x0000)
        {
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                M000 (0x0DDE)
                Local2 = M04B (M290, 0x45)
                If ((Local2 != 0x02))
                {
                    Local0 = M049 (M290, 0x40)
                    Local1 = M04B (M290, 0x41)
                    M112 (Local0, Zero)
                    Sleep (Local1)
                    M112 (Local0, One)
                    Sleep (0x64)
                }

                M000 (0x0DDF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (BLPS) /* \_SB_.BLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                BLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                BLPS = Zero
            }
        }
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 2, "AMD", "GPIORPL ", 0x00000001)
{
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.SBRG.ATKM, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SBRG.IVGA, FieldUnitObj)
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.UBTC, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUNP, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0004
                    }
            })
            Return (BUNP) /* \_SB_.GPIO._AEI.BUNP */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    M000 (0x3900)
                    Notify (\_SB.PWRB, 0x80) // Status Change
                }
                Case (0x3A)
                {
                    M000 (0x393A)
                    Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    M000 (0x393B)
                    Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
                }
                Case (0x04)
                {
                    M000 (0x3904)
                    M460 ("    Notify(ASL_ODM_SG_DGPU_SCOPE, 0x81)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (((M009 (0x04) == Zero) && (\_SB.PCI0.SBRG.IVGA == Zero)))
                    {
                        Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
                    }

                    \_SB.PCI0.SBRG.ATKM (0xC0)
                }

            }
        }
    }
}



SSDT24
------
DefinitionBlock ("", "SSDT", 2, "AMD", "NVME    ", 0x00000001)
{
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP1._ADR, IntObj)
    External (_SB_.PCI0.GPP1.PWEN, MethodObj)    // 0 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M472, MethodObj)    // 4 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GPP1)
    {
        Name (WD3C, Zero)
        Name (NBRI, 0x5A)
        Name (NBAR, 0x5A)
        Name (NCMD, 0x5A)
        Name (PXDC, 0x5A)
        Name (PXLC, 0x5A)
        Name (PXD2, 0x5A)
        Name (ASMI, 0xB2)
        Name (LCR1, 0x5A5A5A5A)
        Name (LCR2, 0x5A5A5A5A)
        Name (D3PK, Package (0x07)
        {
            Package (0x02)
            {
                "D3 Enabled", 
                Zero
            }, 

            Package (0x02)
            {
                "Reset Pin", 
                0x00000006
            }, 

            Package (0x02)
            {
                "Power Pin", 
                0x00000000
            }, 

            Package (0x02)
            {
                "Clk Req Mask", 
                0xFFFFFCFF
            }, 

            Package (0x02)
            {
                "Tpvperl", 
                0x0032
            }, 

            Package (0x02)
            {
                "Trst-cfg", 
                0x0000
            }, 

            Package (0x05)
            {
                "APM SMI", 
                0x02, 
                0xD1, 
                0xD8, 
                0x5A
            }
        })
        OperationRegion (PSMI, SystemIO, ASMI, 0x02)
        Field (PSMI, AnyAcc, NoLock, Preserve)
        {
            ASMO,   8
        }

        OperationRegion (PMXX, SystemMemory, 0xFED80300, 0x0100)
        Field (PMXX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x78), 
                ,   20, 
            SI3V,   1
        }

        Method (PWEN, 0, NotSerialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP1.PWEN\n", Zero, Zero, Zero, Zero, Zero, Zero)
            OperationRegion (VAMN, SystemMemory, 0xFED80E00, 0x04)
            Field (VAMN, ByteAcc, NoLock, Preserve)
            {
                CLKR,   32
            }

            If (CondRefOf (\_SB.PCI0.GPP1._ADR))
            {
                Name (ADDR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateByteField (ADDR, Zero, PFUN)
                CreateByteField (ADDR, 0x02, PDEV)
                ADDR = \_SB.PCI0.GPP1._ADR /* External reference */
            }

            Local0 = DerefOf (DerefOf (D3PK [One]) [One])
            Local2 = M009 (Local0)
            Local1 = DerefOf (DerefOf (D3PK [0x02]) [One])
            Local3 = One
            Local6 = CLKR /* \_SB_.PCI0.GPP1.PWEN.CLKR */
            If (((Local2 == Zero) && (Local3 == Zero)))
            {
                WD3C = One
                M020 (Zero, PDEV, PFUN, 0x88, LCR2)
                M020 (Zero, PDEV, PFUN, 0x68, LCR1)
                Local4 = DerefOf (DerefOf (D3PK [0x03]) [One])
                CLKR &= Local4
                CLKR = Local6
                Local4 = DerefOf (DerefOf (D3PK [0x04]) [One])
                If ((Local4 != Zero))
                {
                    Sleep (Local4)
                }
                Else
                {
                    Sleep (0x64)
                }

                M472 (Zero, PDEV, PFUN, Zero)
                M010 (Local0, One)
                Local4 = DerefOf (DerefOf (D3PK [0x05]) [One])
                If ((Local4 != Zero))
                {
                    Sleep (Local4)
                }

                Local1 = Zero
                Local2 = 0x2775
                While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
                {
                    Local1 = M017 (Zero, PDEV, PFUN, 0x6B, Zero, 0x08)
                    Local2 = (Local2 - One)
                    Stall (0x63)
                }

                Local0 = M019 (Zero, PDEV, PFUN, 0x18)
                Local1 = ((Local0 & 0xFF00) >> 0x08)
                Local1 = M019 (Local1, Zero, Zero, Zero)
            }
        }

        Method (GPCG, 3, Serialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP1.GPCG Bus = 0x%X Dev = 0x%X Fun = 0x%X\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Local0 = Zero
            Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
            While ((Local1 != Zero))
            {
                Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == 0x10))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
            }

            M460 ("PLA-ASL-_SB.PCI0.GPP1.GPCG Bus = 0x%X Dev = 0x%X Fun = 0x%X PCIe Cap Offset = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (RPCF, 0, NotSerialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP1.RPCF NBRI=0x%X\n", NBRI, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GPP1._ADR))
            {
                Local1 = GPCG (NBRI, Zero, Zero)
                M460 ("PLA-ASL-_SB.PCI0.GPP1.RPCF PXDC = 0x%X PXLC = 0x%X PXD2 = 0x%X NBAR = 0x%X NCMD = 0x%X\n", PXDC, PXLC, PXD2, NBAR, NCMD, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                Local2 = (NCMD & 0xFFFFFBFF)
                M020 (NBRI, Zero, Zero, 0x04, (Local2 | 0x06))
            }
        }

        Method (SPCF, 0, NotSerialized)
        {
            M460 ("PLA-ASL-_SB.PCI0.GPP1.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GPP1._ADR))
            {
                Name (ADDR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateByteField (ADDR, Zero, PFUN)
                CreateByteField (ADDR, 0x02, PDEV)
                ADDR = \_SB.PCI0.GPP1._ADR /* External reference */
                M460 ("PLA-ASL-_SB.PCI0.GPP1.SPCF Dev = 0x%X Func = 0x%X\n", PDEV, PFUN, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, PDEV, PFUN, 0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = GPCG (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
                M460 ("PLA-ASL-_SB.PCI0.GPP1.RPCF NBRI = 0x%X NCMD = 0x%X NBAR = 0x%X \n", NBRI, NCMD, NBAR, Zero, Zero, Zero)
                M460 ("PLA-ASL-_SB.PCI0.GPP1.RPCF PXDC = 0x%X PXLC = 0x%X PXD2 = 0x%X \n", PXDC, PXLC, PXD2, Zero, Zero, Zero)
                LCR1 = M019 (Zero, PDEV, PFUN, 0x68)
                M460 ("PLA-ASL-_SB.PCI0.GPP1.PWDI.LCR1 : %x\n", LCR1, Zero, Zero, Zero, Zero, Zero)
                LCR2 = M019 (Zero, PDEV, PFUN, 0x88)
                M460 ("PLA-ASL-_SB.PCI0.GPP1.PWDI.LCR2 : %x\n", LCR2, Zero, Zero, Zero, Zero, Zero)
            }
        }

        PowerResource (P0NV, 0x00, 0x0000)
        {
            Name (D0NV, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x30AA)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP1.P0NV._STA\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (D0NV) /* \_SB_.PCI0.GPP1.P0NV.D0NV */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x30D0)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP1.P0NV._ON\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = DerefOf (DerefOf (D3PK [Zero]) [One])
                Local1 = DerefOf (DerefOf (D3PK [0x06]) [One])
                Local2 = 0x02
                M460 ("PLA-ASL-\\_SB.PCI0.GPP1.P0NV._ON D3Cold = 0x%X WD3C First = 0x%X SI3V = 0x%X\n", Local0, WD3C, SI3V, Zero, Zero, Zero)
                If ((Local0 == One))
                {
                    PWEN ()
                }

                If (((WD3C == One) || (SI3V == One))){}
                D0NV = One
                M000 (0x30D1)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x30D3)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP1.P0NV._OFF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M000 (0x30D5)
            }
        }

        Device (NVME)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                P0NV
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                P0NV
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                P0NV
            })
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M000 (0x3050)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP1.NVME._PS0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0x3053)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP1.NVME._PS3\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        One
                    }
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMMSLPI", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMDWOV", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMCMN", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.BPTS, MethodObj)    // 1 Arguments
    External (_SB_.BWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0x96C65018, 0x00010113)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128, 
        M631,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & One))))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & 0x03))))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M046 == 0xAA))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        OperationRegion (VARP, SystemMemory, 0xFED8020C, 0x14)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VA0C,   32, 
            Offset (0x0C), 
            VA18,   32, 
            VA1C,   32
        }

        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M602, 3, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            0x3D, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        If ((Arg2 != 0x3D))
        {
            TEMP [0x02] = Arg2
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateAcpi65UPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M602.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (M643, 1, Serialized)
    {
        ToInteger (Arg0, Local0)
        Local1 = Zero
        If ((Local0 != Zero))
        {
            While (((Local1 < 0x20) && ((Local0 & One) == Zero)))
            {
                Local0 >>= One
                Local1 += One
            }
        }

        If ((Local1 >= 0x20))
        {
            Local1 = Zero
        }

        Return (Local1)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
        }
        Else
        {
            Local1 = M013 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0xFF
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
        }
        Else
        {
            Local1 = M011 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local3 = M013 (Local1, (Local2 + 0x0C), 0x12, One)
            Local4 = M013 (Local1, (Local2 + 0x10), 0x08, One)
            If (((Local3 == One) && (Local4 == One)))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x0C), 0x0A, 0x02)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x10), Zero, 0x02)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            M014 (Local1, (Local2 + 0x10), Zero, 0x02, (Arg3 & 0x03))
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x14))
        {
            Local2 = 0x12
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x14))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                Local6 = M453 /* \M453 */
                M453 = Zero
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Local6
                    }

                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Zero
                    }
                }

                M453 = Local6
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            Local4 = M453 /* \M453 */
            M453 = Zero
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Local4
                }

                Local3 = M249 (Zero, Zero, Zero, Local6)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Zero
                }
            }

            M453 = Local4
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((M085 == 0x14))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
                Local0 = M249 (Zero, Zero, Zero, Local7)
            }
        }
    }

    Method (M645, 3, Serialized)
    {
        Local3 = Zero
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Return (Local3)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (Local0)
    }

    Method (M646, 2, Serialized)
    {
        Local0 = Zero
        Local1 = M049 (Arg0, 0x34)
        While ((Local1 != Zero))
        {
            Local2 = M049 (Arg0, Local1)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == Arg1))
            {
                Local0 = Local1
                Break
            }

            Local1 = M049 (Arg0, (Local1 + One))
        }

        M460 ("  FEA-ASL-CpmSearchPcieCapability (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M647, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmDumpPcieRegisters (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local0 = M04B (Arg0, Zero)
            Local1 = 0x7FFFFFFF
            Local1 |= 0x80000000
            If (((Local0 != Zero) && (Local0 != Local1)))
            {
                M644 (Arg0, 0x04, Arg1)
            }
        }
    }

    Method (M648, 3, Serialized)
    {
        Local2 = Zero
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local0 = Zero
        While ((Local0 <= Arg1))
        {
            Local1 = Zero
            While ((Local1 <= Arg2))
            {
                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                    0x0F) & 0x000F8000))
                Local3 |= ((Local1 << 0x0C) & 0x7000)
                Local4 = M04B (M083, Local3)
                If (((Local4 != Local5) && (Local4 != Zero)))
                {
                    Local2 |= (One << Local0)
                }
                ElseIf ((Local1 == Zero))
                {
                    Break
                }

                Local1++
            }

            Local0++
        }

        M460 ("  KER-ASL-CpmSearchPcieDevice (Bus 0x%X) = Device 0x%X Exist\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M649, 1, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = (M04A (Arg0, (Local2 + 0x04)) & 0x7FFF)
                Local1 = (Local0 & 0xFFFC)
                Local0 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmGetPCIePowerState (0x%X) = 0x%X\n", Arg0, Local0, Zero, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M650, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = (M04A (Arg0, (Local2 + 0x04)) & 0x7FFF)
                Local1 = (Local0 & 0xFFFC)
                M04D (Arg0, (Local2 + 0x04), (Local1 | Arg1))
            }
        }

        M460 ("  FEA-ASL-CpmSetPCIePowerState (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M651, 4, Serialized)
    {
        Local0 = M04B (Arg0, Zero)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        If ((((Arg1 != Zero) && (Arg0 != 0xEEEEEEEE)) && (
            (Local0 != Zero) && (Local0 != Local1))))
        {
            M04E (Arg1, (Arg2 + Zero), M04B (Arg0, 0x18))
            M04E (Arg1, (Arg2 + 0x04), M04B (Arg0, 0x1C))
            M04E (Arg1, (Arg2 + 0x08), M04B (Arg0, 0x20))
            M04E (Arg1, (Arg2 + 0x0C), M04B (Arg0, 0x24))
            M04E (Arg1, (Arg2 + 0x10), M04B (Arg0, 0x28))
            M04E (Arg1, (Arg2 + 0x14), M04B (Arg0, 0x2C))
            M04D (Arg1, (Arg2 + 0x18), M04A (Arg0, 0x04))
            M04C (Arg1, (Arg2 + 0x1A), M049 (Arg0, 0x0C))
            M04C (Arg1, (Arg2 + 0x1B), M049 (Arg0, 0x3C))
            Local0 = (Arg0 + M646 (Arg0, One))
            If ((Local0 != Arg0))
            {
                M04D (Arg1, (Arg2 + 0x1C), M04A (Local0, 0x04))
            }
            Else
            {
                M04D (Arg1, (Arg2 + 0x1C), Zero)
            }

            If ((Arg3 == One))
            {
                Local0 = (Arg0 + M646 (Arg0, 0x15))
                If ((Local0 != Arg0))
                {
                    M04E (Arg1, (Arg2 + 0x20), M04B (Local0, 0x08))
                    M04E (Arg1, (Arg2 + 0x24), M04B (Local0, 0x0C))
                    M04E (Arg1, (Arg2 + 0x28), M04B (Local0, 0x10))
                    M04E (Arg1, (Arg2 + 0x2C), M04B (Local0, 0x14))
                    M04E (Arg1, (Arg2 + 0x30), M04B (Local0, 0x18))
                    M04E (Arg1, (Arg2 + 0x34), M04B (Local0, 0x1C))
                }
                Else
                {
                    M04E (Arg1, (Arg2 + 0x20), Zero)
                    M04E (Arg1, (Arg2 + 0x24), Zero)
                    M04E (Arg1, (Arg2 + 0x28), Zero)
                    M04E (Arg1, (Arg2 + 0x2C), Zero)
                    M04E (Arg1, (Arg2 + 0x30), Zero)
                    M04E (Arg1, (Arg2 + 0x34), Zero)
                }
            }
        }
        Else
        {
            M04E (Arg1, (Arg2 + Zero), Zero)
            M04E (Arg1, (Arg2 + 0x04), Zero)
            M04E (Arg1, (Arg2 + 0x08), Zero)
            M04E (Arg1, (Arg2 + 0x0C), Zero)
            M04E (Arg1, (Arg2 + 0x10), Zero)
            M04E (Arg1, (Arg2 + 0x14), Zero)
            M04E (Arg1, (Arg2 + 0x18), Zero)
            M04E (Arg1, (Arg2 + 0x1C), Zero)
            If ((Arg3 == One))
            {
                M04E (Arg1, (Arg2 + 0x20), Zero)
                M04E (Arg1, (Arg2 + 0x24), Zero)
                M04E (Arg1, (Arg2 + 0x28), Zero)
                M04E (Arg1, (Arg2 + 0x2C), Zero)
                M04E (Arg1, (Arg2 + 0x30), Zero)
                M04D (Arg1, (Arg2 + 0x34), Zero)
            }
        }

        M460 ("  FEA-ASL-CpmSavePcieBridgeData (0x%X, 0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        M04E (Arg0, Arg1, Local4)
    }

    Method (M011, 4, Serialized)
    {
        Local1 = M049 (Arg0, Arg1)
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (Arg0, Arg1)
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        M04C (Arg0, Arg1, Local4)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x05
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x10 + (Arg0 * 0x05))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M644, 3, Serialized)
    {
        M460 ("  FEA-ASL-CpmDumpData (0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        If (((Arg1 != One) && ((Arg1 != 0x02) && 
            (Arg1 != 0x04))))
        {
            M460 ("  Arg1: One Data Width is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        ElseIf ((Arg2 > 0x1000))
        {
            M460 ("  Arg2: Total Data Size is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        Else
        {
            Local0 = Zero
            Local1 = Arg0
            M460 ("  0x%X:", Local1, Zero, Zero, Zero, Zero, Zero)
            While ((Local0 < Arg2))
            {
                If ((Arg1 == One))
                {
                    M460 ("  %X", M049 (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    M460 ("  %X", M04A (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x04))
                {
                    M460 ("  %X", M04B (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }

                Local0 += Arg1
                Local1 = (Arg0 + Local0)
                If (((Local1 & 0x0F) == Zero))
                {
                    M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 < Arg2))
                    {
                        M460 ("  0x%X:", (Local1 & 0xFFFFFFF0), Zero, Zero, Zero, Zero, Zero)
                    }
                }
            }
        }

        M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Name (M32C, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x10))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x14))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32C [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        If (((Arg0 != Zero) && (Arg0 != One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x07)
    {
        0x06, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x13, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }, 

        Package (0x05)
        {
            0x12, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x14, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                Local0 = M4F1 (Zero)
                Local0 = M4F1 (One)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (_L1B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMACPV7", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (M27B, One)
    Name (APGE, One)
    Name (ACGE, One)
    Mutex (M27E, 0x00)
    Method (M27D, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpRemovePowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = M249 (Zero, Zero, Zero, 0x01240414)
        M460 ("  ACP_DSP0_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 != Zero))
        {
            M250 (Zero, Zero, Zero, 0x0124101C, One)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241020)
            While ((Local1 != Zero))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241020)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpRemovePowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M27C, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpApplyPowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = M249 (Zero, Zero, Zero, 0x01240414)
        M460 ("  ACP_DSP0_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 != Zero))
        {
            M250 (Zero, Zero, Zero, 0x0124101C, Zero)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241020)
            While ((Local1 != 0x02))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241020)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpApplyPowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M276, 0, Serialized)
    {
        Acquire (M27E, 0xFFFF)
        M460 ("FEA-ASL-CpmPowerGateOn-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        If (!(M278 ^ M279))
        {
            M460 ("FEA-ASL-CpmPowerGateOn-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Release (M27E)
            Return (Zero)
        }

        If ((ACGE == One))
        {
            \_SB.ALIB (0x16, 0xC8)
        }

        If ((APGE == One))
        {
            M000 (0x0DB4)
            If ((M27A == One))
            {
                Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
                Local1 = M019 (Local0, Zero, 0x05, Zero)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27D ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0303)
                Local5 = 0x64
                Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB5)
        }

        M460 ("FEA-ASL-CpmPowerGateOn-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Release (M27E)
    }

    Method (M277, 0, Serialized)
    {
        Acquire (M27E, 0xFFFF)
        M460 ("FEA-ASL-CpmPowerGateOff-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        If (!((M278 == Zero) && (M279 == Zero)))
        {
            M460 ("FEA-ASL-CpmPowerGateOff-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Release (M27E)
            Return (Zero)
        }

        If ((APGE == One))
        {
            M000 (0x0DB6)
            If ((M27A == One))
            {
                Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
                Local1 = M019 (Local0, Zero, 0x05, Zero)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27C ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0301)
                Local5 = 0x64
                Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != 0x02))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB7)
        }

        If ((ACGE == One))
        {
            \_SB.ALIB (0x16, Zero)
        }

        M460 ("FEA-ASL-CpmPowerGateOff-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Release (M27E)
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS0 CpmAcpPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS3 CpmAcpPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M460 ("FEA-ASL-MSG0-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M000 (0x0DEB)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }

                If ((Local4 == One))
                {
                    M250 (Zero, Zero, Zero, 0x00058AE4, Arg0)
                    M250 (Zero, Zero, Zero, 0x00058AE0, Arg1)
                    M250 (Zero, Zero, Zero, 0x00058A30, Arg2)
                    Local0 = M249 (Zero, Zero, Zero, 0x00058AE4)
                    While ((Local0 == Zero))
                    {
                        Local0 = M249 (Zero, Zero, Zero, 0x00058AE4)
                        If ((Local0 != Zero))
                        {
                            Break
                        }
                    }

                    M000 (0x0DEC)
                    Local1 = M249 (Zero, Zero, Zero, 0x00058AE0)
                    M460 ("FEA-ASL-MSG0-End-1-Return 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    Return (Local1)
                }
                Else
                {
                    M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
                    Return (0xFFFFFFFF)
                }
            }

            Name (MBOX, Buffer (0x04){})
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x0DEE)
                M460 ("FEA-ASL-MSG0-End-3-Return 0x%X-Command Fail\n", Local0, Zero, Zero, Zero, Zero, Zero)
            }
            Else
            {
                M000 (0x0DED)
                M460 ("FEA-ASL-MSG0-End-2-Return 0x%X\n", Local0, Zero, Zero, Zero, Zero, Zero)
            }

            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS0 CpmAzaliaPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS3 CpmAzaliaPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = Zero
            M277 ()
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "EXTGPP00", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPPY, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GPP0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GPP2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x02, 
            0x04
        })
    }

    If (CondRefOf (\_SB.PCI0.GPPY))
    {
        Scope (\_SB.PCI0.GPPY)
        {
            PowerResource (PWR1, 0x00, 0x0000)
            {
                Name (PWR2, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (PWR2) /* \_SB_.PCI0.GPPY.PWR1.PWR2 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PWR2 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    PWR2 = Zero
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWR1
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWR1
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWR1
            })
        }
    }

    If (CondRefOf (\_SB.PCI0.GPP2))
    {
        Scope (\_SB.PCI0.GPP2)
        {
            PowerResource (PWR1, 0x00, 0x0000)
            {
                Name (PWR2, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (PWR2) /* \_SB_.PCI0.GPP2.PWR1.PWR2 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PWR2 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    PWR2 = Zero
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWR1
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWR1
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWR1
            })
        }
    }

    Scope (\_GPE)
    {
        Name (NGP0, 0x01)
        Name (NGP2, 0x01)
        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L02\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP2 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP0 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFIG2", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A, M240, One)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "UPEPRPL ", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.SBRG.ADTM, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SBRG.ALED, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SBRG.FANM, FieldUnitObj)
    External (_SB_.PCI0.SBRG.HOTF, IntObj)
    External (_SB_.PCI0.SBRG.INPS, FieldUnitObj)
    External (_SB_.PCI0.SBRG.IO60, FieldUnitObj)
    External (_SB_.PCI0.SBRG.IO64, FieldUnitObj)
    External (_SB_.PCI0.SBRG.KBFL, FieldUnitObj)
    External (_SB_.PCI0.SBRG.L95I, FieldUnitObj)
    External (_SB_.PCI0.SBRG.LIDC, IntObj)
    External (_SB_.PCI0.SBRG.MDSA, IntObj)
    External (_SB_.PCI0.SBRG.MDSE, IntObj)
    External (_SB_.PCI0.SBRG.MS01, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.SBRG.MSCK, FieldUnitObj)
    External (_SB_.PCI0.SBRG.MSIN, FieldUnitObj)
    External (_SB_.PCI0.SBRG.NDSE, FieldUnitObj)
    External (_SB_.PCI0.SBRG.NEDP, FieldUnitObj)
    External (_SB_.PCI0.SBRG.OUTS, FieldUnitObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0)
    {
        Name (_DEP, Package (0x01)  // _DEP: Dependencies
        {
            \_SB.PEP
        })
    }

    Scope (\_SB)
    {
        Device (PEP)
        {
            Name (_HID, "AMDI0008")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PRMD, Zero)
            Name (DEV0, Package (0x03)
            {
                Zero, 
                0x2C, 
                Package (0x2C)
                {
                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C000", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C001", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C002", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C003", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C004", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C005", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C006", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C007", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C008", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C009", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00A", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00B", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00C", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00D", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00E", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00F", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C010", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C011", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C012", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C013", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C014", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C015", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C016", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C017", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C018", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C019", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C01A", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C01B", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C01C", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C01D", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C01E", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C01F", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP5.GLAN", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP6", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP6.WLAN", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP1.NVME", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP3.NVME", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.VGA", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.AZAL", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.ACP", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC1", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP19.XHC2", 
                        Zero, 
                        0x03
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (0x02)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x3F                                             // ?
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (DEV0) /* \_SB_.PEP_.DEV0 */
                        }
                        Case (0x02)
                        {
                            M000 (0x3E14)
                            Return (Zero)
                        }
                        Case (0x03)
                        {
                            M000 (0x3E15)
                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            M000 (0x3E12)
                            Return (Zero)
                        }
                        Case (0x05)
                        {
                            M000 (0x3E13)
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    Name (TMPD, Zero)
                    Name (FFNT, Zero)
                    Mutex (PEPM, 0x00)
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0xF9, 0x01                                       // ..
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x03)
                        {
                            M000 (0x3E03)
                            \_SB.PCI0.SBRG.MSCK = One
                            \_SB.PCI0.SBRG.KBFL = One
                            \_SB.PCI0.SBRG.HOTF = One
                            \_SB.PCI0.SBRG.ALED (Zero)
                            \_SB.PCI0.SBRG.MS01 (\_SB.PCI0.SBRG.MDSA, \_SB.PCI0.SBRG.MDSE)
                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            M000 (0x3E04)
                            \_SB.PCI0.SBRG.MSCK = Zero
                            M010 (0x02, One)
                            \_SB.PCI0.SBRG.NDSE = Zero
                            If (((\_SB.PCI0.SBRG.MSIN == One) || (\_SB.PCI0.SBRG.L95I == One)))
                            {
                                \_SB.PCI0.SBRG.L95I = Zero
                                \_SB.PCI0.SBRG.MSIN = Zero
                                \_SB.PCI0.SBRG.ADTM (Zero)
                            }

                            If ((\_SB.PCI0.SBRG.LIDC == Zero))
                            {
                                \_SB.PCI0.SBRG.HOTF = Zero
                            }

                            \_SB.PCI0.SBRG.ALED (0x02)
                            Local0 = (\_SB.PCI0.SBRG.MDSA & 0xFFFF)
                            \_SB.PCI0.SBRG.MS01 (Local0, Zero)
                            If ((\_SB.PCI0.SBRG.KBFL == Zero))
                            {
                                Acquire (PEPM, 0x07D0)
                                If ((\_SB.PCI0.SBRG.OUTS == Zero))
                                {
                                    While (\_SB.PCI0.SBRG.INPS){}
                                    \_SB.PCI0.SBRG.IO64 = 0xAA
                                    FFNT = 0x14
                                    While (!\_SB.PCI0.SBRG.OUTS)
                                    {
                                        FFNT -= One
                                        If ((FFNT == Zero))
                                        {
                                            Break
                                        }

                                        Sleep (0x32)
                                    }

                                    While (\_SB.PCI0.SBRG.OUTS)
                                    {
                                        TMPD = \_SB.PCI0.SBRG.IO60 /* External reference */
                                    }
                                }

                                Release (PEPM)
                            }

                            Return (Zero)
                        }
                        Case (0x05)
                        {
                            M000 (0x3E05)
                            \_SB.PCI0.SBRG.NDSE = One
                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            M000 (0x3E06)
                            Acquire (PEPM, 0x07D0)
                            While (\_SB.PCI0.SBRG.OUTS)
                            {
                                TMPD = \_SB.PCI0.SBRG.IO60 /* External reference */
                            }

                            Release (PEPM)
                            Return (Zero)
                        }
                        Case (0x07)
                        {
                            M000 (0x3E07)
                            \_SB.PCI0.SBRG.MSIN = One
                            Return (Zero)
                        }
                        Case (0x08)
                        {
                            M000 (0x3E08)
                            \_SB.PCI0.SBRG.KBFL = Zero
                            Acquire (PEPM, 0x07D0)
                            While (\_SB.PCI0.SBRG.OUTS)
                            {
                                TMPD = \_SB.PCI0.SBRG.IO60 /* External reference */
                            }

                            Release (PEPM)
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : B9
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000FD210510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 0000000096C51000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 B9 5F 41 53 55 53 5F  // TPM2L....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 41 4D 49 20  // Notebook....AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 10 C5 96 00 00 00 00              // ............


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000AE84
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 74
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD"
[020h 0032 004h]       Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 44676 (0xAE84)

    0000: 56 46 43 54 84 AE 00 00 01 74 5F 41 53 55 53 5F  // VFCT.....t_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 41 4D 44 00  // Notebook....AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 4E 16 00 00 00 00  // ..........N.....
    0060: 01 00 00 00 00 AE 00 00 55 AA 57 E9 4E 23 00 00  // ........U.W.N#..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B8 01 00 00 00 00 49 42 4D CD 24 A1 00 00 00 00  // ......IBM.$.....
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 8A 01 00 00 00 00 00 00 30 39 2F 32 36 2F 32 32  // ........09/26/22
    00C0: 2C 32 32 3A 31 39 3A 32 34 00 00 00 E9 83 24 00  // ,22:19:24.....$.
    00D0: E9 8D 24 00 00 00 70 00 31 30 32 2D 52 41 50 48  // ..$...p.102-RAPH
    00E0: 41 45 4C 2D 30 30 38 00 52 41 50 48 41 45 4C 00  // AEL-008.RAPHAEL.
    00F0: 50 43 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A  // PCI_EXPRESS.0...
    0100: 52 61 70 68 61 65 6C 20 47 65 6E 65 72 69 63 20  // Raphael Generic 
    0110: 56 42 49 4F 53 20 20 20 20 20 20 20 20 20 20 20  // VBIOS           
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D  //             ....
    0150: 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30  // . ...(C) 1988-20
    0160: 32 30 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63  // 20, Advanced Mic
    0170: 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E  // ro Devices, Inc.
    0180: 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20  // .ATOMBIOSBK-AMD 
    0190: 56 45 52 30 33 32 2E 30 31 39 2E 30 30 30 2E 30  // VER032.019.000.0
    01A0: 30 38 2E 30 30 30 30 30 30 00 52 70 6C 47 65 6E  // 08.000000.RplGen
    01B0: 65 72 69 63 56 62 00 32 33 39 34 30 31 32 20 00  // ericVb.2394012 .
    01C0: 36 31 32 31 32 37 20 20 00 20 20 20 20 20 20 20  // 612127  .       
    01D0: 20 00 41 4D 44 5F 52 41 50 48 41 45 4C 5F 47 45  //  .AMD_RAPHAEL_GE
    01E0: 4E 45 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00 00  // NERIC\config.h..
    01F0: 00 90 2C 00 02 03 41 54 4F 4D 00 C0 56 24 42 01  // ..,...ATOM..V$B.
    0200: DD 01 96 00 C8 24 00 00 00 00 02 10 02 10 B8 01  // .....$..........
    0210: 70 A4 10 02 00 00 00 00 00 00 00 02 03 00 00 00  // p...............
    0220: 50 43 49 52 02 10 4E 16 00 00 18 00 00 00 00 03  // PCIR..N.........
    0230: 57 00 13 20 00 80 00 00 41 4D 44 20 41 54 4F 4D  // W.. ....AMD ATOM
    0240: 42 49 4F 53 00 7F E8 11 8E 00 00 00 00 00 00 00  // BIOS............
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    0280: 00 00 28 20 5C 02 98 21 C8 02 18 03 14 05 00 00  // ..( \..!........
    0290: 00 00 30 05 3C 05 CC 21 90 05 00 00 00 00 70 22  // ..0.<..!......p"
    02A0: 00 00 00 00 00 00 00 00 84 22 20 20 00 00 BC 0A  // ........."  ....
    02B0: 00 00 E8 05 00 00 00 00 BC 06 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 6C 00 03 04 08 00 13 20 20 4E 00 00  // ....l......  N..
    02D0: 20 4E 00 00 01 00 00 00 00 00 00 00 4C 00 00 00  //  N..........L...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 F4 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 8A 02 FC 13  // ................
    0330: 50 00 03 01 C8 00 00 00 00 00 00 00 00 00 00 00  // P...............
    0340: 7D 00 00 02 FF 00 00 00 00 00 00 00 00 00 00 00  // }...............
    0350: 00 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 7D 00 00 02 FF 00 00 00 00 00 00 00 00 00 00 00  // }...............
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: FC 01 05 04 10 00 38 00 4C 00 60 01 9B 01 48 00  // ......8.L.`...H.
    0390: 30 75 00 00 0C 00 1F 05 39 50 00 00 40 9C 00 00  // 0u......9P..@...
    03A0: 0C 00 1F 05 3E 00 00 00 FF FF FF 00 0C 00 1F 05  // ....>...........
    03B0: 6F A1 00 00 00 00 00 00 FF FF FF 00 0C 00 1F 02  // o...............
    03C0: 3E 00 00 00 00 00 00 00 00 00 00 00 48 3F 00 00  // >...........H?..
    03D0: 1F 00 44 00 00 16 00 00 00 05 01 1F 00 00 00 05  // ..D.............
    03E0: 02 2C 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00  // .,.....>......P.
    03F0: 00 05 09 25 60 00 00 05 0A 35 90 00 00 05 10 21  // ...%`....5.....!
    0400: B0 00 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05  // ...../.....*@...
    0410: 78 69 00 00 1F 00 44 00 00 16 00 00 00 05 01 1F  // xi....D.........
    0420: 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05  // .....,.....>....
    0430: 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35 90 00  // ..P....%`....5..
    0440: 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A  // ...!...../.....*
    0450: 40 01 00 05 F0 D2 00 00 1F 00 44 00 00 1E 00 00  // @.........D.....
    0460: 00 05 01 26 00 00 00 05 02 30 00 00 00 05 03 3E  // ...&.....0.....>
    0470: 00 00 00 05 08 22 40 00 00 05 09 2C 60 00 00 05  // ....."@....,`...
    0480: 0A 37 70 00 00 05 10 27 90 00 00 05 11 32 C0 00  // .7p....'.....2..
    0490: 00 05 18 2E 00 01 00 05 68 3C 01 00 1F 00 44 00  // ........h<....D.
    04A0: 00 1E 00 00 00 05 01 26 00 00 00 05 02 30 00 00  // .......&.....0..
    04B0: 00 05 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C  // ...>....."@....,
    04C0: 60 00 00 05 0A 37 70 00 00 05 10 27 90 00 00 05  // `....7p....'....
    04D0: 11 32 C0 00 00 05 18 2E 00 01 00 05 00 00 00 00  // .2..............
    04E0: 00 01 02 03 00 01 02 03 00 07 05 00 00 01 02 03  // ................
    04F0: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    0500: 00 07 05 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    0510: 01 02 03 00 01 02 03 00 07 05 00 08 30 00 00 87  // ............0...
    0520: 00 00 00 07 30 00 00 B2 25 00 00 08 31 00 00 87  // ....0...%...1...
    0530: 00 00 00 07 31 00 00 B2 25 00 00 08 32 00 00 87  // ....1...%...2...
    0540: 00 00 00 07 32 00 00 B2 25 00 00 08 33 00 00 87  // ....2...%...3...
    0550: 00 00 00 07 33 00 00 B2 25 00 00 5A 00 00 00 05  // ....3...%..Z....
    0560: 00 00 00 47 00 00 00 30 00 00 00 54 00 00 00 30  // ...G...0...T...0
    0570: 00 00 00 FF FF FF FF 00 00 00 00 00 1C 00 03 01  // ................
    0580: 00 0D 00 00 00 00 00 00 00 00 00 00 10 27 00 00  // .............'..
    0590: FF 00 FF 00 FF 00 00 00 0C 00 02 01 00 00 00 00  // ................
    05A0: 00 00 00 00 54 00 02 01 B5 5D 00 00 00 00 01 00  // ....T....]......
    05B0: B5 5D 00 00 08 08 02 00 B5 5D 00 00 10 10 03 00  // .].......]......
    05C0: B5 5D 00 00 18 14 04 00 B5 5D 00 00 1A 18 05 00  // .].......]......
    05D0: 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08 91 00  // .].......]......
    05E0: 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08 93 00  // .].......]......
    05F0: A1 5D 00 00 08 08 94 00 58 00 02 06 03 0A 01 00  // .]......X.......
    0600: 04 01 02 02 64 C0 00 00 65 C0 00 00 66 C0 00 00  // ....d...e...f...
    0610: 67 C0 00 00 E8 C0 00 00 A0 21 00 00 2E 6A 01 00  // g........!...j..
    0620: 10 27 00 00 04 02 01 00 00 00 00 00 9F 0F 00 00  // .'..............
    0630: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: D4 00 04 04 40 00 00 00 24 F4 00 00 60 09 60 09  // ....@...$...`.`.
    0660: 00 00 00 00 00 00 00 00 5E 01 4E 0C 01 01 00 00  // ........^.N.....
    0670: 55 00 00 00 60 09 4E 16 01 03 04 01 00 05 05 00  // U...`.N.........
    0680: 00 00 00 00 00 46 C3 23 00 00 00 00 00 00 00 00  // .....F.#........
    0690: 00 00 00 00 54 00 01 00 00 00 00 00 00 00 00 00  // ....T...........
    06A0: 00 00 00 00 10 11 3D 10 4D 1C 02 00 00 45 00 00  // ......=.M....E..
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    06C0: 22 22 02 00 AA F2 01 00 00 00 00 00 00 00 00 00  // ""..............
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 00 04 02 02 00 00 00 00 C0 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22 02  // ..............".
    0740: 00 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    07C0: 00 00 E4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 00 00 00 08 00 10 02 13 31 02 02  // .............1..
    07E0: 00 00 E4 00 00 01 30 00 80 00 20 02 13 32 03 03  // ......0... ..2..
    07F0: 00 00 E4 00 00 01 30 00 00 02 30 02 13 33 04 04  // ......0...0..3..
    0800: 00 00 E4 00 00 01 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 FC 13 01 00 00 1F 00 00 00 00 00 00  // ................
    0B30: 48 3F 00 00 05 02 00 07 03 00 00 16 00 00 00 00  // H?..............
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0B50: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 1F  // ....H?..........
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 1F 02 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0B80: 03 00 00 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    0B90: 00 00 00 00 00 1F 03 00 00 00 00 00 48 3F 00 00  // ............H?..
    0BA0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0BB0: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0BC0: 48 3F 00 00 05 02 00 07 03 00 00 1B 05 00 00 00  // H?..............
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    0BE0: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 25  // ....H?.........%
    0BF0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 1F 0A 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0C10: 03 00 00 35 09 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    0C20: 00 00 00 00 00 1F 10 00 00 00 00 00 48 3F 00 00  // ............H?..
    0C30: 05 02 00 07 03 00 00 21 0B 00 00 00 00 00 00 00  // .......!........
    0C40: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    0C50: 48 3F 00 00 05 02 00 07 03 00 00 2F 0F 00 00 00  // H?........./....
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0C70: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 2A  // ....H?.........*
    0C80: 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 1F 00 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0CA0: 03 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 1F 01 00 00 00 00 00 78 69 00 00  // ............xi..
    0CC0: 05 02 00 07 03 00 00 1F 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    0CE0: 78 69 00 00 05 02 00 07 03 00 00 2C 00 00 00 00  // xi.........,....
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0D00: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 3E  // ....xi.........>
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 00 1F 08 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0D30: 03 00 00 1B 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 1F 09 00 00 00 00 00 78 69 00 00  // ............xi..
    0D50: 05 02 00 07 03 00 00 25 06 00 00 00 00 00 00 00  // .......%........
    0D60: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    0D70: 78 69 00 00 05 02 00 07 03 00 00 35 09 00 00 00  // xi.........5....
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0D90: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 21  // ....xi.........!
    0DA0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 1F 11 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0DC0: 03 00 00 2F 0F 00 00 00 00 00 00 00 00 00 00 00  // .../............
    0DD0: 00 00 00 00 00 1F 18 00 00 00 00 00 78 69 00 00  // ............xi..
    0DE0: 05 02 00 07 03 00 00 2A 14 00 00 00 00 00 00 00  // .......*........
    0DF0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    0E00: F0 D2 00 00 05 02 00 07 03 00 00 1D 00 00 00 00  // ................
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0E20: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 26  // ...............&
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 1F 02 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0E50: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0E60: 00 00 00 00 00 1F 03 00 00 00 00 00 F0 D2 00 00  // ................
    0E70: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0E80: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0E90: F0 D2 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // ..........."....
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    0EB0: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 2C  // ...............,
    0EC0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 1F 0A 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0EE0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    0EF0: 00 00 00 00 00 1F 10 00 00 00 00 00 F0 D2 00 00  // ................
    0F00: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    0F10: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    0F20: F0 D2 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // ...........2....
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0F40: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 2E  // ................
    0F50: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F60: 00 1F 00 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    0F70: 03 00 00 1D 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F80: 00 00 00 00 00 1F 01 00 00 00 00 00 68 3C 01 00  // ............h<..
    0F90: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    0FA0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    0FB0: 68 3C 01 00 05 02 00 07 03 00 00 30 00 00 00 00  // h<.........0....
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0FD0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 3E  // ....h<.........>
    0FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 00 1F 08 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1000: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1010: 00 00 00 00 00 1F 09 00 00 00 00 00 68 3C 01 00  // ............h<..
    1020: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1030: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1040: 68 3C 01 00 05 02 00 07 03 00 00 37 07 00 00 00  // h<.........7....
    1050: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1060: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 27  // ....h<.........'
    1070: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 1F 11 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1090: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    10A0: 00 00 00 00 00 1F 18 00 00 00 00 00 68 3C 01 00  // ............h<..
    10B0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    10C0: 00 00 00 00 00 00 00 00 08 1F 00 00 00 00 00 00  // ................
    10D0: A0 86 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    10E0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 01 00  // ................
    10F0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 38  // ...............8
    1100: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 08 1F 02 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1120: 03 00 00 33 0B 00 00 00 00 00 00 00 00 00 00 00  // ...3............
    1130: 00 00 00 00 08 1F 03 00 00 00 00 00 A0 86 01 00  // ................
    1140: 05 02 00 07 03 00 00 30 0E 00 00 00 00 00 00 00  // .......0........
    1150: 00 00 00 00 00 00 00 00 08 1F 04 00 00 00 00 00  // ................
    1160: A0 86 01 00 05 02 00 07 03 00 00 2B 13 00 00 00  // ...........+....
    1170: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 05 00  // ................
    1180: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 3B  // ...............;
    1190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11A0: 08 1F 06 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    11B0: 03 00 03 35 06 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    11C0: 00 00 00 00 08 1F 07 00 00 00 00 00 A0 86 01 00  // ................
    11D0: 05 02 00 07 03 00 03 31 0A 00 00 00 00 00 00 00  // .......1........
    11E0: 00 00 00 00 00 00 00 00 08 1F 08 00 00 00 00 00  // ................
    11F0: A0 86 01 00 05 02 00 07 03 00 03 2D 0E 00 00 00  // ...........-....
    1200: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 09 00  // ................
    1210: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 2A  // ...............*
    1220: 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1230: 08 1F 0A 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1240: 03 00 06 38 00 00 00 00 00 00 00 00 00 00 00 00  // ...8............
    1250: 00 00 00 00 08 1F 0B 00 00 00 00 00 A0 86 01 00  // ................
    1260: 05 02 00 07 03 00 06 32 06 00 00 00 00 00 00 00  // .......2........
    1270: 00 00 00 00 00 00 00 00 08 1F 0C 00 00 00 00 00  // ................
    1280: A0 86 01 00 05 02 00 07 03 00 06 2F 09 00 00 00  // .........../....
    1290: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0D 00  // ................
    12A0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 2B  // ...............+
    12B0: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 08 1F 0E 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    12D0: 03 00 0A 33 00 00 00 00 00 00 00 00 00 00 00 00  // ...3............
    12E0: 00 00 00 00 08 1F 0F 00 00 00 00 00 A0 86 01 00  // ................
    12F0: 05 02 00 07 03 00 03 22 03 00 00 00 00 00 00 00  // ......."........
    1300: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    1310: 60 54 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  // `T..............
    1320: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    1330: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 26  // ....`T.........&
    1340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 00 1F 02 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    1360: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1370: 00 00 00 00 00 1F 03 00 00 00 00 00 60 54 00 00  // ............`T..
    1380: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1390: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    13A0: 60 54 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // `T........."....
    13B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    13C0: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 2C  // ....`T.........,
    13D0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13E0: 00 1F 0A 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    13F0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    1400: 00 00 00 00 00 1F 10 00 00 00 00 00 60 54 00 00  // ............`T..
    1410: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    1420: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    1430: 60 54 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // `T.........2....
    1440: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    1450: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 2E  // ....`T..........
    1460: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1470: 00 1F 00 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    1480: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1490: 00 00 00 00 00 1F 01 00 00 00 00 00 EC 5E 00 00  // .............^..
    14A0: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    14B0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    14C0: EC 5E 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // .^.........0....
    14D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    14E0: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 3E  // .....^.........>
    14F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 00 1F 08 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    1510: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1520: 00 00 00 00 00 1F 09 00 00 00 00 00 EC 5E 00 00  // .............^..
    1530: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1540: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1550: EC 5E 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // .^.........7....
    1560: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1570: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 27  // .....^.........'
    1580: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 1F 11 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    15A0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    15B0: 00 00 00 00 00 1F 18 00 00 00 00 00 EC 5E 00 00  // .............^..
    15C0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    15E0: 90 7E 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  // .~..............
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    1600: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 26  // .....~.........&
    1610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1620: 00 1F 02 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    1630: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1640: 00 00 00 00 00 1F 03 00 00 00 00 00 90 7E 00 00  // .............~..
    1650: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1660: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    1670: 90 7E 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // .~........."....
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    1690: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 2C  // .....~.........,
    16A0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16B0: 00 1F 0A 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    16C0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    16D0: 00 00 00 00 00 1F 10 00 00 00 00 00 90 7E 00 00  // .............~..
    16E0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    16F0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    1700: 90 7E 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // .~.........2....
    1710: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    1720: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 2E  // .....~..........
    1730: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1740: 00 1F 00 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    1750: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1760: 00 00 00 00 00 1F 01 00 00 00 00 00 C0 A8 00 00  // ................
    1770: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    1780: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    1790: C0 A8 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // ...........0....
    17A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    17B0: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 3E  // ...............>
    17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 1F 08 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    17E0: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    17F0: 00 00 00 00 00 1F 09 00 00 00 00 00 C0 A8 00 00  // ................
    1800: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1810: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1820: C0 A8 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // ...........7....
    1830: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1840: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 27  // ...............'
    1850: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1860: 00 1F 11 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    1870: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    1880: 00 00 00 00 00 1F 18 00 00 00 00 00 C0 A8 00 00  // ................
    1890: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    18A0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    18B0: 20 FD 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  //  ...............
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    18D0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 26  // .... ..........&
    18E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18F0: 00 1F 02 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1900: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1910: 00 00 00 00 00 1F 03 00 00 00 00 00 20 FD 00 00  // ............ ...
    1920: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1930: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    1940: 20 FD 00 00 05 02 00 07 03 00 00 22 04 00 00 00  //  .........."....
    1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    1960: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 2C  // .... ..........,
    1970: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1980: 00 1F 0A 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1990: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    19A0: 00 00 00 00 00 1F 10 00 00 00 00 00 20 FD 00 00  // ............ ...
    19B0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    19C0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    19D0: 20 FD 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  //  ..........2....
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    19F0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 2E  // .... ...........
    1A00: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 1F 00 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1A20: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 1F 01 00 00 00 00 00 AC 07 01 00  // ................
    1A40: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    1A50: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    1A60: AC 07 01 00 05 02 00 07 03 00 00 30 00 00 00 00  // ...........0....
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    1A80: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 3E  // ...............>
    1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 00 1F 08 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1AB0: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1AC0: 00 00 00 00 00 1F 09 00 00 00 00 00 AC 07 01 00  // ................
    1AD0: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1AE0: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1AF0: AC 07 01 00 05 02 00 07 03 00 00 37 07 00 00 00  // ...........7....
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1B10: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 27  // ...............'
    1B20: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 00 1F 11 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1B40: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    1B50: 00 00 00 00 00 1F 18 00 00 00 00 00 AC 07 01 00  // ................
    1B60: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    1B70: 00 00 00 00 00 00 00 00 02 1F 00 00 00 00 00 00  // ................
    1B80: 30 75 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // 0u.........>....
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 02 1F 00 00  // ................
    1BA0: 00 00 00 00 40 9C 00 00 05 02 00 07 03 00 00 3E  // ....@..........>
    1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BC0: 02 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1BD0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1BE0: 00 00 00 00 03 1F 00 00 00 00 00 00 30 75 00 00  // ............0u..
    1BF0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1C00: 00 00 00 00 00 00 00 00 03 1F 00 00 00 00 00 00  // ................
    1C10: 40 9C 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // @..........>....
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 03 1F 00 00  // ................
    1C30: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 00 3E  // ....`..........>
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 04 1F 00 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    1C60: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1C70: 00 00 00 00 04 1F 01 00 00 00 00 00 30 75 00 00  // ............0u..
    1C80: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1C90: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1CA0: 30 75 00 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // 0u.........,....
    1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1CC0: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 05 29  // ....0u.........)
    1CD0: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CE0: 04 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1CF0: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1D00: 00 00 00 00 04 1F 01 00 00 00 00 00 60 EA 00 00  // ............`...
    1D10: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1D20: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1D30: 60 EA 00 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // `..........,....
    1D40: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1D50: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 29  // ....`..........)
    1D60: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: 04 1F 00 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    1D80: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1D90: 00 00 00 00 04 1F 01 00 00 00 00 00 80 38 01 00  // .............8..
    1DA0: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1DB0: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1DC0: 80 38 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // .8.........,....
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1DE0: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 29  // .....8.........)
    1DF0: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E00: 04 1F 00 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1E10: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1E20: 00 00 00 00 04 1F 01 00 00 00 00 00 A0 86 01 00  // ................
    1E30: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1E40: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1E50: A0 86 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // ...........,....
    1E60: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1E70: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 05 29  // ...............)
    1E80: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E90: 04 1F 00 00 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
    1EA0: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1EB0: 00 00 00 00 04 1F 01 00 00 00 00 00 C0 D4 01 00  // ................
    1EC0: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1ED0: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1EE0: C0 D4 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // ...........,....
    1EF0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1F00: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 29  // ...............)
    1F10: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2080: 00 00 00 00 00 00 00 00 08 00 01 01 00 00 00 00  // ................
    2090: 70 01 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // p...........-...
    20A0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    20B0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    20C0: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    20D0: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    20E0: 00 00 00 00 06 00 55 3C 01 1D 00 05 72 01 D0 02  // ......U<....r...
    20F0: 1E 00 6E 00 28 00 05 00 05 00 00 00 00 00 00 00  // ..n.(...........
    2100: 00 00 E8 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ...<0*......(.`.
    2110: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    2120: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    2130: 03 00 00 00 00 00 00 00 00 00 EA 3C 66 21 56 05  // ...........<f!V.
    2140: AA 01 00 03 1E 00 46 00 8F 00 03 00 03 00 00 00  // ......F.........
    2150: 00 00 00 00 02 00 ED 3C 8F 2F 78 05 D0 01 1A 04  // .......<./x.....
    2160: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  // '.X.............
    2170: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  // ...<H?@.0...2.@.
    2180: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  // ...............<
    2190: 02 3A 80 07 18 01 38 04 2D 00 58 00 2C 00 04 00  // .:....8.-.X.,...
    21A0: 05 00 00 00 00 00 00 00 02 00 F3 3C 7D 4B 80 07  // ...........<}K..
    21B0: A0 02 B0 04 2D 00 88 00 C8 00 03 00 06 00 00 00  // ....-...........
    21C0: 00 00 00 00 02 00 F0 3C 68 5B 80 07 A8 02 A0 05  // .......<h[......
    21D0: 3C 00 80 00 D0 00 01 00 03 00 00 00 00 00 00 00  // <...............
    21E0: 02 00 F1 3C 32 96 00 0A B0 03 40 06 3A 00 C0 00  // ...<2.....@.:...
    21F0: 18 01 03 00 06 00 00 00 00 00 00 00 02 00 F2 3C  // ...............<
    2200: 34 00 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // 4........*.*..**
    2210: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    2220: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    2230: 15 3F 3F 3F A4 00 01 01 10 01 06 12 11 01 16 12  // .???............
    2240: 21 01 0A 12 13 01 06 6A 14 01 16 6A 22 01 0A 6A  // !......j...j"..j
    2250: 16 01 06 55 17 01 16 55 23 01 0A 55 63 01 16 E8  // ...U...U#..Uc...
    2260: 64 01 0A E8 65 01 16 E9 66 01 0A E9 19 01 06 EA  // d...e...f.......
    2270: 1A 01 16 EA 24 01 0A EA 47 01 16 ED 48 01 0A ED  // ....$...G...H...
    2280: 45 01 16 EB 46 01 0A EB 75 01 16 EC 76 01 0A EC  // E...F...u...v...
    2290: A5 01 16 F3 A6 01 0A F3 A0 01 16 F0 A1 01 0A F0  // ................
    22A0: A2 01 16 F1 A3 01 0A F1 A4 01 16 F2 A5 01 0A F2  // ................
    22B0: D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71  // ...p...p...q...q
    22C0: E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73  // ...r...r...s...s
    22D0: F5 01 16 74 F6 01 0A 74 14 00 02 02 02 00 08 00  // ...t...t........
    22E0: 80 00 00 02 00 04 00 08 40 00 FF FF CD 00 01 04  // ........@.......
    22F0: 8A 02 06 00 14 31 68 00 1E 21 00 00 95 00 00 00  // .....1h..!......
    2300: 02 00 00 00 00 00 71 00 1E 22 00 00 9C 00 00 00  // ......q.."......
    2310: 00 00 00 00 13 31 7A 00 20 21 00 00 A3 00 00 00  // .....1z. !......
    2320: 08 00 00 00 13 32 83 00 20 22 00 00 AA 00 00 00  // .....2.. "......
    2330: 80 00 00 00 13 33 8C 00 21 21 00 00 B1 00 00 00  // .....3..!!......
    2340: 00 02 00 00 03 71 B8 00 00 00 00 00 00 00 00 00  // .....q..........
    2350: 00 00 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    2360: 00 02 04 00 00 FF 01 04 92 00 02 04 03 00 FF 01  // ................
    2370: 04 93 00 02 04 04 00 FF 01 04 94 00 02 04 05 00  // ................
    2380: FF 14 06 0F 00 00 00 FF 14 06 3F 1E 00 00 FF 14  // ..........?.....
    2390: 06 3F 01 00 00 FF 14 06 3F 01 00 00 FF 14 06 3F  // .?......?......?
    23A0: 01 00 00 FF 10 0A 01 02 03 04 05 00 00 00 11 0A  // ................
    23B0: 90 91 92 93 94 00 00 00 FF 00 00 00 1E 06 66 50  // ..............fP
    23C0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 14  // fQfRfSfUfVfW....
    23D0: 00 8C 0E 08 00 B2 20 E8 A6 1E 0B C0 75 14 A2 02  // ...... .....u...
    23E0: 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    23F0: 1F CB E8 C0 1F E8 F8 00 E8 8F 1D 32 D2 8D 3E 8A  // ...........2..>.
    2400: 01 89 55 16 E8 0C 0D E8 CF 0C E8 01 1C 75 19 E8  // ..U..........u..
    2410: 1A 0E E8 EF 02 E8 67 18 0B C0 74 0C E8 39 00 E8  // ......g...t..9..
    2420: BE 45 E8 C6 0C E8 0D 46 E8 A9 00 B4 80 E8 84 1D  // .E.....F........
    2430: 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 24 A1 E8 EF  // ..f...... f.$...
    2440: 02 E8 D9 0C E8 B1 1F 66 5F 66 5E 66 5D 66 5B 66  // .......f_f^f]f[f
    2450: 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 68  // ZfYfX.........>h
    2460: 24 00 75 04 89 1E 66 24 1E 2E 8E 1E 5E 24 9C FA  // $.u...f$....^$..
    2470: 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 C8 24 89  // f....e.....@..$.
    2480: 1E 42 00 C7 06 B4 01 C8 24 89 1E B6 01 C7 06 7C  // .B......$......|
    2490: 00 06 6F 89 1E 7E 00 C7 06 0C 01 19 73 89 1E 0E  // ..o..~......s...
    24A0: 01 C7 06 A8 04 3E 69 89 1E AA 04 2E 8E 1E 66 24  // .....>i.......f$
    24B0: 8B C3 A3 40 69 A3 50 69 A3 62 69 9D 1F C3 50 4D  // ...@i.Pi.bi...PM
    24C0: 49 44 C8 24 70 59 00 00 00 A0 00 B0 00 B8 00 C0  // ID.$pY..........
    24D0: 00 00 00 00 BB 00 00 E8 2C 0C 66 C1 E8 10 A3 BE  // ........,.f.....
    24E0: 01 BB 0B 00 E8 1F 0C 8D 3E 8A 01 66 89 45 18 C3  // ........>..f.E..
    24F0: 66 50 66 52 51 56 66 B8 52 54 53 5F BA 80 00 66  // fPfRQVf.RTS_...f
    2500: EF B0 56 EE B0 42 EE B0 49 EE B0 4F EE B0 53 EE  // ..V..B..I..O..S.
    2510: B0 20 EE BE 28 01 B9 19 00 AC E6 80 E2 FB 66 B8  // . ..(.........f.
    2520: 44 4E 45 5F BA 80 00 66 EF 5E 59 66 5A 66 58 C3  // DNE_...f.^YfZfX.
    2530: E8 A0 1E 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F  // ......u..=.....O
    2540: 75 05 E8 B9 33 EB 07 E8 0E 39 EB 02 B4 01 E8 A7  // u...3....9......
    2550: 1E CF E8 7E 1E E8 20 00 EB 02 B4 01 E8 99 1E CB  // ...~.. .........
    2560: E8 70 1E 80 FC 4F 75 05 E8 93 33 EB 07 E8 E8 38  // .p...Ou...3....8
    2570: EB 02 B4 01 E8 81 1E CB 1E 06 66 50 66 51 66 52  // ..........fPfQfR
    2580: 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1  // fSfUfVfW..<.u)..
    2590: 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 97 00 8A 3C  // ..f........6...<
    25A0: 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8  // ..0.....^..F.f..
    25B0: 10 89 46 00 E9 2B 01 3C 05 75 18 E8 F6 1B E8 C9  // ..F..+.<.u......
    25C0: 1B 2E A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04  // ........V..F..^.
    25D0: E9 0F 01 3C 06 75 32 E8 14 0B 66 D1 E0 8B EC 89  // ...<.u2...f.....
    25E0: 46 14 BB 02 00 E8 1E 0B 88 46 18 E8 08 0B 66 89  // F........F....f.
    25F0: 46 0C BB 09 00 E8 0E 0B 33 C0 66 89 46 00 2E 8B  // F.......3.f.F...
    2600: 16 BE 01 89 56 10 E9 D9 00 3C 0B 75 24 0A DB 75  // ....V....<.u$..u
    2610: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    2620: C0 00 8A C7 E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1  // ........8.......
    2630: 00 3C 17 75 1D E8 9B 0D 74 06 E8 8D 09 E8 9E 12  // .<.u....t.......
    2640: E8 13 07 E8 82 0A 33 C9 8B C8 8B EC 89 4E 14 E9  // ......3......N..
    2650: 90 00 3C 18 75 45 0A FF 75 10 E8 22 0D 8B EC 89  // ..<.uE..u.."....
    2660: 46 0C E8 4F 07 89 4E 10 EB 78 E8 66 0D 75 6B BB  // F..O..N..x.f.uk.
    2670: 00 4C E8 FC 1C 66 0B C0 74 60 23 C9 74 5C E8 3A  // .L...f..t`#.t\.:
    2680: 0D BE 00 4C E8 AC 0A 74 51 BE 00 4C B0 40 E8 FB  // ...L...tQ..L.@..
    2690: 0A E8 EB 0C 8B EC 89 46 0C EB 47 3C 82 75 1A 80  // .......F..G<.u..
    26A0: FB 05 75 15 0A FF 75 0A E8 30 0C 8B EC 89 46 14  // ..u...u..0....F.
    26B0: EB 30 E8 0D 0C 74 1B EB 29 3C 8E 75 15 80 FF 01  // .0...t..)<.u....
    26C0: 74 08 80 FF 02 75 0B 80 C1 02 80 C1 02 E8 57 0C  // t....u........W.
    26D0: EB 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01  // .....F.......F..
    26E0: EB 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66  // ..2....f.f_f^f]f
    26F0: 5B 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00  // [fZfYfX...Q.....
    2700: D3 E0 59 C3 E8 17 1D C3 0C 01 C3 00 50 51 B0 B6  // ..Y.........PQ..
    2710: E6 43 B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03  // .C.3.B...B.a....
    2720: E6 61 8A C4 B9 C8 00 E8 6D 18 E6 61 59 58 C3 00  // .a......m..aYX..
    2730: 1E 56 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80  // .V...>...v......
    2740: 8A 0E 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32  // ..........!..3.2
    2750: E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F  // ...........&!.^.
    2760: C3 00 57 0B C0 75 0F E8 28 08 74 25 E8 24 00 F6  // ..W..u..(.t%.$..
    2770: C3 04 74 F3 EB 11 8B C8 E8 04 15 23 C1 74 12 E8  // ..t........#.t..
    2780: 11 00 F6 C3 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6  // .....t._.\(.....
    2790: C3 5F C3 50 E8 DD 07 E8 56 14 0A C9 74 11 E8 DA  // ._.P....V...t...
    27A0: 11 3C 00 75 1F E8 CB 01 8A EB F6 C5 04 74 15 8D  // .<.u.........t..
    27B0: 9C A6 00 E8 BB 1B 0A C0 74 0A E8 88 04 74 05 33  // ........t....t.3
    27C0: C9 E8 51 05 E8 AC 01 58 C3 51 B9 5F 00 E8 76 17  // ..Q....X.Q._..v.
    27D0: 59 C3 51 E8 1A 00 75 14 E8 69 01 3C 01 75 0D B9  // Y.Q...u..i.<.u..
    27E0: 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3  //  ..'.u......3.Y.
    27F0: 53 E8 7D 1B 66 3D 00 FF FF FF 75 0E 83 C3 04 E8  // S.}.f=....u.....
    2800: 6F 1B 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2  // o.f=....u.[.PR2.
    2810: E8 5E 1B 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83  // .^.....f........
    2820: C3 04 E2 EC 0A D2 5A 58 C3 E8 48 07 8D 9C A4 01  // ......ZX..H.....
    2830: E8 E9 00 A9 DD 0F 74 52 E8 38 01 F6 C3 08 74 0C  // ......tR.8....t.
    2840: 8D 5C 28 E8 DD 00 75 04 E8 62 00 C3 B5 02 E8 FC  // .\(...u..b......
    2850: 00 E8 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22 01 E8  // .......t!.\(."..
    2860: 6D 03 74 05 B5 03 E8 E4 00 E8 41 04 E8 FA 00 80  // m.t.......A.....
    2870: FD 00 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00  // ..u8............
    2880: 55 E8 73 0D B5 02 E8 D6 00 C3 A9 02 00 74 1D B5  // U.s..........t..
    2890: 04 E8 B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8 67 18  // ........\(....g.
    28A0: E8 BC 00 8D 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8  // ....\(..........
    28B0: 9B 00 B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D  // .............u..
    28C0: 9C C0 01 B8 00 55 E8 2E 0D B5 02 E8 17 00 C3 E8  // .....U..........
    28D0: AF 00 B5 02 8D 5C 28 E8 57 00 75 02 B5 01 E8 04  // .....\(.W.u.....
    28E0: 00 E8 C9 03 C3 8D 9C AC 02 B1 02 E8 27 1A B5 02  // ............'...
    28F0: E8 6C 00 C3 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3  // .l.......!..u...
    2900: 04 74 12 8D 5C 28 E8 78 00 E8 5D 00 E8 63 07 8D  // .t..\(.x..]..c..
    2910: 5C 28 E8 FE 17 B8 02 00 E8 0E FF C3 B9 48 00 E8  // \(...........H..
    2920: 24 16 C3 53 81 C3 05 01 E8 46 1A 24 06 3C 02 5B  // $..S.....F.$.<.[
    2930: C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 31 1A  // ....=..u.S....1.
    2940: 5B A8 01 C3 53 83 C3 12 E8 26 1A 5B C3 8D 9C AC  // [...S....&.[....
    2950: 02 32 C9 E8 BF 19 C3 8D 9C AC 02 E8 13 1A C3 8D  // .2..............
    2960: 9C AC 02 B1 01 E8 AD 19 C3 8D 9C AC 02 B1 01 E8  // ................
    2970: BB 19 C3 66 50 8D 9C A0 01 E8 F5 19 8A D8 66 58  // ...fP.........fX
    2980: C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1  // .UWQ.........+..
    2990: E3 8D 58 4E E8 DA 19 E8 E3 01 E2 EE 8D 5C 4B E8  // ..XN.........\K.
    29A0: CF 19 B9 03 00 8B D0 BF F9 29 85 55 06 74 17 66  // .........).U.t.f
    29B0: 8B 05 8D 9A 4C 02 E8 18 19 8B 45 04 8D 9A 50 02  // ....L.....E...P.
    29C0: E8 26 19 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04  // .&..........|^..
    29D0: 00 33 ED 8B DF E8 99 19 0B C0 74 09 E8 5D 01 E8  // .3........t..]..
    29E0: 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF  // ..........U2..o.
    29F0: 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8 70  // .\(.N.=..u.....p
    2A00: 19 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00  // .$p......T.]....
    2A10: E8 5E 19 0A C0 74 46 8D 9C A8 00 E8 53 19 3C 02  // .^...tF.....S.<.
    2A20: 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32 E4  // u;f...<.r3....2.
    2A30: 03 D8 8B FB B9 04 00 8B DF E8 35 19 0B C0 74 15  // ..........5...t.
    2A40: E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55 58  // ......u.......UX
    2A50: 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F 5D  // ..ps....I..u.Y_]
    2A60: C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00  // . .X.<.......<..
    2A70: 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 F2 18 8D  // .....<. .Q......
    2A80: 9A C0 01 E8 63 18 8D 5D 02 E8 E5 18 8D 9A C2 01  // ....c..]........
    2A90: E8 89 00 8D 5D 05 E8 D8 18 8D 9A C6 01 E8 7C 00  // ....].........|.
    2AA0: 8D 5D 08 E8 CB 18 8B C8 8A DC 66 C1 C8 10 8A D0  // .]........f.....
    2AB0: 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC C0  // ................
    2AC0: EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F  // ...............?
    2AD0: 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A CC 01 E8 08  // ................
    2AE0: 18 8D 9A CA 01 8B C1 E8 FF 17 8D 9A CE 01 33 C0  // ..............3.
    2AF0: 8A C6 E8 F4 17 8D 9A D0 01 33 C0 8A C2 E8 E9 17  // .........3......
    2B00: 8D 5D 0C E8 6B 18 8D 9A D2 01 E8 0F 00 8D 5D 0F  // .]..k.........].
    2B10: E8 5E 18 8D 9A D6 01 E8 CF 17 59 C3 8B C8 8A D4  // .^........Y.....
    2B20: 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1  // f...............
    2B30: E8 B6 17 83 C3 02 8B C2 E8 AE 17 C3 8D 5D 11 E8  // .............]..
    2B40: 2F 18 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A  // /.........t.....
    2B50: C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75  // ....$.<.u...@<.u
    2B60: 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03  // .......t......t.
    2B70: 80 E2 FB 8B C2 8D 9A D8 01 E8 6D 17 C3 3C 01 74  // ..........m..<.t
    2B80: 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02 E8 58  // =.....$?.<..P..X
    2B90: 17 0F B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 48  // ............L..H
    2BA0: 17 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 59 2B 2E  // .............Y+.
    2BB0: F7 B7 57 2B 8D 9A 4E 02 E8 2E 17 83 C5 08 C3 10  // ..W+..N.........
    2BC0: 00 0A 00 04 00 03 00 05 00 04 00 10 00 09 00 8D  // ................
    2BD0: 9C A6 00 E8 9B 17 0A C0 74 1F 8D 9C A8 00 51 B1  // ........t.....Q.
    2BE0: 03 E8 18 00 59 0B DB 74 10 E8 85 17 32 C0 66 3D  // ....Y..t....2.f=
    2BF0: 00 03 0C 00 75 03 0B DB C3 33 DB C3 66 50 52 E8  // ....u....3..fPR.
    2C00: 6F 17 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10 32  // o.<.u9...r4f...2
    2C10: E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F  // .<.v*.......;.s.
    2C20: E8 4E 17 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74  // .N.........$.8.t
    2C30: 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3 33  // .2.........ZfX.3
    2C40: DB 5A 66 58 C3 51 8D 9C A6 00 E8 24 17 0A C0 74  // .ZfX.Q.....$...t
    2C50: 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 12 17 66  // ..........t....f
    2C60: C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A C0  // ......u.....2...
    2C70: 59 C3 66 50 52 E8 F9 16 3C 70 75 2B 66 C1 E8 10  // Y.fPR...<pu+f...
    2C80: 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 E1 16  // 2........;.s....
    2C90: 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB  // 8.t.f...2.......
    2CA0: E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66 51  // ...ZfX.3.ZfX.WfQ
    2CB0: 8D 9C C0 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66  // .........=...t.f
    2CC0: 8B D1 E8 E0 0B 83 C7 1C EB EC 66 59 5F C3 50 53  // ..........fY_.PS
    2CD0: 51 B9 07 00 53 8B DA E8 97 16 83 F8 00 5B 74 09  // Q...S........[t.
    2CE0: 66 C1 E3 10 8B DA E8 72 12 59 5B 58 C3 51 53 B9  // f......r.Y[X.QS.
    2CF0: 07 00 E8 7F 12 5B 59 C3 66 50 53 83 C3 06 E8 70  // .....[Y.fPS....p
    2D00: 16 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 62 16 8B  // .[..f...S....b..
    2D10: C8 5B 66 58 C3 8D 9C A0 01 32 C9 E8 F7 15 C3 57  // .[fX.....2.....W
    2D20: B9 20 00 E8 5A 12 5F C3 53 51 E8 19 00 32 E4 8A  // . ..Z._.SQ...2..
    2D30: C5 C1 E0 02 59 8D 9C 78 01 03 D8 E8 33 16 5B C3  // ....Y..x....3.[.
    2D40: B1 02 E8 07 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98  // ............S...
    2D50: 01 E8 D9 15 5B C3 33 C9 E8 B3 12 75 3C 66 BA 22  // ....[.3....u<f."
    2D60: F0 FF FF 66 33 C0 E8 46 03 33 C0 E8 24 02 74 1C  // ...f3..F.3..$.t.
    2D70: A9 DD 0F 74 F6 E8 1B FA F6 C3 04 75 05 F6 C3 18  // ...t.......u....
    2D80: 74 E9 E8 1F 00 50 E8 A0 FA 58 EB DF E8 0B 00 75  // t....P...X.....u
    2D90: 08 E8 20 00 8B C1 E8 90 FA C3 66 50 E8 29 03 8B  // .. .......fP.)..
    2DA0: C8 66 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 FE  // .fX.fRf.....3...
    2DB0: 02 66 5A C3 50 53 52 E8 E0 FF 75 13 B9 08 00 E8  // .fZ.PSR...u.....
    2DC0: BD 0E 23 C8 75 19 33 C0 E8 C7 01 8B C8 EB 10 83  // ..#.u.3.........
    2DD0: F9 02 74 0B E8 7B 06 80 FB 01 75 03 83 E1 FD 5A  // ..t..{....u....Z
    2DE0: 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF FF E8 9E 05  // [X.Vf3.f........
    2DF0: 66 C1 E6 10 E8 A8 01 0B C0 74 03 E8 05 00 E8 7E  // f........t.....~
    2E00: 05 5E C3 50 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC  // .^.PQ.l.P2......
    2E10: 00 E8 7F 00 8D 9C 08 03 E8 56 15 38 E8 74 0A 8A  // .........V.8.t..
    2E20: C5 E8 AD 14 B0 02 E8 75 02 58 E8 79 00 66 51 8D  // .......u.X.y.fQ.
    2E30: 9C A4 01 E8 3B 15 66 8B C8 8B D3 8D 9C D0 02 E8  // ....;.f.........
    2E40: 2F 15 66 3B C1 75 16 53 8D 9C AA 01 E8 22 15 8B  // /.f;.u.S....."..
    2E50: C8 8D 9C D6 02 E8 19 15 3B C1 5B 74 05 B0 02 E8  // ........;.[t....
    2E60: 3C 02 66 59 E8 67 FE E8 FF 01 66 25 FF 0F 00 00  // <.fY.g....f%....
    2E70: 59 58 66 BA FF FF FF FF 33 D0 E8 11 05 33 D2 C3  // YXf.....3....3..
    2E80: 53 66 50 8D 9C C8 02 E8 E7 14 8A C4 E8 42 14 66  // SfP..........B.f
    2E90: 58 5B C3 53 66 50 8D 9C C8 02 E8 D4 14 8A E0 E8  // X[.SfP..........
    2EA0: 2F 14 66 58 5B C3 8D 9C C8 02 E8 C4 14 32 C0 E8  // /.fX[........2..
    2EB0: 1F 14 C3 66 52 52 32 ED 83 C1 02 B8 06 00 F7 E1  // ...fRR2.........
    2EC0: 66 33 C9 8B C8 5A 51 66 8B C2 8A CF 66 F7 E1 66  // f3...ZQf....f..f
    2ED0: C1 E0 03 59 66 F7 F1 66 8B C8 66 5A C3 53 E8 48  // ...Yf..f..fZ.S.H
    2EE0: 01 66 C1 E2 10 E8 36 01 8D 9C 98 01 E8 82 14 8A  // .f....6.........
    2EF0: E8 8D 9C AC 02 E8 79 14 8A C8 E8 9E 0B 8A EB 5B  // ......y........[
    2F00: C3 57 53 53 E8 D6 FF E8 14 01 5B E8 B0 0B 74 61  // .WSS......[...ta
    2F10: 80 FD 00 75 29 53 E8 0F FE 66 8B D0 E8 4A FA 8A  // ...u)S...f...J..
    2F20: CD 51 E8 1B FE 8A FD 59 E8 88 FF 5B E8 42 14 66  // .Q.....Y...[.B.f
    2F30: 25 FF FF 00 00 66 3B C8 73 34 32 DB EB 33 80 FD  // %....f;.s42..3..
    2F40: 02 75 11 E8 2C 01 8D 1F E8 26 14 3D 74 40 76 1E  // .u..,....&.=t@v.
    2F50: 32 DB EB 1D 80 FD 03 75 15 53 E8 C1 00 B3 03 E8  // 2......u.S......
    2F60: 18 0B 5B E8 0B 14 3B C2 76 04 32 DB EB 03 80 CB  // ..[...;.v.2.....
    2F70: 01 5B 5F C3 53 8B F0 E8 05 0D 23 F0 74 09 8B C6  // .[_.S.....#.t...
    2F80: E8 89 0B 8B F3 0B DB 5B C3 51 E8 27 FE E8 0F 00  // .......[.Q.'....
    2F90: 59 C3 51 50 E8 E8 0C 8B C8 58 E8 02 00 59 C3 57  // Y.QP.....X...Y.W
    2FA0: 53 E8 97 0E 0B C0 74 09 8B 1D 83 C7 02 3B C3 75  // S.....t......;.u
    2FB0: F7 8B 1D 83 FB FF 74 0B 83 C7 02 85 D9 74 F2 8B  // ......t......t..
    2FC0: C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74  // ...3...[_.3....t
    2FD0: 13 E8 A0 FF 8B DE B9 00 01 E8 6A 0F 83 C6 08 E8  // ..........j.....
    2FE0: 4D 0C EB E8 BB F0 46 B8 5A A5 E8 FC 12 C3 53 66  // M.....F.Z.....Sf
    2FF0: 50 8D 9C 08 03 E8 79 13 8A E8 66 58 5B C3 53 66  // P.....y...fX[.Sf
    3000: 50 8D 9C C8 02 E8 69 13 8A C8 66 58 5B C3 53 66  // P.....i...fX[.Sf
    3010: 50 8D 9C C9 02 E8 59 13 8A C8 66 58 5B C3 53 8D  // P.....Y...fX[.S.
    3020: 5C 14 E8 4C 13 8B D0 5B C3 53 66 50 8D 5C 16 E8  // \..L...[.SfP.\..
    3030: 3F 13 8B D0 66 58 5B C3 53 66 50 8D 9C 18 03 E8  // ?...fX[.SfP.....
    3040: 2F 13 66 8B D0 66 58 5B C3 53 66 50 8D 9C 1C 03  // /.f..fX[.SfP....
    3050: E8 1E 13 66 8B D0 66 58 5B C3 53 66 50 8D 5C 10  // ...f..fX[.SfP.\.
    3060: E8 0E 13 8B C8 66 58 5B C3 53 8D 5C 08 E8 01 13  // .....fX[.S.\....
    3070: 5B C3 53 66 50 8D 5C 0C E8 F6 12 8B D0 66 58 5B  // [.SfP.\......fX[
    3080: C3 8D 5C 04 E8 EA 12 C3 51 8D 5C 04 32 C9 E8 84  // ..\.....Q.\.2...
    3090: 12 59 C3 8D 9C 18 03 66 8B C2 E8 34 12 C3 53 51  // .Y.....f...4..SQ
    30A0: 8A E8 E8 DC FF 24 FD 0A E8 E8 DC FF 59 5B C3 53  // .....$......Y[.S
    30B0: 66 50 51 66 8B C8 BB 00 00 E8 2C 0A 23 C2 0B C1  // fPQf......,.#...
    30C0: E8 2E 0A 59 66 58 5B C3 BB 00 00 E8 1A 0A 66 25  // ...YfX[.......f%
    30D0: DF 0F 00 00 C3 80 FA 14 C3 E8 48 0E E8 D6 0D E8  // ..........H.....
    30E0: B4 0D 75 06 E8 AA 0B E8 B8 0D C3 B0 01 C3 55 B3  // ..u...........U.
    30F0: 01 E8 3B 10 5D C3 66 53 66 BB 04 00 00 00 E8 05  // ..;.].fSf.......
    3100: 00 33 C0 66 5B C3 55 66 C1 E3 10 BB 00 00 E8 1E  // .3.f[.Uf........
    3110: 10 5D C3 E8 D6 0E BB 0A 00 E8 D5 09 C3 BB 0A 00  // .]..............
    3120: E8 C5 09 66 8B C8 E8 C3 0E BB 0A 00 66 2B C1 E8  // ...f........f+..
    3130: BF 09 C3 E8 29 00 0B C9 74 22 E8 A6 FC E8 2A 07  // ....)...t"....*.
    3140: 66 51 66 8B C8 BB 07 00 E8 9D 09 66 25 00 FE 00  // fQf........f%...
    3150: 00 66 0B C1 E8 9A 09 66 59 0C 01 C3 32 C0 C3 E8  // .f.....fY...2...
    3160: 49 02 0B C9 75 06 E8 4B FC E8 4F 02 51 E8 44 FC  // I...u..K..O.Q.D.
    3170: 66 C1 E6 10 33 C0 E8 10 FE 74 09 E8 F4 02 75 F6  // f...3....t....u.
    3180: 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3 A8 10 75 63  // 3...X#.f......uc
    3190: E8 E9 06 66 C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3  // ...f...3....t5..
    31A0: FD 50 51 8B C8 E8 D7 01 85 C1 59 58 74 0D 50 E8  // .PQ.......YXt.P.
    31B0: CF FE 24 03 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8  // ..$.<.Xu...P....
    31C0: 01 58 74 D5 E8 CC FC 50 E8 91 07 58 B5 00 E8 B7  // .Xt....P...X....
    31D0: FE EB C6 E8 A9 01 E8 9B FD E8 13 01 B1 00 E8 4B  // ...............K
    31E0: 07 66 C1 EE 10 E8 8D 06 A8 20 75 3B A8 40 75 03  // .f....... u;.@u.
    31F0: E8 1F 08 E8 74 06 0A C0 75 00 E8 82 01 E8 74 FD  // ....t...u.....t.
    3200: E8 6F FE E8 CF FE 75 14 E8 47 02 0A DB 74 0D E8  // .o....u..G...t..
    3210: 81 FC E8 47 07 B5 00 E8 6E FE EB 08 E8 2E 07 B5  // ...G....n.......
    3220: 01 E8 64 FE E8 CE 00 C3 E8 54 0A C3 E8 9B FD E8  // ..d......T......
    3230: AC 06 33 C9 E8 84 01 66 33 D2 66 33 C0 E8 6F FE  // ..3....f3.f3..o.
    3240: E8 83 07 E8 52 00 B1 FF E8 77 00 33 C0 E8 42 FD  // ....R....w.3..B.
    3250: 74 0A E8 1F FD 50 E8 21 07 58 EB F1 32 C9 E8 A6  // t....P.!.X..2...
    3260: 01 E8 1B 0A 0B C0 C3 E8 60 FD E8 71 06 66 33 C0  // ........`..q.f3.
    3270: 66 BA 00 F0 FF FF E8 15 01 51 B1 01 E8 6E 01 59  // f........Q...n.Y
    3280: E8 56 07 33 C0 E8 0A FD 74 0A E8 E7 FC 50 E8 DA  // .V.3....t....P..
    3290: 06 58 EB F1 E8 00 07 C3 B8 02 00 E8 D6 FC 74 21  // .X............t!
    32A0: B8 02 00 E8 ED F4 F6 C3 04 75 0A E8 D1 09 83 E0  // .........u......
    32B0: FD E8 D4 09 C3 66 B8 02 00 00 00 E8 F1 FD E8 33  // .....f.........3
    32C0: F6 C3 E8 35 08 74 13 BB 02 00 E8 1B 08 8A E1 E8  // ...5.t..........
    32D0: 1F 08 E8 DA 06 0C 01 C3 0C 01 C3 51 E8 1B 08 74  // ...........Q...t
    32E0: 0C 8A CC BB 02 00 E8 FF 07 8A C4 8A E1 59 C3 B0  // .............Y..
    32F0: 01 E8 16 06 C3 B0 00 E8 10 06 C3 E8 10 0D 75 18  // ..............u.
    3300: E8 7C 00 E8 6E FC 80 F9 01 75 0E 51 E8 3E 06 B5  // .|..n....u.Q.>..
    3310: 01 E8 74 FD 59 E8 DD FF C3 E8 D3 FF 51 E8 4B 06  // ..t.Y.......Q.K.
    3320: B5 00 E8 63 FD 59 C3 B8 02 00 E8 47 FC 74 03 E8  // ...c.Y.....G.t..
    3330: 6F 06 C3 E8 D3 04 3B C1 7C 35 8B C1 E8 13 05 E8  // o.....;.|5......
    3340: 29 07 8B C8 51 E8 43 05 E8 07 05 59 E8 1C 07 3B  // )...Q.C....Y...;
    3350: C8 72 02 8B C1 8D 5C 04 E8 8E 0F 32 C9 E8 DD 0B  // .r....\....2....
    3360: FE C1 38 C1 72 F7 8D 5C 04 E8 05 10 0B C0 C3 33  // ..8.r..\.......3
    3370: C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02 03 D8 C3 53  // ....H3.........S
    3380: BB 03 00 E8 62 07 66 25 FF 0F 00 00 5B C3 53 66  // ....b.f%....[.Sf
    3390: 50 66 51 66 8B C8 BB 03 00 E8 4C 07 66 23 C2 66  // PfQf......L.f#.f
    33A0: 0B C1 E8 4C 07 66 59 66 58 5B C3 66 50 BB 05 00  // ...L.fYfX[.fP...
    33B0: E8 35 07 25 FF 0F 8B C8 66 58 C3 E8 C1 08 23 C8  // .5.%....fX....#.
    33C0: 66 50 BB 05 00 E8 20 07 25 00 F0 0B C1 E8 21 07  // fP.... .%.....!.
    33D0: 66 58 C3 66 50 53 BB 06 00 E8 0C 07 A8 10 75 09  // fX.fPS........u.
    33E0: BB F0 46 E8 8B 0F 3D 5A A5 5B 66 58 C3 66 50 53  // ..F...=Z.[fX.fPS
    33F0: BB 06 00 E8 F2 06 80 F1 01 C0 E1 04 24 EF 0A C1  // ............$...
    3400: E8 EE 06 5B 66 58 C3 53 66 50 BB F8 46 E8 61 0F  // ...[fX.SfP..F.a.
    3410: 8A C1 E8 BC 0E 66 58 5B C3 53 BB F8 46 E8 51 0F  // .....fX[.S..F.Q.
    3420: 83 E0 01 5B C3 53 66 50 BB 07 00 E8 BA 06 F6 C4  // ...[.SfP........
    3430: 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8  // .fX..t...[.S....
    3440: A6 06 80 E4 FE 80 FD 06 74 03 80 CC 01 E8 A1 06  // ........t.......
    3450: 5B C3 66 50 BB 06 00 E8 8E 06 24 40 C0 E8 06 8A  // [.fP......$@....
    3460: D8 66 58 C3 B3 81 E8 BB 0C 75 04 83 C8 01 C3 33  // .fX......u.....3
    3470: C0 C3 50 66 51 E8 FC FA 83 EC 04 8B EC 66 33 C0  // ..PfQ........f3.
    3480: 66 89 46 00 33 D2 8D BC C0 01 8D 1D E8 E2 0E 0B  // f.F.3...........
    3490: C0 74 3D 8B DF B0 00 E8 2D 01 74 2F 8B DF E8 57  // .t=.....-.t/...W
    34A0: F8 66 8B 46 00 3B C8 7F 10 72 20 66 C1 C8 10 66  // .f.F.;...r f...f
    34B0: C1 C9 10 3B C8 7F 0E EB 12 66 C1 C8 10 66 C1 C9  // ...;.....f...f..
    34C0: 10 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB BA  // .;.r...f.N......
    34D0: 0B D2 74 0A 8D 9C A4 01 E8 F3 F7 E9 88 00 66 33  // ..t...........f3
    34E0: C0 66 89 46 00 8D BC 4C 02 33 D2 8D 1D E8 81 0E  // .f.F...L.3......
    34F0: 0B C0 74 58 66 50 E8 5E F4 3C 01 66 58 74 05 3D  // ..tXfP.^.<.fXt.=
    3500: 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 62 0E E8  // @.sCfRf...]..b..
    3510: 5D 00 8B CA 66 5A 74 2F 56 8D 9C A4 01 8B F1 E8  // ]...fZt/V.......
    3520: CB F7 5E B0 00 E8 9F 00 74 1D 8D 1D E8 42 0E 8B  // ..^.....t....B..
    3530: D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72  // ..G.f....G.f;F.r
    3540: 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16  // ...f.F........t.
    3550: 56 8D 9C A4 01 8B F2 E8 93 F7 5E 53 8D 9C BA 01  // V.........^S....
    3560: 33 C0 E8 84 0D 5B 83 C4 04 0B D2 66 59 58 C3 57  // 3....[.....fYX.W
    3570: 53 51 E8 ED 08 3B 55 02 75 18 66 C1 CA 10 8B DA  // SQ...;U.u.f.....
    3580: 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B  // f...;].u...t.:E.
    3590: 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59  // t......3.......Y
    35A0: 5B 5F C3 51 66 52 E8 B9 08 3A 65 1A 75 09 0A C0  // [_.QfR...:e.u...
    35B0: 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00  // t.:E.t......3...
    35C0: 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE  // ..fZY..fQfRSSf..
    35D0: 10 8B DE 66 C1 CE 10 E8 97 0D 5B 66 8B D0 E8 17  // ...f......[f....
    35E0: F7 3B CA 72 0A 66 3B CA 72 05 E8 14 F9 75 02 32  // .;.r.f;.r....u.2
    35F0: C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 EC  // .[fZfY.VW.......
    3600: F6 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9  // ._^.fPSfQRWVQ...
    3610: 08 00 E8 31 09 59 8D 5C 08 8B C1 66 C1 E0 10 8A  // ...1.Y.\...f....
    3620: C2 E8 AD 0C F6 C2 03 75 24 8B C1 24 7F BF E7 36  // .......u$..$...6
    3630: 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66  // .=.....:.u.f.E.f
    3640: B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01  // ................
    3650: 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A  // t%...p.....3....
    3660: D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1  // ...u..\.f%....f.
    3670: E0 08 E8 5C 0C EB B2 8A E1 8A CA 80 E1 0C C0 E9  // ...\............
    3680: 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC  // ...........pr*..
    3690: 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8  // us%..p..2.P.0...
    36A0: 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 C1 0C  // X8.r.3.....(....
    36B0: 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85  // ........2.......
    36C0: 00 8D 5C 16 8B 05 E8 20 0C 8B 45 06 66 C1 E0 10  // ..\.... ..E.f...
    36D0: 8B 45 02 50 E8 94 03 66 C1 E1 10 8B C8 58 8D 1C  // .E.P...f.....X..
    36E0: E8 EE 0B 66 50 8D 5C 04 66 8B C1 E8 E3 0B 66 58  // ...fP.\.f.....fX
    36F0: 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50  // f...f......f..fP
    3700: 8D 5C 06 E8 6B 0C 8B C8 66 58 66 D3 E0 66 C1 E8  // .\..k...fXf..f..
    3710: 10 40 8D 5C 14 E8 D1 0B BF 47 37 83 F9 01 74 11  // .@.\.....G7...t.
    3720: BF 4F 37 81 F9 01 01 74 08 BF 57 37 83 F9 02 75  // .O7....t..W7...u
    3730: 15 8D 5C 0C 66 8B 05 E8 97 0B 8D 5C 10 66 8B 45  // ..\.f......\.f.E
    3740: 04 E8 8D 0B 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00  // ......^_ZfY[fX..
    3750: 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80  // @....@..........
    3760: 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02  // ....@....@......
    3770: 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90  // .....^..@.......
    3780: 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01  // ....^....^......
    3790: 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01 32  // ..........# ...2
    37A0: 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05  //  ...3 ...b......
    37B0: 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00 08  // ................
    37C0: 10 08 08 08 00 00 00 56 E8 2D 09 80 E4 01 3B 04  // .......V.-....;.
    37D0: 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0  // t......3....D...
    37E0: 5E C3 57 53 50 E8 10 09 83 E9 0A E8 E0 00 83 F8  // ^.WSP...........
    37F0: 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2  // .v..............
    3800: FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8 41  // .....X[_.fSQfR.A
    3810: 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00  // ..w.f...f...f...
    3820: 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 3D 02 66 5A  // ..f..f3.f...=.fZ
    3830: 59 66 5B C3 53 66 50 BB 07 00 E8 AB 02 0A C0 66  // Yf[.SfP........f
    3840: 58 5B C3 53 66 50 BB 07 00 E8 9C 02 A8 01 66 58  // X[.SfP........fX
    3850: 5B C3 53 66 50 8D 5C 06 E8 16 0B 8A C8 66 58 5B  // [.SfP.\......fX[
    3860: C3 51 B9 08 00 E8 F3 06 59 C3 53 8D 5C 08 E8 00  // .Q......Y.S.\...
    3870: 0B 24 03 5B C3 8D 5C 09 E8 F6 0A C3 51 53 B1 01  // .$.[..\.....QS..
    3880: 8A E8 8D 5C 08 E8 8D 0A 5B 59 C3 53 8D 1C E8 E0  // ...\....[Y.S....
    3890: 0A 5B C3 53 8D 5C 04 E8 D7 0A 5B C3 53 8D 5C 16  // .[.S.\....[.S.\.
    38A0: E8 CE 0A 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75  // ...[.SfR3....fZu
    38B0: 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D E8  // ..4.t....@...s..
    38C0: 0F 0A 48 E8 0F 00 66 8B C2 E8 05 0A 5B C3 BB 00  // ..H...f.....[...
    38D0: 4E E8 9D 0A C3 BB 08 4E C1 E0 03 03 D8 C3 BB 00  // N......N........
    38E0: 4E B9 32 00 E8 5F 06 C3 51 E8 E2 FF 0B C0 74 12  // N.2.._..Q.....t.
    38F0: 8B C8 BB 08 4E E8 79 0A 66 3B C2 74 07 83 C3 08  // ....N.y.f;.t....
    3900: E2 F3 0B DB 59 C3 C3 00 C3 00 8A E8 BB 20 DF 3C  // ....Y........ .<
    3910: 01 74 02 32 DB E8 45 2A E8 E3 F6 66 B8 80 06 00  // .t.2..E*...f....
    3920: 08 66 33 DB 8A D9 8A CD E8 B8 00 C3 66 51 66 52  // .f3.........fQfR
    3930: 66 57 66 B8 80 05 00 08 66 BB 00 4C 00 00 66 33  // fWf.....f..L..f3
    3940: C9 8B CE E8 9D 00 66 5F 66 5A 66 59 C3 66 B8 80  // ......f_fZfY.f..
    3950: 07 00 04 66 33 DB 8B DE E8 88 00 C3 66 B8 80 08  // ...f3.......f...
    3960: 00 04 66 33 DB 8B DE E8 79 00 C3 66 B8 80 09 00  // ..f3....y..f....
    3970: 04 66 33 DB 8B DE E8 6A 00 C3 C3 66 B8 80 0A 00  // .f3....j...f....
    3980: 04 66 33 DB 8B DE E8 5A 00 E8 E7 EF F6 C3 02 74  // .f3....Z.......t
    3990: 03 B0 00 C3 B0 01 C3 66 B8 80 0D 00 00 E8 43 00  // .......f......C.
    39A0: C3 66 B8 80 0F 00 04 66 33 DB 8A D9 E8 34 00 66  // .f.....f3....4.f
    39B0: B8 80 0F 00 04 66 33 DB 56 E8 76 04 03 74 04 8B  // .....f3.V.v..t..
    39C0: 1C 5E E8 1E 00 C3 66 B8 00 00 00 00 E8 14 00 66  // .^....f........f
    39D0: B8 80 0C 00 04 E8 0B 00 C3 66 B8 00 01 00 00 E8  // .........f......
    39E0: 01 00 C3 83 EC 1C 8B EC 66 89 46 00 66 89 5E 04  // ........f.F.f.^.
    39F0: 66 89 4E 08 66 89 56 0C 66 89 7E 10 66 89 76 14  // f.N.f.V.f.~.f.v.
    3A00: 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8 67 04 83 C4  // ..f......B..g...
    3A10: 1C C3 51 8D 5C 14 E8 58 09 66 C1 E0 10 E8 02 00  // ..Q.\..X.f......
    3A20: 59 C3 83 EC 10 8B EC 66 3D F0 FF FF 03 76 06 66  // Y......f=....v.f
    3A30: B8 F0 FF FF 03 66 8B C8 66 33 C0 66 89 46 04 66  // .....f..f3.f.F.f
    3A40: 89 46 00 66 89 46 08 B0 01 88 46 09 66 B8 00 00  // .F.f.F....F.f...
    3A50: 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B  // ..f..f.F...f....
    3A60: C4 BB 35 00 E8 0E 04 83 C4 10 C3 3D C0 7F 76 04  // ..5........=..v.
    3A70: B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51 66 50 B9 68  // ......?$..SQfP.h
    3A80: 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75 03 B9 78  // t...t.......u..x
    3A90: 69 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66  // if3...fXY[.fR..f
    3AA0: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    3AB0: 74 09 B3 03 80 F9 03 74 02 B3 02 66 5A C3 E8 B0  // t......t...fZ...
    3AC0: 08 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 A1 08  // .f.....t.S......
    3AD0: 5B 3D E0 01 72 0F 53 83 C3 18 E8 94 08 5B A8 80  // [=..r.S......[..
    3AE0: 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C E8 50 08 5B  // u....2..S..L.P.[
    3AF0: C3 53 83 C3 4C E8 A2 07 5B C3 56 E8 34 03 83 C6  // .S..L...[.V.4...
    3B00: 04 8A 64 10 8A 44 10 83 3C 00 5E C3 BB 00 50 83  // ..d..D..<.^...P.
    3B10: F8 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D  // ..t2..T...t*..X=
    3B20: 80 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D  // ..t"..\=..t...`=
    3B30: 00 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83  // ..t...d=..t...h.
    3B40: F8 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02  // .@t.3..W.V.t..].
    3B50: E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74  // ....._.3._.RQ..t
    3B60: 1B 56 E8 B4 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF  // .V.....^3..O..?.
    3B70: 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A  // t.:.t.....3...YZ
    3B80: C3 56 51 E8 93 02 32 C9 8D 7C 08 3B 5D 04 74 0C  // .VQ...2..|.;].t.
    3B90: 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E  // .....:L.r.3...Y^
    3BA0: C3 56 51 E8 73 02 32 C9 8D 7C 08 3B 1D 74 0C 83  // .VQ.s.2..|.;.t..
    3BB0: C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3BC0: 56 51 E8 54 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83  // VQ.T.2..|.;E.t..
    3BD0: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3BE0: 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3  // WP......]..n.X_.
    3BF0: 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B  // S2......t..O...[
    3C00: C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED  // .S2......t..o...
    3C10: 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0  // [.PW...h.u.3....
    3C20: 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66  // ..]..4.t.._._X.f
    3C30: 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8 92 06 8B  // PSQW..f%........
    3C40: D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66  // ..;.#.t1.u...t*f
    3C50: 50 66 8B 45 04 8D 5C 0C E8 76 06 66 33 C0 8B 05  // Pf.E..\..v.f3...
    3C60: 8D 5C 04 E8 6B 06 66 58 E8 85 FF E8 93 FF 8D 5C  // .\..k.fX.......\
    3C70: 08 66 33 C0 8B C1 E8 58 06 5F 59 5B 66 58 C3 56  // .f3....X._Y[fX.V
    3C80: E8 96 01 8B 44 04 5E C3 56 E8 8D 01 89 44 04 5E  // ....D.^.V....D.^
    3C90: C3 E8 B3 01 8B F7 83 C6 38 BB 00 70 B9 23 00 E8  // ........8..p.#..
    3CA0: D2 02 E8 01 00 C3 51 66 57 56 E8 6C 01 66 33 FF  // ......QfWV.l.f3.
    3CB0: 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23  // .|.3....2.....p#
    3CC0: C2 3D 00 30 75 54 80 FA 15 74 0B E8 B1 FF 0B 45  // .=.0uT...t.....E
    3CD0: 0C E8 B4 FF EB 44 E8 5E 00 89 45 0C 0B C0 75 04  // .....D.^..E...u.
    3CE0: 89 05 EB 36 E8 98 FF 0B 45 0C E8 9B FF 83 7D 06  // ...6....E.....}.
    3CF0: 00 74 16 E8 4A 00 89 45 06 0B C0 74 0C 83 7D 06  // .t..J..E...t..}.
    3D00: 00 74 06 8B 5C 0A E8 A0 00 E8 40 00 89 05 8B 5D  // .t..\.....@....]
    3D10: 02 E8 95 00 8B 5D 08 E8 B0 00 83 C7 10 FE C1 3A  // .....].........:
    3D20: 4C 06 72 96 5E 66 5F 59 C3 08 00 80 00 00 02 00  // L.r.^f_Y........
    3D30: 04 00 08 40 00 00 00 53 E8 3D 00 E8 33 06 5B C3  // ...@...S.=..3.[.
    3D40: 53 E8 34 00 83 C3 08 E8 27 06 5B C3 53 57 52 E8  // S.4.....'.[.SWR.
    3D50: 26 00 83 C3 04 E8 19 06 8B D0 5A 5F 5B C3 E8 EB  // &.........Z_[...
    3D60: FF 66 C1 E8 10 B4 11 E8 25 00 C3 E8 DE FF 66 C1  // .f......%.....f.
    3D70: E8 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1  // ........QR3.....
    3D80: 07 49 B8 10 00 F7 E1 BB 14 70 03 D8 5A 59 C3 57  // .I.......p..ZY.W
    3D90: 53 51 33 C9 8A C8 8A C4 BB 03 71 E8 A9 FD 83 C3  // SQ3.......q.....
    3DA0: 02 03 D9 8A 07 59 5B 5F C3 50 53 B0 01 E8 AB FD  // .....Y[_.PS.....
    3DB0: 74 15 E8 A9 FF 88 47 02 5B 53 B0 02 E8 9C FD 74  // t.....G.[S.....t
    3DC0: 06 E8 A7 FF 88 47 02 5B 58 C3 51 50 B0 14 E8 8A  // .....G.[X.QP....
    3DD0: FD 74 3A 53 E8 A1 FF 83 C3 0C E8 94 05 8B C8 5B  // .t:S...........[
    3DE0: F6 C1 01 74 05 66 83 67 02 FD F6 C1 80 74 05 66  // ...t.f.g.....t.f
    3DF0: 83 67 02 F7 F7 C1 00 01 74 08 66 81 4F 02 00 01  // .g......t.f.O...
    3E00: 00 00 F7 C1 00 02 74 05 66 83 67 02 FB 58 59 C3  // ......t.f.g..XY.
    3E10: BF AA 01 8B 3D 8B 7D 0C C3 BE AA 01 8B 34 8B 74  // ....=.}......4.t
    3E20: 30 C3 1E 0E 1F BF AA 01 8B 3D 8B 7D 0E 83 C7 04  // 0........=.}....
    3E30: 1F C3 BE AA 01 8B 34 8B 74 10 C3 BF AA 01 8B 3D  // ......4.t......=
    3E40: 8B 7D 26 83 C7 04 C3 BF AA 01 8B 3D 8B 7D 40 C3  // .}&........=.}@.
    3E50: BE AA 01 8B 34 8B 74 1A C3 BE AA 01 8B 34 8B 74  // ....4.t......4.t
    3E60: 3A C3 BF AA 01 8B 3D 8B 7D 0A 83 C7 04 B9 0D 00  // :.....=.}.......
    3E70: C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0  // ...........F.f3.
    3E80: C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 4F 17  // .F...F..R.....O.
    3E90: 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00  // Z......w.f.E....
    3EA0: 00 C3 50 E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F  // ..P.j.....E.X.._
    3EB0: FF 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00  // ..E..fS..H..f.^.
    3EC0: 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8  // f.N...f.........
    3ED0: A3 FF 83 C4 48 66 5B E8 49 01 E8 83 01 E8 0E 00  // ....Hf[.I.......
    3EE0: BB 04 00 E8 02 FC 66 C1 E8 10 E8 C1 FF C3 83 EC  // ......f.........
    3EF0: 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 74  // .....f.........t
    3F00: FF 66 BB 00 00 00 00 83 C4 0C E8 03 FF 66 8B C3  // .f...........f..
    3F10: 66 C1 E8 08 66 89 45 28 66 8B C3 66 C1 E0 18 66  // f...f.E(f..f...f
    3F20: 89 45 2C C3 E8 E9 FE 66 8B 5D 08 66 8B 4D 0C C3  // .E,....f.].f.M..
    3F30: 56 E8 25 FF 66 8B 44 08 5E C3 B0 05 C3 B0 01 C3  // V.%.f.D.^.......
    3F40: B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 82 03 83  // ......SfPf3.....
    3F50: C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 12 04 66  // ....fX[.2......f
    3F60: C1 CB 10 E8 6B 03 66 C1 CB 10 66 81 C3 04 00 04  // ....k.f...f.....
    3F70: 00 E2 E9 C3 FC 66 AD E8 57 03 83 C3 04 E2 F6 C3  // .....f..W.......
    3F80: FC E8 ED 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 30  // ....f.......fP.0
    3F90: 00 E8 10 00 66 58 C3 66 50 B8 C0 5D D1 E1 E8 03  // ....fX.fP..]....
    3FA0: 00 66 58 C3 52 F7 E1 8B CA E8 DE 01 66 53 8B D9  // .fX.R.......fS..
    3FB0: 66 C1 E3 10 8B D8 66 B8 B8 A8 05 00 B2 00 66 EF  // f.....f.......f.
    3FC0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    3FD0: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    3FE0: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 66 52 E8 99  // ;.r.....f[Z.fR..
    3FF0: 01 66 B8 B8 A8 05 00 B2 00 66 EF B2 04 66 ED 66  // .f.......f...f.f
    4000: 33 D2 66 BB 30 00 00 00 66 F7 F3 66 5A C3 66 50  // 3.f.0...f..fZ.fP
    4010: 53 BB 07 00 E8 D1 FA 25 00 02 35 00 02 0B C0 5B  // S......%..5....[
    4020: 66 58 C3 66 51 B3 01 E8 05 01 E8 23 FE 66 33 C9  // fX.fQ......#.f3.
    4030: 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9 00 08 66 2B  // .L.f.....u....f+
    4040: C1 E8 0C FE 66 89 44 04 89 4C 08 66 59 C3 56 1E  // ....f.D..L.fY.V.
    4050: 0E 1F E8 FB FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    4060: E8 C0 FF 06 E8 E0 FD 0E 07 66 BB 00 F8 1A 00 E8  // .........f......
    4070: DC FF 66 03 D8 E8 B8 03 66 3B 05 75 0F B9 00 01  // ..f.....f;.u....
    4080: FC E8 AC 03 66 AB 66 83 C3 04 E2 F5 E8 B8 FD BE  // ....f.f.........
    4090: AA 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 92 FD  // ...4.t..E..D....
    40A0: 0B F6 74 2B 57 56 83 C7 20 83 C6 04 B9 02 00 8B  // ..t+WV.. .......
    40B0: 05 89 04 8B 45 02 89 44 02 8A 45 0C 88 44 0C 8A  // ....E..D..E..D..
    40C0: 45 0D 88 44 0D 8A 45 0E 88 44 0E 47 46 E2 E0 5E  // E..D..E..D.GF..^
    40D0: 5F E8 85 FD 0B F6 74 1E 8A 85 06 01 88 44 2F BB  // _.....t......D/.
    40E0: 04 71 B0 09 E8 60 FA 74 0D 57 81 C7 80 00 8A 85  // .q...`.t.W......
    40F0: 85 00 88 47 04 5F 07 C3 BE AA 01 8B 34 8B 74 1E  // ...G._......4.t.
    4100: 83 C6 04 B9 28 00 C3 56 E8 27 FD 83 C6 04 8A 6C  // ....(..V.'.....l
    4110: 0F 5E C3 56 E8 1B FD 80 FD 00 74 06 83 C6 04 88  // .^.V......t.....
    4120: 6C 0F 5E C3 32 C0 C3 E8 1D FD 66 8B 45 08 C3 66  // l.^.2.....f.E..f
    4130: 53 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89  // S.......f.....f.
    4140: 5E 00 BB 06 00 E8 2D FD 8B EC 66 8B 46 00 83 C4  // ^.....-...f.F...
    4150: 04 66 5B C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B  // .f[........f....
    4160: C4 BB 16 00 E8 0E FD 8B EC 66 8B 5E 00 66 8B 4E  // .........f.^.f.N
    4170: 00 66 8B 56 08 83 C4 0C C3 66 B8 00 00 00 00 C3  // .f.V.....f......
    4180: BF AA 01 8B 3D 8B 7D 12 C3 00 66 50 8C C8 3D 00  // ....=.}...fP..=.
    4190: C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53  // .u.........t...S
    41A0: 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66  // ...... .....[2.f
    41B0: ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74  // .fX.........u.Kt
    41C0: 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7  // .C;.w.....+.....
    41D0: F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8  // .....+..;.r.u.;.
    41E0: 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9  // w.+...+.+.....+.
    41F0: 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9  // +.....UV+.......
    4200: 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6  // r.E;.r.w.;.v....
    4210: 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6  // Mx ....+....r...
    4220: 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03  // Mx.........s....
    4230: C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50  // .........3.^]..P
    4240: 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8  // ...t......t.....
    4250: 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0  // X.....RfP....f..
    4260: 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3  // .....$....f.fXZ.
    4270: 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3  // R...f.Z.R...f.Z.
    4280: E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF  // .1............$.
    4290: 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8  // ..........RfSfP.
    42A0: 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E  // ..fXf[Z.f...f...
    42B0: E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3 10 66 C1 EB  // .......fPf...f..
    42C0: 10 E8 8A FD 66 03 D8 66 81 CB 00 00 00 80 66 58  // ....f..f......fX
    42D0: C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE  // .RfS...f[Z.fP...
    42E0: E8 D4 FF E8 8F 01 66 58 C3 52 51 66 53 66 50 8A  // ......fX.RQfSfP.
    42F0: CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF  // ................
    4300: E8 59 01 66 D3 C8 58 50 66 D3 C0 E8 67 01 66 58  // .Y.f..XPf...g.fX
    4310: 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3  // f[YZ.fPQ....S.f.
    4320: C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51  // ...f.....YfX.fPQ
    4330: C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8  // ....;.f..Y..fX..
    4340: 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B  // _...D.f...f.....
    4350: 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01 C3 52 66 53  // ...5.f.......RfS
    4360: E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00  // ...f[Z.. ..J....
    4370: C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3  // .QfR............
    4380: FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8  // .......t.f......
    4390: CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59  // .....f.f.....fZY
    43A0: C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1  // .RfS...f[Z.RfS..
    43B0: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    43C0: 89 56 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58  // .V......f.f.F.fX
    43D0: 5A 5D C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // Z].fPURfP...V..V
    43E0: 08 E8 A6 FD 2E A1 FD 01 B2 18 EF B2 00 66 ED 66  // .............f.f
    43F0: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89  // .F.fXZ].fPUR....
    4400: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    4410: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50  // .F.f.F.Z]fXfX.fP
    4420: 52 E8 66 FD B2 18 66 ED 2E A3 FD 01 5A 66 58 C3  // R.f...f.....ZfX.
    4430: 66 52 66 53 E8 53 FD 66 81 CB 00 00 00 80 E8 1B  // fRfS.S.f........
    4440: 00 66 5B 66 5A C3 66 52 66 53 E8 3D FD 66 81 CB  // .f[fZ.fRfS.=.f..
    4450: 00 00 00 80 E8 1E 00 66 5B 66 5A C3 66 81 FB FF  // .......f[fZ.f...
    4460: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  // ...w.....f....f.
    4470: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  // ..f..f......w...
    4480: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  // ..f...f.f...f...
    4490: C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16  // .U..SQ..&.\.&.L.
    44A0: E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B  // .(..f.Y[].SQ..&.
    44B0: 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B  // \$3....Y[.U..SQ.
    44C0: F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06  // .&.\.&.L...RVW..
    44D0: 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A  // .....N.....&.|&.
    44E0: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    44F0: D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1  // .......M.2......
    4500: E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C  // .........&!D.&!|
    4510: 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20  // .....&.|&.M.2.. 
    4520: 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1  // .+...f.F........
    4530: 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56  // n..^....M.2....V
    4540: FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A  // .........#F.#V..
    4550: 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C  // M.2.........&.D.
    4560: 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57  // &.T.._^Z.U..SQRW
    4570: 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B  // P..&..&.E.2.. .+
    4580: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    4590: 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1  // ..N..F.....N....
    45A0: E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8  // .....&.G.&....f.
    45B0: 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26  // _Z...SQRW......&
    45C0: 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE  // .w&.L.2.. .+....
    45D0: FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26  // ............&..&
    45E0: 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7  // .M.2............
    45F0: D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53  // ...&!G.&!W._...S
    4600: 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73  // V......&.w&.<.ts
    4610: 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75  // .<.uX.D.2.&....u
    4620: 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 58 A2  // L&;G.uF..k....X.
    4630: 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74  // &.G&....&.w&.<.t
    4640: 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 56 A2 26 8B  // ...2.k......V.&.
    4650: 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26  // w&..2....D.&)G&&
    4660: FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77  // .G&&.G.&.w...&.w
    4670: 26 8A 04 32 E4 6B F0 03 8A 84 58 A2 26 01 47 26  // &..2.k....X.&.G&
    4680: E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56  // ...3.3...^[.SQRV
    4690: 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47  // ...w5&.T.&.W.&.G
    46A0: 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26  // .....&.G 3.&.G.&
    46B0: 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05  // .T.....&.G/.....
    46C0: 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75  // &..4.u"&.w.&.w.u
    46D0: 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57  // .&.g.&.W.&.g.&.W
    46E0: 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05  // ....y....&.G42..
    46F0: 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE  // ...&.G.&.W......
    4700: E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // ...SV...w5&.D.2.
    4710: C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26  // ...&.7&.4..&.G.&
    4720: 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56  // ._.&..&.\.^[.SRV
    4730: 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40  // .....w5..&.T...@
    4740: 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03  // s!&.w.2....&.t..
    4750: F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02  // .&.W.&.G.&..&.D.
    4760: E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A  // .....Au.&.G.&.W.
    4770: 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26  // &.G.&.W..h..@u.&
    4780: 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB  // .G.&.W.&.G.&.W..
    4790: 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42  // Q..Bu.&.G.&.G".B
    47A0: 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80  // ..Cu.&.G.&.G3.3.
    47B0: FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18  // .Fu.&.W.&.G.&.W.
    47C0: 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26  // &.G.....Gu.&.G.&
    47D0: 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89  // .G$....Hu.&.G.&.
    47E0: 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44  // G ^Z[.SV...w5&.D
    47F0: 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3  // .2.&.G.&.G...^[.
    4800: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4  // SV..&.w.&.t...2.
    4810: 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF  // &.G.&.G...&._.&.
    4820: 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // G.^[.SV..&.w.&.t
    4830: 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F  // ..4&.w.&.G...&._
    4840: 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77  // .&.G..^[.SV..&.w
    4850: 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89  // .&.t....t.&.G.&.
    4860: 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52  // w.&._.&.G..^[.SR
    4870: 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A  // V...p...&.G.&.W.
    4880: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    4890: 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26  // ...+..J.S..&._.&
    48A0: FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02  // .G.[.S..&._.&.G.
    48B0: 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20  // .[.SV...k...&.W 
    48C0: 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B  // 3.&.W.&.D.....&.
    48D0: 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2  // G.2....=..u.2.3.
    48E0: 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74  // ^[.&.G.2....=..t
    48F0: EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3  // .&..4.u..../.^[.
    4900: 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00  // &.G42.&.G.&.G...
    4910: 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B  // .....^[.S.....&.
    4920: 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07  // G....&..&....&..
    4930: 26 8B 57 02 5B C3 3C 49 31 49 47 49 96 49 4D 49  // &.W.[.<I1IGI.IMI
    4940: 65 49 7F 49 8A 49 90 49 53 51 56 8B D8 E8 B0 FE  // eI.I.I.ISQV.....
    4950: 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40  // ....&....u"&...@
    4960: 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44  // s.&.w.&._....&.D
    4970: 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77  // ...&..&.W..{.&.w
    4980: 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08  // .&.G.......uq...
    4990: 77 6C 03 F6 2E FF A4 CE 48 26 8B 47 10 26 8B 57  // wl......H&.G.&.W
    49A0: 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26  // ..T.&.G.&.W..I.&
    49B0: 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2  // .G".K&.O32....3.
    49C0: E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F  // ...........+.&.O
    49D0: 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA  // 32....3.........
    49E0: F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9  // .......&.G.&.W..
    49F0: 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0  // ..&.G$..&.G ..3.
    4A00: 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B  // 3....SV.......&.
    4A10: 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01  // G.&.W.........&.
    4A20: 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0  // G.&.T......^[.3.
    4A30: 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03  // 3..SV.....&.w.&.
    4A40: 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47  // w"...T.^[.S..&.G
    4A50: 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53  // +....&.G.&.W.[.S
    4A60: 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26  // ..&.G+......S..&
    4A70: C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26  // .G+......S....5&
    4A80: 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 E6  // ._.......2......
    4A90: A1 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0  // .[.SRV..&.G,2...
    4AA0: 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    4AB0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 1A A2  // &.G-2...........
    4AC0: 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8  // &.G.&.W....SQV..
    4AD0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A A2 E3 0A 26 D1  // &.O+2.....J...&.
    4AE0: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    4AF0: C1 E6 02 8B 8C 2A A2 8B B4 2C A2 26 21 4F 04 26  // .....*...,.&!O.&
    4B00: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 52 A2 E3  // !w.&.O*2.....R..
    4B10: 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26  // .&.g.&.W...&.O.&
    4B20: 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51  // .w.&.O.&.w....SQ
    4B30: 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // RVW......&.G+2..
    4B40: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 A2 32 ED  // ....&.G*....R.2.
    4B50: 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2 FA  // ..*...,.........
    4B60: F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A  // ....&!G.&!W.&.G*
    4B70: 32 E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26 D1 6F 0A  // 2.....R.2...&.o.
    4B80: 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    4B90: 84 2A A2 8B 94 2C A2 26 21 47 08 26 21 57 0A 26  // .*...,.&!G.&!W.&
    4BA0: 8A 47 2A 32 E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26  // .G*2.....R.2...&
    4BB0: D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    4BC0: 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53  // .&.G.&.W._^ZY[.S
    4BD0: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A A2  // QV..&.O+2.....J.
    4BE0: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    4BF0: 32 ED 8B F1 C1 E6 02 8B 8C 2A A2 8B B4 2C A2 26  // 2........*...,.&
    4C00: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
    4C10: 8C 52 A2 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .R...&.o.&._...&
    4C20: 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 2A A2 8B B4  // .O+2........*...
    4C30: 2C A2 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57  // ,.&!O.&!w....QRW
    4C40: 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47  // ......&..+.t.&.G
    4C50: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 02 A2 26 89 47  // ,2...........&.G
    4C60: 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03  // .&.W...&.G,2....
    4C70: F0 8B C3 FF 94 0E A2 26 8A 47 2D 32 E4 8B F0 03  // .......&.G-2....
    4C80: F0 8B C3 FF 94 1A A2 26 89 47 04 26 89 57 06 8C  // .......&.G.&.W..
    4C90: D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4  // ...&..+.tJ&.G+2.
    4CA0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 A2 32  // .....&.G*....R.2
    4CB0: ED 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2  // ...*...,........
    4CC0: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8  // .....&!G.&!W....
    4CD0: F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    4CE0: 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08  // W...&.W.&.G.&.W.
    4CF0: 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    4D00: FF 94 F6 A1 5F 5A 59 C3 53 51 52 56 57 8B D8 26  // ...._ZY.SQRVW..&
    4D10: 8A 47 2A 32 E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26  // .G*2.....R.2...&
    4D20: D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47  // .g.&.W.......&.G
    4D30: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
    4D40: 52 A2 32 ED 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0  // R.2...*...,.....
    4D50: D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06  // ........&.G.&.W.
    4D60: 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A  // &.G.&.W.&!G.&!W.
    4D70: E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32  // .V.U..QRP..&.G,2
    4D80: E4 8B F0 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26  // ...........&.G.&
    4D90: 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26  // .W.&.G+.F......&
    4DA0: 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03  // .G.&.W.&.O-2....
    4DB0: F1 8B C3 FF 94 1A A2 26 89 47 14 26 89 57 16 8B  // .......&.G.&.W..
    4DC0: C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 4A A2 E3  // ..D..F.2.....J..
    4DD0: 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32  // .&.o.&._...&.W+2
    4DE0: F6 8B F2 C1 E6 02 8B 84 2A A2 8B 94 2C A2 26 21  // ........*...,.&!
    4DF0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4E00: 52 A2 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6  // R.2...&.g.&.W...
    4E10: 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    4E20: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1  // &.G,2...........
    4E30: 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F  // .f.ZY].Q...V.&.O
    4E40: 2B 32 ED 8B F1 8A 8C 4A A2 E3 0A 26 D1 6F 06 26  // +2.....J...&.o.&
    4E50: D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED  // ._........&.O,2.
    4E60: 8B F1 03 F1 8B C3 FF 94 F6 A1 59 C3 8B D8 E8 22  // ..........Y...."
    4E70: FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09  // ....U.&.G.&.w.&.
    4E80: 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // G.&.w.&.G,2.....
    4E90: 8B C3 FF 94 F6 A1 C3 53 56 8B D8 E8 F5 FB 8B C3  // .......SV.......
    4EA0: E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26  // .(.&.G.&.w.&1G.&
    4EB0: 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // 1w.&.G,2........
    4EC0: 94 F6 A1 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3  // ...^[.SQV.......
    4ED0: E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57  // ...&.O...&.g.&.W
    4EE0: 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1  // ......F.&.O,2...
    4EF0: 03 F1 8B C3 FF 94 F6 A1 5E 59 5B C3 53 51 56 8B  // ........^Y[.SQV.
    4F00: D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26  // .........&.O...&
    4F10: D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72  // .o.&._.....R...r
    4F20: FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06  // ........&.G.&.W.
    4F30: 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47  // &.G.&.T......&.G
    4F40: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1 5A C3 52  // ,2...........Z.R
    4F50: 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04  // ...>....q...&.G.
    4F60: 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51 52  // &.W.&)G.&.T...QR
    4F70: 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B  // ........U.&.D.&.
    4F80: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44  // T.&.\.&.L....&.D
    4F90: 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2  // .&.T.ZY.R.......
    4FA0: E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8  // .,....\.Z.QRW...
    4FB0: E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26  // .......&.D.&.T.&
    4FC0: 8B 5C 04 26 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89  // .\.&.L....&.D.&.
    4FD0: 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B  // T.....&.D.&.T.&.
    4FE0: 5C 04 26 8B 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C  // \.&.L....&.\.&.L
    4FF0: 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B  // ....R...........
    5000: C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8  // ....Z.QR........
    5010: BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B  // ......&.G.&.W.&;
    5020: 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A  // W.u.&;G.u.&.G0.Z
    5030: 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A  // Y...&.G.&;G.r.u.
    5040: 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47  // &;W.s.3......&.G
    5050: 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B  // 0ZY.QRW..&.G,2..
    5060: F0 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26 89 57  // .........&.G.&.W
    5070: 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    5080: 8B F8 8A 8D 4A A2 32 ED 8B 84 2A A2 8B 94 2C A2  // ....J.2...*...,.
    5090: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08  // ............&!G.
    50A0: 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06  // &!W..M.U..QRW...
    50B0: 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    50C0: 8D 4A A2 32 ED 8B 84 2A A2 89 46 F4 8B 84 2C A2  // .J.2...*..F...,.
    50D0: 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4  // .F....f..V....~.
    50E0: 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0  // .F..F.&.G,2.....
    50F0: 8B C3 FF 94 02 A2 26 89 47 08 26 89 57 0A 8B C3  // ......&.G.&.W...
    5100: E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B  // .G.&.G.&.W......
    5110: 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14  // V...&#G.&#W.&.G.
    5120: 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C  // &.W.&!...F.&!G..
    5130: D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04  // ..w5..&.<.s.&.O.
    5140: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B  // ..&.g.&.W.....&.
    5150: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21  // O...&.o.&._...&!
    5160: 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47  // ...F.&!G.&.W.&.G
    5170: 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    5180: F0 03 F0 8B C3 FF 94 F6 A1 8D 66 FA 5F E9 A3 FC  // ..........f._...
    5190: 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26  // R........4.&.G.&
    51A0: 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8  // .W.&.W.u.&.G.t..
    51B0: 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52  // .......&.G0Z.SQR
    51C0: 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 1A  // V..&.O-2........
    51D0: A2 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B  // .&.G.&.W.&.G+2..
    51E0: F0 8A 8C 4A A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...J...&.o.&._..
    51F0: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 2A A2 8B 94  // .&.G+.......*...
    5200: 2C A2 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8  // ,.&!G.&!W....R..
    5210: E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26  // ...&.G.&.W.&.G.&
    5220: 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0  // .W.Z.QR.........
    5230: 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B  // &.w.&.t..<ZZt[&.
    5240: 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26  // w.&.t..<cu.&.w.&
    5250: FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A  // .D....!.&.G.&.W.
    5260: 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E  // .....&.G.&.W....
    5270: C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26  // .&.W.&.G.&;G.u.&
    5280: 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14  // ;W.u.&.w.&..&.G.
    5290: 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47  // ..&.G.ZY.&._.&.G
    52A0: 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77  // ..ZY.RW......&.w
    52B0: 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22  // .&.t..T...u.&.G"
    52C0: 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F  // .../...u.&.w.&.?
    52D0: 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07  // &.4&+u.&.w"..&..
    52E0: E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26  // .......2.......&
    52F0: 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B  // .G"&._.&.G.._Z..
    5300: D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44  // .&.g/.&.w.&.t..D
    5310: 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B  // .&.G4&._.&.G....
    5320: D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20  // .&.w.&.t..t.&.w 
    5330: EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67  // ..S..&.G,2.$.&.g
    5340: 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B  // /....&.G..O...&.
    5350: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    5360: C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83  // .G......@.&._.&.
    5370: 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // G.....&.w.&.t..D
    5380: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    5390: 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    53A0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    53B0: C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26  // .......SV..&.w.&
    53C0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    53D0: 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B  // ........c.SV..&.
    53E0: 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01  // w...&._.._....&.
    53F0: 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44  // \.^[.QR..&.w.&.D
    5400: 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44  // ..&.......&.w(.D
    5410: 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B  // .2........<.tO&.
    5420: 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31  // w(.T.2......&.G1
    5430: 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24  // &.w.&.4.D....2.$
    5440: 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B  // ....2.$.&.g/....
    5450: 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0  // &.G.&.7&.G......
    5460: 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3  // .&..&.G2.&.O(ZY.
    5470: 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E  // S..&.G2.[.W.....
    5480: C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30  // .&..,.t.&.G,&:G0
    5490: 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u.&.w.&.t.&...&.
    54A0: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3  // =.t...&._.&.w._.
    54B0: 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8  // &._.&.G.._.SVW..
    54C0: 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26  // ....&..0.t.&.G0&
    54D0: 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F  // :G,u &.w.&.t.&..
    54E0: 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77  // .&.=.t...&._.&.w
    54F0: 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1  // ._^[.&._.&.G....
    5500: 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5  // SVW......&..0.t.
    5510: EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26  // ..U..SQRW..&.w.&
    5520: 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80  // .t...&.G=.....&.
    5530: 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26  // .=.s &.w.&.W=2.&
    5540: 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26  // .|.........&.T5&
    5550: FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1  // .G=..&.....2....
    5560: E6 02 8A 94 77 A2 26 01 55 02 26 8B 7F 28 8A 55  // ....w.&.U.&..(.U
    5570: 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0  // ....&.W-&..(.U..
    5580: EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01  // .....&.W+&..(.U.
    5590: C0 EA 06 26 88 57 2A 8A 94 76 A2 26 88 57 2C 8D  // ...&.W*..v.&.W,.
    55A0: 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02  // f._ZY[].SV..&.w.
    55B0: 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3  // ...tH.....t.....
    55C0: 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6  // ...^[.SV..&.w...
    55D0: 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16  // .tH.....t ......
    55E0: 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8  // .U..SQVW..@...F.
    55F0: E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03  // ......F.&.E.._..
    5600: D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0  // ..^..F........F.
    5610: 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E  // 2..F......2....^
    5620: E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7  // ....?...e..F..f.
    5630: F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00  // ..F...F...f.F...
    5640: 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F  // ...F....F....<..
    5650: 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03  // ....V...2....^..
    5660: D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47  // ..?.tu&.E......G
    5670: 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00  // .2......2.......
    5680: 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA  // t...3.P.......F.
    5690: 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03  // ..tA...&.G...2..
    56A0: C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26  // ..^...&.E....^.&
    56B0: 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B  // ...^.&.....&.G..
    56C0: 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6  // ^..v.&.w..^..^..
    56D0: 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A  // F.....F.....F...
    56E0: 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46  // F.2.........f..F
    56F0: EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0  // .2..........^...
    5700: 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F  // &._..^..^.&._..?
    5710: 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E  // [uJ.F...^.&._..^
    5720: F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1  // ..^.&...G.2.....
    5730: 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB  // .2.......^..^...
    5740: 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1  // t.&...G....2.$..
    5750: E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8  // ......^.&)....F.
    5760: E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1  // ......F......2..
    5770: E3 02 8D 46 B8 FF 97 74 A2 E9 72 FF 83 7E F6 00  // ...F...t..r..~..
    5780: 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32  // .....~..t..F...2
    5790: C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A  // ..f._^....SQ..&.
    57A0: 4F 04 32 ED E8 E5 E7 59 5B C3 53 51 8B D8 26 8A  // O.2....Y[.SQ..&.
    57B0: 4F 04 32 ED E8 E0 E7 59 5B C3 53 8B D8 26 8A 47  // O.2....Y[.S..&.G
    57C0: 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32  // .2...[.SQ..&.O.2
    57D0: ED E8 34 E1 59 5B C3 53 8B D8 66 50 66 52 66 51  // ..4.Y[.S..fPfRfQ
    57E0: 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66  // f&.G.f&.W.f&.O.f
    57F0: F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    5800: 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // fX[.S..fPfRfQf&.
    5810: 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66  // G.f&.O.f..f&.G.f
    5820: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8  // &.W.fYfZfX[.SW..
    5830: 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B  // &._......f...._[
    5840: C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87  // .SW..&.G.&.W....
    5850: D3 66 C1 E3 10 8B DA C1 E3 02 E8 0A EB EB D8 53  // .f.............S
    5860: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    5870: 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52  // ...&._...._Z[.SR
    5880: 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    5890: C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52  // .&._&._....Z[.SR
    58A0: 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66  // V..&.\&._......f
    58B0: C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3  // ....&.D.&.T.^Z[.
    58C0: 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // SQRW..&.G.&.W..f
    58D0: C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B  // .......&.G.&.W..
    58E0: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA  // ...f............
    58F0: E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06  // ._ZY[...f.......
    5900: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    5910: 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37  // ..u.......<.u..7
    5920: 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03  // ....<.u.._....<.
    5930: 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75  // u.......^....<.u
    5940: 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB  // ..}<.u.......V..
    5950: 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14  // q<.u.......^..N.
    5960: 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8  // .V..]<.u..U<.u..
    5970: D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C  // .....~..I<.u..A<
    5980: 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46  // .u..e....N..~..F
    5990: 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04  // ../<.u..'<.u..Z.
    59A0: 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75  // ...^...<.u...<.u
    59B0: 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02  // .......^....O...
    59C0: 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // 2....F.f_f^f]f[f
    59D0: 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 66 24 8C  // ZfYfX...P....f$.
    59E0: D8 A3 40 69 A3 50 69 A3 62 69 2E 8E 1E 5E 24 A3  // ..@i.Pi.bi...^$.
    59F0: AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41  // ...X..01.00.VESA
    5A00: 00 03 D0 01 00 00 01 00 00 00 00 00 00 00 00 03  // ................
    5A10: 13 20 ED 00 00 00 80 00 00 00 8E 59 00 00 B9 3F  // . .........Y...?
    5A20: 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE  // .......f3..f....
    5A30: 94 59 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C  // .Y."......O..G..
    5A40: 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F  // O..O..O ..".....
    5A50: E8 8F DD B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33  // ....O2..VQW...f3
    5A60: C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45  // ..f._Y.........E
    5A70: 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06  // ...E.@..E.@..E..
    5A80: C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E  // .E...E...E..f.E>
    5A90: 00 84 D7 17 8E DB E8 5D D6 66 0B C0 0F 84 E1 00  // .......].f......
    5AA0: 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 4D 5D 66  // ..f.E(..f....M]f
    5AB0: 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01  // .E..............
    5AC0: 53 8E DB BE 80 4C E8 3B DB 5B 06 1F 0F 84 B1 00  // S....L.;.[......
    5AD0: 53 E8 B7 DD 66 89 45 12 C7 45 16 08 10 8D 5C 0C  // S...f.E..E....\.
    5AE0: E8 8E E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 80  // ...f.E.f.E6.\...
    5AF0: E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A  // .f.E#f.E:.\..r..
    5B00: C0 75 03 5B EB 7B E8 82 DD 66 C1 E8 10 3D 58 02  // .u.[.{...f...=X.
    5B10: 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6  // t.=^.t.w..E.....
    5B20: 45 17 0E 2E A1 60 24 89 45 08 8D 5C 04 E8 41 E8  // E....`$.E..\..A.
    5B30: 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0  // f..f......E..E2.
    5B40: 08 D2 E0 88 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03  // ....E..\..%.[=..
    5B50: 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88  // w/S.....3...[...
    5B60: 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 4C E8  // E..E5.E4..WS..L.
    5B70: ED D5 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB  // ..[_..u....%.2..
    5B80: 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68  // ....O..^......th
    5B90: 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2  // ..u....!...ua...
    5BA0: 01 BE 20 4C E8 5D DA 74 55 E8 BE DC 0A C0 75 0E  // .. L.].tU.....u.
    5BB0: 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 12  // f............:..
    5BC0: D8 74 06 E8 A1 D6 E8 8D D1 BE 20 4C E8 64 D5 74  // .t........ L.d.t
    5BD0: 2D E8 A5 00 E8 2C 00 66 BB 20 4C 00 4C E8 81 DC  // -....,.f. L.L...
    5BE0: BE 00 4C E8 84 DC 66 C1 E8 10 8B D8 32 C0 F6 C7  // ..L...f.....2...
    5BF0: 80 74 02 B0 40 E8 94 D5 B0 4F 32 E4 EB 04 B0 4F  // .t..@....O2....O
    5C00: B4 03 C3 56 06 33 C0 8E C0 BE 20 4C E8 7C DC 8B  // ...V.3.... L.|..
    5C10: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    5C20: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    5C30: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    5C40: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 19 73 8C  // ..&.....&.....s.
    5C50: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    5C60: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    5C70: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    5C80: EF B9 04 00 B4 01 BE F0 5B AC 86 E0 EF 8A E0 FE  // ........[.......
    5C90: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    5CA0: F4 5B 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // .[....B.J.......
    5CB0: EC B9 14 00 BA C0 03 32 E4 BE FD 5B 8A C4 EE AC  // .......2...[....
    5CC0: EE FE C4 E2 F7 C3 BE 00 4C E8 9E DB 66 C1 E8 10  // ........L...f...
    5CD0: 8B D8 E8 6E DB 75 05 E8 5A DB 75 04 B8 4F 00 C3  // ...n.u..Z.u..O..
    5CE0: B8 4F 03 C3 E8 5C DB 74 53 BE 00 4C 80 FB 00 74  // .O...\.tS..L...t
    5CF0: 18 80 FB 01 75 05 E8 9A DB EB 1D 80 FB 02 75 10  // ....u.........u.
    5D00: 8B C1 E8 4D DB D3 E8 8B C8 E8 27 D6 74 2E EB 08  // ...M......'.t...
    5D10: 80 FB 03 75 24 E8 F1 DA E8 37 DB 8B D8 D3 E3 50  // ...u$....7.....P
    5D20: 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3  // 3....;.w........
    5D30: 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03  // ..X...O..2...O..
    5D40: C3 00 0A DB 75 07 8A EF E8 F0 D6 EB 05 E8 D5 D6  // ....u...........
    5D50: 8A F8 B0 4F 32 E4 C3 00 E8 E8 DA 74 2C BE 00 4C  // ...O2......t,..L
    5D60: E8 07 DB 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05  // ...f.....@u...u.
    5D70: E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 BF E5  // ........u.......
    5D80: D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0  // .....O2...O...2.
    5D90: C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1  // .RSfP........@f.
    5DA0: E0 10 8B C2 BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4  // ................
    5DB0: 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53  // fX[Z....fPfQfRfS
    5DC0: 66 55 66 56 66 57 0E 1F E8 08 E6 E8 8A FF E8 27  // fUfVfW.........'
    5DD0: E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66  // ....V..F.f_f^f]f
    5DE0: 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 1C A1  // [fZfYfX.........
    5DF0: 2E 8B 0E 1A A1 B8 4F 00 C3 00 0A DB 75 06 B7 04  // ......O.....u...
    5E00: B3 10 EB 26 80 FB 01 75 14 E8 C7 D5 75 21 53 B1  // ...&...u....u!S.
    5E10: 01 0A FF 74 02 B1 00 E8 E1 D4 5B EB 0D 80 FB 02  // ...t......[.....
    5E20: 75 0D E8 F4 D5 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8  // u..........O2...
    5E30: 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E  // O........u......
    5E40: E8 90 D5 75 0E 33 C0 53 E8 17 C9 5B 74 05 B0 4F  // ...u.3.S...[t..O
    5E50: 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3  // 2...O......r..B.
    5E60: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5E70: 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A 5E  // ..P.......X...:^
    5E80: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    5E90: C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A  // ...P.......X...:
    5EA0: 5E C3 74 5E 84 97 9D 97 BA 97 67 5F BD 8E EF 8E  // ^.t^......g_....
    5EB0: 62 8F E5 8F 73 91 77 91 80 94 51 95 D4 95 3B 96  // b...s.w...Q...;.
    5EC0: D6 97 38 98 E1 9A 80 61 28 9F 28 5E 28 5E 28 5E  // ..8....a(.(^(^(^
    5ED0: 28 5E 28 5E 28 5E F8 9F FB 83 4F 85 2E 8E 1E 5E  // (^(^(^....O....^
    5EE0: 24 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B  // $.&...P........;
    5EF0: D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47  // .u.X........0&.G
    5F00: 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06  // ..t.... ..uI....
    5F10: A8 01 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80  // ..tA..S.jA..[u..
    5F20: 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08  // &........+X.....
    5F30: 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85  // .&.........c....
    5F40: 04 08 00 C6 06 84 04 18 C7 06 0C 01 06 6B 8C 0E  // .............k..
    5F50: 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53  // ...B..&.......XS
    5F60: 50 0E 1F 33 C9 8A C8 E8 69 D4 74 06 E8 F8 D2 E8  // P..3....i.t.....
    5F70: E4 CD B2 08 BE 40 4C E8 8A D6 BE 40 4C E8 B3 D1  // .....@L....@L...
    5F80: 58 5B 0F 84 6E FF 2E 8E 1E 5E 24 0E 07 E8 13 29  // X[..n....^$....)
    5F90: 0E 1F 53 66 BB 40 4C 00 4C E8 C5 D8 BE 00 4C B0  // ..Sf.@L.L.....L.
    5FA0: 20 E8 E8 D1 5B 2E 8E 1E 5E 24 0E 07 E8 1C 2E E8  //  ...[...^$......
    5FB0: 24 00 E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F  // $..(=........>..
    5FC0: BE 00 4C B0 10 E8 C4 D1 E8 F7 2D E8 EF 2D C3 8B  // ..L.......-..-..
    5FD0: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    5FE0: 52 00 E8 5C 0A C3 53 83 C3 0A 8B 16 63 04 B9 19  // R..\..S.....c...
    5FF0: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    6000: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    6010: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    6020: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    6030: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    6040: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    6050: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    6060: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    6070: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    6080: 8A C4 EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F  // ...2.....I-..t..
    6090: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    60A0: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    60B0: F7 5B C3 BB 3E 63 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[..>c......}...
    60C0: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    60D0: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    60E0: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00  // .t.<.t..@.......
    60F0: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0  // ...@............
    6100: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    6110: 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF C0 60 BE  // u.............`.
    6120: E1 60 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0  // .`3..N..........
    6130: 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05  // ..............@.
    6140: 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB  // ......b@.S..I...
    6150: 07 7F 10 32 FF D1 E3 2E 8B 87 FD 60 A2 65 04 88  // ...2.......`.e..
    6160: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    6170: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    6180: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 5E 24  // ....;.u.......^$
    6190: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    61A0: 04 B9 00 20 2E 8B 3E 64 24 26 F6 47 33 01 75 0E  // ... ..>d$&.G3.u.
    61B0: 26 F6 47 09 01 75 1B 2E 8B 3E 62 24 EB 14 3C 06  // &.G..u...>b$..<.
    61C0: 7E 0B 2E 8B 3E 60 24 26 8A 67 37 B5 40 66 33 C0  // ~...>`$&.g7.@f3.
    61D0: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    61E0: 80 26 87 04 7F 07 1F C3 2E 8E 1E 5E 24 80 FB 10  // .&.........^$...
    61F0: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    6200: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    6210: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    6220: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    6230: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    6240: 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB  // ...u............
    6250: 30 74 03 E9 96 00 50 E8 2A 3E 8A EF BA CC 03 EC  // 0t....P.*>......
    6260: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    6270: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    6280: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    6290: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    62A0: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    62B0: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    62C0: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    62D0: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    62E0: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    62F0: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    6300: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    6310: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    6320: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    6330: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    6340: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    6350: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    6360: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    6370: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    6380: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    6390: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 E8 88  // .N..F...........
    63A0: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    63B0: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    63C0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    63D0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    63E0: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    63F0: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    6400: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    6410: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    6420: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    6430: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    6440: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    6450: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    6460: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    6470: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    6480: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    6490: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    64A0: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    64B0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    64C0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    64D0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    64E0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    64F0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6500: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    6510: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    6520: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    6530: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    6540: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    6550: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    6560: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    6570: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    6580: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    6590: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    65A0: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    65B0: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    65C0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    65D0: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    65E0: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    65F0: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    6600: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    6610: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    6620: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    6630: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    6640: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    6650: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    6660: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    6670: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    6680: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    6690: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    66A0: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    66B0: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    66C0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    66D0: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    66E0: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    66F0: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6700: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    6710: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6720: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    6730: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6740: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    6750: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    6760: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    6770: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6780: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    6790: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    67A0: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    67B0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    67C0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    67D0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    67E0: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    67F0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    6800: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    6810: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    6820: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    6830: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    6840: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    6850: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    6860: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    6870: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    6880: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    6890: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    68A0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    68B0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    68C0: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    68D0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    68E0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    68F0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6900: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    6910: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    6920: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6930: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6940: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    6950: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    6960: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    6970: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    6980: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    6990: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    69A0: 00 00 40 05 0F FF 3E 63 00 C0 00 00 00 00 00 00  // ..@...>c........
    69B0: 00 00 00 00 00 00 5E 69 00 C0 00 00 00 00 00 00  // ......^i........
    69C0: 00 00 00 00 00 00 1A 00 F6 A0 00 C0 00 00 00 00  // ................
    69D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    69E0: 1E E8 10 00 2E 8E 1E 5E 24 E8 F8 36 E8 CF 36 E8  // .......^$..6..6.
    69F0: 70 1A 1F C3 2E 8E 1E 5E 24 C7 06 87 04 60 F9 C6  // p......^$....`..
    6A00: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    6A10: E8 6D 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .m.....&....... 
    6A20: C7 06 63 04 D4 03 0E 1F E8 89 C3 F7 C1 02 00 75  // ..c............u
    6A30: 03 E8 22 C3 C3 1E 2E 8E 1E 5E 24 0E 07 EB 00 1F  // .."......^$.....
    6A40: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6A50: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE BA 6A B9  // ......>c..u/..j.
    6A60: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6A70: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6A80: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6A90: 06 89 04 06 74 31 B9 F8 00 BF BE 64 3C 08 74 11  // ....t1.....d<.t.
    6AA0: B9 40 00 BF 3E 66 3C 38 74 07 3C 3F 74 03 BF 7E  // .@..>f<8t.<?t..~
    6AB0: 66 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // f3.........B....
    6AC0: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    6AD0: 3F 74 2A B9 08 00 33 DB 51 E8 46 D3 B9 08 00 F7  // ?t*...3.Q.F.....
    6AE0: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    6AF0: E8 2F D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ./....3..W....@.
    6B00: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6B10: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6B20: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6B30: C1 EF 02 83 E7 0F 2E 8A B5 AA 6A 8B FB D1 EF 83  // ..........j.....
    6B40: E7 0F 2E 8A AD AA 6A 8B FB 83 E7 0F 2E 8A 8D AA  // ......j.........
    6B50: 6A C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // j.........B.G...
    6B60: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6B70: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6B80: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6B90: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    6BA0: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    6BB0: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    6BC0: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    6BD0: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    6BE0: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    6BF0: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6C00: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6C10: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6C20: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6C30: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6C40: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6C50: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    6C60: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    6C70: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    6C80: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    6C90: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    6CA0: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    6CB0: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    6CC0: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    6CD0: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    6CE0: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    6CF0: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    6D00: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    6D10: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    6D20: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    6D30: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    6D40: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    6D50: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    6D60: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    6D70: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    6D80: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    6D90: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    6DA0: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    6DB0: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    6DC0: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    6DD0: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    6DE0: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    6DF0: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    6E00: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    6E10: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    6E20: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    6E30: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    6E40: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    6E50: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    6E60: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    6E70: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    6E80: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    6E90: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    6EA0: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    6EB0: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    6EC0: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    6ED0: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    6EE0: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    6EF0: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    6F00: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    6F10: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    6F20: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    6F30: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    6F40: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    6F50: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    6F60: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    6F70: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    6F80: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    6F90: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    6FA0: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    6FB0: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    6FC0: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    6FD0: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    6FE0: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    6FF0: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    7000: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    7010: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    7020: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    7030: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    7040: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    7050: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    7060: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    7070: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    7080: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    7090: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    70A0: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    70B0: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    70C0: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    70D0: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    70E0: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    70F0: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    7100: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    7110: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    7120: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    7130: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    7140: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    7150: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    7160: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7170: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    7180: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    7190: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    71A0: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    71B0: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    71C0: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    71D0: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    71E0: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    71F0: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    7200: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    7210: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    7220: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    7230: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7240: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    7250: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    7260: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    7270: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    7280: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    7290: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    72A0: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    72B0: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    72C0: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    72D0: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    72E0: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    72F0: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    7300: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    7310: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    7320: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    7330: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    7340: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    7350: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    7360: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    7370: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    7380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7390: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    73A0: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    73B0: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    73C0: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    73D0: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    73E0: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    73F0: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    7400: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    7410: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    7420: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    7430: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    7440: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    7450: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    7460: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    7470: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    7480: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    7490: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    74A0: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    74B0: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    74C0: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    74D0: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    74E0: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    74F0: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    7500: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    7510: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    7520: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    7530: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    7540: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    7550: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    7560: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    7570: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    7580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7590: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    75A0: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    75B0: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    75C0: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    75D0: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    75E0: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    75F0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    7600: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    7610: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    7620: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    7630: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    7640: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    7650: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    7660: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    7670: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    7680: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    7690: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    76A0: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    76B0: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    76C0: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    76D0: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    76E0: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    76F0: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    7700: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    7710: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    7720: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    7730: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    7740: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    7750: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    7760: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    7770: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    7780: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    7790: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    77A0: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    77B0: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    77C0: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    77D0: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    77E0: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    77F0: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    7800: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    7810: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    7820: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    7830: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    7840: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    7850: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    7860: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    7870: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7880: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    7890: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    78A0: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    78B0: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    78C0: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    78D0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    78E0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    78F0: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7900: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7910: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    7920: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    7930: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    7940: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    7950: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    7960: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    7970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7980: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    7990: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    79A0: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    79B0: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    79C0: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    79D0: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    79E0: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    79F0: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7A00: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7A10: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7A20: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7A30: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7A40: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7A50: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7A60: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7A70: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7A80: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7A90: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    7AA0: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    7AB0: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    7AC0: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    7AD0: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    7AE0: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7AF0: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7B00: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7B10: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7B20: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7B30: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7B40: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7B50: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7B60: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7B70: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7B80: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7B90: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    7BA0: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    7BB0: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    7BC0: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7BD0: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    7BE0: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    7BF0: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7C00: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7C10: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7C20: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7C30: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7C40: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7C50: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7C60: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    7C70: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    7C80: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    7C90: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    7CA0: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    7CB0: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    7CC0: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7CD0: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    7CE0: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    7CF0: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    7D00: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    7D10: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    7D20: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7D30: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    7D40: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    7D50: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    7D60: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    7D70: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    7D80: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    7D90: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    7DA0: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    7DB0: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    7DC0: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    7DD0: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    7DE0: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    7DF0: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    7E00: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    7E10: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    7E20: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    7E30: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    7E40: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    7E50: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    7E60: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    7E70: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    7E80: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    7E90: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    7EA0: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    7EB0: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    7EC0: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    7ED0: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    7EE0: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    7EF0: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    7F00: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    7F10: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    7F20: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7F30: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    7F40: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    7F50: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    7F60: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7F70: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    7F80: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    7F90: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    7FA0: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    7FB0: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    7FC0: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    7FD0: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    7FE0: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    7FF0: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    8000: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    8010: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    8020: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    8030: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    8040: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    8050: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8060: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    8070: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8080: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    8090: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    80A0: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    80B0: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    80C0: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    80D0: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    80E0: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    80F0: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    8100: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    8110: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    8120: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    8130: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    8140: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    8150: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8160: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8170: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    8180: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    8190: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    81A0: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    81B0: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    81C0: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    81D0: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    81E0: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    81F0: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    8200: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    8210: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    8220: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    8230: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    8240: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    8250: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    8260: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    8270: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    8280: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    8290: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    82A0: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    82B0: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    82C0: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    82D0: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    82E0: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    82F0: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    8300: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    8310: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    8320: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    8330: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    8340: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    8350: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    8360: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    8370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8380: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    8390: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    83A0: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    83B0: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    83C0: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    83D0: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    83E0: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    83F0: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    8400: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    8410: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    8420: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    8430: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    8440: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    8450: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    8460: 19 73 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .s...t..F.W2..@.
    8470: F3 AA 5F BB E6 A0 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._...&..&.M....
    8480: 5E 24 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // ^$W.I..........&
    8490: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    84A0: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    84B0: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    84C0: 7F 1D 32 FF D1 E3 2E 8A 87 BE A0 32 E4 0A C0 74  // ..2........2...t
    84D0: 01 40 26 89 45 27 2E 8A 87 BF A0 26 88 45 29 A1  // .@&.E'.....&.E).
    84E0: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    84F0: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    8500: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    8510: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    8520: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    8530: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    8540: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    8550: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    8560: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    8570: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    8580: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    8590: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    85A0: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    85B0: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    85C0: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    85D0: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    85E0: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    85F0: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    8600: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    8610: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    8620: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    8630: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    8640: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    8650: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    8660: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    8670: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    8680: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    8690: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    86A0: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    86B0: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    86C0: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    86D0: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    86E0: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    86F0: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    8700: 89 47 02 51 57 2E 8E 1E 5E 24 A0 10 04 24 30 AA  // .G.QW...^$...$0.
    8710: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    8720: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    8730: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    8740: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    8750: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    8760: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    8770: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    8780: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    8790: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    87A0: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    87B0: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 5E 24  // ...&......Q...^$
    87C0: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    87D0: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    87E0: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    87F0: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    8800: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    8810: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    8820: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    8830: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    8840: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    8850: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    8860: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    8870: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    8880: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    8890: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    88A0: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    88B0: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    88C0: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    88D0: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    88E0: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    88F0: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8900: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8910: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    8920: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    8930: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    8940: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    8950: 06 1E 60 2E 8E 1E 5E 24 2E 83 0E 68 24 00 75 6E  // ..`...^$...h$.un
    8960: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    8970: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8980: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    8990: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    89A0: B6 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    89B0: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    89C0: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    89D0: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    89E0: 32 C0 2E 8E 06 60 24 5A C3 A0 85 04 F6 E3 8A F7  // 2....`$Z........
    89F0: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8A00: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8A10: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8A20: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8A30: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8A40: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8A50: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8A60: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8A70: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8A80: EB 00 EC 4A 9D C3 1E 2E 8E 1E 5E 24 8B 16 63 04  // ...J......^$..c.
    8A90: 80 C2 06 1F C3 1E 2E 8E 1E 5E 24 8B 16 63 04 1F  // .........^$..c..
    8AA0: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    8AB0: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 5E 24 80 3E 49  // ...........^$.>I
    8AC0: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    8AD0: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 62 24 A0  // t..>I....P...b$.
    8AE0: 10 04 24 30 3C 30 74 05 2E 8E 06 64 24 58 0B C0  // ..$0<0t....d$X..
    8AF0: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8B00: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8B10: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8B20: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8B30: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8B40: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8B50: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8B60: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8B70: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8B80: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8B90: C3 8B D8 E8 2E 00 2E 8E 1E 64 24 8A C3 22 DF D3  // .........d$.."..
    8BA0: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    8BB0: 88 1C C3 8A FC E8 0C 00 2E 8E 1E 64 24 8A 04 D2  // ...........d$...
    8BC0: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    8BD0: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    8BE0: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    8BF0: 01 C3 FC 8A D8 2E 8E 06 64 24 8B C1 E8 86 00 75  // ........d$.....u
    8C00: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 64  // ......$........d
    8C10: 24 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // $.....m.u.......
    8C20: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8C30: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8C40: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8C50: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    8C60: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    8C70: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    8C80: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    8C90: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    8CA0: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    8CB0: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    8CC0: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    8CD0: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    8CE0: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 96 8C  // ....Z...........
    8CF0: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 96 8C C3 00 03  // ................
    8D00: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    8D10: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    8D20: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    8D30: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    8D40: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    8D50: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    8D60: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    8D70: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    8D80: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    8D90: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    8DA0: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    8DB0: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    8DC0: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    8DD0: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    8DE0: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    8DF0: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    8E00: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    8E10: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    8E20: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    8E30: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    8E40: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    8E50: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    8E60: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    8E70: 4E 75 F7 C3 2E 8E 1E 5E 24 89 0E 60 04 8A C5 24  // Nu.....^$..`...$
    8E80: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    8E90: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    8EA0: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    8EB0: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    8EC0: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    8ED0: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    8EE0: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    8EF0: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    8F00: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    8F10: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    8F20: 0A E8 05 FE C3 2E 8E 1E 5E 24 A2 62 04 32 E4 8B  // ........^$.b.2..
    8F30: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    8F40: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    8F50: 84 50 04 E8 27 FE C3 2E 8E 1E 5E 24 8A 26 49 04  // .P..'.....^$.&I.
    8F60: E8 D1 A8 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    8F70: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    8F80: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    8F90: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    8FA0: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    8FB0: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    8FC0: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 5E 24 8A  // .....Z.U.....^$.
    8FD0: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    8FE0: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    8FF0: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    9000: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    9010: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    9020: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    9030: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    9040: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    9050: 5E 24 2E 8E 06 64 24 E8 5D FA 74 11 80 3E 49 04  // ^$...d$.].t..>I.
    9060: 07 7C 18 2E 8E 06 62 24 74 03 E9 B1 00 E8 49 FC  // .|....b$t.....I.
    9070: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    9080: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    9090: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    90A0: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    90B0: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    90C0: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    90D0: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    90E0: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    90F0: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    9100: CC 74 0F 2E 8E 1E 5E 24 C4 3E 7C 00 B0 80 B2 80  // .t....^$.>|.....
    9110: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    9120: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 60 24 E8  // I..|.u..Z....`$.
    9130: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    9140: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    9150: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    9160: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    9170: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    9180: E9 44 FF 2E 8E 06 60 24 A1 50 04 8B D0 32 F6 52  // .D....`$.P...2.R
    9190: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    91A0: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    91B0: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    91C0: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    91D0: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    91E0: 01 00 2E 8E 1E 5E 24 2E 8E 06 64 24 8A 26 49 04  // .....^$...d$.&I.
    91F0: E8 C4 F8 74 0F 2E 8E 06 62 24 80 FC 07 74 05 7C  // ...t....b$...t.|
    9200: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    9210: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    9220: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    9230: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    9240: 8E 06 64 24 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // ..d$.P.......P..
    9250: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    9260: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    9270: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    9280: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    9290: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    92A0: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    92B0: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    92C0: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    92D0: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    92E0: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    92F0: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    9300: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    9310: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    9320: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    9330: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    9340: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    9350: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    9360: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    9370: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    9380: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    9390: C5 06 0C 01 03 F0 2E 8E 06 60 24 58 57 51 50 9C  // .........`$XWQP.
    93A0: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    93B0: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    93C0: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    93D0: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    93E0: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    93F0: 10 E8 40 A4 74 16 38 E0 74 12 0F B6 D0 E8 91 C9  // ..@.t.8.t.......
    9400: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    9410: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    9420: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    9430: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 60 24  // ..2.....P.[...`$
    9440: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    9450: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    9460: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    9470: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    9480: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    9490: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    94A0: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    94B0: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    94C0: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    94D0: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    94E0: B2 CE B8 03 18 EF EB BC 2E 8E 1E 5E 24 80 3E 63  // ...........^$.>c
    94F0: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    9500: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    9510: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    9520: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    9530: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    9540: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    9550: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    9560: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    9570: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 5E 24 80  // &.].X[.......^$.
    9580: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    9590: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    95A0: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    95B0: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 5E 24 8A 26  // ..... ......^$.&
    95C0: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    95D0: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    95E0: CE 03 B0 08 EF 2E 8E 1E 60 24 F6 C3 80 75 1C B2  // ........`$...u..
    95F0: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    9600: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    9610: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    9620: 03 00 EF EB E1 50 2E 8E 06 60 24 A1 4A 04 C1 E0  // .....P...`$.J...
    9630: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 5E  // .......X&......^
    9640: 24 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // $.&I..o.t....w.t
    9650: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    9660: 29 C3 E8 35 F7 8A CC 2E 8E 1E 60 24 BA CE 03 32  // )..5......`$...2
    9670: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    9680: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    9690: F7 E2 03 C1 8B F8 2E 8E 1E 60 24 8A 05 8B EC 88  // .........`$.....
    96A0: 46 1A C3 2E 8E 1E 5E 24 8A 3E 62 04 8A CF D0 E1  // F.....^$.>b.....
    96B0: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    96C0: 4A 2E 8E 06 64 24 E8 EE F3 75 33 8A 1E 4A 04 8A  // J...d$...u3..J..
    96D0: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    96E0: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    96F0: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    9700: 06 62 24 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // .b$...t....u.2..
    9710: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    9720: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    9730: F6 C3 3C 07 75 04 E8 D3 8F C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    9740: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    9750: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    9760: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    9770: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    9780: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    9790: 00 B4 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    97A0: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    97B0: ED 89 14 2E 8E 06 64 24 E8 FC F2 74 0E 2E 8E 06  // ......d$...t....
    97C0: 62 24 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // b$...t.2........
    97D0: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    97E0: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 5E  // ...J......p....^
    97F0: 24 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // $.....t..B..v...
    9800: C6 46 1B 00 C3 2E 8E 1E 5E 24 8A DF 32 FF D1 E3  // .F......^$..2...
    9810: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    9820: F5 C3 2E 8E 1E 5E 24 8A DF 32 FF D1 E3 8B 97 50  // .....^$..2.....P
    9830: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    9840: 1E 5E 24 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // .^$...$...I..&J.
    9850: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    9860: 07 7F 21 51 8A CC 8A 2E 84 04 BE 2F 98 81 FE 38  // ..!Q......./...8
    9870: 98 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    9880: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    9890: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    98A0: 2E 8E 1E 5E 24 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ...^$<...PR.....
    98B0: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    98C0: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    98D0: A6 6B 98 A3 98 C3 98 D5 98 0A 99 54 98 54 98 54  // .k.........T.T.T
    98E0: 98 2F 99 47 99 4B 99 54 98 54 98 54 98 54 98 54  // ./.G.K.T.T.T.T.T
    98F0: 98 54 98 79 99 54 98 7D 99 98 99 54 98 D7 99 54  // .T.y.T.}...T...T
    9900: 98 E5 99 00 9A 07 9A 13 9A 37 9A 80 3E 49 04 13  // .........7..>I..
    9910: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    9920: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    9930: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    9940: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    9950: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    9960: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    9970: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9980: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    9990: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    99A0: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    99B0: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    99C0: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    99D0: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    99E0: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    99F0: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9A00: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9A10: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9A20: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9A30: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9A40: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9A50: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9A60: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9A70: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9A80: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9A90: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    9AA0: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    9AB0: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    9AC0: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    9AD0: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    9AE0: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    9AF0: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9B00: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9B10: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9B20: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9B30: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9B40: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 5E 24 8B F8  // ..u...YX....^$..
    9B50: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9B60: A5 FB 9A 03 9B 18 9B B6 9B 12 9C 3C 03 74 08 3C  // ...........<.t.<
    9B70: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9B80: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9B90: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    9BA0: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    9BB0: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    9BC0: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    9BD0: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    9BE0: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    9BF0: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9C00: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9C10: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9C20: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9C30: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9C40: FE CA 0A DB 74 07 32 FF 2E 8A 97 F6 9B 89 0E 85  // ....t.2.........
    9C50: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    9C60: 18 2A E8 09 03 B9 0E 00 EB D6 BD 06 6B B9 08 00  // .*..........k...
    9C70: EB CA BD 19 73 B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ....s.......u...
    9C80: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    9C90: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    9CA0: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E F8 83 EB 10  // ...u............
    9CB0: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF 69 9C  // ....2.........i.
    9CC0: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    9CD0: C3 19 73 06 6B 06 6F 06 73 19 73 19 83 53 06 8A  // ..s.k.o.s.s..S..
    9CE0: 26 49 04 E8 CD C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    9CF0: 01 74 22 BD 19 73 3C 10 7D 0E E8 71 02 8C 06 0E  // .t"..s<.}..q....
    9D00: 01 3C 0E 7D 07 BD 06 6B 8C 0E 0E 01 89 2E 0C 01  // .<.}...k........
    9D10: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    9D20: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    9D30: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    9D40: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    9D50: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    9D60: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    9D70: 00 01 3C 04 75 07 B7 10 BD 19 73 EB 10 FE C8 75  // ..<.u.....s....u
    9D80: 07 B7 0E E8 E8 01 EB 05 B7 08 BD 06 6B E8 2D 00  // ............k.-.
    9D90: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    9DA0: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    9DB0: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    9DC0: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    9DD0: CD 80 1E 06 1F 2E 8E 06 60 24 8B FA C1 E7 05 B0  // ........`$......
    9DE0: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    9DF0: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    9E00: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    9E10: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    9E20: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    9E30: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    9E40: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    9E50: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    9E60: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    9E70: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    9E80: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    9E90: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    9EA0: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    9EB0: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    9EC0: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    9ED0: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    9EE0: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    9EF0: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    9F00: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    9F10: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    9F20: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    9F30: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    9F40: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    9F50: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    9F60: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    9F70: 51 52 2E A1 68 24 0B C0 74 09 2E 8B 2E F8 83 0E  // QR..h$..t.......
    9F80: 07 EB 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3  // ....0......ZY[X.
    9F90: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 5E 24 86 FB 32  // <.|....S...^$..2
    9FA0: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    9FB0: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    9FC0: EB 40 3C 0A 74 32 3C 07 75 05 E8 3F 87 EB 62 3C  // .@<.t2<.u..?..b<
    9FD0: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    9FE0: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE FE C2  // .&.^.E......j...
    9FF0: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    A000: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    A010: 46 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // F....>I..t.2..>b
    A020: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    A030: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    A040: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    A050: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F9 BD C3  // 6....J..........
    A060: 2E 8E 1E 5E 24 0A C0 75 0D E8 18 00 8B EC 89 5E  // ...^$..u.......^
    A070: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    A080: 46 1A 1A C3 A0 8A 04 BF F6 A0 2E 3A 05 72 04 BB  // F..........:.r..
    A090: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    A0A0: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    A0B0: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF F6  // t....u.....t....
    A0C0: A0 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    A0D0: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    A0E0: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    A0F0: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    A100: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    A110: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    A120: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    A130: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    A140: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    A150: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    A160: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    A170: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    A180: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    A190: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    A1A0: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    A1B0: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    A1C0: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    A1D0: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    A1E0: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    A1F0: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    A200: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    A210: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    A220: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    A230: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    A240: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 04 4A  // .f......f...X..J
    A250: F7 49 F7 49 F7 49 E2 49 E2 49 E2 49 E2 49 24 46  // .I.I.I.I.I.I.I$F
    A260: 9B 46 C5 46 06 48 05 48 05 48 4B 48 B0 48 E0 48  // .F.F.H.H.HKH.H.H
    A270: 9D 49 C6 49 C6 49 3D 48 30 48 30 48 30 48 30 48  // .I.I.I=H0H0H0H0H
    A280: 30 48 4B 48 B0 48 E0 48 9D 49 CB 49 11 4A C6 49  // 0HKH.H.H.I.I.J.I
    A290: C6 49 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // .I..............
    A2A0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A2B0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 28 44  // ..............(D
    A2C0: 01 28 44 02 36 58 03 16 58 03 4D 45 03 01 45 03  // .(D.6X..X.ME..E.
    A2D0: 29 44 04 42 44 04 52 44 04 28 44 03 00 00 00 00  // )D.BD.RD.(D.....
    A2E0: D5 4B 00 02 D5 4B 01 02 D5 4B 02 02 D5 4B 03 02  // .K...K...K...K..
    A2F0: D5 4B 04 02 D5 4B 05 02 CF 4D 00 02 CF 4D 01 02  // .K...K...M...M..
    A300: CF 4D 02 02 CF 4D 03 02 CF 4D 04 02 CF 4D 05 02  // .M...M...M...M..
    A310: 04 4E 00 02 04 4E 01 02 04 4E 02 02 04 4E 03 02  // .N...N...N...N..
    A320: 04 4E 04 02 04 4E 05 02 3F 50 00 02 3F 50 01 02  // .N...N..?P..?P..
    A330: 3F 50 02 02 3F 50 03 02 3F 50 04 02 3F 50 05 02  // ?P..?P..?P..?P..
    A340: 3F 50 00 02 3F 50 01 02 3F 50 02 02 3F 50 03 02  // ?P..?P..?P..?P..
    A350: 3F 50 04 02 3F 50 05 02 06 4F 00 02 06 4F 01 02  // ?P..?P...O...O..
    A360: 06 4F 02 02 06 4F 03 02 06 4F 04 02 06 4F 05 02  // .O...O...O...O..
    A370: 42 4F 00 02 42 4F 01 02 42 4F 02 02 42 4F 03 02  // BO..BO..BO..BO..
    A380: 42 4F 04 02 42 4F 05 02 B3 4E 00 02 B3 4E 01 02  // BO..BO...N...N..
    A390: B3 4E 02 02 B3 4E 03 02 B3 4E 04 02 B3 4E 05 02  // .N...N...N...N..
    A3A0: E7 4E 00 02 E7 4E 01 02 E7 4E 02 02 E7 4E 03 02  // .N...N...N...N..
    A3B0: E7 4E 04 02 E7 4E 05 02 97 52 00 00 CA 52 01 00  // .N...N...R...R..
    A3C0: CA 52 02 00 B7 52 00 00 A5 51 00 02 9E 4F 00 02  // .R...R...Q...O..
    A3D0: 9E 4F 01 02 9E 4F 02 02 9E 4F 03 02 9E 4F 04 02  // .O...O...O...O..
    A3E0: 9E 4F 05 02 BD 51 00 02 12 54 05 00 12 54 01 00  // .O...Q...T...T..
    A3F0: 12 54 00 00 12 54 02 00 53 54 00 00 53 54 02 00  // .T...T..ST..ST..
    A400: 98 54 00 00 28 51 00 02 28 51 01 02 28 51 02 02  // .T..(Q..(Q..(Q..
    A410: 28 51 03 02 28 51 04 02 28 51 05 02 E4 52 00 00  // (Q..(Q..(Q...R..
    A420: 0C 53 00 00 8D 53 00 00 08 54 00 00 EC 4F 00 02  // .S...S...T...O..
    A430: EC 4F 01 02 EC 4F 02 02 EC 4F 03 02 EC 4F 04 02  // .O...O...O...O..
    A440: EC 4F 05 02 07 54 00 01 07 54 00 01 0B 4D 00 02  // .O...T...T...M..
    A450: 0B 4D 01 02 0B 4D 02 02 0B 4D 03 02 0B 4D 04 02  // .M...M...M...M..
    A460: 0B 4D 05 02 2C 53 00 00 08 54 00 00 08 54 00 00  // .M..,S...T...T..
    A470: 08 54 00 00 3D 52 00 00 2F 4E 00 02 2F 4E 01 02  // .T..=R../N../N..
    A480: 2F 4E 02 02 2F 4E 03 02 2F 4E 04 02 2F 4E 05 02  // /N../N../N../N..
    A490: 5E 4E 00 02 5E 4E 01 02 5E 4E 02 02 5E 4E 03 02  // ^N..^N..^N..^N..
    A4A0: 5E 4E 04 02 5E 4E 05 02 94 4E 00 02 94 4E 01 02  // ^N..^N...N...N..
    A4B0: 94 4E 02 02 94 4E 03 02 94 4E 04 02 94 4E 05 02  // .N...N...N...N..
    A4C0: 4F 53 00 00 72 53 00 00 30 4F 01 02 30 4F 02 02  // OS..rS..0O..0O..
    A4D0: 8C 4F 01 02 8C 4F 02 02 A6 00 02 01 16 A5 00 00  // .O...O..........
    A4E0: 00 00 00 00 00 00 00 00 4A A5 00 00 00 00 00 00  // ........J.......
    A4F0: 00 00 00 00 00 00 44 AA 00 00 00 00 00 00 00 00  // ......D.........
    A500: 00 00 BE A5 00 00 00 00 96 A5 00 00 00 00 00 00  // ................
    A510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B2 AA  // ................
    A530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A540: 00 00 00 00 00 00 70 AC 00 00 00 00 00 00 00 00  // ......p.........
    A550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A560: 12 A6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 33 00  // ..............3.
    A580: 02 01 00 08 37 00 00 52 0D 03 00 41 E3 0D 33 05  // ....7..R...A..3.
    A590: 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 25  // A......A.....A.%
    A5A0: 20 0E 03 0D 25 05 0C 02 0D 05 53 00 00 02 00 00  //  ...%.....S.....
    A5B0: 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // [.K.....7..B!.c.
    A5C0: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A5D0: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A5E0: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A5F0: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 28 00  // [.....[.....[.(.
    A600: 02 01 00 00 37 00 00 01 05 00 00 EC A8 01 00 02  // ....7...........
    A610: 00 00 01 00 02 01 01 00 01 05 00 00 ED A8 01 00  // ................
    A620: 02 00 02 01 00 5B 54 00 01 02 00 00 37 00 00 01  // .....[T.....7...
    A630: 05 00 00 9B 62 01 00 54 00 01 00 01 05 00 00 93  // ....b..T........
    A640: 62 01 00 01 01 01 00 01 56 00 41 03 09 41 00 01  // b.......V.A..A..
    A650: 05 00 00 83 62 01 00 01 02 01 00 41 01 05 00 00  // ....b......A....
    A660: 9B 62 01 00 3C 25 01 00 00 44 36 00 01 05 00 00  // .b..<%...D6.....
    A670: 93 62 01 00 02 00 01 01 00 5B 31 04 01 01 04 00  // .b.......[1.....
    A680: 37 00 00 3D 25 00 00 44 F5 00 4A 05 A3 36 02 00  // 7..=%..D..J..6..
    A690: 00 00 44 30 04 03 05 00 32 00 00 00 03 00 40 97  // ..D0....2.....@.
    A6A0: 36 03 05 46 00 31 00 00 04 02 04 40 03 03 41 05  // 6..F.1.....@..A.
    A6B0: 3E 02 41 40 48 4C 00 33 02 40 41 03 03 41 06 33  // >.A@HL.3.@A..A.3
    A6C0: 02 41 40 43 50 00 33 02 41 40 3E 05 41 00 00 00  // .A@CP.3.A@>.A...
    A6D0: 00 44 70 00 33 05 00 01 00 00 00 3E 05 00 00 00  // .Dp.3......>....
    A6E0: 00 00 44 30 04 51 14 43 22 00 03 03 40 05 03 02  // ..D0.Q.C"...@...
    A6F0: 41 40 2D 05 40 00 00 00 00 03 02 46 40 04 01 00  // A@-.@......F@...
    A700: 00 04 01 01 01 04 01 02 02 04 01 03 03 04 01 04  // ................
    A710: 04 04 01 05 05 04 01 06 06 2D 05 41 40 00 00 00  // .........-.A@...
    A720: 3E 05 41 00 20 00 00 45 B7 00 27 05 41 00 20 00  // >.A. ..E..'.A. .
    A730: 00 03 05 46 00 31 00 00 04 02 05 41 01 02 96 36  // ...F.1.....A...6
    A740: 41 03 05 00 80 1A 06 00 03 00 41 97 36 03 00 40  // A.........A.6..@
    A750: 96 36 3E 02 41 40 44 30 04 33 05 00 01 00 00 00  // .6>.A@D0.3......
    A760: 3E 05 00 00 00 00 00 44 30 04 51 14 43 CE 00 3D  // >......D0.Q.C..=
    A770: 65 00 01 44 32 01 4A 05 B6 36 00 00 01 00 49 32  // e..D2.J..6....I2
    A780: 01 4A 05 C0 36 01 00 00 00 44 32 01 01 05 0C 00  // .J..6....D2.....
    A790: 84 09 81 03 01 05 0D 00 00 00 06 00 01 05 0C 00  // ................
    A7A0: 84 09 81 03 3C E5 0D 00 80 49 2A 01 4A 05 C0 36  // ....<....I*.J..6
    A7B0: 01 00 00 00 49 D1 01 01 05 B8 36 00 00 02 10 03  // ....I.....6.....
    A7C0: 05 41 0A 00 00 00 33 05 41 01 00 00 00 3E 05 41  // .A....3.A....>.A
    A7D0: 00 00 00 00 44 8F 01 51 0A 3C 05 B8 36 00 00 02  // ....D..Q.<..6...
    A7E0: 00 49 4C 01 03 05 41 04 00 00 00 51 0A 33 05 41  // .IL...A....Q.3.A
    A7F0: 01 00 00 00 3E 05 41 00 00 00 00 44 8F 01 3C 05  // ....>.A....D..<.
    A800: AA 36 AD DE AD DE 49 71 01 01 05 B8 36 00 00 00  // .6....Iq....6...
    A810: 00 0D 05 C0 36 01 00 00 00 07 05 B6 36 FF FF FE  // ....6.......6...
    A820: FF 0D 05 02 38 00 01 00 00 51 0A 01 05 97 36 00  // ....8....Q....6.
    A830: 00 00 00 01 05 96 36 00 00 00 00 01 05 A3 36 00  // ......6.......6.
    A840: 00 00 00 07 05 02 38 FF FE FF FF 66 0B 03 04 00  // ......8....f....
    A850: 04 00 02 02 04 00 15 05 00 0A 1A 05 04 16 02 05  // ................
    A860: 00 00 00 00 00 02 02 01 00 2C 05 01 00 00 02 00  // .........,......
    A870: 55 00 02 02 89 02 04 02 05 03 00 00 05 D0 52 35  // U.............R5
    A880: 02 05 00 00 00 00 00 02 02 01 00 2C 05 01 00 00  // ...........,....
    A890: 00 00 55 00 02 02 89 02 04 02 05 03 00 20 00 D0  // ..U.......... ..
    A8A0: 52 35 66 16 3E 0D 42 00 00 44 9B 02 56 00 41 03  // R5f.>.B..D..V.A.
    A8B0: 0C 41 00 00 2D 05 41 0F 00 00 00 09 05 41 F0 FF  // .A..-.A......A..
    A8C0: 00 00 2D 0A 41 42 03 05 46 00 84 00 00 56 08 42  // ..-.AB..F....V.B
    A8D0: 04 04 00 00 00 2D 05 46 04 00 00 00 2D 05 42 04  // .....-.F....-.B.
    A8E0: 00 00 00 3E 02 42 41 45 56 02 02 05 00 00 84 00  // ...>.BAEV.......
    A8F0: 00 2C 02 00 00 02 02 01 00 2C 05 01 00 00 02 00  // .,.......,......
    A900: 02 89 02 04 02 09 02 04 02 05 03 00 00 00 40 02  // ..............@.
    A910: 0A 03 41 52 35 52 16 02 01 02 00 14 05 00 18 1A  // ..AR5R..........
    A920: 05 02 08 03 02 41 00 2D 05 41 00 00 02 00 2D 01  // .....A.-.A....-.
    A930: 41 00 01 02 7B 36 41 03 01 40 04 2D 01 40 02 01  // A...{6A..@.-.@..
    A940: 02 7C 36 40 01 05 68 36 00 00 00 03 01 05 70 36  // .|6@..h6......p6
    A950: FF FF 01 83 03 02 41 00 2D 05 41 00 00 04 00 2D  // ......A.-.A....-
    A960: 01 41 00 01 02 7D 36 41 03 01 40 04 2D 01 40 02  // .A...}6A..@.-.@.
    A970: 01 02 7E 36 40 01 05 69 36 00 00 00 04 01 05 71  // ..~6@..i6......q
    A980: 36 FF FF 00 84 03 02 41 00 2D 05 41 00 00 05 00  // 6......A.-.A....
    A990: 2D 01 41 00 01 02 7F 36 41 03 01 40 04 2D 01 40  // -.A....6A..@.-.@
    A9A0: 02 01 02 80 36 40 01 05 6A 36 00 00 00 05 01 05  // ....6@..j6......
    A9B0: 72 36 FF FF 00 85 03 02 41 00 2D 05 41 00 00 06  // r6......A.-.A...
    A9C0: 00 2D 01 41 00 01 02 81 36 41 03 01 40 04 2D 01  // .-.A....6A..@.-.
    A9D0: 40 02 01 02 82 36 40 01 05 6B 36 00 00 00 06 01  // @....6@..k6.....
    A9E0: 05 73 36 FF FF 00 86 03 05 46 00 31 00 00 03 02  // .s6......F.1....
    A9F0: 41 00 2D 05 41 00 00 00 00 2D 01 41 00 03 01 40  // A.-.A....-.A...@
    AA00: 04 2D 01 40 02 04 02 00 41 04 02 01 40 04 05 04  // .-.@....A...@...
    AA10: 00 00 00 00 04 05 05 00 00 00 00 04 05 06 00 20  // ............... 
    AA20: 00 00 01 05 94 36 00 00 00 80 01 05 95 36 00 20  // .....6.......6. 
    AA30: 00 00 01 02 56 36 41 01 02 57 36 40 01 05 61 36  // ....V6A..W6@..a6
    AA40: FF FF 00 80 01 05 97 36 00 00 00 00 01 05 96 36  // .......6.......6
    AA50: 00 00 00 00 03 00 41 96 36 01 05 B1 36 00 00 00  // ......A.6...6...
    AA60: 00 4A 25 48 00 01 44 F7 03 0D 05 B1 36 08 00 00  // .J%H..D.....6...
    AA70: 00 5C 05 B6 36 00 FF FF FF C6 00 09 00 07 05 C0  // .\..6...........
    AA80: 36 FE FF FF FF 03 05 41 50 C3 00 00 4A 05 A3 36  // 6......AP...J..6
    AA90: 02 00 00 00 49 30 04 51 14 33 05 41 01 00 00 00  // ....I0.Q.3.A....
    AAA0: 3E 05 41 00 00 00 00 49 12 04 5B 00 6D 00 02 01  // >.A....I..[.m...
    AAB0: 00 04 37 00 00 66 16 03 0C 41 04 00 4C 0D 41 02  // ..7..f...A..L.A.
    AAC0: 00 44 1D 00 0D A5 4C 00 02 52 16 01 01 35 39 02  // .D....L..R...59.
    AAD0: 01 01 36 39 03 01 05 00 00 D7 A8 01 00 01 00 37  // ..69...........7
    AAE0: 39 01 00 03 01 41 01 15 05 41 18 01 02 C4 00 41  // 9....A...A.....A
    AAF0: 03 01 41 01 1B 05 41 08 01 02 C9 00 41 03 00 41  // ..A...A.....A..A
    AB00: 37 39 01 02 3B 39 41 03 01 40 03 33 01 40 02 2D  // 79..;9A..@.3.@.-
    AB10: 02 40 41 01 02 3C 39 40 5B 00 BD 01 03 01 04 00  // .@A..<9@[.......
    AB20: 37 00 00 66 08 03 05 46 C0 12 00 00 3D A5 00 02  // 7..f...F....=...
    AB30: 49 1E 00 02 02 00 46 5B 03 05 40 0C 00 00 00 21  // I.....F[..@....!
    AB40: 21 40 00 66 FF 2D 0D 42 81 01 2D 0A 42 40 03 04  // !@.f.-.B..-.B@..
    AB50: 40 00 00 03 04 41 04 00 03 04 00 08 00 01 02 00  // @....A..........
    AB60: 00 40 03 88 40 01 00 03 18 40 01 00 09 8D 40 FF  // .@..@....@....@.
    AB70: 01 3E 8D 40 00 00 49 99 00 01 02 00 00 41 03 00  // .>.@..I......A..
    AB80: 40 01 00 09 05 40 FF 01 00 00 3E 0D 40 00 00 49  // @....@....>.@..I
    AB90: 82 00 03 05 46 00 71 02 00 43 BC 00 21 02 40 46  // ....F.q..C..!.@F
    ABA0: 03 00 41 01 00 09 05 41 00 1E 00 00 1B 05 41 09  // ..A....A......A.
    ABB0: 43 B4 00 7C 02 40 46 7E 05 40 00 00 01 00 03 00  // C..|.@F~.@......
    ABC0: 41 01 00 09 05 41 00 F0 00 00 1B 05 41 0C 75 02  // A....A......A.u.
    ABD0: 40 41 03 02 46 40 3D A5 00 01 49 C8 00 02 02 00  // @A..F@=...I.....
    ABE0: 46 5B 3D E5 00 00 49 0B 01 56 00 40 03 29 40 00  // F[=...I..V.@.)@.
    ABF0: 21 0D 40 09 00 03 02 41 00 2D 02 40 41 01 02 00  // !.@....A.-.@A...
    AC00: 00 40 03 00 41 01 00 09 05 41 00 00 F0 07 1B 05  // .@..A....A......
    AC10: 41 14 02 E2 00 41 3D E5 00 00 49 0B 01 02 05 00  // A....A=...I.....
    AC20: 00 46 C3 23 5B 56 00 40 03 39 40 00 55 38 00 66  // .F.#[V.@.9@.U8.f
    AC30: FF 2D 0D 42 59 01 3E 0C 40 02 00 47 2C 01 2D 0D  // .-.BY.>.@..G,.-.
    AC40: 42 08 00 43 1C 01 33 0C 40 04 00 21 0C 40 06 00  // B..C..3.@..!.@..
    AC50: 2D 0C 40 00 00 03 09 42 00 55 00 00 02 0A 00 40  // -.@....B.U.....@
    AC60: 7C 05 46 40 42 0F 00 7E 01 40 00 02 02 00 40 5B  // |.F@B..~.@....@[
    AC70: 7A 64 00 FF FF 07 00 00 00 00 00 C8 00 3F 00 08  // zd...........?..
    AC80: 00 19 00 40 06 5F 00 40 00 32 00 80 0C 7E 00 60  // ...@._.@.2...~.`
    AC90: 00 64 00 00 32 7F 00 7F 00 64 00 37 6C 01 00 00  // .d..2....d.7l...
    ACA0: 6C 01 00 66 6C 01 00 37 6E 01 00 00 6E 01 00 66  // l..fl..7n...n..f
    ACB0: 6E 01 00 00 00 00 00 00 00 00 00 00 00 00 00 37  // n..............7
    ACC0: 70 01 00 00 70 01 00 66 70 01 00 37 72 01 00 00  // p...p..fp..7r...
    ACD0: 72 01 00 66 72 01 00 00 D5 00 03 03 0C 00 37 00  // r..fr.........7.
    ACE0: 00 66 04 03 04 46 28 00 3E 05 46 00 00 00 00 49  // .f...F(.>.F....I
    ACF0: 3C 00 03 01 00 00 03 01 01 01 03 01 02 02 52 16  // <.............R.
    AD00: 03 01 46 00 1B 05 46 08 02 02 00 00 02 02 01 01  // ..F...F.........
    AD10: 02 02 02 02 3D 65 02 00 49 47 00 2C 22 02 46 3D  // ....=e..IG.,".F=
    AD20: E5 02 00 49 52 00 2C A2 02 46 03 01 40 03 09 05  // ...IR.,..F..@...
    AD30: 40 00 00 00 FC 3E 05 40 00 00 00 D0 49 75 00 01  // @....>.@....Iu..
    AD40: 05 63 C0 00 00 00 40 55 20 02 43 79 00 54 00 63  // .c....@U .Cy.T.c
    AD50: C0 01 01 64 C0 00 56 00 40 03 21 40 02 01 02 65  // ...d..V.@.!@...e
    AD60: C0 40 01 01 66 C0 01 03 31 40 02 01 02 67 C0 40  // .@..f...1@...g.@
    AD70: 01 01 E8 C0 03 3D 65 02 01 44 CC 00 3D E5 02 01  // .....=e..D..=...
    AD80: 44 CC 00 51 02 56 00 40 4A E5 A0 21 80 44 D4 00  // D..Q.V.@J..!.D..
    AD90: 51 14 2D 05 40 01 00 00 00 3E 05 40 A0 86 01 00  // Q.-.@....>.@....
    ADA0: 45 B0 00 5B 4A E5 A0 21 80 49 CC 00 5B FF FF FF  // E..[J..!.I..[...
    ADB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    AE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE80: 00 00 00 00                                      // ....


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 15
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]            Protection Flags : 00000000
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 0

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 15 5F 41 53 55 53 5F  // WSMT(....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 00 00 00                          // ........


