
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  APIC  0x0000005A  0x01  "PTLTD "  "  APIC  "  0x06040000  " LTP"   0x00000000
 02)  MCFG  0x0000003C  0x01  "INTEL "  "CALISTGA"  0x06040000  "LOHR"   0x0000005A
 03)  SLIC  0x00000176  0x01  "ACRSYS"  "ACRPRDCT"  0x06040000  "acer"   0x00000000
 04)  SSDT  0x000004E6  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20050624
 05)  BOOT  0x00000028  0x01  "PTLTD "  "$SBFTBL$"  0x06040000  " LTP"   0x00000001
 06)  DSDT  0x00008C3E  0x02  "INTEL "  "CALISTGA"  0x06040000  "MSFT"   0x03000000
 07)  APIC  0x00000068  0x01  "INTEL "  "CALISTGA"  0x06040000  "LOHR"   0x0000005A
 08)  FACP  0x000000F4  0x03  "INTEL "  "CALISTGA"  0x06040000  "ALAN"   0x00000001
 09)  SSDT  0x000004B6  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20050624
 10)  HPET  0x00000038  0x01  "INTEL "  "CALISTGA"  0x06040000  "LOHR"   0x0000005A
 11)  FACS  0x00000040  0x01

Found 11 ACPI tables in acpidump

APIC1
-----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000005A
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3E
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  APIC  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 01 [I/O APIC]
[035h 0053   1]                       Length : 0C
[036h 0054   1]                  I/O Apic ID : 01
[037h 0055   1]                     Reserved : 00
[038h 0056   4]                      Address : FEC00000
[03Ch 0060   4]                    Interrupt : 00000000

[040h 0064   1]                Subtable Type : 04 [Local APIC NMI]
[041h 0065   1]                       Length : 06
[042h 0066   1]                 Processor ID : 00
[043h 0067   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[045h 0069   1]         Interrupt Input LINT : 01

[046h 0070   1]                Subtable Type : 02 [Interrupt Source Override]
[047h 0071   1]                       Length : 0A
[048h 0072   1]                          Bus : 00
[049h 0073   1]                       Source : 00
[04Ah 0074   4]                    Interrupt : 00000002
[04Eh 0078   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[050h 0080   1]                Subtable Type : 02 [Interrupt Source Override]
[051h 0081   1]                       Length : 0A
[052h 0082   1]                          Bus : 00
[053h 0083   1]                       Source : 09
[054h 0084   4]                    Interrupt : 00000009
[058h 0088   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 90 (0x5A)

    0000: 41 50 49 43 5A 00 00 00 01 3E 50 54 4C 54 44 20  // APICZ....>PTLTD 
    0010: 09 20 41 50 49 43 20 20 00 00 04 06 20 4C 54 50  // . APIC  .... LTP
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 01 0C 01 00 00 00 C0 FE 00 00 00 00  // ................
    0040: 04 06 00 05 00 01 02 0A 00 00 02 00 00 00 05 00  // ................
    0050: 02 0A 00 09 09 00 00 00 0D 00                    // ..........


APIC2
-----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E5
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 01
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[05Ch 0092   1]                Subtable Type : 04 [Local APIC NMI]
[05Dh 0093   1]                       Length : 06
[05Eh 0094   1]                 Processor ID : 00
[05Fh 0095   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097   1]         Interrupt Input LINT : 01

[062h 0098   1]                Subtable Type : 04 [Local APIC NMI]
[063h 0099   1]                       Length : 06
[064h 0100   1]                 Processor ID : 01
[065h 0101   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[067h 0103   1]         Interrupt Input LINT : 01

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 01 E5 49 4E 54 45 4C 20  // APICh.....INTEL 
    0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
    0020: 5A 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // Z...............
    0030: 01 00 00 00 00 08 01 01 00 00 00 00 01 0C 01 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0050: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 05  // ................
    0060: 00 01 04 06 01 05 00 01                          // ........


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A5
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "$SBFTBL$"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]          Boot Register Index : 36
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 A5 50 54 4C 54 44 20  // BOOT(.....PTLTD 
    0010: 24 53 42 46 54 42 4C 24 00 00 04 06 20 4C 54 50  // $SBFTBL$.... LTP
    0020: 01 00 00 00 36 00 00 00                          // ....6...


DSDT
----
DefinitionBlock ("", "DSDT", 2, "INTEL ", "CALISTGA", 0x06040000)
{
    External (_PR_.CPU0._PPC, UnknownObj)
    External (CFGD, IntObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)

    OperationRegion (PRT0, SystemIO, 0x80, 0x01)
    Field (PRT0, ByteAcc, Lock, Preserve)
    {
        P80H,   8
    }

    OperationRegion (PRT1, SystemIO, 0x0378, 0x04)
    Field (PRT1, DWordAcc, Lock, Preserve)
    {
        P378,   8
    }

    OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
    Field (IO_T, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        TRP0,   8
    }

    OperationRegion (PMIO, SystemIO, 0x1000, 0x80)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        Offset (0x28), 
            ,   1, 
        HOTS,   1, 
        Offset (0x2A), 
            ,   6, 
        VGAP,   1, 
        Offset (0x2B), 
            ,   6, 
        LIDS,   1, 
        Z000,   1
    }

    OperationRegion (GPIO, SystemIO, 0x1180, 0x3C)
    Field (GPIO, ByteAcc, NoLock, Preserve)
    {
        GU00,   8, 
        GU01,   8, 
        GU02,   8, 
        GU03,   8, 
        GIO0,   8, 
        GIO1,   8, 
        GIO2,   8, 
        GIO3,   8, 
        Offset (0x0C), 
        GL00,   6, 
        CRTS,   1, 
        Offset (0x0D), 
            ,   4, 
        GP12,   1, 
        Offset (0x0E), 
        GL02,   8, 
        GL03,   8, 
        Offset (0x18), 
        GB00,   8, 
        GB01,   8, 
        GB02,   8, 
        GB03,   8, 
        Offset (0x2C), 
        GIV0,   6, 
        CRTI,   1, 
        Offset (0x2D), 
            ,   6, 
        LIDP,   1, 
        Z001,   1, 
        GIV2,   8, 
        GIV3,   8, 
        GU04,   8, 
        GU05,   8, 
        GU06,   8, 
        GU07,   8, 
        GIO4,   8, 
        GIO5,   8, 
        GIO6,   8, 
        GIO7,   8, 
            ,   2, 
        BAYR,   1, 
        BID1,   1, 
            ,   1, 
        BAYO,   1, 
        BID0,   1, 
        Offset (0x39), 
        GL05,   8, 
        GL06,   8, 
        GL07,   8
    }

    OperationRegion (GNVS, SystemMemory, 0x1F69CD2C, 0x0100)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        Offset (0x09), 
        Offset (0x0A), 
        Offset (0x0B), 
        P80D,   32, 
        Offset (0x10), 
        Offset (0x11), 
        Offset (0x12), 
        Offset (0x14), 
        Offset (0x1A), 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        Offset (0x1E), 
        Offset (0x28), 
        APIC,   8, 
        MPEN,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        Offset (0x32), 
        Offset (0x3C), 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        Offset (0x67), 
        Offset (0x69), 
        Offset (0x6E), 
        Offset (0x74), 
        MEFE,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        Offset (0x82), 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8
    }

    OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
    Field (RCRB, DWordAcc, Lock, Preserve)
    {
        Offset (0x1000), 
        Offset (0x3000), 
        Offset (0x3404), 
        HPAS,   2, 
            ,   5, 
        HPAE,   1, 
        Offset (0x3418), 
            ,   1, 
        PATD,   1, 
        SATD,   1, 
        SMBD,   1, 
        HDAD,   1, 
        A97D,   1, 
        Offset (0x341A), 
        RP1D,   1, 
        RP2D,   1, 
        RP3D,   1, 
        RP4D,   1, 
        RP5D,   1, 
        RP6D,   1
    }

    Mutex (MUTX, 0x00)
    Name (_S0, Package (0x03)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x03)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        0x00
    })
    Name (_S4, Package (0x03)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        0x00
    })
    Name (_S5, Package (0x03)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        0x00
    })
    Scope (\_PR)
    {
        Processor (CPU0, 0x00, 0x00001010, 0x06) {}
        Processor (CPU1, 0x01, 0x00001010, 0x06) {}
    }

    Name (\DSEN, 0x01)
    Name (\ECON, 0x00)
    Name (\GPIC, 0x00)
    Name (\CTYP, 0x00)
    Name (\L01C, 0x00)
    Name (\VFN0, 0x00)
    Name (\VFN1, 0x00)
    Name (\INSX, 0x00)
    Name (\PPMF, 0x80000000)
    Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80H = 0xBB
        \_SB.PHSR (0x08, 0x00)
        If ((Arg0 == 0x04))
        {
            INS4 = 0x01
        }

        If (\_SB.ECOK)
        {
            Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
            If ((\_SB.PCI0.RP01.LANE.LANP == 0x00))
            {
                \_SB.PCI0.LPCB.EC0.VAUX = 0x00
            }
            Else
            {
                \_SB.PCI0.LPCB.EC0.VAUX = 0x01
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PCI0.LPCB.EC0.FLS4 = 0x01
            }

            Release (\_SB.PCI0.LPCB.EC0.MUT1)
        }

        P80H = 0x66
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        P80H = 0xAA
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((CFGD & 0x01000000))
            {
                If (((CFGD & 0xF0) && (OSYS == 0x07D1)))
                {
                    TRAP (0x3D)
                }
            }
        }

        If ((Arg0 == 0x03)) {}
        If ((OSYS == 0x07D2))
        {
            If ((CFGD & 0x01))
            {
                If ((\_PR.CPU0._PPC > 0x00))
                {
                    \_PR.CPU0._PPC -= 0x01
                    PNOT ()
                    \_PR.CPU0._PPC += 0x01
                    PNOT ()
                }
                Else
                {
                    \_PR.CPU0._PPC += 0x01
                    PNOT ()
                    \_PR.CPU0._PPC -= 0x01
                    PNOT ()
                }
            }
        }

        If ((Arg0 == 0x04))
        {
            INS4 = 0x00
            \_SB.PHSR (0x0C, 0x00)
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x03)))
        {
            \_SB.PCI0.LPCB.EC0.BLTH = \_SB.BTEN
            \_SB.PCI0.LPCB.EC0.WLAN = \_SB.WLAN
            \_SB.PCI0.LPCB.EC0.CPLE = 0x01
        }

        If (Z001)
        {
            RP4D = 0x01
            If ((\_SB.PCI0.DOCK.DCKS == 0x01))
            {
                Z001 ^= 0x01
                Z001 = 0x00
            }
        }
        Else
        {
            RP4D = 0x00
            If ((\_SB.PCI0.DOCK.DCKS == 0x00))
            {
                Z001 ^= 0x01
                Z001 = 0x01
            }
        }

        P80H = 0xBB
        Return (0x00)
    }

    Scope (\_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += 0x01
            P8XH (0x00, 0x01)
            P8XH (0x01, L01C)
            Sleep (0x64)
            If (((RP1D == 0x00) && \_SB.PCI0.RP01.HPCS))
            {
                If (\_SB.PCI0.RP01.PDC1)
                {
                    \_SB.PCI0.RP01.PDC1 = 0x01
                    \_SB.PCI0.RP01.HPCS = 0x01
                    Notify (\_SB.PCI0.RP01, 0x00) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPCS = 0x01
                }
            }

            If (((RP2D == 0x00) && \_SB.PCI0.RP02.HPCS))
            {
                If (\_SB.PCI0.RP02.PDC2)
                {
                    \_SB.PCI0.RP02.PDC2 = 0x01
                    \_SB.PCI0.RP02.HPCS = 0x01
                    Notify (\_SB.PCI0.RP02, 0x00) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPCS = 0x01
                }
            }

            If (((RP3D == 0x00) && \_SB.PCI0.RP03.HPCS))
            {
                If (\_SB.PCI0.RP03.PDC3)
                {
                    \_SB.PCI0.RP03.PDC3 = 0x01
                    \_SB.PCI0.RP03.HPCS = 0x01
                    Notify (\_SB.PCI0.RP03, 0x00) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPCS = 0x01
                }
            }

            If (((RP4D == 0x00) && \_SB.PCI0.RP04.HPCS))
            {
                If (\_SB.PCI0.RP04.PDC4)
                {
                    \_SB.PCI0.RP04.PDC4 = 0x01
                    \_SB.PCI0.RP04.HPCS = 0x01
                }
                Else
                {
                    \_SB.PCI0.RP04.HPCS = 0x01
                }
            }

            If (((RP5D == 0x00) && \_SB.PCI0.RP05.HPCS))
            {
                If (\_SB.PCI0.RP05.PDC5)
                {
                    \_SB.PCI0.RP05.PDC5 = 0x01
                    \_SB.PCI0.RP05.HPCS = 0x01
                    Notify (\_SB.PCI0.RP05, 0x00) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP05.HPCS = 0x01
                }
            }

            If (((RP6D == 0x00) && \_SB.PCI0.RP06.HPCS))
            {
                If (\_SB.PCI0.RP06.PDC6)
                {
                    \_SB.PCI0.RP06.PDC6 = 0x01
                    \_SB.PCI0.RP06.HPCS = 0x01
                }
                Else
                {
                    \_SB.PCI0.RP06.HPCS = 0x01
                }
            }
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (HDAD) {}
            Else
            {
                Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.RP01.PSP1)
            {
                \_SB.PCI0.RP01.PSP1 = 0x01
                \_SB.PCI0.RP01.PMCS = 0x01
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP02.PSP2)
            {
                \_SB.PCI0.RP02.PSP2 = 0x01
                \_SB.PCI0.RP02.PMCS = 0x01
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP03.PSP3)
            {
                \_SB.PCI0.RP03.PSP3 = 0x01
                \_SB.PCI0.RP03.PMCS = 0x01
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP04.PSP4)
            {
                \_SB.PCI0.RP04.PSP4 = 0x01
                \_SB.PCI0.RP04.PMCS = 0x01
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP05.PSP5)
            {
                \_SB.PCI0.RP05.PSP5 = 0x01
                \_SB.PCI0.RP05.PMCS = 0x01
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP06.PSP6)
            {
                \_SB.PCI0.RP06.PSP6 = 0x01
                \_SB.PCI0.RP06.PMCS = 0x01
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
        }

        Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x012C)
            VGAP = 0x01
            Local1 = VGAP /* \VGAP */
            If (Local1)
            {
                If (CRTS)
                {
                    \_SB.WMID.WMIQ = 0x08
                }
                Else
                {
                    \_SB.WMID.WMIQ = 0x09
                }

                Notify (\_SB.WMID, 0x82) // Device-Specific Change
                CRTI = CRTS /* \CRTS */
            }
        }
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (HKDS, 1, Serialized)
    {
        If ((0x00 == DSEN))
        {
            If ((TRAP (Arg0) == 0x00))
            {
                If ((CADL != PADL))
                {
                    PADL = CADL /* \CADL */
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        Notify (\_SB.PCI0, 0x00) // Bus Check
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0, 0x00) // Bus Check
                    }

                    Sleep (0x02EE)
                }

                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
            }
        }

        If ((0x01 == DSEN))
        {
            If ((TRAP (Arg0++) == 0x00))
            {
                Notify (\_SB.PCI0.GFX0, 0x81) // Information Change
            }
        }
    }

    Method (LSDS, 1, Serialized)
    {
        If (Arg0)
        {
            HKDS (0x0C)
        }
        Else
        {
            HKDS (0x0E)
        }

        If ((DSEN != 0x01))
        {
            Sleep (0x32)
            While ((DSEN == 0x02))
            {
                Sleep (0x32)
            }
        }
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == 0x01))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 1, Serialized)
    {
        SMIF = Arg0
        TRP0 = 0x00
        Return (SMIF) /* \SMIF */
    }

    Method (VTOB, 1, NotSerialized)
    {
        Local0 = 0x01
        Local0 <<= Arg0
        Return (Local0)
    }

    Method (BTOV, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x01)
        Local1 = 0x00
        While (Local0)
        {
            Local1++
            Local0 >>= 0x01
        }

        Return (Local1)
    }

    Method (MKWD, 2, NotSerialized)
    {
        If ((Arg1 & 0x80))
        {
            Local0 = 0xFFFF0000
        }
        Else
        {
            Local0 = Zero
        }

        Local0 |= Arg0
        Local0 |= (Arg1 << 0x08)
        Return (Local0)
    }

    Method (POSW, 1, NotSerialized)
    {
        If ((Arg0 & 0x8000))
        {
            If ((Arg0 == 0xFFFF))
            {
                Return (0xFFFFFFFF)
            }
            Else
            {
                Local0 = ~Arg0
                Local0++
                Local0 &= 0xFFFF
                Return (Local0)
            }
        }
        Else
        {
            Return (Arg0)
        }
    }

    Method (GBFE, 3, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, TIDX)
        Arg2 = TIDX /* \GBFE.TIDX */
    }

    Method (PBFE, 3, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, TIDX)
        TIDX = Arg2
    }

    Method (ITOS, 1, NotSerialized)
    {
        Local0 = Buffer (0x09)
            {
                /* 0000 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00                                             // .
            }
        Local7 = Buffer (0x11)
            {
                "0123456789ABCDEF"
            }
        Local1 = 0x08
        Local2 = 0x00
        Local3 = 0x00
        While (Local1)
        {
            Local1--
            Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
            If (Local4)
            {
                Local3 = Ones
            }

            If (Local3)
            {
                GBFE (Local7, Local4, RefOf (Local5))
                PBFE (Local0, Local2, Local5)
                Local2++
            }
        }

        Return (Local0)
    }

    Method (GETP, 1, Serialized)
    {
        If (((Arg0 & 0x09) == 0x00))
        {
            Return (0xFFFFFFFF)
        }

        If (((Arg0 & 0x09) == 0x08))
        {
            Return (0x0384)
        }

        Local0 = ((Arg0 & 0x0300) >> 0x08)
        Local1 = ((Arg0 & 0x3000) >> 0x0C)
        Return ((0x1E * (0x09 - (Local0 + Local1))))
    }

    Method (GDMA, 5, Serialized)
    {
        If (Arg0)
        {
            If ((Arg1 && Arg4))
            {
                Return (0x14)
            }

            If ((Arg2 && Arg4))
            {
                Return (((0x04 - Arg3) * 0x0F))
            }

            Return (((0x04 - Arg3) * 0x1E))
        }

        Return (0xFFFFFFFF)
    }

    Method (GETT, 1, Serialized)
    {
        Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
            ) + (Arg0 & 0x03)))))
    }

    Method (GETF, 3, Serialized)
    {
        Name (TMPF, 0x00)
        If (Arg0)
        {
            TMPF |= 0x01
        }

        If ((Arg2 & 0x02))
        {
            TMPF |= 0x02
        }

        If (Arg1)
        {
            TMPF |= 0x04
        }

        If ((Arg2 & 0x20))
        {
            TMPF |= 0x08
        }

        If ((Arg2 & 0x4000))
        {
            TMPF |= 0x10
        }

        Return (TMPF) /* \GETF.TMPF */
    }

    Method (SETP, 3, Serialized)
    {
        If ((Arg0 > 0xF0))
        {
            Return (0x08)
        }
        Else
        {
            If ((Arg1 & 0x02))
            {
                If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                {
                    Return (0x2301)
                }

                If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                {
                    Return (0x2101)
                }
            }

            Return (0x1001)
        }
    }

    Method (SDMA, 1, Serialized)
    {
        If ((Arg0 <= 0x14))
        {
            Return (0x01)
        }

        If ((Arg0 <= 0x1E))
        {
            Return (0x02)
        }

        If ((Arg0 <= 0x2D))
        {
            Return (0x01)
        }

        If ((Arg0 <= 0x3C))
        {
            Return (0x02)
        }

        If ((Arg0 <= 0x5A))
        {
            Return (0x01)
        }

        Return (0x00)
    }

    Method (SETT, 3, Serialized)
    {
        If ((Arg1 & 0x02))
        {
            If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
            {
                Return (0x0B)
            }

            If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
            {
                Return (0x09)
            }
        }

        Return (0x04)
    }

    OperationRegion (NV1, SystemIO, 0x72, 0x02)
    Field (NV1, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x6E), 
        INS4,   1, 
        Offset (0x70), 
        DLST,   8
    }

    Scope (\_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }
                Else
                {
                    OSYS = 0x07D1
                    If (_OSI ("Windows 2001 SP2"))
                    {
                        OSYS = 0x07D2
                    }

                    If (_OSI ("Windows 2006"))
                    {
                        OSYS = 0x07D6
                    }

                    If ((MPEN && (OSYS == 0x07D1)))
                    {
                        TRAP (0x3D)
                    }
                }
            }

            If ((OSYS >= 0x07D0))
            {
                PRM0 = 0x01
                If ((OSYS >= 0x07D1))
                {
                    PRM0 = 0x03
                }
            }
            Else
            {
                PRM0 = 0x00
            }

            TRAP (0x32)
            If ((OSYS == 0x07D0))
            {
                \_SB.PHSR (0x0A, 0x00)
            }
        }

        Name (ECOK, 0x00)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            OperationRegion (HBUS, PCI_Config, 0x40, 0xC0)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                    ,   1, 
                PEGA,   1, 
                Offset (0x50), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x51), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x52), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x53), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x54), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x55), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x56), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x57), 
                    ,   7, 
                HENA,   1, 
                Offset (0x5C), 
                    ,   3, 
                TOUD,   5
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                If (TPMS)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, TPML)  // _LEN: Length
                    TPML = 0x5000
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TOUD << 0x1B)
                M1LN = ((M1MX - M1MN) + 0x01)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x03, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x00, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x01, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            0x00, 
                            0x10
                        }
                    })
                }
                Else
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x03, 
                            \_SB.PCI0.LPCB.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            \_SB.PCI0.LPCB.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            \_SB.PCI0.LPCB.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            \_SB.PCI0.LPCB.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKH, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            \_SB.PCI0.LPCB.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            \_SB.PCI0.LPCB.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            \_SB.PCI0.LPCB.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x01, 
                            \_SB.PCI0.LPCB.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            \_SB.PCI0.LPCB.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            \_SB.PCI0.LPCB.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            \_SB.PCI0.LPCB.LNKA, 
                            0x00
                        }
                    })
                }
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED14000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED1C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                })
                Name (BUF1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED14000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED1C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    If (!TPMS)
                    {
                        Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
                    }

                    Return (BUF1) /* \_SB_.PCI0.PDRC.BUF1 */
                }
            }

            Device (PEGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (PEGA)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PSC, 0x00)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        _PSC = 0x00
                        \_SB.PHSR (0x0F, 0x00)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (PEGA)
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x03)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If ((NDID == 0x01))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        TMP1 [0x00] = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [0x00] = (0x00010000 | DID1)
                        TMP2 [0x01] = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP3 [0x00] = (0x00010000 | DID1)
                        TMP3 [0x01] = (0x00010000 | DID2)
                        TMP3 [0x02] = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP4 [0x00] = (0x00010000 | DID1)
                        TMP4 [0x01] = (0x00010000 | DID2)
                        TMP4 [0x02] = (0x00010000 | DID3)
                        TMP4 [0x03] = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    Name (TMP5, Package (0x05)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP5 [0x00] = (0x00010000 | DID1)
                    TMP5 [0x01] = (0x00010000 | DID2)
                    TMP5 [0x02] = (0x00010000 | DID3)
                    TMP5 [0x03] = (0x00010000 | DID4)
                    TMP5 [0x04] = (0x00010000 | DID5)
                    Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID1))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (0x01)
                        If ((CSTE & 0x01))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x01))
                        {
                            Return (0x01)
                        }

                        Return (0x00)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID2))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (0x01)
                        If ((CSTE & 0x02))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x02))
                        {
                            Return (0x01)
                        }

                        Return (0x00)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID3))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (0x01)
                        If ((CSTE & 0x04))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x04))
                        {
                            Return (0x01)
                        }

                        Return (0x00)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID4))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (0x01)
                        If ((CSTE & 0x08))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x08))
                        {
                            Return (0x01)
                        }

                        Return (0x00)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID5))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (0x01)
                        If ((CSTE & 0x10))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x10))
                        {
                            Return (0x01)
                        }

                        Return (0x00)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (P1CS, PCI_Config, 0x40, 0x0100)
                Field (P1CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP1,   1, 
                        ,   2, 
                    PDC1,   1, 
                        ,   2, 
                    PDS1,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP1,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (\GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }
                        })
                    }
                }

                Device (LANE)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x0B, 
                        0x04
                    })
                    Name (LANP, 0x00)
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If ((Arg0 == 0x00))
                        {
                            LANP = 0x00
                        }
                        Else
                        {
                            LANP = 0x01
                        }
                    }
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (P2CS, PCI_Config, 0x40, 0x0100)
                Field (P2CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP2,   1, 
                        ,   2, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP2,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (\GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (P3CS, PCI_Config, 0x40, 0x0100)
                Field (P3CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP3,   1, 
                        ,   2, 
                    PDC3,   1, 
                        ,   2, 
                    PDS3,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP3,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (\GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (P4CS, PCI_Config, 0x40, 0x0100)
                Field (P4CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDP4,   1, 
                    Offset (0x1A), 
                    ABP4,   1, 
                        ,   2, 
                    PDC4,   1, 
                        ,   2, 
                    PDS4,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP4,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Scope (\_SB.PCI0)
                {
                    Device (DOCK)
                    {
                        Name (_HID, EisaId ("PNP0C15") /* Docking Station */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Name (_BDN, "EZ4 ")  // _BDN: BIOS Dock Name
                        Name (DCKS, 0x00)
                        Method (_DCK, 1, NotSerialized)  // _DCK: Dock Present
                        {
                            If ((Arg0 == 0x01))
                            {
                                Return (0x01)
                            }
                            Else
                            {
                                \_SB.PCI0.RP04.LDP4 = 0x01
                                Return (0x01)
                            }
                        }

                        Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                        {
                            \_SB.PCI0.RP04.LDP4 = 0x01
                            HOTS = 0x01
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((\_SB.PCI0.RP04.LDP4 == 0x01))
                            {
                                Return (0x00)
                            }
                            ElseIf (DCKS)
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                    }
                }

                Device (PXHA)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_EJD, "\\_SB.PCI0.DOCK")  // _EJD: Ejection Dependent Device
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((RP4D == 0x01))
                        {
                            \_SB.PCI0.DOCK.DCKS = 0x00
                            \_SB.PCI0.RP04.LDP4 = 0x01
                        }
                        ElseIf ((\_SB.PCI0.RP04.PDS4 == 0x01))
                        {
                            \_SB.PCI0.DOCK.DCKS = 0x01
                        }
                        Else
                        {
                            \_SB.PCI0.DOCK.DCKS = 0x00
                            \_SB.PCI0.RP04.LDP4 = 0x01
                            RP4D = 0x01
                        }

                        If ((OSYS >= 0x07D1))
                        {
                            \PPMF = CFGD /* External reference */
                            If ((\_SB.PCI0.DOCK.DCKS == 0x01))
                            {
                                CFGD &= 0xFFFFFF3F
                            }
                            Else
                            {
                                CFGD = \PPMF
                            }

                            Notify (\_PR.CPU0, 0x81) // C-State Change
                            Sleep (0x012C)
                            Notify (\_PR.CPU1, 0x81) // C-State Change
                            Sleep (0x012C)
                        }
                    }

                    Name (_PSC, 0x00)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        _PSC = 0x00
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        Return (Package (0x0A)
                        {
                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0006FFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0x0006FFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }
                        })
                    }

                    Device (PXHI)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Name (_PSC, 0x00)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (((\INSX == 0x01) && (OSYS == 0x07D0)))
                            {
                                \_SB.PHSR (0x09, 0x00)
                                \INSX = 0x00
                            }

                            _PSC = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }
                    }

                    Device (PXHC)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Name (_PSC, 0x00)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (((\INSX == 0x01) && (OSYS == 0x07D0)))
                            {
                                \_SB.PHSR (0x09, 0x00)
                                \INSX = 0x00
                            }

                            _PSC = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }
                    }

                    Device (PXHM)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Name (_PSC, 0x00)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (((\INSX == 0x01) && (OSYS == 0x07D0)))
                            {
                                \_SB.PHSR (0x09, 0x00)
                                \INSX = 0x00
                            }

                            _PSC = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }
                    }
                }

                Scope (\_GPE)
                {
                    Method (_L1F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        If ((\_SB.DOCK == 0x01))
                        {
                            Sleep (0x012C)
                            Z000 = 0x01
                            Local1 = Z000 /* \Z000 */
                            If ((Local1 == 0x01))
                            {
                                Local0 = Z001 /* \Z001 */
                                If ((Local0 == 0x00))
                                {
                                    CFGD = \PPMF
                                    Notify (\_PR.CPU0, 0x81) // C-State Change
                                    Sleep (0x012C)
                                    Notify (\_PR.CPU1, 0x81) // C-State Change
                                    Sleep (0x012C)
                                    RP4D = 0x01
                                    Sleep (0xC8)
                                    Notify (\_SB.PCI0.RP04, 0x01) // Device Check
                                    Sleep (0xC8)
                                    \_SB.PCI0.DOCK.DCKS = 0x00
                                    Notify (\_SB.PCI0.DOCK, 0x01) // Device Check
                                }
                                Else
                                {
                                    CFGD &= 0xFFFFFF3F
                                    Notify (\_PR.CPU0, 0x81) // C-State Change
                                    Sleep (0x012C)
                                    Notify (\_PR.CPU1, 0x81) // C-State Change
                                    Sleep (0x012C)
                                    RP4D = 0x00
                                    Sleep (0x01F4)
                                    \_SB.PCI0.RP04.LDP4 = 0x00
                                    Sleep (0x012C)
                                    \_SB.PCI0.DOCK.DCKS = 0x01
                                    Sleep (0x01F4)
                                    \_SB.PHSR (0x07, 0x00)
                                    Sleep (0x01F4)
                                    Notify (\_SB.PCI0.DOCK, 0x00) // Bus Check
                                }

                                Z001 ^= 0x01
                            }
                        }
                    }
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (P5CS, PCI_Config, 0x40, 0x0100)
                Field (P5CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDP5,   1, 
                    Offset (0x1A), 
                    ABP5,   1, 
                        ,   2, 
                    PDC5,   1, 
                        ,   2, 
                    PDS5,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP5,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (\GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (P6CS, PCI_Config, 0x40, 0x0100)
                Field (P6CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDP6,   1, 
                    Offset (0x1A), 
                    ABP6,   1, 
                        ,   2, 
                    PDC6,   1, 
                        ,   2, 
                    PDS6,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP6,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (\GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (U2CS, PCI_Config, 0xC4, 0x04)
                Field (U2CS, DWordAcc, NoLock, Preserve)
                {
                    U2EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U2EN = 0x03
                    }
                    Else
                    {
                        U2EN = 0x00
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (U2CS, PCI_Config, 0xC4, 0x04)
                Field (U2CS, DWordAcc, NoLock, Preserve)
                {
                    U3EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U3EN = 0x03
                    }
                    Else
                    {
                        U3EN = 0x00
                    }
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (U4CS, PCI_Config, 0xC4, 0x04)
                Field (U4CS, DWordAcc, NoLock, Preserve)
                {
                    U4EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U4EN = 0x03
                    }
                    Else
                    {
                        U4EN = 0x00
                    }
                }
            }

            Device (USB7)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (PCIB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x03)
                        {
                            Package (0x04)
                            {
                                0x0009FFFF, 
                                0x00, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x15)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x01, 
                                \_SB.PCI0.LPCB.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x02, 
                                \_SB.PCI0.LPCB.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x03, 
                                \_SB.PCI0.LPCB.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0008FFFF, 
                                0x00, 
                                \_SB.PCI0.LPCB.LNKE, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x20), 
                    PARC,   8, 
                    PBRC,   8, 
                    PCRC,   8, 
                    PDRC,   8, 
                    Offset (0x28), 
                    PERC,   8, 
                    PFRC,   8, 
                    PGRC,   8, 
                    PHRC,   8, 
                    Offset (0x40), 
                    UADR,   3, 
                        ,   1, 
                    UBDR,   3, 
                    Offset (0x41), 
                    LPDR,   2, 
                        ,   2, 
                    FDDR,   1, 
                    Offset (0x42), 
                    UALE,   1, 
                    UBLE,   1, 
                    LPLE,   1, 
                    FDLE,   1, 
                    SBLE,   1, 
                    MDLE,   1, 
                    MSLE,   1, 
                    ADLE,   1, 
                    GLLE,   1, 
                    GHLE,   1, 
                    KBLE,   1, 
                    MCLE,   1, 
                    C1LE,   1, 
                    C2LE,   1, 
                    Offset (0x44), 
                    Offset (0x60), 
                        ,   7, 
                    C4C3,   1
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PARC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLA, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y0F)
                                {}
                        })
                        CreateWordField (RTLA, \_SB.PCI0.LPCB.LNKA._CRS._Y0F._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PARC & 0x0F))
                        Return (RTLA) /* \_SB_.PCI0.LPCB.LNKA._CRS.RTLA */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PARC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PARC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PBRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLB, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y10)
                                {}
                        })
                        CreateWordField (RTLB, \_SB.PCI0.LPCB.LNKB._CRS._Y10._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PBRC & 0x0F))
                        Return (RTLB) /* \_SB_.PCI0.LPCB.LNKB._CRS.RTLB */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PBRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PBRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PCRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLC, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y11)
                                {}
                        })
                        CreateWordField (RTLC, \_SB.PCI0.LPCB.LNKC._CRS._Y11._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PCRC & 0x0F))
                        Return (RTLC) /* \_SB_.PCI0.LPCB.LNKC._CRS.RTLC */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PCRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PCRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PDRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLD, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y12)
                                {}
                        })
                        CreateWordField (RTLD, \_SB.PCI0.LPCB.LNKD._CRS._Y12._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PDRC & 0x0F))
                        Return (RTLD) /* \_SB_.PCI0.LPCB.LNKD._CRS.RTLD */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PDRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PDRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PERC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLE, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y13)
                                {}
                        })
                        CreateWordField (RTLE, \_SB.PCI0.LPCB.LNKE._CRS._Y13._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PERC & 0x0F))
                        Return (RTLE) /* \_SB_.PCI0.LPCB.LNKE._CRS.RTLE */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PERC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PERC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PFRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLF, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y14)
                                {}
                        })
                        CreateWordField (RTLF, \_SB.PCI0.LPCB.LNKF._CRS._Y14._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PFRC & 0x0F))
                        Return (RTLF) /* \_SB_.PCI0.LPCB.LNKF._CRS.RTLF */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PFRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PFRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PGRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLG, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y15)
                                {}
                        })
                        CreateWordField (RTLG, \_SB.PCI0.LPCB.LNKG._CRS._Y15._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PGRC & 0x0F))
                        Return (RTLG) /* \_SB_.PCI0.LPCB.LNKG._CRS.RTLG */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PGRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PGRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PHRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLH, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y16)
                                {}
                        })
                        CreateWordField (RTLH, \_SB.PCI0.LPCB.LNKH._CRS._Y16._INT, IRQ0)  // _INT: Interrupts
                        IRQ0 = Zero
                        IRQ0 = (0x01 << (PHRC & 0x0F))
                        Return (RTLH) /* \_SB_.PCI0.LPCB.LNKH._CRS.RTLH */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PHRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PHRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Name (_GPE, 0x17)  // _GPE: General Purpose Events
                    Name (SEL0, 0xF0)
                    Name (BFLG, 0x00)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            Local0 = Arg1
                            If (Local0)
                            {
                                ECOK = 0x01
                            }
                            Else
                            {
                                ECOK = 0x00
                            }
                        }

                        If (\_SB.ECOK)
                        {
                            Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                            \_SB.PCI0.LPCB.EC0.RG59 = 0x03
                            \_SB.PCI0.LPCB.EC0.BLTH = \_SB.BTEN
                            \_SB.PCI0.LPCB.EC0.WLAN = \_SB.WLAN
                            \_SB.PCI0.LPCB.EC0.CPLE = 0x01
                            DOFF = \_SB.PHSR (0x05, 0x00)
                            If ((OSYS == 0x07D0))
                            {
                                Local0 = \_SB.PCI0.LPCB.EC0.ACDF
                                If (Local0)
                                {
                                    \_SB.PHSR (0x10, 0x01)
                                }
                                Else
                                {
                                    \_SB.PHSR (0x10, 0x00)
                                }
                            }

                            Release (\_SB.PCI0.LPCB.EC0.MUT1)
                        }
                    }

                    OperationRegion (ERAM, EmbeddedControl, 0x00, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        CMCM,   8, 
                        CMD1,   8, 
                        CMD2,   8, 
                        CMD3,   8, 
                        Offset (0x18), 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        BATD,   16, 
                        ACDF,   1, 
                        Offset (0x41), 
                            ,   4, 
                        FPR1,   1, 
                        FLS4,   1, 
                        S5LW,   1, 
                        PFLG,   1, 
                        Offset (0x43), 
                        TMSS,   2, 
                            ,   2, 
                        BANK,   4, 
                        Offset (0x45), 
                        VFAN,   1, 
                        Offset (0x46), 
                        RL01,   1, 
                        RD01,   1, 
                        RF01,   1, 
                        RP01,   1, 
                        RB01,   1, 
                        RC01,   1, 
                            ,   1, 
                        R701,   1, 
                        R801,   1, 
                        RM01,   1, 
                        RI01,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        RA01,   1, 
                        RR01,   1, 
                        RL10,   1, 
                        RD10,   1, 
                        RF10,   1, 
                        RP10,   1, 
                        RB10,   1, 
                        RC10,   1, 
                            ,   1, 
                        R710,   1, 
                        R810,   1, 
                        RM10,   1, 
                        RI10,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        RA10,   1, 
                        RR10,   1, 
                        LIDE,   1, 
                        BAYE,   1, 
                        PRDE,   1, 
                        WP01,   1, 
                        WB01,   1, 
                        WC01,   1, 
                            ,   1, 
                        W701,   1, 
                        W801,   1, 
                        WM01,   1, 
                        WI01,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        WA01,   1, 
                        WR01,   1, 
                        LIDS,   1, 
                        BAYI,   1, 
                        PRCT,   1, 
                        WP10,   1, 
                        WB10,   1, 
                        WC10,   1, 
                            ,   1, 
                        W710,   1, 
                        W810,   1, 
                        WM10,   1, 
                        WI10,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        WA10,   1, 
                        WR10,   1, 
                        Offset (0x53), 
                        DOFF,   8, 
                        Offset (0x57), 
                        RG57,   8, 
                        CTMP,   8, 
                        RG59,   8, 
                        RG5A,   8, 
                        RG5B,   8, 
                        FSPD,   16, 
                        Offset (0x5F), 
                        WLAN,   1, 
                        BLTH,   1, 
                        CPLE,   1, 
                        Offset (0x61), 
                        BRLV,   8, 
                        Offset (0x63), 
                            ,   7, 
                        VGAF,   1, 
                        Offset (0x71), 
                        MBTS,   1, 
                        MBTF,   1, 
                        Offset (0x72), 
                        MBTC,   1, 
                            ,   2, 
                        LION,   1, 
                        Offset (0x77), 
                        BA1C,   8, 
                        Offset (0x7A), 
                        MCYC,   16, 
                        MTMP,   16, 
                        MDAT,   16, 
                        Offset (0x81), 
                        ABTS,   1, 
                        ABFC,   1, 
                            ,   3, 
                        ABBL,   1, 
                        Z002,   1, 
                        ABCT,   1, 
                        ABCG,   1, 
                            ,   2, 
                        ABTP,   1, 
                        Offset (0x87), 
                        BA2C,   8, 
                        Offset (0x8A), 
                        ACYC,   16, 
                        ATMP,   16, 
                        ADAT,   16, 
                        Offset (0xC1), 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBVG,   16, 
                        BTST,   8, 
                        ABCR,   16, 
                        ABRM,   16, 
                        ABVG,   16, 
                        Offset (0xD0), 
                        EBPL,   1, 
                        Offset (0xD1), 
                        PWRE,   1, 
                        Offset (0xD2), 
                            ,   6, 
                        VAUX,   1, 
                        Offset (0xD6), 
                        DBPL,   8, 
                        Offset (0xD8), 
                        LFCC,   16, 
                        BTSN,   16, 
                        BTDC,   16, 
                        BTDV,   16, 
                        BTMN,   8, 
                        BTMD,   8, 
                        AFCC,   16, 
                        ABSN,   16, 
                        ABDC,   16, 
                        ABDV,   16, 
                        ABMN,   8, 
                        ABMD,   8, 
                        TRDV,   3
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        SMW0,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        SMB0,   8
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD0,   64
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD1,   128
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD2,   192
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD3,   256
                    }

                    Mutex (MUT1, 0x00)
                    Mutex (MUT0, 0x00)
                    Method (SMRD, 4, NotSerialized)
                    {
                        If ((\_SB.ECOK == 0x00))
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x07))
                        {
                            If ((Arg0 != 0x09))
                            {
                                If ((Arg0 != 0x0B))
                                {
                                    Return (0x19)
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > 0x01))
                        {
                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = 0x00
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = 0x00
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = 0x00
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }
                        Else
                        {
                            If ((Arg0 == 0x07))
                            {
                                Arg3 = SMB0 /* \_SB_.PCI0.LPCB.EC0_.SMB0 */
                            }

                            If ((Arg0 == 0x09))
                            {
                                Arg3 = SMW0 /* \_SB_.PCI0.LPCB.EC0_.SMW0 */
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Local3 = BCNT /* \_SB_.PCI0.LPCB.EC0_.BCNT */
                                Local2 = (0x0100 >> 0x03)
                                If ((Local3 > Local2))
                                {
                                    Local3 = Local2
                                }

                                If ((Local3 < 0x09))
                                {
                                    Local2 = FLD0 /* \_SB_.PCI0.LPCB.EC0_.FLD0 */
                                }
                                ElseIf ((Local3 < 0x11))
                                {
                                    Local2 = FLD1 /* \_SB_.PCI0.LPCB.EC0_.FLD1 */
                                }
                                ElseIf ((Local3 < 0x19))
                                {
                                    Local2 = FLD2 /* \_SB_.PCI0.LPCB.EC0_.FLD2 */
                                }
                                Else
                                {
                                    Local2 = FLD3 /* \_SB_.PCI0.LPCB.EC0_.FLD3 */
                                }

                                Local3++
                                Local4 = Buffer (Local3) {}
                                Local3--
                                Local5 = Zero
                                While ((Local3 > Local5))
                                {
                                    GBFE (Local2, Local5, RefOf (Local6))
                                    PBFE (Local4, Local5, Local6)
                                    Local5++
                                }

                                PBFE (Local4, Local5, 0x00)
                                Arg3 = Local4
                            }
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (SMWR, 4, NotSerialized)
                    {
                        If ((\_SB.ECOK == 0x00))
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x06))
                        {
                            If ((Arg0 != 0x08))
                            {
                                If ((Arg0 != 0x0A))
                                {
                                    Return (0x19)
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > 0x01))
                        {
                            If ((Arg0 == 0x06))
                            {
                                SMB0 = Arg3
                            }

                            If ((Arg0 == 0x08))
                            {
                                SMW0 = Arg3
                            }

                            If ((Arg0 == 0x0A))
                            {
                                SMD0 = Arg3
                            }

                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = 0x00
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = 0x00
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = 0x00
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (APOL, 1, NotSerialized)
                    {
                        DBPL = Arg0
                        EBPL = 0x01
                    }

                    Name (PSTA, 0x00)
                    Method (CPOL, 1, NotSerialized)
                    {
                        If ((PSTA == 0x00))
                        {
                            If ((\_SB.ECOK != 0x00))
                            {
                                APOL (Arg0)
                                PSTA = 0x01
                            }
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (\_SB.ECOK)
                        {
                            Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                            If ((SMST & 0x40))
                            {
                                Local0 = SMAA /* \_SB_.PCI0.LPCB.EC0_.SMAA */
                                If ((Local0 == 0x14))
                                {
                                    SMST &= 0xBF
                                    Local1 = PWRE /* \_SB_.PCI0.LPCB.EC0_.PWRE */
                                    If (Local1)
                                    {
                                        PWRE = 0x00
                                        BFLG = 0x12
                                        CPOL (0x01)
                                    }
                                }

                                If ((Local0 == 0x16))
                                {
                                    SMST &= 0xBF
                                    \_SB.BAT1.BCRI = 0x04
                                    Notify (\_SB.BAT1, 0x80) // Status Change
                                }
                                Else
                                {
                                    \_SB.BAT1.BCRI = 0x00
                                }
                            }

                            Release (\_SB.PCI0.LPCB.EC0.MUT1)
                        }
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (\_SB.ECOK)
                        {
                            \_SB.PCI0.LPCB.EC0.PSTA = 0x00
                            \_SB.BAT1.Z003 ()
                            Notify (\_SB.ACAD, 0x80) // Status Change
                            Sleep (0x01F4)
                            Notify (\_SB.BAT1, 0x80) // Status Change
                            If (\_SB.BAT1.BTCH)
                            {
                                \_SB.BAT1.UBIF ()
                                Notify (\_SB.BAT1, 0x81) // Information Change
                                \_SB.BAT1.BTCH = 0x00
                            }
                        }
                    }

                    Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8A
                    }

                    Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Local0 = DLST /* \DLST */
                        TLST = Local0
                        HKDS (0x0A)
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (\_SB.SLPB, 0x80) // Status Change
                    }

                    Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x01
                        Notify (\_SB.WMID, 0x80) // Status Change
                    }

                    Method (_Q91, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x02
                        Notify (\_SB.WMID, 0x80) // Status Change
                    }

                    Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x03
                        Notify (\_SB.WMID, 0x80) // Status Change
                    }

                    Method (_Q93, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x04
                        Notify (\_SB.WMID, 0x80) // Status Change
                    }

                    Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x05
                        Notify (\_SB.WMID, 0x80) // Status Change
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x06
                        Notify (\_SB.WMID, 0x81) // Information Change
                    }

                    Method (_Q8D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x07
                        Notify (\_SB.WMID, 0x81) // Information Change
                    }

                    Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x0A
                        Notify (\_SB.WMID, 0x81) // Information Change
                    }

                    Method (_Q94, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x09
                        Notify (\_SB.WMID, 0x82) // Device-Specific Change
                    }

                    Method (_Q95, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_SB.WMID.WMIQ = 0x08
                        Notify (\_SB.WMID, 0x82) // Device-Specific Change
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y17)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (0x00)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y17._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == 0x01))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x006F,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x1180,             // Range Minimum
                            0x1180,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            )
                        IO (Decode16,
                            0x1600,             // Range Minimum
                            0x1600,             // Range Maximum
                            0x01,               // Alignment
                            0x70,               // Length
                            )
                        IO (Decode16,
                            0xFE10,             // Range Minimum
                            0xFE10,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.RTC_.BUF1 */
                    }
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.TIMR.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.TIMR.BUF1 */
                    }
                }

                Device (TPM)
                {
                    Name (_HID, EisaId ("IFX0102"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x1670,             // Range Minimum
                            0x1670,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED40000,         // Address Base
                            0x00005000,         // Address Length
                            )
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (\_SB.TPMS)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("SYN1003"))  // _HID: Hardware ID
                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1000"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                }

                Device (SIO)
                {
                    Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
                    OperationRegion (SIIO, SystemIO, 0x164E, 0x02)
                    Field (SIIO, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Mutex (N383, 0x00)
                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x26), 
                            ,   1, 
                        LPTE,   1, 
                        Z004,   1, 
                        Z005,   1, 
                        Offset (0x30), 
                        ACTR,   1, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        Offset (0x70), 
                        INTR,   8, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xF0), 
                        OPT1,   8
                    }

                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (N383, 0xFFFF)
                        INDX = 0x07
                        DATA = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Release (N383)
                    }

                    Device (FIR)
                    {
                        Name (_HID, EisaId ("NSC6001"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ENFG (0x02)
                            If ((Z004 == 0x00))
                            {
                                If (ACTR)
                                {
                                    Local0 = 0x0F
                                }
                                Else
                                {
                                    Local0 = 0x0D
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            EXFG ()
                            If ((Local0 == 0x00))
                            {
                                \_SB.PCI0.LPCB.SIO.FIR._DIS ()
                                \_SB.PCI0.LPCB.UBLE = 0x00
                            }

                            Return (Local0)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            ENFG (0x02)
                            If (ACTR)
                            {
                                ACTR = 0x00
                                INTR = 0x00
                                IOAH = 0x00
                                IOAL = 0x00
                                DMCH = 0x00
                            }

                            EXFG ()
                            \_SB.PCI0.LPCB.UBLE = 0x00
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {0}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {0}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {0}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {0}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            EndDependentFn ()
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (DCRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {0}
                            })
                            ENFG (0x02)
                            If (ACTR)
                            {
                                Local1 = IOAH /* \_SB_.PCI0.LPCB.SIO_.IOAH */
                                Local0 = IOAL /* \_SB_.PCI0.LPCB.SIO_.IOAL */
                                DCRS [0x02] = Local0
                                DCRS [0x04] = Local0
                                DCRS [0x03] = Local1
                                DCRS [0x05] = Local1
                                Local0 = (0x01 << INTR) /* \_SB_.PCI0.LPCB.SIO_.INTR */
                                DCRS [0x09] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x0A] = Local1
                                Local0 = (0x01 << DMCH) /* \_SB_.PCI0.LPCB.SIO_.DMCH */
                                DCRS [0x0C] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x0D] = Local1
                            }
                            Else
                            {
                                DCRS [0x02] = 0x00
                                DCRS [0x04] = 0x00
                                DCRS [0x03] = 0x00
                                DCRS [0x05] = 0x00
                                DCRS [0x09] = 0x00
                                DCRS [0x0A] = 0x00
                                DCRS [0x0C] = 0x00
                                DCRS [0x0D] = 0x00
                            }

                            EXFG ()
                            Return (DCRS) /* \_SB_.PCI0.LPCB.SIO_.FIR_._CRS.DCRS */
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, ADRL)
                            CreateByteField (Arg0, 0x03, ADRM)
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateWordField (Arg0, 0x0C, DMAM)
                            FindSetRightBit (IRQM, Local0)
                            Local0--
                            FindSetRightBit (DMAM, Local1)
                            Local1--
                            If ((ADRM == 0x03))
                            {
                                If ((ADRL == 0xF8))
                                {
                                    UBDR = 0x00
                                }
                                Else
                                {
                                    UBDR = 0x07
                                }
                            }
                            ElseIf ((ADRL == 0xF8))
                            {
                                UBDR = 0x01
                            }
                            Else
                            {
                                UBDR = 0x05
                            }

                            \_SB.PCI0.LPCB.UBLE = 0x01
                            ENFG (0x02)
                            INTR = Local0
                            DMCH = Local1
                            IOAH = ADRM /* \_SB_.PCI0.LPCB.SIO_.FIR_._SRS.ADRM */
                            IOAL = ADRL /* \_SB_.PCI0.LPCB.SIO_.FIR_._SRS.ADRL */
                            ACTR = 0x01
                            OPT1 |= 0x80 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            EXFG ()
                        }
                    }

                    Device (COMA)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (\_SB.DOCK)
                            {
                                ENFG (0x03)
                                If ((Z005 == 0x00))
                                {
                                    If (ACTR)
                                    {
                                        Local0 = 0x0F
                                    }
                                    Else
                                    {
                                        Local0 = 0x0D
                                    }
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }

                                EXFG ()
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            If ((Local0 == 0x00))
                            {
                                \_SB.PCI0.LPCB.SIO.COMA._DIS ()
                                \_SB.PCI0.LPCB.UALE = 0x00
                            }

                            Return (Local0)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            ENFG (0x03)
                            If (ACTR)
                            {
                                ACTR = 0x00
                                INTR = 0x00
                                IOAH = 0x00
                                IOAL = 0x00
                            }

                            EXFG ()
                            \_SB.PCI0.LPCB.UALE = 0x00
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (DCRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            })
                            ENFG (0x03)
                            If (ACTR)
                            {
                                Local1 = IOAH /* \_SB_.PCI0.LPCB.SIO_.IOAH */
                                Local0 = IOAL /* \_SB_.PCI0.LPCB.SIO_.IOAL */
                                DCRS [0x02] = Local0
                                DCRS [0x04] = Local0
                                DCRS [0x03] = Local1
                                DCRS [0x05] = Local1
                                Local0 = (0x01 << INTR) /* \_SB_.PCI0.LPCB.SIO_.INTR */
                                DCRS [0x09] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x0A] = Local1
                            }
                            Else
                            {
                                DCRS [0x02] = 0x00
                                DCRS [0x04] = 0x00
                                DCRS [0x03] = 0x00
                                DCRS [0x05] = 0x00
                                DCRS [0x09] = 0x00
                                DCRS [0x0A] = 0x00
                            }

                            EXFG ()
                            Return (DCRS) /* \_SB_.PCI0.LPCB.SIO_.COMA._CRS.DCRS */
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            P80H = 0x55
                            CreateByteField (Arg0, 0x02, ADRL)
                            CreateByteField (Arg0, 0x03, ADRM)
                            CreateWordField (Arg0, 0x09, IRQM)
                            FindSetRightBit (IRQM, Local0)
                            Local0--
                            If ((ADRM == 0x03))
                            {
                                If ((ADRL == 0xF8))
                                {
                                    UADR = 0x00
                                }
                                Else
                                {
                                    UADR = 0x07
                                }
                            }
                            ElseIf ((ADRL == 0xF8))
                            {
                                UADR = 0x01
                            }
                            Else
                            {
                                UADR = 0x05
                            }

                            \_SB.PCI0.LPCB.UALE = 0x01
                            ENFG (0x03)
                            INTR = Local0
                            IOAH = ADRM /* \_SB_.PCI0.LPCB.SIO_.COMA._SRS.ADRM */
                            IOAL = ADRL /* \_SB_.PCI0.LPCB.SIO_.COMA._SRS.ADRL */
                            ACTR = 0x01
                            EXFG ()
                        }
                    }

                    Device (ECP)
                    {
                        Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local2 = LPTE /* \_SB_.PCI0.LPCB.SIO_.LPTE */
                            Local3 = ACTR /* \_SB_.PCI0.LPCB.SIO_.ACTR */
                            EXFG ()
                            Local0 >>= 0x05
                            If (((Local2 == 0x00) && ((Local0 == 0x04) || (Local0 == 0x07))))
                            {
                                If (\_SB.DOCK)
                                {
                                    Local1 = (Local3 << 0x01)
                                    Local1 += 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local0 >>= 0x05
                            If (((LPTE == 0x00) && ((Local0 == 0x04) || (Local0 == 0x07))))
                            {
                                If (ACTR)
                                {
                                    ACTR = 0x00
                                    INTR = 0x00
                                    IOAH = 0x00
                                    IOAL = 0x00
                                    DMCH = 0x00
                                }

                                \_SB.PCI0.LPCB.LPLE = 0x00
                            }

                            EXFG ()
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1}
                            }
                            EndDependentFn ()
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (DCRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {3}
                            })
                            ENFG (0x01)
                            If (ACTR)
                            {
                                Local1 = IOAH /* \_SB_.PCI0.LPCB.SIO_.IOAH */
                                Local0 = IOAL /* \_SB_.PCI0.LPCB.SIO_.IOAL */
                                DCRS [0x02] = Local0
                                DCRS [0x0A] = Local0
                                DCRS [0x04] = Local0
                                DCRS [0x0C] = Local0
                                DCRS [0x03] = Local1
                                DCRS [0x05] = Local1
                                Local1 += 0x04
                                DCRS [0x0B] = Local1
                                DCRS [0x0D] = Local1
                                Local0 = (0x01 << INTR) /* \_SB_.PCI0.LPCB.SIO_.INTR */
                                DCRS [0x11] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x12] = Local1
                                Local0 = (0x01 << DMCH) /* \_SB_.PCI0.LPCB.SIO_.DMCH */
                                DCRS [0x14] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x15] = Local1
                            }
                            Else
                            {
                                DCRS [0x02] = 0x00
                                DCRS [0x0A] = 0x00
                                DCRS [0x04] = 0x00
                                DCRS [0x0C] = 0x00
                                DCRS [0x03] = 0x00
                                DCRS [0x05] = 0x00
                                DCRS [0x0B] = 0x00
                                DCRS [0x0D] = 0x00
                                DCRS [0x11] = 0x00
                                DCRS [0x12] = 0x00
                                DCRS [0x14] = 0x00
                                DCRS [0x15] = 0x00
                            }

                            EXFG ()
                            Return (DCRS) /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.DCRS */
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, ADRL)
                            CreateByteField (Arg0, 0x03, ADRM)
                            CreateWordField (Arg0, 0x11, IRQM)
                            CreateWordField (Arg0, 0x14, DMAM)
                            FindSetRightBit (IRQM, Local0)
                            Local0--
                            FindSetRightBit (DMAM, Local1)
                            Local1--
                            \_SB.PCI0.LPCB.LPLE = 0x00
                            If ((ADRM == 0x03))
                            {
                                LPDR = 0x00
                            }
                            Else
                            {
                                LPDR = 0x01
                            }

                            \_SB.PCI0.LPCB.LPLE = 0x01
                            ENFG (0x01)
                            INTR = Local0
                            DMCH = Local1
                            IOAH = ADRM /* \_SB_.PCI0.LPCB.SIO_.ECP_._SRS.ADRM */
                            IOAL = ADRL /* \_SB_.PCI0.LPCB.SIO_.ECP_._SRS.ADRL */
                            ACTR = 0x01
                            EXFG ()
                        }
                    }

                    Device (EPP)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local2 = LPTE /* \_SB_.PCI0.LPCB.SIO_.LPTE */
                            Local3 = ACTR /* \_SB_.PCI0.LPCB.SIO_.ACTR */
                            EXFG ()
                            Local0 >>= 0x05
                            If (((Local2 == 0x00) && ((Local0 == 0x02) || (Local0 == 0x03))))
                            {
                                If (\_SB.DOCK)
                                {
                                    Local1 = (Local3 << 0x01)
                                    Local1 += 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local0 >>= 0x05
                            If (((LPTE == 0x00) && ((Local0 == 0x02) || (Local0 == 0x03))))
                            {
                                If (ACTR)
                                {
                                    ACTR = 0x00
                                    INTR = 0x00
                                    IOAH = 0x00
                                    IOAL = 0x00
                                }

                                \_SB.PCI0.LPCB.LPLE = 0x00
                            }

                            EXFG ()
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            EndDependentFn ()
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (DCRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            })
                            ENFG (0x01)
                            If (ACTR)
                            {
                                Local1 = IOAH /* \_SB_.PCI0.LPCB.SIO_.IOAH */
                                Local0 = IOAL /* \_SB_.PCI0.LPCB.SIO_.IOAL */
                                DCRS [0x02] = Local0
                                DCRS [0x0A] = Local0
                                DCRS [0x04] = Local0
                                DCRS [0x0C] = Local0
                                DCRS [0x03] = Local1
                                DCRS [0x05] = Local1
                                Local1 += 0x04
                                DCRS [0x0B] = Local1
                                DCRS [0x0D] = Local1
                                Local0 = (0x01 << INTR) /* \_SB_.PCI0.LPCB.SIO_.INTR */
                                DCRS [0x11] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x12] = Local1
                            }
                            Else
                            {
                                DCRS [0x02] = 0x00
                                DCRS [0x0A] = 0x00
                                DCRS [0x04] = 0x00
                                DCRS [0x0C] = 0x00
                                DCRS [0x03] = 0x00
                                DCRS [0x05] = 0x00
                                DCRS [0x0B] = 0x00
                                DCRS [0x0D] = 0x00
                                DCRS [0x11] = 0x00
                                DCRS [0x12] = 0x00
                            }

                            EXFG ()
                            Return (DCRS) /* \_SB_.PCI0.LPCB.SIO_.EPP_._CRS.DCRS */
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, ADRL)
                            CreateByteField (Arg0, 0x03, ADRM)
                            CreateWordField (Arg0, 0x11, IRQM)
                            FindSetRightBit (IRQM, Local0)
                            Local0--
                            \_SB.PCI0.LPCB.LPLE = 0x00
                            If ((ADRM == 0x03))
                            {
                                LPDR = 0x00
                            }
                            Else
                            {
                                LPDR = 0x01
                            }

                            \_SB.PCI0.LPCB.LPLE = 0x01
                            ENFG (0x01)
                            INTR = Local0
                            IOAH = ADRM /* \_SB_.PCI0.LPCB.SIO_.EPP_._SRS.ADRM */
                            IOAL = ADRL /* \_SB_.PCI0.LPCB.SIO_.EPP_._SRS.ADRL */
                            ACTR = 0x01
                            EXFG ()
                        }
                    }

                    Device (LPTB)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local2 = LPTE /* \_SB_.PCI0.LPCB.SIO_.LPTE */
                            Local3 = ACTR /* \_SB_.PCI0.LPCB.SIO_.ACTR */
                            EXFG ()
                            Local0 >>= 0x05
                            If (((Local2 == 0x00) && (Local0 == 0x01)))
                            {
                                If (\_SB.DOCK)
                                {
                                    Local1 = (Local3 << 0x01)
                                    Local1 += 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local0 >>= 0x05
                            If (((LPTE == 0x00) && (Local0 == 0x01)))
                            {
                                If (ACTR)
                                {
                                    ACTR = 0x00
                                    INTR = 0x00
                                    IOAH = 0x00
                                    IOAL = 0x00
                                }

                                \_SB.PCI0.LPCB.LPLE = 0x00
                            }

                            EXFG ()
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            EndDependentFn ()
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (DCRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            })
                            ENFG (0x01)
                            If (ACTR)
                            {
                                Local1 = IOAH /* \_SB_.PCI0.LPCB.SIO_.IOAH */
                                Local0 = IOAL /* \_SB_.PCI0.LPCB.SIO_.IOAL */
                                DCRS [0x02] = Local0
                                DCRS [0x0A] = Local0
                                DCRS [0x04] = Local0
                                DCRS [0x0C] = Local0
                                DCRS [0x03] = Local1
                                DCRS [0x05] = Local1
                                Local1 += 0x04
                                DCRS [0x0B] = Local1
                                DCRS [0x0D] = Local1
                                If ((Local0 & 0x04))
                                {
                                    Local0 = 0x04
                                }
                                Else
                                {
                                    Local0 = 0x08
                                }

                                DCRS [0x06] = Local0
                                DCRS [0x07] = Local0
                                DCRS [0x0E] = Local0
                                DCRS [0x0F] = Local0
                                Local0 = (0x01 << INTR) /* \_SB_.PCI0.LPCB.SIO_.INTR */
                                DCRS [0x11] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x12] = Local1
                            }
                            Else
                            {
                                DCRS [0x02] = 0x00
                                DCRS [0x0A] = 0x00
                                DCRS [0x04] = 0x00
                                DCRS [0x0C] = 0x00
                                DCRS [0x03] = 0x00
                                DCRS [0x05] = 0x00
                                DCRS [0x0B] = 0x00
                                DCRS [0x0D] = 0x00
                                DCRS [0x11] = 0x00
                                DCRS [0x12] = 0x00
                            }

                            EXFG ()
                            Return (DCRS) /* \_SB_.PCI0.LPCB.SIO_.LPTB._CRS.DCRS */
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, ADRL)
                            CreateByteField (Arg0, 0x03, ADRM)
                            CreateWordField (Arg0, 0x11, IRQM)
                            FindSetRightBit (IRQM, Local0)
                            Local0--
                            \_SB.PCI0.LPCB.LPLE = 0x00
                            If ((ADRM == 0x03))
                            {
                                If ((ADRL == 0xBC))
                                {
                                    LPDR = 0x02
                                }
                                Else
                                {
                                    LPDR = 0x00
                                }
                            }
                            Else
                            {
                                LPDR = 0x01
                            }

                            \_SB.PCI0.LPCB.LPLE = 0x01
                            ENFG (0x01)
                            INTR = Local0
                            IOAH = ADRM /* \_SB_.PCI0.LPCB.SIO_.LPTB._SRS.ADRM */
                            IOAL = ADRL /* \_SB_.PCI0.LPCB.SIO_.LPTB._SRS.ADRL */
                            ACTR = 0x01
                            EXFG ()
                        }
                    }

                    Device (LPT)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local2 = LPTE /* \_SB_.PCI0.LPCB.SIO_.LPTE */
                            Local3 = ACTR /* \_SB_.PCI0.LPCB.SIO_.ACTR */
                            EXFG ()
                            Local0 >>= 0x05
                            If (((Local2 == 0x00) && (Local0 == 0x00)))
                            {
                                If (\_SB.DOCK)
                                {
                                    Local1 = (Local3 << 0x01)
                                    Local1 += 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            ENFG (0x01)
                            Local0 = OPT1 /* \_SB_.PCI0.LPCB.SIO_.OPT1 */
                            Local0 >>= 0x05
                            If (((LPTE == 0x00) && (Local0 == 0x00)))
                            {
                                If (ACTR)
                                {
                                    ACTR = 0x00
                                    INTR = 0x00
                                    IOAH = 0x00
                                    IOAL = 0x00
                                }

                                \_SB.PCI0.LPCB.LPLE = 0x00
                            }

                            EXFG ()
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            EndDependentFn ()
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (DCRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            })
                            ENFG (0x01)
                            If (ACTR)
                            {
                                Local1 = IOAH /* \_SB_.PCI0.LPCB.SIO_.IOAH */
                                Local0 = IOAL /* \_SB_.PCI0.LPCB.SIO_.IOAL */
                                DCRS [0x02] = Local0
                                DCRS [0x0A] = Local0
                                DCRS [0x04] = Local0
                                DCRS [0x0C] = Local0
                                DCRS [0x03] = Local1
                                DCRS [0x05] = Local1
                                Local1 += 0x04
                                DCRS [0x0B] = Local1
                                DCRS [0x0D] = Local1
                                If ((Local0 & 0x04))
                                {
                                    Local0 = 0x04
                                }
                                Else
                                {
                                    Local0 = 0x08
                                }

                                DCRS [0x06] = Local0
                                DCRS [0x07] = Local0
                                DCRS [0x0E] = Local0
                                DCRS [0x0F] = Local0
                                Local0 = (0x01 << INTR) /* \_SB_.PCI0.LPCB.SIO_.INTR */
                                DCRS [0x11] = Local0
                                Local1 = (Local0 >> 0x08)
                                DCRS [0x12] = Local1
                            }
                            Else
                            {
                                DCRS [0x02] = 0x00
                                DCRS [0x0A] = 0x00
                                DCRS [0x04] = 0x00
                                DCRS [0x0C] = 0x00
                                DCRS [0x03] = 0x00
                                DCRS [0x05] = 0x00
                                DCRS [0x0B] = 0x00
                                DCRS [0x0D] = 0x00
                                DCRS [0x11] = 0x00
                                DCRS [0x12] = 0x00
                            }

                            EXFG ()
                            Return (DCRS) /* \_SB_.PCI0.LPCB.SIO_.LPT_._CRS.DCRS */
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, ADRL)
                            CreateByteField (Arg0, 0x03, ADRM)
                            CreateWordField (Arg0, 0x11, IRQM)
                            FindSetRightBit (IRQM, Local0)
                            Local0--
                            \_SB.PCI0.LPCB.LPLE = 0x00
                            If ((ADRM == 0x03))
                            {
                                If ((ADRL == 0xBC))
                                {
                                    LPDR = 0x02
                                }
                                Else
                                {
                                    LPDR = 0x00
                                }
                            }
                            Else
                            {
                                LPDR = 0x01
                            }

                            \_SB.PCI0.LPCB.LPLE = 0x01
                            ENFG (0x01)
                            INTR = Local0
                            IOAH = ADRM /* \_SB_.PCI0.LPCB.SIO_.LPT_._SRS.ADRM */
                            IOAL = ADRL /* \_SB_.PCI0.LPCB.SIO_.LPT_._SRS.ADRL */
                            ACTR = 0x01
                            EXFG ()
                        }
                    }
                }
            }

            Device (PATA)
            {
                Name (_ADR, 0x001F0001)  // _ADR: Address
                OperationRegion (PACS, PCI_Config, 0x40, 0xC0)
                Field (PACS, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    Offset (0x04), 
                    PSIT,   4, 
                    Offset (0x08), 
                    SYNC,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (Buffer (0x14)
                        {
                            /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // x.......
                            /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // x.......
                            /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                        })
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0xC0F0
                            SYNC &= 0x02
                            SDT0 = 0x00
                            ICR0 &= 0x02
                            ICR1 &= 0x02
                            ICR3 &= 0x02
                            ICR5 &= 0x02
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SYNC |= 0x01
                                SDT0 = SDMA (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x01
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x01
                                }

                                If ((W930 & 0x2000))
                                {
                                    ICR1 |= 0x01
                                }
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0xBF0F
                            PSIT = 0x00
                            SYNC &= 0x01
                            SDT1 = 0x00
                            ICR0 &= 0x01
                            ICR1 &= 0x01
                            ICR3 &= 0x01
                            ICR5 &= 0x01
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SYNC |= 0x02
                                SDT1 = SDMA (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }

                                If ((W931 & 0x2000))
                                {
                                    ICR1 |= 0x02
                                }
                            }
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (PIB0, 0x01, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SYNC & 0x01))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR1 & 0x01))
                                {
                                    If ((ICR0 & 0x01))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x01))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.PATA.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (PIB1, 0x01, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SYNC & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR1 & 0x02))
                                {
                                    If ((ICR0 & 0x02))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x02))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.PATA.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (SACS, PCI_Config, 0x40, 0xC0)
                Field (SACS, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SYNC,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4, 
                    Offset (0x50), 
                    MAPV,   2, 
                    Offset (0x52), 
                        ,   2, 
                    P2E,    1, 
                    P3E,    1, 
                        ,   2, 
                    P2P,    1, 
                    P3P,    1
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (Buffer (0x14)
                        {
                            /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // x.......
                            /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // x.......
                            /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                        })
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0xC0F0
                            SYNC &= 0x0E
                            SDT0 = 0x00
                            ICR0 &= 0x0E
                            ICR1 &= 0x0E
                            ICR3 &= 0x0E
                            ICR5 &= 0x0E
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SYNC |= 0x01
                                SDT0 = SDMA (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x01
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x01
                                }

                                ICR1 |= 0x01
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0xBF0F
                            PSIT = 0x00
                            SYNC &= 0x0D
                            SDT1 = 0x00
                            ICR0 &= 0x0D
                            ICR1 &= 0x0D
                            ICR3 &= 0x0D
                            ICR5 &= 0x0D
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SYNC |= 0x02
                                SDT1 = SDMA (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }

                                ICR1 |= 0x02
                            }
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (PIB0, 0x01, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SYNC & 0x01))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR1 & 0x01))
                                {
                                    If ((ICR0 & 0x01))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x01))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.SATA.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (PBAY)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (PIB1, 0x01, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SYNC & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR1 & 0x02))
                                {
                                    If ((ICR0 & 0x02))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x02))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.SATA.PRID.PBAY._GTF.PIB1 */
                        }
                    }
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMBI, SystemIO, 0x18C0, 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (SSXB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRXB, 1, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCON = 0x44
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRW, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = (Arg2 & 0xFF)
                    DAT1 = ((Arg2 >> 0x08) & 0xFF)
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDW, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (SBLW, 4, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = Arg3
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = SizeOf (Arg2)
                    Local1 = 0x00
                    HBDR = DerefOf (Arg2 [0x00])
                    HCON = 0x54
                    While ((SizeOf (Arg2) > Local1))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (0x00)
                        }

                        HSTS = 0x80
                        Local1++
                        If ((SizeOf (Arg2) > Local1))
                        {
                            HBDR = DerefOf (Arg2 [Local1])
                        }
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SBLR, 3, Serialized)
                {
                    Name (TBUF, Buffer (0x0100) {})
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = Arg2
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x54
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (0x00)
                    }

                    TBUF [0x00] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                    HSTS = 0x80
                    Local1 = 0x01
                    While ((Local1 < DerefOf (TBUF [0x00])))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (0x00)
                        }

                        TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                        HSTS = 0x80
                        Local1++
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                    }

                    Return (0x00)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (0x01)
                            If ((Local0 == 0x00))
                            {
                                Return (0x01)
                            }
                        }
                        Else
                        {
                            Local0 = 0x00
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x01))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Return (0x01)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (0x00)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }
            }
        }

        OperationRegion (SMI0, SystemIO, 0x0000FE00, 0x00000002)
        Field (SMI0, AnyAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        OperationRegion (SMI1, SystemMemory, 0x1F69CE2D, 0x00000120)
        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            BCMD,   8, 
            DID,    32, 
            INF,    8
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            Offset (0x50), 
            BLK0,   64, 
            BLK1,   64, 
            BLK2,   64, 
            BLK3,   64, 
            BLK4,   64, 
            Offset (0x110), 
            BTEN,   1, 
            WLAN,   1, 
            DOCK,   1, 
            IDEC,   1, 
            TPMS,   1
        }

        Mutex (PSMX, 0x00)
        Method (PHSR, 2, NotSerialized)
        {
            Acquire (\_SB.PSMX, 0xFFFF)
            BCMD = 0x90
            DID = Arg0
            INF = Arg1
            SMIC = Zero
            Local0 = INF /* \_SB_.INF_ */
            Release (\_SB.PSMX)
            Return (Local0)
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Name (ACST, 0x00)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (\_SB.ECOK)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ACST = \_SB.PCI0.LPCB.EC0.ACDF
                    Release (\_SB.PCI0.LPCB.EC0.MUT1)
                }
                Else
                {
                    ACST = 0x01
                }

                If (ACST)
                {
                    Local0 = 0x01
                    \_SB.BAT1.BCRI = 0x00
                }
                Else
                {
                    Local0 = 0x00
                }

                If ((OSYS == 0x07D0))
                {
                    If (ACST)
                    {
                        \_SB.PHSR (0x10, 0x01)
                    }
                    Else
                    {
                        \_SB.PHSR (0x10, 0x00)
                    }
                }

                Return (Local0)
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (CBTI, 0x00)
            Name (PBTI, 0x00)
            Name (BTIN, 0x00)
            Name (BTCH, 0x00)
            Name (BIFI, 0x00)
            Name (SEL0, 0x00)
            Name (BCRI, 0x00)
            Name (PBIF, Package (0x0D)
            {
                0x01, 
                0x1130, 
                0x1130, 
                0x01, 
                0x2B5C, 
                0x012C, 
                0x84, 
                0x20, 
                0x20, 
                "BAT1      ", 
                "11        ", 
                "11        ", 
                "11        "
            })
            Name (PBST, Package (0x04)
            {
                0x00, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x2710
            })
            Name (ERRC, 0x00)
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BTIN)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If ((BIFI == 0x00))
                {
                    \_SB.BAT1.UBIF ()
                    BIFI = 0x01
                }

                Return (PBIF) /* \_SB_.BAT1.PBIF */
            }

            Name (LFCC, 0x1130)
            Method (UBIF, 0, NotSerialized)
            {
                If (\_SB.ECOK)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = \_SB.PCI0.LPCB.EC0.BTDC
                    Local1 = \_SB.PCI0.LPCB.EC0.LFCC
                    Local2 = \_SB.PCI0.LPCB.EC0.BTDV
                    Local3 = \_SB.PCI0.LPCB.EC0.BTMD
                    Local4 = \_SB.PCI0.LPCB.EC0.BTMN
                    Local5 = \_SB.PCI0.LPCB.EC0.BTSN
                    Local6 = \_SB.PCI0.LPCB.EC0.LION
                    Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    PBIF [0x01] = Local0
                    PBIF [0x02] = Local1
                    PBIF [0x04] = Local2
                    LFCC = Local1
                    Local7 = (Local1 * 0x04)
                    Local7 /= 0x64
                    PBIF [0x06] = Local7
                    If (Local6)
                    {
                        PBIF [0x0B] = "NiMH"
                    }
                    Else
                    {
                        PBIF [0x0B] = "LION"
                    }

                    Local3 &= 0x0F
                    PBIF [0x09] = "PRESPAL"
                    If ((Local3 == 0x01))
                    {
                        PBIF [0x09] = "PRESP41"
                    }

                    If ((Local3 == 0x02))
                    {
                        PBIF [0x09] = "EFL50-09"
                    }

                    If ((Local3 == 0x03))
                    {
                        PBIF [0x09] = "PRESP31"
                    }

                    If ((Local3 == 0x04))
                    {
                        PBIF [0x09] = "PRESP32"
                    }

                    If ((Local3 == 0x05))
                    {
                        PBIF [0x09] = "PRESP33"
                    }

                    If ((Local3 == 0x06))
                    {
                        PBIF [0x09] = "PRESP43"
                    }

                    If ((Local3 == 0x07))
                    {
                        PBIF [0x09] = "PRESP42"
                    }

                    If ((Local3 == 0x08))
                    {
                        PBIF [0x09] = "PRESP51"
                    }

                    If ((Local3 == 0x09))
                    {
                        PBIF [0x09] = "PRESP52"
                    }

                    If ((Local4 == 0x08))
                    {
                        PBIF [0x0C] = "MOTOROLA"
                    }
                    ElseIf ((Local4 == 0x06))
                    {
                        PBIF [0x0C] = "SIMPLO"
                    }
                    ElseIf (((Local4 == 0x03) || (Local4 == 0x05)))
                    {
                        PBIF [0x0C] = "SANYO"
                    }
                    ElseIf ((Local4 == 0x04))
                    {
                        PBIF [0x0C] = "SONY"
                    }
                    ElseIf ((Local4 == 0x09))
                    {
                        PBIF [0x0C] = "PANASONIC"
                    }
                    Else
                    {
                        PBIF [0x0C] = "UNKNOWN"
                    }

                    PBIF [0x0A] = ITOS (ToBCD (Local5))
                }
            }

            Name (RCAP, 0x00)
            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If ((BTIN == 0x00))
                {
                    PBST [0x00] = 0x00
                    PBST [0x01] = 0xFFFFFFFF
                    PBST [0x02] = 0xFFFFFFFF
                    PBST [0x03] = 0xFFFFFFFF
                    Return (PBST) /* \_SB_.BAT1.PBST */
                }

                If (\_SB.ECOK)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = \_SB.PCI0.LPCB.EC0.MBTC
                    Local1 = \_SB.PCI0.LPCB.EC0.MBRM
                    Local2 = \_SB.PCI0.LPCB.EC0.MBVG
                    Local3 = \_SB.PCI0.LPCB.EC0.MCUR
                    Local4 = \_SB.PCI0.LPCB.EC0.BTST
                    Local5 = \_SB.PCI0.LPCB.EC0.MBTF
                    Local6 = \_SB.PCI0.LPCB.EC0.ACDF
                    Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    If (Local6)
                    {
                        If ((Local5 == 0x01))
                        {
                            Local7 = 0x00
                            Local1 = LFCC /* \_SB_.BAT1.LFCC */
                        }
                        ElseIf ((Local0 == 0x01))
                        {
                            Local7 = 0x02
                        }
                        Else
                        {
                            Local7 = 0x00
                        }
                    }
                    ElseIf ((Local4 && 0x01))
                    {
                        Local7 = 0x01
                    }
                    Else
                    {
                        Local7 = 0x00
                    }

                    Local4 &= 0x04
                    If ((Local4 == 0x04))
                    {
                        Local7 |= Local4
                    }

                    PBST [0x00] = Local7
                    If (!(Local1 & 0x8000))
                    {
                        PBST [0x02] = Local1
                    }

                    If (!(Local2 & 0x8000))
                    {
                        PBST [0x03] = Local2
                    }

                    If ((Local3 && 0x8000))
                    {
                        If ((Local3 != 0xFFFF))
                        {
                            Local3 = ~Local3
                            Local3++
                            Local3 &= 0xFFFF
                        }
                    }

                    PBST [0x01] = Local3
                }

                Return (PBST) /* \_SB_.BAT1.PBST */
            }

            Method (Z003, 0, NotSerialized)
            {
                If (\_SB.ECOK)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = \_SB.PCI0.LPCB.EC0.MBTS
                    Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    If ((Local0 == 0x01))
                    {
                        If ((\_SB.BAT1.BTIN == 0x00))
                        {
                            \_SB.BAT1.BTCH = 0x01
                            \_SB.BAT1.BIFI = 0x00
                        }

                        \_SB.BAT1.BTIN = 0x01
                    }
                    Else
                    {
                        If ((\_SB.BAT1.BTIN == 0x01))
                        {
                            \_SB.BAT1.BTCH = 0x01
                            \_SB.BAT1.BIFI = 0x00
                        }

                        \_SB.BAT1.BTIN = 0x00
                    }
                }
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LIDS = 0x01
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                LIDS = 0x01
                If (LIDS)
                {
                    If (LIDP)
                    {
                        Local0 = 0x00
                    }
                    Else
                    {
                        Local0 = 0x01
                    }

                    LIDP ^= 0x01
                }
                Else
                {
                    Local0 = LIDP /* \LIDP */
                }

                Return (Local0)
            }

            Scope (\_GPE)
            {
                Method (_L1E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                {
                    Notify (\_SB.LID, 0x80) // Status Change
                }
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Scope (\_TZ)
        {
            ThermalZone (THRM)
            {
                Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.CTMP
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                        Return (((Local0 * 0x0A) + 0x0AAC))
                    }
                    Else
                    {
                        Return (0x0C3C)
                    }
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (((0x63 * 0x0A) + 0x0AAC))
                }

                Name (_PSL, Package (0x01)  // _PSL: Passive List
                {
                    \_PR.CPU0
                })
                Name (_TSP, 0x28)  // _TSP: Thermal Sampling Period
                Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
                Name (_TC2, 0x03)  // _TC2: Thermal Constant 2
                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (((0x69 * 0x0A) + 0x0AAC))
                }
            }
        }

        Scope (\_SB)
        {
            Device (WMID)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, 0x00)  // _UID: Unique ID
                Name (WMIQ, 0x00)
                Name (ERRD, 0x00010000)
                Name (BUFF, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateByteField (BUFF, 0x00, BF00)
                CreateByteField (BUFF, 0x01, BF01)
                CreateByteField (BUFF, 0x02, BF02)
                CreateByteField (BUFF, 0x03, BF03)
                Name (AADS, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateField (AADS, 0x00, 0x04, AS00)
                CreateField (AADS, 0x04, 0x01, AS01)
                CreateField (AADS, 0x05, 0x01, AS02)
                CreateField (AADS, 0x10, 0x10, AS03)
                CreateField (AADS, 0x00, 0x10, AS04)
                Name (BAEF, 0x00)
                Name (BADF, 0x00)
                Name (BADG, Package (0x03)
                {
                    0x00010000, 
                    0x00010000, 
                    0x00010000
                })
                Name (BADS, Package (0x04)
                {
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01
                })
                Name (WLDS, 0x00)
                Name (WLED, 0x00)
                Name (BTDS, 0x00)
                Name (BTED, 0x00)
                Name (BLDS, 0x00)
                Name (BLED, 0x00)
                Name (NTDC, 0x00)
                Name (WLSD, 0x0100)
                Name (WLSE, 0x0101)
                Name (BLTD, 0x0200)
                Name (BLTE, 0x0201)
                Name (LBL0, 0x0300)
                Name (LBL1, 0x0301)
                Name (LBL2, 0x0302)
                Name (LBL3, 0x0303)
                Name (LBL4, 0x0304)
                Name (LBL5, 0x0305)
                Name (LBL6, 0x0306)
                Name (LBL7, 0x0307)
                Name (LBL8, 0x0308)
                Name (LBL9, 0x0309)
                Name (LBLA, 0x030A)
                Name (LBLB, 0x030B)
                Name (LBLC, 0x030C)
                Name (LBLD, 0x030D)
                Name (LBLE, 0x030E)
                Name (LBLF, 0x030F)
                Name (VAPO, 0x0600)
                Name (VAPI, 0x0601)
                Name (CADI, 0x0401)
                Name (CADO, 0x0400)
                Name (GSEE, 0x0501)
                Name (GSED, 0x0502)
                Name (BBSB, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateField (BBSB, 0x00, 0x10, BBD0)
                CreateField (BBSB, 0x10, 0x10, BBD1)
                Name (TLS0, 0x00)
                Name (TLS1, 0x01)
                Name (TLS2, 0x02)
                Name (TLS3, 0x03)
                Name (TLS4, 0x04)
                Name (TLS5, 0x05)
                Name (TLS6, 0x06)
                Name (TLS7, 0x07)
                Name (BBPD, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateByteField (BBPD, 0x00, BBP0)
                CreateByteField (BBPD, 0x04, BBP1)
                CreateByteField (BBPD, 0x08, BBP2)
                CreateByteField (BBPD, 0x0C, BBP3)
                CreateByteField (BBPD, 0x10, BBP4)
                Name (BBAR, Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CreateByteField (BBAR, 0x00, BBA0)
                CreateByteField (BBAR, 0x04, BBA1)
                Name (BCDS, Package (0x0D)
                {
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000
                })
                Name (BDDS, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateField (BDDS, 0x00, 0x10, BDD0)
                CreateField (BDDS, 0x10, 0x10, BDD1)
                Name (DSY0, Buffer (0x28)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (DSY1, Buffer (0x18)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (DSY2, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (DSY3, Buffer (0x18)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (DSY4, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (DSY5, Buffer (0x28)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CreateField (DSY0, 0x00, 0x40, DY00)
                CreateField (DSY0, 0x40, 0x40, DY01)
                CreateField (DSY0, 0x80, 0x40, DY02)
                CreateField (DSY0, 0xC0, 0x40, DY03)
                CreateField (DSY0, 0x0100, 0x40, DY04)
                CreateField (DSY1, 0x00, 0x40, DY10)
                CreateField (DSY1, 0x40, 0x40, DY11)
                CreateField (DSY1, 0x80, 0x40, DY12)
                CreateField (DSY2, 0x00, 0x40, DY20)
                CreateField (DSY2, 0x40, 0x10, DY21)
                CreateField (DSY2, 0x50, 0x10, DY22)
                CreateField (DSY0, 0x00, 0xC0, DSX4)
                Name (BEDS, Package (0x10)
                {
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000, 
                    0x00010000
                })
                Name (WIT0, 0x00)
                Name (DSY6, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateField (DSY6, 0x00, 0x20, DY60)
                CreateField (DSY6, 0x20, 0x20, DY61)
                CreateField (DSY6, 0x40, 0x20, DY62)
                CreateField (DSY6, 0x60, 0x20, DY63)
                CreateField (DSY6, 0x80, 0x20, DY64)
                Name (WPRW, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateField (WPRW, 0x00, 0x08, WWD0)
                CreateField (WPRW, 0x08, 0x08, WWD1)
                CreateField (WPRW, 0x10, 0x08, WWD2)
                CreateField (WPRW, 0x18, 0x08, WWD3)
                CreateField (WPRW, 0x20, 0x08, WWD4)
                CreateField (WPRW, 0x28, 0x20, WWD5)
                Name (WPCI, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateField (WPCI, 0x00, 0x08, WPIR)
                CreateField (WPCI, 0x08, 0x03, WPIF)
                CreateField (WPCI, 0x0B, 0x05, WPID)
                CreateField (WPCI, 0x10, 0x08, WPIB)
                Name (BFDS, Package (0x04)
                {
                    0x02, 
                    0x02, 
                    0x02, 
                    0x02
                })
                Name (GSTS, 0x00)
                Name (BFEF, 0x00)
                Name (BGEF, 0x00)
                Name (BGDS, Package (0x01)
                {
                    0x01
                })
                Method (PHSR, 2, NotSerialized)
                {
                    Acquire (\_SB.PSMX, 0xFFFF)
                    BCMD = 0x91
                    DID = Arg0
                    INF = Arg1
                    SMIC = Zero
                    Local0 = DID /* \_SB_.DID_ */
                    Release (\_SB.PSMX)
                    Return (Local0)
                }

                Method (AAF1, 0, NotSerialized)
                {
                    AS04 = \_SB.WMID.PHSR (0x00, 0x00)
                    AS03 = 0x00
                }

                Method (Z006, 1, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg0
                        If ((_T_0 == 0x01))
                        {
                            BUFF = \_SB.WMID.PHSR (0x01, 0x00)
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            BUFF = \_SB.WMID.PHSR (0x01, 0x01)
                        }
                        ElseIf ((_T_0 == 0x03))
                        {
                            BUFF = \_SB.WMID.PHSR (0x01, 0x02)
                        }
                        Else
                        {
                            BUFF = 0x01
                        }

                        Break
                    }
                }

                Method (Z007, 2, NotSerialized)
                {
                    BUFF = Arg1
                    If ((BF00 == 0x00))
                    {
                        Local0 = 0x00
                    }
                    Else
                    {
                        Local0 = 0x01
                    }

                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg0
                        If ((_T_0 == 0x04))
                        {
                            Local0 |= 0x10
                            BUFF = \_SB.WMID.PHSR (0x02, Local0)
                        }
                        ElseIf ((_T_0 == 0x05))
                        {
                            Local0 |= 0x20
                            BUFF = \_SB.WMID.PHSR (0x02, Local0)
                        }
                        ElseIf ((_T_0 == 0x06))
                        {
                            Local0 = (BF00 | 0x40)
                            BUFF = \_SB.WMID.PHSR (0x02, Local0)
                        }
                        Else
                        {
                            BUFF = 0x01
                        }

                        Break
                    }
                }

                Method (Z008, 0, NotSerialized)
                {
                    Local0 = \_SB.WMID.WMIQ
                    \_SB.WMID.WMIQ = 0x00
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Local0
                        If ((_T_0 == 0x01))
                        {
                            Return (WLSE) /* \_SB_.WMID.WLSE */
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Return (WLSD) /* \_SB_.WMID.WLSD */
                        }
                        ElseIf ((_T_0 == 0x03))
                        {
                            Return (BLTE) /* \_SB_.WMID.BLTE */
                        }
                        ElseIf ((_T_0 == 0x04))
                        {
                            Return (BLTD) /* \_SB_.WMID.BLTD */
                        }
                        ElseIf ((_T_0 == 0x05))
                        {
                            P80H = 0x85
                            Local1 = \_SB.WMID.PHSR (0x01, 0x02)
                            Local1 &= 0x0F
                            LBL0 &= 0x0F00
                            LBL0 |= Local1 /* \_SB_.WMID.LBL0 */
                            P80H = LBL0 /* \_SB_.WMID.LBL0 */
                            Return (LBL0) /* \_SB_.WMID.LBL0 */
                        }
                        ElseIf ((_T_0 == 0x06))
                        {
                            BUFF = 0x0501
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x07))
                        {
                            BUFF = 0x0502
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x08))
                        {
                            Return (VAPO) /* \_SB_.WMID.VAPO */
                        }
                        ElseIf ((_T_0 == 0x09))
                        {
                            Return (VAPI) /* \_SB_.WMID.VAPI */
                        }
                        ElseIf ((_T_0 == 0x0A))
                        {
                            BUFF = 0x0501
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        Else
                        {
                            Return (0xFFFF)
                        }

                        Break
                    }
                }

                Method (Z009, 2, NotSerialized)
                {
                    BUFF = Arg1
                    Local0 = (BF00 & 0x0F)
                    If ((Arg0 == 0x02))
                    {
                        Local0 <<= 0x01
                        Local0 |= 0x10
                    }

                    BBSB = \_SB.WMID.PHSR (0x03, Local0)
                }

                Method (Z00A, 1, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x10, Arg0)
                    BBP0 = BF00 /* \_SB_.WMID.BF00 */
                    BBP1 = BF01 /* \_SB_.WMID.BF01 */
                    BBP2 = BF02 /* \_SB_.WMID.BF02 */
                    BBP3 = (BF03 & 0x0F)
                    BBP4 = ((BF03 & 0xF0) >> 0x04)
                }

                Method (Z00B, 2, NotSerialized)
                {
                }

                Method (Z00C, 1, NotSerialized)
                {
                    \_SB.WMID.PHSR (0x04, Arg0)
                    DY00 = BLK0 /* \_SB_.BLK0 */
                    DY01 = BLK1 /* \_SB_.BLK1 */
                    DY02 = BLK2 /* \_SB_.BLK2 */
                    DY03 = BLK3 /* \_SB_.BLK3 */
                    DY04 = 0x00
                }

                Method (Z00D, 1, NotSerialized)
                {
                    BLK0 = DY10 /* \_SB_.WMID.DY10 */
                    If ((Arg0 == 0x03))
                    {
                        BLK1 = DY11 /* \_SB_.WMID.DY11 */
                        BLK2 = DY12 /* \_SB_.WMID.DY12 */
                    }

                    Local0 = \_SB.WMID.PHSR (0x05, Arg0)
                    DY10 = BLK0 /* \_SB_.BLK0 */
                    DY11 = BLK1 /* \_SB_.BLK1 */
                    If (Local0)
                    {
                        DY12 = 0x01
                    }
                    Else
                    {
                        DY12 = 0x00
                    }
                }

                Method (Z00E, 1, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x06, Arg0)
                }

                Method (Z00F, 0, NotSerialized)
                {
                }

                Method (Z00G, 2, NotSerialized)
                {
                    DSY2 = DSY4 /* \_SB_.WMID.DSY4 */
                    DY22 = 0x01
                    If ((Arg0 == 0x08)) {}
                    Else
                    {
                    }
                }

                Method (Z00H, 0, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x07, 0x00)
                }

                Method (Z00I, 1, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg0
                        If ((_T_0 == 0x01))
                        {
                            Local0 = \_SB.BAT1._STA ()
                            If ((Local0 & 0x10))
                            {
                                BUFF = 0x00
                            }
                            Else
                            {
                                BUFF = 0x00020000
                            }
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            BUFF = 0x00010000
                        }
                        Else
                        {
                            BUFF = 0x00010000
                        }

                        Break
                    }
                }

                Method (Z00J, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.MTMP
                        Local1 = \_SB.PCI0.LPCB.EC0.ATMP
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x1388
                        Local1 = 0x1388
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00L, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.MCUR
                        Local1 = \_SB.PCI0.LPCB.EC0.ABCR
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00M, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.MBVG
                        Local1 = \_SB.PCI0.LPCB.EC0.ABVG
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00N, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.MBRM
                        Local1 = \_SB.PCI0.LPCB.EC0.ABRM
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00O, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.LFCC
                        Local1 = \_SB.PCI0.LPCB.EC0.AFCC
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00P, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.MCYC
                        Local1 = \_SB.PCI0.LPCB.EC0.ACYC
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00Q, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.BTDC
                        Local1 = \_SB.PCI0.LPCB.EC0.ABDC
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00R, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.BTDV
                        Local1 = \_SB.PCI0.LPCB.EC0.ABDV
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00S, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.MDAT
                        Local1 = \_SB.PCI0.LPCB.EC0.ADAT
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00T, 1, NotSerialized)
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.BTSN
                        Local1 = \_SB.PCI0.LPCB.EC0.ABSN
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                    }

                    Z00K (Arg0, Local0, Local1)
                }

                Method (Z00K, 3, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg0
                        If ((_T_0 == 0x01))
                        {
                            Local2 = \_SB.BAT1._STA ()
                            If ((Local2 & 0x10))
                            {
                                Local3 = Arg1
                            }
                            Else
                            {
                                Local3 = 0xFFFF
                            }
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Local2 = \_SB.BAT1._STA ()
                            If ((Local2 & 0x10))
                            {
                                Local3 = Arg2
                            }
                            Else
                            {
                                Local3 = 0xFFFF
                            }
                        }
                        Else
                        {
                            Local3 = Arg1
                        }

                        Break
                    }

                    If ((Local3 == 0xFFFF))
                    {
                        BUFF = 0x00020000
                    }
                    Else
                    {
                        BEDS [0x01] = Local3
                        BUFF = DerefOf (BEDS [0x01])
                    }
                }

                Method (Z00U, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x01)
                    If ((Local0 <= 0x01))
                    {
                        BUFF = \_SB.WMID.PHSR (0x08, Arg0)
                    }
                    Else
                    {
                        BUFF = 0x02
                    }
                }

                Method (Z00V, 1, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x09, Arg0)
                }

                Method (Z00W, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x01)
                    If ((Local0 <= 0x01))
                    {
                        BUFF = \_SB.WMID.PHSR (0x0A, Arg0)
                    }
                    Else
                    {
                        BUFF = 0x02
                    }
                }

                Method (Z00X, 1, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x0B, Arg0)
                }

                Method (Z00Y, 1, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Local0 == 0x01))
                    {
                        \_SB.WMID.PHSR (0x0D, Local0)
                    }

                    BUFF = 0x00
                }

                Method (Z00Z, 1, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x0E, Arg0)
                }

                Method (Z010, 0, NotSerialized)
                {
                    BUFF = \_SB.WMID.PHSR (0x0F, 0x00)
                }

                Name (_WDG, Buffer (0xDC)
                {
                    /* 0000 */  0x09, 0x4E, 0x76, 0x95, 0x56, 0xFB, 0x83, 0x4E,  // .Nv.V..N
                    /* 0008 */  0xB3, 0x1A, 0x37, 0x76, 0x1F, 0x60, 0x99, 0x4A,  // ..7v.`.J
                    /* 0010 */  0x41, 0x41, 0x01, 0x01, 0x58, 0xF2, 0xF4, 0x6A,  // AA..X..j
                    /* 0018 */  0x01, 0xB4, 0xFD, 0x42, 0xBE, 0x91, 0x3D, 0x4A,  // ...B..=J
                    /* 0020 */  0xC2, 0xD7, 0xC0, 0xD3, 0x42, 0x41, 0x01, 0x02,  // ....BA..
                    /* 0028 */  0xAC, 0x61, 0x1A, 0xCC, 0x56, 0x42, 0xA3, 0x41,  // .a..VB.A
                    /* 0030 */  0xB9, 0xE0, 0x05, 0xA4, 0x45, 0xAD, 0xE2, 0xF5,  // ....E...
                    /* 0038 */  0x80, 0x00, 0x01, 0x08, 0x53, 0x44, 0x8C, 0xE7,  // ....SD..
                    /* 0040 */  0x27, 0x02, 0x61, 0x48, 0x9E, 0xDE, 0xF5, 0x60,  // '.aH...`
                    /* 0048 */  0x0B, 0x4A, 0x3D, 0x39, 0x42, 0x42, 0x01, 0x02,  // .J=9BB..
                    /* 0050 */  0x7B, 0x4F, 0xE0, 0xAA, 0xC5, 0xB3, 0x65, 0x48,  // {O....eH
                    /* 0058 */  0x95, 0xD6, 0x9F, 0xAC, 0x7F, 0xF3, 0xE9, 0x2B,  // .......+
                    /* 0060 */  0x42, 0x43, 0x01, 0x02, 0x79, 0x4C, 0xF9, 0xCF,  // BC..yL..
                    /* 0068 */  0x77, 0x6C, 0xF7, 0x4A, 0xAC, 0x56, 0x7D, 0xD0,  // wl.J.V}.
                    /* 0070 */  0xCE, 0x01, 0xC9, 0x97, 0x42, 0x44, 0x01, 0x02,  // ....BD..
                    /* 0078 */  0xC5, 0x2E, 0x77, 0x79, 0xB1, 0x04, 0xFD, 0x4B,  // ..wy...K
                    /* 0080 */  0x84, 0x3C, 0x61, 0xE7, 0xF7, 0x7B, 0x6C, 0xC9,  // .<a..{l.
                    /* 0088 */  0x42, 0x45, 0x01, 0x02, 0xB7, 0xA0, 0xC9, 0xA7,  // BE......
                    /* 0090 */  0x9D, 0x4C, 0x72, 0x4C, 0x83, 0xBB, 0x53, 0xA3,  // .LrL..S.
                    /* 0098 */  0x45, 0x91, 0x71, 0xDF, 0x42, 0x46, 0x01, 0x02,  // E.q.BF..
                    /* 00A0 */  0x4F, 0x06, 0x3A, 0x65, 0x3A, 0xA2, 0x5F, 0x48,  // O.:e:._H
                    /* 00A8 */  0xB3, 0xD9, 0x13, 0xF6, 0x53, 0x2A, 0x01, 0x82,  // ....S*..
                    /* 00B0 */  0x42, 0x47, 0x01, 0x02, 0xA7, 0xB1, 0x85, 0xDB,  // BG......
                    /* 00B8 */  0x9A, 0x06, 0xBB, 0x4A, 0xA2, 0xB5, 0xD1, 0x86,  // ...J....
                    /* 00C0 */  0xA2, 0x1B, 0x80, 0xF1, 0x81, 0x00, 0x01, 0x08,  // ........
                    /* 00C8 */  0x91, 0x6B, 0x91, 0x36, 0x64, 0x1A, 0x83, 0x45,  // .k.6d..E
                    /* 00D0 */  0x84, 0xD0, 0x53, 0x83, 0x0F, 0xB9, 0x10, 0x8D,  // ..S.....
                    /* 00D8 */  0x82, 0x00, 0x01, 0x08                           // ....
                })
                Method (WQAA, 1, NotSerialized)
                {
                    AAF1 ()
                    BUFF = AADS /* \_SB_.WMID.AADS */
                    Return (BUFF) /* \_SB_.WMID.BUFF */
                }

                Method (WMBA, 3, NotSerialized)
                {
                    If ((Arg1 < 0x04))
                    {
                        Z006 (Arg1)
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        BUFF = Arg2
                        If (BF00)
                        {
                            BAEF = 0x01
                        }
                        Else
                        {
                            BAEF = 0x00
                        }

                        BUFF = 0x00
                    }
                    Else
                    {
                        Z007 (Arg1, Arg2)
                    }

                    Return (BUFF) /* \_SB_.WMID.BUFF */
                }

                Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                {
                    If ((Arg0 == 0x81))
                    {
                        Return (Z008 ())
                    }
                    ElseIf ((BAEF == 0x01))
                    {
                        If (((Arg0 == 0x80) || (Arg0 == 0x82)))
                        {
                            Return (Z008 ())
                        }
                    }

                    Return (0xFFFF)
                }

                Method (WMBB, 3, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg1
                        If ((Match (Package (0x02)
                                        {
                                            0x01, 
                                            0x02
                                        }, MEQ, _T_0, MTR, 0x00, 0x00) != Ones))
                        {
                            Z009 (Arg1, Arg2)
                            BUFF = BBSB /* \_SB_.WMID.BBSB */
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        Else
                        {
                            BUFF = 0x1000
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }

                        Break
                    }
                }

                Method (WMBC, 3, NotSerialized)
                {
                    Z00B (Arg1, Arg2)
                    If ((Arg1 < 0x0A))
                    {
                        Local0 = (Arg1 - 0x01)
                        BUFF = DerefOf (BCDS [(Arg1 - 0x01)])
                    }
                    Else
                    {
                        BUFF = (DerefOf (BCDS [(Arg1 - 0x0A)]) >> 0x10)
                    }

                    Return (BUFF) /* \_SB_.WMID.BUFF */
                }

                Method (WMBD, 3, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg1
                        If ((_T_0 == 0x01))
                        {
                            BUFF = Arg2
                            Z00C (BF00)
                            Return (DSY0) /* \_SB_.WMID.DSY0 */
                        }
                        ElseIf ((Match (Package (0x02)
                                        {
                                            0x02, 
                                            0x03
                                        }, MEQ, _T_0, MTR, 0x00, 0x00) != Ones))
                        {
                            If ((Arg1 == 0x02))
                            {
                                DY10 = Arg2
                            }
                            Else
                            {
                                DSY1 = Arg2
                            }

                            Z00D (Arg1)
                            Return (DSY1) /* \_SB_.WMID.DSY1 */
                        }
                        ElseIf ((Match (Package (0x02)
                                        {
                                            0x04, 
                                            0x05
                                        }, MEQ, _T_0, MTR, 0x00, 0x00) != Ones))
                        {
                            Local0 = Arg1
                            If ((Local0 == 0x04))
                            {
                                BUFF = Arg2
                                If ((BF00 == 0x01))
                                {
                                    Local0 |= 0x10
                                }
                            }

                            Z00E (Local0)
                            If ((BF01 != 0x00))
                            {
                                If ((Arg1 == 0x04))
                                {
                                    BUFF = 0x01
                                }
                            }

                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x07))
                        {
                            Local0 = \_TZ.THRM._TMP ()
                            Local0 /= 0x0A
                            BCDS [0x0B] = Local0
                            BUFF = DerefOf (BCDS [0x0B])
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x0A))
                        {
                            Z00H ()
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x0B))
                        {
                            BBAR = Arg2
                            Local1 = ((BBA1 & 0x0F) << 0x04)
                            Local1 |= (BBA0 & 0x0F)
                            P80H = Local1
                            Z00A (Local1)
                            Return (BBPD) /* \_SB_.WMID.BBPD */
                        }
                        Else
                        {
                        }

                        Break
                    }
                }

                Method (WMBE, 3, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg1
                        If ((_T_0 == 0x01))
                        {
                            Z00I (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Z00J (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x03))
                        {
                            Z00M (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x04))
                        {
                            Z00L (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x05))
                        {
                            Z00N (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x06))
                        {
                            Z00O (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x07))
                        {
                            Z00P (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x08))
                        {
                            Z00Q (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x09))
                        {
                            Z00R (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x0A))
                        {
                            Z00S (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x0B))
                        {
                            Z00T (Arg2)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x11))
                        {
                            BUFF = \_SB.WMID.PHSR (0x0C, 0x00)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        ElseIf ((_T_0 == 0x12))
                        {
                            BUFF = \_SB.WMID.PHSR (0x0C, 0x01)
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }
                        Else
                        {
                            BUFF = 0x00010000
                            Return (BUFF) /* \_SB_.WMID.BUFF */
                        }

                        Break
                    }
                }

                Method (WMBF, 3, NotSerialized)
                {
                    BUFF = Arg2
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg1
                        If ((_T_0 == 0x01))
                        {
                            Z00U (BF00)
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Z00V (BF00)
                        }
                        ElseIf ((_T_0 == 0x03))
                        {
                            Z00W (BF00)
                        }
                        ElseIf ((_T_0 == 0x05))
                        {
                            Z00Y (BF00)
                        }
                        Else
                        {
                            BF00 = 0x02
                        }

                        Break
                    }

                    BF01 = 0x00
                    BF02 = 0x00
                    BF03 = 0x00
                    Return (BUFF) /* \_SB_.WMID.BUFF */
                }

                Method (WMBG, 3, NotSerialized)
                {
                    While (One)
                    {
                        Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = Arg1
                        If ((_T_0 == 0x01))
                        {
                            BUFF = Arg2
                            Z00Z (BF00)
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Z010 ()
                        }
                        Else
                        {
                            BUFF = 0x00010000
                        }

                        Break
                    }

                    BF01 = 0x00
                    BF02 = 0x00
                    BF03 = 0x00
                    Return (BUFF) /* \_SB_.WMID.BUFF */
                }
            }
        }
    }

    Name (FWSO, "FWSO")
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "ALAN"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 FACS Address : 1F69CFC0
[028h 0040   4]                 DSDT Address : 1F692F86
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00001000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001020
[04Ch 0076   4]       PM Timer Block Address : 00001008
[050h 0080   4]           GPE0 Block Address : 00001028
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0001
[062h 0098   2]                   C3 Latency : 0023
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000002A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000001F69CFC0
[08Ch 0140   8]                 DSDT Address : 000000001F692F86
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000001000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000001004

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000001020

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000001008

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000001028

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 95 49 4E 54 45 4C 20  // FACP......INTEL 
    0010: 43 41 4C 49 53 54 47 41 00 00 04 06 41 4C 41 4E  // CALISTGA....ALAN
    0020: 01 00 00 00 C0 CF 69 1F 86 2F 69 1F 00 00 09 00  // ......i../i.....
    0030: B2 00 00 00 F0 F1 00 80 00 10 00 00 00 00 00 00  // ................
    0040: 04 10 00 00 00 00 00 00 20 10 00 00 08 10 00 00  // ........ .......
    0050: 28 10 00 00 00 00 00 00 04 02 01 04 08 00 00 85  // (...............
    0060: 01 00 23 00 00 00 00 00 01 03 0D 00 32 00 00 00  // ..#.........2...
    0070: A5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 C0 CF 69 1F 00 00 00 00 86 2F 69 1F  // ......i....../i.
    0090: 00 00 00 00 01 20 00 00 00 10 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 20 10 00 00 00 00 00 00  // ........ .......
    00D0: 01 20 00 00 08 10 00 00 00 00 00 00 01 40 00 00  // . ...........@..
    00E0: 28 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // (...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 22
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 22 49 4E 54 45 4C 20  // HPET8...."INTEL 
    0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
    0020: 5A 00 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // Z...............
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4A
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 4A 49 4E 54 45 4C 20  // MCFG<....JINTEL 
    0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
    0020: 5A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // Z...............
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 38
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "ACRPRDCT"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "acer"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    33 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    B0 F0 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    4C 4D 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    D0 F0 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    4D 4D 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    F0 F0 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    10 F1 E4 3A B3 55 00 00 04 00 00 00 00 00 00 00 \
    4D 44 53 54 00 00 00 00 21 00 00 00 00 00 00 00 \
    30 F1 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 44 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    50 F1 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 4B 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    70 F1 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    2B 30 35 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    90 F1 E4 3A B3 55 00 00 03 00 00 00 00 00 00 00 \
    45 45 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \
    45 45 53 54 00 00 00 00 41 09 00 00 00 00 00 00 \
    E0 AC BF 1F CE 7F 00 00 E0 AC BF 1F CE 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 38 41 43 52 53 59 53  // SLICv....8ACRSYS
    0010: 41 43 52 50 52 44 43 54 00 00 04 06 61 63 65 72  // ACRPRDCT....acer
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 1D A3 8F F3 A1 9D F1 F2 31 B4 B5 17 6C CE 4D 17  // ........1...l.M.
    0050: 64 6A F9 79 29 50 CE 0A B2 13 70 71 6E 28 AD DB  // dj.y)P....pqn(..
    0060: 55 1C A6 23 3E 0C 8A 4F 02 49 C9 DF 6D AB CB E7  // U..#>..O.I..m...
    0070: C0 2C 18 7D 43 5C 45 82 3D FC 32 B0 92 F8 C2 00  // .,.}C\E.=.2.....
    0080: 65 0D B9 A0 CD 16 EA 40 13 CE 9D 3B 39 ED 87 34  // e......@...;9..4
    0090: 98 C4 D9 C7 98 49 11 77 03 D4 A7 6A D6 3B 88 71  // .....I.w...j.;.q
    00A0: DB 1A D3 AA 56 42 2E AD 32 91 29 59 9D 4D 27 AD  // ....VB..2.)Y.M'.
    00B0: 95 DF 53 90 83 82 21 52 92 2F 9D 33 EF CB C3 AE  // ..S...!R./.3....
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 41 43 52 53  // ............ACRS
    00D0: 59 53 41 43 52 50 52 44 43 54 57 49 4E 44 4F 57  // YSACRPRDCTWINDOW
    00E0: 53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 A0 34 06 3A FD 7B 4C BA 3F 2D  // .......4.:.{L.?-
    0100: FB FF 1F F5 78 A8 DA 2E 38 D6 CA 84 DF A1 4C DB  // ....x...8.....L.
    0110: F6 33 22 90 0E BA 42 B9 A1 D1 43 10 54 79 F0 3D  // .3"...B...C.Ty.=
    0120: 22 41 86 F3 D9 1D 5D 29 59 92 95 CD E6 C0 E5 2F  // "A....])Y....../
    0130: 1D 32 C9 49 98 CB 30 F9 E8 E3 D9 0E 29 BB 3A AD  // .2.I..0.....).:.
    0140: CA 3D FC 1E 84 C4 25 A6 8E 52 8C 9D EB 70 2F 63  // .=....%..R...p/c
    0150: 53 34 97 6C 6E 19 59 26 E0 32 9F A5 22 B1 2E EF  // S4.ln.Y&.2.."...
    0160: 1B 45 E8 CC 8A E5 E3 01 97 B2 7B BF 56 F8 E9 B4  // .E........{.V...
    0170: CD 35 EC 01 63 18                                // .5..c.


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (PCP0, UnknownObj)
    External (PCP1, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU1IST ", 
            0x00000000, 
            0xF000FF53, 
            "CPU0CST ", 
            0x1F692AD0, 
            0x000004B6, 
            "CPU1CST ", 
            0x00000000, 
            0xF000FF53
        })
        Name (CFGD, 0x00190070)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            PCP0 = (PDC0 & 0xFF)
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            PCP1 = (PDC1 & 0xFF)
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x39, 
                            0x64
                        }
                    })
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x11, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001016, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x39, 
                            0x64
                        }
                    })
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001015, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x11, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x80))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001016, // Address
                                ,)
                        }, 

                        0x03, 
                        0x39, 
                        0x64
                    }
                })
            }

            If ((!(CFGD & 0x80) && (CFGD & 0x40)))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001015, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }
            })
        }
    }
}



