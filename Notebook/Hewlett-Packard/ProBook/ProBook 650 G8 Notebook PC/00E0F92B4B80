
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20240827
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000B1DA  0x02  "AcpiRe"  "PLT_RTD3"  0x00001000  "INTL"   0x20160527
 02)  MCFG  0x0000003C  0x01  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 03)  APIC  0x0000012C  0x04  "HPQOEM"  "87ED    "  0x00000001  "HP  "   0x00000001
 04)  SSDT  0x0000012A  0x02  "HP    "  "ShmTable"  0x00000001  "INTL"   0x20160527
 05)  SSDT  0x00000032  0x01  "HP    "  "HPCONDEV"  0x00001000  "INTL"   0x20160527
 06)  TPM2  0x0000004C  0x04  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 07)  SSDT  0x00000609  0x01  "HP    "  "INTTPL  "  0x00001000  "INTL"   0x20160527
 08)  SSDT  0x00002E43  0x02  "SaSsdt"  "SaSsdt  "  0x00003000  "INTL"   0x20160527
 09)  NHLT  0x00001B27  0x00  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 10)  SSDT  0x000074D3  0x02  "HPQOEM"  "MS-SSDT "  0x00003000  "INTL"   0x20160527
 11)  DSDT  0x000417D4  0x02  "HPQOEM"  "87ED    "  0x00000000  "INTL"   0x20160527
 12)  SSDT  0x000005FB  0x02  "HPQOEM"  "Tpm2Tabl"  0x00001000  "INTL"   0x20160527
 13)  SSDT  0x00000C2E  0x02  "HPQOEM"  "HP_XHC_P"  0x00000000  "INTL"   0x20160527
 14)  WSMT  0x00000028  0x01  "HPQOEM"  "        "  0x00000000  "    "   0x00000000
 15)  LPIT  0x0000005C  0x01  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 16)  SSDT  0x00001575  0x02  "HP    "  "UcsiAcpi"  0x00000001  "INTL"   0x20160527
 17)  UEFI  0x0000063A  0x01  "INTEL "  "RstVmdE "  0x00000000  "    "   0x00000000
 18)  SSDT  0x00000069  0x01  "HP    "  "HPCAHWID"  0x00001000  "INTL"   0x20160527
 19)  SSDT  0x00003375  0x02  "INTEL "  "IgfxSsdt"  0x00003000  "INTL"   0x20160527
 20)  SSDT  0x0000255C  0x02  "CpuRef"  "CpuSsdt "  0x00003000  "INTL"   0x20160527
 21)  SSDT  0x00000F18  0x02  "HP    "  "HPINTELG"  0x00001000  "INTL"   0x20160527
 22)  DMAR  0x000000A0  0x02  "INTEL "  "TGL     "  0x00000002  "INTL"   0x01000013
 23)  FACP  0x00000114  0x06  "HPQOEM"  "SLIC-BPC"  0x00000000  "HP  "   0x00000001
 24)  FPDT  0x00000044  0x01  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 25)  SSDT  0x000002D7  0x01  "HP    "  "NVTEC   "  0x00000001  "INTL"   0x20160527
 26)  SSDT  0x0000280E  0x01  "HP    "  "HPINNBWL"  0x00001000  "INTL"   0x20160527
 27)  PTDT  0x00000024  0x00  "HPQOEM"  "SLIC-BPC"  0x00000005  "MSFT"   0x0100000D
 28)  MSDM  0x00000055  0x03  "HPQOEM"  "SLIC-BPC"  0x00000000  "HP  "   0x00000001
 29)  SSDT  0x0000019B  0x01  "HP    "  "HPNBCONV"  0x00001000  "INTL"   0x20160527
 30)  RTMA  0x0000009E  0x01  "HP    "  "_HBMART_"  0x00001000  "HP  "   0x00000001
 31)  OEML  0x00000028  0x03  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 32)  SSDT  0x00001D55  0x01  "HP    "  "LAPTOPPC"  0x00001000  "INTL"   0x20160527
 33)  SSDT  0x000058FF  0x02  "DptfTb"  "DptfTabl"  0x00001000  "INTL"   0x20160527
 34)  HPET  0x00000038  0x01  "HPQOEM"  "87ED    "  0x00000001  "HP  "   0x00000001
 35)  SSDT  0x000000FB  0x02  "HP    "  "UcsiCntr"  0x00000001  "INTL"   0x20160527
 36)  UEFI  0x0000005C  0x01  "INTEL "  "RstVmdV "  0x00000000  "    "   0x00000000
 37)  SSDT  0x000002F9  0x02  "HP    "  "PwrCtlEv"  0x00000001  "INTL"   0x20160527
 38)  FACS  0x00000040  0x02
 39)  BGRT  0x00000038  0x01  "HPQOEM"  "TGL-ULT "  0x00000002  "    "   0x01000013
 40)  SSDT  0x0000B6E3  0x02  "INTEL "  "TcssSsdt"  0x00001000  "INTL"   0x20160527
 41)  WSMT  0x00000028  0x01  "HPQOEM"  "87ED    "  0x00000001  "HP  "   0x00000001
 42)  SSDT  0x000004D4  0x02  "PmRef "  "ApPsd   "  0x00003000  "INTL"   0x20160527
 43)  SSDT  0x000008E7  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20160527
 44)  SSDT  0x000001C6  0x02  "PmRef "  "Cpu0Psd "  0x00003000  "INTL"   0x20160527
 45)  SSDT  0x00000386  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20160527
 46)  SSDT  0x0000048A  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20160527
 47)  SSDT  0x0000048A  0x02  "PmRef "  "ApHwp   "  0x00003000  "INTL"   0x20160527
 48)  SSDT  0x00000316  0x02  "PmRef "  "Cpu0Hwp "  0x00003000  "INTL"   0x20160527
 49)  SSDT  0x00000605  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20160527

Found 49 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000012C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 15
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "87ED    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 04
[04Fh 0079 001h]               Local Apic ID : 01
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 05
[057h 0087 001h]               Local Apic ID : 03
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 06
[05Fh 0095 001h]               Local Apic ID : 05
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 07
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 08
[06Fh 0111 001h]               Local Apic ID : FF
[070h 0112 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 09
[077h 0119 001h]               Local Apic ID : FF
[078h 0120 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0A
[07Fh 0127 001h]               Local Apic ID : FF
[080h 0128 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0B
[087h 0135 001h]               Local Apic ID : FF
[088h 0136 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0C
[08Fh 0143 001h]               Local Apic ID : FF
[090h 0144 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0D
[097h 0151 001h]               Local Apic ID : FF
[098h 0152 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0E
[09Fh 0159 001h]               Local Apic ID : FF
[0A0h 0160 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : FF
[0A8h 0168 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 01 [I/O APIC]
[0ADh 0173 001h]                      Length : 0C
[0AEh 0174 001h]                 I/O Apic ID : 02
[0AFh 0175 001h]                    Reserved : 00
[0B0h 0176 004h]                     Address : FEC00000
[0B4h 0180 004h]                   Interrupt : 00000000

[0B8h 0184 001h]               Subtable Type : 02 [Interrupt Source Override]
[0B9h 0185 001h]                      Length : 0A
[0BAh 0186 001h]                         Bus : 00
[0BBh 0187 001h]                      Source : 00
[0BCh 0188 004h]                   Interrupt : 00000002
[0C0h 0192 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0C2h 0194 001h]               Subtable Type : 02 [Interrupt Source Override]
[0C3h 0195 001h]                      Length : 0A
[0C4h 0196 001h]                         Bus : 00
[0C5h 0197 001h]                      Source : 09
[0C6h 0198 004h]                   Interrupt : 00000009
[0CAh 0202 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[0CCh 0204 001h]               Subtable Type : 04 [Local APIC NMI]
[0CDh 0205 001h]                      Length : 06
[0CEh 0206 001h]                Processor ID : 01
[0CFh 0207 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D1h 0209 001h]        Interrupt Input LINT : 01

[0D2h 0210 001h]               Subtable Type : 04 [Local APIC NMI]
[0D3h 0211 001h]                      Length : 06
[0D4h 0212 001h]                Processor ID : 02
[0D5h 0213 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D7h 0215 001h]        Interrupt Input LINT : 01

[0D8h 0216 001h]               Subtable Type : 04 [Local APIC NMI]
[0D9h 0217 001h]                      Length : 06
[0DAh 0218 001h]                Processor ID : 03
[0DBh 0219 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221 001h]        Interrupt Input LINT : 01

[0DEh 0222 001h]               Subtable Type : 04 [Local APIC NMI]
[0DFh 0223 001h]                      Length : 06
[0E0h 0224 001h]                Processor ID : 04
[0E1h 0225 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227 001h]        Interrupt Input LINT : 01

[0E4h 0228 001h]               Subtable Type : 04 [Local APIC NMI]
[0E5h 0229 001h]                      Length : 06
[0E6h 0230 001h]                Processor ID : 05
[0E7h 0231 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233 001h]        Interrupt Input LINT : 01

[0EAh 0234 001h]               Subtable Type : 04 [Local APIC NMI]
[0EBh 0235 001h]                      Length : 06
[0ECh 0236 001h]                Processor ID : 06
[0EDh 0237 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239 001h]        Interrupt Input LINT : 01

[0F0h 0240 001h]               Subtable Type : 04 [Local APIC NMI]
[0F1h 0241 001h]                      Length : 06
[0F2h 0242 001h]                Processor ID : 07
[0F3h 0243 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245 001h]        Interrupt Input LINT : 01

[0F6h 0246 001h]               Subtable Type : 04 [Local APIC NMI]
[0F7h 0247 001h]                      Length : 06
[0F8h 0248 001h]                Processor ID : 08
[0F9h 0249 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251 001h]        Interrupt Input LINT : 01

[0FCh 0252 001h]               Subtable Type : 04 [Local APIC NMI]
[0FDh 0253 001h]                      Length : 06
[0FEh 0254 001h]                Processor ID : 09
[0FFh 0255 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257 001h]        Interrupt Input LINT : 01

[102h 0258 001h]               Subtable Type : 04 [Local APIC NMI]
[103h 0259 001h]                      Length : 06
[104h 0260 001h]                Processor ID : 0A
[105h 0261 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263 001h]        Interrupt Input LINT : 01

[108h 0264 001h]               Subtable Type : 04 [Local APIC NMI]
[109h 0265 001h]                      Length : 06
[10Ah 0266 001h]                Processor ID : 0B
[10Bh 0267 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269 001h]        Interrupt Input LINT : 01

[10Eh 0270 001h]               Subtable Type : 04 [Local APIC NMI]
[10Fh 0271 001h]                      Length : 06
[110h 0272 001h]                Processor ID : 0C
[111h 0273 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275 001h]        Interrupt Input LINT : 01

[114h 0276 001h]               Subtable Type : 04 [Local APIC NMI]
[115h 0277 001h]                      Length : 06
[116h 0278 001h]                Processor ID : 0D
[117h 0279 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281 001h]        Interrupt Input LINT : 01

[11Ah 0282 001h]               Subtable Type : 04 [Local APIC NMI]
[11Bh 0283 001h]                      Length : 06
[11Ch 0284 001h]                Processor ID : 0E
[11Dh 0285 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287 001h]        Interrupt Input LINT : 01

[120h 0288 001h]               Subtable Type : 04 [Local APIC NMI]
[121h 0289 001h]                      Length : 06
[122h 0290 001h]                Processor ID : 0F
[123h 0291 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293 001h]        Interrupt Input LINT : 01

[126h 0294 001h]               Subtable Type : 04 [Local APIC NMI]
[127h 0295 001h]                      Length : 06
[128h 0296 001h]                Processor ID : 10
[129h 0297 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 300 (0x12C)

    0000: 41 50 49 43 2C 01 00 00 04 15 48 50 51 4F 45 4D  // APIC,.....HPQOEM
    0010: 38 37 45 44 20 20 20 20 01 00 00 00 48 50 20 20  // 87ED    ....HP  
    0020: 01 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 00 08 02 04  // ................
    0040: 01 00 00 00 00 08 03 06 01 00 00 00 00 08 04 01  // ................
    0050: 01 00 00 00 00 08 05 03 01 00 00 00 00 08 06 05  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 FF  // ................
    0070: 00 00 00 00 00 08 09 FF 00 00 00 00 00 08 0A FF  // ................
    0080: 00 00 00 00 00 08 0B FF 00 00 00 00 00 08 0C FF  // ................
    0090: 00 00 00 00 00 08 0D FF 00 00 00 00 00 08 0E FF  // ................
    00A0: 00 00 00 00 00 08 0F FF 00 00 00 00 01 0C 02 00  // ................
    00B0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    00C0: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    00D0: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    00E0: 04 05 00 01 04 06 05 05 00 01 04 06 06 05 00 01  // ................
    00F0: 04 06 07 05 00 01 04 06 08 05 00 01 04 06 09 05  // ................
    0100: 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01 04 06  // ................
    0110: 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05 00 01  // ................
    0120: 04 06 0F 05 00 01 04 06 10 05 00 01              // ............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 14
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "TGL-ULT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 0000000015CF5018
[030h 0048 004h]               Image OffsetX : 000002F8
[034h 0052 004h]               Image OffsetY : 000000D4

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 14 48 50 51 4F 45 4D  // BGRT8.....HPQOEM
    0010: 54 47 4C 2D 55 4C 54 00 02 00 00 00 20 20 20 20  // TGL-ULT.....    
    0020: 13 00 00 01 01 00 00 00 18 50 CF 15 00 00 00 00  // .........P......
    0030: F8 02 00 00 D4 00 00 00                          // ........


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 000000A0
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : D3
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "TGL     "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 001h]          Host Address Width : 26
[025h 0037 001h]                       Flags : 05
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0018

[04Ch 0076 001h]                       Flags : 00
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED84000

[058h 0088 001h]           Device Scope Type : 02 [PCI Bridge Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 00
[05Dh 0093 001h]              PCI Bus Number : 00

[05Eh 0094 002h]                    PCI Path : 07,00


[060h 0096 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[062h 0098 002h]                      Length : 0020

[064h 0100 001h]                       Flags : 01
[065h 0101 001h]                    Reserved : 00
[066h 0102 002h]          PCI Segment Number : 0000
[068h 0104 008h]       Register Base Address : 00000000FED91000

[070h 0112 001h]           Device Scope Type : 03 [IOAPIC Device]
[071h 0113 001h]                Entry Length : 08
[072h 0114 002h]                    Reserved : 0000
[074h 0116 001h]              Enumeration ID : 02
[075h 0117 001h]              PCI Bus Number : 00

[076h 0118 002h]                    PCI Path : 1E,07


[078h 0120 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[079h 0121 001h]                Entry Length : 08
[07Ah 0122 002h]                    Reserved : 0000
[07Ch 0124 001h]              Enumeration ID : 00
[07Dh 0125 001h]              PCI Bus Number : 00

[07Eh 0126 002h]                    PCI Path : 1E,06


[080h 0128 002h]               Subtable Type : 0001 [Reserved Memory Region]
[082h 0130 002h]                      Length : 0020

[084h 0132 002h]                    Reserved : 0000
[086h 0134 002h]          PCI Segment Number : 0000
[088h 0136 008h]                Base Address : 0000000030000000
[090h 0144 008h]         End Address (limit) : 00000000507FFFFF

[098h 0152 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[099h 0153 001h]                Entry Length : 08
[09Ah 0154 002h]                    Reserved : 0000
[09Ch 0156 001h]              Enumeration ID : 00
[09Dh 0157 001h]              PCI Bus Number : 00

[09Eh 0158 002h]                    PCI Path : 02,00


Raw Table Data: Length 160 (0xA0)

    0000: 44 4D 41 52 A0 00 00 00 02 D3 49 4E 54 45 4C 20  // DMAR......INTEL 
    0010: 54 47 4C 20 20 20 20 20 02 00 00 00 49 4E 54 4C  // TGL     ....INTL
    0020: 13 00 00 01 26 05 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 18 00 00 00 00 00  // ................
    0050: 00 40 D8 FE 00 00 00 00 02 08 00 00 00 00 07 00  // .@..............
    0060: 00 00 20 00 01 00 00 00 00 10 D9 FE 00 00 00 00  // .. .............
    0070: 03 08 00 00 02 00 1E 07 04 08 00 00 00 00 1E 06  // ................
    0080: 01 00 20 00 00 00 00 00 00 00 00 30 00 00 00 00  // .. ........0....
    0090: FF FF 7F 50 00 00 00 00 01 08 00 00 00 00 02 00  // ...P............


DSDT
----
DefinitionBlock ("", "DSDT", 2, "HPQOEM", "87ED    ", 0x00000000)
{
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.G40B, MethodObj)    // 3 Arguments
    External (_GPE.G40C, MethodObj)    // 3 Arguments
    External (_GPE.P0L6, MethodObj)    // 0 Arguments
    External (_GPE.P1L6, MethodObj)    // 0 Arguments
    External (_GPE.P2L6, MethodObj)    // 0 Arguments
    External (_GPE.P3L6, MethodObj)    // 0 Arguments
    External (_SB_.AWAC, DeviceObj)
    External (_SB_.AWAC.WAST, IntObj)
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.CFGD, UnknownObj)
    External (_SB_.CPPC, IntObj)
    External (_SB_.DSAE, UnknownObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.DTSF, UnknownObj)
    External (_SB_.DTSI, IntObj)
    External (_SB_.ELNG, UnknownObj)
    External (_SB_.EMNA, UnknownObj)
    External (_SB_.EPCS, UnknownObj)
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.HIDD, DeviceObj)
    External (_SB_.HIDD._STA, MethodObj)    // 0 Arguments
    External (_SB_.HIDD.HPEM, MethodObj)    // 1 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.IETM.CCOF, MethodObj)    // 0 Arguments
    External (_SB_.IETM.CCON, MethodObj)    // 0 Arguments
    External (_SB_.IETM.DFFG, UnknownObj)
    External (_SB_.IETM.DOSS, UnknownObj)
    External (_SB_.IETM.DXGP, MethodObj)    // 3 Arguments
    External (_SB_.IETM.ODVP, MethodObj)    // 0 Arguments
    External (_SB_.IETM.S1ON, UnknownObj)
    External (_SB_.IETM.S2ON, UnknownObj)
    External (_SB_.IETM.SSIX, UnknownObj)
    External (_SB_.NVDR._DSM, MethodObj)    // 4 Arguments
    External (_SB_.NVDR.NVD1._DSM, MethodObj)    // 4 Arguments
    External (_SB_.NVDR.NVD1._LSI, MethodObj)    // 0 Arguments
    External (_SB_.NVDR.NVD1._LSR, MethodObj)    // 2 Arguments
    External (_SB_.NVDR.NVD1._LSW, MethodObj)    // 3 Arguments
    External (_SB_.NVDR.RSTP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.CNVW.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.CTCD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.CTCN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.D3C_, PowerResObj)
    External (_SB_.PC00.D3C_._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.D3C_._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.DGPC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.FBDX, UnknownObj)
    External (_SB_.PC00.G40E, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G466, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G467, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G472, MethodObj)    // 0 Arguments
    External (_SB_.PC00.G473, MethodObj)    // 0 Arguments
    External (_SB_.PC00.G474, MethodObj)    // 0 Arguments
    External (_SB_.PC00.G475, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G47B, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G47F, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G48A, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.ALSI, UnknownObj)
    External (_SB_.PC00.GFX0.CBLV, UnknownObj)
    External (_SB_.PC00.GFX0.CDCK, UnknownObj)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)
    External (_SB_.PC00.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.GSSE, UnknownObj)
    External (_SB_.PC00.GFX0.STAT, UnknownObj)
    External (_SB_.PC00.GFX0.TCHE, UnknownObj)
    External (_SB_.PC00.GLAN.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HGGE, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC0_.BCSC, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.DGPS, MethodObj)    // 4 Arguments
    External (_SB_.PC00.LPCB.EC0_.EC10, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.EC11, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.EC12, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.EC13, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.EC18, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PC00.LPCB.EC0_.GBBI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.PSCF, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.UDTS, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.EC0_.UPBT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.EC0_.WWP_, FieldUnitObj)
    External (_SB_.PC00.LPCB.H_EC.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.DD1F, UnknownObj)
    External (_SB_.PC00.PEG0.PEGP.DIDM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.G416, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.G464, FieldUnitObj)
    External (_SB_.PC00.PEG0.PEGP.SVID, UnknownObj)
    External (_SB_.PC00.PEG0.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3, DeviceObj)
    External (_SB_.PC00.PEG3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PTHT.THEN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC00.SGIV, MethodObj)    // 4 Arguments
    External (_SB_.PC00.SGPO, MethodObj)    // 5 Arguments
    External (_SB_.PC00.TBT0, PowerResObj)
    External (_SB_.PC00.TBT0._OFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TBT0._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TBT1, PowerResObj)
    External (_SB_.PC00.TBT1._OFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TBT1._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TCON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0, UnknownObj)
    External (_SB_.PC00.TDM0._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0.MEMS, FieldUnitObj)
    External (_SB_.PC00.TDM0.PMES, FieldUnitObj)
    External (_SB_.PC00.TDM0.PMST, FieldUnitObj)
    External (_SB_.PC00.TDM0.STAT, IntObj)
    External (_SB_.PC00.TDM1, UnknownObj)
    External (_SB_.PC00.TDM1._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM1.MEMS, FieldUnitObj)
    External (_SB_.PC00.TDM1.PMES, FieldUnitObj)
    External (_SB_.PC00.TDM1.PMST, FieldUnitObj)
    External (_SB_.PC00.TDM1.STAT, IntObj)
    External (_SB_.PC00.TG0N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TG1N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.THC0, DeviceObj)
    External (_SB_.PC00.THC1, DeviceObj)
    External (_SB_.PC00.TM03, MethodObj)    // 1 Arguments
    External (_SB_.PC00.TM04, MethodObj)    // 1 Arguments
    External (_SB_.PC00.TRP0, DeviceObj)
    External (_SB_.PC00.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPEX, IntObj)
    External (_SB_.PC00.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPSX, IntObj)
    External (_SB_.PC00.TRP0.PMEX, IntObj)
    External (_SB_.PC00.TRP0.PMSX, IntObj)
    External (_SB_.PC00.TRP1, DeviceObj)
    External (_SB_.PC00.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPEX, IntObj)
    External (_SB_.PC00.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPSX, IntObj)
    External (_SB_.PC00.TRP1.PMEX, IntObj)
    External (_SB_.PC00.TRP1.PMSX, IntObj)
    External (_SB_.PC00.TRP2, DeviceObj)
    External (_SB_.PC00.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPEX, IntObj)
    External (_SB_.PC00.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPSX, IntObj)
    External (_SB_.PC00.TRP2.PMEX, IntObj)
    External (_SB_.PC00.TRP2.PMSX, IntObj)
    External (_SB_.PC00.TRP3, DeviceObj)
    External (_SB_.PC00.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPEX, IntObj)
    External (_SB_.PC00.TRP3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPSX, IntObj)
    External (_SB_.PC00.TRP3.PMEX, IntObj)
    External (_SB_.PC00.TRP3.PMSX, IntObj)
    External (_SB_.PC00.TXDC, UnknownObj)
    External (_SB_.PC00.TXDC._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXDC.D0I3, FieldUnitObj)
    External (_SB_.PC00.TXDC.PMES, FieldUnitObj)
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC00.TXHC._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXHC.D0D3, FieldUnitObj)
    External (_SB_.PC00.TXHC.PMES, FieldUnitObj)
    External (_SB_.PC00.XDCI.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.DUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC01, DeviceObj)
    External (_SB_.PC01.TRP0, DeviceObj)
    External (_SB_.PC01.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP0.HPEX, IntObj)
    External (_SB_.PC01.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP0.HPSX, IntObj)
    External (_SB_.PC01.TRP0.PMEX, IntObj)
    External (_SB_.PC01.TRP0.PMSX, IntObj)
    External (_SB_.PC01.TRP1, DeviceObj)
    External (_SB_.PC01.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP1.HPEX, IntObj)
    External (_SB_.PC01.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP1.HPSX, IntObj)
    External (_SB_.PC01.TRP1.PMEX, IntObj)
    External (_SB_.PC01.TRP1.PMSX, IntObj)
    External (_SB_.PC01.TRP2, DeviceObj)
    External (_SB_.PC01.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP2.HPEX, IntObj)
    External (_SB_.PC01.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP2.HPSX, IntObj)
    External (_SB_.PC01.TRP2.PMEX, IntObj)
    External (_SB_.PC01.TRP2.PMSX, IntObj)
    External (_SB_.PC01.TRP3, DeviceObj)
    External (_SB_.PC01.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP3.HPEX, IntObj)
    External (_SB_.PC01.TRP3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP3.HPSX, IntObj)
    External (_SB_.PC01.TRP3.PMEX, IntObj)
    External (_SB_.PC01.TRP3.PMSX, IntObj)
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PTHH.THEN, MethodObj)    // 0 Arguments
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_TZ_.BOTT, MethodObj)    // 0 Arguments
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.RETD, MethodObj)    // 0 Arguments
    External (_TZ_.TZ00, DeviceObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (CPID, FieldUnitObj)
    External (CPPD, UnknownObj)    // Conflicts with a later declaration
    External (CTCL, UnknownObj)
    External (CVFS, UnknownObj)    // Conflicts with a later declaration
    External (CVID, FieldUnitObj)
    External (D1F0, UnknownObj)
    External (D1F1, UnknownObj)
    External (D1F2, UnknownObj)
    External (D6F0, UnknownObj)
    External (DFEN, UnknownObj)    // Conflicts with a later declaration
    External (DPMS, IntObj)
    External (DUWS, UnknownObj)    // Conflicts with a later declaration
    External (EC14, FieldUnitObj)
    External (EC15, FieldUnitObj)
    External (ELNG, IntObj)
    External (EMNA, IntObj)
    External (FBDX, UnknownObj)
    External (G25F, UnknownObj)    // Conflicts with a later declaration
    External (HGMD, UnknownObj)    // Conflicts with a later declaration
    External (HPID, UnknownObj)    // Conflicts with a later declaration
    External (HRA0, UnknownObj)    // Conflicts with a later declaration
    External (HRE0, UnknownObj)    // Conflicts with a later declaration
    External (HRG0, UnknownObj)    // Conflicts with a later declaration
    External (ITRT, UnknownObj)
    External (ITSP, UnknownObj)
    External (M32B, UnknownObj)    // Conflicts with a later declaration
    External (M32L, UnknownObj)    // Conflicts with a later declaration
    External (M64B, UnknownObj)    // Conflicts with a later declaration
    External (M64L, UnknownObj)    // Conflicts with a later declaration
    External (MDBG, MethodObj)    // 1 Arguments
    External (MSUB, UnknownObj)    // Conflicts with a later declaration
    External (ODV7, UnknownObj)    // Conflicts with a later declaration
    External (P0WK, UnknownObj)    // Conflicts with a later declaration
    External (P1GP, UnknownObj)    // Conflicts with a later declaration
    External (P1WK, UnknownObj)    // Conflicts with a later declaration
    External (P2GP, UnknownObj)    // Conflicts with a later declaration
    External (P2WK, UnknownObj)    // Conflicts with a later declaration
    External (P3GP, UnknownObj)    // Conflicts with a later declaration
    External (P3WK, UnknownObj)    // Conflicts with a later declaration
    External (PF00, IntObj)
    External (PF01, UnknownObj)
    External (PF02, UnknownObj)
    External (PF03, UnknownObj)
    External (PF04, UnknownObj)
    External (PF05, UnknownObj)
    External (PF06, UnknownObj)
    External (PF07, UnknownObj)
    External (PF08, UnknownObj)
    External (PF09, UnknownObj)
    External (PF10, UnknownObj)
    External (PF11, UnknownObj)
    External (PF12, UnknownObj)
    External (PF13, UnknownObj)
    External (PF14, UnknownObj)
    External (PF15, UnknownObj)
    External (PG0E, UnknownObj)    // Conflicts with a later declaration
    External (PG1E, UnknownObj)    // Conflicts with a later declaration
    External (PG2E, UnknownObj)    // Conflicts with a later declaration
    External (PG3E, UnknownObj)    // Conflicts with a later declaration
    External (PL1E, UnknownObj)    // Conflicts with a later declaration
    External (PL2E, UnknownObj)    // Conflicts with a later declaration
    External (PMRL, IntObj)
    External (PMSA, IntObj)
    External (PPL1, UnknownObj)    // Conflicts with a later declaration
    External (PPL2, UnknownObj)    // Conflicts with a later declaration
    External (PTHM, IntObj)
    External (PWA0, UnknownObj)    // Conflicts with a later declaration
    External (PWE0, UnknownObj)    // Conflicts with a later declaration
    External (PWG0, UnknownObj)    // Conflicts with a later declaration
    External (PWWS, IntObj)
    External (RTD3, IntObj)
    External (SCIS, UnknownObj)
    External (SEN1, DeviceObj)
    External (SEN2, DeviceObj)
    External (SEN4, DeviceObj)
    External (SEN6, DeviceObj)
    External (SGGP, UnknownObj)    // Conflicts with a later declaration
    External (SIME, UnknownObj)    // Conflicts with a later declaration
    External (SZMD, IntObj)
    External (TPM_._STA, UnknownObj)
    External (TRTD, UnknownObj)    // Conflicts with a later declaration
    External (VDSD, IntObj)
    External (VMDE, UnknownObj)    // Conflicts with a later declaration
    External (VMR1, UnknownObj)    // Conflicts with a later declaration
    External (VMR2, UnknownObj)    // Conflicts with a later declaration
    External (VMR3, UnknownObj)    // Conflicts with a later declaration
    External (WPPE, IntObj)
    External (WWBR, IntObj)
    External (XBAS, UnknownObj)    // Conflicts with a later declaration

    OperationRegion (HPSA, SystemMemory, 0x23AF0000, 0x00000008)
    Field (HPSA, AnyAcc, Lock, Preserve)
    {
        SFG1,   4, 
        SFG2,   4, 
        Offset (0x04), 
        LPDP,   16, 
        OSIF,   8, 
        PRDT,   8
    }

    Scope (_SB)
    {
        Device (HEPH)
        {
            Name (_HID, "HPIC0013")  // _HID: Hardware ID
            OperationRegion (HSXB, SystemMemory, 0x23AB0000, 0x00000101)
            Field (HSXB, AnyAcc, NoLock, Preserve)
            {
                ENBL,   8, 
                HBSR,   2048
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = Zero
                If ((ENBL == One))
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }

            Method (HHGS, 0, Serialized)
            {
                Local1 = 0x20
                Local4 = Buffer (0x20){}
                GSWS (0x91F3)
                Local5 = HBSR /* \_SB_.HEPH.HBSR */
                CreateField (Local5, Zero, (Local1 * 0x08), DLLS)
                Local3 = DLLS /* \_SB_.HEPH.HHGS.DLLS */
                HBSR = Local4
                Return (Local3)
            }
        }
    }

    Name (GOSI, 0xFF)
    Method (GTOS, 0, Serialized)
    {
        If ((GOSI == 0xFF))
        {
            GOSI = Zero
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Linux"))
                {
                    GOSI = One
                }

                If (_OSI ("Windows 2001"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    GOSI = 0x05
                }

                If (_OSI ("Windows 2006"))
                {
                    GOSI = 0x06
                }

                If (_OSI ("Windows 2009"))
                {
                    GOSI = 0x07
                }

                If (_OSI ("Windows 2012"))
                {
                    GOSI = 0x08
                }

                If (_OSI ("Windows 2013"))
                {
                    GOSI = 0x09
                }

                If (_OSI ("Windows 2015"))
                {
                    GOSI = 0x0A
                }

                If (_OSI ("Windows 2016"))
                {
                    GOSI = 0x0B
                }

                If (_OSI ("Windows 2017"))
                {
                    GOSI = 0x0C
                }
            }

            OSIF = GOSI /* \GOSI */
        }

        Return (GOSI) /* \GOSI */
    }

    Method (B2I4, 3, Serialized)
    {
        Name (INTE, 0xFFFFFFFF)
        INTE &= Zero
        Local2 = Arg2
        If ((Local2 > 0x04))
        {
            Local2 = 0x04
        }

        Local1 = (Arg1 * 0x08)
        Local3 = (Local2 * 0x08)
        CreateField (Arg0, Local1, Local3, TINT)
        INTE = TINT /* \B2I4.TINT */
        Return (INTE) /* \B2I4.INTE */
    }

    Name (B2SD, "                                                                                                                                                                                                                                                               ")
    Name
    Method (B2ST, 2, Serialized)
    {
        If ((Arg1 > Zero))
        {
            Local0 = Buffer (Arg1){}
            Local0 = Arg0
            If ((Arg1 > 0x0100))
            {
                B2S4 = Local0
                Local1 = B2S4 /* \B2S4 */
            }
            Else
            {
                B2SD = Local0
                Local1 = B2SD /* \B2SD */
            }
        }
        Else
        {
            B2SD = Arg0
            Local1 = B2SD /* \B2SD */
        }

        Return (Local1)
    }

    Method (CPBF, 5, Serialized)
    {
        Local7 = Zero
        Local1 = DerefOf (Arg1)
        Local3 = DerefOf (Arg3)
        If ((((Local1 + Arg4) <= SizeOf (Arg0)) && (
            (Local3 + Arg4) <= SizeOf (Arg2))))
        {
            CreateField (Arg0, (Local1 * 0x08), (Arg4 * 0x08), DEST)
            CreateField (Arg2, (Local3 * 0x08), (Arg4 * 0x08), SRCE)
            DEST = SRCE /* \CPBF.SRCE */
            Local7 = One
            Local1 += Arg4
            Local3 += Arg4
            Arg1 = Local1
            Arg3 = Local3
        }

        Return (Local7)
    }

    OperationRegion (HPMA, SystemMemory, 0x23AAD000, 0x0000005C)
    Field (HPMA, AnyAcc, Lock, Preserve)
    {
        RVD2,   4, 
        LEGF,   1, 
        KCDB,   1, 
        KLDB,   1, 
        TPMX,   1, 
        FOAL,   1, 
        AEDA,   1, 
        ALSF,   1, 
        HSED,   1, 
        HDEN,   1, 
        MDEN,   1, 
        ICPT,   1, 
        PMCS,   1, 
        RVD1,   3, 
        ITPS,   1, 
        FCIN,   1, 
        RSVD,   11, 
        TBDO,   8, 
        TBRB,   32, 
        TJMX,   8, 
        TRCN,   8, 
        LOTR,   160, 
        HITR,   160, 
        DTCD,   32, 
        SMHO,   32, 
        IVPS,   8, 
        BLPS,   8, 
        UR0B,   32, 
        AC10,   32, 
        AC11,   32, 
        AC12,   32, 
        CFAP,   8, 
        CFIG,   32, 
        CFPG,   32, 
        AMFR,   32, 
        SNMT,   8, 
        SZMD,   8
    }

    OperationRegion (HPEC, SystemMemory, 0x23AEC000, 0x00000004)
    Field (HPEC, AnyAcc, Lock, Preserve)
    {
        EC14,   16, 
        EC15,   16
    }

    OperationRegion (HPGF, SystemMemory, 0x23AE9000, 0x000002A1)
    Field (HPGF, AnyAcc, Lock, Preserve)
    {
        G000,   2048, 
        G100,   32, 
        G104,   8, 
        G105,   8, 
        G106,   8, 
        G107,   8, 
        G108,   88, 
        G113,   216, 
        G12E,   200, 
        G147,   400, 
        G179,   16, 
        G17B,   16, 
        G17D,   8, 
        G17E,   88, 
        G189,   176, 
        G19F,   32, 
        G1A3,   32, 
        G1A7,   8, 
        G1A8,   8, 
        G1A9,   16, 
        G1AB,   16, 
        G1AD,   16, 
        G1AF,   16, 
        G1B1,   8, 
        G1B2,   8, 
        G1B3,   8, 
        G1B4,   32, 
        G1B8,   8, 
        G1B9,   32, 
        G1BD,   32, 
        G1C1,   32, 
        G1C5,   32, 
        G1C9,   8, 
        G1CA,   8, 
        G1CB,   32, 
        G1CF,   8, 
        G1D0,   8, 
        G1D1,   32, 
        G1D5,   8, 
        G1D6,   8, 
        G1D7,   32, 
        G1DB,   8, 
        G1DC,   8, 
        G1DD,   32, 
        G1E1,   8, 
        G1E2,   32, 
        G1E6,   32, 
        G1EA,   32, 
        G1EE,   224, 
        G20A,   32, 
        G20E,   32, 
        G212,   8, 
        G213,   32, 
        G217,   8, 
        G218,   8, 
        G219,   32, 
        G21D,   8, 
        G21E,   8, 
        G21F,   32, 
        G223,   8, 
        G224,   8, 
        G225,   32, 
        G229,   8, 
        G22A,   8, 
        G22B,   8, 
        G22C,   8, 
        G22D,   8, 
        G22E,   8, 
        G22F,   32, 
        G233,   32, 
        G237,   32, 
        G23B,   32, 
        G23F,   8, 
        G240,   8, 
        G241,   8, 
        G242,   8, 
        G243,   32, 
        G247,   8, 
        G248,   8, 
        G249,   8, 
        G24A,   8, 
        G24B,   8, 
        G24C,   8, 
        G24D,   16, 
        G24F,   16, 
        G251,   8, 
        G252,   8, 
        G253,   32, 
        G257,   32, 
        G25B,   32, 
        G25F,   16, 
        G261,   8, 
        G262,   8, 
        G263,   8, 
        G264,   32, 
        G268,   8, 
        G269,   8, 
        G26A,   8, 
        G26B,   8, 
        G26C,   8, 
        G26D,   8, 
        G26E,   8, 
        G26F,   8, 
        G270,   8, 
        G271,   8, 
        G272,   32, 
        G276,   8, 
        G277,   8, 
        G278,   32, 
        G27C,   8, 
        G27D,   32, 
        G281,   32, 
        G285,   8, 
        G286,   8, 
        G287,   8, 
        G288,   8, 
        G289,   8, 
        G28A,   32, 
        G28E,   8, 
        G28F,   8, 
        G290,   8, 
        G291,   8, 
        G292,   8, 
        G293,   8, 
        G294,   8, 
        G295,   8, 
        G296,   8, 
        G297,   8, 
        G298,   8, 
        G299,   8, 
        G29A,   8, 
        G29B,   8, 
        G29C,   8, 
        G29D,   8, 
        G29E,   8, 
        G29F,   8, 
        G2A0,   8
    }

    OperationRegion (HPTR, SystemMemory, 0x23AED000, 0x00000150)
    Field (HPTR, AnyAcc, Lock, Preserve)
    {
        TH00,   32, 
        TH01,   32, 
        TH02,   32, 
        TH03,   32, 
        DGPV,   8, 
        DFEN,   8, 
        APLH,   8, 
        APLL,   8, 
        APLD,   8, 
        NPLH,   8, 
        NPLL,   8, 
        NPLD,   8, 
        NGTH,   8, 
        NGTL,   8, 
        NGTN,   8, 
        TDPS,   8, 
        PLL2,   16, 
        PLL4,   16, 
        PDC2,   16, 
        PDC4,   16, 
        PLSA,   16, 
        PLAC,   16, 
        ODV6,   32, 
        ODV7,   32, 
        ODV8,   32, 
        ODV9,   32, 
        ODVA,   32, 
        ODVB,   32, 
        ODVC,   32, 
        ODVD,   32, 
        ODVE,   32, 
        ODVF,   32, 
        NTGP,   8, 
        DDC1,   8, 
        DDC2,   8, 
        DDC3,   8, 
        DDC4,   8, 
        DDC5,   8, 
        DPNN,   8, 
        DFTI,   8, 
        DPSE,   8, 
        S6PE,   8, 
        S6PT,   8, 
        DTOL,   8, 
        TH0A,   32, 
        DDCF,   8, 
        TH05,   8, 
        TH08,   8, 
        TH09,   8, 
        PV01,   32, 
        PV02,   32, 
        PV03,   32, 
        PV04,   32, 
        PV05,   16, 
        PV06,   16, 
        PV07,   16, 
        PV08,   16, 
        PV09,   16, 
        PV0A,   16, 
        PV0B,   16, 
        PV0C,   16, 
        PV0D,   16, 
        PV0E,   16, 
        PV0F,   16, 
        PV10,   16, 
        PV11,   32, 
        PV12,   32, 
        PV13,   32, 
        PV14,   32, 
        PV15,   32, 
        PV16,   32, 
        PV17,   32, 
        PV18,   32, 
        PV19,   32, 
        PV1A,   32, 
        PV1B,   16, 
        TH06,   8, 
        MXDP,   8, 
        PV1C,   32, 
        PV24,   32, 
        PV1D,   8, 
        PV1E,   8, 
        PV1F,   8, 
        PV20,   8, 
        PV21,   8, 
        PV22,   8, 
        PV23,   8, 
        TH0C,   8, 
        P101,   32, 
        P102,   32, 
        P103,   32, 
        P104,   32, 
        P105,   32, 
        P106,   32, 
        P107,   32, 
        P108,   32, 
        P109,   32, 
        P110,   32, 
        P111,   32, 
        P112,   32, 
        P113,   32, 
        P114,   32, 
        P115,   32, 
        P116,   32, 
        TH0B,   8, 
        TH0E,   16, 
        TH0F,   16, 
        TH0D,   8, 
        T10E,   8, 
        T10F,   8, 
        P201,   32, 
        P202,   32, 
        P203,   32, 
        P204,   32, 
        P205,   32, 
        P206,   32, 
        P207,   32, 
        P208,   32, 
        P209,   32, 
        P210,   32, 
        P211,   32, 
        P212,   32, 
        P213,   32, 
        P214,   32, 
        P215,   32, 
        P216,   32
    }

    OperationRegion (HPCD, SystemMemory, 0x23AEE000, 0x0000018E)
    Field (HPCD, AnyAcc, Lock, Preserve)
    {
        CDP1,   32, 
        CDP2,   32, 
        WDDA,   896, 
        WFLS,   8, 
        WLID,   8, 
        BTID,   8, 
        WWID,   8, 
        W2ID,   8, 
        GSID,   8, 
        WGID,   8, 
        WRD1,   16, 
        WRD2,   16, 
        WTXN,   8, 
        WTX0,   8, 
        WTX1,   8, 
        WTX2,   8, 
        WTX3,   8, 
        WTX4,   8, 
        WTX5,   8, 
        WTX6,   8, 
        WTX7,   8, 
        WTX8,   8, 
        WTX9,   8, 
        WGEN,   8, 
        WGR1,   8, 
        WGR2,   8, 
        WGR3,   8, 
        WGR4,   8, 
        DSDG,   8, 
        DWRS,   8, 
        DWNS,   8, 
        DS21,   8, 
        DS22,   8, 
        DS23,   8, 
        DS24,   8, 
        DS25,   8, 
        DS2C,   8, 
        DS2D,   8, 
        DS2E,   8, 
        DS2F,   8, 
        DS2G,   8, 
        DS31,   8, 
        DS32,   8, 
        DS33,   8, 
        DS34,   8, 
        DS35,   8, 
        DS3C,   8, 
        DS3D,   8, 
        DS3E,   8, 
        DS3F,   8, 
        DS3G,   8, 
        DS41,   8, 
        DS42,   8, 
        DS43,   8, 
        DS44,   8, 
        DS45,   8, 
        DS4C,   8, 
        DS4D,   8, 
        DS4E,   8, 
        DS4F,   8, 
        DS4G,   8, 
        DSCS,   32, 
        NF2M,   8, 
        NF2A,   8, 
        NF2B,   8, 
        NF5M,   8, 
        NF5A,   8, 
        NF5B,   8, 
        NJ2M,   8, 
        NJ2A,   8, 
        NJ2B,   8, 
        NJ5M,   8, 
        NJ5A,   8, 
        NJ5B,   8, 
        NR2M,   8, 
        NR2A,   8, 
        NR2B,   8, 
        NR5M,   8, 
        NR5A,   8, 
        NR5B,   8, 
        WOWA,   8, 
        WWIG,   8, 
        UGPS,   8, 
        WWBR,   32, 
        WPPE,   32, 
        WPWK,   32, 
        WCLN,   16, 
        CDKP,   192, 
        RTXE,   8, 
        RT00,   8, 
        RT01,   8, 
        RT02,   8, 
        RT03,   8, 
        RT04,   8, 
        RT05,   8, 
        RT06,   8, 
        RT07,   8, 
        RT08,   8, 
        RT09,   8, 
        RT10,   8, 
        RT11,   8, 
        RT12,   8, 
        RT13,   8, 
        RT14,   8, 
        RT15,   8, 
        RT16,   8, 
        RT17,   8, 
        RT18,   8, 
        RT19,   8, 
        GA20,   8, 
        GA21,   8, 
        GA22,   8, 
        GA23,   8, 
        GA24,   8, 
        GA50,   8, 
        GA51,   8, 
        GA52,   8, 
        GA53,   8, 
        GA54,   8, 
        GB20,   8, 
        GB21,   8, 
        GB22,   8, 
        GB23,   8, 
        GB24,   8, 
        GB50,   8, 
        GB51,   8, 
        GB52,   8, 
        GB53,   8, 
        GB54,   8, 
        GC20,   8, 
        GC21,   8, 
        GC22,   8, 
        GC23,   8, 
        GC24,   8, 
        GC50,   8, 
        GC51,   8, 
        GC52,   8, 
        GC53,   8, 
        GC54,   8, 
        RFGN,   32, 
        RFCR,   32, 
        WPWN,   32, 
        HBTR,   32, 
        RVFB,   8, 
        RAFB,   8, 
        RCWG,   32, 
        PWWS,   8, 
        DAGN,   8, 
        DAG1,   8, 
        DAG2,   8, 
        DAG3,   8, 
        DAG4,   8, 
        DAG5,   8, 
        DAG6,   8, 
        DAG7,   8, 
        DAG8,   8, 
        DAG9,   8, 
        DAGA,   8, 
        DAGB,   8, 
        DAGC,   8, 
        DAGD,   8, 
        DAGE,   8, 
        DAGF,   8, 
        DAGG,   8, 
        DAGH,   8, 
        DAGI,   8, 
        DAGJ,   8, 
        DAGK,   8, 
        DAGL,   8, 
        DAGM,   8, 
        ITDA,   8, 
        WTXA,   8, 
        WTXB,   8, 
        WTXC,   8, 
        WTXD,   8, 
        WTXE,   8, 
        WTXF,   8, 
        WTXG,   8, 
        WTXH,   8, 
        WTXI,   8, 
        WTXJ,   8, 
        WTXK,   8, 
        WTXL,   8, 
        DS26,   8, 
        DS27,   8, 
        DS28,   8, 
        DS29,   8, 
        DS2A,   8, 
        DS2B,   8, 
        DS2H,   8, 
        DS2I,   8, 
        DS2J,   8, 
        DS2K,   8, 
        DS2L,   8, 
        DS2M,   8, 
        DS36,   8, 
        DS37,   8, 
        DS38,   8, 
        DS39,   8, 
        DS3A,   8, 
        DS3B,   8, 
        DS3H,   8, 
        DS3I,   8, 
        DS3J,   8, 
        DS3K,   8, 
        DS3L,   8, 
        DS3M,   8, 
        DS46,   8, 
        DS47,   8, 
        DS48,   8, 
        DS49,   8, 
        DS4A,   8, 
        DS4B,   8, 
        DS4H,   8, 
        DS4I,   8, 
        DS4J,   8, 
        DS4K,   8, 
        DS4L,   8, 
        DS4M,   8, 
        NF6M,   8, 
        NF6A,   8, 
        NF6B,   8, 
        NJ6M,   8, 
        NJ6A,   8, 
        NJ6B,   8, 
        NR6M,   8, 
        NR6A,   8, 
        NR6B,   8
    }

    OperationRegion (HPWM, SystemMemory, 0x23AB4000, 0x0000901C)
    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        PWOT,   32, 
        PWOI,   32, 
        PUWB,   294912, 
        PUWS,   32, 
        STIC,   16, 
        INIC,   16, 
        ENIC,   16, 
        OLIC,   16, 
        PWIC,   16, 
        BUIC,   16, 
        TWDC,   16, 
        IWDC,   16
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBL,   8000
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBM,   3200
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBS,   1200
    }

    Device (_SB.WMIB)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Mutex (PUMX, 0x00)
        Name (WDG, Buffer (0xF0)
        {
            /* 0000 */  0xE3, 0x08, 0x8D, 0x98, 0xF4, 0x68, 0x35, 0x4C,  // .....h5L
            /* 0008 */  0xAF, 0x3E, 0x6A, 0x1B, 0x81, 0x06, 0xF8, 0x3C,  // .>j....<
            /* 0010 */  0x53, 0x54, 0x00, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // ST..=.2.
            /* 0018 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
            /* 0020 */  0xAD, 0xB9, 0xBF, 0x05, 0x49, 0x4E, 0x00, 0x00,  // ....IN..
            /* 0028 */  0x49, 0x4B, 0x11, 0x2D, 0xFB, 0x2D, 0x30, 0x41,  // IK.-.-0A
            /* 0030 */  0xB8, 0xFE, 0x4A, 0x3C, 0x09, 0xE7, 0x51, 0x33,  // ..J<..Q3
            /* 0038 */  0x45, 0x4E, 0x00, 0x00, 0x46, 0x97, 0xEA, 0x14,  // EN..F...
            /* 0040 */  0x1F, 0xCE, 0x98, 0x40, 0xA0, 0xE0, 0x70, 0x45,  // ...@..pE
            /* 0048 */  0xCB, 0x4D, 0xA7, 0x45, 0x4F, 0x4C, 0x00, 0x00,  // .M.EOL..
            /* 0050 */  0x28, 0x20, 0x2F, 0x32, 0x84, 0x0F, 0x01, 0x49,  // ( /2...I
            /* 0058 */  0x98, 0x8E, 0x01, 0x51, 0x76, 0x04, 0x9E, 0x2D,  // ...Qv..-
            /* 0060 */  0x50, 0x57, 0x00, 0x00, 0xB6, 0x63, 0x4E, 0xDF,  // PW...cN.
            /* 0068 */  0xBC, 0x3B, 0x58, 0x48, 0x97, 0x37, 0xC7, 0x4F,  // .;XH.7.O
            /* 0070 */  0x82, 0xF8, 0x21, 0xF3, 0x42, 0x55, 0x00, 0x00,  // ..!.BU..
            /* 0078 */  0x2D, 0x7C, 0x22, 0x41, 0xE1, 0x80, 0x3F, 0x42,  // -|"A..?B
            /* 0080 */  0x8B, 0x8E, 0x87, 0xE3, 0x27, 0x55, 0xA0, 0xEB,  // ....'U..
            /* 0088 */  0x50, 0x45, 0x02, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // PE..6d..
            /* 0090 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
            /* 0098 */  0x24, 0xF2, 0x0C, 0x9A, 0x53, 0x53, 0x00, 0x00,  // $...SS..
            /* 00A0 */  0xEB, 0x91, 0x4C, 0x1F, 0x5C, 0xDC, 0x0B, 0x46,  // ..L.\..F
            /* 00A8 */  0x95, 0x1D, 0xC7, 0xCB, 0x9B, 0x4B, 0x8D, 0x5E,  // .....K.^
            /* 00B0 */  0x42, 0x53, 0x01, 0x02, 0x61, 0xA6, 0x91, 0x73,  // BS..a..s
            /* 00B8 */  0x3A, 0x22, 0xDB, 0x47, 0xA7, 0x7A, 0x7B, 0xE8,  // :".G.z{.
            /* 00C0 */  0x4C, 0x60, 0x82, 0x2D, 0x55, 0x49, 0x01, 0x02,  // L`.-UI..
            /* 00C8 */  0x18, 0x43, 0x81, 0x2B, 0xE8, 0x4B, 0x07, 0x47,  // .C.+.K.G
            /* 00D0 */  0x9D, 0x84, 0xA1, 0x90, 0xA8, 0x59, 0xB5, 0xD0,  // .....Y..
            /* 00D8 */  0x80, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
            /* 00E0 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
            /* 00E8 */  0xC9, 0x06, 0x29, 0x10, 0x5A, 0x5A, 0x01, 0x00   // ..).ZZ..
        })
        Name (WDUN, Ones)
        Method (_WDG, 0, Serialized)
        {
            TWDC++
            If (WDUN)
            {
                Acquire (PUMX, 0xFFFF)
                Local1 = Zero
                ENIC = Zero
                While (((ENIC == Zero) && (Local1 < 0x14)))
                {
                    GSWS (0x04F3)
                    If ((ENIC == Zero))
                    {
                        Sleep (One)
                    }

                    Local1++
                    IWDC = Local1
                }

                WDUN = Zero
                UWIC (Zero, STIC)
                UWIC (One, INIC)
                UWIC (0x02, ENIC)
                UWIC (0x03, OLIC)
                If ((PWIC == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = PWIC /* \PWIC */
                }

                UWIC (0x04, Local0)
                UWIC (0x05, BUIC)
                UWIC (0x06, SizeOf (CBWE))
                UWIC (0x07, WSSC)
                Release (PUMX)
            }

            Return (WDG) /* \_SB_.WMIB.WDG_ */
        }

        Method (UWIC, 2, Serialized)
        {
            Local0 = (Arg0 * 0x14)
            Local0 += 0x12
            WDG [Local0] = Arg1
        }

        Name (WQZZ, Buffer (0x1CF5)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0xE5, 0x1C, 0x00, 0x00, 0x18, 0x96, 0x00, 0x00,  // ........
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x28, 0xB9, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
            /* 0020 */  0x10, 0x3D, 0x10, 0x92, 0x64, 0x82, 0x42, 0x04,  // .=..d.B.
            /* 0028 */  0x12, 0x01, 0x61, 0x18, 0x14, 0x01, 0x01, 0x92,  // ..a.....
            /* 0030 */  0x0B, 0x0E, 0x45, 0x82, 0x42, 0xF5, 0x27, 0x90,  // ..E.B.'.
            /* 0038 */  0x1C, 0x10, 0x99, 0x14, 0xA0, 0x5B, 0x80, 0x73,  // .....[.s
            /* 0040 */  0x01, 0xD2, 0x05, 0x18, 0x06, 0x91, 0x63, 0x01,  // ......c.
            /* 0048 */  0x96, 0x05, 0xE8, 0x44, 0x91, 0x6D, 0x10, 0x11,  // ...D.m..
            /* 0050 */  0x18, 0x2B, 0x41, 0x07, 0x10, 0x02, 0xF5, 0x00,  // .+A.....
            /* 0058 */  0x3C, 0x0A, 0xEE, 0x1A, 0x50, 0xE6, 0x47, 0x40,  // <...P.G@
            /* 0060 */  0x20, 0x0A, 0x82, 0x43, 0xC9, 0x80, 0x90, 0x72,  //  ..C...r
            /* 0068 */  0x38, 0x4D, 0xA0, 0xE4, 0x91, 0x50, 0x88, 0xC2,  // 8M...P..
            /* 0070 */  0x46, 0x83, 0x12, 0x02, 0x21, 0x87, 0x93, 0x91,  // F...!...
            /* 0078 */  0x4D, 0x01, 0x52, 0x05, 0x98, 0x15, 0x20, 0x54,  // M.R... T
            /* 0080 */  0x80, 0x45, 0x20, 0x8D, 0xC7, 0xD0, 0x4D, 0xCF,  // .E ...M.
            /* 0088 */  0x47, 0x9E, 0x21, 0x89, 0xFC, 0x41, 0xA0, 0x46,  // G.!..A.F
            /* 0090 */  0x66, 0x68, 0x1B, 0x9C, 0x96, 0x30, 0x43, 0xD6,  // fh...0C.
            /* 0098 */  0x3E, 0x2C, 0x2A, 0x16, 0x42, 0x0A, 0x20, 0x34,  // >,*.B. 4
            /* 00A0 */  0x1E, 0xF0, 0x2B, 0x14, 0xE0, 0x1B, 0x41, 0xB2,  // ..+...A.
            /* 00A8 */  0xB1, 0xC9, 0x80, 0x12, 0x0C, 0x34, 0x70, 0xF4,  // .....4p.
            /* 00B0 */  0x28, 0x3C, 0x68, 0x5C, 0x80, 0x41, 0x53, 0x51,  // (<h\.ASQ
            /* 00B8 */  0x20, 0x94, 0xC0, 0x52, 0x20, 0xE4, 0x15, 0x51,  //  ..R ..Q
            /* 00C0 */  0xF3, 0x2A, 0x11, 0x55, 0x47, 0x00, 0x8F, 0x24,  // .*.UG..$
            /* 00C8 */  0xCA, 0x63, 0x01, 0x1B, 0x37, 0xF0, 0x59, 0x85,  // .c..7.Y.
            /* 00D0 */  0x81, 0xFD, 0xFF, 0x1F, 0x18, 0x17, 0x03, 0xA2,  // ........
            /* 00D8 */  0xB1, 0x1C, 0x45, 0xD0, 0x03, 0x0F, 0x6A, 0xE1,  // ..E...j.
            /* 00E0 */  0x33, 0x27, 0x93, 0x3C, 0x46, 0x47, 0x85, 0x90,  // 3'.<FG..
            /* 00E8 */  0x04, 0x08, 0xCD, 0x21, 0x34, 0x46, 0x12, 0x84,  // ...!4F..
            /* 00F0 */  0x9C, 0x8E, 0x02, 0x05, 0x17, 0x3E, 0xCC, 0xF1,  // .....>..
            /* 00F8 */  0x19, 0xE7, 0xF8, 0x0C, 0xCF, 0x47, 0xDB, 0xFA,  // .....G..
            /* 0100 */  0xAC, 0x85, 0x10, 0x10, 0x8F, 0x73, 0x7C, 0x6C,  // .....s|l
            /* 0108 */  0xC0, 0xE0, 0x38, 0x18, 0x00, 0x87, 0x01, 0xE3,  // ..8.....
            /* 0110 */  0x13, 0x0D, 0x58, 0x4E, 0x06, 0x8C, 0x1A, 0x8F,  // ..XN....
            /* 0118 */  0xA1, 0x4F, 0x8B, 0x21, 0x1E, 0x5F, 0xD8, 0xB7,  // .O.!._..
            /* 0120 */  0x0A, 0x13, 0x54, 0x0F, 0x2A, 0x0B, 0x43, 0x03,  // ..T.*.C.
            /* 0128 */  0x0D, 0xA0, 0x87, 0x06, 0x5F, 0xE4, 0xD0, 0x4C,  // ...._..L
            /* 0130 */  0xE9, 0x21, 0x50, 0xAD, 0x78, 0x9A, 0xF7, 0x91,  // .!P.x...
            /* 0138 */  0xC7, 0x3C, 0xB7, 0x28, 0x6F, 0x03, 0xCF, 0x01,  // .<.(o...
            /* 0140 */  0xFC, 0xB4, 0xE0, 0xE1, 0xF8, 0x58, 0xE0, 0x71,  // .....X.q
            /* 0148 */  0xDA, 0x18, 0x84, 0x94, 0x41, 0xC8, 0x19, 0x84,  // ....A...
            /* 0150 */  0xA4, 0x41, 0x28, 0xD9, 0x10, 0x50, 0x83, 0xF5,  // .A(..P..
            /* 0158 */  0x10, 0x30, 0x53, 0x4D, 0xE0, 0x24, 0x23, 0x40,  // .0SM.$#@
            /* 0160 */  0x65, 0x80, 0x90, 0xD5, 0xE9, 0xEA, 0x2C, 0x12,  // e.....,.
            /* 0168 */  0xE2, 0x34, 0x7B, 0x3F, 0x16, 0x90, 0xB1, 0x3E,  // .4{?...>
            /* 0170 */  0x18, 0x58, 0xB3, 0x80, 0xFF, 0xFF, 0x08, 0xCF,  // .X......
            /* 0178 */  0x35, 0xF6, 0x99, 0x3D, 0x1D, 0x60, 0x56, 0x11,  // 5..=.`V.
            /* 0180 */  0xAE, 0xE8, 0x1B, 0x06, 0x41, 0x7B, 0xB6, 0xF0,  // ....A{..
            /* 0188 */  0x35, 0x23, 0x60, 0xB8, 0x08, 0xE1, 0xD8, 0x1D,  // 5#`.....
            /* 0190 */  0xE0, 0x24, 0x3D, 0x92, 0x08, 0x2F, 0x08, 0xEC,  // .$=../..
            /* 0198 */  0xC4, 0x10, 0xE4, 0x6D, 0xC5, 0x93, 0x37, 0xAC,  // ...m..7.
            /* 01A0 */  0xA7, 0xDC, 0x27, 0x94, 0x40, 0x83, 0x19, 0xDB,  // ..'.@...
            /* 01A8 */  0x97, 0x01, 0x36, 0x2A, 0x5F, 0x0C, 0xE0, 0xCF,  // ..6*_...
            /* 01B0 */  0x24, 0xAC, 0x91, 0x4F, 0xF4, 0x50, 0x4D, 0x30,  // $..O.PM0
            /* 01B8 */  0xF9, 0xC5, 0x00, 0xCA, 0x2C, 0x7C, 0x3D, 0xF1,  // ....,|=.
            /* 01C0 */  0x15, 0xC1, 0xA8, 0x2F, 0x06, 0x2C, 0xE5, 0xC5,  // .../.,..
            /* 01C8 */  0x00, 0x54, 0x37, 0x0C, 0x5F, 0x0C, 0xE0, 0xCB,  // .T7._...
            /* 01D0 */  0xBD, 0x18, 0x80, 0x42, 0xDC, 0x3D, 0x80, 0x7A,  // ...B.=.z
            /* 01D8 */  0x80, 0x90, 0xAC, 0x71, 0x52, 0x6B, 0x37, 0x03,  // ...qRk7.
            /* 01E0 */  0x72, 0x36, 0x60, 0x30, 0x9E, 0x61, 0x18, 0x63,  // r6`0.a.c
            /* 01E8 */  0x84, 0xF1, 0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB,  // ..(..`..
            /* 01F0 */  0x01, 0xF4, 0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D,  // ....@%..
            /* 01F8 */  0x40, 0x39, 0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7,  // @9.ty4..
            /* 0200 */  0x80, 0xA7, 0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE,  // ........
            /* 0208 */  0xC6, 0x2A, 0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8,  // .*.@..4.
            /* 0210 */  0xD4, 0xA2, 0xF8, 0x54, 0xE0, 0xB5, 0xD4, 0x08,  // ...T....
            /* 0218 */  0x27, 0x9C, 0x33, 0xF1, 0x54, 0x0D, 0x67, 0xA0,  // '.3.T.g.
            /* 0220 */  0xAA, 0xE1, 0x10, 0xFF, 0x7F, 0x38, 0xEC, 0xA9,  // .....8..
            /* 0228 */  0xE0, 0x35, 0x80, 0x41, 0xBC, 0xB1, 0x9C, 0x96,  // .5.A....
            /* 0230 */  0x11, 0x61, 0x1C, 0x52, 0x1E, 0x19, 0x6C, 0x0B,  // .a.R..l.
            /* 0238 */  0x87, 0x40, 0x86, 0x79, 0x27, 0x60, 0x90, 0x15,  // .@.y'`..
            /* 0240 */  0x9F, 0x77, 0x08, 0xF0, 0x2B, 0x42, 0x9C, 0x08,  // .w..+B..
            /* 0248 */  0xEF, 0x0C, 0xEC, 0xB2, 0x00, 0xBE, 0x48, 0x97,  // ......H.
            /* 0250 */  0x05, 0x34, 0xB4, 0x4F, 0x32, 0xBE, 0x20, 0x18,  // .4.O2. .
            /* 0258 */  0xF6, 0xC4, 0x59, 0x80, 0xBB, 0x02, 0xA8, 0x40,  // ..Y....@
            /* 0260 */  0x7D, 0x57, 0x80, 0x7F, 0x21, 0x78, 0x57, 0x00,  // }W..!xW.
            /* 0268 */  0xC3, 0xBC, 0x7C, 0x2B, 0xE0, 0x9A, 0x0E, 0x25,  // ..|+...%
            /* 0270 */  0xE8, 0x33, 0x89, 0xAF, 0x0B, 0xB8, 0x29, 0xB2,  // .3....).
            /* 0278 */  0x54, 0x47, 0x05, 0xE8, 0x29, 0x26, 0x81, 0xD2,  // TG..)&..
            /* 0280 */  0x7F, 0x54, 0x80, 0x34, 0xC3, 0x27, 0x92, 0xD7,  // .T.4.'..
            /* 0288 */  0x00, 0x9F, 0x16, 0xF8, 0x59, 0x88, 0x5D, 0x47,  // ....Y.]G
            /* 0290 */  0x70, 0x57, 0x12, 0x86, 0xF2, 0x6C, 0xE0, 0x4B,  // pW...l.K
            /* 0298 */  0x16, 0x3F, 0x1C, 0xC0, 0x00, 0xF7, 0x2C, 0x0E,  // .?....,.
            /* 02A0 */  0x31, 0x42, 0x6C, 0x76, 0xE0, 0x7A, 0x35, 0x78,  // 1Blv.z5x
            /* 02A8 */  0x2F, 0xF0, 0x85, 0x88, 0xFF, 0xFF, 0x4F, 0x06,  // /.....O.
            /* 02B0 */  0xE0, 0x13, 0x08, 0x8C, 0x3E, 0x1A, 0xD8, 0xAF,  // ....>...
            /* 02B8 */  0x00, 0x84, 0xE0, 0x65, 0x8E, 0x43, 0x73, 0x89,  // ...e.Cs.
            /* 02C0 */  0xF0, 0xA4, 0x63, 0xF8, 0x48, 0xCF, 0x2C, 0x7C,  // ..c.H.,|
            /* 02C8 */  0x06, 0xA7, 0xE5, 0x11, 0x98, 0xC0, 0x07, 0x1E,  // ........
            /* 02D0 */  0x32, 0x00, 0x7A, 0xCE, 0xF1, 0x00, 0xF8, 0x31,  // 2.z....1
            /* 02D8 */  0x22, 0xFE, 0xE1, 0x84, 0x0D, 0x1C, 0x3E, 0xCA,  // ".....>.
            /* 02E0 */  0x39, 0x1C, 0x8F, 0xAF, 0x24, 0x11, 0xEA, 0x82,  // 9...$...
            /* 02E8 */  0xD0, 0x21, 0xC2, 0x08, 0x07, 0x10, 0xE5, 0xBC,  // .!......
            /* 02F0 */  0xDF, 0x14, 0x4C, 0xE0, 0xE3, 0x80, 0x0F, 0x0C,  // ..L.....
            /* 02F8 */  0xFC, 0x14, 0xE7, 0x21, 0xC1, 0x98, 0x72, 0x14,  // ...!..r.
            /* 0300 */  0x7B, 0x9C, 0x14, 0x19, 0x1E, 0x3B, 0x35, 0x78,  // {....;5x
            /* 0308 */  0x3C, 0x1C, 0x1A, 0x87, 0xF8, 0x40, 0x70, 0xAE,  // <....@p.
            /* 0310 */  0x56, 0x3A, 0x43, 0xE4, 0x29, 0xC2, 0x93, 0x3A,  // V:C.)..:
            /* 0318 */  0xC2, 0x03, 0xC4, 0x0E, 0x80, 0xCB, 0x7B, 0x55,  // ......{U
            /* 0320 */  0x19, 0xC8, 0x3F, 0x04, 0x09, 0x82, 0x41, 0x5D,  // ..?...A]
            /* 0328 */  0x64, 0x7C, 0xD2, 0xC3, 0x0F, 0x81, 0x1D, 0x26,  // d|.....&
            /* 0330 */  0xD8, 0x39, 0xC9, 0x70, 0xFC, 0x00, 0xE0, 0x51,  // .9.p...Q
            /* 0338 */  0xBD, 0xE1, 0xBC, 0x74, 0x79, 0x98, 0x3E, 0x22,  // ...ty.>"
            /* 0340 */  0x84, 0x64, 0x47, 0x31, 0xDC, 0xA9, 0xC2, 0x57,  // .dG1...W
            /* 0348 */  0x05, 0x5F, 0x45, 0x8C, 0xF8, 0xB0, 0xE2, 0x53,  // ._E....S
            /* 0350 */  0x83, 0xA1, 0x60, 0x1C, 0x06, 0x30, 0x37, 0x42,  // ..`..07B
            /* 0358 */  0xDF, 0x13, 0x0C, 0xF5, 0x9E, 0x74, 0x18, 0x8F,  // .....t..
            /* 0360 */  0x84, 0x26, 0xF0, 0xA5, 0xE1, 0x28, 0x30, 0x47,  // .&...(0G
            /* 0368 */  0x0E, 0xDF, 0x96, 0x0C, 0xEF, 0xFF, 0x3F, 0x81,  // ......?.
            /* 0370 */  0xDD, 0x9F, 0x13, 0x84, 0xFF, 0x94, 0xF3, 0x7E,  // .......~
            /* 0378 */  0xF1, 0x16, 0xF0, 0xA8, 0x10, 0x23, 0xCA, 0x83,  // .....#..
            /* 0380 */  0x4A, 0x94, 0x48, 0xA7, 0x1B, 0x85, 0x79, 0xBB,  // J.H...y.
            /* 0388 */  0x39, 0x08, 0x22, 0x4A, 0x73, 0x73, 0x13, 0x52,  // 9."Jss.R
            /* 0390 */  0xA0, 0x28, 0x47, 0x1E, 0x33, 0x4E, 0xAC, 0x20,  // .(G.3N. 
            /* 0398 */  0x81, 0xDE, 0x37, 0xA2, 0x84, 0x8D, 0x11, 0x2E,  // ..7.....
            /* 03A0 */  0x50, 0xFB, 0xC7, 0x04, 0x36, 0x64, 0x7A, 0x56,  // P...6dzV
            /* 03A8 */  0xC0, 0x9D, 0x1D, 0xE0, 0x4E, 0x8F, 0x9F, 0x1E,  // ....N...
            /* 03B0 */  0x00, 0x27, 0x40, 0x4F, 0x0F, 0x60, 0x3B, 0x6F,  // .'@O.`;o
            /* 03B8 */  0xC0, 0x3D, 0x10, 0x20, 0xBE, 0x2B, 0x06, 0xA2,  // .=. .+..
            /* 03C0 */  0xC1, 0xAF, 0x2C, 0x14, 0x8E, 0x87, 0xBE, 0x59,  // ..,....Y
            /* 03C8 */  0xD1, 0x63, 0x09, 0xEE, 0x70, 0xE0, 0x23, 0x83,  // .c..p.#.
            /* 03D0 */  0x0F, 0x90, 0xB8, 0xA1, 0xF8, 0x50, 0x81, 0x3C,  // .....P.<
            /* 03D8 */  0x0B, 0x80, 0x62, 0xF4, 0x6C, 0x04, 0xEC, 0x06,  // ..b.l...
            /* 03E0 */  0xF3, 0xD2, 0xF2, 0xDE, 0xE0, 0xFF, 0xFF, 0x1C,  // ........
            /* 03E8 */  0x7C, 0x4A, 0xC1, 0x1D, 0x04, 0xC0, 0x77, 0x0C,  // |J....w.
            /* 03F0 */  0x00, 0xEF, 0x60, 0xB8, 0xAC, 0x31, 0xA3, 0x84,  // ..`..1..
            /* 03F8 */  0xC0, 0x68, 0xCC, 0xB8, 0x43, 0x08, 0x3F, 0x11,  // .h..C.?.
            /* 0400 */  0xE0, 0xC6, 0xEC, 0x71, 0x7B, 0xCC, 0xB8, 0xE3,  // ...q{...
            /* 0408 */  0x2C, 0x1F, 0xD5, 0x53, 0x46, 0x28, 0x1F, 0x38,  // ,..SF(.8
            /* 0410 */  0xD8, 0x39, 0xE3, 0x8D, 0x80, 0x0F, 0x1D, 0x78,  // .9.....x
            /* 0418 */  0x1C, 0x60, 0x70, 0x47, 0x0A, 0x30, 0x5E, 0x0E,  // .`pG.0^.
            /* 0420 */  0xD8, 0xD8, 0xC1, 0x1D, 0x84, 0x9C, 0x02, 0x59,  // .......Y
            /* 0428 */  0x3A, 0x8C, 0xC6, 0x8E, 0x93, 0x0D, 0xA4, 0x63,  // :......c
            /* 0430 */  0x8C, 0x0F, 0xB9, 0x1E, 0x3B, 0x6E, 0xB0, 0x1E,  // ....;n..
            /* 0438 */  0x3B, 0xEE, 0xF8, 0x82, 0xFF, 0xFF, 0x1F, 0x5F,  // ;......_
            /* 0440 */  0xE0, 0x8F, 0x81, 0x8B, 0x1F, 0x06, 0xFA, 0xE6,  // ........
            /* 0448 */  0xE7, 0xD1, 0x19, 0xDC, 0xC3, 0xF6, 0x09, 0x26,  // .......&
            /* 0450 */  0xC6, 0x1B, 0x4C, 0x88, 0x47, 0x96, 0x97, 0x96,  // ..L.G...
            /* 0458 */  0x08, 0x0F, 0x2D, 0xBE, 0xB9, 0xBC, 0xB4, 0xF8,  // ..-.....
            /* 0460 */  0x16, 0x63, 0x94, 0x10, 0x11, 0x0E, 0x26, 0xCE,  // .c....&.
            /* 0468 */  0x13, 0x8C, 0x11, 0x0E, 0x3C, 0x8A, 0x21, 0x22,  // ....<.!"
            /* 0470 */  0x9C, 0x40, 0x88, 0x93, 0x3E, 0xD9, 0x20, 0xE1,  // .@..>. .
            /* 0478 */  0x63, 0x84, 0x8D, 0x16, 0xE5, 0x09, 0x86, 0x8D,  // c.......
            /* 0480 */  0x85, 0x9F, 0x57, 0x3C, 0x78, 0x7E, 0x5A, 0xF3,  // ..W<x~Z.
            /* 0488 */  0x5D, 0xD0, 0x93, 0x39, 0xC7, 0x87, 0x2C, 0x4F,  // ]..9..,O
            /* 0490 */  0xED, 0x71, 0xD2, 0x87, 0x59, 0xDC, 0xA0, 0x1E,  // .q..Y...
            /* 0498 */  0x1C, 0xD9, 0x5D, 0xC7, 0xC7, 0x6B, 0xEC, 0x29,  // ..]..k.)
            /* 04A0 */  0xC8, 0x43, 0xE0, 0x27, 0x02, 0x5F, 0x10, 0x3D,  // .C.'._.=
            /* 04A8 */  0x59, 0xDF, 0xF5, 0xD8, 0xBD, 0xCC, 0x18, 0xD5,  // Y.......
            /* 04B0 */  0x4F, 0x01, 0x75, 0x4C, 0x39, 0x83, 0x57, 0x08,  // O.uL9.W.
            /* 04B8 */  0x76, 0xCF, 0xF3, 0x21, 0xDB, 0x77, 0x49, 0x36,  // v..!.wI6
            /* 04C0 */  0x0A, 0xDC, 0x21, 0xC1, 0x67, 0x24, 0x7E, 0xAA,  // ..!.g$~.
            /* 04C8 */  0xF0, 0x30, 0x3C, 0x0A, 0x18, 0x33, 0x78, 0x47,  // .0<..3xG
            /* 04D0 */  0x38, 0xB4, 0x10, 0x07, 0xFC, 0xBE, 0xCB, 0x86,  // 8.......
            /* 04D8 */  0x1A, 0xE3, 0xF4, 0x7C, 0xFE, 0x60, 0x83, 0x80,  // ...|.`..
            /* 04E0 */  0x0F, 0x75, 0xA8, 0x1E, 0xE6, 0x51, 0xBD, 0x14,  // .u...Q..
            /* 04E8 */  0x32, 0x9C, 0xB3, 0x83, 0x3B, 0x08, 0xEC, 0xF1,  // 2...;...
            /* 04F0 */  0xC3, 0x83, 0xE0, 0x37, 0x4B, 0x3E, 0x08, 0x76,  // ...7K>.v
            /* 04F8 */  0xBE, 0x79, 0x83, 0x33, 0xC8, 0x31, 0xFC, 0xFF,  // .y.3.1..
            /* 0500 */  0x8F, 0x01, 0xEE, 0x99, 0xCA, 0x47, 0x13, 0xC4,  // .....G..
            /* 0508 */  0x11, 0x10, 0x7D, 0xFE, 0xF0, 0x18, 0xDE, 0xE4,  // ..}.....
            /* 0510 */  0xF8, 0x70, 0xB0, 0x47, 0x0F, 0xDC, 0x49, 0x04,  // .p.G..I.
            /* 0518 */  0xEE, 0xB1, 0xEB, 0xA0, 0x7D, 0x8D, 0xF3, 0x45,  // ....}..E
            /* 0520 */  0x0B, 0xC6, 0x7D, 0xEF, 0x59, 0x04, 0xFC, 0x18,  // ..}.Y...
            /* 0528 */  0x8F, 0x2D, 0xE0, 0x38, 0x94, 0x80, 0x3B, 0xD8,  // .-.8..;.
            /* 0530 */  0x71, 0x8D, 0x43, 0x28, 0x0A, 0x8C, 0x0E, 0x25,  // q.C(...%
            /* 0538 */  0xB8, 0x18, 0x40, 0x82, 0x71, 0x8C, 0x33, 0x1A,  // ..@.q.3.
            /* 0540 */  0xFA, 0x12, 0xE9, 0x43, 0x1A, 0x9C, 0x41, 0xC3,  // ...C..A.
            /* 0548 */  0x9E, 0xE7, 0x13, 0x0A, 0xB7, 0x27, 0x40, 0xD1,  // .....'@.
            /* 0550 */  0x09, 0x05, 0x64, 0xB8, 0xCF, 0x20, 0xD8, 0x13,  // ..d.. ..
            /* 0558 */  0x02, 0x3F, 0x83, 0xF0, 0xFF, 0x3F, 0xF4, 0x71,  // .?...?.q
            /* 0560 */  0xBF, 0x37, 0xFA, 0xD4, 0xC8, 0xE6, 0xFE, 0x10,  // .7......
            /* 0568 */  0x70, 0x02, 0xE7, 0xCE, 0x4E, 0xCD, 0xB8, 0x33,  // p...N..3
            /* 0570 */  0x03, 0xF6, 0xFC, 0xE1, 0x21, 0xF0, 0x73, 0x81,  // ....!.s.
            /* 0578 */  0x87, 0xEF, 0x21, 0xE0, 0x07, 0xFF, 0xC0, 0x6C,  // ..!....l
            /* 0580 */  0x70, 0x30, 0x9E, 0x22, 0x7C, 0xED, 0xE0, 0xE0,  // p0."|...
            /* 0588 */  0xFC, 0x34, 0x60, 0x70, 0xFE, 0x0A, 0xF5, 0x79,  // .4`p...y
            /* 0590 */  0x9E, 0x81, 0x63, 0x4F, 0xBD, 0xBE, 0x77, 0x78,  // ..cO..wx
            /* 0598 */  0xBE, 0x3E, 0x54, 0xE0, 0x6F, 0x7A, 0x3E, 0x54,  // .>T.oz>T
            /* 05A0 */  0x80, 0xE3, 0xF0, 0xC0, 0x0F, 0x2B, 0x6C, 0x08,  // .....+l.
            /* 05A8 */  0x8F, 0x02, 0xF8, 0x53, 0x8B, 0x8F, 0x7F, 0x71,  // ...S...q
            /* 05B0 */  0x9E, 0x22, 0xD8, 0x6D, 0x04, 0x7B, 0xB8, 0x00,  // .".m.{..
            /* 05B8 */  0x1C, 0x45, 0x3B, 0x8B, 0xA1, 0xC2, 0x9C, 0xC5,  // .E;.....
            /* 05C0 */  0xE8, 0xFF, 0xFF, 0x1C, 0x85, 0x38, 0x8B, 0xD1,  // .....8..
            /* 05C8 */  0xC3, 0x05, 0xE0, 0x42, 0xF0, 0xF1, 0x00, 0x34,  // ...B...4
            /* 05D0 */  0x07, 0x81, 0xC7, 0x05, 0x5F, 0x08, 0x8E, 0xE4,  // ...._...
            /* 05D8 */  0x40, 0x9E, 0x0E, 0x00, 0x9F, 0xF2, 0x48, 0xE8,  // @.....H.
            /* 05E0 */  0xF9, 0xC8, 0x82, 0x60, 0x50, 0xE7, 0x03, 0x9F,  // ...`P...
            /* 05E8 */  0x50, 0x7C, 0xEC, 0xE0, 0x67, 0x03, 0xDF, 0xC8,  // P|..g...
            /* 05F0 */  0x3D, 0x54, 0x7E, 0x6A, 0xF6, 0x49, 0x9B, 0x07,  // =T~j.I..
            /* 05F8 */  0xFF, 0x49, 0xCB, 0x06, 0x8C, 0x02, 0x0D, 0x03,  // .I......
            /* 0600 */  0x35, 0x22, 0x1F, 0x91, 0xFC, 0xFF, 0x3F, 0xB7,  // 5"....?.
            /* 0608 */  0xE1, 0x02, 0x0C, 0x8D, 0x9E, 0xC3, 0x61, 0x1C,  // ......a.
            /* 0610 */  0x70, 0x7D, 0x0E, 0xC7, 0x0E, 0xC8, 0xE7, 0x70,  // p}.....p
            /* 0618 */  0xF8, 0xE7, 0x68, 0xF8, 0x63, 0x63, 0xA7, 0x7B,  // ..h.cc.{
            /* 0620 */  0x3E, 0x30, 0x58, 0xD7, 0x6F, 0xCC, 0xC0, 0xC0,  // >0X.o...
            /* 0628 */  0xF6, 0x2D, 0xF2, 0xC0, 0x80, 0x23, 0xEA, 0xD9,  // .-...#..
            /* 0630 */  0xF8, 0x0A, 0xE1, 0x81, 0x81, 0x0D, 0xD0, 0x03,  // ........
            /* 0638 */  0x03, 0x3E, 0xB1, 0x20, 0xE4, 0x64, 0x60, 0xA8,  // .>. .d`.
            /* 0640 */  0x53, 0x86, 0x91, 0x63, 0x3E, 0x71, 0x78, 0x18,  // S..c>qx.
            /* 0648 */  0x3E, 0x54, 0x44, 0x7D, 0x06, 0x78, 0xC4, 0x63,  // >TD}.x.c
            /* 0650 */  0x63, 0xE3, 0xFF, 0xFF, 0xB1, 0x81, 0xE3, 0xD8,  // c.......
            /* 0658 */  0xE2, 0xB1, 0x81, 0xFF, 0x08, 0x8F, 0x1F, 0x1B,  // ........
            /* 0660 */  0x9C, 0xB1, 0x3C, 0x9A, 0xF8, 0x32, 0x73, 0x64,  // ..<..2sd
            /* 0668 */  0xA7, 0x71, 0x66, 0xAF, 0x21, 0x3E, 0xDA, 0x3D,  // .qf.!>.=
            /* 0670 */  0x7E, 0x7B, 0x6C, 0xE0, 0xB2, 0x30, 0x36, 0xA0,  // ~{l..06.
            /* 0678 */  0x14, 0x72, 0x6C, 0xE8, 0x43, 0x8A, 0x4F, 0x01,  // .rl.C.O.
            /* 0680 */  0x36, 0x8E, 0x4A, 0xE6, 0xE1, 0xE3, 0x95, 0x4F,  // 6.J....O
            /* 0688 */  0x0C, 0x47, 0x17, 0xE4, 0x0D, 0xDD, 0x97, 0x0B,  // .G......
            /* 0690 */  0x1F, 0x69, 0x0C, 0xE6, 0x4B, 0x8B, 0xCF, 0xA0,  // .i..K...
            /* 0698 */  0x7C, 0x88, 0xE0, 0xD2, 0x30, 0x44, 0xA0, 0x14,  // |...0D..
            /* 06A0 */  0x6A, 0x88, 0xE8, 0xF1, 0xF8, 0xFF, 0x7F, 0x99,  // j.......
            /* 06A8 */  0x39, 0x44, 0x36, 0x34, 0xF0, 0x7E, 0x63, 0x34,  // 9D64.~c4
            /* 06B0 */  0x34, 0x20, 0x14, 0x6E, 0x68, 0xE8, 0xC3, 0x9A,  // 4 .nh...
            /* 06B8 */  0x0F, 0x01, 0x0C, 0xC2, 0xB7, 0x01, 0x76, 0x15,  // ......v.
            /* 06C0 */  0xF0, 0x55, 0xC8, 0x03, 0x7C, 0x12, 0x65, 0xC3,  // .U..|.e.
            /* 06C8 */  0x03, 0xDF, 0xA0, 0x3C, 0x3C, 0xE0, 0x13, 0x1E,  // ...<<...
            /* 06D0 */  0xD8, 0xAB, 0xF0, 0xF0, 0xE8, 0x59, 0xC9, 0xC3,  // .....Y..
            /* 06D8 */  0x83, 0x07, 0xF2, 0x18, 0xC1, 0xCE, 0x21, 0x1E,  // ......!.
            /* 06E0 */  0x1C, 0x38, 0x4C, 0x0C, 0x0E, 0x14, 0x47, 0x7F,  // .8L...G.
            /* 06E8 */  0xDC, 0x10, 0xD8, 0x65, 0xD6, 0x13, 0xE7, 0x57,  // ...e...W
            /* 06F0 */  0x16, 0x0F, 0x0A, 0xC6, 0xFF, 0xFF, 0x08, 0x00,  // ........
            /* 06F8 */  0xE7, 0x38, 0x03, 0xBE, 0x60, 0x87, 0x03, 0xF4,  // .8..`...
            /* 0700 */  0x31, 0x91, 0x8D, 0xE1, 0x21, 0xE2, 0xC1, 0xD5,  // 1...!...
            /* 0708 */  0x03, 0xF1, 0xB5, 0xE3, 0xB5, 0x18, 0x77, 0x34,  // ......w4
            /* 0710 */  0x00, 0x97, 0x8A, 0xA3, 0x01, 0x50, 0x3A, 0xD8,  // .....P:.
            /* 0718 */  0x82, 0xE3, 0x9E, 0xE6, 0xA3, 0x1D, 0x66, 0x8E,  // ......f.
            /* 0720 */  0x1E, 0xC0, 0xF3, 0x9B, 0x47, 0xCB, 0xCF, 0x6F,  // ....G..o
            /* 0728 */  0x80, 0xA3, 0xA0, 0x07, 0x5B, 0x3A, 0x70, 0x47,  // ....[:pG
            /* 0730 */  0x83, 0x41, 0x9D, 0xDF, 0x70, 0xFF, 0xFF, 0xF3,  // .A..p...
            /* 0738 */  0x1B, 0xFC, 0x08, 0xE0, 0x3A, 0xD3, 0xF8, 0xFC,  // ....:...
            /* 0740 */  0x02, 0x67, 0xA8, 0x07, 0xED, 0x6B, 0x82, 0x67,  // .g...k.g
            /* 0748 */  0xED, 0x1B, 0x17, 0x3B, 0x27, 0x80, 0x6B, 0x40,  // ...;'.k@
            /* 0750 */  0x3E, 0xE9, 0x00, 0x47, 0xE0, 0x93, 0x78, 0xC0,  // >..G..x.
            /* 0758 */  0x3F, 0x34, 0x30, 0x0F, 0xCB, 0x43, 0x03, 0x3E,  // ?40..C.>
            /* 0760 */  0x47, 0x03, 0xDC, 0x89, 0x02, 0x3C, 0xB7, 0x11,  // G....<..
            /* 0768 */  0xDC, 0x81, 0x02, 0x78, 0xFC, 0xFF, 0x0F, 0x14,  // ...x....
            /* 0770 */  0xC0, 0xE9, 0x88, 0xEF, 0x71, 0x71, 0x68, 0x1C,  // ....qqh.
            /* 0778 */  0xE2, 0x43, 0xDA, 0x39, 0xFB, 0xFC, 0x75, 0xA6,  // .C.9..u.
            /* 0780 */  0xB8, 0xB3, 0x08, 0x18, 0xC6, 0xC0, 0xE5, 0x2F,  // ......./
            /* 0788 */  0x89, 0x8A, 0x78, 0x60, 0x48, 0x30, 0x0C, 0xEA,  // ..x`H0..
            /* 0790 */  0x04, 0xE4, 0xA1, 0xF8, 0x60, 0xC0, 0x81, 0x7D,  // ....`..}
            /* 0798 */  0x44, 0x60, 0xE7, 0x02, 0x76, 0x80, 0x32, 0x1C,  // D`..v.2.
            /* 07A0 */  0x3F, 0x0B, 0xF8, 0x94, 0xF0, 0x50, 0x73, 0x1C,  // ?....Ps.
            /* 07A8 */  0x8F, 0x9B, 0xBE, 0x9B, 0x19, 0x92, 0x5D, 0x0D,  // ......].
            /* 07B0 */  0x9E, 0x7F, 0xB0, 0xA7, 0x5D, 0x38, 0x47, 0x5C,  // ....]8G\
            /* 07B8 */  0x70, 0x11, 0xF8, 0xAC, 0xE3, 0x51, 0xF0, 0xD3,  // p....Q..
            /* 07C0 */  0x83, 0xE7, 0xF8, 0xC6, 0xE0, 0xD3, 0x03, 0x73,  // .......s
            /* 07C8 */  0x2F, 0xC0, 0xDC, 0xA1, 0x5B, 0x08, 0xC7, 0xF4,  // /...[...
            /* 07D0 */  0xFA, 0x10, 0xE3, 0xA8, 0x1F, 0x1B, 0xDA, 0x12,  // ........
            /* 07D8 */  0xA0, 0x0D, 0x45, 0x77, 0x80, 0x97, 0x81, 0x28,  // ..Ew...(
            /* 07E0 */  0x21, 0x8E, 0x20, 0x52, 0x6B, 0x28, 0x9A, 0x79,  // !. Rk(.y
            /* 07E8 */  0xA4, 0x28, 0x01, 0xE3, 0x19, 0xA6, 0xB1, 0xC9,  // .(......
            /* 07F0 */  0x08, 0x32, 0x46, 0xE8, 0x38, 0xC1, 0xA2, 0x44,  // .2F.8..D
            /* 07F8 */  0x7B, 0x05, 0x68, 0x7F, 0x10, 0x44, 0xEC, 0xD1,  // {.h..D..
            /* 0800 */  0x84, 0x46, 0x3A, 0x59, 0xA2, 0x87, 0xED, 0x63,  // .F:Y...c
            /* 0808 */  0x36, 0xFE, 0xB4, 0x8A, 0xFB, 0xFF, 0x5F, 0x55,  // 6....._U
            /* 0810 */  0xFC, 0x05, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // .......P
            /* 0818 */  0x57, 0x47, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // WG....._
            /* 0820 */  0x2F, 0xB0, 0x47, 0x04, 0x0D, 0x02, 0x35, 0x32,  // /.G...52
            /* 0828 */  0x43, 0x7B, 0x9C, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
            /* 0830 */  0xF2, 0x20, 0xC9, 0x09, 0x15, 0x68, 0x0C, 0xFE,  // . ...h..
            /* 0838 */  0x69, 0xC3, 0xD7, 0x76, 0xCF, 0xD7, 0x27, 0x2F,  // i..v..'/
            /* 0840 */  0xEC, 0x71, 0x04, 0xEE, 0x35, 0x81, 0x1F, 0x48,  // .q..5..H
            /* 0848 */  0x00, 0x67, 0x40, 0x0F, 0x24, 0x60, 0xFA, 0xFF,  // .g@.$`..
            /* 0850 */  0x1F, 0x48, 0xE0, 0x0C, 0x15, 0x37, 0x04, 0x1E,  // .H...7..
            /* 0858 */  0x61, 0x45, 0xF4, 0x30, 0x60, 0xD1, 0x30, 0xA8,  // aE.0`.0.
            /* 0860 */  0x33, 0x14, 0xB8, 0xC4, 0x81, 0xEB, 0xF0, 0xE8,  // 3.......
            /* 0868 */  0xF3, 0x2A, 0x9C, 0x41, 0x9D, 0x76, 0xEF, 0x17,  // .*.A.v..
            /* 0870 */  0x10, 0x72, 0x39, 0xF0, 0xA0, 0xCF, 0xE7, 0x49,  // .r9....I
            /* 0878 */  0x81, 0x1D, 0xA2, 0x80, 0xFF, 0xD8, 0xE0, 0xDC,  // ........
            /* 0880 */  0x00, 0x9E, 0x6C, 0x23, 0x1C, 0x1B, 0xD8, 0x4F,  // ..l#...O
            /* 0888 */  0x51, 0xC0, 0xE9, 0xBC, 0x05, 0xE7, 0x5A, 0xC3,  // Q.....Z.
            /* 0890 */  0x6E, 0xE0, 0xB8, 0xA1, 0x61, 0xFF, 0xFF, 0x43,  // n...a..C
            /* 0898 */  0x83, 0x7F, 0x7C, 0xF7, 0x81, 0x10, 0x30, 0x70,  // ..|...0p
            /* 08A0 */  0x10, 0xE2, 0x97, 0x8A, 0x67, 0x22, 0x7E, 0xE0,  // ....g"~.
            /* 08A8 */  0x02, 0x9C, 0x9F, 0x48, 0xF8, 0x69, 0xCB, 0x27,  // ...H.i.'
            /* 08B0 */  0x12, 0x7E, 0xE0, 0x02, 0xFF, 0xFF, 0xFF, 0xC0,  // .~......
            /* 08B8 */  0x05, 0xCC, 0xEF, 0x57, 0xEF, 0x0C, 0x2F, 0x0D,  // ...W../.
            /* 08C0 */  0x9E, 0xD3, 0xFB, 0x96, 0x31, 0x5E, 0xB4, 0x8C,  // ....1^..
            /* 08C8 */  0x10, 0x85, 0xDD, 0x06, 0xA2, 0xD9, 0xDB, 0x81,  // ........
            /* 08D0 */  0x8B, 0x9C, 0xBA, 0x38, 0x66, 0xA4, 0xA7, 0xAF,  // ...8f...
            /* 08D8 */  0x60, 0x91, 0x22, 0x1E, 0x4E, 0x94, 0x10, 0xC1,  // `.".N...
            /* 08E0 */  0x5E, 0x27, 0x9E, 0xBC, 0x1E, 0xB8, 0x98, 0xE0,  // ^'......
            /* 08E8 */  0x03, 0x17, 0xD0, 0x71, 0x7D, 0xE0, 0x02, 0xB4,  // ...q}...
            /* 08F0 */  0x9E, 0x9B, 0x70, 0xC0, 0xFE, 0xFF, 0x1F, 0xB8,  // ..p.....
            /* 08F8 */  0xC0, 0x74, 0x22, 0x01, 0x5C, 0x8F, 0x15, 0xC6,  // .t".\...
            /* 0900 */  0x18, 0x78, 0x98, 0xE3, 0x08, 0x3F, 0x54, 0xE2,  // .x...?T.
            /* 0908 */  0xE0, 0xA8, 0xF4, 0x83, 0x16, 0x3D, 0x74, 0xFB,  // .....=t.
            /* 0910 */  0x44, 0x81, 0x9F, 0xCB, 0x33, 0xB7, 0xEF, 0x07,  // D...3...
            /* 0918 */  0x3E, 0x14, 0x81, 0xFD, 0xA4, 0x05, 0x1C, 0x0E,  // >.......
            /* 0920 */  0xE8, 0xB8, 0xFF, 0x3F, 0x81, 0x03, 0x1D, 0x9F,  // ...?....
            /* 0928 */  0xD0, 0xA3, 0xF0, 0xA1, 0x1D, 0x77, 0xCC, 0x02,  // .....w..
            /* 0930 */  0xFE, 0x91, 0x81, 0xBD, 0x0A, 0x0F, 0x8C, 0xB2,  // ........
            /* 0938 */  0x18, 0xF5, 0x0D, 0xE2, 0x10, 0xDF, 0xEF, 0x7D,  // .......}
            /* 0940 */  0x96, 0x7B, 0xCF, 0xF0, 0x25, 0x00, 0x73, 0xD3,  // .{..%.s.
            /* 0948 */  0xF7, 0x89, 0x80, 0x1D, 0x7B, 0x7C, 0xD2, 0x02,  // ....{|..
            /* 0950 */  0x4E, 0x43, 0x60, 0xF7, 0x1F, 0xCF, 0x9C, 0x0F,  // NC`.....
            /* 0958 */  0xE1, 0x6C, 0x3C, 0x7A, 0xDC, 0x89, 0x00, 0x7C,  // .l<z...|
            /* 0960 */  0xC7, 0x12, 0xF0, 0x9C, 0x2C, 0x30, 0x33, 0x08,  // ....,03.
            /* 0968 */  0xFF, 0xF4, 0xC1, 0x8E, 0x82, 0x3E, 0xBF, 0x78,  // .....>.x
            /* 0970 */  0xD2, 0x2F, 0x2A, 0x3E, 0x96, 0x80, 0xED, 0xFF,  // ./*>....
            /* 0978 */  0x7F, 0xEE, 0x02, 0x3C, 0x46, 0x39, 0x74, 0xA1,  // ...<F9t.
            /* 0980 */  0xC4, 0x9F, 0xBB, 0x00, 0x81, 0xB7, 0x2E, 0xDF,  // ........
            /* 0988 */  0x94, 0x23, 0xBC, 0x08, 0x9C, 0x41, 0x88, 0x67,  // .#...A.g
            /* 0990 */  0xAD, 0xF7, 0xAD, 0x48, 0xBE, 0x03, 0xC4, 0x79,  // ...H...y
            /* 0998 */  0xEE, 0x32, 0xD8, 0x6B, 0xC7, 0x83, 0x44, 0x94,  // .2.k..D.
            /* 09A0 */  0x67, 0x66, 0x43, 0x3D, 0x37, 0x1B, 0xEA, 0xE4,  // gfC=7...
            /* 09A8 */  0x9F, 0x99, 0x8D, 0x15, 0x36, 0xD0, 0xE3, 0xD7,  // ....6...
            /* 09B0 */  0x5B, 0x57, 0x48, 0x23, 0x3C, 0x77, 0x31, 0xE1,  // [WH#<w1.
            /* 09B8 */  0xE7, 0x2E, 0xA8, 0xFF, 0xFF, 0x73, 0x17, 0xC0,  // .....s..
            /* 09C0 */  0x85, 0xA3, 0x02, 0xEE, 0xDC, 0x05, 0xB6, 0x33,  // .......3
            /* 09C8 */  0x09, 0x60, 0xED, 0x08, 0xE0, 0xFF, 0xFF, 0x99,  // .`......
            /* 09D0 */  0x04, 0xCC, 0xA3, 0x85, 0x79, 0xF6, 0x40, 0x1C,  // ....y.@.
            /* 09D8 */  0xBC, 0x50, 0xE1, 0x1F, 0x07, 0x86, 0x43, 0x05,  // .P....C.
            /* 09E0 */  0x3F, 0x55, 0xD0, 0xF3, 0x14, 0x70, 0x39, 0x30,  // ?U...p90
            /* 09E8 */  0x03, 0x27, 0x21, 0x27, 0x18, 0x9D, 0xA7, 0x70,  // .'!'...p
            /* 09F0 */  0xE3, 0x31, 0xE8, 0xD3, 0x83, 0xAF, 0x04, 0xFC,  // .1......
            /* 09F8 */  0x30, 0xC5, 0x42, 0x43, 0xC8, 0xC2, 0xC9, 0x0B,  // 0.BC....
            /* 0A00 */  0x68, 0x1D, 0xA6, 0xC0, 0x71, 0x65, 0x09, 0x8C,  // h...qe..
            /* 0A08 */  0xBD, 0x1D, 0xBC, 0xCB, 0x79, 0x12, 0x8F, 0x26,  // ....y..&
            /* 0A10 */  0xC7, 0x19, 0xE2, 0xDD, 0xDA, 0x04, 0x0F, 0x06,  // ........
            /* 0A18 */  0x91, 0xDE, 0x6B, 0xD8, 0x00, 0xA3, 0xBF, 0x44,  // ..k....D
            /* 0A20 */  0x98, 0xE0, 0xFF, 0xFF, 0x68, 0x05, 0x0C, 0x21,  // ....h..!
            /* 0A28 */  0xCE, 0x86, 0x9F, 0x2E, 0x8C, 0x79, 0x3A, 0xFC,  // .....y:.
            /* 0A30 */  0x68, 0x05, 0xB0, 0xF0, 0xFF, 0x7F, 0xB4, 0x02,  // h.......
            /* 0A38 */  0xFB, 0xC5, 0xCA, 0x63, 0x3E, 0xE3, 0xB7, 0xA9,  // ...c>...
            /* 0A40 */  0xA7, 0xA9, 0x28, 0xEF, 0xC7, 0xAF, 0x54, 0xEF,  // ..(...T.
            /* 0A48 */  0x06, 0xC6, 0x7A, 0x08, 0x78, 0xAA, 0xF2, 0x9D,  // ..z.x...
            /* 0A50 */  0xCA, 0xC7, 0x8A, 0x27, 0x64, 0xA3, 0xC4, 0x7A,  // ...'d..z
            /* 0A58 */  0xB9, 0x32, 0x66, 0x8C, 0x60, 0xEF, 0x55, 0x31,  // .2f.`.U1
            /* 0A60 */  0x1F, 0xB3, 0x3C, 0xC2, 0x68, 0xC1, 0x7D, 0x42,  // ..<.h.}B
            /* 0A68 */  0xE6, 0x47, 0x2B, 0x80, 0x61, 0x67, 0x12, 0x18,  // .G+.ag..
            /* 0A70 */  0xFF, 0xFF, 0x33, 0x09, 0xE0, 0xE8, 0x68, 0x05,  // ..3...h.
            /* 0A78 */  0xF6, 0xD1, 0xC2, 0x1C, 0x05, 0x8F, 0xFA, 0x1E,  // ........
            /* 0A80 */  0x31, 0x10, 0x0D, 0x07, 0x83, 0x3A, 0xC2, 0x12,  // 1....:..
            /* 0A88 */  0x20, 0x99, 0x00, 0x51, 0xA8, 0xA3, 0x15, 0xFA,  //  ..Q....
            /* 0A90 */  0x20, 0xE2, 0x61, 0x3F, 0x34, 0x78, 0x12, 0xA7,  //  .a?4x..
            /* 0A98 */  0xEA, 0x5B, 0xC3, 0x51, 0x3C, 0x01, 0xF8, 0x70,  // .[.Q<..p
            /* 0AA0 */  0x05, 0xFC, 0x87, 0x06, 0x6B, 0x12, 0xC5, 0x0F,  // ....k...
            /* 0AA8 */  0x0D, 0xDA, 0xFF, 0xFF, 0x94, 0x0C, 0xBC, 0x8F,  // ........
            /* 0AB0 */  0x6B, 0xC0, 0xE5, 0x80, 0x0C, 0xBE, 0x81, 0x81,  // k.......
            /* 0AB8 */  0xE3, 0x90, 0xE6, 0xE3, 0x1A, 0xEE, 0x40, 0xE4,  // ......@.
            /* 0AC0 */  0x81, 0xC5, 0x7C, 0x05, 0x8B, 0xF0, 0x08, 0xE6,  // ..|.....
            /* 0AC8 */  0x6B, 0x06, 0x3B, 0xF1, 0xF9, 0xB4, 0x12, 0x28,  // k.;....(
            /* 0AD0 */  0xCA, 0x6B, 0x0B, 0x3F, 0x4E, 0x83, 0x4B, 0xC7,  // .k.?N.K.
            /* 0AD8 */  0x71, 0x1A, 0x50, 0xF0, 0xFF, 0x3F, 0x12, 0xC0,  // q.P..?..
            /* 0AE0 */  0x99, 0x85, 0x2F, 0x58, 0xEC, 0x48, 0x00, 0x36,  // ../X.H.6
            /* 0AE8 */  0x1F, 0x47, 0x02, 0xA0, 0x34, 0x0C, 0x1F, 0xE6,  // .G..4...
            /* 0AF0 */  0xC0, 0x06, 0x73, 0x30, 0xAF, 0xED, 0xF6, 0x7E,  // ..s0...~
            /* 0AF8 */  0xD8, 0xA3, 0x47, 0x39, 0xC0, 0x7A, 0x84, 0x73,  // ..G9.z.s
            /* 0B00 */  0x1C, 0x4A, 0xF4, 0x51, 0x0E, 0xEA, 0xFF, 0xFF,  // .J.Q....
            /* 0B08 */  0x28, 0x07, 0x58, 0xBA, 0x33, 0x18, 0xE1, 0xFC,  // (.X.3...
            /* 0B10 */  0x43, 0x3C, 0x40, 0x84, 0x78, 0x8A, 0x33, 0x48,  // C<@.x.3H
            /* 0B18 */  0x9C, 0x20, 0x2F, 0x03, 0x8F, 0x72, 0xBE, 0xC9,  // . /..r..
            /* 0B20 */  0xC5, 0x79, 0x9A, 0x8B, 0xF2, 0x2E, 0x67, 0x84,  // .y....g.
            /* 0B28 */  0x87, 0x6E, 0x03, 0xF9, 0xC4, 0xED, 0x7B, 0xDC,  // .n....{.
            /* 0B30 */  0x53, 0xDD, 0xCB, 0x9C, 0x6F, 0xDD, 0xBE, 0x80,  // S...o...
            /* 0B38 */  0xFB, 0x28, 0xC7, 0x04, 0x1F, 0xE5, 0x00, 0x2A,  // .(.....*
            /* 0B40 */  0xFC, 0xFF, 0x8F, 0x72, 0x70, 0xCF, 0xAA, 0xE0,  // ...rp...
            /* 0B48 */  0x39, 0xCA, 0xC1, 0x38, 0x91, 0x00, 0xAE, 0xC7,  // 9..8....
            /* 0B50 */  0x0A, 0x63, 0x0C, 0x5C, 0xDD, 0xA3, 0xC7, 0xA7,  // .c.\....
            /* 0B58 */  0x22, 0x2A, 0xEA, 0x3C, 0x22, 0x18, 0xCE, 0xE2,  // "*.<"...
            /* 0B60 */  0x43, 0x90, 0xCF, 0x06, 0xFC, 0x04, 0xE2, 0x11,  // C.......
            /* 0B68 */  0x54, 0x3C, 0x4E, 0x7A, 0xEA, 0xF0, 0xC1, 0x8E,  // T<Nz....
            /* 0B70 */  0x9D, 0x0E, 0x1C, 0x7E, 0x90, 0xF4, 0xB4, 0x08,  // ...~....
            /* 0B78 */  0x9E, 0x73, 0x0B, 0xBC, 0xDB, 0x08, 0x9C, 0x53,  // .s.....S
            /* 0B80 */  0x81, 0xFF, 0xFF, 0xA7, 0x02, 0xC0, 0x4B, 0xFE,  // ......K.
            /* 0B88 */  0x57, 0x9A, 0xA0, 0x1D, 0xE0, 0x15, 0x2E, 0x1B,  // W.......
            /* 0B90 */  0x47, 0x32, 0xCA, 0xE1, 0x98, 0x0F, 0x1C, 0x4D,  // G2.....M
            /* 0B98 */  0x93, 0x9D, 0x78, 0x60, 0xC6, 0x82, 0xD4, 0x49,  // ..x`...I
            /* 0BA0 */  0xC0, 0xA7, 0x0E, 0x07, 0x82, 0x91, 0x76, 0x12,  // ......v.
            /* 0BA8 */  0x8D, 0xC6, 0x70, 0x56, 0x0B, 0x23, 0x38, 0x83,  // ..pV.#8.
            /* 0BB0 */  0xF8, 0xCC, 0xE3, 0x5C, 0x27, 0x16, 0xB4, 0x0A,  // ...\'...
            /* 0BB8 */  0x10, 0x9D, 0x56, 0x30, 0x41, 0xEE, 0x68, 0x74,  // ..V0A.ht
            /* 0BC0 */  0xDE, 0xBE, 0x1B, 0xF0, 0xEB, 0x8B, 0xC7, 0x62,  // .......b
            /* 0BC8 */  0x60, 0xDF, 0xBA, 0xC0, 0x31, 0x17, 0xAB, 0x01,  // `...1...
            /* 0BD0 */  0x45, 0x0D, 0xC0, 0x68, 0x98, 0x53, 0xC0, 0xC3,  // E..h.S..
            /* 0BD8 */  0x19, 0xB8, 0xEE, 0x71, 0x9E, 0x1B, 0xEE, 0xA6,  // ...q....
            /* 0BE0 */  0x62, 0xAD, 0x53, 0xD1, 0xE9, 0xE4, 0x7D, 0xE0,  // b.S...}.
            /* 0BE8 */  0xE0, 0xC0, 0xFA, 0xFF, 0x1F, 0x1C, 0x8C, 0xD9,  // ........
            /* 0BF0 */  0x7B, 0x70, 0xB0, 0xD0, 0x3C, 0x38, 0xB0, 0x65,  // {p..<8.e
            /* 0BF8 */  0x1B, 0x1C, 0x5A, 0xC9, 0x5D, 0x84, 0x1C, 0x3E,  // ..Z.]..>
            /* 0C00 */  0xF0, 0xB3, 0x03, 0x0E, 0x80, 0x9E, 0x1D, 0x2C,  // .......,
            /* 0C08 */  0x24, 0xCF, 0x0E, 0x6C, 0xFA, 0xCE, 0x22, 0xA0,  // $..l..".
            /* 0C10 */  0x00, 0xF2, 0xBD, 0xC3, 0xE7, 0x96, 0x67, 0x0F,  // ......g.
            /* 0C18 */  0x36, 0x86, 0x47, 0x17, 0xA3, 0x19, 0x9D, 0x6B,  // 6.G....k
            /* 0C20 */  0xBA, 0x4D, 0xA0, 0x54, 0xDC, 0x26, 0x28, 0x88,  // .M.T.&(.
            /* 0C28 */  0x6F, 0x00, 0x4E, 0x48, 0xA3, 0xDB, 0x20, 0x6E,  // o.NH.. n
            /* 0C30 */  0x26, 0xC6, 0x7F, 0xC4, 0xF0, 0x11, 0xE1, 0x90,  // &.......
            /* 0C38 */  0xCE, 0xD6, 0x04, 0xF3, 0x40, 0xEA, 0xBD, 0xA1,  // ....@...
            /* 0C40 */  0xBB, 0x14, 0x84, 0xD9, 0x87, 0x7C, 0x70, 0xF1,  // .....|p.
            /* 0C48 */  0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E, 0x3A, 0x6D,  // 4|.!..:m
            /* 0C50 */  0x9F, 0x19, 0x30, 0xA7, 0x55, 0x5F, 0x2D, 0x13,  // ..0.U_-.
            /* 0C58 */  0x58, 0xD6, 0x55, 0x82, 0x7A, 0xB8, 0x80, 0xD0,  // X.U.z...
            /* 0C60 */  0x0B, 0x8D, 0xAF, 0x5D, 0x09, 0x1E, 0x04, 0x7D,  // ...]...}
            /* 0C68 */  0x0C, 0xFB, 0xFF, 0xBF, 0x97, 0xB0, 0xB3, 0x57,  // .......W
            /* 0C70 */  0x82, 0x57, 0xAF, 0x04, 0xF3, 0x0E, 0x02, 0x35,  // .W.....5
            /* 0C78 */  0x2A, 0x0F, 0x02, 0x73, 0x94, 0x34, 0xC1, 0x7C,  // *..s.4.|
            /* 0C80 */  0x63, 0x40, 0x25, 0xBB, 0x74, 0xD2, 0x33, 0xCC,  // c@%.t.3.
            /* 0C88 */  0x3B, 0x8C, 0x2F, 0x09, 0xBE, 0x7E, 0xF8, 0xDC,  // ;./..~..
            /* 0C90 */  0xE2, 0x05, 0xBC, 0x7A, 0xC2, 0x20, 0x78, 0x06,  // ...z. x.
            /* 0C98 */  0x7A, 0x75, 0x31, 0x54, 0x9C, 0xC0, 0xAF, 0x02,  // zu1T....
            /* 0CA0 */  0x6F, 0x34, 0x21, 0x82, 0x19, 0xF6, 0xF0, 0x43,  // o4!....C
            /* 0CA8 */  0xBE, 0xC5, 0xF8, 0xF8, 0xE6, 0x1B, 0x40, 0xAC,  // ......@.
            /* 0CB0 */  0xD7, 0x11, 0x8F, 0x94, 0x1F, 0x5B, 0x0E, 0x28,  // .....[.(
            /* 0CB8 */  0xD2, 0x4B, 0x95, 0x27, 0xE0, 0xB3, 0x8C, 0x4F,  // .K.'...O
            /* 0CC0 */  0x5B, 0x27, 0xE5, 0x6B, 0x9B, 0xD1, 0x5F, 0x21,  // ['.k.._!
            /* 0CC8 */  0x7C, 0xF8, 0x31, 0xB2, 0xCF, 0x39, 0xEC, 0xDC,  // |.1..9..
            /* 0CD0 */  0xC5, 0x06, 0xC5, 0x11, 0x1F, 0x18, 0x5E, 0x6A,  // ......^j
            /* 0CD8 */  0x3C, 0x15, 0x76, 0x05, 0x60, 0x07, 0x07, 0x7E,  // <.v.`..~
            /* 0CE0 */  0x05, 0xF0, 0xC1, 0x81, 0x1D, 0x8B, 0x30, 0xC7,  // ......0.
            /* 0CE8 */  0x4A, 0x70, 0x9D, 0x6C, 0x7C, 0x72, 0x00, 0x33,  // Jp.l|r.3
            /* 0CF0 */  0x3C, 0xE6, 0x40, 0xEA, 0xF3, 0x86, 0x6F, 0x06,  // <.@...o.
            /* 0CF8 */  0x1E, 0x17, 0x3F, 0x72, 0xF8, 0xA8, 0xCA, 0xB0,  // ..?r....
            /* 0D00 */  0x4F, 0xD3, 0x47, 0xA3, 0x17, 0x59, 0x9F, 0x5E,  // O.G..Y.^
            /* 0D08 */  0x30, 0xB0, 0xBE, 0x34, 0x70, 0x58, 0xA3, 0x85,  // 0..4pX..
            /* 0D10 */  0x7D, 0x0C, 0x38, 0x73, 0x5F, 0x88, 0x70, 0x87,  // }.8s_.p.
            /* 0D18 */  0x3A, 0xB0, 0xFC, 0xFF, 0x01, 0xF1, 0xB7, 0x92,  // :.......
            /* 0D20 */  0x47, 0x0E, 0x4F, 0xC0, 0x80, 0x2C, 0xF7, 0xBA,  // G.O..,..
            /* 0D28 */  0x74, 0x20, 0xE2, 0xE7, 0x46, 0xAB, 0x3B, 0x10,  // t ..F.;.
            /* 0D30 */  0x21, 0x30, 0x9E, 0xF6, 0x1E, 0x3F, 0x3C, 0x1B,  // !0...?<.
            /* 0D38 */  0x1F, 0x05, 0x7C, 0x8C, 0xF2, 0xCC, 0xCF, 0x28,  // ..|....(
            /* 0D40 */  0xD2, 0x2B, 0x83, 0xB5, 0x9C, 0x88, 0x50, 0x2A,  // .+....P*
            /* 0D48 */  0x60, 0x14, 0x98, 0x46, 0x77, 0x0E, 0x1E, 0x11,  // `..Fw...
            /* 0D50 */  0x46, 0x70, 0x06, 0xF1, 0x68, 0x7D, 0x73, 0x01,  // Fp..h}s.
            /* 0D58 */  0xA6, 0x67, 0x22, 0xE0, 0x12, 0x72, 0x76, 0xE8,  // .g"..rv.
            /* 0D60 */  0x8B, 0x33, 0x9B, 0xB6, 0x71, 0xDF, 0x00, 0x7D,  // .3..q..}
            /* 0D68 */  0xF8, 0xF4, 0xC4, 0x4F, 0x1B, 0xC6, 0xC9, 0x08,  // ...O....
            /* 0D70 */  0xB0, 0xF1, 0xFF, 0xBF, 0xEB, 0x00, 0xFC, 0xFF,  // ........
            /* 0D78 */  0xFF, 0xDF, 0x75, 0x00, 0x3B, 0xF7, 0x07, 0xDF,  // ..u.;...
            /* 0D80 */  0x75, 0x80, 0x6B, 0x88, 0x55, 0xE9, 0xAE, 0xC3,  // u.k.U...
            /* 0D88 */  0x0F, 0x00, 0x8E, 0xBA, 0x20, 0xDD, 0x0A, 0x22,  // .... .."
            /* 0D90 */  0x1E, 0x82, 0x07, 0xF9, 0x28, 0x60, 0xD8, 0xB3,  // ....(`..
            /* 0D98 */  0x7C, 0x1C, 0xF6, 0x70, 0x4C, 0x30, 0xDC, 0x55,  // |..pL0.U
            /* 0DA0 */  0x83, 0x0E, 0xCD, 0xB1, 0x28, 0x24, 0xE4, 0xA6,  // ....($..
            /* 0DA8 */  0x83, 0x8A, 0x7E, 0x7F, 0xA0, 0x20, 0x06, 0xF4,  // ..~.. ..
            /* 0DB0 */  0x55, 0x12, 0xB0, 0xF2, 0xFF, 0xBF, 0xB5, 0x00,  // U.......
            /* 0DB8 */  0xBB, 0x30, 0x83, 0x46, 0xC9, 0xBF, 0x2D, 0x51,  // .0.F..-Q
            /* 0DC0 */  0x10, 0x0F, 0xDA, 0xD2, 0x6E, 0x2D, 0xA0, 0x38,  // ....n-.8
            /* 0DC8 */  0x04, 0xF8, 0xD6, 0x02, 0x5F, 0xDE, 0xAD, 0x05,  // ...._...
            /* 0DD0 */  0x14, 0xB7, 0x00, 0x1F, 0x0D, 0xF8, 0x71, 0xC1,  // ......q.
            /* 0DD8 */  0x07, 0x0E, 0xDF, 0x58, 0x7C, 0x37, 0x26, 0x17,  // ...X|7&.
            /* 0DE0 */  0x16, 0xA8, 0xE3, 0xE7, 0xE0, 0xBE, 0xC6, 0xBF,  // ........
            /* 0DE8 */  0xB0, 0xC0, 0x38, 0x99, 0x80, 0xE3, 0x48, 0x02,  // ..8...H.
            /* 0DF0 */  0xD8, 0xF9, 0xFF, 0x1F, 0x49, 0xC0, 0x02, 0xE9,  // ....I...
            /* 0DF8 */  0x23, 0x09, 0x70, 0x8D, 0xB4, 0x2A, 0x2A, 0xE2,  // #.p..**.
            /* 0E00 */  0x3D, 0xA0, 0x53, 0x89, 0x61, 0xF8, 0xE8, 0x7C,  // =.S.a..|
            /* 0E08 */  0x66, 0xC0, 0x5F, 0x39, 0x18, 0x38, 0x3B, 0x91,  // f._9.8;.
            /* 0E10 */  0x19, 0x8E, 0x0F, 0xDC, 0xE3, 0x7B, 0x21, 0x3B,  // .....{!;
            /* 0E18 */  0xAD, 0x87, 0x02, 0xDF, 0xC9, 0x0C, 0xC9, 0xAE,  // ........
            /* 0E20 */  0xE0, 0xB8, 0xC3, 0x83, 0xC7, 0xFE, 0x50, 0xE4,  // ......P.
            /* 0E28 */  0x1B, 0xC2, 0x0B, 0x82, 0x2F, 0x07, 0x0C, 0x0A,  // ..../...
            /* 0E30 */  0xC6, 0x2D, 0x1C, 0x73, 0x04, 0x87, 0x43, 0x70,  // .-.s..Cp
            /* 0E38 */  0xC6, 0x47, 0x81, 0x19, 0xA4, 0x2F, 0x20, 0xAF,  // .G.../ .
            /* 0E40 */  0x07, 0x1E, 0x2C, 0x73, 0x7F, 0xA0, 0xD2, 0x09,  // ..,s....
            /* 0E48 */  0xE6, 0x71, 0xEA, 0xC9, 0xA0, 0x39, 0x14, 0x9D,  // .q...9..
            /* 0E50 */  0x09, 0x4E, 0xA1, 0xAD, 0x61, 0x09, 0xE7, 0x81,  // .N..a...
            /* 0E58 */  0x22, 0x44, 0x94, 0x60, 0xAF, 0x54, 0x6F, 0x0C,  // "D.`.To.
            /* 0E60 */  0xCF, 0xEB, 0x51, 0xE2, 0x45, 0x0A, 0x18, 0x2D,  // ..Q.E..-
            /* 0E68 */  0x4A, 0xB0, 0xDE, 0x20, 0x04, 0x1A, 0x29, 0x44,  // J.. ..)D
            /* 0E70 */  0xC0, 0x10, 0xAF, 0x13, 0xB1, 0xC2, 0x45, 0x6F,  // ......Eo
            /* 0E78 */  0x7F, 0x10, 0x24, 0xC0, 0x9B, 0x42, 0xD7, 0x14,  // ..$..B..
            /* 0E80 */  0x47, 0x3A, 0xC4, 0xA0, 0x87, 0xED, 0x3B, 0x39,  // G:....;9
            /* 0E88 */  0x9F, 0x56, 0x90, 0xE3, 0xF2, 0x41, 0x06, 0x43,  // .V...A.C
            /* 0E90 */  0xF0, 0xF0, 0xE1, 0x2F, 0x80, 0x0F, 0x00, 0xD8,  // .../....
            /* 0E98 */  0xFF, 0x3F, 0x41, 0xD7, 0x80, 0x9A, 0xF9, 0xE3,  // .?A.....
            /* 0EA0 */  0x01, 0x58, 0x0E, 0x17, 0xF0, 0x07, 0xFE, 0x04,  // .X......
            /* 0EA8 */  0x83, 0x3B, 0xAB, 0x68, 0x10, 0xA8, 0x93, 0x0A,  // .;.h....
            /* 0EB0 */  0x3F, 0x5D, 0xF9, 0x6E, 0xEE, 0x1B, 0x90, 0x09,  // ?].n....
            /* 0EB8 */  0x2C, 0xF6, 0x20, 0x42, 0xC7, 0x03, 0xFE, 0xA1,  // ,. B....
            /* 0EC0 */  0xBF, 0xD6, 0xFB, 0x50, 0xE1, 0xF9, 0xFA, 0x72,  // ...P...r
            /* 0EC8 */  0xEF, 0xCB, 0x3F, 0x58, 0xAE, 0x09, 0xFC, 0xFA,  // ..?X....
            /* 0ED0 */  0x0F, 0x78, 0x14, 0x3C, 0x2E, 0x14, 0x34, 0x0E,  // .x.<..4.
            /* 0ED8 */  0xF1, 0xA9, 0xEE, 0xD4, 0x7D, 0x66, 0x39, 0x61,  // ....}f9a
            /* 0EE0 */  0xDC, 0xFF, 0x7F, 0xC4, 0x6C, 0xBC, 0xE0, 0x3A,  // ....l..:
            /* 0EE8 */  0x7F, 0x20, 0xDE, 0x24, 0x3E, 0x96, 0xD0, 0xF0,  // . .$>...
            /* 0EF0 */  0x27, 0x13, 0x40, 0xE0, 0x8C, 0x9E, 0x4C, 0x3C,  // '.@...L<
            /* 0EF8 */  0xEF, 0x77, 0x92, 0x67, 0xA1, 0x43, 0x88, 0xF1,  // .w.g.C..
            /* 0F00 */  0x46, 0x12, 0xC4, 0x08, 0x4F, 0x26, 0xEC, 0x42,  // F...O&.B
            /* 0F08 */  0xF2, 0x40, 0x12, 0xE2, 0xC9, 0xC4, 0xD7, 0x92,  // .@......
            /* 0F10 */  0x60, 0x21, 0x9E, 0x4C, 0x18, 0x58, 0xE8, 0x58,  // `!.L.X.X
            /* 0F18 */  0xAF, 0x45, 0x31, 0xD8, 0x4D, 0xC5, 0x70, 0x4F,  // .E1.M.pO
            /* 0F20 */  0x26, 0x2C, 0xF8, 0x23, 0x43, 0xB7, 0x47, 0x9F,  // &,.#C.G.
            /* 0F28 */  0x4C, 0x00, 0x43, 0xFF, 0xFF, 0x93, 0x09, 0xB0,  // L.C.....
            /* 0F30 */  0x3F, 0x52, 0xF9, 0xC4, 0x86, 0x1B, 0x85, 0x0F,  // ?R......
            /* 0F38 */  0x16, 0x11, 0xD9, 0x59, 0x87, 0x0C, 0x9A, 0xDE,  // ...Y....
            /* 0F40 */  0xF7, 0xC0, 0x61, 0x64, 0x60, 0x40, 0xE1, 0x30,  // ..ad`@.0
            /* 0F48 */  0x86, 0x3F, 0xC7, 0x91, 0x13, 0x0C, 0x28, 0xCE,  // .?....(.
            /* 0F50 */  0x13, 0x98, 0x93, 0xC8, 0x73, 0xC2, 0x8B, 0x05,  // ....s...
            /* 0F58 */  0x3B, 0xB9, 0x00, 0x6E, 0xAE, 0xC0, 0x04, 0x87,  // ;..n....
            /* 0F60 */  0xFC, 0xFF, 0x4F, 0x2E, 0xE0, 0x3C, 0x97, 0xC3,  // ..O..<..
            /* 0F68 */  0x18, 0x03, 0xD7, 0xFF, 0xCA, 0xF4, 0x31, 0x8F,  // ......1.
            /* 0F70 */  0x4A, 0x7A, 0xFE, 0x19, 0x86, 0xB2, 0xF8, 0x84,  // Jz......
            /* 0F78 */  0xE0, 0x73, 0x01, 0x3F, 0x21, 0x78, 0x04, 0x6F,  // .s.?!x.o
            /* 0F80 */  0x5B, 0xC7, 0xC9, 0x4E, 0x26, 0xBE, 0x6E, 0xF8,  // [..N&.n.
            /* 0F88 */  0x64, 0xC0, 0x0E, 0x9F, 0x1E, 0xA4, 0x47, 0x86,  // d.....G.
            /* 0F90 */  0x3B, 0x0F, 0x80, 0xED, 0xC0, 0x02, 0xEB, 0x50,  // ;......P
            /* 0F98 */  0x00, 0xB8, 0xD1, 0x68, 0x62, 0xE4, 0x4C, 0x1F,  // ...hb.L.
            /* 0FA0 */  0x88, 0x0E, 0xB4, 0x9C, 0xC3, 0x29, 0x16, 0xA7,  // .....)..
            /* 0FA8 */  0x1B, 0xA6, 0x0F, 0x3E, 0xBE, 0x9B, 0x9C, 0xCA,  // ...>....
            /* 0FB0 */  0xA9, 0xE2, 0x4F, 0x94, 0x56, 0x0D, 0xA9, 0x93,  // ..O.V...
            /* 0FB8 */  0x25, 0xD7, 0x0B, 0xA3, 0x68, 0x0F, 0x22, 0x9D,  // %...h.".
            /* 0FC0 */  0x46, 0x79, 0x18, 0x18, 0xC1, 0x19, 0xC4, 0x87,  // Fy......
            /* 0FC8 */  0x1A, 0x67, 0x3B, 0xD4, 0xA0, 0x95, 0x08, 0xF8,  // .g;.....
            /* 0FD0 */  0xFF, 0x5F, 0xAD, 0x3D, 0x06, 0x76, 0xA6, 0x05,  // ._.=.v..
            /* 0FD8 */  0xCC, 0x5C, 0x7F, 0x7D, 0x73, 0xC1, 0xBD, 0x24,  // .\.}s..$
            /* 0FE0 */  0x7C, 0x73, 0xC1, 0xCC, 0x0D, 0x38, 0x8C, 0xDF,  // |s...8..
            /* 0FE8 */  0x73, 0x83, 0x85, 0xE6, 0xB9, 0xC1, 0xBF, 0xBD,  // s.......
            /* 0FF0 */  0x60, 0xA3, 0xCD, 0x0D, 0x8D, 0xCC, 0xE6, 0xF6,  // `.......
            /* 0FF8 */  0x1C, 0x10, 0xE1, 0x15, 0xC1, 0x87, 0x0F, 0x8F,  // ........
            /* 1000 */  0x0E, 0x38, 0x00, 0x7A, 0x74, 0xB0, 0x90, 0x3C,  // .8.zt..<
            /* 1008 */  0x3A, 0xF0, 0xFC, 0xFF, 0x47, 0xC7, 0xD2, 0x8D,  // :...G...
            /* 1010 */  0x0E, 0xAD, 0x05, 0x44, 0x2E, 0x4F, 0x53, 0xE4,  // ...D.OS.
            /* 1018 */  0x64, 0x72, 0x7A, 0x4F, 0xB9, 0xBE, 0xB2, 0x7A,  // drzO...z
            /* 1020 */  0x7A, 0xC0, 0x63, 0x00, 0x9E, 0x1E, 0x2C, 0x34,  // z.c...,4
            /* 1028 */  0x4F, 0x0F, 0x6C, 0x11, 0x2F, 0x19, 0xE8, 0xDB,  // O.l./...
            /* 1030 */  0x87, 0x91, 0x5F, 0xA0, 0x7D, 0x5E, 0x32, 0xA8,  // .._.}^2.
            /* 1038 */  0xEF, 0x36, 0x30, 0x46, 0x08, 0x1C, 0x6E, 0xD5,  // .60F..n.
            /* 1040 */  0x1E, 0x21, 0x2C, 0x34, 0x1F, 0x34, 0xC0, 0x16,  // .!,4.4..
            /* 1048 */  0x6F, 0x84, 0xE8, 0x61, 0xF9, 0x4E, 0x72, 0x7E,  // o..a.Nr~
            /* 1050 */  0x27, 0x77, 0x7C, 0xC0, 0x0A, 0xD8, 0xE3, 0xE3,  // 'w|.....
            /* 1058 */  0xFF, 0xFF, 0xF1, 0x61, 0x51, 0x7C, 0x74, 0x07,  // ...aQ|t.
            /* 1060 */  0xCE, 0x99, 0xB6, 0xA4, 0xD3, 0x0D, 0x4F, 0x01,  // ......O.
            /* 1068 */  0xA3, 0x93, 0x8B, 0x41, 0x7C, 0x1F, 0xB1, 0x42,  // ...A|..B
            /* 1070 */  0x10, 0x1D, 0xDD, 0xE1, 0xEB, 0x81, 0xD4, 0xD1,  // ........
            /* 1078 */  0x1D, 0xFE, 0x95, 0xDD, 0x47, 0x77, 0xF8, 0xA3,  // ....Gw..
            /* 1080 */  0x3B, 0x1E, 0x66, 0xE3, 0x58, 0x44, 0xCF, 0x57,  // ;.f.XD.W
            /* 1088 */  0x3E, 0x26, 0x26, 0x78, 0x95, 0xF0, 0x61, 0xE2,  // >&&x..a.
            /* 1090 */  0x39, 0x89, 0x1D, 0xDF, 0x7D, 0x70, 0x4C, 0xF0,  // 9...}pL.
            /* 1098 */  0xC0, 0xF8, 0xD4, 0xCE, 0x4E, 0x8D, 0x21, 0x8D,  // ....N.!.
            /* 10A0 */  0xCA, 0x60, 0x0D, 0xF1, 0xFC, 0xC6, 0xF4, 0xAD,  // .`......
            /* 10A8 */  0x4F, 0xE7, 0x78, 0xB8, 0x7A, 0x00, 0x35, 0x16,  // O.x.z.5.
            /* 10B0 */  0xAE, 0x04, 0x46, 0xE7, 0x78, 0xFC, 0x85, 0xE1,  // ..F.x...
            /* 10B8 */  0x75, 0xCA, 0x0B, 0x08, 0xE6, 0x79, 0x45, 0x78,  // u....yEx
            /* 10C0 */  0x61, 0xF0, 0x49, 0x9C, 0x9F, 0x8E, 0x1E, 0xA9,  // a.I.....
            /* 10C8 */  0x0C, 0x15, 0x27, 0xF0, 0x2B, 0xC1, 0x9B, 0x56,  // ..'.+..V
            /* 10D0 */  0x88, 0x60, 0x86, 0x7D, 0x0C, 0x78, 0xDC, 0x30,  // .`.}.x.0
            /* 10D8 */  0xAA, 0x4F, 0xA0, 0xC6, 0x7A, 0x48, 0xF2, 0x88,  // .O..zH..
            /* 10E0 */  0xF9, 0x6D, 0xEA, 0x80, 0x22, 0x3D, 0xFD, 0x78,  // .m.."=.x
            /* 10E8 */  0x02, 0xBE, 0xDE, 0xF3, 0xFF, 0xFF, 0xF5, 0x1E,  // ........
            /* 10F0 */  0xEE, 0x8D, 0xD1, 0x83, 0xE2, 0x88, 0x0F, 0x0E,  // ........
            /* 10F8 */  0x0F, 0x21, 0x9E, 0x0A, 0xBB, 0x3D, 0x61, 0xC0,  // .!...=a.
            /* 1100 */  0x8E, 0xC0, 0x47, 0x41, 0x7E, 0x78, 0x09, 0x14,  // ..GA~x..
            /* 1108 */  0xA5, 0x78, 0x4C, 0xDD, 0x1C, 0x3C, 0x43, 0x83,  // .xL..<C.
            /* 1110 */  0x62, 0xE0, 0x0F, 0x92, 0xCD, 0x2E, 0xAE, 0xB1,  // b.......
            /* 1118 */  0x7C, 0x2F, 0x31, 0x22, 0x76, 0x40, 0x0C, 0x25,  // |/1"v@.%
            /* 1120 */  0xD2, 0x09, 0x54, 0x8F, 0x42, 0xE6, 0xE0, 0x11,  // ..T.B...
            /* 1128 */  0x79, 0x36, 0x9E, 0x0E, 0x3B, 0x75, 0xE0, 0x27,  // y6..;u.'
            /* 1130 */  0xE1, 0x33, 0x93, 0xEF, 0xAF, 0x1E, 0x90, 0x87,  // .3......
            /* 1138 */  0xC2, 0xA7, 0xC8, 0x80, 0xE1, 0xC0, 0xBC, 0x04,  // ........
            /* 1140 */  0x30, 0x68, 0x0F, 0x9F, 0xA1, 0xBF, 0x16, 0x19,  // 0h......
            /* 1148 */  0x9D, 0x9F, 0x76, 0x4E, 0xC7, 0xE7, 0x4D, 0x1F,  // ..vN..M.
            /* 1150 */  0x35, 0x7C, 0x0F, 0xC0, 0x9C, 0xC8, 0x7C, 0x02,  // 5|....|.
            /* 1158 */  0xF0, 0x89, 0x8D, 0x01, 0x3D, 0xF9, 0x1B, 0xD5,  // ....=...
            /* 1160 */  0xF7, 0x52, 0x76, 0xF5, 0xC1, 0x20, 0x9D, 0x46,  // .Rv.. .F
            /* 1168 */  0x94, 0x48, 0xAF, 0x03, 0xFC, 0x76, 0xC6, 0xC1,  // .H...v..
            /* 1170 */  0x02, 0x1D, 0x2B, 0x9F, 0x4C, 0x3C, 0x4F, 0xD8,  // ..+.L<O.
            /* 1178 */  0x23, 0x85, 0x73, 0xC5, 0x60, 0x07, 0x13, 0x7E,  // #.s.`..~
            /* 1180 */  0xC5, 0xF0, 0xC1, 0x84, 0x5D, 0x02, 0x31, 0x37,  // ....].17
            /* 1188 */  0x4C, 0x70, 0x5D, 0x31, 0x7C, 0x32, 0x81, 0xF7,  // Lp]1|2..
            /* 1190 */  0xFF, 0x3F, 0x99, 0x80, 0x01, 0x1E, 0x73, 0x37,  // .?....s7
            /* 1198 */  0xF5, 0x79, 0xC6, 0xB2, 0xC6, 0x85, 0x3A, 0xD2,  // .y....:.
            /* 11A0 */  0xF8, 0x24, 0xF3, 0x7C, 0x6C, 0xEC, 0x87, 0x01,  // .$.|l...
            /* 11A8 */  0x4F, 0xFA, 0x30, 0x9F, 0x9D, 0x7C, 0x55, 0xE3,  // O.0..|U.
            /* 11B0 */  0xB0, 0xBE, 0x94, 0x70, 0x58, 0xA3, 0x85, 0x7D,  // ...pX..}
            /* 11B8 */  0x1D, 0x30, 0xEC, 0x03, 0x20, 0xEE, 0x9A, 0x0B,  // .0.. ...
            /* 11C0 */  0x16, 0x40, 0xFC, 0x25, 0xE1, 0xC1, 0xC0, 0x13,  // .@.%....
            /* 11C8 */  0x30, 0x20, 0x8B, 0x73, 0xA3, 0x46, 0x05, 0xB8,  // 0 .s.F..
            /* 11D0 */  0x54, 0x03, 0x02, 0xAF, 0xD2, 0x3E, 0xC7, 0xBC,  // T....>..
            /* 11D8 */  0xC3, 0x3C, 0x14, 0xBC, 0xCB, 0x44, 0x08, 0xF2,  // .<...D..
            /* 11E0 */  0x34, 0xFD, 0x8E, 0x10, 0x21, 0x54, 0xA0, 0x97,  // 4...!T..
            /* 11E8 */  0x6A, 0xE3, 0x05, 0x7D, 0x99, 0x88, 0x12, 0x27,  // j..}...'
            /* 11F0 */  0x4A, 0x84, 0x50, 0xC6, 0x38, 0x97, 0xA7, 0x83,  // J.P.8...
            /* 11F8 */  0x97, 0x9A, 0x70, 0x8F, 0x09, 0x81, 0x9F, 0x1C,  // ..p.....
            /* 1200 */  0x9E, 0xAA, 0x8D, 0x70, 0x8C, 0x2F, 0xD5, 0x4C,  // ...p./.L
            /* 1208 */  0xFC, 0x45, 0x46, 0xF7, 0x24, 0x5F, 0xAA, 0xF1,  // .EF.$_..
            /* 1210 */  0xFF, 0xFF, 0x4B, 0x35, 0xC0, 0x87, 0x61, 0xF8,  // ..K5..a.
            /* 1218 */  0x36, 0x0B, 0x8E, 0x6B, 0x02, 0xBF, 0xCF, 0x02,  // 6..k....
            /* 1220 */  0xFE, 0xFE, 0xFF, 0xE7, 0x16, 0x4F, 0xE3, 0x9D,  // .....O..
            /* 1228 */  0x19, 0xDC, 0xC3, 0x85, 0x3D, 0x0C, 0xAE, 0xE9,  // ....=...
            /* 1230 */  0x9A, 0xAB, 0xF3, 0x0D, 0x57, 0x01, 0x83, 0xBA,  // ....W...
            /* 1238 */  0x36, 0x83, 0x2B, 0xED, 0x1A, 0x04, 0xEA, 0x23,  // 6.+....#
            /* 1240 */  0x8D, 0x4F, 0x18, 0xB8, 0xE3, 0x82, 0x4F, 0x17,  // .O....O.
            /* 1248 */  0xB8, 0xDB, 0x3B, 0xCC, 0x4B, 0x8A, 0xCF, 0x7C,  // ..;.K..|
            /* 1250 */  0x98, 0x9B, 0x83, 0x07, 0xE4, 0x13, 0x04, 0xF8,  // ........
            /* 1258 */  0x2F, 0x7D, 0xD8, 0x55, 0xB0, 0x43, 0x22, 0xFE,  // /}.U.C".
            /* 1260 */  0xFE, 0x65, 0xD0, 0x73, 0x0C, 0xEA, 0x03, 0xCF,  // .e.s....
            /* 1268 */  0x2B, 0x86, 0xAF, 0x09, 0x0F, 0x13, 0x8E, 0x7A,  // +......z
            /* 1270 */  0x0A, 0xA2, 0x63, 0x03, 0xC7, 0x61, 0x03, 0x1C,  // ..c..a..
            /* 1278 */  0x47, 0x1B, 0xDC, 0x31, 0xC7, 0xE7, 0x10, 0x1C,  // G..1....
            /* 1280 */  0xDC, 0x7B, 0x81, 0x87, 0xE1, 0x7B, 0x8E, 0x47,  // .{...{.G
            /* 1288 */  0xC4, 0xFE, 0xFF, 0x23, 0xF2, 0xF8, 0x1F, 0x22,  // ...#..."
            /* 1290 */  0x5E, 0x38, 0x22, 0x04, 0xC4, 0x9F, 0xA9, 0xF8,  // ^8".....
            /* 1298 */  0x80, 0xC1, 0x97, 0x67, 0xC0, 0xBA, 0x1C, 0xE2,  // ...g....
            /* 12A0 */  0x06, 0xEC, 0x21, 0x3D, 0x5C, 0x18, 0xF5, 0x89,  // ..!=\...
            /* 12A8 */  0xCC, 0xE8, 0xAF, 0x2F, 0xCF, 0x77, 0x26, 0xB0,  // .../.w&.
            /* 12B0 */  0x72, 0x58, 0x5D, 0x0F, 0x3D, 0x60, 0x70, 0x00,  // rX].=`p.
            /* 12B8 */  0x7A, 0xC0, 0xF0, 0xCF, 0x16, 0x6F, 0x8A, 0x60,  // z....o.`
            /* 12C0 */  0xB8, 0x68, 0xFA, 0xB8, 0xE0, 0x43, 0x8F, 0x15,  // .h...C..
            /* 12C8 */  0xDD, 0x14, 0xD1, 0xF7, 0x44, 0x1F, 0x11, 0xB1,  // ....D...
            /* 12D0 */  0x77, 0x09, 0x72, 0x44, 0x84, 0x7A, 0x97, 0xF0,  // w.rD.z..
            /* 12D8 */  0x1C, 0xF8, 0x21, 0x8F, 0x0D, 0xF5, 0xBD, 0xE7,  // ..!.....
            /* 12E0 */  0x19, 0xCE, 0x07, 0xAB, 0xF7, 0x00, 0x9F, 0x3C,  // .......<
            /* 12E8 */  0x1E, 0xDD, 0xD8, 0xA9, 0x90, 0x1D, 0xB7, 0x3C,  // .......<
            /* 12F0 */  0x5E, 0x9F, 0x33, 0x7C, 0xC1, 0x64, 0x43, 0x36,  // ^.3|.dC6
            /* 12F8 */  0xD8, 0xAB, 0x86, 0xCF, 0x5F, 0x3E, 0x10, 0xE2,  // ...._>..
            /* 1300 */  0x0E, 0x51, 0xBE, 0xFA, 0xF1, 0x43, 0x08, 0x3B,  // .Q...C.;
            /* 1308 */  0x91, 0x1C, 0xF5, 0xFB, 0x9B, 0x4F, 0x28, 0x27,  // .....O('
            /* 1310 */  0x74, 0x20, 0xBE, 0xB3, 0x81, 0xF3, 0x60, 0xED,  // t ....`.
            /* 1318 */  0x7B, 0x05, 0xE6, 0xFF, 0x7F, 0xF9, 0x65, 0x23,  // {.....e#
            /* 1320 */  0xC3, 0x1C, 0x0D, 0x60, 0x5D, 0x42, 0xC0, 0x75,  // ...`]B.u
            /* 1328 */  0xC7, 0xF0, 0x25, 0x04, 0xF8, 0x04, 0xBD, 0x44,  // ..%....D
            /* 1330 */  0xA0, 0xAF, 0x19, 0x1E, 0xDD, 0x23, 0x00, 0xE6,  // .....#..
            /* 1338 */  0x8A, 0xC1, 0x8E, 0x05, 0x3E, 0x6C, 0xF8, 0x1A,  // ....>l..
            /* 1340 */  0xC0, 0xEE, 0x05, 0x0E, 0x73, 0x8F, 0x00, 0x15,  // ....s...
            /* 1348 */  0xA8, 0x87, 0x07, 0x5F, 0xED, 0x3D, 0x02, 0x14,  // ..._.=..
            /* 1350 */  0xE7, 0x56, 0x1F, 0x1A, 0x3C, 0x50, 0xAB, 0x3A,  // .V..<P.:
            /* 1358 */  0xC1, 0x42, 0x39, 0xC0, 0xF2, 0xD3, 0x2B, 0xBF,  // .B9...+.
            /* 1360 */  0x15, 0xB0, 0x7C, 0x37, 0x09, 0xE8, 0x79, 0x66,  // ..|7..yf
            /* 1368 */  0x81, 0x4A, 0x72, 0x93, 0x80, 0x0E, 0xF3, 0x7C,  // .Jr....|
            /* 1370 */  0xFE, 0x32, 0xC3, 0xE6, 0x7F, 0xE0, 0xBE, 0x7E,  // .2.....~
            /* 1378 */  0x62, 0x06, 0x69, 0x94, 0xB7, 0x3C, 0x9F, 0xC1,  // b.i..<..
            /* 1380 */  0xF8, 0xFF, 0xFF, 0x0C, 0xE1, 0x63, 0x2B, 0x3B,  // .....c+;
            /* 1388 */  0x53, 0xF0, 0x13, 0x2C, 0xEE, 0x0E, 0x60, 0x94,  // S..,..`.
            /* 1390 */  0x67, 0x4F, 0x4F, 0x80, 0x9D, 0x6A, 0x8D, 0xFC,  // gOO..j..
            /* 1398 */  0x8E, 0xEF, 0x4B, 0x84, 0xEF, 0x45, 0x98, 0x13,  // ..K..E..
            /* 13A0 */  0x05, 0xF8, 0x4E, 0x21, 0x3E, 0x24, 0xE0, 0xCE,  // ..N!>$..
            /* 13A8 */  0x02, 0x1E, 0xCB, 0xD3, 0x2A, 0xBB, 0x20, 0x81,  // ....*. .
            /* 13B0 */  0xEF, 0x38, 0xE2, 0xC3, 0x04, 0xF8, 0x07, 0x86,  // .8......
            /* 13B8 */  0x8F, 0x7C, 0x27, 0x40, 0x9D, 0x3C, 0x38, 0xEA,  // .|'@.<8.
            /* 13C0 */  0xD9, 0x3E, 0xC2, 0x1A, 0xF5, 0xBD, 0xEA, 0xE1,  // .>......
            /* 13C8 */  0xCD, 0x57, 0x09, 0x7E, 0x31, 0xE0, 0xC1, 0xAE,  // .W.~1...
            /* 13D0 */  0x48, 0xA0, 0xF2, 0x30, 0x3A, 0xD0, 0x0D, 0x01,  // H..0:...
            /* 13D8 */  0x33, 0x73, 0x3E, 0x84, 0xB3, 0xF1, 0xE8, 0x71,  // 3s>....q
            /* 13E0 */  0xA7, 0x10, 0xF0, 0x0D, 0xCE, 0xC0, 0xFF, 0xFF,  // ........
            /* 13E8 */  0x57, 0x46, 0xEC, 0xF5, 0x1F, 0x3B, 0x51, 0xCC,  // WF...;Q.
            /* 13F0 */  0xA9, 0x00, 0x7C, 0xC3, 0xF0, 0x89, 0x05, 0xF8,  // ..|.....
            /* 13F8 */  0xDC, 0x70, 0xC1, 0x71, 0xAD, 0xC3, 0x9E, 0x71,  // .p.q...q
            /* 1400 */  0x70, 0x17, 0x42, 0xC0, 0xCE, 0xB0, 0x78, 0x88,  // p.B...x.
            /* 1408 */  0x8F, 0x8A, 0xCF, 0x08, 0x54, 0x36, 0x0C, 0xEA,  // ....T6..
            /* 1410 */  0xE6, 0x07, 0x2E, 0x79, 0x97, 0x5D, 0x7A, 0xC6,  // ...y.]z.
            /* 1418 */  0xF7, 0xE0, 0xC1, 0xF0, 0xFF, 0x1F, 0x3C, 0xF6,  // ......<.
            /* 1420 */  0xB0, 0xC0, 0xA7, 0x8F, 0x1D, 0x3F, 0x60, 0x67,  // .....?`g
            /* 1428 */  0xA8, 0xB8, 0xFB, 0x25, 0x18, 0xA7, 0x8A, 0x1D,  // ...%....
            /* 1430 */  0x02, 0x0F, 0xBC, 0x22, 0x2A, 0xF5, 0x0C, 0xA0,  // ..."*...
            /* 1438 */  0x88, 0x30, 0xA8, 0x93, 0x93, 0xAF, 0xD0, 0x80,  // .0......
            /* 1440 */  0x93, 0x11, 0xE3, 0xEE, 0x92, 0x70, 0xA7, 0xFC,  // .....p..
            /* 1448 */  0x5A, 0xEF, 0x1B, 0x8E, 0xEF, 0x25, 0xA7, 0xCB,  // Z....%..
            /* 1450 */  0xFE, 0xFF, 0xD3, 0x65, 0x38, 0x0F, 0x28, 0xFC,  // ...e8.(.
            /* 1458 */  0x56, 0x0D, 0xE3, 0x2C, 0xF0, 0x08, 0xF0, 0x3E,  // V..,...>
            /* 1460 */  0xCF, 0x6F, 0xD5, 0x6F, 0xD1, 0x2F, 0x04, 0x4F,  // .o.o./.O
            /* 1468 */  0x57, 0x21, 0x5E, 0xB0, 0x9E, 0x0D, 0xDE, 0x7D,  // W!^....}
            /* 1470 */  0x62, 0x3C, 0x4E, 0x3F, 0x59, 0xC7, 0x09, 0xF3,  // b<N?Y...
            /* 1478 */  0xF8, 0xF3, 0x56, 0x6D, 0x8C, 0xA3, 0x89, 0x18,  // ..Vm....
            /* 1480 */  0xE5, 0xDC, 0x1E, 0x06, 0x22, 0x9F, 0x4B, 0x94,  // ....".K.
            /* 1488 */  0xF7, 0x8B, 0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11,  // ........
            /* 1490 */  0x34, 0x46, 0xA0, 0x58, 0x81, 0xE2, 0xBD, 0x55,  // 4F.X...U
            /* 1498 */  0x33, 0xE1, 0xB7, 0x6A, 0x40, 0xCD, 0x81, 0x06,  // 3..j@...
            /* 14A0 */  0x7F, 0xAB, 0x06, 0xEE, 0xA7, 0x07, 0xDC, 0xAD,  // ........
            /* 14A8 */  0x1A, 0x6C, 0xA7, 0x14, 0xF8, 0xFF, 0xFF, 0x53,  // .l.....S
            /* 14B0 */  0x0A, 0x60, 0xE5, 0x46, 0x8E, 0x3B, 0xA5, 0x80,  // .`.F.;..
            /* 14B8 */  0x73, 0xB4, 0xF0, 0x46, 0xC1, 0xD5, 0xBD, 0x26,  // s..F...&
            /* 14C0 */  0x7C, 0x0E, 0xA2, 0x7A, 0x60, 0x50, 0x47, 0x21,  // |..z`PG!
            /* 14C8 */  0x70, 0xE5, 0x7E, 0xB3, 0x68, 0x10, 0x96, 0x78,  // p.~.h..x
            /* 14D0 */  0xAE, 0x44, 0x43, 0x7B, 0x4A, 0x6F, 0x22, 0x1E,  // .DC{Jo".
            /* 14D8 */  0xCF, 0x9B, 0xA1, 0xEF, 0x0D, 0xA1, 0x9F, 0xCD,  // ........
            /* 14E0 */  0x2C, 0xE7, 0x4C, 0x09, 0xAA, 0x87, 0xB7, 0x4F,  // ,.L....O
            /* 14E8 */  0x10, 0xF0, 0x2F, 0x25, 0x3E, 0x53, 0xC2, 0xE7,  // ../%>S..
            /* 14F0 */  0xF3, 0x28, 0x3D, 0x18, 0x43, 0xFA, 0x48, 0xC9,  // .(=.C.H.
            /* 14F8 */  0x41, 0x9E, 0x48, 0x1E, 0x2E, 0xD8, 0xFF, 0xFF,  // A.H.....
            /* 1500 */  0x36, 0x09, 0xFB, 0x8C, 0x72, 0x00, 0x18, 0x59,  // 6...r..Y
            /* 1508 */  0x37, 0x49, 0xF4, 0x41, 0x92, 0x63, 0xC4, 0xF5,  // 7I.A.c..
            /* 1510 */  0xAD, 0xD1, 0xF7, 0x61, 0x1F, 0x09, 0xCE, 0xE7,  // ...a....
            /* 1518 */  0x61, 0x10, 0x8C, 0x67, 0x3A, 0x8F, 0x9A, 0x1F,  // a..g:...
            /* 1520 */  0x58, 0xF8, 0xF8, 0x39, 0xF8, 0xFB, 0xC1, 0xD3,  // X..9....
            /* 1528 */  0xA5, 0x0F, 0x3B, 0x21, 0x1E, 0x7C, 0xF8, 0x99,  // ..;!.|..
            /* 1530 */  0x0E, 0x5C, 0x2A, 0xCE, 0x74, 0x40, 0xE2, 0x04,  // .\*.t@..
            /* 1538 */  0x0C, 0xE3, 0xB4, 0x80, 0x1B, 0x88, 0xCF, 0x7F,  // ........
            /* 1540 */  0xD8, 0x29, 0x9F, 0x08, 0x3B, 0xC0, 0x60, 0x46,  // .)..;.`F
            /* 1548 */  0x07, 0xAE, 0xB1, 0xF9, 0x94, 0x09, 0x7C, 0x34,  // ......|4
            /* 1550 */  0x3C, 0x6B, 0x74, 0xB4, 0xC0, 0xCF, 0xEC, 0xFF,  // <kt.....
            /* 1558 */  0xFF, 0xE8, 0xC1, 0x8E, 0x16, 0xB8, 0xBC, 0x47,  // .......G
            /* 1560 */  0x0B, 0x50, 0x0D, 0xCB, 0x43, 0x83, 0x7F, 0x73,  // .P..C..s
            /* 1568 */  0x79, 0xB4, 0x00, 0xC3, 0x51, 0x82, 0x9F, 0x0D,  // y...Q...
            /* 1570 */  0x7C, 0x94, 0xF0, 0xE9, 0x17, 0x7F, 0x82, 0xF1,  // |.......
            /* 1578 */  0xF1, 0x97, 0x7B, 0x03, 0xA6, 0x17, 0x0C, 0x2B,  // ..{....+
            /* 1580 */  0xA0, 0xD6, 0x01, 0x03, 0x6E, 0xE2, 0x61, 0xA0,  // ....n.a.
            /* 1588 */  0xB2, 0x1E, 0x70, 0xE9, 0x54, 0x9F, 0x8D, 0x3C,  // ..p.T..<
            /* 1590 */  0xF2, 0x67, 0x08, 0xB3, 0x1F, 0xD1, 0x6B, 0x99,  // .g....k.
            /* 1598 */  0x8F, 0x39, 0x3E, 0x9C, 0x18, 0x25, 0xA0, 0xCF,  // .9>..%..
            /* 15A0 */  0xBE, 0x0C, 0x10, 0x73, 0xEE, 0x37, 0x46, 0x40,  // ...s.7F@
            /* 15A8 */  0x58, 0x17, 0x19, 0x63, 0xC3, 0x42, 0x3A, 0xA4,  // X..c.B:.
            /* 15B0 */  0xE7, 0x4F, 0x86, 0xC5, 0x6F, 0x36, 0x41, 0x9F,  // .O..o6A.
            /* 15B8 */  0x1C, 0x8C, 0x84, 0xB9, 0x03, 0xF8, 0x70, 0x65,  // ......pe
            /* 15C0 */  0x20, 0x7E, 0x12, 0x78, 0x07, 0xF1, 0x0D, 0xEB,  //  ~.x....
            /* 15C8 */  0x14, 0x70, 0x67, 0x61, 0x76, 0x37, 0x32, 0x14,  // .pgav72.
            /* 15D0 */  0xBF, 0x28, 0xBC, 0x08, 0xF8, 0xCA, 0xC1, 0x6E,  // .(.....n
            /* 15D8 */  0x0C, 0xE0, 0xC3, 0x0A, 0x8C, 0xFD, 0xFF, 0xDF,  // ........
            /* 15E0 */  0x1A, 0xC1, 0x30, 0xFA, 0xE7, 0x24, 0x76, 0xE6,  // ..0..$v.
            /* 15E8 */  0xF2, 0x54, 0x5F, 0x1B, 0x01, 0xFF, 0xA1, 0xEF,  // .T_.....
            /* 15F0 */  0x8C, 0xA8, 0x98, 0xD7, 0x46, 0x40, 0xE1, 0xFF,  // ....F@..
            /* 15F8 */  0xFF, 0xDA, 0x08, 0xBC, 0xEE, 0x26, 0xAF, 0x8D,  // .....&..
            /* 1600 */  0x60, 0x17, 0x7F, 0x6D, 0x04, 0x68, 0x72, 0xF5,  // `..m.hr.
            /* 1608 */  0xC3, 0x5D, 0x1B, 0xC1, 0x76, 0x4C, 0x61, 0xFF,  // .]..vLa.
            /* 1610 */  0xFF, 0x63, 0x0A, 0xE0, 0xEC, 0x12, 0x45, 0x8E,  // .c....E.
            /* 1618 */  0x29, 0x20, 0x1E, 0x2E, 0xEC, 0x0B, 0x33, 0xE2,  // ) ....3.
            /* 1620 */  0x65, 0x40, 0x0F, 0x05, 0x8E, 0x08, 0x83, 0xBA,  // e@......
            /* 1628 */  0x38, 0x82, 0x2B, 0x0A, 0xA5, 0x40, 0x7D, 0xC2,  // 8.+..@}.
            /* 1630 */  0x00, 0xDC, 0xFC, 0xFF, 0x4F, 0x18, 0x3C, 0xD0,  // ....O.<.
            /* 1638 */  0xC8, 0xD0, 0xA3, 0xF0, 0xA8, 0x70, 0xF7, 0x3B,  // .....p.;
            /* 1640 */  0xF0, 0xDC, 0x59, 0x3C, 0x72, 0x0F, 0x0C, 0xF8,  // ..Y<r...
            /* 1648 */  0xC4, 0x1A, 0x18, 0xFA, 0x8C, 0x03, 0x77, 0x6C,  // ......wl
            /* 1650 */  0xE0, 0x3A, 0x95, 0x00, 0x87, 0xB1, 0xE1, 0xEF,  // .:......
            /* 1658 */  0x8D, 0x1E, 0x1B, 0x6E, 0x20, 0x3E, 0x4A, 0x3C,  // ...n >J<
            /* 1660 */  0xAF, 0xB1, 0xB3, 0x02, 0x0E, 0xFC, 0xEC, 0x5E,  // .......^
            /* 1668 */  0x8D, 0xF8, 0xE8, 0xC0, 0x05, 0xE8, 0xD1, 0x01,  // ........
            /* 1670 */  0x8F, 0xFF, 0xFF, 0x41, 0x00, 0xEE, 0xE8, 0x70,  // ...A...p
            /* 1678 */  0x07, 0x27, 0xCC, 0xD8, 0xC0, 0x26, 0x61, 0x6C,  // .'...&al
            /* 1680 */  0x40, 0x29, 0xDF, 0x65, 0x18, 0x0A, 0xF4, 0x2B,  // @).e...+
            /* 1688 */  0x26, 0x43, 0x7C, 0x45, 0xF1, 0xCD, 0xC3, 0x04,  // &C|E....
            /* 1690 */  0xB3, 0x5C, 0x31, 0x41, 0x33, 0x34, 0x83, 0x7A,  // .\1A34.z
            /* 1698 */  0x68, 0xF0, 0xCF, 0x7F, 0xE4, 0x8A, 0x09, 0xFD,  // h.......
            /* 16A0 */  0x7E, 0xE9, 0x03, 0x87, 0xCF, 0x57, 0x66, 0xF5,  // ~....Wf.
            /* 16A8 */  0x15, 0x13, 0xCE, 0xD9, 0x27, 0x42, 0x02, 0x67,  // ....'B.g
            /* 16B0 */  0xBC, 0x0F, 0x43, 0xCF, 0x34, 0x06, 0x54, 0x9A,  // ..C.4.T.
            /* 16B8 */  0x4B, 0x2F, 0x3D, 0xB1, 0x84, 0x38, 0xD1, 0xDE,  // K/=..8..
            /* 16C0 */  0x4F, 0x67, 0xF4, 0xB0, 0xE1, 0x63, 0xAF, 0x67,  // Og...c.g
            /* 16C8 */  0xFB, 0x68, 0xE0, 0x41, 0xFA, 0xC4, 0xC1, 0xEE,  // .h.A....
            /* 16D0 */  0xC4, 0xBE, 0x20, 0x3D, 0xC7, 0x18, 0xED, 0x3D,  // .. =...=
            /* 16D8 */  0xC2, 0xE7, 0x9D, 0x67, 0x4A, 0x23, 0x84, 0x63,  // ...gJ#.c
            /* 16E0 */  0x27, 0x38, 0x8F, 0xC4, 0x97, 0x4C, 0xFF, 0xFF,  // '8...L..
            /* 16E8 */  0xE7, 0xE9, 0x13, 0x0F, 0xF6, 0xE8, 0xC3, 0x8F,  // ........
            /* 16F0 */  0x6C, 0x0C, 0xDB, 0xD7, 0x01, 0x36, 0x2A, 0xDF,  // l....6*.
            /* 16F8 */  0x72, 0x8D, 0x6D, 0xD0, 0xC7, 0x2C, 0x4F, 0x9B,  // r.m..,O.
            /* 1700 */  0x5D, 0x28, 0xC1, 0x27, 0xE9, 0x48, 0x8B, 0xBE,  // ](.'.H..
            /* 1708 */  0xF6, 0x19, 0xF5, 0x81, 0xD4, 0x37, 0x61, 0x5F,  // .....7a_
            /* 1710 */  0x81, 0x9E, 0xB3, 0x3C, 0x1D, 0x4F, 0xC4, 0xB7,  // ...<.O..
            /* 1718 */  0x05, 0xA3, 0xBF, 0x23, 0xB0, 0xD8, 0x77, 0x04,  // ...#..w.
            /* 1720 */  0x50, 0xDD, 0x07, 0xF8, 0x1D, 0x01, 0xEE, 0x54,  // P......T
            /* 1728 */  0xDE, 0x11, 0xC0, 0xA0, 0xEF, 0x42, 0x40, 0x07,  // .....B@.
            /* 1730 */  0xEA, 0xF9, 0x79, 0xAC, 0x3E, 0xD2, 0xFA, 0x92,  // ..y.>...
            /* 1738 */  0xF0, 0x98, 0xC0, 0x60, 0x7C, 0xBD, 0x33, 0x86,  // ...`|.3.
            /* 1740 */  0x61, 0x3C, 0xD2, 0x30, 0x3E, 0x28, 0x70, 0x15,  // a<.0>(p.
            /* 1748 */  0xF7, 0x5A, 0xE8, 0xA9, 0xE7, 0x81, 0xCA, 0x7B,  // .Z.....{
            /* 1750 */  0x50, 0x80, 0x72, 0x23, 0xE8, 0xF2, 0x28, 0x8E,  // P.r#..(.
            /* 1758 */  0x1A, 0x9F, 0x4F, 0x03, 0xF6, 0x35, 0x59, 0xDD,  // ..O..5Y.
            /* 1760 */  0x57, 0x7D, 0x39, 0xF6, 0xA5, 0x83, 0xDD, 0x65,  // W}9....e
            /* 1768 */  0xD9, 0xDD, 0x90, 0xDD, 0xBD, 0xC2, 0xBD, 0xDC,  // ........
            /* 1770 */  0xFA, 0xD0, 0xE0, 0xEB, 0x82, 0xC7, 0x68, 0xD5,  // ......h.
            /* 1778 */  0x70, 0xD0, 0xAE, 0x06, 0x41, 0xFE, 0xFF, 0x0F,  // p...A...
            /* 1780 */  0x02, 0x3E, 0x72, 0x79, 0x5A, 0x46, 0x84, 0x71,  // .>ryZF.q
            /* 1788 */  0xF8, 0x65, 0x67, 0xC3, 0x38, 0xBE, 0xE9, 0xFA,  // .eg.8...
            /* 1790 */  0x54, 0xC0, 0x0E, 0x5B, 0xBE, 0x19, 0x18, 0xF8,  // T..[....
            /* 1798 */  0x41, 0xE1, 0x65, 0xDB, 0xC7, 0x07, 0x36, 0xB4,  // A.e...6.
            /* 17A0 */  0xB7, 0x05, 0x4F, 0x20, 0xD6, 0x9B, 0x03, 0x8C,  // ..O ....
            /* 17A8 */  0x93, 0x03, 0xF8, 0xB4, 0x3F, 0x14, 0x74, 0x10,  // ....?.t.
            /* 17B0 */  0xC7, 0x9F, 0x1C, 0x60, 0x1C, 0x16, 0x0C, 0x11,  // ...`....
            /* 17B8 */  0xFE, 0x1D, 0x80, 0x29, 0x84, 0xD6, 0xC1, 0x01,  // ...)....
            /* 17C0 */  0x3C, 0x1E, 0x0E, 0x0E, 0xA0, 0xB8, 0xF4, 0x90,  // <.......
            /* 17C8 */  0x83, 0x03, 0xF4, 0x10, 0x17, 0x04, 0x6A, 0xE5,  // ......j.
            /* 17D0 */  0xC6, 0x48, 0x8F, 0xD7, 0xE0, 0x39, 0x40, 0x70,  // .H...9@p
            /* 17D8 */  0x58, 0x43, 0xC4, 0x35, 0x46, 0x60, 0x63, 0x44,  // XC.5F`cD
            /* 17E0 */  0xF6, 0x31, 0x82, 0x61, 0xC4, 0x36, 0x46, 0x70,  // .1.a.6Fp
            /* 17E8 */  0x63, 0x44, 0xF7, 0x31, 0x82, 0xA1, 0x17, 0x8F,  // cD.1....
            /* 17F0 */  0x23, 0x8C, 0x08, 0xBE, 0x4A, 0x70, 0x2D, 0xA7,  // #...Jp-.
            /* 17F8 */  0x10, 0x5D, 0x25, 0xE0, 0x66, 0x5F, 0x99, 0x86,  // .]%.f_..
            /* 1800 */  0xC6, 0x53, 0x93, 0xE8, 0x2A, 0x81, 0xF9, 0xFF,  // .S..*...
            /* 1808 */  0x5F, 0x25, 0xF8, 0x45, 0xDA, 0x27, 0x59, 0x76,  // _%.E.'Yv
            /* 1810 */  0x9B, 0x80, 0x75, 0x73, 0xF1, 0x8D, 0xC8, 0xC7,  // ..us....
            /* 1818 */  0x17, 0xDC, 0x11, 0x86, 0x9D, 0xF4, 0x7D, 0xD6,  // ......}.
            /* 1820 */  0xC4, 0x9C, 0x20, 0x60, 0x9C, 0x1C, 0x70, 0x87,  // .. `..p.
            /* 1828 */  0x08, 0x70, 0x1D, 0x14, 0x18, 0xCA, 0x03, 0x0D,  // .p......
            /* 1830 */  0x47, 0x62, 0x70, 0xAF, 0x03, 0x11, 0x22, 0xC1,  // Gbp...".
            /* 1838 */  0x98, 0x14, 0xBB, 0x05, 0xFA, 0x78, 0xC3, 0xCE,  // .....x..
            /* 1840 */  0x13, 0x1E, 0x96, 0x6F, 0x18, 0xFC, 0xD2, 0xE3,  // ...o....
            /* 1848 */  0x2B, 0x38, 0x3B, 0x19, 0xF2, 0x8B, 0xE3, 0x43,  // +8;....C
            /* 1850 */  0x84, 0x51, 0xA2, 0xB1, 0x93, 0x43, 0x84, 0x93,  // .Q...C..
            /* 1858 */  0x7B, 0x0A, 0xF1, 0x99, 0xC3, 0x67, 0x38, 0xCC,  // {....g8.
            /* 1860 */  0x0D, 0xF2, 0xB8, 0x0E, 0xCA, 0xD7, 0x4B, 0x36,  // ......K6
            /* 1868 */  0x6C, 0xE3, 0x18, 0xF6, 0x39, 0xC8, 0x33, 0xF0,  // l...9.3.
            /* 1870 */  0x58, 0x62, 0x1F, 0x90, 0x21, 0xD9, 0xB0, 0xD8,  // Xb..!...
            /* 1878 */  0x10, 0x8D, 0xE7, 0xF3, 0x0D, 0xC3, 0x89, 0xE5,  // ........
            /* 1880 */  0x71, 0x62, 0x27, 0xC3, 0xB0, 0xCF, 0xD6, 0xD3,  // qb'.....
            /* 1888 */  0xE0, 0x07, 0x0D, 0xDF, 0x09, 0xDE, 0xD6, 0x31,  // .......1
            /* 1890 */  0xC7, 0x01, 0xDF, 0x42, 0x60, 0xDF, 0x14, 0x1E,  // ...B`...
            /* 1898 */  0x8F, 0x8C, 0xF2, 0x9E, 0xC2, 0x6E, 0x23, 0x60,  // .....n#`
            /* 18A0 */  0xFD, 0xFF, 0xDF, 0x46, 0x70, 0x47, 0xCF, 0xE7,  // ...FpG..
            /* 18A8 */  0x76, 0xF0, 0x40, 0xBC, 0xB3, 0x19, 0xFD, 0x79,  // v.@....y
            /* 18B0 */  0xEA, 0x9C, 0xD9, 0x1C, 0x8E, 0xC6, 0x63, 0xF0,  // ......c.
            /* 18B8 */  0x61, 0xC2, 0xE7, 0x57, 0xC0, 0xCD, 0xB0, 0xB8,  // a..W....
            /* 18C0 */  0xEC, 0xE7, 0xA2, 0x81, 0x7C, 0xE7, 0x90, 0x50,  // ....|..P
            /* 18C8 */  0x18, 0xD4, 0xE1, 0xCE, 0x47, 0x74, 0xC0, 0xC9,  // ....Gt..
            /* 18D0 */  0x79, 0x1C, 0xF6, 0x94, 0xDF, 0x60, 0x8C, 0xF0,  // y....`..
            /* 18D8 */  0xEC, 0x12, 0x38, 0xC6, 0x49, 0xBC, 0x88, 0xBC,  // ..8.I...
            /* 18E0 */  0xB8, 0x18, 0x3D, 0xD6, 0xF3, 0x38, 0xBB, 0x28,  // ..=..8.(
            /* 18E8 */  0x1C, 0x43, 0x28, 0x9F, 0x31, 0x42, 0xC4, 0x8A,  // .C(.1B..
            /* 18F0 */  0x62, 0xD4, 0x20, 0x8F, 0x0B, 0xFE, 0xFF, 0x83,  // b. .....
            /* 18F8 */  0x3C, 0xCB, 0x44, 0x38, 0x94, 0xB8, 0xC6, 0x7B,  // <.D8...{
            /* 1900 */  0x1E, 0x67, 0x22, 0x87, 0x4C, 0x0F, 0x7B, 0xE4,  // .g".L.{.
            /* 1908 */  0x1C, 0x0D, 0xB2, 0x63, 0x03, 0x60, 0xEE, 0x74,  // ...c.`.t
            /* 1910 */  0x80, 0x3B, 0x45, 0x83, 0x69, 0xB0, 0xB0, 0x07,  // .;E.i...
            /* 1918 */  0xC1, 0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55,  // .......U
            /* 1920 */  0x83, 0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7,  // .25.4...
            /* 1928 */  0x52, 0x63, 0xC6, 0xA4, 0x1C, 0x04, 0x74, 0x80,  // Rc....t.
            /* 1930 */  0xF2, 0x6F, 0xC2, 0x31, 0x40, 0xE8, 0x5D, 0xCA,  // .o.1@.].
            /* 1938 */  0xA3, 0xF3, 0x89, 0xC2, 0x40, 0x16, 0x05, 0x22,  // ....@.."
            /* 1940 */  0x20, 0x07, 0x00, 0xA2, 0xA1, 0x40, 0x68, 0x48,  //  ....@hH
            /* 1948 */  0x30, 0x2A, 0x8B, 0x46, 0x40, 0x0E, 0x00, 0x42,  // 0*.F@..B
            /* 1950 */  0x43, 0x81, 0xD0, 0x90, 0x14, 0x3A, 0x97, 0x12,  // C....:..
            /* 1958 */  0x0A, 0x01, 0x59, 0x28, 0x08, 0x15, 0x0E, 0x42,  // ..Y(...B
            /* 1960 */  0xC3, 0x81, 0x50, 0xD5, 0x0F, 0x05, 0x81, 0xFA,  // ..P.....
            /* 1968 */  0xFF, 0x9F, 0x12, 0x44, 0x40, 0x4E, 0x0E, 0x42,  // ...D@N.B
            /* 1970 */  0x75, 0x7F, 0xC0, 0x04, 0x62, 0xB9, 0x1F, 0x40,  // u...b..@
            /* 1978 */  0x01, 0x3A, 0x1C, 0x88, 0x80, 0x1C, 0x18, 0x84,  // .:......
            /* 1980 */  0x7E, 0xBF, 0x0C, 0x62, 0xAD, 0x20, 0x74, 0xA5,  // ~..b. t.
            /* 1988 */  0x06, 0xB5, 0x14, 0x2D, 0x40, 0x4C, 0x1E, 0x08,  // ...-@L..
            /* 1990 */  0x95, 0x0B, 0x22, 0x30, 0x47, 0x03, 0xA2, 0x71,  // .."0G..q
            /* 1998 */  0x41, 0x68, 0x7C, 0x30, 0x2A, 0xD5, 0x0B, 0x10,  // Ah|0*...
            /* 19A0 */  0x93, 0x0F, 0x42, 0xE3, 0x80, 0xE8, 0x74, 0x40,  // ..B...t@
            /* 19A8 */  0x9E, 0x0D, 0x1A, 0x30, 0x01, 0xA1, 0x22, 0x41,  // ...0.."A
            /* 19B0 */  0x04, 0xE6, 0x58, 0x40, 0x34, 0x2A, 0x08, 0x8D,  // ..X@4*..
            /* 19B8 */  0x0E, 0x46, 0xA5, 0x9B, 0x19, 0x00, 0x05, 0xA1,  // .F......
            /* 19C0 */  0xF1, 0x40, 0x74, 0xFE, 0x26, 0x6A, 0x80, 0x98,  // .@t.&j..
            /* 19C8 */  0x44, 0x10, 0x2A, 0x19, 0x44, 0x60, 0x8E, 0x0A,  // D.*.D`..
            /* 19D0 */  0x44, 0xE3, 0x83, 0x50, 0x39, 0x6E, 0xC0, 0x58,  // D..P9n.X
            /* 19D8 */  0x04, 0x10, 0x1D, 0x09, 0x08, 0x08, 0x8D, 0x09,  // ........
            /* 19E0 */  0x42, 0xA5, 0xBC, 0x19, 0x04, 0x68, 0xF9, 0x20,  // B....h. 
            /* 19E8 */  0x02, 0x72, 0x24, 0x10, 0x1A, 0x11, 0x8C, 0x8A,  // .r$.....
            /* 19F0 */  0xD5, 0x73, 0x24, 0xA0, 0x20, 0x34, 0x10, 0x88,  // .s$. 4..
            /* 19F8 */  0x86, 0x48, 0xFC, 0x0C, 0x91, 0x82, 0x50, 0x91,  // .H....P.
            /* 1A00 */  0x20, 0x02, 0xB3, 0x44, 0x45, 0x20, 0x2C, 0x20,  //  ..DE , 
            /* 1A08 */  0x08, 0x0D, 0xF5, 0x88, 0x11, 0xA0, 0x83, 0x82,  // ........
            /* 1A10 */  0xD0, 0xE0, 0x20, 0x1A, 0x38, 0xB1, 0x34, 0x70,  // .. .8.4p
            /* 1A18 */  0x0A, 0x42, 0xE3, 0x80, 0x08, 0xCC, 0xF1, 0x81,  // .B......
            /* 1A20 */  0xA8, 0x24, 0x4D, 0x03, 0xA5, 0x20, 0x1A, 0x06,  // .$M.. ..
            /* 1A28 */  0x31, 0x35, 0x0C, 0x0A, 0x42, 0x63, 0xB8, 0x02,  // 15..Bc..
            /* 1A30 */  0x64, 0xD1, 0x40, 0x68, 0x54, 0x10, 0x1D, 0x1F,  // d.@hT...
            /* 1A38 */  0xC8, 0xC3, 0x56, 0x40, 0x96, 0x0A, 0x42, 0xFF,  // ..V@..B.
            /* 1A40 */  0xFF, 0xD2, 0x41, 0x04, 0xE6, 0xC0, 0x40, 0x54,  // ..A...@T
            /* 1A48 */  0xC4, 0xBB, 0xE5, 0xF0, 0x18, 0x08, 0x15, 0x0B,  // ........
            /* 1A50 */  0x22, 0x40, 0x0B, 0x7E, 0x43, 0x09, 0xC4, 0x71,  // "@.~C..q
            /* 1A58 */  0x41, 0x68, 0xA8, 0xCF, 0x93, 0x86, 0x47, 0x40,  // Ah....G@
            /* 1A60 */  0x68, 0x70, 0x10, 0x81, 0x59, 0xE8, 0x0F, 0x4F,  // hp..Y..O
            /* 1A68 */  0x40, 0x16, 0x0F, 0x42, 0xC3, 0x80, 0xD0, 0x90,  // @..B....
            /* 1A70 */  0x20, 0xF4, 0x5D, 0xE2, 0xA3, 0x06, 0xF9, 0xE5,  //  .].....
            /* 1A78 */  0xE9, 0x38, 0x40, 0x40, 0xA8, 0xD8, 0x5F, 0x9F,  // .8@@.._.
            /* 1A80 */  0x8E, 0x00, 0x04, 0x84, 0x06, 0x02, 0xD1, 0x11,  // ........
            /* 1A88 */  0x80, 0xA8, 0x1B, 0x14, 0x05, 0xA1, 0x22, 0x41,  // ......"A
            /* 1A90 */  0x04, 0xE6, 0x40, 0x40, 0x34, 0x24, 0x08, 0x0D,  // ..@@4$..
            /* 1A98 */  0x0D, 0x46, 0xC5, 0xBA, 0x1B, 0x02, 0x05, 0xA1,  // .F......
            /* 1AA0 */  0x81, 0x40, 0x68, 0x50, 0x10, 0x1D, 0x3B, 0x88,  // .@hP..;.
            /* 1AA8 */  0xBC, 0x63, 0x07, 0x05, 0xA1, 0xC2, 0x41, 0x04,  // .c....A.
            /* 1AB0 */  0x66, 0xE1, 0xFE, 0x40, 0x58, 0x6C, 0x10, 0xAA,  // f..@Xl..
            /* 1AB8 */  0xE9, 0xAF, 0x12, 0x90, 0xE8, 0x03, 0xA1, 0x9A,  // ........
            /* 1AC0 */  0x41, 0x64, 0x64, 0x18, 0x06, 0x11, 0xA0, 0xB3,  // Add.....
            /* 1AC8 */  0x82, 0xD1, 0xDC, 0x20, 0x54, 0xCB, 0x97, 0x48,  // ... T..H
            /* 1AD0 */  0x80, 0x16, 0x06, 0xA2, 0x03, 0x01, 0x01, 0xD1,  // ........
            /* 1AD8 */  0xE1, 0x81, 0x80, 0xD0, 0x98, 0x80, 0x34, 0x33,  // ......43
            /* 1AE0 */  0x20, 0x4D, 0xF4, 0xD2, 0x11, 0x98, 0xF3, 0x81,  //  M......
            /* 1AE8 */  0x50, 0x1D, 0x9F, 0x9A, 0x20, 0x24, 0x36, 0x88,  // P... $6.
            /* 1AF0 */  0x40, 0x2D, 0xE2, 0x5D, 0x13, 0x94, 0x84, 0x00,  // @-.]....
            /* 1AF8 */  0xD1, 0x11, 0x81, 0x80, 0xD0, 0xC0, 0x20, 0xF4,  // ...... .
            /* 1B00 */  0x6D, 0x66, 0x10, 0x27, 0x03, 0xA1, 0x29, 0x41,  // mf.'..)A
            /* 1B08 */  0x68, 0x72, 0x10, 0x0D, 0xC0, 0x32, 0x1E, 0x57,  // hr...2.W
            /* 1B10 */  0x1A, 0x80, 0xD5, 0x83, 0x08, 0xCC, 0x49, 0x40,  // ......I@
            /* 1B18 */  0x68, 0x3A, 0x10, 0x01, 0x3A, 0x2A, 0x20, 0xFD,  // h:..:* .
            /* 1B20 */  0xFF, 0x07, 0x51, 0x79, 0xDC, 0xA0, 0x20, 0x34,  // ..Qy.. 4
            /* 1B28 */  0x3E, 0x08, 0x4D, 0xFB, 0x62, 0x14, 0xA8, 0xB3,  // >.M.b...
            /* 1B30 */  0x83, 0x08, 0xD4, 0xDA, 0xDF, 0x3B, 0xC1, 0x48,  // .....;.H
            /* 1B38 */  0x22, 0x10, 0x9A, 0x13, 0x84, 0xE6, 0x06, 0xA1,  // ".......
            /* 1B40 */  0x41, 0x1E, 0x48, 0x8F, 0x34, 0x0C, 0x84, 0x06,  // A.H.4...
            /* 1B48 */  0x05, 0xD1, 0x00, 0x9C, 0x1A, 0x44, 0x03, 0x70,  // .....D.p
            /* 1B50 */  0xA6, 0x97, 0x52, 0x30, 0x92, 0x10, 0x84, 0xE6,  // ..R0....
            /* 1B58 */  0x07, 0xA1, 0x8A, 0x5F, 0x47, 0x41, 0x89, 0x7E,  // ..._GA.~
            /* 1B60 */  0x10, 0x81, 0x3A, 0x3F, 0x88, 0xC0, 0xAC, 0xEA,  // ..:?....
            /* 1B68 */  0x3D, 0xA5, 0xA3, 0x0C, 0x01, 0xA1, 0xDA, 0x41,  // =......A
            /* 1B70 */  0xA8, 0xAE, 0x27, 0x51, 0x50, 0x92, 0x0A, 0x84,  // ..'QP...
            /* 1B78 */  0x26, 0xFD, 0x17, 0x05, 0x21, 0x3A, 0xDF, 0x7C,  // &...!:.|
            /* 1B80 */  0x87, 0xC2, 0x40, 0x34, 0x30, 0x02, 0x42, 0x73,  // ..@40.Bs
            /* 1B88 */  0x83, 0x51, 0x69, 0x6A, 0x8F, 0x35, 0x14, 0x44,  // .Qij.5.D
            /* 1B90 */  0x83, 0xB1, 0x76, 0x10, 0x81, 0x39, 0x31, 0x18,  // ..v..91.
            /* 1B98 */  0x55, 0xE1, 0x16, 0x8C, 0x49, 0x02, 0x11, 0x98,  // U...I...
            /* 1BA0 */  0xB3, 0x80, 0xE8, 0x60, 0x40, 0xC0, 0x68, 0x58,  // ...`@.hX
            /* 1BA8 */  0x30, 0x2A, 0xF4, 0x43, 0xF5, 0xA0, 0xC1, 0x40,  // 0*.C...@
            /* 1BB0 */  0x04, 0xE6, 0x24, 0x20, 0x3A, 0xF0, 0x10, 0xBB,  // ..$ :...
            /* 1BB8 */  0x07, 0x1E, 0x0A, 0x22, 0x30, 0x6B, 0x05, 0x11,  // ..."0k..
            /* 1BC0 */  0x98, 0x83, 0x82, 0xD1, 0xF0, 0x60, 0x54, 0x89,  // .....`T.
            /* 1BC8 */  0x5E, 0x30, 0x96, 0x1A, 0x44, 0x60, 0x56, 0xFB,  // ^0..D`V.
            /* 1BD0 */  0x82, 0x7A, 0xF4, 0x60, 0x3F, 0xA8, 0x80, 0x24,  // .z.`?..$
            /* 1BD8 */  0x1A, 0x88, 0x06, 0x47, 0xFE, 0xD5, 0x02, 0xB3,  // ...G....
            /* 1BE0 */  0x60, 0x10, 0x1A, 0x03, 0x84, 0xC6, 0x02, 0xA1,  // `.......
            /* 1BE8 */  0x92, 0x1F, 0x8A, 0x3A, 0x9E, 0x10, 0x10, 0x1A,  // ...:....
            /* 1BF0 */  0xF7, 0x43, 0x15, 0x8C, 0x48, 0xF8, 0x75, 0xEA,  // .C..H.u.
            /* 1BF8 */  0xE0, 0x42, 0x40, 0x74, 0x80, 0x20, 0x40, 0x34,  // .B@t. @4
            /* 1C00 */  0x18, 0x08, 0x0D, 0x0A, 0xC8, 0xDF, 0x64, 0x02,  // ......d.
            /* 1C08 */  0xF4, 0xFF, 0x3F, 0x04, 0x88, 0x00, 0x09, 0x08,  // ..?.....
            /* 1C10 */  0x0D, 0x0A, 0x42, 0x15, 0x3D, 0xEB, 0x1E, 0x0E,  // ..B.=...
            /* 1C18 */  0x18, 0x88, 0x40, 0xAD, 0xEB, 0x05, 0xFD, 0x50,  // ..@....P
            /* 1C20 */  0xC0, 0x40, 0xA8, 0x76, 0x10, 0x81, 0x39, 0x33,  // .@.v..93
            /* 1C28 */  0x10, 0xD5, 0xF1, 0x87, 0x7D, 0x30, 0x60, 0x20,  // ....}0` 
            /* 1C30 */  0x34, 0x04, 0x08, 0xD5, 0xF8, 0xBC, 0x13, 0xA8,  // 4.......
            /* 1C38 */  0xF3, 0x80, 0x08, 0xC8, 0x19, 0x41, 0x68, 0x66,  // .....Ahf
            /* 1C40 */  0x30, 0xAA, 0xF4, 0xF5, 0x15, 0x88, 0xA8, 0x07,  // 0.......
            /* 1C48 */  0xA1, 0x69, 0x40, 0x68, 0x4A, 0x10, 0x01, 0x5A,  // .i@hJ..Z
            /* 1C50 */  0xD9, 0x8B, 0x54, 0x43, 0x27, 0x20, 0x54, 0x3D,  // ..TC' T=
            /* 1C58 */  0x88, 0xC0, 0x9C, 0xFE, 0x07, 0xA8, 0x63, 0x05,  // ......c.
            /* 1C60 */  0x79, 0x8A, 0x09, 0xC4, 0xCA, 0xFF, 0x6C, 0x07,  // y.....l.
            /* 1C68 */  0xC0, 0x40, 0x68, 0x3A, 0x10, 0x9A, 0x1F, 0x84,  // .@h:....
            /* 1C70 */  0x6A, 0x7D, 0x96, 0x05, 0x25, 0xF9, 0x40, 0x34,  // j}..%.@4
            /* 1C78 */  0x20, 0x02, 0x42, 0x35, 0x7C, 0x46, 0x0F, 0x80,  //  .B5|F..
            /* 1C80 */  0x81, 0x68, 0x00, 0x04, 0x84, 0xA6, 0x03, 0xA3,  // .h......
            /* 1C88 */  0x6A, 0xDE, 0xC2, 0x81, 0x88, 0x42, 0x10, 0xAA,  // j....B..
            /* 1C90 */  0x18, 0x84, 0xE6, 0x03, 0xA1, 0x01, 0xDF, 0xF5,  // ........
            /* 1C98 */  0x3A, 0x30, 0x90, 0xEF, 0x9F, 0x0E, 0x21, 0x04,  // :0....!.
            /* 1CA0 */  0x84, 0xC6, 0xF1, 0x7F, 0x18, 0xA3, 0x20, 0x34,  // ...... 4
            /* 1CA8 */  0x2C, 0x88, 0xC0, 0x2C, 0x2C, 0xC0, 0x31, 0x88,  // ,..,,.1.
            /* 1CB0 */  0x82, 0x50, 0xF1, 0x20, 0x3A, 0x20, 0x10, 0x20,  // .P. : . 
            /* 1CB8 */  0x2A, 0xA1, 0xC0, 0xC1, 0x80, 0x82, 0x68, 0x10,  // *.....h.
            /* 1CC0 */  0x04, 0x88, 0x86, 0x03, 0xA1, 0x61, 0xC1, 0xA8,  // .....a..
            /* 1CC8 */  0xBC, 0x04, 0x47, 0x06, 0x0A, 0x42, 0x23, 0x80,  // ..G..B#.
            /* 1CD0 */  0x08, 0xCC, 0x91, 0x81, 0xA8, 0x8C, 0x06, 0xC3,  // ........
            /* 1CD8 */  0xA3, 0x11, 0xC0, 0x58, 0x32, 0x10, 0x1D, 0x53,  // ...X2..S
            /* 1CE0 */  0x08, 0x08, 0xD5, 0x9C, 0x01, 0x8C, 0xFD, 0xFF,  // ........
            /* 1CE8 */  0x93, 0x82, 0x08, 0xC8, 0xE9, 0x41, 0x68, 0xDC,  // .....Ah.
            /* 1CF0 */  0x12, 0x60, 0xEC, 0xFF, 0x0F                     // .`...
        })
        Name (WDST, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDIN, Buffer (0x30)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDEN, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDLI, Buffer (0x28)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDPA, Buffer (0x34)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDBU, Buffer (0x38)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (QPUW, 3, Serialized)
        {
            Local7 = 0x04
            If ((Arg1 < Arg2))
            {
                PWOT = Arg0
                PWOI = Arg1
                PUWS = 0x04
                GSWS (0x01F3)
                Local7 = PUWS /* \PUWS */
                If ((Local7 == Zero))
                {
                    Local1 = PWOI /* \PWOI */
                    If ((Local1 < 0x96))
                    {
                        Local0 = PWBS /* \PWBS */
                    }
                    ElseIf ((Local1 < 0x0190))
                    {
                        Local0 = PWBM /* \PWBM */
                    }
                    ElseIf ((Local1 < 0x03E8))
                    {
                        Local0 = PWBL /* \PWBL */
                    }
                    Else
                    {
                        Local0 = PUWB /* \PUWB */
                    }
                }
            }

            If ((Local7 != Zero))
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = WDST /* \_SB_.WMIB.WDST */
                    }
                    Case (One)
                    {
                        Local0 = WDIN /* \_SB_.WMIB.WDIN */
                    }
                    Case (0x02)
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }
                    Case (0x03)
                    {
                        Local0 = WDLI /* \_SB_.WMIB.WDLI */
                    }
                    Case (0x04)
                    {
                        Local0 = WDPA /* \_SB_.WMIB.WDPA */
                    }
                    Case (0x05)
                    {
                        Local0 = WDBU /* \_SB_.WMIB.WDBU */
                    }
                    Default
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }

                }
            }

            Return (Local0)
        }

        Method (WQST, 1, Serialized)
        {
            Return (QPUW (Zero, Arg0, STIC))
        }

        Method (WQIN, 1, Serialized)
        {
            Return (QPUW (One, Arg0, INIC))
        }

        Method (WQEN, 1, Serialized)
        {
            Return (QPUW (0x02, Arg0, ENIC))
        }

        Method (WQOL, 1, Serialized)
        {
            Return (QPUW (0x03, Arg0, OLIC))
        }

        Method (WQPW, 1, Serialized)
        {
            Return (QPUW (0x04, Arg0, PWIC))
        }

        Method (WQBU, 1, Serialized)
        {
            Return (QPUW (0x05, Arg0, BUIC))
        }

        Name (TBFS, Buffer (0x96){})
        Name (TBFM, Buffer (0x0190){})
        Name (TBFL, Buffer (0x03E8){})
        Name (TBUF, Buffer (0x9000){})
        Method (SHBE, 4, Serialized)
        {
            Local6 = SizeOf (Arg2)
            Local0 = DerefOf (Arg3)
            If (((Local0 + 0x04) < Local6))
            {
                Arg2 [Local0] = Arg0
                Local0++
                Arg2 [Local0] = 0x82
                Local0++
                CreateWordField (Arg2, Local0, SSIZ)
                SSIZ = Arg1
                Local0 += 0x02
                If (((Local0 + Arg1) < Local6))
                {
                    Local7 = Zero
                }

                Arg3 = Local0
            }
            Else
            {
                Local7 = 0x04
            }

            Return (Local7)
        }

        Method (WSTB, 4, Serialized)
        {
            Local0 = Zero
            Local1 = SizeOf (Arg0)
            Local2 = Zero
            Local7 = SHBE (0x30, One, Arg1, RefOf (Local2))
            Local3 = Zero
            While (((Local7 == Zero) && (Local0 < Local1)))
            {
                Local5 = DerefOf (Arg0 [Local0])
                Local0++
                Local5 += (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local6 = (Local5 + 0x02)
                Local7 = SHBE (0x1E, Local6, Arg1, RefOf (Local2))
                If ((Local7 == Zero))
                {
                    If ((CPBF (Arg1, RefOf (Local2), Arg0, RefOf (Local0), Local5) == One))
                    {
                        Arg1 [Local2] = Zero
                        Local2++
                        Arg1 [Local2] = Zero
                        Local2++
                        Local3++
                    }
                    Else
                    {
                        Local7 = 0x04
                    }
                }
            }

            If ((Local7 == Zero))
            {
                If (((Local3 >= Arg2) && (Local3 <= Arg3)))
                {
                    CreateWordField (Arg1, 0x02, BSIZ)
                    BSIZ = (Local2 - 0x04)
                }
                Else
                {
                    Local7 = 0x05
                }
            }

            Return (Local7)
        }

        Name (BNSD, Package (0x01)
        {
            ""
        })
        Method (BSNS, 1, Serialized)
        {
            Local0 = Zero
            CreateWordField (Arg0, Local0, SSIZ)
            Local0 += 0x02
            Local2 = ((0x02 + SSIZ) + 0x02)
            Local1 = Buffer (Local2){}
            Local3 = 0x02
            If ((CPBF (Local1, RefOf (Local3), Arg0, RefOf (Local0), SSIZ) == One))
            {
                CreateWordField (Local1, Local3, UNUL)
                UNUL = Zero
                CreateWordField (Local1, Zero, USIZ)
                USIZ = (SSIZ + 0x02)
            }

            BNSD [Zero] = Local1
        }

        Method (BGNS, 0, Serialized)
        {
            Return (DerefOf (BNSD [Zero]))
        }

        Method (WSBS, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = 0x04
            Local6 = (SizeOf (Arg0) + 0x10)
            If ((Local6 < SizeOf (TBFS)))
            {
                Local7 = WSTB (Arg0, TBFS, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBS = TBFS /* \_SB_.WMIB.TBFS */
                }
            }
            ElseIf ((Local6 < SizeOf (TBFL)))
            {
                Local7 = WSTB (Arg0, TBFL, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBL = TBFL /* \_SB_.WMIB.TBFL */
                }
            }
            ElseIf ((Local6 <= SizeOf (TBUF)))
            {
                Local7 = WSTB (Arg0, TBUF, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PUWB = TBUF /* \_SB_.WMIB.TBUF */
                }
            }

            If ((Local7 == Zero))
            {
                BSNS (Arg0)
                PUWS = 0x04
                GSWS (0x02F3)
                Local7 = PUWS /* \PUWS */
                If ((Local6 < SizeOf (TBFS)))
                {
                    TBFS = PWBS /* \PWBS */
                }
                ElseIf ((Local6 < SizeOf (TBFL)))
                {
                    TBFL = PWBL /* \PWBL */
                }
                Else
                {
                    TBUF = PUWB /* \PUWB */
                }

                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WSSD, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = WSTB (Arg0, TBUF, 0x02, 0x02)
            PUWB = TBUF /* \_SB_.WMIB.TBUF */
            If ((Local7 == Zero))
            {
                PUWS = 0x04
                GSWS (0x03F3)
                Local7 = PUWS /* \PUWS */
                TBUF = PUWB /* \PUWB */
                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WFTE, 1, Serialized)
        {
            Local7 = 0x04
            Return (Local7)
        }

        Method (WMBS, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Local7 = WSBS (Arg2)
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local7 = WSSD (Arg2)
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local7 = WFTE (Arg2)
            }

            Return (Local7)
        }

        Method (WMUI, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Acquire (PUMX, 0xFFFF)
                Local7 = WSTB (Arg0, TBUF, 0x06, 0x06)
                PUWB = TBUF /* \_SB_.WMIB.TBUF */
                If ((Local7 == Zero))
                {
                    PUWS = 0x04
                    Local7 = PUWS /* \PUWS */
                }

                Release (PUMX)
            }

            Return (Local7)
        }

        Name (CBWE, Package (0x02)
        {
            Package (0x05)
            {
                Unicode ("4BIOS Configuration Change"), 
                "BIOS Settings", 
                0x04, 
                0x05, 
                0x02
            }, 

            Package (0x05)
            {
                "BIOS Configuration Security", 
                "An attempt has been made to Access BIOS features unsuccessfully", 
                0x04, 
                0x0A, 
                0x06
            }
        })
        Name (UKEV, Package (0x05)
        {
            "Unknown Event", 
            "Unknown event type", 
            Zero, 
            Zero, 
            Zero
        })
        Mutex (BEMX, 0x00)
        Name (BEID, 0xFF)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Acquire (BEMX, 0xFFFF)
            Local0 = BEID /* \_SB_.WMIB.BEID */
            BEID = 0xFF
            Release (BEMX)
            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    DerefOf (CBWE [Local0]) [One] = BGNS ()
                    Local1 = DerefOf (CBWE [Local0])
                }
                Case (One)
                {
                    Local1 = DerefOf (CBWE [Local0])
                }
                Default
                {
                    Local1 = UKEV /* \_SB_.WMIB.UKEV */
                }

            }

            Return (Local1)
        }

        Method (GBME, 1, Serialized)
        {
            Acquire (BEMX, 0xFFFF)
            BEID = Arg0
            Release (BEMX)
            Notify (WMIB, 0x80) // Status Change
        }

        Name (PEVT, Package (0x07)
        {
            "", 
            "", 
            "root\\wmi", 
            "HPBIOS_BIOSEvent", 
            Zero, 
            Zero, 
            Zero
        })
        Method (WQPE, 1, Serialized)
        {
            PEVT [Zero] = DerefOf (DerefOf (CBWE [Arg0]) [
                Zero])
            PEVT [One] = DerefOf (DerefOf (CBWE [Arg0]) [
                One])
            PEVT [0x04] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x02])
            PEVT [0x05] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x03])
            PEVT [0x06] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x04])
            Return (PEVT) /* \_SB_.WMIB.PEVT */
        }

        OperationRegion (HWSS, SystemMemory, 0x23AAE000, 0x00000802)
        Field (HWSS, AnyAcc, Lock, Preserve)
        {
            WSSC,   16, 
            WSSB,   16384
        }

        Name (SENS, Package (0x08)
        {
            "BIOS Post Error", 
            " ", 
            One, 
            "BIOS Post Error", 
            One, 
            One, 
            "Post Error Occurred", 
            "Post Error Occurred"
        })
        Method (WQSS, 1, Serialized)
        {
            Local7 = Zero
            Local5 = Zero
            Local0 = WSSB /* \_SB_.WMIB.WSSB */
            While (((Local5 < 0x0800) && (Local7 < Arg0)))
            {
                Local1 = (DerefOf (Local0 [Local5]) + 0x02)
                Local5 += Local1
                Local7++
            }

            If (((Local5 < 0x0800) && (Local7 == Arg0)))
            {
                Local3 = DerefOf (Local0 [Local5])
                Local2 = Buffer (Local3){}
                Local5++
                Local6 = Zero
                While (((Local5 < 0x0800) && (Local6 < Local3)))
                {
                    Local2 [Local6] = DerefOf (Local0 [Local5])
                    Local6++
                    Local5++
                }

                SENS [One] = B2ST (Local2, Local3)
                SENS [0x04] = DerefOf (Local0 [Local5])
            }
            Else
            {
                SENS [One] = "Unknown Error"
                SENS [0x04] = Zero
            }

            Return (SENS) /* \_SB_.WMIB.SENS */
        }
    }

    OperationRegion (HPWV, SystemMemory, 0x23AB2000, 0x0000107C)
    Field (HPWV, AnyAcc, Lock, Preserve)
    {
        SNIN,   32, 
        COMD,   32, 
        CMTP,   32, 
        DASI,   32, 
        DASO,   32, 
        PVWB,   33536, 
        PVWS,   32, 
        RTCD,   32
    }

    Device (_SB.WMIV)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (BORN, Buffer (0x08){})
        Method (FBCD, 3, Serialized)
        {
            Local2 = Package (0x01)
                {
                    0x04
                }
            CreateByteField (Arg2, Zero, FCIP)
            If ((Arg0 == Zero))
            {
                Switch (FCIP)
                {
                    Case (0x08)
                    {
                        Local6 = 0x11
                    }
                    Case (0x0A)
                    {
                        Local6 = 0x02
                    }
                    Default
                    {
                        Local6 = One
                    }

                }

                Local2 = FSEC (Arg2, Local6, FCIP)
            }

            If ((Arg0 == One))
            {
                Local2 = FGIF (FCIP)
            }

            If ((Arg0 == 0x02))
            {
                Local2 = FGAE (FCIP)
            }

            If ((Arg0 == 0x03))
            {
                Local2 = FGAU (FCIP)
            }

            If ((Arg0 == 0x04))
            {
                Local2 = FGFS ()
            }

            If ((Arg0 == 0x05))
            {
                Local2 = FBPS (Arg2)
            }

            If ((Arg0 == 0x06))
            {
                Local2 = FGLW ()
            }

            Return (Local2)
        }

        Method (FSEC, 3, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg2)
            {
                Case (Zero)
                {
                    ^^PC00.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (One)
                {
                    ^^PC00.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x02)
                {
                    ^^PC00.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x08)
                {
                    ^^PC00.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PC00.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x0A)
                {
                    ^^PC00.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PC00.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGIF, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = Zero
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local1 = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                    DerefOf (Local0 [One]) [Zero] = Local1
                    Return (Local0)
                }
                Case (One)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = One
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x02)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x02
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x03)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x03
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x04)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x04
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x05
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x08)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x08
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x09)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x09
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0A)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x0A
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x02)
                        {
                            0x41, 
                            Zero
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x06))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0B)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x0B
                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0C)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x0C
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0F)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PC00.LPCB.EC0.FBGI = 0x0F
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x04))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBGI /* \_SB_.PC00.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGAE, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                ^^PC00.LPCB.EC0.FBAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FBAE /* \_SB_.PC00.LPCB.EC0_.FBAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGAU, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                ^^PC00.LPCB.EC0.FUAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PC00.LPCB.EC0.FUAE /* \_SB_.PC00.LPCB.EC0_.FUAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGFS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PC00.LPCB.EC0.FBCB /* \_SB_.PC00.LPCB.EC0_.FBCB */
            DerefOf (Local0 [One]) [One] = ^^PC00.LPCB.EC0.FBW1 /* \_SB_.PC00.LPCB.EC0_.FBW1 */
            DerefOf (Local0 [One]) [0x02] = ^^PC00.LPCB.EC0.FBW2 /* \_SB_.PC00.LPCB.EC0_.FBW2 */
            Return (Local0)
        }

        Method (FGLC, 0, NotSerialized)
        {
            Local0 = ^^PC00.LPCB.EC0.FBCM /* \_SB_.PC00.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FGLW, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PC00.LPCB.EC0.FBCM /* \_SB_.PC00.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FLCC, 0, NotSerialized)
        {
            Local0 = Zero
            While (((Local0 != 0x64) & (FGLC () == One)))
            {
                Sleep (0x64)
                Local0++
            }

            If ((Local0 >= 0x64))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (FBPS, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            ^^PC00.LPCB.EC0.FRPS = DerefOf (Arg0 [Zero])
            ^^PC00.LPCB.EC0.FRPS = DerefOf (Arg0 [One])
            ^^PC00.LPCB.EC0.FRPS = DerefOf (Arg0 [0x02])
            ^^PC00.LPCB.EC0.FRPS = DerefOf (Arg0 [0x03])
            If ((FLCC () == Zero))
            {
                Return (Package (0x01)
                {
                    0x41
                })
            }

            DerefOf (Local0 [One]) [Zero] = ^^PC00.LPCB.EC0.FRPS /* \_SB_.PC00.LPCB.EC0_.FRPS */
            Return (Local0)
        }

        Method (HVWC, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local2 = VRBC (Arg1, Arg2, Arg3)
                }
                Case (0x02)
                {
                    Local2 = VWBC (Arg1, Arg2, Arg3)
                }
                Case (0x00020006)
                {
                    Local2 = FBCD (Arg1, Arg2, Arg3)
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (VRBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (VWBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Name (THCT, Buffer (0x06)
        {
             0x01, 0x01, 0x03, 0x01, 0x01, 0x02               // ......
        })
        Name (PRFI, Buffer (0x06)
        {
             0x00, 0x08, 0x0C, 0x14, 0x18, 0x1C               // ......
        })
        Name (TSTM, Zero)
        Name (TSTV, Package (0x06)
        {
            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x03)
            {
                 0xFF, 0xFF, 0xFF                                 // ...
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x02)
            {
                 0xFF, 0xFF                                       // ..
            }
        })
        Name (CSD0, Zero)
        Name (CSD1, Zero)
        Name (CSD2, Zero)
        Name (CSD3, Zero)
        Method (SBBC, 1, NotSerialized)
        {
            Local1 = ToInteger (DerefOf (Arg0 [Zero]))
            If (Local1){}
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (WGBI, 1, NotSerialized)
        {
            If ((Arg0 < SizeOf (NBTI)))
            {
                Return (^^PC00.LPCB.EC0.GBTI (Arg0))
            }
            Else
            {
                Return (Package (0x02)
                {
                    0x06, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                })
            }
        }

        Method (GSAS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Local1 = ^^PC00.LPCB.EC0.GPID ()
            Local1 += One
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (HWWB, 0, NotSerialized)
        {
            Local0 = BT0P /* \_SB_.BT0P */
            If ((Local0 != 0x1F))
            {
                Local0 = Zero
            }

            SSMI (0xEA3A, Zero, Local0, Zero, Zero)
            GVWE (0x05, Zero)
        }

        Method (STMM, 1, NotSerialized)
        {
            Debug = "SetThermalStatus"
            Debug = Arg0
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= 0x10) && (IDTA <= 0x15))){}
            Local0 = Package (0x01)
                {
                    Zero
                }
            If (((IDTA >= 0x20) && (IDTA <= 0x24)))
            {
                Local7 = (IDTA - 0x20)
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If (^^PC00.LPCB.EC0.ECRG)
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    If (((Local7 < 0x03) || (Local7 == 0x04)))
                    {
                        ^^PC00.LPCB.EC0.CRZN = (One + Local7)
                        If ((Local2 == 0xFF))
                        {
                            Local2 = Zero
                        }

                        ^^PC00.LPCB.EC0.TEMP = Local2
                        If ((Local7 == 0x02))
                        {
                            Local2 = DerefOf (Arg0 [0x03])
                            ^^PC00.LPCB.EC0.CRZN = 0x04
                            If ((Local2 == 0xFF))
                            {
                                Local2 = Zero
                            }

                            ^^PC00.LPCB.EC0.TEMP = Local2
                        }
                    }
                    Else
                    {
                        If ((Local2 != 0xFF))
                        {
                            Local2 = \_TZ.CTCT (Local2)
                        }

                        ^^PC00.LPCB.EC0.FTGC = Local2
                    }

                    Release (^^PC00.LPCB.EC0.ECMX)
                }

                Local6 = Zero
                While ((Local6 < Local1))
                {
                    DerefOf (TSTV [Local7]) [Local6] = DerefOf (Arg0 [
                        (Local6 + 0x02)])
                    Local6++
                }

                TSTM = One
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0x30))
            {
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If ((Local1 > One))
                {
                    Local3 = DerefOf (Arg0 [0x04])
                }

                If (^^PC00.LPCB.EC0.ECRG)
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PC00.LPCB.EC0.FTGC = Local2
                    If ((Local1 > One))
                    {
                        ^^PC00.LPCB.EC0.FT2C = Local3
                    }

                    Release (^^PC00.LPCB.EC0.ECMX)
                }

                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0xAA))
            {
                Local1 = Zero
                While ((Local1 < SizeOf (TSTV)))
                {
                    Local2 = Zero
                    Local3 = DerefOf (THCT [Local1])
                    While ((Local2 < Local3))
                    {
                        DerefOf (TSTV [Local1]) [Local2] = 0xFF
                        Local2++
                    }

                    Local1++
                }

                If (^^PC00.LPCB.EC0.ECRG)
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    Local1 = One
                    While ((Local1 <= 0x05))
                    {
                        ^^PC00.LPCB.EC0.CRZN = Local1
                        ^^PC00.LPCB.EC0.TEMP = Zero
                        Local1++
                    }

                    ^^PC00.LPCB.EC0.FTGC = 0xFF
                    Release (^^PC00.LPCB.EC0.ECMX)
                }

                TSTM = Zero
                Return (Local0)
            }

            Return (Package (0x01)
            {
                0x06
            })
        }

        Method (GTMS, 1, NotSerialized)
        {
            Debug = "GetThermalStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= Zero) && (IDTA <= 0x04)))
            {
                Local2 = DerefOf (THCT [IDTA])
                DerefOf (Local6 [One]) [Zero] = Local2
                If ((Local2 == Zero))
                {
                    Return (Local6)
                }

                If (((IDTA < 0x03) || (IDTA == 0x04)))
                {
                    If (^^PC00.LPCB.EC0.ECRG)
                    {
                        Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                        ^^PC00.LPCB.EC0.CRZN = (One + IDTA)
                        DerefOf (Local6 [One]) [One] = ^^PC00.LPCB.EC0.DTMP /* \_SB_.PC00.LPCB.EC0_.DTMP */
                        If ((IDTA == 0x02))
                        {
                            ^^PC00.LPCB.EC0.CRZN = 0x04
                            DerefOf (Local6 [One]) [0x02] = ^^PC00.LPCB.EC0.DTMP /* \_SB_.PC00.LPCB.EC0_.DTMP */
                        }

                        Release (^^PC00.LPCB.EC0.ECMX)
                    }

                    If ((IDTA == 0x02))
                    {
                        DerefOf (Local6 [One]) [0x03] = PCTT /* \PCTT */
                    }
                }

                If ((IDTA == 0x03))
                {
                    Local1 = \_TZ.GFSD ()
                    DerefOf (Local6 [One]) [One] = Local1
                }

                Return (Local6)
            }

            If ((IDTA == 0x06))
            {
                If (TRCN)
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                TRCN = Zero
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [One] = Local1
                Return (Local6)
            }

            If ((IDTA == 0x07))
            {
                Local2 = Zero
                Local1 = \_TZ.GFVE (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If ((Local1 > Zero))
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GFVE (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x08))
            {
                Local2 = Zero
                Local1 = \_TZ.GTFV (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If ((Local1 > Zero))
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GTFV (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x09))
            {
                Local1 = \_TZ.GCGC ()
                CreateByteField (Local1, Zero, GGCL)
                CreateByteField (Local1, One, GGCH)
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [0x02] = GGCL /* \_SB_.WMIV.GTMS.GGCL */
                DerefOf (Local6 [One]) [0x03] = GGCH /* \_SB_.WMIV.GTMS.GGCH */
                Return (Local6)
            }

            If ((IDTA == 0x0A))
            {
                If (^^PC00.LPCB.EC0.ECRG)
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PC00.LPCB.EC0.CRZN = 0x06
                    DerefOf (Local6 [One]) [One] = ^^PC00.LPCB.EC0.DTMP /* \_SB_.PC00.LPCB.EC0_.DTMP */
                    Release (^^PC00.LPCB.EC0.ECMX)
                    DerefOf (Local6 [One]) [Zero] = One
                }

                Return (Local6)
            }

            If (((IDTA >= 0x10) && (IDTA <= 0x15)))
            {
                CreateField (Arg0, 0x18, 0x03E8, GTSD)
                Local1 = GTSD /* \_SB_.WMIV.GTMS.GTSD */
                Local7 = (IDTA - 0x10)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local4 = DerefOf (PRFI [Local7])
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (Local1 [(Local3 + Local4)])
                    Local3++
                }

                Return (Local6)
            }

            If (((IDTA >= 0x20) && (IDTA <= 0x25)))
            {
                Local7 = (IDTA - 0x20)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (DerefOf (TSTV [Local7]) [Local3])
                    Local3++
                }

                Return (Local6)
            }

            If ((IDTA == 0xAA))
            {
                DerefOf (Local6 [One]) [Zero] = TSTM /* \_SB_.WMIV.TSTM */
                Return (Local6)
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (STCS, 1, NotSerialized)
        {
            CreateByteField (Arg0, One, CSD1)
            If ((CSD1 == One))
            {
                If ((DPTF == One))
                {
                    ^^IETM.CCON ()
                }
                Else
                {
                    ODV1 = One
                    If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                    {
                        ^^PC00.LPCB.EC0.UDTS (Zero, Zero)
                    }
                }
            }

            If ((CSD1 == Zero))
            {
                If ((DPTF == One))
                {
                    ^^IETM.CCOF ()
                }
                Else
                {
                    ODV1 = Zero
                    If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                    {
                        ^^PC00.LPCB.EC0.UDTS (Zero, Zero)
                    }
                }
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GAAT, 0, NotSerialized)
        {
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            Local1 = ^^PC00.LPCB.EC0.ACIX /* \_SB_.PC00.LPCB.EC0_.ACIX */
            Local2 = ^^PC00.LPCB.EC0.AAPI /* \_SB_.PC00.LPCB.EC0_.AAPI */
            Release (^^PC00.LPCB.EC0.ECMX)
            Local5 = Zero
            Local3 = 0x07
            Local4 = (Local1 & Local3)
            If ((Local3 == Local4))
            {
                If ((Local2 <= 0x03))
                {
                    Local5 = One
                }
                ElseIf ((Local2 == 0x04))
                {
                    Local5 = 0x02
                }
                ElseIf ((Local2 == 0x05))
                {
                    Local5 = 0x04
                }
            }

            If ((Local5 != Zero))
            {
                DerefOf (Local6 [One]) [Zero] = Local5
            }

            Return (Local6)
        }

        Method (CPMC, 0, NotSerialized)
        {
            If ((PMCS == One))
            {
                If (^^PC00.LPCB.EC0.ECRG)
                {
                    ^^PC00.LPCB.EC0.S0FL = Zero
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
            }

            Return (Package (0x02)
            {
                0x0D, 
                Zero
            })
        }

        Method (WGBC, 0, NotSerialized)
        {
            Return (^^PC00.LPCB.EC0.GBTC ())
        }

        Method (WSBC, 3, NotSerialized)
        {
            Return (^^PC00.LPCB.EC0.SBTC (Arg0, Arg1, Arg2))
        }

        Method (EC00, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC01 ()
                        }
                        Case (0x56)
                        {
                            Local2 = GBBD (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC02 (Arg3)
                        }
                        Case (0x4F)
                        {
                            Local2 = SSLC (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x00020011)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Local2 = GESI (Arg2)
                        }
                        Case (One)
                        {
                            Local2 = SRWN (Arg3)
                        }
                        Case (0x02)
                        {
                            Local2 = ECGP (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x0002000B)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            Local2 = GUCM (Arg3)
                        }
                        Case (0x02)
                        {
                            Local2 = SUCU (Arg3)
                        }
                        Case (0x03)
                        {
                            Local2 = GUCS (Arg3)
                        }
                        Case (0x04)
                        {
                            Local2 = GUCD (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (EC01, 0, Serialized)
        {
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PC00.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                DerefOf (Local0 [One]) [Zero] = ^^PC00.LPCB.EC0.LIDN /* \_SB_.PC00.LPCB.EC0_.LIDN */
                DerefOf (Local0 [One]) [One] = ^^PC00.LPCB.EC0.LIDS /* \_SB_.PC00.LPCB.EC0_.LIDS */
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC02, 1, Serialized)
        {
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PC00.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, SLNS)
                If (((SLNS == Zero) || (SLNS == One)))
                {
                    ^^PC00.LPCB.EC0.LIDN = SLNS /* \_SB_.WMIV.EC02.SLNS */
                    Local0 [Zero] = Zero
                }
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GESI, 1, Serialized)
        {
            If ((ToInteger (Arg0) == Zero))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                If (^^PC00.LPCB.EC0.ECRG)
                {
                    DerefOf (Local0 [One]) [Zero] = ^^PC00.LPCB.EC0.ESID /* \_SB_.PC00.LPCB.EC0_.ESID */
                }

                Release (^^PC00.LPCB.EC0.ECMX)
                Return (Local0)
            }

            Return (Package (0x02)
            {
                0x06, 
                Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
        }

        Method (SRWN, 1, Serialized)
        {
            Local0 = Package (0x01)
                {
                    0x06
                }
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PC00.LPCB.EC0.ECRG)
            {
                CreateByteField (Arg0, Zero, RKTM)
                ^^PC00.LPCB.EC0.RWTM = RKTM /* \_SB_.WMIV.SRWN.RKTM */
                Local0 [Zero] = Zero
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (IUIP, 0, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            While (One)
            {
                Local0 = ^^PC00.LPCB.EC0.UCCS /* \_SB_.PC00.LPCB.EC0_.UCCS */
                If ((Local0 == Zero))
                {
                    Local1++
                    If ((Local1 >= 0x012C))
                    {
                        Break
                    }
                }
                Else
                {
                    Break
                }

                Sleep (0x0A)
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GUCM, 1, Serialized)
        {
            Debug = "GetUSBTypeCMessage"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x80){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                ^^PC00.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCM.IDTA */
                ^^PC00.LPCB.EC0.UCHC = 0x05
                Release (^^PC00.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PC00.LPCB.EC0.UCHS /* \_SB_.PC00.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x80))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PC00.LPCB.EC0.UCDB /* \_SB_.PC00.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PC00.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SUCU, 1, Serialized)
        {
            Debug = "SetUSBTypeCFwUpdateStatus"
            Debug = Arg0
            Local4 = Package (0x01)
                {
                    0x0D
                }
            CreateByteField (Arg0, Zero, IDTA)
            CreateByteField (Arg0, One, UPST)
            If ((UPST == One))
            {
                If ((IUIP () != Zero))
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PC00.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.SUCU.IDTA */
                    ^^PC00.LPCB.EC0.UCHC = 0x08
                    Sleep (0x0A)
                    If ((^^PC00.LPCB.EC0.UCCS == One))
                    {
                        Local4 [Zero] = Zero
                    }

                    Release (^^PC00.LPCB.EC0.ECMX)
                }
            }

            Return (Local4)
        }

        Method (GUCS, 1, Serialized)
        {
            Debug = "GetUSBTypeCStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            Local1 = IUIP ()
            If ((Local1 != Zero))
            {
                Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                ^^PC00.LPCB.EC0.UCHS = One
                Sleep (0x0A)
                Local0 = IDTA /* \_SB_.WMIV.GUCS.IDTA */
                ^^PC00.LPCB.EC0.UCDB = Local0
                Sleep (0x0A)
                ^^PC00.LPCB.EC0.UCHC = 0x11
                Sleep (0x0A)
                Local2 = IUIP ()
                If ((Local2 == One))
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PC00.LPCB.EC0.UCHS /* \_SB_.PC00.LPCB.EC0_.UCHS */
                    Sleep (0x0A)
                    Release (^^PC00.LPCB.EC0.ECMX)
                    If ((Local3 <= 0x04))
                    {
                        Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                        Local4 = Zero
                        While (One)
                        {
                            If ((Local4 >= Local3))
                            {
                                Break
                            }
                            Else
                            {
                                DerefOf (Local6 [One]) [Local4] = ^^PC00.LPCB.EC0.UCDB /* \_SB_.PC00.LPCB.EC0_.UCDB */
                                Sleep (0x0A)
                                Local4++
                            }
                        }

                        Release (^^PC00.LPCB.EC0.ECMX)
                        Return (Local6)
                    }
                    Else
                    {
                        Debug = "GetUSBTypeCStatus Return Length Failed."
                    }
                }
                ElseIf ((Local2 == 0x02))
                {
                    Debug = "GetUSBTypeCStatus Cmd Failed. Port Index is out of range."
                    Local6 [Zero] = 0x06
                    Return (Local6)
                }
            }
            Else
            {
                Debug = "GetUSBTypeCStatus Fail. USBC Command still in Progress."
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (GUCD, 1, Serialized)
        {
            Debug = "GetUSBTypeCDockId"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                ^^PC00.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCD.IDTA */
                ^^PC00.LPCB.EC0.UCHC = 0x12
                Release (^^PC00.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PC00.LPCB.EC0.UCHS /* \_SB_.PC00.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x04))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PC00.LPCB.EC0.UCDB /* \_SB_.PC00.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PC00.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SSLC, 1, Serialized)
        {
            GVWE (0x19, 0x06)
            Local3 = Package (0x01)
                {
                    Zero
                }
            Return (Local3)
        }

        Method (ECGP, 1, Serialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, GPNM)
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            ^^PC00.LPCB.EC0.WPM3 (0x6D, 0x80)
            Sleep (0x0A)
            Local1 = ^^PC00.LPCB.EC0.RPM3 (0x6D)
            Sleep (0x0A)
            Local2 = (Local1 & 0xC0)
            If ((Local2 == 0x80))
            {
                ^^PC00.LPCB.EC0.WPM3 (0x6C, GPNM)
                Local3 = ^^PC00.LPCB.EC0.RPM3 (0x6C)
                Local4 = ^^PC00.LPCB.EC0.RPM3 (0x6D)
                Local2 = (Local4 & 0xC0)
                If ((Local2 == 0x80))
                {
                    DerefOf (Local0 [One]) [Zero] = Local3
                    DerefOf (Local0 [One]) [One] = Local4
                }
                Else
                {
                    Local0 [Zero] = 0x06
                }
            }
            Else
            {
                Local0 [Zero] = 0x04
            }

            ^^PC00.LPCB.EC0.WPM3 (0x6D, Zero)
            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GBBD, 1, Serialized)
        {
            CreateByteField (Arg0, Zero, BATN)
            If ((BATN == Zero))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                CreateField (DerefOf (Local0 [One]), Zero, 0xE0, BBSP)
                Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                BBSP = ^^PC00.LPCB.EC0.GBBI ()
                Release (^^PC00.LPCB.EC0.ECMX)
                Return (Local0)
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Name (ROAE, Zero)
        Method (HVWP, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x04)
                        {
                            Local2 = WGDS ()
                        }
                        Case (0x07)
                        {
                            If (Arg2)
                            {
                                Local3 = ToInteger (DerefOf (Arg3 [Zero]))
                                Local2 = WGBI (Local3)
                            }
                        }
                        Case (0x09)
                        {
                            Local2 = GHKS ()
                        }
                        Case (0x0A)
                        {
                            Local2 = GHKF (Arg3)
                        }
                        Case (0x0F)
                        {
                            Local2 = GSAS ()
                        }
                        Case (0x1B)
                        {
                            If ((^^WLBU._STA () != 0x0F))
                            {
                                Local2 = WGWS ()
                            }
                            Else
                            {
                                Local2 = Package (0x01)
                                    {
                                        0x04
                                    }
                            }
                        }
                        Case (0x28)
                        {
                            Local2 = GTMS (Arg3)
                        }
                        Case (0x2B)
                        {
                            Local2 = WGBC ()
                        }
                        Case (0x30)
                        {
                            Local2 = GEID ()
                        }
                        Case (0x3E)
                        {
                            Local2 = GPPS ()
                        }
                        Case (0x42)
                        {
                            Local2 = GAAT ()
                        }
                        Case (0x45)
                        {
                            Local2 = GECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x06)
                        {
                            Local2 = SBBC (Arg3)
                        }
                        Case (0x09)
                        {
                            Local2 = SHKS (Arg3)
                        }
                        Case (0x0A)
                        {
                            Local2 = SHKF (Arg3)
                        }
                        Case (0x1B)
                        {
                            GVWE (0x05, Zero)
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x25)
                        {
                            Local2 = CPMC ()
                        }
                        Case (0x28)
                        {
                            Local2 = STMM (Arg3)
                        }
                        Case (0x2B)
                        {
                            Local2 = WSBC (Arg1, Arg2, Arg3)
                        }
                        Case (0x2C)
                        {
                            Local2 = STCS (Arg3)
                        }
                        Case (0x36)
                        {
                            If ((^^PC00.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x02)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x37)
                        {
                            If ((^^PC00.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x10, 0x02)
                            }

                            If ((^^PC00.LPCB.EC0.BCSC == One))
                            {
                                GVWE (0x10, Zero)
                            }

                            ^^PC00.LPCB.EC0.BCSC = Zero
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x38)
                        {
                            If ((^^PC00.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x04)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x29)
                        {
                            HWWB ()
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x3E)
                        {
                            Local2 = SPPA (Arg3)
                        }
                        Case (0x3F)
                        {
                            Local2 = STPB (Arg3)
                        }
                        Case (0x45)
                        {
                            Local2 = SECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = EC00 (Arg0, Arg1, Arg2, Arg3)
            }

            Return (Local2)
        }

        Method (GHKS, 0, Serialized)
        {
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            DerefOf (Local2 [One]) [Zero] = ^^PC00.LPCB.EC0.GSHK ()
            Return (Local2)
        }

        Method (SHKS, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, DWRD)
            ^^PC00.LPCB.EC0.SSHK (DWRD)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GHKF, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.GHKF.WIID */
            If ((WIID == 0x01AE)){}
            If ((WIID == 0x01A9)){}
            If ((G289 == Zero))
            {
                If (((WIID == 0x01B6) || (WIID == 0x01B7)))
                {
                    If ((WIID == 0x01B6))
                    {
                        ODGW (0x87)
                        \_GPE.G400 (0x87)
                    }
                    ElseIf ((WIID == 0x01B7))
                    {
                        ODGW (0x86)
                        \_GPE.G400 (0x86)
                    }

                    DerefOf (Local2 [One]) [0x02] = G1B1 /* \G1B1 */
                    DerefOf (Local2 [One]) [0x03] = (G106 - One
                        )
                }
            }

            Debug = Local2
            Return (Local2)
        }

        Method (GEID, 0, NotSerialized)
        {
            Local1 = G000 /* \G000 */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGWS, 0, Serialized)
        {
            Local1 = WDDA /* \WDDA */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGDS, 0, Serialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (One)
                    {
                         0x00                                             // .
                    }
                }
            If (G46D ())
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (One)
                        {
                             0x01                                             // .
                        }
                    }
            }

            Local1 = DerefOf (DerefOf (Local0 [One]) [Zero])
            If ((^^PC00.LPCB.EC0.GBNT (^^PC00.LPCB.EC0.VBPS, 0x06) == Zero))
            {
                Local1 |= 0x04
            }
            Else
            {
                Local1 &= 0xFFFFFFFFFFFFFFFB
            }

            If ((^^PC00.LPCB.EC0.PORI == Zero))
            {
                Local1 |= ROAE /* \_SB_.WMIV.ROAE */
            }

            If (((^^PC00.LPCB.EC0.PORI == One) || (^^PC00.LPCB.EC0.PORI == 0x03)))
            {
                Local1 |= 0x02
                ROAE = 0x02
            }

            If (((^^PC00.LPCB.EC0.PORI == 0x02) || (^^PC00.LPCB.EC0.PORI == 0x04)))
            {
                Local1 &= 0xFFFFFFFFFFFFFFFD
                ROAE = Zero
            }

            Local1 &= 0xFFFFFFFFFFFFFFF7
            DerefOf (Local0 [One]) [Zero] = Local1
            Local3 = Zero
            If ((^^PC00.LPCB.EC0.PORI == 0x02))
            {
                Local3 |= 0x10
            }

            If ((^^PC00.LPCB.EC0.PORI == 0x03))
            {
                Local3 |= 0x20
            }

            If ((^^PC00.LPCB.EC0.PORI == 0x04))
            {
                Local3 |= 0x30
            }

            Local1 |= Local3
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (GPPS, 0, Serialized)
        {
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PC00.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                ^^PC00.LPCB.EC0.PPCM = One
                ^^PC00.LPCB.EC0.PPDS = One
                Local1 = ^^PC00.LPCB.EC0.PPDT /* \_SB_.PC00.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [Zero] = Local1
                ^^PC00.LPCB.EC0.PPCM = 0x03
                ^^PC00.LPCB.EC0.PPDS = One
                Local1 = ^^PC00.LPCB.EC0.PPDT /* \_SB_.PC00.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [One] = Local1
                DerefOf (Local0 [One]) [0x02] = ^^PC00.LPCB.EC0.PPUI /* \_SB_.PC00.LPCB.EC0_.PPUI */
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (SPPA, 1, Serialized)
        {
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PC00.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, PPST)
                CreateByteField (Arg0, One, PPVP)
                If (((((((((PPST == 0xFF) || (
                    PPST == 0xFE)) || (PPST == 0xFD)) || (PPST == Zero)) || (PPST == 0xFC)) || (PPST == 
                    0xFB)) || (PPST == 0xF0)) || (PPST == 0xF9)))
                {
                    If ((((PPVP == 0xFF) || (PPVP == 0xFE)) || (PPVP == Zero)))
                    {
                        ^^PC00.LPCB.EC0.PPCM = 0x02
                        ^^PC00.LPCB.EC0.PPDS = One
                        ^^PC00.LPCB.EC0.PPDT = PPST /* \_SB_.WMIV.SPPA.PPST */
                        ^^PC00.LPCB.EC0.PPCM = One
                        ^^PC00.LPCB.EC0.PPDS = One
                        Local1 = ^^PC00.LPCB.EC0.PPDT /* \_SB_.PC00.LPCB.EC0_.PPDT */
                        If (((((((Local1 == 0xFE) || (Local1 == 0xFC)) || 
                            (Local1 == 0xF0)) || (Local1 == 0xF9)) || (Local1 == 0xF8)) || (Local1 == 0xF7)))
                        {
                            If ((PPVP == 0xFF))
                            {
                                ^^PC00.LPCB.EC0.PPCM = 0x04
                                ^^PC00.LPCB.EC0.PPDS = Zero
                            }

                            If ((PPVP == 0xFE))
                            {
                                ^^PC00.LPCB.EC0.PPCM = 0x05
                                ^^PC00.LPCB.EC0.PPDS = Zero
                            }
                        }

                        Local0 [Zero] = Zero
                    }
                }
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (STPB, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, BRID)
            If (^^PC00.LPCB.EC0.ECRG)
            {
                Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
                ^^PC00.LPCB.EC0.BRIM = BRID /* \_SB_.WMIV.STPB.BRID */
                Release (^^PC00.LPCB.EC0.ECMX)
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Local1 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80){}
                }
            Local0 = Zero
            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            While ((Local0 < SIZE))
            {
                DerefOf (Local1 [One]) [Local0] = OFST /* \_SB_.WMIV.GECP.OFST */
                Local0++
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Local1)
        }

        Method (SECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Acquire (^^PC00.LPCB.EC0.ECMX, 0xFFFF)
            Local0 = Zero
            While ((Local0 < SIZE))
            {
                OFST = DerefOf (Arg1 [(Local0 + 0x02)])
                Local0++
            }

            Release (^^PC00.LPCB.EC0.ECMX)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (SHKF, 1, NotSerialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.SHKF.WIID */
            If ((WIID == 0x01B6))
            {
                ODGW (0x87)
                \_GPE.G400 (0x87)
            }
            ElseIf ((WIID == 0x01B7))
            {
                ODGW (0x86)
                \_GPE.G400 (0x86)
            }
            Else
            {
                DerefOf (Local2 [Zero]) [Zero] = 0x04
            }

            Return (Local2)
        }

        Name (WQZZ, Buffer (0x086F)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x5F, 0x08, 0x00, 0x00, 0xBE, 0x3A, 0x00, 0x00,  // _....:..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x98, 0x58, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  // .X.....B
            /* 0020 */  0x10, 0x13, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // ........
            /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
            /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
            /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
            /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
            /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
            /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
            /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
            /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
            /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
            /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
            /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
            /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
            /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
            /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
            /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0x1B, 0x0D,  // X...!...
            /* 00A0 */  0x15, 0xA9, 0x32, 0x14, 0x59, 0x44, 0x91, 0x42,  // ..2.YD.B
            /* 00A8 */  0x01, 0xCE, 0x04, 0x08, 0xC3, 0x95, 0x46, 0x50,  // ......FP
            /* 00B0 */  0x21, 0xC4, 0x8A, 0x14, 0xAB, 0xFD, 0x41, 0x90,  // !.....A.
            /* 00B8 */  0xF8, 0x16, 0x20, 0xAA, 0x00, 0x51, 0xA4, 0xD1,  // .. ..Q..
            /* 00C0 */  0xA0, 0x86, 0x97, 0xE0, 0x70, 0x3D, 0xD4, 0x73,  // ....p=.s
            /* 00C8 */  0xEC, 0x5C, 0x80, 0xF4, 0x49, 0x0A, 0xE4, 0x20,  // .\..I.. 
            /* 00D0 */  0xCF, 0xA2, 0xCE, 0x71, 0x12, 0x90, 0x04, 0xC6,  // ...q....
            /* 00D8 */  0x4A, 0xD0, 0xC1, 0xC0, 0xA1, 0xB8, 0x06, 0xD4,  // J.......
            /* 00E0 */  0x8C, 0x8F, 0x97, 0x09, 0x82, 0x43, 0x0D, 0xD1,  // .....C..
            /* 00E8 */  0x03, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  // ..w....=
            /* 00F0 */  0xA9, 0xA3, 0xC1, 0x1C, 0x00, 0x3C, 0xB8, 0x93,  // .....<..
            /* 00F8 */  0x79, 0x0F, 0x28, 0x55, 0x80, 0xD9, 0x31, 0x6B,  // y.(U..1k
            /* 0100 */  0x60, 0x09, 0x8E, 0xC7, 0xD0, 0xA7, 0x7B, 0x3E,  // `.....{>
            /* 0108 */  0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99,  // '.......
            /* 0110 */  0xA1, 0x3D, 0xCA, 0xD3, 0x8A, 0x19, 0xF2, 0xF0,  // .=......
            /* 0118 */  0x0F, 0x8B, 0x89, 0x85, 0x90, 0x02, 0x08, 0x8D,  // ........
            /* 0120 */  0x07, 0xDE, 0xFF, 0x7F, 0x3C, 0xE0, 0xB9, 0x01,  // ....<...
            /* 0128 */  0x3C, 0x13, 0x44, 0x78, 0x25, 0x88, 0xED, 0x01,  // <.Dx%...
            /* 0130 */  0x25, 0x18, 0x16, 0x42, 0x46, 0x56, 0xE1, 0xF1,  // %..BFV..
            /* 0138 */  0xD0, 0x51, 0xD8, 0xE9, 0x70, 0x34, 0xAD, 0x78,  // .Q..p4.x
            /* 0140 */  0x26, 0x18, 0x0E, 0x42, 0x5F, 0x00, 0x09, 0x10,  // &..B_...
            /* 0148 */  0x35, 0x6C, 0x7A, 0x58, 0xE0, 0xE7, 0x04, 0x76,  // 5lzX...v
            /* 0150 */  0x33, 0x38, 0x83, 0x47, 0x00, 0x8F, 0xE4, 0x84,  // 38.G....
            /* 0158 */  0x7C, 0x9C, 0xF0, 0xC0, 0xE0, 0x03, 0xE2, 0xBD,  // |.......
            /* 0160 */  0x4F, 0x99, 0x8C, 0xE0, 0x4C, 0x0D, 0xE8, 0xE3,  // O...L...
            /* 0168 */  0x80, 0x87, 0xC2, 0x87, 0xE8, 0xF1, 0x9D, 0xF2,  // ........
            /* 0170 */  0xF1, 0xFA, 0x74, 0x61, 0x59, 0xE3, 0x84, 0x7E,  // ..taY..~
            /* 0178 */  0x87, 0xF0, 0xEC, 0x8E, 0xE1, 0x8F, 0x43, 0x02,  // ......C.
            /* 0180 */  0x22, 0x42, 0xC8, 0xC9, 0x29, 0x00, 0x0D, 0x7C,  // "B..)..|
            /* 0188 */  0xBA, 0x67, 0x17, 0xE1, 0x74, 0x3D, 0x29, 0x07,  // .g..t=).
            /* 0190 */  0x1A, 0x06, 0x1D, 0x27, 0x38, 0xCE, 0x03, 0xE0,  // ...'8...
            /* 0198 */  0x18, 0x27, 0xFC, 0x73, 0x01, 0xFC, 0x01, 0xF2,  // .'.s....
            /* 01A0 */  0x53, 0xC6, 0x2B, 0x46, 0x02, 0xC7, 0x1C, 0x21,  // S.+F...!
            /* 01A8 */  0x5A, 0xCC, 0x08, 0x21, 0xC0, 0x3F, 0x55, 0x14,  // Z..!.?U.
            /* 01B0 */  0x3E, 0x10, 0xF2, 0xFF, 0x1F, 0x23, 0xB8, 0x00,  // >....#..
            /* 01B8 */  0x3D, 0x46, 0xE0, 0x1B, 0x70, 0x8C, 0xE8, 0xA3,  // =F..p...
            /* 01C0 */  0x04, 0x57, 0x7F, 0xD0, 0xA0, 0x03, 0x04, 0x17,  // .W......
            /* 01C8 */  0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D, 0xD0,  // ...|..=.
            /* 01D0 */  0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F, 0x68,  // .......h
            /* 01D8 */  0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F, 0xF0,  // 4/~:....
            /* 01E0 */  0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4, 0x39,  // .zH8P..9
            /* 01E8 */  0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B, 0xEF,  // ....c...
            /* 01F0 */  0xFF, 0x3F, 0x5C, 0xF0, 0x9C, 0x40, 0xC0, 0x25,  // .?\..@.%
            /* 01F8 */  0x0F, 0x16, 0x3D, 0x5C, 0xFB, 0x15, 0x80, 0x10,  // ..=\....
            /* 0200 */  0xBA, 0xCC, 0x5B, 0x89, 0x66, 0x15, 0xE1, 0x88,  // ..[.f...
            /* 0208 */  0x61, 0x9C, 0x83, 0x4C, 0x60, 0x91, 0xF0, 0xA8,  // a..L`...
            /* 0210 */  0xE3, 0x85, 0xE1, 0xF9, 0x59, 0x28, 0xFA, 0xC1,  // ....Y(..
            /* 0218 */  0x9C, 0x4A, 0xF8, 0x83, 0x89, 0x72, 0x0A, 0x47,  // .J...r.G
            /* 0220 */  0x63, 0xB9, 0x08, 0xD2, 0x05, 0xA1, 0xA3, 0x93,  // c.......
            /* 0228 */  0x11, 0xCE, 0x20, 0xCA, 0xD9, 0x9D, 0xB1, 0x09,  // .. .....
            /* 0230 */  0x7C, 0x94, 0xF2, 0x11, 0x80, 0x9F, 0x5B, 0x3C,  // |.....[<
            /* 0238 */  0x22, 0x18, 0xE7, 0xA5, 0x28, 0xF6, 0x38, 0x27,  // "...(.8'
            /* 0240 */  0x42, 0x50, 0xE0, 0x70, 0x50, 0x41, 0x9E, 0x0E,  // BP.pPA..
            /* 0248 */  0x3E, 0x6D, 0x51, 0xE9, 0x30, 0xA8, 0x03, 0x17,  // >mQ.0...
            /* 0250 */  0x60, 0x65, 0x12, 0x11, 0x9E, 0x25, 0x6A, 0x83,  // `e...%j.
            /* 0258 */  0xD0, 0xA9, 0xE1, 0x6D, 0xE2, 0x6D, 0xCB, 0xB7,  // ...m.m..
            /* 0260 */  0x80, 0x38, 0xA7, 0xD9, 0xDB, 0x81, 0x8B, 0x60,  // .8.....`
            /* 0268 */  0x44, 0xA8, 0x19, 0x8A, 0x9C, 0xB4, 0x22, 0xC6,  // D.....".
            /* 0270 */  0x88, 0xF2, 0xB8, 0x65, 0x94, 0xB7, 0xAD, 0x17,  // ...e....
            /* 0278 */  0x80, 0x78, 0x27, 0xF6, 0xFF, 0x7F, 0xDE, 0x32,  // .x'....2
            /* 0280 */  0x46, 0xF0, 0xC8, 0x0F, 0x5C, 0x2C, 0xC6, 0xEA,  // F...\,..
            /* 0288 */  0xF5, 0x5F, 0xF3, 0x81, 0x0B, 0xE0, 0xF9, 0xFF,  // ._......
            /* 0290 */  0xFF, 0x7C, 0x82, 0x0F, 0x7A, 0x18, 0x42, 0x0F,  // .|..z.B.
            /* 0298 */  0xC3, 0x53, 0x39, 0x97, 0x4A, 0xA7, 0x22, 0xC4,  // .S9.J.".
            /* 02A0 */  0xA8, 0x61, 0xA2, 0x3E, 0x43, 0xF9, 0x6E, 0xE1,  // .a.>C.n.
            /* 02A8 */  0x03, 0x11, 0xF8, 0xCE, 0x5C, 0xC0, 0xF9, 0x98,  // ....\...
            /* 02B0 */  0x82, 0x3B, 0xD3, 0x80, 0xC7, 0xE7, 0x0C, 0x04,  // .;......
            /* 02B8 */  0x72, 0x2A, 0x3E, 0xD4, 0x00, 0x16, 0x44, 0x3F,  // r*>...D?
            /* 02C0 */  0x21, 0x7C, 0xA2, 0xA1, 0x32, 0x61, 0x50, 0x87,  // !|..2aP.
            /* 02C8 */  0x1A, 0xE0, 0xF0, 0xFF, 0x3F, 0xD4, 0x00, 0xA3,  // ....?...
            /* 02D0 */  0x2B, 0xCC, 0xD3, 0xE8, 0x39, 0x3F, 0xCB, 0xF8,  // +...9?..
            /* 02D8 */  0x54, 0xE3, 0x43, 0xA9, 0x71, 0x0C, 0xF1, 0x32,  // T.C.q..2
            /* 02E0 */  0xF3, 0x50, 0xE3, 0x63, 0xC1, 0x2B, 0xA9, 0x0F,  // .P.c.+..
            /* 02E8 */  0x35, 0x86, 0x8A, 0xF3, 0x50, 0xE3, 0xE1, 0x06,  // 5...P...
            /* 02F0 */  0x8A, 0xFA, 0x66, 0xF3, 0x6C, 0x63, 0xF4, 0xF8,  // ..f.lc..
            /* 02F8 */  0xBE, 0xA1, 0x1A, 0xE2, 0xA1, 0x86, 0x49, 0x5E,  // ......I^
            /* 0300 */  0xA9, 0xC6, 0xE2, 0x43, 0x0D, 0xC0, 0xAB, 0xFF,  // ...C....
            /* 0308 */  0xFF, 0xA1, 0x06, 0xE0, 0xDB, 0xD1, 0x00, 0xCE,  // ........
            /* 0310 */  0x91, 0x11, 0x77, 0x34, 0x00, 0xD7, 0xA1, 0x14,  // ..w4....
            /* 0318 */  0x38, 0xFC, 0xFF, 0x8F, 0x06, 0xC0, 0xE3, 0x28,  // 8......(
            /* 0320 */  0x04, 0xE6, 0x0B, 0x8D, 0x8F, 0x42, 0x80, 0x05,  // .....B..
            /* 0328 */  0xD9, 0xE7, 0x20, 0x94, 0xD0, 0xA3, 0x10, 0x20,  // .. .... 
            /* 0330 */  0xE8, 0xF6, 0xF3, 0x14, 0xF1, 0xEC, 0xE3, 0xCB,  // ........
            /* 0338 */  0xCF, 0x03, 0x41, 0x84, 0xD7, 0x7C, 0x9F, 0x82,  // ..A..|..
            /* 0340 */  0x7C, 0xC8, 0xF7, 0x51, 0x88, 0xC1, 0x18, 0xCA,  // |..Q....
            /* 0348 */  0xD7, 0x20, 0x1F, 0x85, 0x18, 0xD4, 0x6B, 0x90,  // . ....k.
            /* 0350 */  0xEF, 0xFB, 0x06, 0x79, 0xBC, 0x08, 0x12, 0x3B,  // ...y...;
            /* 0358 */  0xCA, 0xFF, 0x3F, 0xD0, 0xA3, 0x10, 0x13, 0x7D,  // ..?....}
            /* 0360 */  0x14, 0x02, 0x68, 0xFF, 0xFF, 0x3F, 0x0A, 0x01,  // ..h..?..
            /* 0368 */  0xFC, 0x0B, 0x70, 0x34, 0x00, 0xDD, 0xB4, 0x1E,  // ..p4....
            /* 0370 */  0x85, 0xC0, 0x7B, 0x67, 0x39, 0xED, 0x13, 0xF0,  // ..{g9...
            /* 0378 */  0x59, 0x08, 0xFB, 0xFF, 0x3F, 0x0B, 0x01, 0x2C,  // Y...?..,
            /* 0380 */  0x39, 0x0A, 0x1D, 0xC5, 0x59, 0xBE, 0x0A, 0x3D,  // 9...Y..=
            /* 0388 */  0x01, 0xBC, 0x00, 0xC4, 0x08, 0xF3, 0x0E, 0xF4,  // ........
            /* 0390 */  0x92, 0xC9, 0xEE, 0xE2, 0xC6, 0x79, 0x72, 0x39,  // .....yr9
            /* 0398 */  0x8B, 0x27, 0x71, 0x5F, 0x82, 0x7C, 0xA0, 0x78,  // .'q_.|.x
            /* 03A0 */  0x16, 0x32, 0xD4, 0xE9, 0x06, 0x7D, 0x23, 0xF7,  // .2...}#.
            /* 03A8 */  0xC0, 0x62, 0xC6, 0x0F, 0xF1, 0x3C, 0x64, 0x88,  // .b...<d.
            /* 03B0 */  0x67, 0x21, 0xC0, 0xC8, 0xFF, 0xFF, 0x2C, 0x04,  // g!....,.
            /* 03B8 */  0xF0, 0xFF, 0xFF, 0x7F, 0x16, 0x02, 0x5C, 0xBF,  // ......\.
            /* 03C0 */  0x00, 0x7C, 0x16, 0x02, 0x9E, 0x27, 0x80, 0x07,  // .|...'..
            /* 03C8 */  0x6D, 0x9F, 0x85, 0x00, 0x43, 0xFF, 0xFF, 0xB3,  // m...C...
            /* 03D0 */  0x10, 0x60, 0xE4, 0x70, 0x79, 0xFE, 0xAF, 0x40,  // .`.py..@
            /* 03D8 */  0xC7, 0xF2, 0x1E, 0xE1, 0x59, 0x9F, 0xE4, 0xEB,  // ....Y...
            /* 03E0 */  0xA5, 0x67, 0xFA, 0x50, 0xF0, 0x2C, 0xC4, 0xB0,  // .g.P.,..
            /* 03E8 */  0x0E, 0xC3, 0x67, 0x21, 0x06, 0xF1, 0xA2, 0x69,  // ..g!...i
            /* 03F0 */  0x88, 0x17, 0x4E, 0x1F, 0x06, 0x18, 0xF0, 0x2B,  // ..N....+
            /* 03F8 */  0xA7, 0x81, 0x82, 0x04, 0x7A, 0x16, 0x02, 0x58,  // ....z..X
            /* 0400 */  0xF2, 0xFF, 0x3F, 0x0B, 0x01, 0xFC, 0xFF, 0xFF,  // ..?.....
            /* 0408 */  0x9F, 0x85, 0x80, 0xD8, 0x1A, 0x75, 0x16, 0x02,  // .....u..
            /* 0410 */  0x96, 0xB7, 0x95, 0x67, 0x6C, 0x9F, 0x56, 0x9E,  // ...gl.V.
            /* 0418 */  0x85, 0x00, 0x0B, 0xB9, 0x8C, 0x1C, 0x84, 0x30,  // .......0
            /* 0420 */  0x11, 0x1F, 0x0E, 0x3E, 0x66, 0x02, 0x7A, 0xFE,  // ...>f.z.
            /* 0428 */  0xFF, 0x53, 0x7C, 0x71, 0x37, 0xC6, 0x13, 0xC0,  // .S|q7...
            /* 0430 */  0x8B, 0xC4, 0x63, 0x26, 0x3B, 0x6A, 0x1A, 0xE6,  // ..c&;j..
            /* 0438 */  0x59, 0xC8, 0x78, 0x67, 0xF1, 0x1A, 0xF0, 0x04,  // Y.xg....
            /* 0440 */  0xEF, 0xC9, 0x3F, 0x0B, 0x31, 0xB0, 0xC3, 0x0A,  // ..?.1...
            /* 0448 */  0xF6, 0x28, 0x64, 0x50, 0x83, 0xC7, 0x0E, 0x11,  // .(dP....
            /* 0450 */  0x26, 0xD0, 0xB3, 0x10, 0x8B, 0xFB, 0x5C, 0xD1,  // &.....\.
            /* 0458 */  0x79, 0xC2, 0x67, 0x21, 0xC0, 0xC9, 0xD5, 0xE0,  // y.g!....
            /* 0460 */  0x59, 0x08, 0x30, 0x71, 0xD8, 0xF0, 0x59, 0x03,  // Y.0q..Y.
            /* 0468 */  0x3C, 0xC3, 0xF7, 0xA8, 0xCE, 0xE1, 0xF1, 0x18,  // <.......
            /* 0470 */  0x78, 0xFD, 0xFF, 0x0F, 0x1A, 0xE0, 0xC9, 0xAA,  // x.......
            /* 0478 */  0xE3, 0x9C, 0xC0, 0x72, 0x2F, 0x5A, 0x36, 0x0E,  // ...r/Z6.
            /* 0480 */  0x34, 0x74, 0x44, 0x56, 0x07, 0xA4, 0xB1, 0x61,  // 4tDV...a
            /* 0488 */  0x2E, 0x25, 0x91, 0x4F, 0x8E, 0x8D, 0xDA, 0x8A,  // .%.O....
            /* 0490 */  0xE0, 0x74, 0x66, 0xF2, 0x09, 0xC0, 0x5A, 0x28,  // .tf...Z(
            /* 0498 */  0xA4, 0x80, 0x46, 0x63, 0x31, 0xBC, 0x33, 0x1F,  // ..Fc1.3.
            /* 04A0 */  0x9D, 0x28, 0x88, 0x01, 0x7D, 0x1C, 0xB2, 0x8D,  // .(..}...
            /* 04A8 */  0x43, 0x01, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xE7,  // C.j/..9.
            /* 04B0 */  0x60, 0xF4, 0xCF, 0x8E, 0xCE, 0xC6, 0x77, 0x02,  // `.....w.
            /* 04B8 */  0xAE, 0x01, 0x42, 0xA7, 0x04, 0x43, 0x5B, 0xCD,  // ..B..C[.
            /* 04C0 */  0x2C, 0x51, 0x60, 0xC6, 0x7F, 0x8A, 0x31, 0x81,  // ,Q`...1.
            /* 04C8 */  0xCF, 0x31, 0xF8, 0x83, 0x01, 0x7E, 0xE0, 0x2F,  // .1...~./
            /* 04D0 */  0x06, 0x55, 0xDF, 0x0B, 0x74, 0x5F, 0xB0, 0xBA,  // .U..t_..
            /* 04D8 */  0x9B, 0x0C, 0x84, 0x19, 0x99, 0xA0, 0xBE, 0xD3,  // ........
            /* 04E0 */  0x01, 0x28, 0x80, 0x7C, 0x21, 0xF0, 0x39, 0xEA,  // .(.|!.9.
            /* 04E8 */  0xA1, 0x80, 0x4D, 0x24, 0x44, 0x98, 0x68, 0x46,  // ..M$D.hF
            /* 04F0 */  0x47, 0x4C, 0x18, 0x15, 0x7D, 0xC2, 0x14, 0xC4,  // GL..}...
            /* 04F8 */  0x13, 0x76, 0xAC, 0x09, 0xA3, 0x67, 0xE2, 0x8B,  // .v...g..
            /* 0500 */  0x0E, 0x1B, 0x31, 0x26, 0xC4, 0xD5, 0x03, 0xDA,  // ..1&....
            /* 0508 */  0x04, 0x83, 0xFA, 0x52, 0x04, 0x6B, 0xC8, 0x7C,  // ...R.k.|
            /* 0510 */  0x2C, 0xBE, 0x40, 0xE0, 0xA6, 0xCC, 0xFE, 0xFF,  // ,.@.....
            /* 0518 */  0x53, 0x06, 0xD7, 0x9C, 0xD8, 0x35, 0xC1, 0x97,  // S....5..
            /* 0520 */  0x1D, 0xDC, 0x9C, 0xC1, 0x08, 0x8F, 0xB9, 0x8B,  // ........
            /* 0528 */  0xF1, 0xAB, 0x93, 0x47, 0xC7, 0x0F, 0x0A, 0xBE,  // ...G....
            /* 0530 */  0xE1, 0x30, 0xEC, 0x27, 0x33, 0xCF, 0xE8, 0xBD,  // .0.'3...
            /* 0538 */  0xCC, 0xD7, 0x38, 0x0C, 0xAC, 0xC7, 0xCB, 0x61,  // ..8....a
            /* 0540 */  0x8D, 0x16, 0xF6, 0xD0, 0xDE, 0x43, 0x7C, 0x88,  // .....C|.
            /* 0548 */  0xF1, 0x79, 0xC2, 0x18, 0x61, 0x7D, 0x7B, 0x01,  // .y..a}{.
            /* 0550 */  0xC7, 0x3D, 0x0B, 0xFE, 0x5D, 0x03, 0x3C, 0x97,  // .=..].<.
            /* 0558 */  0x10, 0xDF, 0x35, 0x00, 0x6B, 0xFF, 0xFF, 0xBB,  // ..5.k...
            /* 0560 */  0x06, 0xC0, 0x8F, 0x6B, 0x82, 0xEF, 0x1A, 0xC0,  // ...k....
            /* 0568 */  0x7B, 0xE8, 0xBE, 0x6B, 0x00, 0xBF, 0xFF, 0xFF,  // {..k....
            /* 0570 */  0x5D, 0x03, 0x97, 0xFD, 0xAE, 0x81, 0x3A, 0x06,  // ].....:.
            /* 0578 */  0x58, 0xE1, 0x5D, 0x03, 0xDA, 0x95, 0xED, 0x7D,  // X.]....}
            /* 0580 */  0xED, 0x09, 0xCB, 0x9A, 0x2E, 0x1B, 0x28, 0x35,  // ......(5
            /* 0588 */  0x97, 0x0D, 0x80, 0x04, 0x52, 0x26, 0x8C, 0x0A,  // ....R&..
            /* 0590 */  0x3F, 0x61, 0x0A, 0xE2, 0x09, 0x3B, 0xD8, 0x65,  // ?a...;.e
            /* 0598 */  0x03, 0x14, 0x31, 0x2E, 0x1B, 0xA0, 0x1F, 0xDB,  // ..1.....
            /* 05A0 */  0x29, 0x83, 0xEF, 0xFF, 0x7F, 0xBE, 0x87, 0x73,  // )......s
            /* 05A8 */  0x4F, 0x60, 0xB7, 0x0D, 0xE0, 0x0D, 0xE9, 0xDB,  // O`......
            /* 05B0 */  0x06, 0x70, 0xCD, 0x7F, 0xDB, 0x40, 0x71, 0x58,  // .p...@qX
            /* 05B8 */  0xE5, 0x6D, 0x03, 0xE2, 0x49, 0x9E, 0x11, 0x58,  // .m..I..X
            /* 05C0 */  0xD5, 0x75, 0x03, 0xA5, 0xE7, 0xBA, 0x01, 0xC8,  // .u......
            /* 05C8 */  0xFB, 0xFF, 0x5F, 0x37, 0x80, 0x87, 0x98, 0x09,  // .._7....
            /* 05D0 */  0xA3, 0xE2, 0x4F, 0x98, 0x82, 0x78, 0xC2, 0x8E,  // ..O..x..
            /* 05D8 */  0x76, 0xDD, 0x00, 0x45, 0x90, 0xEB, 0x06, 0xE8,  // v..E....
            /* 05E0 */  0xE7, 0xF5, 0xBA, 0x01, 0x1C, 0x2E, 0x0A, 0x98,  // ........
            /* 05E8 */  0xFB, 0x06, 0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xE0,  // ........
            /* 05F0 */  0xF9, 0xFF, 0xBF, 0x6F, 0x80, 0xE7, 0x26, 0x8E,  // ...o..&.
            /* 05F8 */  0xB9, 0x6F, 0x00, 0x6C, 0xFE, 0xFF, 0x5F, 0xF5,  // .o.l.._.
            /* 0600 */  0x70, 0x17, 0x05, 0xCC, 0x7D, 0x03, 0x78, 0x5F,  // p...}.x_
            /* 0608 */  0xA4, 0x7D, 0xDF, 0x00, 0xAE, 0xD2, 0xD6, 0xEF,  // .}......
            /* 0610 */  0xC1, 0xD1, 0x13, 0x82, 0xC7, 0x87, 0xBB, 0x5F,  // ......._
            /* 0618 */  0x7A, 0x7C, 0xBE, 0x9B, 0x83, 0x63, 0x90, 0xC7,  // z|...c..
            /* 0620 */  0x78, 0x68, 0x07, 0xFC, 0xFA, 0xEE, 0x89, 0xF9,  // xh......
            /* 0628 */  0x6E, 0x0E, 0xFC, 0xCF, 0x04, 0xC7, 0x83, 0x81,  // n.......
            /* 0630 */  0xC6, 0x21, 0xB6, 0x7A, 0x69, 0x20, 0x47, 0x83,  // .!.zi G.
            /* 0638 */  0xF8, 0xFC, 0xFF, 0x0F, 0xCD, 0xE0, 0x8C, 0x55,  // .......U
            /* 0640 */  0xFC, 0xC9, 0x1F, 0xE1, 0x1C, 0x43, 0x67, 0x87,  // .....Cg.
            /* 0648 */  0x83, 0xC4, 0x0E, 0x82, 0x07, 0x5B, 0xB5, 0x09,  // .....[..
            /* 0650 */  0x14, 0x1A, 0x42, 0x51, 0x60, 0x50, 0x2C, 0x3E,  // ..BQ`P,>
            /* 0658 */  0x60, 0xE0, 0x87, 0xCD, 0xCE, 0x02, 0x4C, 0x12,  // `.....L.
            /* 0660 */  0x1C, 0xEA, 0x08, 0xE0, 0xFB, 0x44, 0xF3, 0xE3,  // .....D..
            /* 0668 */  0xD0, 0xDD, 0xE0, 0x50, 0x3D, 0x96, 0x87, 0x02,  // ...P=...
            /* 0670 */  0x7A, 0x06, 0xC4, 0x1D, 0x33, 0xC8, 0xA4, 0x3D,  // z...3..=
            /* 0678 */  0xA3, 0x88, 0x4F, 0x09, 0xA7, 0x14, 0x26, 0x81,  // ..O...&.
            /* 0680 */  0xCF, 0x0F, 0x0C, 0x8D, 0x13, 0xBC, 0x36, 0x84,  // ......6.
            /* 0688 */  0xC6, 0x9C, 0x14, 0xEC, 0xF9, 0x8E, 0x21, 0x60,  // ......!`
            /* 0690 */  0x13, 0xD8, 0xFD, 0x25, 0x43, 0xD6, 0x06, 0xAE,  // ...%C...
            /* 0698 */  0x5B, 0x92, 0x21, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  // [.!z..-.
            /* 06A0 */  0x4D, 0x27, 0xCA, 0xFB, 0x46, 0x14, 0x3B, 0x43,  // M'..F.;C
            /* 06A8 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x1E, 0x15, 0x62,  // .F.`A..b
            /* 06B0 */  0x45, 0x79, 0x29, 0x30, 0x42, 0xC4, 0x10, 0xAF,  // Ey)0B...
            /* 06B8 */  0x1C, 0x81, 0x4E, 0x38, 0x7C, 0x90, 0xC7, 0xA6,  // ..N8|...
            /* 06C0 */  0x38, 0xED, 0x0F, 0x82, 0xC4, 0x7A, 0x12, 0x68,  // 8....z.h
            /* 06C8 */  0x2C, 0x8E, 0x34, 0x1A, 0xD4, 0x39, 0xC0, 0xC3,  // ,.4..9..
            /* 06D0 */  0xF5, 0x21, 0xC6, 0xC3, 0x7F, 0x08, 0x31, 0xC8,  // .!....1.
            /* 06D8 */  0x41, 0x9E, 0xDB, 0xA3, 0xC2, 0x71, 0xFA, 0x2A,  // A....q.*
            /* 06E0 */  0x61, 0x82, 0x17, 0x00, 0x1F, 0x54, 0xE0, 0xB8,  // a....T..
            /* 06E8 */  0x06, 0xD4, 0x8C, 0x9F, 0x31, 0xC0, 0x72, 0x1C,  // ....1.r.
            /* 06F0 */  0xF7, 0x49, 0x05, 0xEE, 0x78, 0x7C, 0x3F, 0x60,  // .I..x|?`
            /* 06F8 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x1D, 0x67,  // .N`..@.g
            /* 0700 */  0xF8, 0x3C, 0x5F, 0x58, 0x0C, 0xF9, 0x98, 0x60,  // .<_X...`
            /* 0708 */  0x02, 0x8B, 0x15, 0xF0, 0xFF, 0x3F, 0xD9, 0xB0,  // .....?..
            /* 0710 */  0xF1, 0x80, 0xFF, 0x1E, 0xF3, 0x78, 0xE1, 0x93,  // .....x..
            /* 0718 */  0x89, 0xE7, 0x6B, 0x82, 0x11, 0x21, 0xE4, 0x64,  // ..k..!.d
            /* 0720 */  0x3C, 0xE8, 0x3B, 0x04, 0xE6, 0x7A, 0xC3, 0xCE,  // <.;..z..
            /* 0728 */  0x2D, 0x5C, 0xD4, 0x41, 0x03, 0x75, 0x5A, 0xF0,  // -\.A.uZ.
            /* 0730 */  0x41, 0x81, 0xDD, 0x8C, 0x30, 0xC7, 0x75, 0x7E,  // A...0.u~
            /* 0738 */  0x56, 0x01, 0xFF, 0x08, 0xE1, 0xDF, 0x1E, 0x3C,  // V......<
            /* 0740 */  0x2F, 0x5F, 0x19, 0x5E, 0x1D, 0x12, 0x38, 0xE4,  // /_.^..8.
            /* 0748 */  0x08, 0xD1, 0xE3, 0xF2, 0x08, 0x31, 0xE7, 0x23,  // .....1.#
            /* 0750 */  0xCC, 0x10, 0xC1, 0x75, 0x16, 0x00, 0xC7, 0x10,  // ...u....
            /* 0758 */  0x81, 0xCF, 0x01, 0x07, 0xF6, 0xFF, 0xFF, 0xC2,  // ........
            /* 0760 */  0xC2, 0x2E, 0x4D, 0x7C, 0xA0, 0x3E, 0xE0, 0x00,  // ..M|.>..
            /* 0768 */  0x0E, 0xAE, 0x69, 0xB8, 0x03, 0x0E, 0x38, 0xCE,  // ..i...8.
            /* 0770 */  0x02, 0xEC, 0x70, 0x03, 0x4B, 0xA1, 0x4D, 0x9F,  // ..p.K.M.
            /* 0778 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
            /* 0780 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xEC, 0xAC,  // .Z}*5f..
            /* 0788 */  0xF2, 0x28, 0xAC, 0x47, 0x84, 0x46, 0x65, 0x11,  // .(.G.Fe.
            /* 0790 */  0x8F, 0x02, 0x81, 0x38, 0x32, 0x08, 0x8D, 0x44,  // ...82..D
            /* 0798 */  0x21, 0x10, 0x0B, 0x7F, 0x24, 0x08, 0xC4, 0xC2,  // !...$...
            /* 07A0 */  0x1E, 0x55, 0x02, 0xB1, 0xA8, 0xE7, 0x9C, 0x40,  // .U.....@
            /* 07A8 */  0x1C, 0x63, 0x15, 0x02, 0x27, 0x26, 0xC0, 0x29,  // .c..'&.)
            /* 07B0 */  0x08, 0x0D, 0xA6, 0xE2, 0xA0, 0x42, 0x9F, 0x6A,  // .....B.j
            /* 07B8 */  0x02, 0x71, 0x18, 0x10, 0x2A, 0xFD, 0xAF, 0x27,  // .q..*..'
            /* 07C0 */  0x10, 0x0B, 0xF4, 0x01, 0x48, 0x1F, 0x04, 0x02,  // ....H...
            /* 07C8 */  0x71, 0x04, 0x25, 0xA3, 0xA6, 0x0F, 0x09, 0x81,  // q.%.....
            /* 07D0 */  0x38, 0x2E, 0x08, 0x0D, 0xF5, 0x7C, 0x10, 0x20,  // 8....|. 
            /* 07D8 */  0xB1, 0x02, 0xC2, 0x82, 0x7B, 0x01, 0x61, 0xB2,  // ....{.a.
            /* 07E0 */  0x1F, 0x04, 0x02, 0xB1, 0x48, 0x33, 0x20, 0x4C,  // ....H3 L
            /* 07E8 */  0xCA, 0xAB, 0x4F, 0x80, 0x04, 0x84, 0xCA, 0xB5,  // ..O.....
            /* 07F0 */  0x03, 0xC2, 0xC2, 0x82, 0xD0, 0x68, 0x7A, 0x40,  // .....hz@
            /* 07F8 */  0x58, 0x00, 0x3F, 0x80, 0xF4, 0x15, 0x21, 0x10,  // X.?...!.
            /* 0800 */  0x87, 0x54, 0x04, 0xC2, 0x24, 0x3A, 0x02, 0x61,  // .T..$:.a
            /* 0808 */  0x29, 0x25, 0xFD, 0xFF, 0x21, 0x1A, 0x19, 0xA2,  // )%..!...
            /* 0810 */  0x41, 0x04, 0xE4, 0xA4, 0x96, 0x80, 0x58, 0x6E,  // A.....Xn
            /* 0818 */  0x10, 0x01, 0x39, 0x9C, 0x27, 0x20, 0x96, 0x14,  // ..9.' ..
            /* 0820 */  0x44, 0x40, 0x0E, 0xF8, 0xD2, 0x10, 0x90, 0xE3,  // D@......
            /* 0828 */  0x82, 0x08, 0xC8, 0xA9, 0x54, 0x01, 0xB1, 0x88,  // ....T...
            /* 0830 */  0x20, 0x02, 0x72, 0x32, 0x57, 0x40, 0x2C, 0x27,  //  .r2W@,'
            /* 0838 */  0x88, 0x0E, 0x01, 0xE4, 0x11, 0x14, 0x88, 0xE4,  // ........
            /* 0840 */  0x03, 0x11, 0x90, 0x63, 0xBD, 0x1C, 0x02, 0x91,  // ...c....
            /* 0848 */  0x90, 0x20, 0x02, 0x72, 0xA2, 0x37, 0x86, 0x80,  // . .r.7..
            /* 0850 */  0x1C, 0x0F, 0x44, 0x83, 0x20, 0x5F, 0xA1, 0x40,  // ..D. _.@
            /* 0858 */  0x24, 0x23, 0x88, 0x80, 0xC8, 0xFB, 0x28, 0x08,  // $#....(.
            /* 0860 */  0xD1, 0xF4, 0xAB, 0x13, 0x88, 0x53, 0x83, 0xD0,  // .....S..
            /* 0868 */  0x64, 0xDF, 0xA2, 0x20, 0xE4, 0xFF, 0x0F         // d.. ...
        })
        Name (ZOBF, Buffer (0x1060){})
        Name (_WDG, Buffer (0x3C)
        {
            /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
            /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
            /* 0010 */  0x50, 0x56, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // PV..yB..
            /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
            /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x81, 0x00, 0x01, 0x08,  // .~......
            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
            /* 0038 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
        })
        Method (WVPI, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, FSNI)
            CreateDWordField (Arg2, 0x04, FCOM)
            CreateDWordField (Arg2, 0x08, FCMT)
            CreateDWordField (Arg2, 0x0C, FDAS)
            Local0 = Zero
            RTCD = 0x03
            Local1 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            If ((FDAS > 0x1060))
            {
                RTCD = 0x05
                Local1 [Zero] = One
            }
            Else
            {
                Name (PVSZ, Package (0x05)
                {
                    Zero, 
                    0x04, 
                    0x80, 
                    0x0400, 
                    0x1000
                })
                Local0 = Zero
                If (((Arg1 >= One) && (Arg1 <= 0x05)))
                {
                    Local0 = DerefOf (PVSZ [(Arg1 - One)])
                }

                DASO = Local0
                SNIN = FSNI /* \_SB_.WMIV.WVPI.FSNI */
                COMD = FCOM /* \_SB_.WMIV.WVPI.FCOM */
                CMTP = FCMT /* \_SB_.WMIV.WVPI.FCMT */
                DASI = FDAS /* \_SB_.WMIV.WVPI.FDAS */
                If ((FDAS > Zero))
                {
                    CreateField (Arg2, 0x80, (FDAS * 0x08), FDAI)
                    PVWB = FDAI /* \_SB_.WMIV.WVPI.FDAI */
                }

                Local1 [One] = Local0
            }

            Return (Local1)
        }

        Method (HVWA, 0, Serialized)
        {
            Local2 = HVWC (COMD, CMTP, DASI, PVWB)
            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = HVWP (COMD, CMTP, DASI, PVWB)
            }

            Return (Local2)
        }

        Method (WVPO, 2, Serialized)
        {
            Local1 = Buffer ((0x08 + Arg0)){}
            CreateDWordField (Local1, Zero, FSNO)
            CreateDWordField (Local1, 0x04, FRTC)
            If ((ObjectType (Arg1) == 0x04))
            {
                FRTC = DerefOf (Arg1 [Zero])
                Local0 = Zero
                If ((SizeOf (Arg1) == 0x02))
                {
                    Local2 = DerefOf (Arg1 [One])
                    Local0 = SizeOf (Local2)
                }
            }
            Else
            {
                FRTC = RTCD /* \RTCD */
                Local0 = DASO /* \DASO */
            }

            If ((Local0 > Arg0))
            {
                FRTC = 0x05
            }
            ElseIf (((Local0 > Zero) && (Local0 <= 0x1060)))
            {
                CreateField (Local1, 0x40, (Local0 * 0x08), FDAO)
                If ((ObjectType (Arg1) == 0x04))
                {
                    FDAO = Local2
                }
                Else
                {
                    Local2 = PVWB /* \PVWB */
                    CreateField (Local2, Zero, (Local0 * 0x08), FDAI)
                    FDAO = FDAI /* \_SB_.WMIV.WVPO.FDAI */
                }
            }

            If ((Zero == (FRTC & 0xFFFF)))
            {
                FSNO = 0x53534150
            }
            Else
            {
                FSNO = 0x4C494146
            }

            Return (Local1)
        }

        Method (WVCM, 0, Serialized)
        {
            SNIN = Zero
            COMD = Zero
            CMTP = Zero
            DASI = Zero
            DASO = Zero
            PVWB = ZOBF /* \_SB_.WMIV.ZOBF */
            PVWS = Zero
            RTCD = Zero
        }

        Method (WMPV, 3, Serialized)
        {
            Local4 = WVPI (Arg0, Arg1, Arg2)
            Local0 = DerefOf (Local4 [Zero])
            Local3 = DerefOf (Local4 [One])
            If ((Local0 == Zero))
            {
                PVWS = 0x03
                GSWS (0x80F3)
                If ((PVWS == 0x03))
                {
                    Local2 = HVWA ()
                }
                ElseIf ((PVWS == 0x05))
                {
                    Local6 = HVWA ()
                    If ((0x00010000 != DerefOf (Local6 [Zero])))
                    {
                        Local2 = Local6
                    }
                }
                Else
                {
                    Local5 = Zero
                    While (((PVWS == 0x04) && (Local5 < 0x8000)))
                    {
                        Sleep (0x19)
                        PVWS = 0x03
                        GSWS (0x80F3)
                        Local5++
                    }
                }
            }

            Local1 = WVPO (Local3, Local2)
            If ((Local0 == Zero))
            {
                WVCM ()
            }

            Return (Local1)
        }

        Name (VEI1, Zero)
        Name (VED1, Zero)
        Name (VEI2, Zero)
        Name (VED2, Zero)
        Name (VEVI, Zero)
        Mutex (VEMX, 0x00)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Local0 = Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            CreateDWordField (Local0, Zero, EVID)
            CreateDWordField (Local0, 0x04, EVDA)
            EVID = VEI1 /* \_SB_.WMIV.VEI1 */
            EVDA = VED1 /* \_SB_.WMIV.VED1 */
            Acquire (VEMX, 0xFFFF)
            If ((VEI2 != Zero))
            {
                VEI1 = VEI2 /* \_SB_.WMIV.VEI2 */
                VED1 = VED2 /* \_SB_.WMIV.VED2 */
                VEI2 = Zero
                VED2 = Zero
                If ((VEVI == Zero))
                {
                    VEVI = One
                    Notify (WMIV, 0x81) // Information Change
                }
            }
            Else
            {
                VEI1 = Zero
                VED1 = Zero
            }

            Release (VEMX)
            Return (Local0)
        }

        Method (GVWE, 2, Serialized)
        {
            Acquire (VEMX, 0xFFFF)
            If ((VEI1 == Zero))
            {
                VEI1 = Arg0
                VED1 = Arg1
            }
            Else
            {
                VEI2 = Arg0
                VED2 = Arg1
            }

            Release (VEMX)
            Notify (WMIV, 0x81) // Information Change
        }
    }

    OperationRegion (HPCF, SystemMemory, 0x23AEF000, 0x00000041)
    Field (HPCF, AnyAcc, Lock, Preserve)
    {
        ILUX,   8, 
        NFCS,   8, 
        USWE,   8, 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        REFS,   32, 
        SSCI,   8, 
        WOLE,   8, 
        DFUE,   8, 
        TPLE,   8, 
        THHA,   16, 
        TPSA,   16, 
        PFKB,   8, 
        IWRS,   8, 
        IMCM,   8, 
        OSTS,   8, 
        OSTP,   8, 
        SLPT,   8, 
        VPOM,   8, 
        XMEM,   64, 
        CPPD,   8, 
        HPID,   32, 
        FDRS,   8, 
        APL3,   8, 
        CVID,   16, 
        CPID,   16, 
        APSS,   8, 
        PSA1,   8, 
        PSA2,   8, 
        PSA3,   8, 
        PSD1,   8, 
        PSD2,   8, 
        PSD3,   8, 
        PSD4,   8
    }

    OperationRegion (HPIL, SystemMemory, 0x23AEA000, 0x00000002)
    Field (HPIL, AnyAcc, Lock, Preserve)
    {
        VPOS,   8, 
        GCGN,   8
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x70), 
            POLB,   8, 
            POHB,   8, 
            Offset (0x79), 
            S3LB,   8, 
            S3HB,   8
        }

        Method (CPTS, 1, Serialized)
        {
            ODGW (Arg0)
            POLB = Arg0
            POHB = Zero
        }

        Method (CWAK, 1, Serialized)
        {
            ODGW ((0xF0 | Arg0))
            POLB = (0xF0 | Arg0)
            POHB = Zero
            If ((Arg0 == 0x03))
            {
                S3LB = (0xF0 | Arg0)
                S3HB = Zero
            }
        }
    }

    OperationRegion (HPSN, SystemMemory, 0x23AEB000, 0x00000008)
    Field (HPSN, AnyAcc, Lock, Preserve)
    {
        IOTS,   8, 
        IOTE,   8, 
        IRDS,   8, 
        TGRP,   8, 
        TGID,   32
    }

    Name (SANB, 0x23AF1D18)
    Name (SANL, 0x01BD)
    OperationRegion (SANV, SystemMemory, SANB, SANL)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IPTP,   8, 
        EDPV,   8, 
        HGMD,   8, 
        HGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        P3GP,   8, 
        HRE3,   8, 
        HRG3,   32, 
        HRA3,   8, 
        PWE3,   8, 
        PWG3,   32, 
        PWA3,   8, 
        P3WK,   32, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        LTRW,   8, 
        OBFA,   8, 
        SMSL,   16, 
        SNSL,   16, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VTB4,   32, 
        VTB5,   32, 
        VTB6,   32, 
        VTB7,   32, 
        VE1V,   16, 
        VE2V,   16, 
        RPIN,   8, 
        RPBA,   32, 
        CTHM,   8, 
        SIME,   8, 
        THCE,   8, 
        TDCE,   8, 
        DME0,   8, 
        DME1,   8, 
        TRE0,   8, 
        TRE1,   8, 
        TRE2,   8, 
        TRE3,   8, 
        TPA0,   32, 
        TPA1,   32, 
        TPA2,   32, 
        TPA3,   32, 
        TCDS,   32, 
        TCIT,   8, 
        TCIR,   8, 
        TRTD,   8, 
        ITM0,   32, 
        ITM1,   32, 
        LTE0,   8, 
        LTE1,   8, 
        LTE2,   8, 
        LTE3,   8, 
        PSL0,   16, 
        PSL1,   16, 
        PSL2,   16, 
        PSL3,   16, 
        PNS0,   16, 
        PNS1,   16, 
        PNS2,   16, 
        PNS3,   16, 
        IMRY,   8, 
        TIVS,   8, 
        PG0E,   8, 
        PG1E,   8, 
        PG2E,   8, 
        PG3E,   8, 
        VMDE,   8, 
        DIDY,   32, 
        NXDY,   32, 
        SLTS,   8, 
        VMR1,   8, 
        VMR2,   8, 
        VMR3,   8, 
        VMS0,   8, 
        VMS1,   8, 
        VMS2,   8, 
        VMS3,   8, 
        VMS4,   8, 
        VMS5,   8, 
        VMS6,   8, 
        VMS7,   8, 
        VMCP,   8, 
        CPRT,   8, 
        CSLU,   32, 
        CSSP,   32, 
        MPGN,   8, 
        CMBM,   8, 
        DPMS,   8, 
        PMSA,   64, 
        PMRL,   64, 
        EEC3,   8, 
        P0SC,   8, 
        P1SC,   8, 
        P2SC,   8, 
        P3SC,   8, 
        SBN0,   8, 
        SBN1,   8, 
        SBN2,   8, 
        SBN3,   8, 
        EEC1,   8, 
        EEC2,   8, 
        PBR1,   8, 
        PBR2,   8, 
        PBR3,   8, 
        HGST,   8, 
        PDIW,   8, 
        PDI0,   16, 
        PDI1,   16, 
        RTBM,   8
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    OperationRegion (GNVS, SystemMemory, 0x23AA5000, 0x0ABC)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   16, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        FND1,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        PIDE,   8, 
        PPSZ,   32, 
        IRMC,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        Offset (0x1F4), 
        PWRE,   8, 
        Offset (0x1F7), 
        PPPR,   16, 
        Offset (0x1FA), 
        VSPE,   8, 
        RFIM,   8, 
        Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        ECDB,   8, 
        P2ME,   8, 
        P2MK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HSH0,   16, 
        HSL0,   16, 
        HSD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HSH1,   16, 
        HSL1,   16, 
        HSD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HSH2,   16, 
        HSL2,   16, 
        HSD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HSH3,   16, 
        HSL3,   16, 
        HSD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HSH4,   16, 
        HSL4,   16, 
        HSD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HSH5,   16, 
        HSL5,   16, 
        HSD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   64, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        Offset (0x327), 
        CHGE,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        IFC3,   8, 
        WGC3,   8, 
        BATR,   8, 
        IN34,   8, 
        ECLP,   8, 
        MEMS,   8, 
        S1DE,   8, 
        S2DE,   8, 
        S3DE,   8, 
        S4DE,   8, 
        S5DE,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        Offset (0x3FA), 
        APPE,   8, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x42A), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        WBBR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        CL04,   8, 
        CL05,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        L4EN,   8, 
        L5EN,   8, 
        CDIV,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        C4VE,   8, 
        C4TP,   8, 
        C4CV,   8, 
        C4IC,   32, 
        C4GP,   8, 
        C4IB,   8, 
        C4IA,   16, 
        C4P0,   8, 
        C4P1,   8, 
        C4P2,   8, 
        C4P3,   8, 
        C4G0,   8, 
        C4G1,   8, 
        C4G2,   8, 
        C4G3,   8, 
        C4F0,   8, 
        C4F1,   8, 
        C4F2,   8, 
        C4F3,   8, 
        C4A0,   8, 
        C4A1,   8, 
        C4A2,   8, 
        C4A3,   8, 
        C4I0,   8, 
        C4I1,   8, 
        C4I2,   8, 
        C4I3,   8, 
        C4PL,   8, 
        C4W0,   8, 
        C4W1,   8, 
        C4W2,   8, 
        C4W3,   8, 
        C4SP,   8, 
        C4W4,   8, 
        C4W5,   8, 
        C4CS,   8, 
        C5VE,   8, 
        C5TP,   8, 
        C5CV,   8, 
        C5IC,   32, 
        C5GP,   8, 
        C5IB,   8, 
        C5IA,   16, 
        C5P0,   8, 
        C5P1,   8, 
        C5P2,   8, 
        C5P3,   8, 
        C5G0,   8, 
        C5G1,   8, 
        C5G2,   8, 
        C5G3,   8, 
        C5F0,   8, 
        C5F1,   8, 
        C5F2,   8, 
        C5F3,   8, 
        C5A0,   8, 
        C5A1,   8, 
        C5A2,   8, 
        C5A3,   8, 
        C5I0,   8, 
        C5I1,   8, 
        C5I2,   8, 
        C5I3,   8, 
        C5PL,   8, 
        C5W0,   8, 
        C5W1,   8, 
        C5W2,   8, 
        C5W3,   8, 
        C5SP,   8, 
        C5W4,   8, 
        C5W5,   8, 
        C5CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L0PV,   8, 
        L0PU,   8, 
        L0FD,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L1PV,   8, 
        L1PU,   8, 
        L1FD,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L2PV,   8, 
        L2PU,   8, 
        L2FD,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        L3PV,   8, 
        L3PU,   8, 
        L3FD,   8, 
        L4SM,   8, 
        L4H0,   8, 
        L4H1,   8, 
        L4H2,   8, 
        L4H3,   8, 
        L4H4,   8, 
        L4H5,   8, 
        L4H6,   8, 
        L4H7,   8, 
        L4H8,   8, 
        L4PL,   8, 
        L4M0,   8, 
        L4M1,   8, 
        L4M2,   8, 
        L4M3,   8, 
        L4M4,   8, 
        L4M5,   8, 
        L4M6,   8, 
        L4M7,   8, 
        L4M8,   8, 
        L4M9,   8, 
        L4MA,   8, 
        L4MB,   8, 
        L4MC,   8, 
        L4MD,   8, 
        L4ME,   8, 
        L4MF,   8, 
        L4DI,   8, 
        L4BS,   8, 
        L4A0,   16, 
        L4A1,   16, 
        L4A2,   16, 
        L4A3,   16, 
        L4A4,   16, 
        L4A5,   16, 
        L4A6,   16, 
        L4A7,   16, 
        L4A8,   16, 
        L4A9,   16, 
        L4AA,   16, 
        L4AB,   16, 
        L4D0,   8, 
        L4D1,   8, 
        L4D2,   8, 
        L4D3,   8, 
        L4D4,   8, 
        L4D5,   8, 
        L4D6,   8, 
        L4D7,   8, 
        L4D8,   8, 
        L4D9,   8, 
        L4DA,   8, 
        L4DB,   8, 
        L4DV,   8, 
        L4CV,   8, 
        L4LU,   8, 
        L4NL,   8, 
        L4EE,   8, 
        L4VC,   8, 
        L4FS,   8, 
        L4LE,   8, 
        L4DG,   8, 
        L4CK,   32, 
        L4CL,   8, 
        L4PP,   8, 
        L4VR,   8, 
        L4PV,   8, 
        L4PU,   8, 
        L4FD,   8, 
        L5SM,   8, 
        L5H0,   8, 
        L5H1,   8, 
        L5H2,   8, 
        L5H3,   8, 
        L5H4,   8, 
        L5H5,   8, 
        L5H6,   8, 
        L5H7,   8, 
        L5H8,   8, 
        L5PL,   8, 
        L5M0,   8, 
        L5M1,   8, 
        L5M2,   8, 
        L5M3,   8, 
        L5M4,   8, 
        L5M5,   8, 
        L5M6,   8, 
        L5M7,   8, 
        L5M8,   8, 
        L5M9,   8, 
        L5MA,   8, 
        L5MB,   8, 
        L5MC,   8, 
        L5MD,   8, 
        L5ME,   8, 
        L5MF,   8, 
        L5DI,   8, 
        L5BS,   8, 
        L5A0,   16, 
        L5A1,   16, 
        L5A2,   16, 
        L5A3,   16, 
        L5A4,   16, 
        L5A5,   16, 
        L5A6,   16, 
        L5A7,   16, 
        L5A8,   16, 
        L5A9,   16, 
        L5AA,   16, 
        L5AB,   16, 
        L5D0,   8, 
        L5D1,   8, 
        L5D2,   8, 
        L5D3,   8, 
        L5D4,   8, 
        L5D5,   8, 
        L5D6,   8, 
        L5D7,   8, 
        L5D8,   8, 
        L5D9,   8, 
        L5DA,   8, 
        L5DB,   8, 
        L5DV,   8, 
        L5CV,   8, 
        L5LU,   8, 
        L5NL,   8, 
        L5EE,   8, 
        L5VC,   8, 
        L5FS,   8, 
        L5LE,   8, 
        L5DG,   8, 
        L5CK,   32, 
        L5CL,   8, 
        L5PP,   8, 
        L5VR,   8, 
        L5PV,   8, 
        L5PU,   8, 
        L5FD,   8, 
        F0FM,   8, 
        F0MS,   8, 
        F0M0,   8, 
        F0M1,   8, 
        F0M2,   8, 
        F0M3,   8, 
        F0M4,   8, 
        F0M5,   8, 
        F0M6,   8, 
        F0M7,   8, 
        F0M8,   8, 
        F0M9,   8, 
        F0MA,   8, 
        F0MB,   8, 
        F0MC,   8, 
        F0MD,   8, 
        F0ME,   8, 
        F0MF,   8, 
        F0BS,   8, 
        F0AB,   16, 
        F0GP,   8, 
        F0GG,   16, 
        F0AV,   8, 
        F0IV,   8, 
        F0OM,   8, 
        F1FM,   8, 
        F1MS,   8, 
        F1M0,   8, 
        F1M1,   8, 
        F1M2,   8, 
        F1M3,   8, 
        F1M4,   8, 
        F1M5,   8, 
        F1M6,   8, 
        F1M7,   8, 
        F1M8,   8, 
        F1M9,   8, 
        F1MA,   8, 
        F1MB,   8, 
        F1MC,   8, 
        F1MD,   8, 
        F1ME,   8, 
        F1MF,   8, 
        F1BS,   8, 
        F1AB,   16, 
        F1GP,   8, 
        F1GG,   16, 
        F1AV,   8, 
        F1IV,   8, 
        F1OM,   8, 
        F2FM,   8, 
        F2MS,   8, 
        F2M0,   8, 
        F2M1,   8, 
        F2M2,   8, 
        F2M3,   8, 
        F2M4,   8, 
        F2M5,   8, 
        F2M6,   8, 
        F2M7,   8, 
        F2M8,   8, 
        F2M9,   8, 
        F2MA,   8, 
        F2MB,   8, 
        F2MC,   8, 
        F2MD,   8, 
        F2ME,   8, 
        F2MF,   8, 
        F2BS,   8, 
        F2AB,   16, 
        F2GP,   8, 
        F2GG,   16, 
        F2AV,   8, 
        F2IV,   8, 
        F2OM,   8, 
        F3FM,   8, 
        F3MS,   8, 
        F3M0,   8, 
        F3M1,   8, 
        F3M2,   8, 
        F3M3,   8, 
        F3M4,   8, 
        F3M5,   8, 
        F3M6,   8, 
        F3M7,   8, 
        F3M8,   8, 
        F3M9,   8, 
        F3MA,   8, 
        F3MB,   8, 
        F3MC,   8, 
        F3MD,   8, 
        F3ME,   8, 
        F3MF,   8, 
        F3BS,   8, 
        F3AB,   16, 
        F3GP,   8, 
        F3GG,   16, 
        F3AV,   8, 
        F3IV,   8, 
        F3OM,   8, 
        F4FM,   8, 
        F4MS,   8, 
        F4M0,   8, 
        F4M1,   8, 
        F4M2,   8, 
        F4M3,   8, 
        F4M4,   8, 
        F4M5,   8, 
        F4M6,   8, 
        F4M7,   8, 
        F4M8,   8, 
        F4M9,   8, 
        F4MA,   8, 
        F4MB,   8, 
        F4MC,   8, 
        F4MD,   8, 
        F4ME,   8, 
        F4MF,   8, 
        F4BS,   8, 
        F4AB,   16, 
        F4GP,   8, 
        F4GG,   16, 
        F4AV,   8, 
        F4IV,   8, 
        F4OM,   8, 
        F5FM,   8, 
        F5MS,   8, 
        F5M0,   8, 
        F5M1,   8, 
        F5M2,   8, 
        F5M3,   8, 
        F5M4,   8, 
        F5M5,   8, 
        F5M6,   8, 
        F5M7,   8, 
        F5M8,   8, 
        F5M9,   8, 
        F5MA,   8, 
        F5MB,   8, 
        F5MC,   8, 
        F5MD,   8, 
        F5ME,   8, 
        F5MF,   8, 
        F5BS,   8, 
        F5AB,   16, 
        F5GP,   8, 
        F5GG,   16, 
        F5AV,   8, 
        F5IV,   8, 
        F5OM,   8, 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        WIFC,   8, 
        Offset (0x830), 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x8D2), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        BTL2,   8, 
        BTLL,   8, 
        Offset (0x8DD), 
        ATDV,   8, 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        HEB1,   32, 
        BATP,   8, 
        TSDB,   8, 
        Offset (0x8E9), 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        HUAR,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        VBST,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        ELPM,   32, 
        ELPS,   32, 
        UCMS,   8, 
        UCG1,   32, 
        UCG2,   32, 
        Offset (0x939), 
        PCHE,   8, 
        Offset (0x93D), 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        STAS,   8, 
        WRTO,   8, 
        PRST,   32, 
        WPRP,   8, 
        PSWP,   32, 
        RPNB,   8, 
        POME,   8, 
        PSW2,   32, 
        RPN2,   8, 
        WFCP,   32, 
        PFCP,   8, 
        WBRS,   32, 
        PBRS,   8, 
        WWKP,   32, 
        GPLP,   32, 
        GPLR,   32, 
        GPI1,   32, 
        TPP1,   32, 
        TPR1,   32, 
        PPDI,   8, 
        PPLI,   8, 
        PPLP,   8, 
        PPLR,   8, 
        PPI1,   8, 
        PPP1,   8, 
        PPR1,   8, 
        PSPE,   32, 
        PPSP,   8, 
        PSPR,   32, 
        PPSR,   8, 
        PSP2,   32, 
        PS2P,   8, 
        PSR2,   32, 
        SR2P,   8, 
        WLWK,   32, 
        WLRP,   8, 
        SATP,   32, 
        STPP,   8, 
        SSDP,   32, 
        SDPP,   8, 
        SSDR,   32, 
        SDRP,   8, 
        S2DP,   32, 
        S2PP,   8, 
        S2DR,   32, 
        S2RP,   8, 
        SD2P,   32, 
        SDP1,   8, 
        SD2R,   32, 
        SDR1,   8, 
        SXI1,   8, 
        SXI2,   8, 
        SXP1,   8, 
        SXP2,   8, 
        TSD0,   8, 
        WCLK,   8, 
        CWEF,   8, 
        CECV,   32, 
        WWRP,   8, 
        WAGE,   8, 
        AGA1,   8, 
        AGA2,   8, 
        AGA3,   8, 
        AGA4,   8, 
        AGA5,   8, 
        AGB1,   8, 
        AGB2,   8, 
        AGB3,   8, 
        AGB4,   8, 
        AGB5,   8, 
        ACSD,   32, 
        I5BS,   32, 
        DGVR,   32, 
        DGVP,   8, 
        PAPE,   32, 
        PAPP,   8, 
        PARE,   32, 
        PARP,   8, 
        PAWK,   32, 
        PART,   8, 
        PBPE,   32, 
        PBPP,   8, 
        PBRE,   32, 
        PBRP,   8, 
        PBWK,   32, 
        PBRT,   8, 
        PCPE,   32, 
        PCPP,   8, 
        PCRE,   32, 
        PCRP,   8, 
        PCWK,   32, 
        PCRT,   8, 
        LPMR,   32, 
        CVFS,   8, 
        NCNV,   8, 
        DGOP,   32, 
        ST50,   8, 
        ST51,   8, 
        ST52,   8, 
        ST53,   8, 
        ST54,   8, 
        ST55,   8, 
        ST56,   8, 
        ST57,   8, 
        ST58,   8, 
        ST59,   8, 
        ST5A,   8, 
        ST5B,   8, 
        ST60,   8, 
        ST61,   8, 
        ST62,   8, 
        ST63,   8, 
        ST64,   8, 
        ST65,   8, 
        ST66,   8, 
        ST67,   8, 
        ST68,   8, 
        ST69,   8, 
        ST6A,   8, 
        ST6B,   8, 
        ST70,   8, 
        ST71,   8, 
        ST72,   8, 
        ST73,   8, 
        ST74,   8, 
        ST75,   8, 
        ST76,   8, 
        ST77,   8, 
        ST78,   8, 
        ST79,   8, 
        ST7A,   8, 
        ST7B,   8, 
        ST80,   8, 
        ST81,   8, 
        ST82,   8, 
        ST83,   8, 
        ST84,   8, 
        ST85,   8, 
        ST86,   8, 
        ST87,   8, 
        ST88,   8, 
        ST89,   8, 
        ST8A,   8, 
        ST8B,   8, 
        SD17,   8, 
        SD18,   8, 
        SD19,   8, 
        SD27,   8, 
        SD28,   8, 
        SD29,   8, 
        SD37,   8, 
        SD38,   8, 
        SD39,   8, 
        AGA6,   8, 
        AGA7,   8, 
        AGA8,   8, 
        AGA9,   8, 
        AGAA,   8, 
        AGAB,   8, 
        AGB6,   8, 
        AGB7,   8, 
        AGB8,   8, 
        AGB9,   8, 
        AGBA,   8, 
        AGBB,   8, 
        UHBS,   32, 
        DUWS,   8, 
        DGBA,   64, 
        L0LC,   8, 
        L1LC,   8, 
        L2LC,   8, 
        L3LC,   8, 
        L4LC,   8, 
        L5LC,   8, 
        ICS0,   32, 
        ICS1,   32, 
        ICS2,   32, 
        ICS3,   32, 
        ICS4,   32, 
        ICS5,   32, 
        XSMI,   32, 
        WWEN,   8, 
        TN2B,   16, 
        TB2R,   16, 
        TR2P,   16, 
        TB2F,   16, 
        TFDI,   16, 
        TBTG,   16, 
        TBTP,   16, 
        D2BA,   64, 
        D2OP,   32, 
        TR2B,   16, 
        WSID,   16, 
        WSTO,   16, 
        MSUB,   8
    }

    Scope (_SB)
    {
        Name (PD00, Package (0x2A)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR00, Package (0x48)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_SEG, Zero)  // _SEG: PCI Segment
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PD00 ())
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                    ,   9, 
                D6F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   3, 
                    ,   22, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PC00.EP_B */
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PC00.MH_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PC00.PC_B */
            }

            Method (PC2M, 1, Serialized)
            {
                Local0 = GPCB ()
                Local0 += ((Arg0 & 0x001F0000) >> One)
                Local0 += ((Arg0 & 0x07) << 0x0C)
                Return (Local0)
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    If ((PXSZ < 0x03))
                    {
                        PC_L = (0x10000000 >> PXSZ) /* \_SB_.PC00.PXSZ */
                    }
                    Else
                    {
                        PC_L = 0x10000000
                    }
                }

                Return (PC_L) /* \_SB_.PC00.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PC00.DM_B */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PC00._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PC00._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (CondRefOf (\MSUB))
                {
                    If ((PBMX != MSUB))
                    {
                        PBMX = MSUB /* \MSUB */
                        PBLN = (MSUB + One)
                    }
                    ElseIf (CondRefOf (\VMDE))
                    {
                        If (((VMDE == One) && (PBMX > 0xE0)))
                        {
                            PBMX = 0xE0
                            PBLN = 0xE1
                        }
                    }
                }

                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PC00._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PC00._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PC00._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* \M32L */
                M1MN = M32B /* \M32B */
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L /* \M64L */
                    M2MN = M64B /* \M64B */
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PC00.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If (CondRefOf (ITSP))
                    {
                        If (ITSP)
                        {
                            CTRL &= 0xFFFFFFF7
                        }
                    }

                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC00.CTRL */
                    OSCC = CTRL /* \_SB_.PC00.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PC00)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00) /* \_SB_.AR00 */
                }

                Method (PD00, 0, NotSerialized)
                {
                    Return (^^PD00) /* \_SB_.PD00 */
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04) /* \_SB_.AR04 */
                }

                Method (PD04, 0, NotSerialized)
                {
                    Return (^^PD04) /* \_SB_.PD04 */
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05) /* \_SB_.AR05 */
                }

                Method (PD05, 0, NotSerialized)
                {
                    Return (^^PD05) /* \_SB_.PD05 */
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06) /* \_SB_.AR06 */
                }

                Method (PD06, 0, NotSerialized)
                {
                    Return (^^PD06) /* \_SB_.PD06 */
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07) /* \_SB_.AR07 */
                }

                Method (PD07, 0, NotSerialized)
                {
                    Return (^^PD07) /* \_SB_.PD07 */
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08) /* \_SB_.AR08 */
                }

                Method (PD08, 0, NotSerialized)
                {
                    Return (^^PD08) /* \_SB_.PD08 */
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09) /* \_SB_.AR09 */
                }

                Method (PD09, 0, NotSerialized)
                {
                    Return (^^PD09) /* \_SB_.PD09 */
                }

                Device (PEG0)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG1)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG2)
                {
                    Name (_ADR, 0x00010001)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                If ((MPGN >= 0x04))
                {
                    Device (PEG3)
                    {
                        Name (_ADR, 0x00010002)  // _ADR: Address
                        Device (PEGP)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }
                }

                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                }

                Device (TCPU)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (IPU0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }

                Device (GNA0)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }
            }
        }

        Name (NBTI, Package (0x02)
        {
            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }, 

            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Travel", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }
        })
        Name (NBTE, Package (0x02)
        {
            Package (0x15)
            {
                One, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x00017318, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "123456789", 
                "LIon", 
                "Hewlett-Packard", 
                One
            }, 

            Package (0x15)
            {
                One, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x00017318, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard", 
                One
            }
        })
        Name (NBST, Package (0x02)
        {
            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }, 

            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }
        })
        Name (BTIP, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (NDBS, Package (0x04)
        {
            Zero, 
            Zero, 
            0x0FA0, 
            0x04B0
        })
        Name (ACST, One)
        Name (SMAR, Zero)
        Name (BT0P, 0x0F)
        Method (BTIF, 1, Serialized)
        {
            Local0 = ^PC00.LPCB.EC0.BTIF (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x0D)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    "", 
                    "", 
                    "", 
                    Zero
                })
            }
            Else
            {
                Return (DerefOf (NBTI [Arg0]))
            }
        }

        Method (BTIX, 1, Serialized)
        {
            Local0 = ^PC00.LPCB.EC0.BTIX (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x15)
                {
                    One, 
                    One, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    0x64, 
                    0x00017318, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x64, 
                    0x64, 
                    "", 
                    "", 
                    "", 
                    "", 
                    One
                })
            }
            Else
            {
                Return (DerefOf (NBTE [Arg0]))
            }
        }

        Method (BTST, 1, Serialized)
        {
            Local0 = ^PC00.LPCB.EC0.BTST (Arg0, One)
            Return (DerefOf (NBST [Arg0]))
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("4c2067e3-887d-475c-9720-4af1d3ed602e") /* Battery Thermal Limit */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x03)
                        {
                            Return (Package (0x01)
                            {
                                0x1E
                            })
                        }

                    }
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = ^^PC00.LPCB.EC0.BSTA (One)
                If ((BT0P ^ Local0))
                {
                    BT0P = Local0
                    Local1 = Local0
                    If ((Local1 != 0x1F))
                    {
                        Local1 = Zero
                    }

                    SSMI (0xEA3A, Zero, Local1, Zero, Zero)
                }

                Return (Local0)
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BTIX (Zero))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (Zero))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                ^^PC00.LPCB.EC0.BTTP (Zero, Arg0)
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BTIX (One))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (One))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                ^^PC00.LPCB.EC0.BTTP (One, Arg0)
            }
        }

        Device (AC)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^PC00.LPCB.EC0.GACS ()
                PWRS = Local0
                Local1 = ^^PC00.LPCB.EC0.GPID ()
                If ((Local0 ^ ACST)){}
                If (((Local0 && !ACST) || (Local1 && !SMAR)))
                {
                    ^^WMIV.GVWE (0x03, Zero)
                }

                ACST = Local0
                SMAR = Local1
                Return (Local0)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                If (CondRefOf (\_SB.PC00.LPCB.EC0.EC10))
                {
                    Local0 = ^^PC00.LPCB.EC0.EC10 ()
                }

                Return (Local0)
            }
        }

        Mutex (LDPS, 0x00)
        Mutex (LEXD, 0x00)
        Name (EDDA, Zero)
        OperationRegion (LDPT, SystemIO, 0x80, One)
        Field (LDPT, ByteAcc, NoLock, Preserve)
        {
            LPDG,   8
        }

        OperationRegion (LDBP, SystemIO, 0x024E, 0x02)
        Field (LDBP, ByteAcc, NoLock, Preserve)
        {
            LLPD,   8, 
            LUPD,   8
        }

        Method (ODBB, 2, Serialized)
        {
            Acquire (LDPS, 0xFFFF)
            LLPD = (Arg0 & 0xFF)
            If ((Arg1 >= 0x02))
            {
                LUPD = ((Arg0 >> 0x08) & 0xFF)
            }

            Release (LDPS)
            Acquire (LDPS, 0xFFFF)
            LPDG = (Arg0 & 0xFF)
            Release (LDPS)
            Return (Zero)
        }

        Method (ODBG, 1, NotSerialized)
        {
            ODBB (Arg0, One)
            Return (Zero)
        }

        Method (ODG1, 1, NotSerialized)
        {
            Acquire (LDPS, 0xFFFF)
            LUPD = Arg0
            Release (LDPS)
            Return (Zero)
        }

        Method (ODGW, 1, NotSerialized)
        {
            ODBB (Arg0, 0x02)
            Return (Zero)
        }

        Method (ODGD, 1, NotSerialized)
        {
            ODBB (Arg0, 0x03)
            Return (Zero)
        }

        Method (EODB, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODBG (EDDA)
            Release (LEXD)
        }

        Method (EODW, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGW (EDDA)
            Release (LEXD)
        }

        Method (EODD, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGD (EDDA)
            Release (LEXD)
        }

        Device (HTAM)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0xF3000005)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (ResourceTemplate ()
                {
                    Memory32Fixed (ReadOnly,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CondRefOf (\_SB.TPM._STA))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }
        }

        Scope (\_SB)
        {
            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (AWAC)
        {
            Name (_HID, "ACPI000E" /* Time and Alarm Device */)  // _HID: Hardware ID
            Name (WAST, Zero)
            Name (WTTR, Zero)
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x72, 0x04))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xB7)
            }

            OperationRegion (RTCM, SystemCMOS, Zero, 0x3F)
            Field (RTCM, ByteAcc, Lock, Preserve)
            {
                SEC,    8, 
                Offset (0x02), 
                MIN,    8, 
                Offset (0x04), 
                HOR,    8, 
                Offset (0x07), 
                DAY,    8, 
                MON,    8, 
                YEAR,   8, 
                Offset (0x32), 
                CNTY,   8
            }

            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                Name (BUFF, Buffer (0x10){})
                CreateWordField (BUFF, Zero, Y)
                CreateByteField (BUFF, 0x02, M)
                CreateByteField (BUFF, 0x03, D)
                CreateByteField (BUFF, 0x04, H)
                CreateByteField (BUFF, 0x05, MIN1)
                CreateByteField (BUFF, 0x06, S)
                CreateByteField (BUFF, 0x07, V)
                CreateWordField (BUFF, 0x0A, TZ)
                CreateByteField (BUFF, 0x0C, DL)
                FromBCD (YEAR, Local5)
                FromBCD (CNTY, Local6)
                Y = ((Local6 * 0x64) + Local5)
                FromBCD (MON, M) /* \_SB_.AWAC._GRT.M___ */
                FromBCD (DAY, D) /* \_SB_.AWAC._GRT.D___ */
                FromBCD (HOR, H) /* \_SB_.AWAC._GRT.H___ */
                FromBCD (MIN, MIN1) /* \_SB_.AWAC._GRT.MIN1 */
                FromBCD (SEC, S) /* \_SB_.AWAC._GRT.S___ */
                TZ = 0x07FF
                DL = Zero
                V = One
                Return (BUFF) /* \_SB_.AWAC._GRT.BUFF */
            }

            Method (_SRT, 1, NotSerialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, Zero, Y)
                CreateByteField (Arg0, 0x02, M)
                CreateByteField (Arg0, 0x03, D)
                CreateByteField (Arg0, 0x04, H)
                CreateByteField (Arg0, 0x05, MIN1)
                CreateByteField (Arg0, 0x06, S)
                Divide (Y, 0x64, Local5, Local4)
                ToBCD (Local4, CNTY) /* \_SB_.AWAC.CNTY */
                ToBCD (Local5, YEAR) /* \_SB_.AWAC.YEAR */
                ToBCD (M, MON) /* \_SB_.AWAC.MON_ */
                ToBCD (D, DAY) /* \_SB_.AWAC.DAY_ */
                ToBCD (H, HOR) /* \_SB_.AWAC.HOR_ */
                ToBCD (MIN1, MIN) /* \_SB_.AWAC.MIN_ */
                ToBCD (S, SEC) /* \_SB_.AWAC.SEC_ */
                Return (Zero)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Local0 = Zero
                If ((Arg0 == Zero))
                {
                    If (((ACWA == 0xFFFFFFFF) && (One & WTTR)))
                    {
                        Local0 |= One
                        WTTR ^= One /* \_SB_.AWAC.WTTR */
                    }
                }
                ElseIf (((DCWA == 0xFFFFFFFF) && (0x02 & WTTR)))
                {
                    Local0 |= One
                    WTTR ^= 0x02 /* \_SB_.AWAC.WTTR */
                }

                If (WAST)
                {
                    Local0 |= 0x02
                    WAST = Zero
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                Return (Zero)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    ACET = Arg1
                }
                Else
                {
                    DCET = Arg1
                }

                Return (Zero)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                If ((Arg0 == Zero))
                {
                    ACWA = Arg1
                    WTTR |= One /* \_SB_.AWAC.WTTR */
                }
                Else
                {
                    DCWA = Arg1
                    WTTR |= 0x02 /* \_SB_.AWAC.WTTR */
                }

                Return (Zero)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    Return (ACET) /* \ACET */
                }
                Else
                {
                    Return (DCET) /* \DCET */
                }
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If ((Arg0 == Zero))
                {
                    Return (ACWA) /* \ACWA */
                }
                Else
                {
                    Return (DCWA) /* \DCWA */
                }
            }
        }
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PC00)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y10, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.IICB._Y10._ADR, DAD0)  // _ADR: Address
                    DAD0 = Arg0
                    Return (IIC0) /* \_SB_.PC00.IICB.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y11, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.IICB._Y11._ADR, DAD1)  // _ADR: Address
                    DAD1 = Arg0
                    Return (IIC1) /* \_SB_.PC00.IICB.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y12, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.IICB._Y12._ADR, DAD2)  // _ADR: Address
                    DAD2 = Arg0
                    Return (IIC2) /* \_SB_.PC00.IICB.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y13, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.IICB._Y13._ADR, DAD3)  // _ADR: Address
                    DAD3 = Arg0
                    Return (IIC3) /* \_SB_.PC00.IICB.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y14, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.IICB._Y14._ADR, DAD4)  // _ADR: Address
                    DAD4 = Arg0
                    Return (IIC4) /* \_SB_.PC00.IICB.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y15, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.IICB._Y15._ADR, DAD5)  // _ADR: Address
                    DAD5 = Arg0
                    Return (IIC5) /* \_SB_.PC00.IICB.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (VIIC, 1, Serialized)
        {
            Name (VIC0, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS04.VI2C",
                    0x00, ResourceConsumer, _Y16, Exclusive,
                    )
            })
            CreateWordField (VIC0, \_SB.PC00.VIIC._Y16._ADR, DADR)  // _ADR: Address
            DADR = Arg0
            Return (VIC0) /* \_SB_.PC00.VIIC.VIC0 */
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y17)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PC00.INTB._Y17._INT, NUMI)  // _INT: Interrupts
            NUMI = INUM (Arg0)
            CreateByteField (INTR, 0x03, LEVI)
            LEVI = Arg1
            CreateByteField (INTR, 0x03, ACTI)
            ACTI = Arg2
            Return (INTR) /* \_SB_.PC00.INTB.INTR */
        }
    }

    Name (PCHH, One)
    Name (PCHN, 0x03)
    Name (PCHL, 0x02)
    Name (PNVB, 0x23AF1298)
    Name (PNVL, 0x02D9)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        RPAP,   32, 
        RPAQ,   32, 
        RPAR,   32, 
        RPAS,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        ACS0,   8, 
        ACS1,   8, 
        ACS2,   8, 
        ACS3,   8, 
        DAI0,   8, 
        DAI1,   8, 
        DAI2,   8, 
        DAI3,   8, 
        DOD0,   8, 
        DOD1,   8, 
        DOD2,   8, 
        DOD3,   8, 
        SWMC,   8, 
        XTAL,   8, 
        DSPM,   32, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PMLP,   16, 
        PMLQ,   16, 
        PMLR,   16, 
        PMLS,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        PNLP,   16, 
        PNLQ,   16, 
        PNLR,   16, 
        PNLS,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SM00,   8, 
        SM01,   8, 
        SM02,   8, 
        SM03,   8, 
        SM04,   8, 
        SM05,   8, 
        SM06,   8, 
        SC00,   64, 
        SC01,   64, 
        SC02,   64, 
        SC03,   64, 
        SC04,   64, 
        SC05,   64, 
        SC06,   64, 
        IM00,   8, 
        IM01,   8, 
        IM02,   8, 
        IM03,   8, 
        IM04,   8, 
        IM05,   8, 
        IM06,   8, 
        IM07,   8, 
        IC00,   64, 
        IC01,   64, 
        IC02,   64, 
        IC03,   64, 
        IC04,   64, 
        IC05,   64, 
        IC06,   64, 
        IC07,   64, 
        UM00,   8, 
        UM01,   8, 
        UM02,   8, 
        UM03,   8, 
        UM04,   8, 
        UM05,   8, 
        UM06,   8, 
        UC00,   64, 
        UC01,   64, 
        UC02,   64, 
        UC03,   64, 
        UC04,   64, 
        UC05,   64, 
        UC06,   64, 
        UD00,   8, 
        UD01,   8, 
        UD02,   8, 
        UD03,   8, 
        UD04,   8, 
        UD05,   8, 
        UD06,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UI00,   8, 
        UI01,   8, 
        UI02,   8, 
        UI03,   8, 
        UI04,   8, 
        UI05,   8, 
        UI06,   8, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CNVI,   8, 
        CBTC,   8, 
        CBTA,   8, 
        PTHM,   8, 
        PSON,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        GBES,   8, 
        PPDS,   32, 
        EMCE,   8, 
        SDCE,   8, 
        TGEA,   8, 
        TGEB,   8, 
        CR00,   8, 
        CR01,   8, 
        CR02,   8, 
        CR03,   8, 
        CR04,   8, 
        CR05,   8, 
        CR06,   8, 
        CR07,   8, 
        CR08,   8, 
        CR09,   8, 
        CR10,   8, 
        CR11,   8, 
        CR12,   8, 
        CR13,   8, 
        CR14,   8, 
        CR15,   8, 
        CR16,   8, 
        CR17,   8, 
        TCOB,   16, 
        ICKP,   16, 
        PCNV,   16, 
        HBSL,   32, 
        SPPR,   8, 
        UAOE,   8
    }

    Scope (_SB)
    {
        OperationRegion (ICLK, SystemMemory, (SBRG + ((ICKP << 0x10) + 0x8000)), 0x40)
        If ((PCHS == PCHL))
        {
            Field (ICLK, AnyAcc, Lock, Preserve)
            {
                CLL0,   8, 
                Offset (0x0C), 
                CLL1,   8, 
                Offset (0x18), 
                CLL2,   8, 
                Offset (0x24), 
                CLL3,   8, 
                Offset (0x30), 
                CLL4,   8, 
                Offset (0x3C), 
                CLL5,   8
            }
        }
        Else
        {
            Field (ICLK, AnyAcc, Lock, Preserve)
            {
                CLH0,   8, 
                Offset (0x0C), 
                CLH1,   8
            }
        }

        Method (NCLK, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (0x06)
            }
            Else
            {
                Return (0x02)
            }
        }

        Method (CLKC, 2, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLL0 /* \_SB_.CLL0 */
                        CLL0 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (One)
                    {
                        Local0 = CLL1 /* \_SB_.CLL1 */
                        CLL1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x02)
                    {
                        Local0 = CLL2 /* \_SB_.CLL2 */
                        CLL2 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x03)
                    {
                        Local0 = CLL3 /* \_SB_.CLL3 */
                        CLL3 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x04)
                    {
                        Local0 = CLL4 /* \_SB_.CLL4 */
                        CLL4 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x05)
                    {
                        Local0 = CLL5 /* \_SB_.CLL5 */
                        CLL5 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }

                }
            }
            Else
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLH0 /* \_SB_.CLH0 */
                        CLH0 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (One)
                    {
                        Local0 = CLH1 /* \_SB_.CLH1 */
                        CLH1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }

                }
            }
        }

        Method (CLKF, 2, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLL0 /* \_SB_.CLL0 */
                        CLL0 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (One)
                    {
                        Local0 = CLL1 /* \_SB_.CLL1 */
                        CLL1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x02)
                    {
                        Local0 = CLL2 /* \_SB_.CLL2 */
                        CLL2 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x03)
                    {
                        Local0 = CLL3 /* \_SB_.CLL3 */
                        CLL3 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x04)
                    {
                        Local0 = CLL4 /* \_SB_.CLL4 */
                        CLL4 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x05)
                    {
                        Local0 = CLL5 /* \_SB_.CLL5 */
                        CLL5 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }

                }
            }
            Else
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLH0 /* \_SB_.CLH0 */
                        CLH0 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (One)
                    {
                        Local0 = CLH1 /* \_SB_.CLH1 */
                        CLH1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }

                }
            }
        }
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x12)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x1A, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x10, 
                0x08A0, 
                0xB4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x09A0, 
                0xB8, 
                0x38, 
                0x0148, 
                0x40
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x08, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x0160
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x09, 
                0x0780, 
                0xB4, 
                0x24, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x11, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x60
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0780, 
                0xB4, 
                0x24, 
                0x0144, 
                0x80
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x15, 
                0x0900, 
                0xB8, 
                0x30, 
                0x0148, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0A50, 
                0xBC, 
                0x3C, 
                0x014C, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x1B, 
                0x0BD0, 
                0xC0, 
                0x48, 
                0x0150, 
                0xE0
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x19, 
                0x0880, 
                0xB4, 
                0x2C, 
                0x0144, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x06, 
                0x0A10, 
                0xB8, 
                0x3C, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x19, 
                0x0A70, 
                0xBC, 
                0x40, 
                0x014C, 
                0x0140
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0A, 
                0x0C00, 
                0xC0, 
                0x50, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0F, 
                0x0700, 
                0xB0, 
                0x20, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x5B, 
                0x07F0, 
                0xB4, 
                0x28, 
                0xFFFF, 
                0xFFFF
            }
        })
        Name (GPCH, Package (0x13)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x14, 
                0x0790, 
                0xC4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x18, 
                0x08D0, 
                0xC8, 
                0x3C, 
                0x0148, 
                0x40
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x08, 
                0x0A70, 
                0xCC, 
                0x4C, 
                0x014C, 
                0x60
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x80
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x07A0, 
                0xC4, 
                0x30, 
                0x0144, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0920, 
                0xC8, 
                0x3C, 
                0x0148, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x10, 
                0x09A0, 
                0xCC, 
                0x40, 
                0x014C, 
                0xE0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x1B, 
                0x0AB0, 
                0xD0, 
                0x4C, 
                0x0150, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x0D, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0D, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x06D0, 
                0xC4, 
                0x28, 
                0x0144, 
                0x0140
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x54, 
                0xFFFF, 
                0xC8, 
                0x34, 
                0x0148, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x0160
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0A, 
                0x0780, 
                0xC4, 
                0x2C, 
                0x0144, 
                0x0180
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0C, 
                0x0820, 
                0xC8, 
                0x34, 
                0x0148, 
                0x01A0
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x0F, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x01C0
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x09, 
                0x06F0, 
                0xC4, 
                0x28, 
                0x0164, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x0E, 
                0x0780, 
                0xC8, 
                0x30, 
                0x0168, 
                0xFFFF
            }
        })
        Name (RXEV, Package (0x12)
        {
            Buffer (0x1A){}, 
            Buffer (0x19){}, 
            Buffer (0x18){}, 
            Buffer (0x08){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x08){}, 
            Buffer (0x18){}, 
            Buffer (0x15){}, 
            Buffer (0x1B){}, 
            Buffer (0x1B){}, 
            Buffer (0x18){}, 
            Buffer (0x19){}, 
            Buffer (0x06){}, 
            Buffer (0x19){}, 
            Buffer (0x0C){}, 
            Buffer (0x0F){}, 
            Buffer (0x5B){}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
            }
            Else
            {
                Return (DerefOf (DerefOf (GPCH [Arg0]) [Arg1]))
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (0x12)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((GINF (Local1, 0x06) + Local0))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return ((GPC1 (Arg0) & 0x7F))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                Local2))))
            {
                Return (0x6F)
            }
            Else
            {
                If (((GEI0 == Local0) && (GED0 == Local2)))
                {
                    Local3 = Zero
                }
                ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                {
                    Local3 = One
                }
                ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                {
                    Local3 = 0x02
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return ((((Local3 - Local2) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                Local4))))
            {
                Local3 = GADR (Local0, 0x05)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }
        }

        Method (ISME, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                GED2 == Local4))))
            {
                Return (Zero)
            }

            If (((GADR (Local0, 0x05) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Local0, 0x05) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG /* \_SB_.DIPI.RCFG */
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }

        Method (GRXE, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   25, 
                RCFG,   2, 
                Offset (0x04)
            }

            RCFG = Arg1
        }
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = One
                    While (((APA0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    RAA1 = One
                    While (((APA1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    RAA2 = One
                    While (((APA2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    RAA3 = One
                    While (((APA3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    RPB0 = One
                    While (((APB0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    RPB1 = One
                    While (((APB1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    RPB2 = One
                    While (((APB2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    RPB3 = One
                    While (((APB3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    RPC0 = One
                    While (((APC0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    RPC1 = One
                    While (((APC1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = One
                    While (((APC2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = One
                    While (((APC3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = One
                    While (((APD0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = One
                    While (((APD1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = One
                    While (((APD2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = One
                    While (((APD3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    RPE0 = One
                    While (((APE0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    RPE1 = One
                    While (((APE1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    RPE2 = One
                    While (((APE2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    RPE3 = One
                    While (((APE3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (PSD0, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = Zero
                    While (((APA0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    RAA1 = Zero
                    While (((APA1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    RAA2 = Zero
                    While (((APA2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    RAA3 = Zero
                    While (((APA3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    RPB0 = Zero
                    While (((APB0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    RPB1 = Zero
                    While (((APB1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    RPB2 = Zero
                    While (((APB2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    RPB3 = Zero
                    While (((APB3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    RPC0 = Zero
                    While (((APC0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    RPC1 = Zero
                    While (((APC1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = Zero
                    While (((APC2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = Zero
                    While (((APC3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = Zero
                    While (((APD0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = Zero
                    While (((APD1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = Zero
                    While (((APD2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = Zero
                    While (((APD3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    RPE0 = Zero
                    While (((APE0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    RPE1 = Zero
                    While (((APE1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    RPE2 = Zero
                    While (((APE2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    RPE3 = Zero
                    While (((APE3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (CSD3, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = One
                    While (((ASAT == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    RGBE = One
                    While (((AGBE == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    RXHC = One
                    While (((AXHC == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    RXDC = One
                    While (((AXDC == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    RUFS = One
                    While (((AUFS == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (CSD0, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = Zero
                    While (((ASAT == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    RGBE = Zero
                    While (((AGBE == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    RXHC = Zero
                    While (((AXHC == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    RXDC = Zero
                    While (((AXDC == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    RUFS = Zero
                    While (((AUFS == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }
    }

    Name (THMN, 0x48)
    Name (THCN, 0x0E)
    Name (CNPM, 0x80)
    Name (FMSN, 0x10)
    Scope (\)
    {
        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (CNPM * (Arg0 - FMSN)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If ((PTHM == Zero))
            {
                Return (Zero)
            }
            ElseIf ((PTHM == One))
            {
                If (!\_SB.PC00.PTHT.THEN ())
                {
                    Return (Zero)
                }
            }
            ElseIf ((PTHM == 0x02))
            {
                If (!\_SB.PTHH.THEN ())
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (THMN, THCN)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Scope (_SB)
    {
        Method (PWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                S23W ()
            }
        }

        Name (HDAA, One)
        Name (DISA, One)
        Name (CIWF, One)
        Name (CIBT, One)
        Name (S23C, Zero)
        Method (S23W, 0, NotSerialized)
        {
            HDAA = One
            DISA = One
            CIWF = One
            CIBT = One
        }

        Method (DION, 0, NotSerialized)
        {
            S023 (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            S023 (One, Zero)
        }

        Method (S023, 2, Serialized)
        {
            If (!S23C)
            {
                If ((^PC00.HDAS.VDID == 0xFFFFFFFF))
                {
                    HDAA = 0x02
                }

                If (!^PC00.CNIP ())
                {
                    CIWF = 0x02
                    CIBT = 0x02
                }

                S23C = One
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    If ((HDAA != 0x02))
                    {
                        HDAA = Arg1
                    }
                }
                Case (One)
                {
                    DISA = Arg1
                }
                Case (0x02)
                {
                    If ((CIWF != 0x02))
                    {
                        CIWF = Arg1
                    }
                }
                Case (0x03)
                {
                    If ((CIBT != 0x02))
                    {
                        CIBT = Arg1
                    }
                }
                Default
                {
                    Return (Zero)
                }

            }

            If ((((DISA != One) && (HDAA != One)) && (
                (CIWF != One) && (CIBT != One))))
            {
                XSQD = Zero
            }
            Else
            {
                XSQD = One
            }
        }

        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE04C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE050000,         // Address Base
                        0x00060000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE0D0000,         // Address Base
                        0x00030000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y18)
                })
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y18._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y18._MAX, AMAX)  // _MAX: Maximum Base Address
                AMIN = PMBS /* \PMBS */
                AMAX = PMBS /* \PMBS */
                Name (SBR0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00690000,         // Address Length
                        _Y19)
                })
                CreateDWordField (SBR0, \_SB.PRRE._CRS._Y19._BAS, BAS0)  // _BAS: Base Address
                BAS0 = SBRG /* \SBRG */
                ConcatenateResTemplate (BUF0, SBR0, Local0)
                If (((PCHS == PCHH) || (PCHS == 0x04)))
                {
                    Name (SBRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1A)
                    })
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y1A._BAS, BAS1)  // _BAS: Base Address
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y1A._LEN, LEN1)  // _LEN: Length
                    BAS1 = (SBRG + 0x006C0000)
                    LEN1 = 0x00010000
                    ConcatenateResTemplate (Local0, SBRS, Local1)
                }
                Else
                {
                    Name (SBRL, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1B)
                    })
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y1B._BAS, BAS2)  // _BAS: Base Address
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y1B._LEN, LEN2)  // _LEN: Length
                    BAS2 = (SBRG + 0x006B0000)
                    LEN2 = 0x00020000
                    ConcatenateResTemplate (Local0, SBRL, Local1)
                }

                Name (SBRE, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1C)
                })
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y1C._BAS, BAS3)  // _BAS: Base Address
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y1C._LEN, LEN3)  // _LEN: Length
                BAS3 = (SBRG + 0x006F0000)
                If ((PCHS == 0x04))
                {
                    LEN3 = ((SBRG + 0x10000000) - BAS3)
                }
                Else
                {
                    LEN3 = ((SBRG + 0x01000000) - BAS3)
                }

                ConcatenateResTemplate (Local1, SBRE, Local2)
                Return (Local2)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1D)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1E)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1F)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y20)
                })
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y1D._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y1D._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y1E._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y1E._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y1F._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y1F._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y20._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y20._MAX, AMA3)  // _MAX: Maximum Base Address
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 == One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local1)
                    Local0 = Local1
                }

                If ((ITS1 == One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local1)
                    Local0 = Local1
                }

                If ((ITS2 == One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local1)
                    Local0 = Local1
                }

                If ((ITS3 == One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (TEMP, Zero)
        Device (LPCB)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }
    }

    Scope (\)
    {
        Name (TMOV, 0x0A)
        Method (TMVA, 1, Serialized)
        {
            TMOV = 0x0A
            If ((Arg0 > 0x0A))
            {
                TMOV = Arg0
            }
        }

        Method (IPCS, 7, Serialized)
        {
            Name (RPKG, Package (0x05)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            If ((Arg2 > 0x10))
            {
                ADBG ("CmdSize>16 Error")
                RPKG [Zero] = One
                Return (RPKG) /* \IPCS.RPKG */
            }

            IWB0 = Arg3
            IWB1 = Arg4
            IWB2 = Arg5
            IWB3 = Arg6
            Local0 = Zero
            Local0 += (Arg0 << Zero)
            Local0 += (Arg1 << 0x0C)
            Local0 += (Arg2 << 0x10)
            CMDR = Local0
            Local0 = Zero
            While (One)
            {
                If ((!IBSY || (IERR == One)))
                {
                    Break
                }

                If ((Local0 > 0x07D0))
                {
                    RPKG [Zero] = 0x03
                    Return (RPKG) /* \IPCS.RPKG */
                }

                Sleep (One)
                Local0++
            }

            If ((IERR == One))
            {
                RPKG [Zero] = 0x02
                Return (RPKG) /* \IPCS.RPKG */
            }

            RPKG [One] = IRB0 /* \IRB0 */
            RPKG [0x02] = IRB1 /* \IRB1 */
            RPKG [0x03] = IRB2 /* \IRB2 */
            RPKG [0x04] = IRB3 /* \IRB3 */
            Return (RPKG) /* \IPCS.RPKG */
        }

        Method (MCUI, 2, Serialized)
        {
            Name (PRPI, Zero)
            Local0 = (One << Arg0)
            Local1 = (Arg1 << Arg0)
            PRPI = CTRP (Arg0)
            If ((PCHS == PCHN))
            {
                Name (CRPN, Buffer (0x08)
                {
                     0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03   // ........
                })
                PRPI = DerefOf (CRPN [PRPI])
            }

            If ((PRPI < 0x18))
            {
                Local2 = (One << PRPI) /* \MCUI.PRPI */
                Local3 = (Arg1 << PRPI) /* \MCUI.PRPI */
            }
            Else
            {
                Local2 = (One << PRPI) /* \MCUI.PRPI */
                Local3 = (Arg1 << PRPI) /* \MCUI.PRPI */
                Local2 <<= 0x18
                Local3 <<= 0x18
            }

            ADBG ("Calling IPCS method with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Local0 =", Local0))
            ADBG (Concatenate ("Local1 =", Local1))
            ADBG (Concatenate ("Local2 =", Local2))
            ADBG (Concatenate ("Local3 =", Local3))
            IPCS (0xAC, Zero, 0x10, Local0, Local1, Local2, Local3)
        }

        Method (SPCO, 2, Serialized)
        {
            ADBG ("Calling SPCO method to configure PCIe ClkReq Override")
            TMOV = 0x0A
            MCUI (Arg0, Arg1)
        }

        Method (SPCX, 3, Serialized)
        {
            ADBG ("Calling SPCX method to configure PCIe ClkReq Override")
            ADBG ("Calling TMVA method to override IPC1 Command Timeout Value")
            TMVA (Arg2)
            MCUI (Arg0, Arg1)
        }

        Method (HBCM, 2, Serialized)
        {
            ADBG ("mask/unmask Hybrid Partner CLKREQ")
            Name (HPRI, Zero)
            HPRI = Arg0
            If ((HPRI < 0x18))
            {
                Local0 = (One << HPRI) /* \HBCM.HPRI */
                Local1 = (Arg1 << HPRI) /* \HBCM.HPRI */
            }
            Else
            {
                Local0 = Zero
                Local1 = Zero
            }

            ADBG ("Calling IPCS method for Hybrid Partner with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Port number of Hybrid Partner =", HPRI))
            ADBG (Concatenate ("Local0 of Hybrid Partner =", Local0))
            ADBG (Concatenate ("Local1 of Hybrid Partner =", Local1))
            IPCS (0xAC, Zero, 0x10, Zero, Zero, Local0, Local1)
        }

        Method (CTRP, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Return (CR00) /* \CR00 */
                }
                Case (One)
                {
                    Return (CR01) /* \CR01 */
                }
                Case (0x02)
                {
                    Return (CR02) /* \CR02 */
                }
                Case (0x03)
                {
                    Return (CR03) /* \CR03 */
                }
                Case (0x04)
                {
                    Return (CR04) /* \CR04 */
                }
                Case (0x05)
                {
                    Return (CR05) /* \CR05 */
                }
                Case (0x06)
                {
                    Return (CR06) /* \CR06 */
                }
                Case (0x07)
                {
                    Return (CR07) /* \CR07 */
                }
                Case (0x08)
                {
                    Return (CR08) /* \CR08 */
                }
                Case (0x09)
                {
                    Return (CR09) /* \CR09 */
                }
                Case (0x0A)
                {
                    Return (CR10) /* \CR10 */
                }
                Case (0x0B)
                {
                    Return (CR11) /* \CR11 */
                }
                Case (0x0C)
                {
                    Return (CR12) /* \CR12 */
                }
                Case (0x0D)
                {
                    Return (CR13) /* \CR13 */
                }
                Case (0x0E)
                {
                    Return (CR14) /* \CR14 */
                }
                Case (0x0F)
                {
                    Return (CR15) /* \CR15 */
                }
                Default
                {
                    Return (0xFF)
                }

            }
        }

        Method (TCBS, 0, NotSerialized)
        {
            Return (TCOB) /* \TCOB */
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1, 
            Offset (0x6C), 
                ,   19, 
            CPWS,   1, 
            Offset (0x7C), 
                ,   19, 
            CPWE,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IWB0,   32, 
            IWB1,   32, 
            IWB2,   32, 
            IWB3,   32, 
            IRB0,   32, 
            IRB1,   32, 
            IRB2,   32, 
            IRB3,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            Offset (0x1800), 
            ACWA,   32, 
            DCWA,   32, 
            ACET,   32, 
            DCET,   32, 
            Offset (0x18E8), 
                ,   31, 
            CECE,   1, 
            Offset (0x1B0C), 
                ,   2, 
            ISAT,   1, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1BD0), 
                ,   31, 
            CPPM,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }

        Method (PSOC, 1, Serialized)
        {
            If (PSON)
            {
                If (Arg0)
                {
                    CECE = One
                }
                Else
                {
                    CECE = Zero
                }
            }
        }

        Method (PSOS, 0, NotSerialized)
        {
            If (CECE)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CFAE, 1, NotSerialized)
        {
            If (DerefOf (Arg0 [Zero]))
            {
                ADBG ("CPPM Forced Alignment Disable")
                CPPM = Zero
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
            Else
            {
                ADBG ("CPPM Forced Alignment Enable")
                CPPM = One
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Method (IMPS, 0, NotSerialized)
        {
            If (((PCHS == PCHH) || (PCHS == 0x04)))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
    }

    If ((GBES != Zero))
    {
        Scope (_SB.PC00)
        {
            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }

                OperationRegion (LANR, PCI_Config, Zero, 0x0100)
                Field (LANR, ByteAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0xCC), 
                    Offset (0xCD), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (GPEH, 0, NotSerialized)
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If ((PMES == One))
                    {
                        Notify (GLAN, 0x02) // Device Wake
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XHCI)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0x74), 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local0 [Zero] = 0x6D
                If ((USWE == One))
                {
                    Local0 [One] = 0x03
                }

                Return (Local0)
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (XHCI, 0x02) // Device Wake
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PC00.XHCI.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (USRA, 0, Serialized)
            {
                If ((PCHS == PCHH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If (((PCHS == PCHH) || (PCHS == 0x04)))
                {
                    Return (0x11)
                }
                ElseIf ((PCHS == PCHL))
                {
                    Return (0x0D)
                }
                ElseIf ((PCHS == PCHN))
                {
                    Return (0x09)
                }

                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("XHCI D0")
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("XHCI D3")
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS3X))
                {
                    PS3X ()
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("XHCI RHUB PS0")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS0X))
                    {
                        ADBG ("XHCI CSD0")
                        CSD0 (0x16)
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("XHCI RHUB PS2")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS2X))
                    {
                        PS2X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("XHCI RHUB PS3")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS3X))
                    {
                        PS3X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x05))
                    }
                }
            }
        }
    }

    If (((PCHS == PCHL) || (PCHS == PCHH)))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            Device (HS09)
            {
                Name (_ADR, 0x09)  // _ADR: Address
            }

            Device (HS10)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
            }

            Device (HS11)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
            }

            Device (USR1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + Zero))
                }
            }

            Device (USR2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + One))
                }
            }
        }
    }

    If ((PCHS == PCHH))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            Device (HS13)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x09))
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                ADBG ("XDCI DSM")
                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                ADBG ("PMU D0")
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If ((U3CP != Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                ADBG ("PMU D3")
                                If ((U2CP != Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If ((U3CP != Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03))
                                {
                                    ADBG ("U2 not in D3")
                                }

                                If ((U3CP != 0x03))
                                {
                                    ADBG ("U3 not in D3")
                                }

                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                ADBG ("XDCI Fn0")
                                Return (Buffer (0x02)
                                {
                                     0xB3, 0x03                                       // ..
                                })
                            }
                            Case (One)
                            {
                                ADBG ("XDCI Fn1")
                                Return (One)
                            }
                            Case (0x04)
                            {
                                ADBG ("XDCI Fn4")
                                Local1 = DerefOf (Arg3 [Zero])
                                ADBG (Local1)
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                ADBG ("XDCI Fn5")
                                If (CondRefOf (\_SB.PC00.LPCB.H_EC.XDAT))
                                {
                                    If ((^^LPCB.H_EC.XDAT () == One))
                                    {
                                        ADBG ("USB Attach")
                                        Notify (XDCI, 0x80) // Status Change
                                    }
                                    Else
                                    {
                                        ADBG ("USB Detach")
                                        Notify (XDCI, 0x81) // Information Change
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                ADBG ("XDCI Fn7")
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS /* \_SB_.PC00.XDCI._DSM.P2PS */
                                Return (Local0)
                            }
                            Case (0x08)
                            {
                                ADBG ("XDCI Fn8")
                                Return (One)
                            }
                            Case (0x09)
                            {
                                ADBG ("XDCI Fn9")
                                OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                Field (XGCT, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0xC110), 
                                    GCTL,   32
                                }

                                Local1 = (PPDS & 0xFFF80000)
                                Local1 >>= 0x13
                                ADBG (Concatenate ("PCH XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                Return (Local1)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_DDN, "ICL PCH XDCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL PCH XDCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (XDCI, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (HDAS, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                S023 (Zero, One)
                If (CondRefOf (\_SB.PC00.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                S023 (Zero, Zero)
                If (CondRefOf (\_SB.PC00.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y21, AddressRangeACPI, TypeStatic)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y21._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y21._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y21._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "nhlt-version", 
                        "1.8-0"
                    }
                }
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x4F                                             // O
                            })
                        }
                        Case (One)
                        {
                            Return (NBUF) /* \_SB_.PC00.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            If (CondRefOf (\_SB.PC00.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            Switch (ToInteger (XTAL))
                            {
                                Case (Zero)
                                {
                                    Return (0x016E3600)
                                }
                                Case (One)
                                {
                                    Return (0x0249F000)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (HDAS)
        {
            Device (SNDW)
            {
                Name (_ADR, 0x40000000)  // _ADR: Address
                Name (_CID, Package (0x02)  // _CID: Compatible ID
                {
                    "PRP00001", 
                    "PNP0A05" /* Generic Container Device */
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }

                Method (QCFG, 3, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                         = Arg1
                    DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                         = Arg2
                }

                Method (XCFG, 2, NotSerialized)
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x016E3600
                        Local1 = 0x005B8D80
                        Local2 = 0x7D
                        Local3 = 0x02
                    }
                    ElseIf ((Arg1 == One))
                    {
                        Local0 = 0x0249F000
                        Local1 = 0x00493E00
                        Local2 = 0x32
                        Local3 = 0x04
                    }

                    DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                         = Local0
                    DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                        ) [One]) [Zero] = Local1
                    DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                         = Local2
                    DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                         = Local3
                }

                Method (DCFG, 3, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                         = Arg1
                    DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                         = Arg2
                }

                Method (SDWU, 1, NotSerialized)
                {
                    DerefOf (DerefOf (_DSD [One]) [One]) [One]
                         = Arg0
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SDWU (SWMC)
                    QCFG (LNK0, SWQ0, ACS0)
                    QCFG (LNK1, SWQ1, ACS1)
                    QCFG (LNK2, SWQ2, ACS2)
                    QCFG (LNK3, SWQ3, ACS3)
                    XCFG (LNK0, XTAL)
                    XCFG (LNK1, XTAL)
                    XCFG (LNK2, XTAL)
                    XCFG (LNK3, XTAL)
                    DCFG (LNK0, DAI0, DOD0)
                    DCFG (LNK1, DAI1, DOD1)
                    DCFG (LNK2, DAI2, DOD2)
                    DCFG (LNK3, DAI3, DOD3)
                }

                Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-sw-interface-revision", 
                            0x00010000
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-master-count", 
                            0x04
                        }
                    }, 

                    ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-link-0-subproperties", 
                            "LNK0"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-1-subproperties", 
                            "LNK1"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-2-subproperties", 
                            "LNK2"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-3-subproperties", 
                            "LNK3"
                        }
                    }
                })
                Name (LNK0, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK1, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK2, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK3, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
            }
        }

        If ((UAOE != Zero))
        {
            Scope (HDAS)
            {
                Device (UAOL)
                {
                    Name (_ADR, 0x50000000)  // _ADR: Address
                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        "PRP00001", 
                        "PNP0A05" /* Generic Container Device */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("UAOL _DSM")
                        If ((Arg0 == ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    Return (CFAE (Arg3))
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "uaol-ctrl-count", 
                                0x02
                            }
                        }, 

                        ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "uaol-descriptor-0", 
                                "UAO0"
                            }, 

                            Package (0x02)
                            {
                                "uaol-descriptor-1", 
                                "UAO1"
                            }
                        }
                    })
                    Name (UAO0, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x03)
                        {
                            Package (0x02)
                            {
                                "uaol-instance-number", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "bdf-routing-enabled", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "peer-integrated-controller-identifier", 
                                0x98ED
                            }
                        }
                    })
                    Name (UAO1, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x03)
                        {
                            Package (0x02)
                            {
                                "uaol-instance-number", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "bdf-routing-enabled", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "peer-integrated-controller-identifier", 
                                0xABCD
                            }
                        }
                    })
                }
            }
        }

        Scope (HDAS)
        {
            Device (IDA)
            {
                Name (_ADR, 0x10000000)  // _ADR: Address
            }
        }

        Device (RP01)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA1 != Zero))
                {
                    Return (RPA1) /* \RPA1 */
                }
                Else
                {
                    Return (0x001C0000)
                }
            }

            Name (SLOT, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP01._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP01.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP01.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP02)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA2 != Zero))
                {
                    Return (RPA2) /* \RPA2 */
                }
                Else
                {
                    Return (0x001C0001)
                }
            }

            Name (SLOT, 0x02)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP02._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP02.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP02.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP03)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA3 != Zero))
                {
                    Return (RPA3) /* \RPA3 */
                }
                Else
                {
                    Return (0x001C0002)
                }
            }

            Name (SLOT, 0x03)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP03._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP03.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP03.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP04)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA4 != Zero))
                {
                    Return (RPA4) /* \RPA4 */
                }
                Else
                {
                    Return (0x001C0003)
                }
            }

            Name (SLOT, 0x04)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP04._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP04.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP04.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP05)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA5 != Zero))
                {
                    Return (RPA5) /* \RPA5 */
                }
                Else
                {
                    Return (0x001C0004)
                }
            }

            Name (SLOT, 0x05)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP05._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP05.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP05.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP06)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA6 != Zero))
                {
                    Return (RPA6) /* \RPA6 */
                }
                Else
                {
                    Return (0x001C0005)
                }
            }

            Name (SLOT, 0x06)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP06._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP06.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP06.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP07)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA7 != Zero))
                {
                    Return (RPA7) /* \RPA7 */
                }
                Else
                {
                    Return (0x001C0006)
                }
            }

            Name (SLOT, 0x07)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP07._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP07.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP07.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP08)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA8 != Zero))
                {
                    Return (RPA8) /* \RPA8 */
                }
                Else
                {
                    Return (0x001C0007)
                }
            }

            Name (SLOT, 0x08)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP08._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP08.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP08.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP09)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA9 != Zero))
                {
                    Return (RPA9) /* \RPA9 */
                }
                Else
                {
                    Return (0x001D0000)
                }
            }

            Name (SLOT, 0x09)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP09._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP09.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP09.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP10)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAA != Zero))
                {
                    Return (RPAA) /* \RPAA */
                }
                Else
                {
                    Return (0x001D0001)
                }
            }

            Name (SLOT, 0x0A)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP10._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP10.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP10.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP11)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAB != Zero))
                {
                    Return (RPAB) /* \RPAB */
                }
                Else
                {
                    Return (0x001D0002)
                }
            }

            Name (SLOT, 0x0B)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP11._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP11.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP11.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP12)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAC != Zero))
                {
                    Return (RPAC) /* \RPAC */
                }
                Else
                {
                    Return (0x001D0003)
                }
            }

            Name (SLOT, 0x0C)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP12._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP12.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP12.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP13)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAD != Zero))
                {
                    Return (RPAD) /* \RPAD */
                }
                Else
                {
                    Return (0x001D0004)
                }
            }

            Name (SLOT, 0x0D)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRD /* \LTRD */
                LMSL = PMLD /* \PMLD */
                LNSL = PNLD /* \PNLD */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP13._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP13.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP13.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP14)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAE != Zero))
                {
                    Return (RPAE) /* \RPAE */
                }
                Else
                {
                    Return (0x001D0005)
                }
            }

            Name (SLOT, 0x0E)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRE /* \LTRE */
                LMSL = PMLE /* \PMLE */
                LNSL = PNLE /* \PNLE */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP14._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP14.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP14.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP15)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAF != Zero))
                {
                    Return (RPAF) /* \RPAF */
                }
                Else
                {
                    Return (0x001D0006)
                }
            }

            Name (SLOT, 0x0F)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRF /* \LTRF */
                LMSL = PMLF /* \PMLF */
                LNSL = PNLF /* \PNLF */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP15._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP15.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP15.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP16)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAG != Zero))
                {
                    Return (RPAG) /* \RPAG */
                }
                Else
                {
                    Return (0x001D0007)
                }
            }

            Name (SLOT, 0x10)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRG /* \LTRG */
                LMSL = PMLG /* \PMLG */
                LNSL = PNLG /* \PNLG */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP16._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP16.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP16.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP17)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAH != Zero))
                {
                    Return (RPAH) /* \RPAH */
                }
                Else
                {
                    Return (0x001B0000)
                }
            }

            Name (SLOT, 0x11)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRH /* \LTRH */
                LMSL = PMLH /* \PMLH */
                LNSL = PNLH /* \PNLH */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP17._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP17.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP17.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP18)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAI != Zero))
                {
                    Return (RPAI) /* \RPAI */
                }
                Else
                {
                    Return (0x001B0001)
                }
            }

            Name (SLOT, 0x12)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRI /* \LTRI */
                LMSL = PMLI /* \PMLI */
                LNSL = PNLI /* \PNLI */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP18._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP18.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP18.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP19)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAJ != Zero))
                {
                    Return (RPAJ) /* \RPAJ */
                }
                Else
                {
                    Return (0x001B0002)
                }
            }

            Name (SLOT, 0x13)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRJ /* \LTRJ */
                LMSL = PMLJ /* \PMLJ */
                LNSL = PNLJ /* \PNLJ */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP19._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP19.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP19.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP20)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAK != Zero))
                {
                    Return (RPAK) /* \RPAK */
                }
                Else
                {
                    Return (0x001B0003)
                }
            }

            Name (SLOT, 0x14)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRK /* \LTRK */
                LMSL = PMLK /* \_SB_.PC00.PMLK */
                LNSL = PNLK /* \PNLK */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP20._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP20.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP20.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP21)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAL != Zero))
                {
                    Return (RPAL) /* \RPAL */
                }
                Else
                {
                    Return (0x001B0004)
                }
            }

            Name (SLOT, 0x15)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRL /* \LTRL */
                LMSL = PMLL /* \PMLL */
                LNSL = PNLL /* \PNLL */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP21._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP21.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP21.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP22)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAM != Zero))
                {
                    Return (RPAM) /* \RPAM */
                }
                Else
                {
                    Return (0x001B0005)
                }
            }

            Name (SLOT, 0x16)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRM /* \LTRM */
                LMSL = PMLM /* \PMLM */
                LNSL = PNLM /* \PNLM */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP22._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP22.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP22.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP23)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAN != Zero))
                {
                    Return (RPAN) /* \RPAN */
                }
                Else
                {
                    Return (0x001B0006)
                }
            }

            Name (SLOT, 0x17)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRN /* \LTRN */
                LMSL = PMLN /* \PMLN */
                LNSL = PNLN /* \PNLN */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP23._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP23.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP23.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP24)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAO != Zero))
                {
                    Return (RPAO) /* \RPAO */
                }
                Else
                {
                    Return (0x001B0007)
                }
            }

            Name (SLOT, 0x18)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRO /* \LTRO */
                LMSL = PMLO /* \PMLO */
                LNSL = PNLO /* \PNLO */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP24._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP24.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP24.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                {
                    Return (D3AS (Arg1, Arg2, Arg3))
                }

                If ((CondRefOf (SATC) && CondRefOf (SATD)))
                {
                    If (SATC (Arg0))
                    {
                        Return (SATD (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((PCHS == PCHL))
                {
                    If (!SCFD)
                    {
                        CSD0 (0x14)
                    }
                }

                ISAT = Zero
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ISAT = One
                If ((PCHS == PCHL))
                {
                    CSD3 (0x14)
                }
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PC00.SAT0.PRT0.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PC00.SAT0.PRT0.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PC00.SAT0.PRT1.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PC00.SAT0.PRT1.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PC00.SAT0.PRT2.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PC00.SAT0.PRT2.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PC00.SAT0.PRT3.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PC00.SAT0.PRT3.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PC00.SAT0.PRT4.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PC00.SAT0.PRT4.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PC00.SAT0.PRT5.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PC00.SAT0.PRT5.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x20))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT1 /* \NIT1 */
                    NPMV = NPM1 /* \NPM1 */
                    NPCV = NPC1 /* \NPC1 */
                    NL1V = NL11 /* \NL11 */
                    ND2V = ND21 /* \ND21 */
                    ND1V = ND11 /* \ND11 */
                    NLRV = NLR1 /* \NLR1 */
                    NLDV = NLD1 /* \NLD1 */
                    NEAV = NEA1 /* \NEA1 */
                    NEBV = NEB1 /* \NEB1 */
                    NECV = NEC1 /* \NEC1 */
                    NRAV = NRA1 /* \NRA1 */
                    NMBV = NMB1 /* \NMB1 */
                    NMVV = NMV1 /* \NMV1 */
                    NPBV = NPB1 /* \NPB1 */
                    NPVV = NPV1 /* \NPV1 */
                    NRPN = NRP1 /* \NRP1 */
                    NCRN = Zero
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ID3C == Zero))
                    {
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((ID3H == Zero))
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        }
                    }
                    Else
                    {
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT2 /* \NIT2 */
                    NPMV = NPM2 /* \NPM2 */
                    NPCV = NPC2 /* \NPC2 */
                    NL1V = NL12 /* \NL12 */
                    ND2V = ND22 /* \ND22 */
                    ND1V = ND12 /* \ND12 */
                    NLRV = NLR2 /* \NLR2 */
                    NLDV = NLD2 /* \NLD2 */
                    NEAV = NEA2 /* \NEA2 */
                    NEBV = NEB2 /* \NEB2 */
                    NECV = NEC2 /* \NEC2 */
                    NRAV = NRA2 /* \NRA2 */
                    NMBV = NMB2 /* \NMB2 */
                    NMVV = NMV2 /* \NMV2 */
                    NPBV = NPB2 /* \NPB2 */
                    NPVV = NPV2 /* \NPV2 */
                    NRPN = NRP2 /* \NRP2 */
                    NCRN = One
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ID3C == Zero))
                    {
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((ID3H == Zero))
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        }
                    }
                    Else
                    {
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT3 /* \NIT3 */
                    NPMV = NPM3 /* \NPM3 */
                    NPCV = NPC3 /* \NPC3 */
                    NL1V = NL13 /* \NL13 */
                    ND2V = ND23 /* \ND23 */
                    ND1V = ND13 /* \ND13 */
                    NLRV = NLR3 /* \NLR3 */
                    NLDV = NLD3 /* \NLD3 */
                    NEAV = NEA3 /* \NEA3 */
                    NEBV = NEB3 /* \NEB3 */
                    NECV = NEC3 /* \NEC3 */
                    NRAV = NRA3 /* \NRA3 */
                    NMBV = NMB3 /* \NMB3 */
                    NMVV = NMV3 /* \NMV3 */
                    NPBV = NPB3 /* \NPB3 */
                    NPVV = NPV3 /* \NPV3 */
                    NRPN = NRP3 /* \NRP3 */
                    NCRN = 0x02
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ID3C == Zero))
                    {
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((ID3H == Zero))
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        }
                    }
                    Else
                    {
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (Zero)
                    {
                        Return (RPCD) /* \_SB_.PC00.SAT0.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PC00.SAT0.RDCA.CADR */
                    }
                    Case (One)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PC00.SAT0.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PC00.SAT0.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (D3CS, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PC00.RP05.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PC00.RP07.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PC00.RP09.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.RP11.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PC00.RP13.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PC00.RP15.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PC00.RP17.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PC00.RP19.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PC00.RP21.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PC00.RP23.POFF))
                        {
                            Return (One)
                        }
                    }

                }

                Return (Zero)
            }

            Method (RSON, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PC00.RP05.PON))
                        {
                            ^^RP05.PON ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PC00.RP07.PON))
                        {
                            ^^RP07.PON ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PC00.RP09.PON))
                        {
                            ^^RP09.PON ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.RP11.PON))
                        {
                            ^^RP11.PON ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PC00.RP13.PON))
                        {
                            ^^RP13.PON ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PC00.RP15.PON))
                        {
                            ^^RP15.PON ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PC00.RP17.PON))
                        {
                            ^^RP17.PON ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PC00.RP19.PON))
                        {
                            ^^RP19.PON ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PC00.RP21.PON))
                        {
                            ^^RP21.PON ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PC00.RP23.PON))
                        {
                            ^^RP23.PON ()
                        }
                    }

                }
            }

            Method (RSOF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PC00.RP05.POFF))
                        {
                            ^^RP05.POFF ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PC00.RP07.POFF))
                        {
                            ^^RP07.POFF ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PC00.RP09.POFF))
                        {
                            ^^RP09.POFF ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.RP11.POFF))
                        {
                            ^^RP11.POFF ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PC00.RP13.POFF))
                        {
                            ^^RP13.POFF ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PC00.RP15.POFF))
                        {
                            ^^RP15.POFF ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PC00.RP17.POFF))
                        {
                            ^^RP17.POFF ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PC00.RP19.POFF))
                        {
                            ^^RP19.POFF ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PC00.RP21.POFF))
                        {
                            ^^RP21.POFF ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PC00.RP23.POFF))
                        {
                            ^^RP23.POFF ()
                        }
                    }

                }
            }

            Name (VL0M, Zero)
            Name (VL1M, Zero)
            Name (VL2M, Zero)
            Name (VR3A, One)
            Method (IRM, 1, NotSerialized)
            {
                If ((VL0M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL1M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL2M & Arg0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PD3C, 1, NotSerialized)
            {
                Return (!(VR3A || !IRM (Arg0)))
            }

            Scope (PRT0)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (One))
                }
            }

            Scope (PRT1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x02))
                }
            }

            Scope (PRT2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x04))
                }
            }

            Scope (PRT3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x08))
                }
            }

            Scope (PRT4)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x10))
                }
            }

            Scope (PRT5)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x20))
                }
            }

            Scope (NVM1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0100))
                }
            }

            Scope (NVM2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0200))
                }
            }

            Scope (NVM3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (Zero)
                }
            }

            Method (RSTD, 5, Serialized)
            {
                If ((Arg0 == ToUUID ("e03e3431-e510-4fa2-abc0-2d7e901245fe") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (RBUF, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (RBUF, Zero, SFUN)
                            SFUN = 0x3F
                            Return (RBUF) /* \_SB_.PC00.SAT0.RSTD.RBUF */
                        }
                        Case (One)
                        {
                            Arg4 = DerefOf (Arg3 [Zero])
                            Local0 = DerefOf (Arg3 [Zero])
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x02)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            CPON (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x03)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            CPOF (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x04)
                        {
                            Name (GETM, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (GETM, Zero, GMSK)
                            GMSK = Arg4
                            Return (GETM) /* \_SB_.PC00.SAT0.RSTD.GETM */
                        }
                        Case (0x05)
                        {
                            VR3A = DerefOf (Arg3 [Zero])
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                0x02
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (D3AS, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        If ((PSON == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (CPON, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PC00.SAT0.PRT0.SPON) && (Arg0 & One)))
                {
                    ^PRT0.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT1.SPON) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT2.SPON) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT3.SPON) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT4.SPON) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT5.SPON) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.RPON) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.NVD0) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD0 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.RPON) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.NVD0) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD0 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.RPON) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.NVD0) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD0 ()
                }
            }

            Method (CPOF, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF) && (Arg0 & One)))
                {
                    ^PRT0.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.NVD3) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD3 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.RPOF) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.NVD3) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD3 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.RPOF) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.NVD3) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD3 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.RPOF) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPOF ()
                }
            }

            Device (VOL0)
            {
                Name (_ADR, 0x0080FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V0PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V0PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL0M)))
                }

                PowerResource (V0PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If (VR3A)
                        {
                            CPON (VL0M)
                            _STA = One
                        }
                        Else
                        {
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If (VR3A)
                        {
                            CPOF (VL0M)
                            _STA = Zero
                        }
                        Else
                        {
                        }
                    }
                }
            }

            Device (VOL1)
            {
                Name (_ADR, 0x0081FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V1PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V1PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL1M)))
                }

                PowerResource (V1PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If (VR3A)
                        {
                            CPON (VL1M)
                            _STA = One
                        }
                        Else
                        {
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If (VR3A)
                        {
                            CPOF (VL1M)
                            _STA = Zero
                        }
                        Else
                        {
                        }
                    }
                }
            }

            Device (VOL2)
            {
                Name (_ADR, 0x0082FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V2PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V2PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL2M)))
                }

                PowerResource (V2PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If (VR3A)
                        {
                            CPON (VL2M)
                            _STA = One
                        }
                        Else
                        {
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If (VR3A)
                        {
                            CPOF (VL2M)
                            _STA = Zero
                        }
                        Else
                        {
                        }
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((GPHD == One))
                {
                    Return ("PNP0C02")
                }

                If ((PCHS == PCHH))
                {
                    Return ("INT34C6")
                }
                Else
                {
                    Return ("INT34C5")
                }
            }

            Name (LINK, "\\_SB.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((PCHS == PCHH))
                {
                    Name (RBFH, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y22)
                        {
                            0x0000000E,
                        }
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y23)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y24)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y25)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y26)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y27)
                    })
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y22._INT, INTH)  // _INT: Interrupts
                    INTH = SGIR /* \SGIR */
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y23._BAS, CMH0)  // _BAS: Base Address
                    CMH0 = (SBRG + 0x006E0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y24._BAS, CMH1)  // _BAS: Base Address
                    CMH1 = (SBRG + 0x006D0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y25._BAS, CMH3)  // _BAS: Base Address
                    CMH3 = (SBRG + 0x006B0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y26._BAS, CMH4)  // _BAS: Base Address
                    CMH4 = (SBRG + 0x006A0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y27._BAS, CMH5)  // _BAS: Base Address
                    CMH5 = (SBRG + 0x00690000)
                    Return (RBFH) /* \_SB_.GPI0._CRS.RBFH */
                }
                Else
                {
                    Name (RBFL, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y28)
                        {
                            0x0000000E,
                        }
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y29)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y2A)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y2B)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y2C)
                    })
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y28._INT, INTL)  // _INT: Interrupts
                    INTL = SGIR /* \SGIR */
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y29._BAS, CML0)  // _BAS: Base Address
                    CML0 = (SBRG + 0x006E0000)
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y2A._BAS, CML1)  // _BAS: Base Address
                    CML1 = (SBRG + 0x006D0000)
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y2B._BAS, CML4)  // _BAS: Base Address
                    CML4 = (SBRG + 0x006A0000)
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y2C._BAS, CML5)  // _BAS: Base Address
                    CML5 = (SBRG + 0x00690000)
                    Return (RBFL) /* \_SB_.GPI0._CRS.RBFL */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GPHD == One))
                {
                    Return (0x0B)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (SOD3, 3, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (GPCB () + Arg0), 0x88)
            If (Arg1)
            {
                Field (ICB1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                PMEC = 0x03
                Local3 = PMEC /* \_SB_.PC00.SOD3.PMEC */
            }

            If ((Arg1 && Arg2))
            {
                Field (ICB1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                BAR0 = Zero
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (SPIH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2D)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2E)
            })
            CreateDWordField (BUF0, \_SB.PC00.SPIH._Y2D._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.SPIH._Y2E._BAS, ADR1)  // _BAS: Base Address
            ADR0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR1 = (BAR1 & 0xFFFFFFFFFFFFF000)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (SPI0)
        {
            If ((SM00 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC00))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM00 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM00 == One) || (SM00 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0002)
                }
            }
        }

        Device (SPI1)
        {
            If ((SM01 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC01))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM01 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM01 == One) || (SM01 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0003)
                }
            }
        }

        Device (SPI2)
        {
            If ((SM02 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC02))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM02 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM02 == One) || (SM02 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00120006)
                }
            }
        }

        Device (SPI3)
        {
            If ((SM03 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC03))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM03 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM03 == One) || (SM03 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130000)
                }
            }
        }

        Device (SPI4)
        {
            If ((SM04 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC04))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM04 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM04 == One) || (SM04 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130001)
                }
            }
        }

        Device (SPI5)
        {
            If ((SM05 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC05))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM05 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM05 == One) || (SM05 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130002)
                }
            }
        }

        Device (SPI6)
        {
            If ((SM06 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC06))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM06 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM06 == One) || (SM06 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130003)
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (I2CH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2F)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y30)
            })
            CreateDWordField (BUF0, \_SB.PC00.I2CH._Y2F._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.I2CH._Y30._BAS, ADR1)  // _BAS: Base Address
            ADR0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR1 = (BAR1 & 0xFFFFFFFFFFFFF000)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (I2C0)
        {
            If ((IM00 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC00))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM00 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM00 == One) || (IM00 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150000)
                }
            }
        }

        Device (I2C1)
        {
            If ((IM01 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC01))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM01 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM01 == One) || (IM01 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150001)
                }
            }
        }

        Device (I2C2)
        {
            If ((IM02 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC02))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM02 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM02 == One) || (IM02 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150002)
                }
            }
        }

        Device (I2C3)
        {
            If ((IM03 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC03))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM03 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM03 == One) || (IM03 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150003)
                }
            }
        }

        Device (I2C4)
        {
            If ((IM04 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC04))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM04 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM04 == One) || (IM04 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190000)
                }
            }
        }

        Device (I2C5)
        {
            If ((IM05 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC05))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM05 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM05 == One) || (IM05 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190001)
                }
            }
        }

        Device (I2C6)
        {
            If ((IM06 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC06))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM06 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM06 == One) || (IM06 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100000)
                }
            }
        }

        Device (I2C7)
        {
            If ((IM07 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC07))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM07 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC07, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM07 == One) || (IM07 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100001)
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (UDSM, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (UDMA, 2, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Buffer (0x08)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    })
                }
                Case (One)
                {
                    Return (ToInteger (Arg1))
                }

            }

            Return (Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
        }

        Device (UA00)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD00))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC00, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA01)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD01))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC01, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA02)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD02))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00190002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC02, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA03)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD03))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC03, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA04)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD04))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC04, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA05)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD05))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC05, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA06)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD06))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110003)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC06, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        Device (URSC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (UARB, 2, Serialized)
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                {
                    OperationRegion (UACF, SystemMemory, Arg1, 0x20)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64, 
                        BAR1,   64
                    }

                    Name (BUF1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000FF8,         // Address Length
                            _Y31)
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y32)
                    })
                    CreateDWordField (BUF1, \_SB.URSC.UARB._Y31._BAS, ADR1)  // _BAS: Base Address
                    CreateDWordField (BUF2, \_SB.URSC.UARB._Y32._BAS, ADR2)  // _BAS: Base Address
                    Local1 = (BAR0 & 0xFFFFFFFFFFFFF000)
                    ADR1 = (Local1 + 0x08)
                    ADR2 = (BAR1 & 0xFFFFFFFFFFFFF000)
                    ConcatenateResTemplate (BUF1, BUF2, Local0)
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, UARB (UM00, UC00), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, UARB (UM01, UC01), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, UARB (UM02, UC02), Local1)
                Local0 = Local1
                Return (Local0)
            }
        }

        Method (UARH, 2, Serialized)
        {
            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000008,         // Address Length
                    _Y33)
            })
            Name (IBUF, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y34)
                {
                    0x00000014,
                }
            })
            CreateDWordField (BUF0, \_SB.UARH._Y33._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (IBUF, \_SB.UARH._Y34._INT, IRQN)  // _INT: Interrupts
            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR0 = Local0
            IRQN = Arg1
            ConcatenateResTemplate (BUF0, IBUF, Local1)
            Return (Local1)
        }

        Method (UAPG, 3, Serialized)
        {
            If ((Arg1 != 0x02))
            {
                Return (Arg1)
            }

            OperationRegion (UACF, SystemMemory, Arg2, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x10)
            Field (UAB0, ByteAcc, Lock, Preserve)
            {
                DLL,    8, 
                DLH,    8, 
                FCR,    8, 
                LCR,    8
            }

            Local0 = LCR /* \_SB_.UAPG.LCR_ */
            If ((Local0 && 0x7F))
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (UHID, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                Return (0x0105D041)
            }

            Return (0x020CD041)
        }

        Method (UPS3, 2, Serialized)
        {
            If ((Arg0 == One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                PPRR = Zero
                PMEC = 0x03
                Local0 = PMEC /* \_SB_.UPS3.PMEC */
            }
        }

        Method (UPS0, 2, Serialized)
        {
            If ((Arg0 == One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                PMEC = Zero
                Local0 = PMEC /* \_SB_.UPS0.PMEC */
                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                PPRR = 0x07
            }
        }

        Method (UPSC, 1, Serialized)
        {
            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (UACF, ByteAcc, NoLock, Preserve)
            {
                PMEC,   8
            }

            Return ((PMEC & 0x03))
        }

        If (((UM00 == 0x02) || (UM00 == 0x03)))
        {
            Device (UAH0)
            {
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM00))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC00, UI00))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM00 == 0x03))
                    {
                        If ((UP00 == 0x02))
                        {
                            UP00 = UAPG (UM00, UP00, UC00)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM00 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC00))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP00, UC00)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP00, UC00)
                    }
                }
            }
        }

        If (((UM01 == 0x02) || (UM01 == 0x03)))
        {
            Device (UAH1)
            {
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM01))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC01, UI01))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM01 == 0x03))
                    {
                        If ((UP01 == 0x02))
                        {
                            UP01 = UAPG (UM01, UP01, UC01)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM01 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC01))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP01, UC01)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP01, UC01)
                    }
                }
            }
        }

        If (((UM02 == 0x02) || (UM02 == 0x03)))
        {
            Device (UAH2)
            {
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM02))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC02, UI02))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM02 == 0x03))
                    {
                        If ((UP02 == 0x02))
                        {
                            UP02 = UAPG (UM02, UP02, UC02)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM02 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC02))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP02, UC02)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP02, UC02)
                    }
                }
            }
        }

        If (((UM03 == 0x02) || (UM03 == 0x03)))
        {
            Device (UAH3)
            {
                Name (_DDN, "SerialIoUART3")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART3")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM03))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC03, UI03))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM03 == 0x03))
                    {
                        If ((UP03 == 0x02))
                        {
                            UP03 = UAPG (UM03, UP03, UC03)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM03 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC03)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP03, UC03)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP03, UC03)
                    }
                }
            }
        }

        If (((UM04 == 0x02) || (UM04 == 0x03)))
        {
            Device (UAH4)
            {
                Name (_DDN, "SerialIoUART4")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART4")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM04))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC04, UI04))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM04 == 0x03))
                    {
                        If ((UP04 == 0x02))
                        {
                            UP04 = UAPG (UM04, UP04, UC04)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM04 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC04)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP04, UC04)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP04, UC04)
                    }
                }
            }
        }

        If (((UM05 == 0x02) || (UM05 == 0x03)))
        {
            Device (UAH5)
            {
                Name (_DDN, "SerialIoUART5")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART5")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM05))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC05, UI05))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM05 == 0x03))
                    {
                        If ((UP05 == 0x02))
                        {
                            UP05 = UAPG (UM05, UP05, UC05)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM05 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC05)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP05, UC05)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP05, UC05)
                    }
                }
            }
        }

        If (((UM06 == 0x02) || (UM06 == 0x03)))
        {
            Device (UAH6)
            {
                Name (_DDN, "SerialIoUART6")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART6")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM06))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC06, UI06))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM06 == 0x03))
                    {
                        If ((UP06 == 0x02))
                        {
                            UP06 = UAPG (UM06, UP06, UC06)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM06 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC06)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP06, UC06)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP06, UC06)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.I2C1)
    {
        Device (TPL0)
        {
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                SGOV (0x09080013, One)
                Sleep (0x05)
                SGOV (0x090B000F, Ones)
                Sleep (0x64)
                SGRA (0x090B000B, One)
                Sleep (One)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                SGRA (0x090B000B, Zero)
                SGOV (0x090B000F, Zero)
                SGOV (0x09080013, 0xFFFFFFFFFFFFFFFE)
            }
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Device (NFC1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, EisaId ("NXP1002"))  // _HID: Hardware ID
            Name (_CID, "NXP1002")  // _CID: Compatible ID
            Name (_DDN, "NXP NFC")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y35, Exclusive,
                        )
                    GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBUF, \_SB.PC00.I2C0.NFC1._CRS._Y35._ADR, NADR)  // _ADR: Address
                CreateDWordField (SBUF, \_SB.PC00.I2C0.NFC1._CRS._Y35._SPE, NSPD)  // _SPE: Speed
                CreateWordField (SBUF, 0x38, NFCA)
                CreateWordField (SBUF, 0x5B, NFCB)
                CreateWordField (SBUF, 0x7E, NFCC)
                NADR = 0x29
                NSPD = 0x00061A80
                NFCA = GNUM (0x09000016)
                SHPO (0x09000016, One)
                NFCB = GNUM (0x0900000F)
                NFCC = GNUM (0x09000015)
                SHPO (0x0900000F, One)
                SHPO (0x09000015, One)
                Return (SBUF) /* \_SB_.PC00.I2C0.NFC1._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((NFCS == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
            Package (0x05)
            {
                Package (0x02)
                {
                    "idle-latency-tolerance", 
                    0x0BB8
                }, 

                Package (0x02)
                {
                    "SS-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "FM-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "FMP-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "HS-active-latency-tolerance", 
                    0xFFFF
                }
            }
        })
        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y36, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y37)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PC00.I2C0.TPD0._Y36._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PC00.I2C0.TPD0._Y36._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PC00.I2C0.TPD0._Y37._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((TPDM == Zero))
                {
                    SHPO (GPDI, One)
                }

                HID2 = 0x20
                BADR = 0x2C
                SPED = 0x00061A80
            }

            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                Switch (HPID)
                {
                    Case (0x103C00B0)
                    {
                        Return ("ELAN072F")
                    }
                    Case (0x103C00B3)
                    {
                        Return ("ELAN0733")
                    }
                    Case (0x103C00B2)
                    {
                        Return ("ELAN0731")
                    }
                    Case (0x103C00BB)
                    {
                        Return ("ELAN0734")
                    }
                    Case (Package (0x02)
                        {
                            0x103C00B4, 
                            0x103C00BC
                        }

)
                    {
                        If ((GGIV (0x090E0011) == One))
                        {
                            Return ("ELAN0737")
                        }
                        Else
                        {
                            Return ("ELAN0738")
                        }
                    }
                    Case (Package (0x02)
                        {
                            0x103C00B7, 
                            0x103C00BF
                        }

)
                    {
                        If ((GGIV (0x090E0011) == One))
                        {
                            Return ("ELAN0739")
                        }
                        Else
                        {
                            Return ("ELAN073A")
                        }
                    }
                    Case (Package (0x02)
                        {
                            0x103C00B6, 
                            0x103C00BE
                        }

)
                    {
                        If ((GGIV (0x090E0011) == One))
                        {
                            Return ("ELAN073B")
                        }
                        Else
                        {
                            Return ("ELAN073C")
                        }
                    }
                    Default
                    {
                        Return ("ELAN07FF")
                    }

                }
            }

            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PC00.I2C0.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }
    }

    Scope (_SB.PC00)
    {
        If ((PCHS != PCHN))
        {
            Device (ISHD)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (CondRefOf (HIWC))
                    {
                        If (HIWC (Arg0))
                        {
                            If (CondRefOf (HIDW))
                            {
                                Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (THC0)
        {
            Name (_ADR, 0x00100006)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }

        Device (THC1)
        {
            Name (_ADR, 0x00100007)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (HEC3)
        {
            Name (_ADR, 0x00160004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (CNVW)
        {
            Name (_ADR, 0x00140003)  // _ADR: Address
            OperationRegion (CWAR, SystemMemory, (GPCB () + 0x000A3000), 0x0100)
            Field (CWAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                WMSE,   1, 
                WBME,   1, 
                Offset (0x10), 
                WBR0,   64, 
                Offset (0x44), 
                    ,   28, 
                WFLR,   1, 
                Offset (0x48), 
                    ,   15, 
                WIFR,   1, 
                Offset (0xCC), 
                WPMS,   32
            }

            Field (CWAR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (CNVW, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                S023 (0x02, One)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                Local0 = PCRR (PCNV, 0x8100)
                If (((Local0 & 0x7F) == 0x4C))
                {
                    S023 (0x02, Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((WFLR == One))
                    {
                        WBR0 = Zero
                        WPMS = Zero
                        WBME = Zero
                        WMSE = Zero
                        WIFR = One
                    }
                }
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
        }

        Method (CNIP, 0, NotSerialized)
        {
            If ((^CNVW.VDID != 0xFFFFFFFF))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SBTE, 1, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x090A0000
            }
            ElseIf ((PCHS == One))
            {
                Local0 = 0x08080000
            }
            Else
            {
                Return (Zero)
            }

            SGOV (Local0, Arg0)
            S023 (0x03, Arg0)
        }

        Method (GBTE, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x090A0000
            }
            ElseIf ((PCHS == One))
            {
                Local0 = 0x08080000
            }
            Else
            {
                Return (Zero)
            }

            Return (GGOV (Local0))
        }

        Method (AOLX, 0, NotSerialized)
        {
            Name (AODS, Package (0x03)
            {
                Zero, 
                0x12, 
                Zero
            })
            If ((CBTA == One))
            {
                AODS [0x02] = One
            }

            Return (AODS) /* \_SB_.PC00.AOLX.AODS */
        }
    }

    If ((\_SB.PC00.CNIP () & (CBTC == One)))
    {
        If ((PCHS == 0x02))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf ((PCHS == One))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf ((PCHS == 0x03))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS08)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (PTHT)
        {
            Name (_ADR, 0x001F0007)  // _ADR: Address
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PTHM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (PTHR, PCI_Config, Zero, 0x20)
            Field (PTHR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MTBL,   32, 
                MTBH,   32
            }

            Method (THEN, 0, Serialized)
            {
                OperationRegion (RMTB, SystemMemory, ((MTBH << 0x20) + (MTBL & 0xFFF00000)), 0x0100)
                Field (RMTB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xE8), 
                    BTTH,   1
                }

                If ((BTTH == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (PTHH)
        {
            Name (_HID, "INTC1001")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PTHM == 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFE100000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFC800000,         // Address Base
                    0x00800000,         // Address Length
                    )
            })
            OperationRegion (MTBR, SystemMemory, 0xFE100000, 0x0100)
            Field (MTBR, AnyAcc, NoLock, Preserve)
            {
                Offset (0xE8), 
                BHTH,   1
            }

            Method (THEN, 0, Serialized)
            {
                If ((BHTH == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_GPE, 0x6E)  // _GPE: General Purpose Events
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Mutex (ECMX, 0x00)
            Name (ECRG, Zero)
            Name (HSWK, Zero)
            OperationRegion (P3EC, SystemIO, 0x6A, 0x08)
            Field (P3EC, ByteAcc, NoLock, Preserve)
            {
                PM3D,   8, 
                Offset (0x02), 
                Offset (0x03), 
                Offset (0x04), 
                PM3C,   8
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x1D), 
                INDI,   8, 
                Offset (0x20), 
                DMEE,   8, 
                Offset (0xF5), 
                VBPS,   8
            }

            Method (GBNT, 2, Serialized)
            {
                Local0 = (One << Arg1)
                If (((Arg0 & Local0) == Local0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ECRI, 0, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                CRZN = One
                PHTP = 0x63
                Release (ECMX)
                OST = GTOS ()
                PWUP (0x07, 0xFF)
                Local0 = GBAP ()
                ITLB ()
                SBTN (Local0, 0x81)
                PRIT ()
                If (CondRefOf (\_SB.PC00.G40E))
                {
                    G40E (One)
                }
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECRG = Arg1
                    If ((Arg1 == One))
                    {
                        ECRI ()
                    }
                }
            }

            OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
            Field (ECRM, ByteAcc, NoLock, Preserve)
            {
                PMCD,   32, 
                S0FL,   8, 
                SXF0,   8, 
                SXF1,   8, 
                CPWR,   16, 
                CVLT,   16, 
                CCUR,   16, 
                DIDX,   8, 
                CIDX,   8, 
                PMCC,   8, 
                PMEP,   8, 
                Offset (0x22), 
                CRZN,   8, 
                THTA,   8, 
                HYST,   8, 
                CRIT,   8, 
                TEMP,   8, 
                TENA,   8, 
                KBBL,   8, 
                TOAD,   8, 
                PHTP,   8, 
                THEM,   8, 
                TMPO,   8, 
                AFAN,   8, 
                FRDC,   8, 
                FTGC,   8, 
                PLTP,   8, 
                Offset (0x32), 
                DTMP,   8, 
                Offset (0x35), 
                FR2C,   8, 
                FT2C,   8, 
                BCVD,   8, 
                Offset (0x3F), 
                SNMD,   8, 
                ABDI,   8, 
                ABAD,   8, 
                ABIX,   8, 
                ABDA,   8, 
                ABST,   8, 
                PORI,   8, 
                Offset (0x4C), 
                PSSB,   8, 
                Offset (0x4E), 
                SLID,   8, 
                SLDT,   8, 
                Offset (0x5E), 
                PPCM,   8, 
                PPDS,   8, 
                UCHC,   8, 
                UCHS,   8, 
                UCDB,   8, 
                UCCS,   8, 
                UCPN,   8, 
                Offset (0x70), 
                WKTR,   16, 
                S5TR,   16, 
                AS4F,   8, 
                Offset (0x78), 
                    ,   7, 
                BCML,   1, 
                BRIM,   1, 
                CCFG,   1, 
                    ,   1, 
                    ,   1, 
                EXTP,   1, 
                BKDT,   1, 
                BOTP,   1, 
                Offset (0x7B), 
                LMBC,   1, 
                PPUI,   1, 
                Offset (0x80), 
                ESID,   8, 
                    ,   4, 
                SLPT,   4, 
                FNSW,   1, 
                SFNC,   1, 
                ACPI,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                DETF,   1, 
                LIDS,   1, 
                TBLT,   1, 
                    ,   1, 
                LIDN,   1, 
                TBTA,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x84), 
                ADP,    1, 
                ADID,   2, 
                LCTV,   1, 
                BATP,   4, 
                BPU,    1, 
                Offset (0x86), 
                BSEL,   4, 
                Offset (0x87), 
                LB1,    8, 
                LB2,    8, 
                BDC,    16, 
                Offset (0x8C), 
                BSP,    8, 
                BFC,    16, 
                BRTE,   16, 
                BTC,    1, 
                Offset (0x92), 
                BME,    16, 
                BDN,    8, 
                BDV,    16, 
                BCV1,   16, 
                BST,    4, 
                BCLE,   1, 
                Offset (0x9B), 
                BATE,   16, 
                BPR,    16, 
                BCR,    16, 
                BRC,    16, 
                BCC,    16, 
                BPV,    16, 
                BCV2,   16, 
                BCV3,   16, 
                BCV4,   16, 
                BCW,    16, 
                BATF,   16, 
                BCL,    16, 
                MAXC,   16, 
                BCG1,   8, 
                BT1I,   1, 
                BT2I,   1, 
                    ,   2, 
                BATN,   4, 
                BSTS,   16, 
                BCG2,   8, 
                Offset (0xBD), 
                BMO,    8, 
                Offset (0xBF), 
                BRCV,   8, 
                Offset (0xC1), 
                BIF,    8, 
                BRCC,   8, 
                Offset (0xC4), 
                CPSN,   8, 
                SCPS,   8, 
                Offset (0xC7), 
                MXCG,   8, 
                MNCG,   8, 
                BSN,    16, 
                BDAT,   16, 
                BMF,    8, 
                Offset (0xCF), 
                CTLB,   8, 
                Offset (0xD1), 
                BTY,    8, 
                Offset (0xD3), 
                EC17,   16, 
                MFAC,   8, 
                CFAN,   8, 
                    ,   1, 
                ABOE,   1, 
                ABOS,   1, 
                ITPT,   1, 
                Offset (0xD8), 
                    ,   5, 
                TLTP,   1, 
                IOBE,   1, 
                IOBP,   1, 
                OCPR,   8, 
                OCPE,   8, 
                TMP1,   8, 
                TMP2,   8, 
                NABT,   4, 
                BCM,    4, 
                STTI,   8, 
                STTD,   8, 
                CBT,    16, 
                Offset (0xE3), 
                OST,    4, 
                Offset (0xE4), 
                RWTM,   8, 
                TPTE,   1, 
                TBBN,   1, 
                    ,   1, 
                FCDE,   1, 
                    ,   1, 
                TP,     1, 
                Offset (0xE6), 
                SHK,    8, 
                AUDS,   1, 
                SPKR,   1, 
                Offset (0xE8), 
                PPDT,   8, 
                Offset (0xEA), 
                    ,   2, 
                WWP,    1, 
                WLP,    1, 
                    ,   1, 
                WWS3,   1, 
                WLS3,   1, 
                Offset (0xEB), 
                DKST,   1, 
                Offset (0xEC), 
                    ,   4, 
                PTEN,   1, 
                ERWB,   1, 
                    ,   1, 
                Offset (0xED), 
                Offset (0xEF), 
                INCH,   2, 
                IDIS,   2, 
                INAC,   1, 
                Offset (0xF3), 
                COL1,   3, 
                    ,   2, 
                LDCD,   3, 
                LEDS,   2, 
                LEDF,   6, 
                Offset (0xF6), 
                AAPI,   8, 
                ACSE,   8, 
                ACIX,   8, 
                ACPR,   16, 
                Offset (0xFD), 
                Offset (0xFF)
            }

            OperationRegion (SSRM, EmbeddedControl, 0x50, 0x0A)
            Field (SSRM, ByteAcc, NoLock, Preserve)
            {
                FBCM,   8, 
                FBGI,   8, 
                FBAE,   8, 
                FBCB,   8, 
                FBW1,   8, 
                FBW2,   8, 
                Offset (0x07), 
                FBID,   8, 
                FUAE,   8, 
                FRPS,   8
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, Zero)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x02)
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, One)
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x03)
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x04)
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x05)
            }

            Device (HEPD)
            {
                Name (_HID, "HPIC0011")  // _HID: Hardware ID
                Name (HEPP, Zero)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local0 = 0x0F
                    If ((HEPP == Zero))
                    {
                        Local0 = HEPP /* \_SB_.PC00.LPCB.EC0_.HEPD.HEPP */
                    }

                    Return (Local0)
                }

                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }
            }

            Method (HEPN, 1, Serialized)
            {
                ^HEPD.HEPP = Arg0
                Notify (HEPD, One) // Device Check
            }

            Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HEPN (0x0F)
            }

            Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HEPN (Zero)
            }

            Method (HEP4, 2, Serialized)
            {
                ^^^^WMIV.GVWE (0x00020002, Arg0)
                Sleep (Arg1)
                HEPN (Zero)
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HEP4 (0x08, 0x3A98)
            }

            Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HEP4 (0x06, 0x03E8)
            }

            Scope (\)
            {
                OperationRegion (PBST, SystemMemory, 0x23AB1000, 0x00000004)
                Field (PBST, AnyAcc, Lock, Preserve)
                {
                    PBSR,   32
                }

                Method (_PBS, 4, Serialized)
                {
                    PBSR = Arg2
                    If ((Arg2 != Zero))
                    {
                        GSWS (0x90F3)
                    }
                }
            }

            Method (^^^_PBS, 4, Serialized)
            {
                \_PBS (Arg0, Arg1, Arg2, Arg3)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }

            OperationRegion (MAIO, SystemMemory, SMHO, 0xFF)
            Field (MAIO, ByteAcc, NoLock, Preserve)
            {
                Offset (0x0A), 
                    ,   7, 
                CLID,   1, 
                Offset (0x95), 
                PWM0,   8, 
                Offset (0x9D), 
                PWMC,   8
            }

            Method (KFCL, 2, NotSerialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    MFAC = Arg1
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        CFAN = Arg0
                    }
                }

                Release (ECMX)
            }

            Method (KSFS, 1, NotSerialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    CFAN = Arg0
                }

                Release (ECMX)
            }

            Method (KGFS, 0, NotSerialized)
            {
                Local0 = 0x14
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = CFAN /* \_SB_.PC00.LPCB.EC0_.CFAN */
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (SFSD, 1, Serialized)
            {
                Local1 = (Arg0 * 0x40)
                Local0 = (Local1 / 0x64)
                Local0 = (0x40 - Local0)
                Local1 = (PWM0 & 0x80)
                If ((Local0 == 0x40))
                {
                    Local1 |= One
                }
                Else
                {
                    Local0 <<= One
                    Local1 |= Local0
                }

                PWM0 = Local1
            }

            Method (GFSD, 0, Serialized)
            {
                Local0 = (PWM0 & 0x7F)
                If ((Local0 & One))
                {
                    Local1 = Zero
                }
                Else
                {
                    Local0 >>= One
                    Local0 = (0x40 - Local0)
                    Local0 *= 0x64
                    Local1 = ((Local0 + 0x20) / 0x40)
                    Local1++
                }

                Return (Local1)
            }

            Method (GSHK, 0, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = SHK /* \_SB_.PC00.LPCB.EC0_.SHK_ */
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (SSHK, 1, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Debug = Arg0
                    SHK = Arg0
                }

                Release (ECMX)
            }

            Method (SAST, 1, Serialized)
            {
                Local0 = Zero
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    AUDS = Arg0
                    Local0 = One
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (HSPW, 2, Serialized)
            {
                If ((Arg0 && Arg1)){}
            }

            Method (UHSW, 0, Serialized)
            {
            }

            Method (CHSW, 1, Serialized)
            {
                If (Arg0){}
                Local1 = Zero
                Return (Local1)
            }

            Method (HWLP, 1, NotSerialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    WLP = (Arg0 ^ Zero)
                }

                Release (ECMX)
            }

            Method (HWWP, 1, Serialized)
            {
                If (Arg0){}
                Acquire (ECMX, 0xFFFF)
                If (ECRG){}
                Release (ECMX)
            }

            Method (ECAB, 4, Serialized)
            {
                Local0 = 0xECAB
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = 0xFF00
                    ABDI = Arg0
                    ABAD = Arg1
                    ABIX = Arg2
                    If (((Arg1 & One) == Zero))
                    {
                        ABDA = Arg3
                    }

                    ABST = 0xFF
                    Sleep (0x5A)
                    Local0 = 0x80
                    Local1 = 0x0B
                    While (((Local0 & 0x80) && (Local1 > Zero)))
                    {
                        Sleep (0x0A)
                        Local0 = ABST /* \_SB_.PC00.LPCB.EC0_.ABST */
                        Local1--
                    }

                    Local0 <<= 0x08
                    If (((Local0 == Zero) && (Arg1 & One)))
                    {
                        Local1 = (ABDA & 0xFF)
                        Local0 |= Local1
                    }
                }

                Release (ECMX)
                Return (Local0)
            }

            Name (NGBF, 0xFF)
            Name (NGBT, 0xFF)
            Name (NBGX, 0xFF)
            Name (GACP, 0x07)
            Name (ACST, One)
            Name (SMAR, Zero)
            Name (NBAP, Zero)
            Name (NNBO, One)
            Name (NDCB, Zero)
            Name (NLB1, 0x0A)
            Name (NLB2, 0x05)
            Name (NLO2, 0x04)
            Mutex (BTMX, 0x00)
            Method (UPAD, 0, Serialized)
            {
                Acquire (BTMX, 0xFFFF)
                If ((GACP & One))
                {
                    GACP &= 0x06
                    Release (BTMX)
                    Local0 = One
                    Local1 = Zero
                    Acquire (ECMX, 0xFFFF)
                    If (ECRG)
                    {
                        Local0 = ADP /* \_SB_.PC00.LPCB.EC0_.ADP_ */
                        ACSE = 0xFF
                        Local2 = ACIX /* \_SB_.PC00.LPCB.EC0_.ACIX */
                        If ((Local2 & 0x08))
                        {
                            Local1 = One
                        }
                        ElseIf ((Local2 & 0x10))
                        {
                            Local1 = 0x04
                        }
                        ElseIf ((Local2 & 0x40))
                        {
                            Local1 = 0x02
                        }
                        ElseIf ((Local2 & 0x80))
                        {
                            Local1 = 0x03
                        }
                    }

                    Release (ECMX)
                    ACST = Local0
                    SMAR = Local1
                }
                Else
                {
                    Release (BTMX)
                }
            }

            Method (GACS, 0, Serialized)
            {
                UPAD ()
                Return (ACST) /* \_SB_.PC00.LPCB.EC0_.ACST */
            }

            Method (GPID, 0, Serialized)
            {
                UPAD ()
                Return (SMAR) /* \_SB_.PC00.LPCB.EC0_.SMAR */
            }

            Method (GBAP, 0, Serialized)
            {
                Acquire (BTMX, 0xFFFF)
                If ((GACP & 0x02))
                {
                    GACP &= 0x05
                    Release (BTMX)
                    Acquire (ECMX, 0xFFFF)
                    If (ECRG)
                    {
                        NBAP = BATP /* \_SB_.PC00.LPCB.EC0_.BATP */
                    }

                    Release (ECMX)
                }
                Else
                {
                    Release (BTMX)
                }

                Return (NBAP) /* \_SB_.PC00.LPCB.EC0_.NBAP */
            }

            Method (PWUP, 2, Serialized)
            {
                Local0 = Zero
                Acquire (BTMX, 0xFFFF)
                Local1 = (Arg0 | GACP) /* \_SB_.PC00.LPCB.EC0_.GACP */
                GACP = (Local1 & 0x07)
                If ((GACP & 0x02))
                {
                    NGBF |= Arg1
                    NBGX |= Arg1
                }

                If ((GACP & 0x04))
                {
                    If ((NGBT != 0xFF))
                    {
                        Local0 = One
                    }

                    NGBT |= Arg1
                }

                Release (BTMX)
                Return (Local0)
            }

            Method (BTDR, 1, Serialized)
            {
                If ((Arg0 == One))
                {
                    NNBO = One
                }
                ElseIf ((Arg0 == Zero))
                {
                    NNBO = Zero
                }

                Return (NNBO) /* \_SB_.PC00.LPCB.EC0_.NNBO */
            }

            Method (BSTA, 1, Serialized)
            {
                BTDR (One)
                Local0 = GBAP ()
                Local1 = 0x0F
                If ((Local0 & Arg0))
                {
                    Local1 = 0x1F
                }

                Return (Local1)
            }

            Method (GBSS, 2, Serialized)
            {
                ToBCD (Arg0, Local0)
                Local3 = ISTR (Local0, 0x05)
                Concatenate (Local3, " ", Local4)
                Local0 = (Arg1 >> 0x09)
                Local1 = (Local0 + 0x07BC)
                ToBCD (Local1, Local0)
                Local2 = ISTR (Local0, 0x04)
                Concatenate (Local4, Local2, Local3)
                Concatenate (Local3, "/", Local4)
                Local0 = (Arg1 >> 0x05)
                Local1 = (Local0 & 0x0F)
                ToBCD (Local1, Local0)
                Local2 = ISTR (Local0, 0x02)
                Concatenate (Local4, Local2, Local3)
                Concatenate (Local3, "/", Local4)
                Local1 = (Arg1 & 0x1F)
                ToBCD (Local1, Local0)
                Local2 = ISTR (Local0, 0x02)
                Concatenate (Local4, Local2, Local3)
                Return (Local3)
            }

            Method (GBMF, 0, Serialized)
            {
                Local0 = Buffer (0x12){}
                Local3 = Zero
                Local1 = BMF /* \_SB_.PC00.LPCB.EC0_.BMF_ */
                While (((Local3 < 0x10) && (Local1 != Zero)))
                {
                    Local0 [Local3] = Local1
                    Local3++
                    Local1 = BMF /* \_SB_.PC00.LPCB.EC0_.BMF_ */
                }

                Return (Local0)
            }

            Method (GCTL, 1, Serialized)
            {
                If (Arg0){}
                Name (CTBF, Buffer (0x10){})
                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    CTBF [Local2] = CTLB /* \_SB_.PC00.LPCB.EC0_.CTLB */
                    Local2++
                    Local3++
                }

                Return (CTBF) /* \_SB_.PC00.LPCB.EC0_.GCTL.CTBF */
            }

            Method (GDNM, 1, Serialized)
            {
                If (Arg0){}
                Name (DNBF, Buffer (0x07){})
                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x07))
                {
                    DNBF [Local2] = BDN /* \_SB_.PC00.LPCB.EC0_.BDN_ */
                    Local2++
                    Local3++
                }

                Return (DNBF) /* \_SB_.PC00.LPCB.EC0_.GDNM.DNBF */
            }

            Method (GDCH, 1, Serialized)
            {
                If (Arg0){}
                Name (DCBF, Buffer (0x04){})
                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x04))
                {
                    DCBF [Local2] = BTY /* \_SB_.PC00.LPCB.EC0_.BTY_ */
                    Local2++
                    Local3++
                }

                Return (DCBF) /* \_SB_.PC00.LPCB.EC0_.GDCH.DCBF */
            }

            Method (BTIF, 1, Serialized)
            {
                Local7 = (One << Arg0)
                BTDR (One)
                If ((BSTA (Local7) == 0x0F))
                {
                    Return (0xFF)
                }

                Acquire (BTMX, 0xFFFF)
                Local0 = NGBF /* \_SB_.PC00.LPCB.EC0_.NGBF */
                Release (BTMX)
                If (((Local0 & Local7) == Zero))
                {
                    Return (Zero)
                }

                NBST [Arg0] = NDBS /* \_SB_.NDBS */
                Acquire (BTMX, 0xFFFF)
                NGBT |= Local7
                Release (BTMX)
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    BSEL = Arg0
                    DerefOf (NBTI [Arg0]) [One] = BDC /* \_SB_.PC00.LPCB.EC0_.BDC_ */
                    DerefOf (NBTI [Arg0]) [0x02] = BFC /* \_SB_.PC00.LPCB.EC0_.BFC_ */
                    DerefOf (NBTI [Arg0]) [0x04] = BDV /* \_SB_.PC00.LPCB.EC0_.BDV_ */
                    Local0 = (BFC * NLB1) /* \_SB_.PC00.LPCB.EC0_.NLB1 */
                    Local4 = (Local0 / 0x64)
                    DerefOf (NBTI [Arg0]) [0x05] = Local4
                    Local0 = (BFC * NLO2) /* \_SB_.PC00.LPCB.EC0_.NLO2 */
                    Local4 = (Local0 / 0x64)
                    DerefOf (NBTI [Arg0]) [0x06] = Local4
                    Local0 = BSN /* \_SB_.PC00.LPCB.EC0_.BSN_ */
                    Local1 = BDAT /* \_SB_.PC00.LPCB.EC0_.BDAT */
                }

                Release (ECMX)
                Local2 = GBSS (Local0, Local1)
                DerefOf (NBTI [Arg0]) [0x0A] = Local2
                Acquire (BTMX, 0xFFFF)
                NGBF &= ~Local7
                Release (BTMX)
                Return (Zero)
            }

            Method (BTIX, 1, Serialized)
            {
                Local7 = (One << Arg0)
                BTDR (One)
                If ((BSTA (Local7) == 0x0F))
                {
                    Return (0xFF)
                }

                Acquire (BTMX, 0xFFFF)
                Local0 = NBGX /* \_SB_.PC00.LPCB.EC0_.NBGX */
                Release (BTMX)
                If (((Local0 & Local7) == Zero))
                {
                    Return (Zero)
                }

                NBST [Arg0] = NDBS /* \_SB_.NDBS */
                Acquire (BTMX, 0xFFFF)
                NGBT |= Local7
                Release (BTMX)
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    BSEL = Arg0
                    DerefOf (NBTE [Arg0]) [0x02] = BDC /* \_SB_.PC00.LPCB.EC0_.BDC_ */
                    If ((MXCG == 0x50))
                    {
                        Local0 = (BDC * 0x04)
                        Local1 = (Local0 / 0x05)
                        If ((BFC < Local1))
                        {
                            Local1 = BFC /* \_SB_.PC00.LPCB.EC0_.BFC_ */
                        }

                        DerefOf (NBTE [Arg0]) [0x03] = Local1
                    }
                    Else
                    {
                        DerefOf (NBTE [Arg0]) [0x03] = BFC /* \_SB_.PC00.LPCB.EC0_.BFC_ */
                    }

                    DerefOf (NBTE [Arg0]) [0x05] = BDV /* \_SB_.PC00.LPCB.EC0_.BDV_ */
                    Local0 = (BFC * NLB1) /* \_SB_.PC00.LPCB.EC0_.NLB1 */
                    Local4 = (Local0 / 0x64)
                    DerefOf (NBTE [Arg0]) [0x06] = Local4
                    Local0 = (BFC * NLO2) /* \_SB_.PC00.LPCB.EC0_.NLO2 */
                    Local4 = (Local0 / 0x64)
                    DerefOf (NBTE [Arg0]) [0x07] = Local4
                    DerefOf (NBTE [Arg0]) [0x08] = BCC /* \_SB_.PC00.LPCB.EC0_.BCC_ */
                    Local0 = BSN /* \_SB_.PC00.LPCB.EC0_.BSN_ */
                    Local1 = BDAT /* \_SB_.PC00.LPCB.EC0_.BDAT */
                }

                Release (ECMX)
                Local2 = GBSS (Local0, Local1)
                DerefOf (NBTE [Arg0]) [0x11] = Local2
                Acquire (BTMX, 0xFFFF)
                NBGX &= ~Local7
                Release (BTMX)
                Return (Zero)
            }

            Method (BTST, 2, Serialized)
            {
                Local7 = (One << Arg0)
                BTDR (One)
                If ((BSTA (Local7) == 0x0F))
                {
                    NBST [Arg0] = Package (0x04)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        }
                    Return (0xFF)
                }

                Acquire (BTMX, 0xFFFF)
                If (Arg1)
                {
                    NGBT = 0xFF
                }

                Local0 = NGBT /* \_SB_.PC00.LPCB.EC0_.NGBT */
                Release (BTMX)
                If (((Local0 & Local7) == Zero))
                {
                    Return (Zero)
                }

                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    BSEL = Arg0
                    If ((BCLE == One))
                    {
                        Local0 = (BST | 0x08)
                    }
                    Else
                    {
                        Local0 = BST /* \_SB_.PC00.LPCB.EC0_.BST_ */
                    }

                    Local3 = BPR /* \_SB_.PC00.LPCB.EC0_.BPR_ */
                    DerefOf (NBST [Arg0]) [0x02] = BRC /* \_SB_.PC00.LPCB.EC0_.BRC_ */
                    DerefOf (NBST [Arg0]) [0x03] = BPV /* \_SB_.PC00.LPCB.EC0_.BPV_ */
                }

                Release (ECMX)
                If ((GACS () == One))
                {
                    Local0 &= 0xFFFFFFFFFFFFFFFE
                }
                Else
                {
                    Local0 &= 0xFFFFFFFFFFFFFFFD
                }

                If ((Local0 & One))
                {
                    Acquire (BTMX, 0xFFFF)
                    NDCB = Local7
                    Release (BTMX)
                }

                DerefOf (NBST [Arg0]) [Zero] = Local0
                If ((Local0 & One))
                {
                    If (((Local3 < 0x0190) || (Local3 > 0x1964)))
                    {
                        Local5 = DerefOf (DerefOf (NBST [Arg0]) [One])
                        If (((Local5 < 0x0190) || (Local5 > 0x1964)))
                        {
                            Local3 = 0x0D7A
                        }
                        Else
                        {
                            Local3 = Local5
                        }
                    }
                }
                ElseIf (((Local0 & 0x02) == Zero))
                {
                    Local3 = Zero
                }

                DerefOf (NBST [Arg0]) [One] = Local3
                Acquire (BTMX, 0xFFFF)
                NGBT &= ~Local7
                Release (BTMX)
                Return (Zero)
            }

            Method (ITLB, 0, NotSerialized)
            {
                Local0 = (BFC * NLB1) /* \_SB_.PC00.LPCB.EC0_.NLB1 */
                Local4 = (Local0 / 0x64)
                Divide ((Local4 + 0x09), 0x0A, Local0, Local1)
                Local0 = (BFC * NLB2) /* \_SB_.PC00.LPCB.EC0_.NLB2 */
                Local4 = (Local0 / 0x64)
                Divide ((Local4 + 0x09), 0x0A, Local0, Local2)
                If (ECRG)
                {
                    LB1 = Local1
                    LB2 = Local2
                }
            }

            Method (BTTP, 2, Serialized)
            {
                Local7 = (One << Arg0)
                BTDR (One)
                If ((BSTA (Local7) == 0x0F))
                {
                    Return (0xFF)
                }

                If ((DerefOf (BTIP [Arg0]) != Arg1))
                {
                    Acquire (ECMX, 0xFFFF)
                    If (ECRG)
                    {
                        BRC = Arg1
                    }

                    Release (ECMX)
                    BTIP [Arg0] = Arg1
                }

                Return (Zero)
            }

            Method (GBTI, 1, NotSerialized)
            {
                Debug = "Enter getbattinfo"
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    If ((BATP & (One << Arg0)))
                    {
                        BSEL = Arg0
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Buffer (0x6C){}
                            }
                        DerefOf (Local0 [One]) [Zero] = BDC /* \_SB_.PC00.LPCB.EC0_.BDC_ */
                        DerefOf (Local0 [One]) [One] = (BDC >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x02] = BFC /* \_SB_.PC00.LPCB.EC0_.BFC_ */
                        DerefOf (Local0 [One]) [0x03] = (BFC >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x04] = BRC /* \_SB_.PC00.LPCB.EC0_.BRC_ */
                        DerefOf (Local0 [One]) [0x05] = (BRC >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x06] = BME /* \_SB_.PC00.LPCB.EC0_.BME_ */
                        DerefOf (Local0 [One]) [0x07] = (BME >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x08] = BCC /* \_SB_.PC00.LPCB.EC0_.BCC_ */
                        DerefOf (Local0 [One]) [0x09] = (BCC >> 0x08
                            )
                        Local1 = CBT /* \_SB_.PC00.LPCB.EC0_.CBT_ */
                        Local1 -= 0x0AAC
                        Divide (Local1, 0x0A, Local2, Local3)
                        DerefOf (Local0 [One]) [0x0A] = Local3
                        DerefOf (Local0 [One]) [0x0B] = (Local3 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x0C] = BPV /* \_SB_.PC00.LPCB.EC0_.BPV_ */
                        DerefOf (Local0 [One]) [0x0D] = (BPV >> 0x08
                            )
                        Local1 = BPR /* \_SB_.PC00.LPCB.EC0_.BPR_ */
                        If (Local1)
                        {
                            If ((BSTS & 0x40))
                            {
                                Local1 = (~Local1 + One)
                                Local1 &= 0xFFFF
                            }
                        }

                        DerefOf (Local0 [One]) [0x0E] = Local1
                        DerefOf (Local0 [One]) [0x0F] = (Local1 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x10] = BDV /* \_SB_.PC00.LPCB.EC0_.BDV_ */
                        DerefOf (Local0 [One]) [0x11] = (BDV >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x12] = BSTS /* \_SB_.PC00.LPCB.EC0_.BSTS */
                        DerefOf (Local0 [One]) [0x13] = (BSTS >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x14] = BCV1 /* \_SB_.PC00.LPCB.EC0_.BCV1 */
                        DerefOf (Local0 [One]) [0x15] = (BCV1 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x16] = BCV2 /* \_SB_.PC00.LPCB.EC0_.BCV2 */
                        DerefOf (Local0 [One]) [0x17] = (BCV2 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x18] = BCV3 /* \_SB_.PC00.LPCB.EC0_.BCV3 */
                        DerefOf (Local0 [One]) [0x19] = (BCV3 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x1A] = BCV4 /* \_SB_.PC00.LPCB.EC0_.BCV4 */
                        DerefOf (Local0 [One]) [0x1B] = (BCV4 >> 0x08
                            )
                        CreateField (DerefOf (Local0 [One]), 0xE0, 0x80, BTSN)
                        BTSN = GBSS (BSN, BDAT)
                        Local1 = GBMF ()
                        Local2 = SizeOf (Local1)
                        CreateField (DerefOf (Local0 [One]), 0x0160, (Local2 * 0x08), BMAN)
                        BMAN = Local1
                        Local2 += 0x2C
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x80, CLBL)
                        CLBL = GCTL (Zero)
                        Local2 += 0x11
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x38, DNAM)
                        DNAM = GDNM (Zero)
                        Local2 += 0x07
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x20, DCHE)
                        DCHE = GDCH (Zero)
                        Local2 += 0x04
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAC)
                        BMAC = Zero
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAD)
                        BMAD = BDAT /* \_SB_.PC00.LPCB.EC0_.BDAT */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCCU)
                        BCCU = BRCC /* \_SB_.PC00.LPCB.EC0_.BRCC */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCVO)
                        BCVO = BRCV /* \_SB_.PC00.LPCB.EC0_.BRCV */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BAVC)
                        Local1 = BCR /* \_SB_.PC00.LPCB.EC0_.BCR_ */
                        If (Local1)
                        {
                            If ((BSTS & 0x40))
                            {
                                Local1 = (~Local1 + One)
                                Local1 &= 0xFFFF
                            }
                        }

                        BAVC = Local1
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, RTTE)
                        RTTE = BRTE /* \_SB_.PC00.LPCB.EC0_.BRTE */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTE)
                        ATTE = BATE /* \_SB_.PC00.LPCB.EC0_.BATE */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTF)
                        ATTF = BATF /* \_SB_.PC00.LPCB.EC0_.BATF */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x08, NOBS)
                        NOBS = BATN /* \_SB_.PC00.LPCB.EC0_.BATN */
                        Local3 = ((ABOS << 0x02) + (ABOE << One))
                        Local4 = (Local3 + One)
                        DerefOf (Local0 [One]) [0x6B] = Local4
                    }
                    Else
                    {
                        Local0 = Package (0x01)
                            {
                                0x34
                            }
                    }
                }
                Else
                {
                    Local0 = Package (0x01)
                        {
                            0x0D
                        }
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (GBTC, 0, NotSerialized)
            {
                Debug = "Enter GetBatteryControl"
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    If ((BATP & One))
                    {
                        BSEL = Zero
                        DerefOf (Local0 [One]) [Zero] = Zero
                        If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                        {
                            DerefOf (Local0 [One]) [Zero] = Zero
                        }
                        ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                            IDIS == One)) && (MAXC == Zero)))
                        {
                            DerefOf (Local0 [One]) [Zero] = One
                        }
                        ElseIf (((INAC == One) && (IDIS == 0x02)))
                        {
                            DerefOf (Local0 [One]) [Zero] = 0x02
                        }
                        ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                            IDIS == One)) && (MAXC == 0xFA)))
                        {
                            DerefOf (Local0 [One]) [Zero] = 0x03
                        }
                        ElseIf (((INAC == Zero) && (INCH == 0x03)))
                        {
                            DerefOf (Local0 [One]) [Zero] = 0x04
                        }
                    }
                    Else
                    {
                        DerefOf (Local0 [One]) [Zero] = 0xFF
                    }

                    If ((BATP & 0x02))
                    {
                        BSEL = One
                        DerefOf (Local0 [One]) [One] = Zero
                        If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                        {
                            DerefOf (Local0 [One]) [One] = Zero
                        }
                        ElseIf (((((INAC == Zero) && (INCH == One)) && (
                            IDIS == 0x02)) && (MAXC == Zero)))
                        {
                            DerefOf (Local0 [One]) [One] = One
                        }
                        ElseIf (((INAC == One) && (IDIS == One)))
                        {
                            DerefOf (Local0 [One]) [One] = 0x02
                        }
                        ElseIf (((((INAC == Zero) && (INCH == One)) && (
                            IDIS == 0x02)) && (MAXC == 0xFA)))
                        {
                            DerefOf (Local0 [One]) [One] = 0x03
                        }
                        ElseIf (((INAC == Zero) && (INCH == 0x03)))
                        {
                            DerefOf (Local0 [One]) [One] = 0x04
                        }
                    }
                    Else
                    {
                        DerefOf (Local0 [One]) [One] = 0xFF
                    }
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x35, 
                            Zero
                        }
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (SBTC, 3, NotSerialized)
            {
                Debug = "Enter SetBatteryControl"
                Debug = Arg0
                Debug = Arg1
                Debug = Arg2
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = Arg2
                    Debug = Local0
                    Local4 = Package (0x01)
                        {
                            0x06
                        }
                    Local1 = Zero
                    Local2 = Zero
                    Local1 = DerefOf (Local0 [Zero])
                    If ((Local1 == Zero))
                    {
                        Debug = "battery 0"
                        If ((BATP & One))
                        {
                            Local2 = DerefOf (Local0 [One])
                            If ((Local2 == Zero))
                            {
                                INCH = Zero
                                IDIS = Zero
                                INAC = Zero
                                MAXC = Zero
                                PSSB = One
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == One))
                            {
                                INAC = Zero
                                INCH = 0x02
                                IDIS = One
                                MAXC = Zero
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x02))
                            {
                                INAC = One
                                INCH = One
                                IDIS = 0x02
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x03))
                            {
                                INCH = 0x02
                                IDIS = One
                                INAC = Zero
                                MAXC = 0xFA
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x04))
                            {
                                MAXC = 0xFA
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x05))
                            {
                                INAC = Zero
                                INCH = 0x03
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }
                        }
                        Else
                        {
                            Local4 = Package (0x01)
                                {
                                    0x34
                                }
                        }
                    }

                    If ((Local1 == One))
                    {
                        If ((BATP & 0x02))
                        {
                            Debug = "battery 1"
                            Local2 = DerefOf (Local0 [One])
                            If ((Local2 == Zero))
                            {
                                INCH = Zero
                                IDIS = Zero
                                INAC = Zero
                                MAXC = Zero
                                PSSB = One
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == One))
                            {
                                INAC = Zero
                                INCH = One
                                IDIS = 0x02
                                MAXC = Zero
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x02))
                            {
                                INAC = One
                                INCH = 0x02
                                IDIS = One
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x03))
                            {
                                INCH = One
                                IDIS = 0x02
                                INAC = Zero
                                MAXC = 0xFA
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x04))
                            {
                                INCH = Zero
                                IDIS = Zero
                                INAC = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x05))
                            {
                                INAC = Zero
                                INCH = 0x03
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }
                        }
                        Else
                        {
                            Local4 = Package (0x01)
                                {
                                    0x34
                                }
                        }
                    }
                }

                Release (ECMX)
                Return (Local4)
            }

            Method (GBBI, 0, Serialized)
            {
                Name (BSPI, Buffer (0x1C){})
                Local3 = Zero
                Local2 = Zero
                BSP = Zero
                Sleep (0x64)
                While ((Local3 < 0x1C))
                {
                    BSPI [Local2] = BSP /* \_SB_.PC00.LPCB.EC0_.BSP_ */
                    Sleep (0x0A)
                    Local2++
                    Local3++
                }

                Return (BSPI) /* \_SB_.PC00.LPCB.EC0_.GBBI.BSPI */
            }

            Mutex (OTMT, 0x00)
            Name (OTLL, One)
            Name (OTSI, One)
            Name (OTRT, Zero)
            Name (OTEN, Zero)
            Name (LRPC, Zero)
            Name (MXCP, Zero)
            Name (DCCP, Zero)
            Name (TBOS, Zero)
            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (BTMX, 0xFFFF)
                Local0 = NDCB /* \_SB_.PC00.LPCB.EC0_.NDCB */
                Release (BTMX)
                PWUP (0x04, Local0)
                SBTN (Local0, 0x80)
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Local0 = THEM /* \_SB_.PC00.LPCB.EC0_.THEM */
                Local1 = Local0
                Local2 = 0x08
                Local3 = (Local1 & Local2)
                If ((Local3 != Zero))
                {
                    If (CondRefOf (\_SB.IETM.DFFG))
                    {
                        ^^^^IETM.DFFG = One
                    }

                    If (CondRefOf (\_SB.PC00.LPCB.EC0.SEN2))
                    {
                        Notify (SEN2, 0x90) // Device-Specific
                    }
                }

                Local2 = 0x04
                Local3 = (Local1 & Local2)
                If ((Local3 != Zero))
                {
                    If (CondRefOf (\_SB.IETM.DFFG))
                    {
                        ^^^^IETM.DFFG = One
                    }

                    If (CondRefOf (\_SB.PC00.LPCB.EC0.SEN1))
                    {
                        Notify (SEN1, 0x90) // Device-Specific
                    }
                }

                Local2 = 0x02
                Local3 = (Local1 & Local2)
                If ((Local3 != Zero))
                {
                    If (CondRefOf (\_SB.PC00.LPCB.EC0.SEN4))
                    {
                        Notify (SEN4, 0x90) // Device-Specific
                    }
                }

                Local2 = 0x40
                Local3 = (Local1 & Local2)
                If ((Local3 != Zero))
                {
                    If (CondRefOf (\_SB.PC00.LPCB.EC0.SEN6))
                    {
                        Notify (SEN6, 0x90) // Device-Specific
                    }
                }

                \_TZ.ECTE (Local0)
            }

            Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x05, 0x03)
                If (CondRefOf (\_SB.PC00.LPCB.EC0.EC12))
                {
                    EC14 = EC12 ()
                }

                If (BTDR (0x02))
                {
                    Notify (AC, 0x80) // Status Change
                }

                If (CondRefOf (\_SB.PC00.G472))
                {
                    G472 ()
                }

                If ((MXDP == One))
                {
                    ODV6 = One
                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }
                Else
                {
                    If ((EC14 != Zero))
                    {
                        ODV6 = One
                    }
                    Else
                    {
                        ODV6 = Zero
                    }

                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }

                UDTS (One, Zero)
            }

            Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = UCPN /* \_SB_.PC00.LPCB.EC0_.UCPN */
                    ^^^^WMIV.GVWE (0x00020001, Local0)
                }

                Release (ECMX)
            }

            Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x06, One)
                If (CondRefOf (\_SB.PC00.LPCB.EC0.EC13))
                {
                    EC15 = EC13 ()
                }

                Local0 = GBAP ()
                If ((Local0 != 0x02))
                {
                    PWUP (0x04, 0x02)
                    If (BTDR (0x02))
                    {
                        Notify (BAT1, 0x80) // Status Change
                    }
                }

                If (BTDR (0x02))
                {
                    Notify (BAT0, 0x81) // Information Change
                }

                If (CondRefOf (\_SB.PC00.G47F))
                {
                    G47F (Zero)
                }

                Acquire (ECMX, 0xFFFF)
                If ((BATP == One))
                {
                    ODVA = ((BDC * BDV) / 0x000F4240)
                }
                Else
                {
                    ODVA = Zero
                }

                Release (ECMX)
                If (CondRefOf (\_SB.IETM.ODVP))
                {
                    ^^^^IETM.ODVP ()
                    Notify (IETM, 0x88) // Device-Specific
                }

                UDTS (Zero, Zero)
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (CondRefOf (\_SB.PC00.G473))
                {
                    G473 ()
                }

                Notify (LID, 0x80) // Status Change
            }

            Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x04, One)
                If (BTDR (0x02))
                {
                    Notify (BAT0, 0x80) // Status Change
                }

                Acquire (ECMX, 0xFFFF)
                If ((BATP == One))
                {
                    ODVA = ((BDC * BDV) / 0x000F4240)
                }
                Else
                {
                    ODVA = Zero
                }

                Release (ECMX)
                If (CondRefOf (\_SB.IETM.ODVP))
                {
                    ^^^^IETM.ODVP ()
                    Notify (IETM, 0x88) // Device-Specific
                }
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (CondRefOf (\_SB.PC00.G474))
                {
                    G474 ()
                }
            }

            Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x06, 0x02)
                Local0 = GBAP ()
                If ((Local0 != One))
                {
                    PWUP (0x04, One)
                    If (BTDR (0x02))
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }
                }

                If (BTDR (0x02))
                {
                    Notify (BAT1, 0x81) // Information Change
                }
            }

            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x04, 0x02)
                If (BTDR (0x02))
                {
                    Notify (BAT1, 0x80) // Status Change
                }
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    PPCM = 0x03
                    PPDS = One
                    Local0 = PPDT /* \_SB_.PC00.LPCB.EC0_.PPDT */
                    Local0 <<= 0x08
                    PPCM = One
                    PPDS = One
                    Local1 = PPDT /* \_SB_.PC00.LPCB.EC0_.PPDT */
                    If ((Local1 == 0xFC))
                    {
                        Local1 = 0xFE
                    }

                    Local2 = (Local0 | Local1)
                    ^^^^WMIV.GVWE (0x14, Local2)
                }

                Release (ECMX)
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x14, 0xFD)
            }

            Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    PPCM = 0x03
                    PPDS = One
                    Local0 = PPDT /* \_SB_.PC00.LPCB.EC0_.PPDT */
                    Local0 <<= 0x08
                    ^^^^WMIV.GVWE (0x14, Local0)
                }

                Release (ECMX)
            }

            Method (_Q50, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (ECRG)
                {
                    If (CondRefOf (\_SB.PC00.CTCN))
                    {
                        CTCL = One
                        CTCN ()
                    }
                }
            }

            Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (ECRG)
                {
                    If (CondRefOf (\_SB.PC00.CTCD))
                    {
                        CTCD ()
                    }
                }
            }

            Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((G289 == One))
                {
                    \_GPE.G400 (0x86)
                }
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((G289 == One))
                {
                    \_GPE.G400 (0x87)
                }
            }

            Method (SBTN, 2, Serialized)
            {
                If ((Arg0 & One))
                {
                    Notify (BAT0, Arg1)
                }

                If ((Arg0 & 0x02))
                {
                    Notify (BAT1, Arg1)
                }
            }

            Method (UDTS, 2, Serialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.EC0.DDPL))
                {
                    DDPL ()
                }

                If (CondRefOf (\_SB.PC00.LPCB.EC0.PT02))
                {
                    PT02 ()
                }

                If (CondRefOf (\_SB.PC00.LPCB.EC0.PT04))
                {
                    Local7 = Zero
                    If ((G25F == Zero))
                    {
                        PT04 (0x2D)
                    }
                    Else
                    {
                        PT04 (0x41)
                    }
                }

                If ((Arg0 != One))
                {
                    If (CondRefOf (\_SB.IETM.DXGP))
                    {
                        ^^^^IETM.DXGP (0x03, Zero, Zero)
                    }
                    Else
                    {
                        DGPS (Zero, Zero, Zero, Zero)
                    }
                }
            }

            Method (PRIT, 0, NotSerialized)
            {
                Local0 = GACS ()
                PWRS = Local0
                If ((GBAP () & One))
                {
                    BT0P = 0x1F
                }

                \_TZ.ECTI (Zero)
                If (CondRefOf (\_SB.PC00.LPCB.EC0.EC12))
                {
                    EC14 = EC12 ()
                }

                If (CondRefOf (\_SB.PC00.LPCB.EC0.EC13))
                {
                    EC15 = EC13 ()
                }

                If (CondRefOf (\_SB.PC00.FBDX))
                {
                    FBDX = One
                }

                If ((MXDP == One))
                {
                    ODV6 = One
                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }
                Else
                {
                    If ((EC14 != Zero))
                    {
                        ODV6 = One
                    }
                    Else
                    {
                        ODV6 = Zero
                    }

                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }

                ODV2 = G25F /* \G25F */
                UDTS (One, Zero)
            }

            Method (RPM3, 1, Serialized)
            {
                If (SP3C (0x80))
                {
                    Sleep (0x0A)
                    If (SP3D (Arg0))
                    {
                        Sleep (0x0A)
                        Local0 = RP3D ()
                        Sleep (0x0A)
                    }

                    Return (Local0)
                }
                Else
                {
                    Return (0xFF)
                }
            }

            Method (WPM3, 2, Serialized)
            {
                If (SP3C (0x81))
                {
                    Sleep (0x0A)
                    If (SP3D (Arg0))
                    {
                        Sleep (0x0A)
                        SP3D (Arg1)
                        Sleep (0x0A)
                    }
                }
            }

            Method (SP3C, 1, Serialized)
            {
                Local0 = Zero
                While (One)
                {
                    Local1 = (PM3C & One)
                    If ((Local1 != Zero))
                    {
                        Local3 = PM3D /* \_SB_.PC00.LPCB.EC0_.PM3D */
                        Local0++
                        Local1 = (PM3C & One)
                        If ((Local0 >= 0x00020000))
                        {
                            Local2 = Zero
                            Break
                        }
                    }
                    Else
                    {
                        PM3C = Arg0
                        Local2 = One
                        Break
                    }
                }

                Return (Local2)
            }

            Method (SP3D, 1, Serialized)
            {
                Local0 = Zero
                While (One)
                {
                    Local1 = (PM3C & 0x02)
                    If ((Local1 != Zero))
                    {
                        Local0++
                        Local1 = (PM3C & 0x02)
                        If ((Local0 >= 0x00020000))
                        {
                            Local2 = Zero
                            Break
                        }
                    }
                    Else
                    {
                        PM3D = Arg0
                        Local2 = One
                        Break
                    }
                }

                Return (Local2)
            }

            Method (RP3D, 0, Serialized)
            {
                Local0 = Zero
                While (One)
                {
                    Local1 = (PM3C & One)
                    If ((Local1 != One))
                    {
                        Local0++
                        Local1 = (PM3C & One)
                        If ((Local0 >= 0x00020000))
                        {
                            Local2 = Zero
                            Break
                        }
                    }
                    Else
                    {
                        Local2 = One
                        Break
                    }
                }

                If (Local2)
                {
                    Local3 = PM3D /* \_SB_.PC00.LPCB.EC0_.PM3D */
                }
                Else
                {
                    Local3 = 0xFF
                }

                Return (Local3)
            }

            Method (EC16, 1, Serialized)
            {
                Local0 = 0xFFFF
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = EC17 /* \_SB_.PC00.LPCB.EC0_.EC17 */
                    }
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (EC18, 0, Serialized)
            {
                Local0 = Zero
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    If ((ADP == One))
                    {
                        If ((BT1I == One))
                        {
                            Local0 = 0x02
                        }
                        Else
                        {
                            Local0 = One
                        }
                    }
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (EC19, 0, Serialized)
            {
                Local0 = 0xFFFF
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local1 = (BRC * 0x64)
                    Local0 = (Local1 / BFC)
                }

                Release (ECMX)
                Return (Local0)
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y38)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.LPCB.HPET._Y38._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PC00.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHS == PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y39)
                })
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y39._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y39._MAX, OMAX)  // _MAX: Maximum Base Address
                OMIN = (PMBS + 0x54)
                OMAX = (PMBS + 0x54)
                Return (RBUF) /* \_SB_.PC00.LPCB.CWDT._CRS.RBUF */
            }
        }

        OperationRegion (PKBS, SystemIO, 0x60, 0x05)
        Field (PKBS, ByteAcc, Lock, Preserve)
        {
            PKBD,   8, 
            Offset (0x02), 
            Offset (0x03), 
            Offset (0x04), 
            PKBC,   8
        }

        Device (PS2K)
        {
            Name (_HID, EisaId ("HPQ8002"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    FixedIO (
                        0x0060,             // Address
                        0x01,               // Length
                        )
                    FixedIO (
                        0x0064,             // Address
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
        }

        Device (PS2M)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (P2ME)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {12}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IRQNoFlags ()
                        {12}
                }
                EndDependentFn ()
            })
        }
    }

    Scope (_SB)
    {
        Device (WMIS)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x35, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  // 5d..B..B
                /* 0008 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  // ....$...
                /* 0010 */  0x42, 0x49, 0x07, 0x00, 0x21, 0x12, 0x90, 0x05,  // BI..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x5A, 0x5A, 0x01, 0x00   // ..).ZZ..
            })
            Method (WQBI, 1, NotSerialized)
            {
                \_TZ.WQBI (Arg0)
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (\)
    {
        Device (CHUB)
        {
            Name (_HID, EisaId ("INT339B"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CHEN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg1) >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                                {
                                    Case (Zero)
                                    {
                                        \_SB.HIDD.HPEM (0x1C)
                                    }

                                }
                            }

                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Name (LSTA, Zero)
    Name (IDPM, Zero)
    Method (HPTS, 1, NotSerialized)
    {
        If (CondRefOf (\_SB.PC00.G466))
        {
            \_SB.PC00.G466 (Arg0)
        }

        \_SB.ODGW ((0x5400 | Arg0))
        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PC00.LPCB.EC0.ACPI = Zero
                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }
        }
    }

    Method (HWAK, 1, NotSerialized)
    {
        \_SB.PC00.LPCB.EC0.ITLB ()
        If (\_SB.PC00.LPCB.EC0.ECRG)
        {
            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
            \_SB.PC00.LPCB.EC0.ACPI = One
            \_SB.PC00.LPCB.EC0.OST = GTOS ()
            Release (\_SB.PC00.LPCB.EC0.ECMX)
        }

        If ((Arg0 > 0x02))
        {
            \_TZ.RETD ()
            \_TZ.INTM (One)
            If (CondRefOf (\_SB.PC00.FBDX))
            {
                \_SB.PC00.FBDX = One
            }

            \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
        }

        Local2 = \_SB.PC00.LPCB.EC0.GACS ()
        \_SB.PC00.LPCB.EC0.PWUP (0x03, 0xFF)
        Local1 = \_SB.PC00.LPCB.EC0.GBAP ()
        Local3 = \_SB.PC00.LPCB.EC0.GACS ()
        PWRS = Local3
        Local3 ^= Local2
        If ((Arg0 > 0x02))
        {
            Notify (\_SB.AC, 0x80) // Status Change
            PNOT ()
        }

        If (CondRefOf (\_SB.PC00.G467))
        {
            \_SB.PC00.G467 (Arg0)
        }

        \_SB.WMIV.GVWE (0x17, Zero)
        \_SB.ODGW ((0x56F0 | Arg0))
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Event (WFEV)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T /* \P80T */
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG (Arg0))
        }

        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        HPTS (Arg0)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }

            CWEF = CPWE /* \CPWE */
            ADBG (Concatenate ("_PTS S3 CWEF=", CWEF))
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (TRTD)
            {
                \_SB.PC00.TCON ()
            }

            If (ITRT)
            {
                \_SB.PC00.TG0N ()
                \_SB.PC00.TG1N ()
            }
        }

        If (CondRefOf (\_SB.CPTS))
        {
            \_SB.CPTS (Arg0)
        }

        If (CondRefOf (WPPE))
        {
            \_SB.SGOV (WPPE, One)
            Sleep (0x12)
            \_SB.SGOV (WWBR, Zero)
            Sleep (0x1E)
            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
            \_SB.PC00.LPCB.EC0.WWP = One
            Release (\_SB.PC00.LPCB.EC0.ECMX)
            If (CondRefOf (PWWS))
            {
                If ((PWWS == One))
                {
                    If (((Arg0 != 0x03) && (Arg0 != 0x04)))
                    {
                        Sleep (0x96)
                    }
                }
            }
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Name (RTMA, Buffer (0x20)
    {
        /* 0000 */  0x00, 0x5F, 0x52, 0x54, 0x58, 0x4D, 0x41, 0x43,  // ._RTXMAC
        /* 0008 */  0x5F, 0x23, 0x5C, 0x60, 0xBA, 0xD1, 0xCF, 0x8A,  // _#\`....
        /* 0010 */  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // #.......
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
    })
    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        HWAK (Arg0)
        Notify (\_SB.BAT0, 0x80) // Status Change
        If ((S0ID == One)){}
        If (NEXP)
        {
            If ((OSCC & One))
            {
                NHPG ()
            }

            If ((OSCC & 0x04))
            {
                NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Zero == ACTT))
            {
                \_SB.SSMI (0xEA91, Arg0, Zero, Zero, Zero)
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GBSX & 0x40)){}
            If ((GBSX & 0x80)){}
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If ((ECON == One)){}
            If ((\_SB.PC00.RP01.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP01, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP02.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP02, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP03, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP04.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP04, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP05, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP06.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP06, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP07.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PC00.RP07, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP08.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PC00.RP08, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP09.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP09, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP10.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP10, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP11.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP11, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP12.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP12, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP13.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP13, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP14.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP14, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP15.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP15, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP16.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP16, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP17.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP17, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP18.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP18, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP19.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP19, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP20.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP20, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP21, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP22, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP23, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP24, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP21, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP22, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP23, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP24, Zero) // Bus Check
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04))){}
        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_SB.NVDR.RSTP))
            {
                \_SB.NVDR.RSTP ()
            }
        }

        If (CondRefOf (\_SB.CWAK))
        {
            \_SB.CWAK (Arg0)
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PF00 & 0x08))
            {
                Notify (\_SB.PR00, 0x80) // Performance Capability Change
            }

            If ((PF01 & 0x08))
            {
                Notify (\_SB.PR01, 0x80) // Performance Capability Change
            }

            If ((PF02 & 0x08))
            {
                Notify (\_SB.PR02, 0x80) // Performance Capability Change
            }

            If ((PF03 & 0x08))
            {
                Notify (\_SB.PR03, 0x80) // Performance Capability Change
            }

            If ((PF04 & 0x08))
            {
                Notify (\_SB.PR04, 0x80) // Performance Capability Change
            }

            If ((PF05 & 0x08))
            {
                Notify (\_SB.PR05, 0x80) // Performance Capability Change
            }

            If ((PF06 & 0x08))
            {
                Notify (\_SB.PR06, 0x80) // Performance Capability Change
            }

            If ((PF07 & 0x08))
            {
                Notify (\_SB.PR07, 0x80) // Performance Capability Change
            }

            If ((PF08 & 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Performance Capability Change
            }

            If ((PF09 & 0x08))
            {
                Notify (\_SB.PR09, 0x80) // Performance Capability Change
            }

            If ((PF10 & 0x08))
            {
                Notify (\_SB.PR10, 0x80) // Performance Capability Change
            }

            If ((PF11 & 0x08))
            {
                Notify (\_SB.PR11, 0x80) // Performance Capability Change
            }

            If ((PF12 & 0x08))
            {
                Notify (\_SB.PR12, 0x80) // Performance Capability Change
            }

            If ((PF13 & 0x08))
            {
                Notify (\_SB.PR13, 0x80) // Performance Capability Change
            }

            If ((PF14 & 0x08))
            {
                Notify (\_SB.PR14, 0x80) // Performance Capability Change
            }

            If ((PF15 & 0x08))
            {
                Notify (\_SB.PR15, 0x80) // Performance Capability Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x80) // Performance Capability Change
        }

        If ((TCNT > One))
        {
            If (((PF00 & 0x08) && (PF00 & 0x10)))
            {
                Notify (\_SB.PR00, 0x81) // C-State Change
            }

            If (((PF01 & 0x08) && (PF01 & 0x10)))
            {
                Notify (\_SB.PR01, 0x81) // C-State Change
            }

            If (((PF02 & 0x08) && (PF02 & 0x10)))
            {
                Notify (\_SB.PR02, 0x81) // C-State Change
            }

            If (((PF03 & 0x08) && (PF03 & 0x10)))
            {
                Notify (\_SB.PR03, 0x81) // C-State Change
            }

            If (((PF04 & 0x08) && (PF04 & 0x10)))
            {
                Notify (\_SB.PR04, 0x81) // C-State Change
            }

            If (((PF05 & 0x08) && (PF05 & 0x10)))
            {
                Notify (\_SB.PR05, 0x81) // C-State Change
            }

            If (((PF06 & 0x08) && (PF06 & 0x10)))
            {
                Notify (\_SB.PR06, 0x81) // C-State Change
            }

            If (((PF07 & 0x08) && (PF07 & 0x10)))
            {
                Notify (\_SB.PR07, 0x81) // C-State Change
            }

            If (((PF08 & 0x08) && (PF08 & 0x10)))
            {
                Notify (\_SB.PR08, 0x81) // C-State Change
            }

            If (((PF09 & 0x08) && (PF09 & 0x10)))
            {
                Notify (\_SB.PR09, 0x81) // C-State Change
            }

            If (((PF10 & 0x08) && (PF10 & 0x10)))
            {
                Notify (\_SB.PR10, 0x81) // C-State Change
            }

            If (((PF11 & 0x08) && (PF11 & 0x10)))
            {
                Notify (\_SB.PR11, 0x81) // C-State Change
            }

            If (((PF12 & 0x08) && (PF12 & 0x10)))
            {
                Notify (\_SB.PR12, 0x81) // C-State Change
            }

            If (((PF13 & 0x08) && (PF13 & 0x10)))
            {
                Notify (\_SB.PR13, 0x81) // C-State Change
            }

            If (((PF14 & 0x08) && (PF14 & 0x10)))
            {
                Notify (\_SB.PR14, 0x81) // C-State Change
            }

            If (((PF15 & 0x08) && (PF15 & 0x10)))
            {
                Notify (\_SB.PR15, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // C-State Change
        }
    }

    OperationRegion (CPWR, SystemMemory, (\_SB.PC00.GMHB () + 0x5000), 0x1000)
    Field (CPWR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1, 
        Offset (0x9A4), 
        PPL2,   15, 
        PL2E,   1, 
            ,   1, 
        PL2T,   7
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            \_SB.CPPC = Zero
                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    If (PSCP)
                    {
                        If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                        {
                            If ((PF00 & 0x0400))
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.TPSS) - One)
                            }
                            Else
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.LPSS) - One)
                            }

                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.PAUD.PUAM))
        {
            \_SB.PC00.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PC00.XHCI.DUAM))
            {
                \_SB.PC00.XHCI.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            \_SB.DTSF = Arg1
            \_SB.TRPD = Zero
            Return (\_SB.DTSF) /* External reference */
        }

        If ((Arg0 == 0x04))
        {
            \_SB.TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PC00)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA) /* External reference */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }
            }

            \_TZ.BOTT ()
            \_TZ.RETD ()
            PFLV = One
            If (CondRefOf (\_SB.DTSE))
            {
                If ((DTSE >= One))
                {
                    DSAE = One
                }
            }

            If ((OSTP != GTOS ()))
            {
                GSWS (OSTS)
            }
        }
    }

    Scope (\)
    {
        Method (NHPG, 0, Serialized)
        {
            \_SB.PC00.RP01.HPEX = Zero
            \_SB.PC00.RP02.HPEX = Zero
            \_SB.PC00.RP03.HPEX = Zero
            \_SB.PC00.RP04.HPEX = Zero
            \_SB.PC00.RP05.HPEX = Zero
            \_SB.PC00.RP06.HPEX = Zero
            \_SB.PC00.RP07.HPEX = Zero
            \_SB.PC00.RP08.HPEX = Zero
            \_SB.PC00.RP09.HPEX = Zero
            \_SB.PC00.RP10.HPEX = Zero
            \_SB.PC00.RP11.HPEX = Zero
            \_SB.PC00.RP12.HPEX = Zero
            \_SB.PC00.RP13.HPEX = Zero
            \_SB.PC00.RP14.HPEX = Zero
            \_SB.PC00.RP15.HPEX = Zero
            \_SB.PC00.RP16.HPEX = Zero
            \_SB.PC00.RP17.HPEX = Zero
            \_SB.PC00.RP18.HPEX = Zero
            \_SB.PC00.RP19.HPEX = Zero
            \_SB.PC00.RP20.HPEX = Zero
            \_SB.PC00.RP21.HPEX = Zero
            \_SB.PC00.RP22.HPEX = Zero
            \_SB.PC00.RP23.HPEX = Zero
            \_SB.PC00.RP24.HPEX = Zero
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPEX = Zero
                    \_SB.PC01.TRP1.HPEX = Zero
                    \_SB.PC01.TRP2.HPEX = Zero
                    \_SB.PC01.TRP3.HPEX = Zero
                }
                Else
                {
                    \_SB.PC00.TRP0.HPEX = Zero
                    \_SB.PC00.TRP1.HPEX = Zero
                    \_SB.PC00.TRP2.HPEX = Zero
                    \_SB.PC00.TRP3.HPEX = Zero
                }
            }

            \_SB.PC00.RP01.HPSX = One
            \_SB.PC00.RP02.HPSX = One
            \_SB.PC00.RP03.HPSX = One
            \_SB.PC00.RP04.HPSX = One
            \_SB.PC00.RP05.HPSX = One
            \_SB.PC00.RP06.HPSX = One
            \_SB.PC00.RP07.HPSX = One
            \_SB.PC00.RP08.HPSX = One
            \_SB.PC00.RP09.HPSX = One
            \_SB.PC00.RP10.HPSX = One
            \_SB.PC00.RP11.HPSX = One
            \_SB.PC00.RP12.HPSX = One
            \_SB.PC00.RP13.HPSX = One
            \_SB.PC00.RP14.HPSX = One
            \_SB.PC00.RP15.HPSX = One
            \_SB.PC00.RP16.HPSX = One
            \_SB.PC00.RP17.HPSX = One
            \_SB.PC00.RP18.HPSX = One
            \_SB.PC00.RP19.HPSX = One
            \_SB.PC00.RP20.HPSX = One
            \_SB.PC00.RP21.HPSX = One
            \_SB.PC00.RP22.HPSX = One
            \_SB.PC00.RP23.HPSX = One
            \_SB.PC00.RP24.HPSX = One
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPSX = One
                    \_SB.PC01.TRP1.HPSX = One
                    \_SB.PC01.TRP2.HPSX = One
                    \_SB.PC01.TRP3.HPSX = One
                }
                Else
                {
                    \_SB.PC00.TRP0.HPSX = One
                    \_SB.PC00.TRP1.HPSX = One
                    \_SB.PC00.TRP2.HPSX = One
                    \_SB.PC00.TRP3.HPSX = One
                }
            }
        }

        Method (NPME, 0, Serialized)
        {
            \_SB.PC00.RP01.PMEX = Zero
            \_SB.PC00.RP02.PMEX = Zero
            \_SB.PC00.RP03.PMEX = Zero
            \_SB.PC00.RP04.PMEX = Zero
            \_SB.PC00.RP05.PMEX = Zero
            \_SB.PC00.RP06.PMEX = Zero
            \_SB.PC00.RP07.PMEX = Zero
            \_SB.PC00.RP08.PMEX = Zero
            \_SB.PC00.RP09.PMEX = Zero
            \_SB.PC00.RP10.PMEX = Zero
            \_SB.PC00.RP11.PMEX = Zero
            \_SB.PC00.RP12.PMEX = Zero
            \_SB.PC00.RP13.PMEX = Zero
            \_SB.PC00.RP14.PMEX = Zero
            \_SB.PC00.RP15.PMEX = Zero
            \_SB.PC00.RP16.PMEX = Zero
            \_SB.PC00.RP17.PMEX = Zero
            \_SB.PC00.RP18.PMEX = Zero
            \_SB.PC00.RP19.PMEX = Zero
            \_SB.PC00.RP20.PMEX = Zero
            \_SB.PC00.RP21.PMEX = Zero
            \_SB.PC00.RP22.PMEX = Zero
            \_SB.PC00.RP23.PMEX = Zero
            \_SB.PC00.RP24.PMEX = Zero
            \_SB.PC00.RP21.PMEX = Zero
            \_SB.PC00.RP22.PMEX = Zero
            \_SB.PC00.RP23.PMEX = Zero
            \_SB.PC00.RP24.PMEX = Zero
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.PMEX = Zero
                    \_SB.PC01.TRP1.PMEX = Zero
                    \_SB.PC01.TRP2.PMEX = Zero
                    \_SB.PC01.TRP3.PMEX = Zero
                }
                Else
                {
                    \_SB.PC00.TRP0.PMEX = Zero
                    \_SB.PC00.TRP1.PMEX = Zero
                    \_SB.PC00.TRP2.PMEX = Zero
                    \_SB.PC00.TRP3.PMEX = Zero
                }
            }

            \_SB.PC00.RP01.PMSX = One
            \_SB.PC00.RP02.PMSX = One
            \_SB.PC00.RP03.PMSX = One
            \_SB.PC00.RP04.PMSX = One
            \_SB.PC00.RP05.PMSX = One
            \_SB.PC00.RP06.PMSX = One
            \_SB.PC00.RP07.PMSX = One
            \_SB.PC00.RP08.PMSX = One
            \_SB.PC00.RP09.PMSX = One
            \_SB.PC00.RP10.PMSX = One
            \_SB.PC00.RP11.PMSX = One
            \_SB.PC00.RP12.PMSX = One
            \_SB.PC00.RP13.PMSX = One
            \_SB.PC00.RP14.PMSX = One
            \_SB.PC00.RP15.PMSX = One
            \_SB.PC00.RP16.PMSX = One
            \_SB.PC00.RP17.PMSX = One
            \_SB.PC00.RP18.PMSX = One
            \_SB.PC00.RP19.PMSX = One
            \_SB.PC00.RP20.PMSX = One
            \_SB.PC00.RP21.PMSX = One
            \_SB.PC00.RP22.PMSX = One
            \_SB.PC00.RP23.PMSX = One
            \_SB.PC00.RP24.PMSX = One
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.PMSX = One
                    \_SB.PC01.TRP1.PMSX = One
                    \_SB.PC01.TRP2.PMSX = One
                    \_SB.PC01.TRP3.PMSX = One
                }
                Else
                {
                    \_SB.PC00.TRP0.PMSX = One
                    \_SB.PC00.TRP1.PMSX = One
                    \_SB.PC00.TRP2.PMSX = One
                    \_SB.PC00.TRP3.PMSX = One
                }
            }
        }

        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((HGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0xFFFFFFFB
                                STS0 |= 0x10
                            }
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, _Y3A, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateQWordField (RBUF, \_SB.EPC._Y3A._MIN, EMIN)  // _MIN: Minimum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y3A._MAX, EMAX)  // _MAX: Maximum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y3A._LEN, ELEN)  // _LEN: Length
                EMIN = EMNA /* External reference */
                ELEN = ELNG /* External reference */
                EMAX = ((EMNA + ELNG) - One)
                Return (RBUF) /* \_SB_.EPC_.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((EPCS != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((COEM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Processor (PR00, 0x00, 0x00001810, 0x06){}
        Processor (PR01, 0x01, 0x00001810, 0x06){}
        Processor (PR02, 0x02, 0x00001810, 0x06){}
        Processor (PR03, 0x03, 0x00001810, 0x06){}
        Processor (PR04, 0x04, 0x00001810, 0x06){}
        Processor (PR05, 0x05, 0x00001810, 0x06){}
        Processor (PR06, 0x06, 0x00001810, 0x06){}
        Processor (PR07, 0x07, 0x00001810, 0x06){}
        Processor (PR08, 0x08, 0x00001810, 0x06){}
        Processor (PR09, 0x09, 0x00001810, 0x06){}
        Processor (PR10, 0x0A, 0x00001810, 0x06){}
        Processor (PR11, 0x0B, 0x00001810, 0x06){}
        Processor (PR12, 0x0C, 0x00001810, 0x06){}
        Processor (PR13, 0x0D, 0x00001810, 0x06){}
        Processor (PR14, 0x0E, 0x00001810, 0x06){}
        Processor (PR15, 0x0F, 0x00001810, 0x06){}
        Processor (PR16, 0x10, 0x00001810, 0x06){}
        Processor (PR17, 0x11, 0x00001810, 0x06){}
        Processor (PR18, 0x12, 0x00001810, 0x06){}
        Processor (PR19, 0x13, 0x00001810, 0x06){}
        Processor (PR20, 0x14, 0x00001810, 0x06){}
        Processor (PR21, 0x15, 0x00001810, 0x06){}
        Processor (PR22, 0x16, 0x00001810, 0x06){}
        Processor (PR23, 0x17, 0x00001810, 0x06){}
    }

    Scope (_SB.PR00)
    {
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (\)
    {
        OperationRegion (THMR, SystemMemory, TBRB, 0xDC)
        Field (THMR, AnyAcc, Lock, Preserve)
        {
            Offset (0x30), 
            CTV1,   16, 
            CTV2,   16, 
            Offset (0x60), 
            PTV,    8, 
            Offset (0xD8), 
            PCTT,   8, 
            MCHT,   8
        }
    }

    Scope (_TZ)
    {
        Name (TRPC, Package (0x08)
        {
            Package (0x04)
            {
                0x5F, 
                0x62, 
                0x64, 
                0x80
            }, 

            Package (0x04)
            {
                0x63, 
                0x66, 
                0x66, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Name (TRIP, Package (0x08)
        {
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}
        })
        Method (TRUP, 0, Serialized)
        {
            If ((TJMX > Zero))
            {
                Local0 = TJMX /* \TJMX */
                DerefOf (TRPC [Zero]) [0x02] = Local0
                DerefOf (TRPC [Zero]) [One] = Local0
                DerefOf (TRPC [Zero]) [Zero] = (TJMX - 0x03)
            }
        }

        Method (INTM, 1, Serialized)
        {
            OTHI (Arg0)
        }

        Name (WHTR, 0x1F)
        Name (OSTH, Zero)
        Name (LARE, Package (0x09){})
        Name (LARP, Package (0x09){})
        Name (CUZO, Package (0x09){})
        Name (LATR, Package (0x09){})
        Mutex (THER, 0x00)
        Name (THSC, 0x1F)
        Method (BOTT, 0, Serialized)
        {
            TRUP ()
            Local3 = SizeOf (TRPC)
            Local5 = DerefOf (TRPC [Zero])
            Local4 = SizeOf (Local5)
            Local0 = Zero
            While ((Local0 < Local3))
            {
                Local1 = Zero
                While ((Local1 < Local4))
                {
                    Local6 = DerefOf (DerefOf (TRPC [Local0]) [Local1])
                    Local7 = GETK (Local6)
                    DerefOf (TRIP [Local0]) [Local1] = Local7
                    Local1++
                }

                Local0++
            }
        }

        Method (GETK, 1, Serialized)
        {
            Local0 = (Arg0 * 0x0A)
            Local1 = (Local0 + 0x0AAC)
            Return (Local1)
        }

        Method (RETD, 0, Serialized)
        {
            Acquire (THER, 0xFFFF)
            THSC = 0x1F
            WHTR = 0x1F
            Local0 = Zero
            While ((Local0 < 0x09))
            {
                LARE [Local0] = Zero
                LARP [Local0] = Zero
                CUZO [Local0] = 0xFF
                LATR [Local0] = Zero
                Local0++
            }

            Release (THER)
        }

        Method (OTHI, 1, Serialized)
        {
            ECTI (One)
            If (Arg0)
            {
                NTHS (0x1F)
            }
        }

        Name (OTID, Zero)
        Method (ECTI, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                OTID = One
            }

            If ((\_SB.PC00.LPCB.EC0.ECRG && OTID))
            {
                THSC = 0x1F
                NTHS (0x1F)
                OTID = Zero
            }
        }

        Method (OSIT, 0, Serialized)
        {
            If ((OSTH == Zero))
            {
                INTM (Zero)
                OSTH = One
            }
        }

        Method (GETP, 2, Serialized)
        {
            Local0 = Arg1
            If ((Arg1 == One))
            {
                Local3 = DerefOf (CUZO [Arg0])
                If (((Local3 > One) && (Local3 != 0xFF)))
                {
                    Local0 = Zero
                }
            }

            Local2 = DerefOf (DerefOf (TRIP [Arg0]) [Local0])
            Return (Local2)
        }

        Method (GTTP, 5, Serialized)
        {
            Local1 = Arg2
            If (((Arg0 <= 0x07) && \_SB.PC00.LPCB.EC0.ECRG))
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PC00.LPCB.EC0.CRZN = Arg1
                If ((Arg0 == One))
                {
                    Local1 = \_SB.PC00.LPCB.EC0.DTMP
                }
                Else
                {
                    Local1 = \_SB.PC00.LPCB.EC0.TEMP
                }

                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }

            Local2 = Local1
            If ((Local1 < Arg3))
            {
                If ((DerefOf (LARE [Arg0]) < Arg3))
                {
                    LARP [Arg0] = Arg3
                }

                Local1 = DerefOf (LARP [Arg0])
            }
            ElseIf ((Local1 > Arg4))
            {
                If ((DerefOf (LARE [Arg0]) > Arg4))
                {
                    LARP [Arg0] = Arg4
                }

                Local1 = DerefOf (LARP [Arg0])
            }

            LARE [Arg0] = Local2
            LARP [Arg0] = Local1
            Return (Local1)
        }

        Method (SETM, 3, Serialized)
        {
            Local5 = Zero
            If ((Arg0 <= 0x07))
            {
                Acquire (THER, 0xFFFF)
                Local7 = (One << Arg0)
                If (((THSC & Local7) && \_SB.PC00.LPCB.EC0.ECRG))
                {
                    If ((DerefOf (LATR [Arg0]) && (Arg0 != 0x04)))
                    {
                        Local4 = (Arg2 + 0x02)
                    }
                    Else
                    {
                        Local4 = Arg2
                    }

                    Local2 = DerefOf (DerefOf (TRPC [Arg0]) [Zero])
                    Local0 = One
                    While ((Local0 <= 0x03))
                    {
                        Local6 = DerefOf (DerefOf (TRPC [Arg0]) [Local0])
                        If ((Local4 < Local6))
                        {
                            Break
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    If ((Local0 == One))
                    {
                        If ((Arg2 > Local2))
                        {
                            If ((DerefOf (LATR [Arg0]) > Local6))
                            {
                                Local0++
                            }
                        }
                    }

                    Local3 = DerefOf (TRPC [Arg0])
                    Local4 = SizeOf (Local3)
                    If (((Local0 != DerefOf (CUZO [Arg0])) && (Local0 < 
                        Local4)))
                    {
                        Local5 = One
                        CUZO [Arg0] = Local0
                        If ((Arg0 <= 0x05))
                        {
                            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                            \_SB.PC00.LPCB.EC0.CRZN = Arg1
                            If ((DerefOf (LATR [Arg0]) == Zero))
                            {
                                \_SB.PC00.LPCB.EC0.PLTP = Local2
                            }

                            \_SB.PC00.LPCB.EC0.PHTP = Local6
                            Release (\_SB.PC00.LPCB.EC0.ECMX)
                        }

                        LATR [Arg0] = Local6
                    }

                    THSC &= ~Local7
                }

                Release (THER)
            }

            Return (Local5)
        }

        Method (CHOT, 1, Serialized)
        {
            If ((DTCD & 0x00020000))
            {
                Local0 = 0x0FAC
            }
            Else
            {
                Local0 = GETP (Arg0, 0x02)
            }

            Return (Local0)
        }

        ThermalZone (CPUZ)
        {
            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (CHOT (Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (Zero, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                OSIT ()
                Local0 = Zero
                Local0 = GTTP (Zero, One, 0x10, Zero, 0x7F)
                If (SETM (Zero, One, Local0))
                {
                    Notify (CPUZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (GFXZ)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (GETP (One, One))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (PSL ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, One)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x02)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (One, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (One, 0x02, 0x10, Zero, 0x7F)
                If (SETM (One, 0x02, Local0))
                {
                    Notify (GFXZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (EXTZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x02, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x02, 0x03, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (LOCZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x03, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x03, 0x04, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (BATZ)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (GETP (0x04, One))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (PSL ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x32)  // _TC1: Thermal Constant 1
            Name (_TC2, Zero)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x04, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x04, 0x05, Zero, Zero, 0x7F)
                If (SETM (0x04, 0x05, Local0))
                {
                    Notify (BATZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (CHGZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x05, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x05, 0x06, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (SK1Z)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x06, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x06, 0x07, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (SK2Z)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x07, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x07, 0x08, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        Method (NTHS, 1, Serialized)
        {
            If ((Arg0 & One))
            {
                Notify (CPUZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x02))
            {
                Notify (GFXZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x04))
            {
                Notify (EXTZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x08))
            {
                Notify (LOCZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x10))
            {
                Notify (BATZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x20))
            {
                Notify (CHGZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x40))
            {
                Notify (SK1Z, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x80))
            {
                Notify (SK2Z, 0x80) // Thermal Status Change
            }
        }

        Method (ECTE, 1, Serialized)
        {
            Local1 = Zero
            If (Arg0)
            {
                If ((Arg0 & One))
                {
                    Local1 |= One
                }

                If ((Arg0 & 0x02))
                {
                    Local1 |= 0x02
                }

                If ((Arg0 & 0x04))
                {
                    Local1 |= 0x04
                }

                If ((Arg0 & 0x08))
                {
                    Local1 |= 0x08
                }

                If ((Arg0 & 0x10))
                {
                    Local1 |= 0x10
                }

                If ((Arg0 & 0x20))
                {
                    Local1 |= 0x20
                }

                If ((Arg0 & 0x40))
                {
                    Local1 |= 0x40
                }

                If ((Arg0 & 0x80))
                {
                    Local1 |= 0x80
                }
            }
            Else
            {
                Local1 |= 0x10
            }

            Acquire (THER, 0xFFFF)
            THSC |= Local1
            Release (THER)
            If ((Arg0 == 0x09))
            {
                Local1 = 0x09
            }

            NTHS (Local1)
        }

        Method (GFRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PC00.LPCB.EC0.FRDC
                Release (\_SB.PC00.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFVE, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PC00.LPCB.EC0.FRDC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PC00.LPCB.EC0.FR2C
                }

                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTFV, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PC00.LPCB.EC0.FTGC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PC00.LPCB.EC0.FT2C
                }

                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PC00.LPCB.EC0.FTGC
                Release (\_SB.PC00.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFSD, 0, Serialized)
        {
            Local0 = GFRM ()
            Local1 = (Local0 * 0x64)
            Divide (Local1, AMFR, Local1, Local2)
            Return (Local2)
        }

        Method (CTCT, 1, Serialized)
        {
            Local1 = (Arg0 * AMFR) /* \AMFR */
            Divide (Local1, 0x64, Local2, Local0)
            If (Local0)
            {
                Local1 = (Local0 >> One)
                Local2 = (0x0003C000 + Local1)
                Divide (Local2, Local0, Local1, Local0)
            }

            If ((Local0 > 0xF4))
            {
                Local0 = 0xF4
            }

            Return (Local0)
        }

        Method (GCGC, 0, Serialized)
        {
            Name (LTMP, Buffer (0x02){})
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                LTMP = \_SB.PC00.LPCB.EC0.BPR
                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }

            Return (LTMP) /* \_TZ_.GCGC.LTMP */
        }

        Method (PSL, 0, Serialized)
        {
            If ((\_SB.CFGD & 0x01000000))
            {
                If ((TCNT == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07
                    })
                }

                If ((TCNT == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03
                    })
                }

                Return (Package (0x02)
                {
                    \_SB.PR00, 
                    \_SB.PR01
                })
            }
            Else
            {
                Return (Package (0x01)
                {
                    \_SB.PR00
                })
            }
        }

        ThermalZone (PCHZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0FAC)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x05, Zero, PCTT, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        Method (GDTP, 2, Serialized)
        {
            Return (0x0AAC)
        }

        Method (DTZS, 0, NotSerialized)
        {
            If ((DTCD & 0x00010000))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        ThermalZone (DM1Z)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (DTZS ())
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (GDTP (0x30, Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0FAC)
            }
        }

        ThermalZone (DM2Z)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (DTZS ())
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (GDTP (0x34, Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0FAC)
            }
        }

        Name (SEN1, Package (0x0A)
        {
            Package (0x0E)
            {
                "CPU Fan", 
                "Reports fan speed", 
                0x0C, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Stalled", 
                "", 
                0x13, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "GPU Fan", 
                "Reports fan2 speed", 
                0x0C, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Stalled", 
                "", 
                0x13, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "CPU Temperature", 
                "Reports CPU package temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Discrete Graphics Temperature", 
                "Reports discrete graphics temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Remote Temperature", 
                "Reports external/remote temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Local Temperature", 
                "Reports internal/local temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Battery Temperature", 
                "Reports maximum temperature of all batteries", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Charger Temperature", 
                "Reports Charger temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Extra Skin1 Sensor", 
                "Reports extra Skin 1 sensor", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Extra Skin2 Sensor", 
                "Reports extra Skin 2 sensor", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Method (WQBI, 1, Serialized)
        {
            DerefOf (SEN1 [Arg0]) [0x04] = 0x02
            DerefOf (SEN1 [Arg0]) [0x09] = "Normal"
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = GFRM ()
                    Local1 = GTRM ()
                    Local2 = 0x05DC
                    If (((Local0 < Local2) && (Local1 < Local2)))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((Local1 > (Local0 + 0xC8)))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Stalled"
                    }
                }
                Case (One)
                {
                    Local0 = GFVE (0x02)
                    If (Local0)
                    {
                        Local3 = (Local0 >> One)
                        Local4 = (0x0003C000 + Local3)
                        Divide (Local4, Local0, Local3, Local0)
                    }

                    Local1 = GTFV (0x02)
                    If (Local1)
                    {
                        Local3 = (Local1 >> One)
                        Local4 = (0x0003C000 + Local3)
                        Divide (Local4, Local1, Local3, Local1)
                    }

                    Local2 = 0x05DC
                    If (((Local0 < Local2) && (Local1 < Local2)))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((Local1 > (Local0 + 0xC8)))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Stalled"
                    }
                }
                Case (0x02)
                {
                    Local0 = ^CPUZ._TMP ()
                    Local1 = ^CPUZ._HOT ()
                    If ((Local0 >= Local1))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Critical"
                    }
                    Else
                    {
                        Local1 -= Local0
                        If ((Local1 <= 0x32))
                        {
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                            DerefOf (SEN1 [Arg0]) [0x09] = "Caution"
                        }
                    }
                }
                Case (0x03)
                {
                    Local0 = ^GFXZ._TMP ()
                    Local1 = ^GFXZ._PSV ()
                    If ((Local0 >= Local1))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Caution"
                    }
                }
                Case (0x04)
                {
                    Local0 = ^EXTZ._TMP ()
                }
                Case (0x05)
                {
                    Local0 = ^LOCZ._TMP ()
                }
                Case (0x06)
                {
                    Local0 = ^BATZ._TMP ()
                    Local1 = ^BATZ._PSV ()
                    If ((Local0 >= Local1))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Caution"
                    }
                }
                Case (0x07)
                {
                    Local0 = ^CHGZ._TMP ()
                }
                Case (0x08)
                {
                    Local0 = ^SK1Z._TMP ()
                }
                Case (0x09)
                {
                    Local0 = ^SK2Z._TMP ()
                }

            }

            If ((Arg0 > One))
            {
                Local1 = (Local0 - 0x0AAC)
                Divide (Local1, 0x0A, Local2, Local0)
            }

            DerefOf (SEN1 [Arg0]) [0x0C] = Local0
            Return (DerefOf (SEN1 [Arg0]))
        }
    }

    Scope (_SB.PC00)
    {
        Method (TM03, 1, Serialized)
        {
            Local1 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC18))
            {
                Local1 = ^LPCB.EC0.EC18 ()
            }

            If ((G25F != Zero))
            {
                If ((Local1 != Zero))
                {
                    If ((Local1 == 0x02))
                    {
                        If ((EC14 >= 0x41))
                        {
                            Switch (HPID)
                            {
                                Case (0x103C00B0)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B3)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B2)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00BB)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B4)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B7)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B6)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00BC)
                                {
                                    Local2 = 0x70
                                }
                                Case (0x103C00BF)
                                {
                                    Local2 = 0x70
                                }
                                Case (0x103C00BE)
                                {
                                    Local2 = 0x70
                                }
                                Default
                                {
                                    Local2 = 0x60
                                }

                            }
                        }
                        Else
                        {
                            Switch (HPID)
                            {
                                Case (0x103C00B0)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B3)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B2)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00BB)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B4)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B7)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00B6)
                                {
                                    Local2 = 0x60
                                }
                                Case (0x103C00BC)
                                {
                                    Local2 = 0x70
                                }
                                Case (0x103C00BF)
                                {
                                    Local2 = 0x70
                                }
                                Case (0x103C00BE)
                                {
                                    Local2 = 0x70
                                }
                                Default
                                {
                                    Local2 = 0x60
                                }

                            }
                        }
                    }
                    ElseIf ((EC14 >= 0x41))
                    {
                        Switch (HPID)
                        {
                            Case (0x103C00B0)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B3)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B2)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00BB)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B4)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B7)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B6)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00BC)
                            {
                                Local2 = 0x70
                            }
                            Case (0x103C00BF)
                            {
                                Local2 = 0x70
                            }
                            Case (0x103C00BE)
                            {
                                Local2 = 0x70
                            }
                            Default
                            {
                                Local2 = 0x60
                            }

                        }
                    }
                    Else
                    {
                        Switch (HPID)
                        {
                            Case (0x103C00B0)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B3)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B2)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00BB)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B4)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B7)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00B6)
                            {
                                Local2 = 0x60
                            }
                            Case (0x103C00BC)
                            {
                                Local2 = 0x70
                            }
                            Case (0x103C00BF)
                            {
                                Local2 = 0x70
                            }
                            Case (0x103C00BE)
                            {
                                Local2 = 0x70
                            }
                            Default
                            {
                                Local2 = 0x60
                            }

                        }
                    }
                }
                Else
                {
                    Switch (HPID)
                    {
                        Case (0x103C00B0)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00B3)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00B2)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00BB)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00B4)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00B7)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00B6)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00BC)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00BF)
                        {
                            Local2 = 0x58
                        }
                        Case (0x103C00BE)
                        {
                            Local2 = 0x58
                        }
                        Default
                        {
                            Local2 = 0x60
                        }

                    }
                }
            }
            ElseIf ((Local1 != Zero))
            {
                If ((Local1 == 0x02))
                {
                    If ((EC14 >= 0x2D))
                    {
                        Switch (HPID)
                        {
                            Case (0x103C00B0)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B3)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B2)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00BB)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B4)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B7)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B6)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00BC)
                            {
                                Local2 = 0x88
                            }
                            Case (0x103C00BF)
                            {
                                Local2 = 0x88
                            }
                            Case (0x103C00BE)
                            {
                                Local2 = 0x88
                            }
                            Default
                            {
                                Local2 = 0x78
                            }

                        }
                    }
                    Else
                    {
                        Switch (HPID)
                        {
                            Case (0x103C00B0)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B3)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B2)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00BB)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B4)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B7)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00B6)
                            {
                                Local2 = 0x78
                            }
                            Case (0x103C00BC)
                            {
                                Local2 = 0x88
                            }
                            Case (0x103C00BF)
                            {
                                Local2 = 0x88
                            }
                            Case (0x103C00BE)
                            {
                                Local2 = 0x88
                            }
                            Default
                            {
                                Local2 = 0x78
                            }

                        }
                    }
                }
                ElseIf ((EC14 >= 0x2D))
                {
                    Switch (HPID)
                    {
                        Case (0x103C00B0)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B3)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B2)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00BB)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B4)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B7)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B6)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00BC)
                        {
                            Local2 = 0x88
                        }
                        Case (0x103C00BF)
                        {
                            Local2 = 0x88
                        }
                        Case (0x103C00BE)
                        {
                            Local2 = 0x88
                        }
                        Default
                        {
                            Local2 = 0x78
                        }

                    }
                }
                Else
                {
                    Switch (HPID)
                    {
                        Case (0x103C00B0)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B3)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B2)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00BB)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B4)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B7)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00B6)
                        {
                            Local2 = 0x78
                        }
                        Case (0x103C00BC)
                        {
                            Local2 = 0x88
                        }
                        Case (0x103C00BF)
                        {
                            Local2 = 0x88
                        }
                        Case (0x103C00BE)
                        {
                            Local2 = 0x88
                        }
                        Default
                        {
                            Local2 = 0x78
                        }

                    }
                }
            }
            ElseIf ((MXDP == One))
            {
                Switch (HPID)
                {
                    Case (0x103C00B0)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00B3)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00B2)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00BB)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00B4)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00B7)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00B6)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00BC)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00BF)
                    {
                        Local2 = 0x78
                    }
                    Case (0x103C00BE)
                    {
                        Local2 = 0x78
                    }
                    Default
                    {
                        Local2 = 0x68
                    }

                }
            }
            Else
            {
                Switch (HPID)
                {
                    Case (0x103C00B0)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00B3)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00B2)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00BB)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00B4)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00B7)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00B6)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00BC)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00BF)
                    {
                        Local2 = 0x68
                    }
                    Case (0x103C00BE)
                    {
                        Local2 = 0x68
                    }
                    Default
                    {
                        Local2 = 0x68
                    }

                }
            }

            Local3 = Arg0
            Switch (Local3)
            {
                Case (0x0F)
                {
                    P101 = Local2
                }
                Case (0x0E)
                {
                    P102 = Local2
                }
                Case (0x0D)
                {
                    P103 = Local2
                }
                Case (0x0C)
                {
                    P104 = Local2
                }
                Case (0x0B)
                {
                    P105 = Local2
                }
                Case (0x0A)
                {
                    P106 = Local2
                }
                Case (0x09)
                {
                    P107 = Local2
                }
                Case (0x08)
                {
                    P108 = Local2
                }
                Case (0x07)
                {
                    P109 = Local2
                }
                Case (0x06)
                {
                    P110 = Local2
                }
                Case (0x05)
                {
                    P111 = Local2
                }
                Case (0x04)
                {
                    P112 = Local2
                }
                Case (0x03)
                {
                    P113 = Local2
                }
                Case (0x02)
                {
                    P114 = Local2
                }
                Case (One)
                {
                    P115 = Local2
                }
                Case (Zero)
                {
                    P116 = Local2
                }

            }
        }

        Method (TM04, 1, Serialized)
        {
            Local1 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC18))
            {
                Local1 = ^LPCB.EC0.EC18 ()
            }

            If ((G25F != Zero))
            {
                If ((Local1 != Zero))
                {
                    If ((Local1 == 0x02))
                    {
                        If ((EC14 >= 0x41))
                        {
                            Local2 = 0x0198
                        }
                        Else
                        {
                            Local2 = 0xA0
                        }
                    }
                    ElseIf ((EC14 >= 0x41))
                    {
                        Local2 = 0xA0
                    }
                    Else
                    {
                        Local2 = 0xA0
                    }
                }
                ElseIf ((MXDP == One))
                {
                    Switch (HPID)
                    {
                        Case (0x103C00B0)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00B3)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00B2)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00BB)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00B4)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00B7)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00B6)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00BC)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00BF)
                        {
                            Local2 = 0xA0
                        }
                        Case (0x103C00BE)
                        {
                            Local2 = 0xA0
                        }
                        Default
                        {
                            Local2 = 0xA0
                        }

                    }
                }
                Else
                {
                    Switch (HPID)
                    {
                        Case (0x103C00B0)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00B3)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00B2)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00BB)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00B4)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00B7)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00B6)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00BC)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00BF)
                        {
                            Local2 = 0x80
                        }
                        Case (0x103C00BE)
                        {
                            Local2 = 0x80
                        }
                        Default
                        {
                            Local2 = 0x80
                        }

                    }
                }
            }
            ElseIf ((Local1 != Zero))
            {
                If ((Local1 == 0x02))
                {
                    If ((EC14 >= 0x2D))
                    {
                        Local2 = 0x0198
                    }
                    Else
                    {
                        Local2 = 0xA0
                    }
                }
                ElseIf ((EC14 >= 0x2D))
                {
                    Local2 = 0xA0
                }
                Else
                {
                    Local2 = 0xA0
                }
            }
            ElseIf ((MXDP == One))
            {
                Switch (HPID)
                {
                    Case (0x103C00B0)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00B3)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00B2)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00BB)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00B4)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00B7)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00B6)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00BC)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00BF)
                    {
                        Local2 = 0xD0
                    }
                    Case (0x103C00BE)
                    {
                        Local2 = 0xD0
                    }
                    Default
                    {
                        Local2 = 0xD0
                    }

                }
            }
            Else
            {
                Switch (HPID)
                {
                    Case (0x103C00B0)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00B3)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00B2)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00BB)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00B4)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00B7)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00B6)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00BC)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00BF)
                    {
                        Local2 = 0x80
                    }
                    Case (0x103C00BE)
                    {
                        Local2 = 0x80
                    }
                    Default
                    {
                        Local2 = 0x80
                    }

                }
            }

            Local3 = Arg0
            Switch (Local3)
            {
                Case (0x0F)
                {
                    P201 = Local2
                }
                Case (0x0E)
                {
                    P202 = Local2
                }
                Case (0x0D)
                {
                    P203 = Local2
                }
                Case (0x0C)
                {
                    P204 = Local2
                }
                Case (0x0B)
                {
                    P205 = Local2
                }
                Case (0x0A)
                {
                    P206 = Local2
                }
                Case (0x09)
                {
                    P207 = Local2
                }
                Case (0x08)
                {
                    P208 = Local2
                }
                Case (0x07)
                {
                    P209 = Local2
                }
                Case (0x06)
                {
                    P210 = Local2
                }
                Case (0x05)
                {
                    P211 = Local2
                }
                Case (0x04)
                {
                    P212 = Local2
                }
                Case (0x03)
                {
                    P213 = Local2
                }
                Case (0x02)
                {
                    P214 = Local2
                }
                Case (One)
                {
                    P215 = Local2
                }
                Case (Zero)
                {
                    P216 = Local2
                }

            }
        }

        Method (TM05, 0, Serialized)
        {
            Local1 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC18))
            {
                Local1 = ^LPCB.EC0.EC18 ()
            }

            If ((ToInteger (G25F) == Zero)){}
            ElseIf ((Local1 != Zero))
            {
                NPLH = One
                NPLL = 0x02
            }
            Else
            {
                NPLH = 0x02
                NPLL = 0x02
            }
        }
    }

    Scope (_SB.PC00.LPCB.EC0)
    {
        Name (CDIX, Zero)
        Name (CDPL, 0x0F)
        Name (ODPT, Zero)
        Name (DCMD, Zero)
        Method (DDPL, 0, Serialized)
        {
            Local0 = Zero
            If ((DPTF == Zero))
            {
                Local0 = One
            }
            ElseIf ((^^^^IETM.DOSS == Zero))
            {
                Local0 = One
            }

            If ((Local0 == One))
            {
                If ((DDC1 != Zero))
                {
                    Local1 = DDC1 /* \DDC1 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    If ((ODV2 != Zero))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC2 != Zero))
                {
                    Local1 = DDC2 /* \DDC2 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Acquire (ECMX, 0xFFFF)
                    Local3 = VBPS /* \_SB_.PC00.LPCB.EC0_.VBPS */
                    Release (ECMX)
                    Local4 = 0x40
                    Local4 &= Local3
                    If ((Local4 != Zero))
                    {
                        ODPT = One
                    }
                    Else
                    {
                        ODPT = Zero
                    }

                    Local5 = (One << CDIX)
                    If ((ODPT == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC3 != Zero))
                {
                    Local1 = DDC3 /* \DDC3 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    If ((ODV1 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC4 != Zero))
                {
                    Local1 = DDC4 /* \DDC4 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    If ((ODV5 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC5 != Zero))
                {
                    Local1 = DDC5 /* \DDC5 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    DCMD = ODV6 /* \ODV6 */
                    If ((ODV6 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                TM01 (CDPL)
                PMP1 (CDPL)
            }
        }

        Method (DGPS, 4, Serialized)
        {
            TM05 ()
            If (CondRefOf (\_SB.PC00.DGPC))
            {
                If ((Arg3 == One))
                {
                    If ((Arg0 == Zero))
                    {
                        DGPC (0x03)
                    }
                    Else
                    {
                        Local0 = (Arg1 + Arg2)
                        If ((Local0 != Zero))
                        {
                            DGPC (0x02)
                        }
                        Else
                        {
                            DGPC (One)
                        }
                    }
                }
                Else
                {
                    DGPC (0x04)
                }
            }
        }

        Method (PMP1, 1, Serialized)
        {
            If ((PL1E == Zero))
            {
                PL1E = One
            }

            Local1 = Arg0
            If ((Local1 == 0x0F))
            {
                PPL1 = P101 /* \P101 */
            }
            ElseIf ((Local1 == 0x0E))
            {
                PPL1 = P102 /* \P102 */
            }
            ElseIf ((Local1 == 0x0D))
            {
                PPL1 = P103 /* \P103 */
            }
            ElseIf ((Local1 == 0x0C))
            {
                PPL1 = P104 /* \P104 */
            }
            ElseIf ((Local1 == 0x0B))
            {
                PPL1 = P105 /* \P105 */
            }
            ElseIf ((Local1 == 0x0A))
            {
                PPL1 = P106 /* \P106 */
            }
            ElseIf ((Local1 == 0x09))
            {
                PPL1 = P107 /* \P107 */
            }
            ElseIf ((Local1 == 0x08))
            {
                PPL1 = P108 /* \P108 */
            }
            ElseIf ((Local1 == 0x07))
            {
                PPL1 = P109 /* \P109 */
            }
            ElseIf ((Local1 == 0x06))
            {
                PPL1 = P110 /* \P110 */
            }
            ElseIf ((Local1 == 0x05))
            {
                PPL1 = P111 /* \P111 */
            }
            ElseIf ((Local1 == 0x04))
            {
                PPL1 = P112 /* \P112 */
            }
            ElseIf ((Local1 == 0x03))
            {
                PPL1 = P113 /* \P113 */
            }
            ElseIf ((Local1 == 0x02))
            {
                PPL1 = P114 /* \P114 */
            }
            ElseIf ((Local1 == One))
            {
                PPL1 = P115 /* \P115 */
            }
            ElseIf ((Local1 == Zero))
            {
                PPL1 = P116 /* \P116 */
            }
        }

        Method (PMP2, 1, Serialized)
        {
            PL2E = One
            Local1 = Arg0
            If ((Local1 == 0x0F))
            {
                PPL2 = P201 /* \P201 */
            }
            ElseIf ((Local1 == 0x0E))
            {
                PPL2 = P202 /* \P202 */
            }
            ElseIf ((Local1 == 0x0D))
            {
                PPL2 = P203 /* \P203 */
            }
            ElseIf ((Local1 == 0x0C))
            {
                PPL2 = P204 /* \P204 */
            }
            ElseIf ((Local1 == 0x0B))
            {
                PPL2 = P205 /* \P205 */
            }
            ElseIf ((Local1 == 0x0A))
            {
                PPL2 = P206 /* \P206 */
            }
            ElseIf ((Local1 == 0x09))
            {
                PPL2 = P207 /* \P207 */
            }
            ElseIf ((Local1 == 0x08))
            {
                PPL2 = P208 /* \P208 */
            }
            ElseIf ((Local1 == 0x07))
            {
                PPL2 = P209 /* \P209 */
            }
            ElseIf ((Local1 == 0x06))
            {
                PPL2 = P210 /* \P210 */
            }
            ElseIf ((Local1 == 0x05))
            {
                PPL2 = P211 /* \P211 */
            }
            ElseIf ((Local1 == 0x04))
            {
                PPL2 = P212 /* \P212 */
            }
            ElseIf ((Local1 == 0x03))
            {
                PPL2 = P213 /* \P213 */
            }
            ElseIf ((Local1 == 0x02))
            {
                PPL2 = P214 /* \P214 */
            }
            ElseIf ((Local1 == One))
            {
                PPL2 = P215 /* \P215 */
            }
            ElseIf ((Local1 == Zero))
            {
                PPL2 = P216 /* \P216 */
            }
        }

        Method (PT02, 0, Serialized)
        {
            If (Zero){}
            ElseIf ((DPTF == Zero))
            {
                PL2E = One
                If ((DCMD == One))
                {
                    PPL2 = PLL2 /* \PLL2 */
                }
                Else
                {
                    PPL2 = PDC2 /* \PDC2 */
                }
            }
        }

        Method (PT04, 1, Serialized)
        {
            Local1 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC18))
            {
                Local1 = EC18 ()
            }

            If (Zero){}
            ElseIf ((DPTF == Zero))
            {
                If ((Local1 != Zero))
                {
                    If ((Local1 == 0x02))
                    {
                        If ((EC14 >= Arg0))
                        {
                            GSWS (0xB1)
                        }
                        Else
                        {
                            GSWS (0xB6)
                        }
                    }
                    ElseIf ((EC14 >= Arg0))
                    {
                        GSWS (0xB7)
                    }
                    Else
                    {
                        GSWS (0xB6)
                    }
                }
                Else
                {
                    GSWS (0xB3)
                }
            }
            ElseIf (CondRefOf (\_SB.IETM.DOSS))
            {
                If ((^^^^IETM.DOSS == Zero))
                {
                    If ((Local1 != One))
                    {
                        If ((Local1 == 0x02))
                        {
                            If ((EC14 >= Arg0))
                            {
                                GSWS (0xB1)
                            }
                            Else
                            {
                                GSWS (0xB6)
                            }
                        }
                        ElseIf ((EC14 >= Arg0))
                        {
                            GSWS (0xB7)
                        }
                        Else
                        {
                            GSWS (0xB6)
                        }
                    }
                    Else
                    {
                        GSWS (0xB3)
                    }
                }
            }
        }

        Method (PTAD, 1, Serialized)
        {
            If (Arg0)
            {
                ODV7 = One
            }
            Else
            {
                ODV7 = Zero
            }

            If (CondRefOf (\_SB.IETM.ODVP))
            {
                ^^^^IETM.ODVP ()
                Notify (IETM, 0x88) // Device-Specific
            }

            If ((DFEN == Zero))
            {
                If (CondRefOf (\_SB.PC00.LPCB.EC0.DDPL)){}
            }
        }

        Method (TM01, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.TM03))
            {
                TM03 (Arg0)
            }
        }

        Method (TM02, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.TM04))
            {
                TM04 (Arg0)
            }
        }
    }

    Name (NIST, Package (0x10)
    {
        "0", 
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9", 
        "A", 
        "B", 
        "C", 
        "D", 
        "E", 
        "F"
    })
    Method (ISTR, 2, NotSerialized)
    {
        Local0 = Arg0
        Local7 = ""
        Local4 = Arg1
        While ((Local4 > Zero))
        {
            Local1 = (Local0 & 0x0F)
            Local2 = DerefOf (NIST [Local1])
            Concatenate (Local2, Local7, Local3)
            Local7 = Local3
            Local0 >>= 0x04
            Local4--
        }

        Return (Local7)
    }

    Method (SRCP, 2, Serialized)
    {
        Local7 = SizeOf (Arg0)
        If ((Local7 != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Name (ST00, Buffer (Local7){})
        Name (ST01, Buffer (Local7){})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Local7) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (SRCM, 3, Serialized)
    {
        Name (ST00, Buffer (0x8C){})
        Name (ST01, Buffer (0x8C){})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Arg2) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Name (EUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (EPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Method (GPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x14){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        Return (PCKG) /* \GPLD.PCKG */
    }

    Method (TPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
        SHAP = One
        CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
        WID = 0x08
        CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
        HGT = 0x03
        Return (PCKG) /* \TPLD.PCKG */
    }

    Method (GUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \GUPC.PCKG */
    }

    Method (TUPC, 1, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
        PCKG [One] = Arg0
        Return (PCKG) /* \TUPC.PCKG */
    }

    Method (CBRT, 2, Serialized)
    {
        Local6 = SizeOf (Arg0)
        Local7 = SizeOf (Arg1)
        If ((Local6 == Zero))
        {
            Local0 = Arg1
            Return (Local0)
        }

        If ((Local7 == Zero))
        {
            Local0 = Arg0
            Return (Local0)
        }

        Local1 = (Local7 + Local6)
        Local1 -= 0x02
        Local0 = Buffer (Local1){}
        Local1 = Zero
        While ((Local1 < SizeOf (Arg0)))
        {
            Local0 [Local1] = DerefOf (Arg0 [Local1])
            Local1++
        }

        Local1 -= 0x02
        Local2 = Zero
        While ((Local2 < SizeOf (Arg1)))
        {
            Local0 [Local1] = DerefOf (Arg1 [Local2])
            Local1++
            Local2++
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (WLBU)
        {
            Name (_HID, EisaId ("HPQ6001"))  // _HID: Hardware ID
            Name (DEPT, 0xFF)
            Method (INIT, 0, Serialized)
            {
                If ((DEPT == 0x0F))
                {
                    DEPT = 0xFF
                }
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DEPT == 0xFF))
                {
                    Local0 = Zero
                    If ((GTOS () >= 0x08))
                    {
                        Local0 = 0x0F
                        UWLS ()
                    }

                    DEPT = Local0
                }

                Return (DEPT) /* \_SB_.WLBU.DEPT */
            }

            Method (UWLS, 0, Serialized)
            {
                Local0 = WDDA /* \WDDA */
                Local1 = DerefOf (Local0 [0x07])
                If ((WFLS & 0x02))
                {
                    WFLS &= 0xFFFFFFFFFFFFFFFD
                }

                Local1 *= 0x10
                Local1 += 0x10
                Local2 = 0x1B
                Local5 = 0x10
                Local4 = Zero
                While ((Local2 < Local1))
                {
                    Local3 = DerefOf (Local0 [Local2])
                    Local6 = DerefOf (Local0 [Local5])
                    If (((Local3 & 0x0A) != 0x0A))
                    {
                        Local0 [Local2] = (Local3 | 0x0A)
                        Local4 = One
                    }

                    If ((Local6 == Zero))
                    {
                        If (((Local3 & 0x10) != Zero))
                        {
                            Local0 [Local2] = (Local3 & 0xEF)
                            Local4 = One
                        }
                    }

                    Local2 += 0x10
                    Local5 += 0x10
                }

                If (Local4)
                {
                    WDDA = Local0
                    SSMI (0xEA84, Zero, Zero, Zero, Zero)
                }
            }

            Method (WLED, 1, Serialized)
            {
                SSMI (0xEA90, Arg0, Zero, Zero, Zero)
            }
        }
    }

    Scope (_SB)
    {
        Name (BCLI, Zero)
        Name (BCLS, Package (0x03)
        {
            Package (0x0D){}, 
            Package (0x17){}, 
            Package (0x1B){}
        })
        Name (NITS, Package (0x03)
        {
            Buffer (0x16){}, 
            Buffer (0x2A){}, 
            Buffer (0x32){}
        })
        Name (G427, Zero)
        Method (BCL, 0, Serialized)
        {
            If ((G427 == Zero))
            {
                If ((ILUX == One))
                {
                    G106 = G107 /* \G107 */
                }
                ElseIf ((GTOS () > 0x06))
                {
                    G106 = G107 /* \G107 */
                }

                Local7 = Zero
                If ((G106 >= 0x15))
                {
                    BCLI = One
                    Local7 = One
                    If ((G106 == 0x19))
                    {
                        BCLI = 0x02
                    }
                }

                Local1 = Zero
                If ((G1A7 & 0x10))
                {
                    Local0 = G12E /* \G12E */
                    Local5 = Zero
                    Local4 = G108 /* \G108 */
                    While ((Local1 < G106))
                    {
                        If (Local7)
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local4 [Local1])
                        }

                        Local2 = DerefOf (Local0 [Local3])
                        Local3 = (Local2 * 0x64)
                        Local2 = ((Local3 + 0x7F) / 0xFF)
                        DerefOf (BCLS [BCLI]) [(Local1 + 0x02)] = 
                            Local2
                        If ((Local2 > Local5))
                        {
                            Local5 = Local2
                        }

                        Local1++
                    }

                    Local3 = (G106 >> One)
                    DerefOf (BCLS [BCLI]) [One] = DerefOf (DerefOf (
                        BCLS [BCLI]) [Local3])
                    DerefOf (BCLS [BCLI]) [Zero] = Local5
                }
                Else
                {
                    Local4 = G113 /* \G113 */
                    Local0 = G108 /* \G108 */
                    While ((Local1 < (G106 + 0x02)))
                    {
                        If ((Local7 || (Local1 < 0x02)))
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local0 [(Local1 - 0x02)])
                            Local3 += 0x02
                        }

                        Local2 = DerefOf (Local4 [Local3])
                        DerefOf (BCLS [BCLI]) [Local1] = Local2
                        Local1++
                    }
                }

                Local0 = G147 /* \G147 */
                Local1 = G108 /* \G108 */
                Local2 = Zero
                While ((Local2 < G106))
                {
                    If (Local7)
                    {
                        Local3 = Local2
                    }
                    Else
                    {
                        Local3 = DerefOf (Local1 [Local2])
                    }

                    Local3 <<= One
                    Local5 = (Local2 << One)
                    Local4 = DerefOf (Local0 [Local3])
                    DerefOf (NITS [BCLI]) [Local5] = Local4
                    Local4 = DerefOf (Local0 [(Local3 + One)])
                    DerefOf (NITS [BCLI]) [(Local5 + One)] = 
                        Local4
                    Local2++
                }

                G427 = One
            }

            Return (DerefOf (BCLS [BCLI]))
        }

        Name (G428, Zero)
        Name (G429, 0x64)
        Method (BCM, 1, Serialized)
        {
            Local0 = Zero
            If ((ILUX == One))
            {
                G1A8 |= 0x40
                Local0 = One
            }
            ElseIf ((GTOS () > 0x05))
            {
                G1A8 |= 0x40
                Local0 = One
            }

            G429 = Arg0
            Local1 = Match (DerefOf (BCLS [BCLI]), MGE, Arg0, MTR, Zero, 
                0x02)
            If ((Local1 == Ones))
            {
                Local1 = (SizeOf (DerefOf (BCLS [BCLI])) - One)
            }

            Local1 -= 0x02
            If (Local0)
            {
                G1B1 = Local1
            }

            G428 = One
            Return (Local0)
        }

        Method (BQC, 0, Serialized)
        {
            Local0 = G429 /* \_SB_.G429 */
            Return (Local0)
        }

        Method (HDDC, 1, Serialized)
        {
            If ((Arg0 == 0x02))
            {
                Local1 = G000 /* \G000 */
            }
            Else
            {
                Local3 = G000 /* \G000 */
                Local0 = 0x80
                Local1 = Buffer (Local0){}
                Local2 = Zero
                While ((Local2 < Local0))
                {
                    Local1 [Local2] = DerefOf (Local3 [Local2])
                    Local2++
                }
            }

            Return (Local1)
        }

        Method (G42A, 0, Serialized)
        {
            Local0 = G1B1 /* \G1B1 */
            ODGW (Local0)
            Local4 = (G106 - One)
            If ((G1B1 > Local4))
            {
                Local0 = Local4
            }

            If ((G1B1 < Zero))
            {
                Local0 = Zero
            }

            Local2 = G12E /* \G12E */
            Local5 = G108 /* \G108 */
            If ((G106 == 0x0B))
            {
                Local0 = DerefOf (Local5 [Local0])
            }

            Local1 = DerefOf (Local2 [Local0])
            ODGW (Local1)
            Return (Local1)
        }
    }

    Scope (_SB.PC00)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y3B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y3C)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y3D)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y3E)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00060000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y3F)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3B._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3C._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3D._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3E._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3E._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3F._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3F._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PC00.PDRC.BUF0 */
            }
        }
    }

    Event (_SB.G426)
    Event (_SB.G408)
    Scope (_SB.PC00.GFX0)
    {
        OperationRegion (PCIG, PCI_Config, Zero, 0x02)
        Field (PCIG, WordAcc, NoLock, Preserve)
        {
            GVID,   16
        }

        Scope (\_GPE)
        {
            Method (G400, 1, Serialized)
            {
                Local1 = One
                If (Local1)
                {
                    Local1 = G40B (Arg0, Zero, One)
                }

                If (Local1)
                {
                    If (CondRefOf (\_GPE.G40C))
                    {
                        Local1 = G40C (Arg0, Zero, One)
                    }
                }

                If ((G1B3 & 0x0F))
                {
                    If (CondRefOf (\_SB.PC00.PEG0.PEGP.SVID))
                    {
                        If ((\_SB.PC00.PEG0.PEGP.SVID != 0xFFFF))
                        {
                            If ((Arg0 & 0x80))
                            {
                                If (CondRefOf (\_SB.PC00.PEG0.PEGP.DD1F))
                                {
                                    Notify (\_SB.PC00.PEG0.PEGP.DD1F, Arg0)
                                }
                            }
                        }
                    }
                }
            }

            Name (G40D, One)
            Method (G413, 0, Serialized)
            {
                G40D = One
                G242 = 0x77
                Local1 = One
                If (Local1)
                {
                    Local1 = G40B (Zero, Zero, 0x03)
                }

                If (Local1)
                {
                    If (CondRefOf (\_GPE.G40C))
                    {
                        Local1 = G40C (Zero, Zero, 0x03)
                    }
                }

                Return (G40D) /* \_GPE.G40D */
            }

            Method (G414, 2, Serialized)
            {
                Local1 = One
                If (Local1)
                {
                    Local1 = G40B (Arg0, Arg1, 0x05)
                }

                If (Local1)
                {
                    If (CondRefOf (\_GPE.G40C))
                    {
                        Local1 = G40C (Arg0, Arg1, 0x05)
                    }
                }
            }

            Method (G415, 0, Serialized)
            {
                Local1 = One
                If (Local1)
                {
                    Local1 = G40B (Zero, Zero, 0x0A)
                }

                If (Local1)
                {
                    If (CondRefOf (\_GPE.G40C))
                    {
                        Local1 = G40C (Zero, Zero, 0x0A)
                    }
                }
            }
        }

        Scope (\_SB)
        {
            Method (G403, 1, Serialized)
            {
                If ((G1A7 & 0x04))
                {
                    Return (0xFFFF)
                }
                Else
                {
                    If (((G1A8 & 0x03) == Zero))
                    {
                        G1AD = Arg0
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = \_GPE.G40B (Arg0, Zero, 0x06)
                        }

                        If (Local1)
                        {
                            If (CondRefOf (\_GPE.G40C))
                            {
                                Local1 = \_GPE.G40C (Arg0, Zero, 0x06)
                            }
                        }
                    }

                    Return (Zero)
                }

                Return (Zero)
            }

            Method (G402, 1, Serialized)
            {
                If (((G1A7 & 0x04) && Arg0))
                {
                    Return (0xFFFF)
                }
                Else
                {
                    If ((G1A7 & One))
                    {
                        If ((Arg0 == Zero))
                        {
                            Local0 = Wait (G408, 0x0500)
                            If ((Local0 != Zero)){}
                        }

                        Local1 = One
                        If (Local1)
                        {
                            Local1 = \_GPE.G40B (Arg0, Zero, 0x07)
                        }

                        If (Local1)
                        {
                            If (CondRefOf (\_GPE.G40C))
                            {
                                Local1 = \_GPE.G40C (Arg0, Zero, 0x07)
                            }
                        }
                    }
                    ElseIf (Arg0)
                    {
                        SSMI (0xEA74, 0x02, Zero, Zero, Zero)
                    }

                    Return (G1AB) /* \G1AB */
                }
            }

            Method (G401, 1, Serialized)
            {
                Local1 = One
                If (Local1)
                {
                    Local1 = \_GPE.G40B (Arg0, Zero, 0x08)
                }

                If (Local1)
                {
                    If (CondRefOf (\_GPE.G40C))
                    {
                        Local1 = \_GPE.G40C (Arg0, Zero, 0x08)
                    }
                }
            }

            Method (G456, 0, NotSerialized)
            {
                Local1 = One
                If (Local1)
                {
                    Local1 = \_GPE.G40B (Zero, Zero, 0x09)
                }

                If (Local1)
                {
                    If (CondRefOf (\_GPE.G40C))
                    {
                        Local1 = \_GPE.G40C (Zero, Zero, 0x09)
                    }
                }
            }
        }

        Name (G405, 0xFF)
        Method (G404, 1, Serialized)
        {
            If ((Arg0 && (G405 == 0xFF)))
            {
                Local0 = 0x07
                If (G46D ())
                {
                    Local0 |= 0x08
                }

                G405 = Local0
            }

            Return (G405) /* \_SB_.PC00.GFX0.G405 */
        }

        Method (G406, 2, NotSerialized)
        {
        }
    }

    Scope (_SB.PC00.PEG0.PEGP)
    {
        OperationRegion (VIDR, PCI_Config, Zero, 0xF0)
        Field (VIDR, WordAcc, NoLock, Preserve)
        {
            G407,   16, 
            Offset (0x0B), 
            LNKV,   8
        }

        Name (G405, 0xFF)
        Method (G404, 1, Serialized)
        {
            If ((Arg0 && (G405 == 0xFF)))
            {
                Local0 = 0x07
                If (G46D ())
                {
                    Local0 |= 0x08
                }

                G405 = Local0
            }

            Return (G405) /* \_SB_.PC00.PEG0.PEGP.G405 */
        }

        Method (G406, 2, NotSerialized)
        {
            If ((Arg0 && Arg1)){}
        }
    }

    Scope (_SB.PC00)
    {
        Name (LACW, Zero)
        Name (LDCW, Zero)
        Name (PL03, Zero)
        Method (PL00, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.IETM.DXGP))
            {
                ^^IETM.DXGP (0x03, Zero, Zero)
            }
            Else
            {
                ^LPCB.EC0.DGPS (Zero, Zero, Zero, Zero)
            }
        }

        Method (PL04, 0, NotSerialized)
        {
            Local0 = One
            If (CondRefOf (DPTF))
            {
                If (CondRefOf (\_SB.IETM.DOSS))
                {
                    If ((^^IETM.DOSS == One))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }
    }

    Scope (_SB.PC00)
    {
        Name (G488, 0x03)
    }

    Scope (_SB.PC00)
    {
        Method (PL02, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (G484, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC12))
            {
                LACW = ^LPCB.EC0.EC12 ()
            }

            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC13))
            {
                LDCW = ^LPCB.EC0.EC13 ()
            }

            Local1 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC11))
            {
                Local1 = ^LPCB.EC0.EC11 ()
            }
        }
    }

    Scope (_SB.PC00.PEG0.PEGP)
    {
        Name (DODS, Package (0x05)
        {
            0x8000A450, 
            0x8000B320, 
            0x8000B330, 
            0x8000B340, 
            0x80007360
        })
        Name (DODI, Buffer (0x05)
        {
             0x00, 0x03, 0x04, 0x05, 0x06                     // .....
        })
        Name (DODC, Zero)
        Name (MDTL, Package (0x1C)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (DEDP, 0x8000A450)
        Method (NDOD, 0, NotSerialized)
        {
            If ((DODC == Zero))
            {
                Local0 = DIDM ()
                DODS [Zero] = DerefOf (Local0 [Zero])
                DODC = One
            }

            If (CondRefOf (\_SB.PC00.PEG0.PEGP.G416))
            {
                G416 ()
            }

            Return (DODS) /* \_SB_.PC00.PEG0.PEGP.DODS */
        }
    }

    Scope (_SB.PC00)
    {
        Method (PL01, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (G47F, 1, Serialized)
        {
            If ((G24F != 0x10DE))
            {
                Return (Zero)
            }

            If (CondRefOf (\_SB.PC00.G47B))
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (CondRefOf (\_SB.PC00.PEG0.PEGP.G464))
                        {
                            If ((^PEG0.PEGP.G464 != 0xFFFF))
                            {
                                PL00 ()
                                If ((TH05 != One))
                                {
                                    G480 ()
                                    TH05 = Zero
                                }
                            }
                        }
                    }
                    Case (One)
                    {
                        G48A (0xD5)
                    }
                    Case (0x02)
                    {
                        If ((G24C == Zero))
                        {
                            PL00 ()
                            If ((TH05 != One))
                            {
                                G480 ()
                                TH05 = Zero
                            }
                        }
                        Else
                        {
                        }
                    }
                    Case (0x03)
                    {
                        G48A (0xD5)
                    }
                    Case (0x04)
                    {
                        If ((G24B == Zero))
                        {
                            PL00 ()
                            If ((TH05 != One))
                            {
                                G480 ()
                                TH05 = Zero
                            }
                        }
                        Else
                        {
                        }
                    }
                    Case (0x05)
                    {
                        Local0 = PL01 ()
                        If ((Local0 == Zero))
                        {
                            PL00 ()
                            If ((TH05 != One))
                            {
                                G480 ()
                                TH05 = Zero
                            }
                        }
                    }
                    Case (0x06)
                    {
                        Local0 = PL01 ()
                        If ((Local0 == Zero))
                        {
                            PL00 ()
                            If ((TH05 != One))
                            {
                                G480 ()
                                TH05 = Zero
                            }
                        }
                    }

                }
            }
        }

        Method (G480, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC12))
            {
                LACW = ^LPCB.EC0.EC12 ()
            }

            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC13))
            {
                LDCW = ^LPCB.EC0.EC13 ()
            }

            Local1 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.EC0.EC11))
            {
                Local1 = ^LPCB.EC0.EC11 ()
            }

            Switch (ToInteger (G25F))
            {
                Case (0x1FBB)
                {
                    If ((Local1 == One))
                    {
                        If ((LACW >= 0xC8))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0xC7) && (LACW >= 0x96)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x95) && (LACW >= 0x78)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x77) && (LACW >= 0x5A)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x59) && (LACW >= 0x50)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x4F) && (LACW >= 0x41)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x40) && (LACW >= 0x2D)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x2C) && (LACW >= 0x1B)))
                        {
                            G47B (0xD5)
                        }
                        Else
                        {
                        }
                    }
                    Else
                    {
                        G47B (0xD2)
                    }
                }
                Case (0x1F97)
                {
                    If ((Local1 == One))
                    {
                        If ((LACW >= 0xC8))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0xC7) && (LACW >= 0x96)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x95) && (LACW >= 0x78)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x77) && (LACW >= 0x5A)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x59) && (LACW >= 0x50)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x4F) && (LACW >= 0x41)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x40) && (LACW >= 0x2D)))
                        {
                            G47B (0xD2)
                        }
                        ElseIf (((LACW <= 0x2C) && (LACW >= 0x1B)))
                        {
                            G47B (0xD5)
                        }
                        Else
                        {
                        }
                    }
                    Else
                    {
                        G47B (0xD2)
                    }
                }

            }
        }

        Method (G479, 0, NotSerialized)
        {
            Return (Buffer (Zero){})
        }

        Method (G47A, 0, NotSerialized)
        {
            Return (Buffer (Zero){})
        }

        Method (G499, 0, NotSerialized)
        {
            Return (Buffer (Zero){})
        }

        Method (G4B4, 0, NotSerialized)
        {
            Return (Buffer (Zero){})
        }

        Method (G4B5, 0, NotSerialized)
        {
            Return (Buffer (Zero){})
        }
    }

    Scope (_SB.PC00)
    {
        Method (G478, 0, NotSerialized)
        {
            SGPO (SGGP, PWE0, PWG0, PWA0, One)
            Local7 = Zero
            While ((Local7 <= 0x0A))
            {
                If ((SGIV (One, G263, G264, G268) == One))
                {
                    Break
                }

                Sleep (One)
                Local7++
            }

            Sleep (0x04)
            SGPO (SGGP, HRE0, HRG0, HRA0, Zero)
        }
    }

    Scope (\)
    {
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x30), 
                ,   5, 
            APME,   1, 
            Offset (0x34), 
                ,   5, 
            APMS,   1
        }

        Field (SPRT, ByteAcc, Lock, Preserve)
        {
            SSCP,   8, 
            SMDD,   8
        }

        Method (GSWS, 1, Serialized)
        {
            While (APMS)
            {
                Stall (One)
            }

            While ((APME != One))
            {
                APME = One
            }

            Local0 = ((Arg0 >> 0x08) & 0xFF)
            SMDD = Local0
            Stall (0x0A)
            Local1 = (Arg0 & 0xFF)
            SSCP = Local1
            Stall (0x32)
            While (APMS)
            {
                Stall (One)
            }
        }
    }

    Scope (_SB)
    {
        Mutex (MSMI, 0x00)
        Method (SSMI, 5, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            If (Arg4)
            {
                Acquire (_GL, 0xFFFF)
            }

            EAX = (Arg0 << 0x10)
            EBX = Arg1
            ECX = Arg2
            EDX = Arg3
            REFS = Zero
            GSWS (Arg0)
            Local0 = REFS /* \REFS */
            If (Arg4)
            {
                Release (_GL)
            }

            Release (MSMI)
            Return (Local0)
        }
    }

    Scope (_GPE)
    {
        Method (_L73, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    If ((\_SB.PC01.TRP0.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP0, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP1.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP1, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP2.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP2, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP3.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP3, 0x02) // Device Wake
                    }
                }
                Else
                {
                    If ((\_SB.PC00.TRP0.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP0, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP1.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP1, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP2.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP2, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP3.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP3, 0x02) // Device Wake
                    }
                }
            }

            \_SB.PC00.RP01.HPME ()
            \_SB.PC00.RP02.HPME ()
            \_SB.PC00.RP03.HPME ()
            \_SB.PC00.RP04.HPME ()
            \_SB.PC00.RP05.HPME ()
            \_SB.PC00.RP06.HPME ()
            \_SB.PC00.RP07.HPME ()
            \_SB.PC00.RP08.HPME ()
            \_SB.PC00.RP09.HPME ()
            \_SB.PC00.RP10.HPME ()
            \_SB.PC00.RP11.HPME ()
            \_SB.PC00.RP12.HPME ()
            \_SB.PC00.RP13.HPME ()
            \_SB.PC00.RP14.HPME ()
            \_SB.PC00.RP15.HPME ()
            \_SB.PC00.RP16.HPME ()
            \_SB.PC00.RP17.HPME ()
            \_SB.PC00.RP18.HPME ()
            \_SB.PC00.RP19.HPME ()
            \_SB.PC00.RP20.HPME ()
            \_SB.PC00.RP21.HPME ()
            \_SB.PC00.RP22.HPME ()
            \_SB.PC00.RP23.HPME ()
            \_SB.PC00.RP24.HPME ()
            If ((D6F0 == One))
            {
                \_SB.PC00.PEG0.HPME ()
                Notify (\_SB.PC00.PEG0, 0x02) // Device Wake
                Notify (\_SB.PC00.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((D1F0 == One))
            {
                \_SB.PC00.PEG1.HPME ()
                Notify (\_SB.PC00.PEG1, 0x02) // Device Wake
            }

            If ((D1F1 == One))
            {
                \_SB.PC00.PEG2.HPME ()
                Notify (\_SB.PC00.PEG2, 0x02) // Device Wake
            }

            If ((D1F2 == One))
            {
                If (CondRefOf (\_SB.PC00.PEG3))
                {
                    \_SB.PC00.PEG3.HPME ()
                    Notify (\_SB.PC00.PEG3, 0x02) // Device Wake
                }
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            Sleep (0x64)
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPEV ()
                    \_SB.PC01.TRP1.HPEV ()
                    \_SB.PC01.TRP2.HPEV ()
                    \_SB.PC01.TRP3.HPEV ()
                }
                Else
                {
                    \_SB.PC00.TRP0.HPEV ()
                    \_SB.PC00.TRP1.HPEV ()
                    \_SB.PC00.TRP2.HPEV ()
                    \_SB.PC00.TRP3.HPEV ()
                }
            }

            If ((PG0E == One))
            {
                \_SB.PC00.PEG0.HPEV ()
            }

            If ((PG1E == One))
            {
                \_SB.PC00.PEG1.HPEV ()
            }

            If ((PG2E == One))
            {
                \_SB.PC00.PEG2.HPEV ()
            }

            If ((PG3E == One))
            {
                \_SB.PC00.PEG3.HPEV ()
            }

            If (((\_SB.PC00.RP01.VDID != 0xFFFFFFFF) && \_SB.PC00.RP01.HPSX))
            {
                If (\_SB.PC00.RP01.PDCX)
                {
                    \_SB.PC00.RP01.PDCX = One
                    \_SB.PC00.RP01.HPSX = One
                    If (!\_SB.PC00.RP01.PDSX)
                    {
                        \_SB.PC00.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP01.HPSX = One
                }
            }

            If (((\_SB.PC00.RP02.VDID != 0xFFFFFFFF) && \_SB.PC00.RP02.HPSX))
            {
                If (\_SB.PC00.RP02.PDCX)
                {
                    \_SB.PC00.RP02.PDCX = One
                    \_SB.PC00.RP02.HPSX = One
                    If (!\_SB.PC00.RP02.PDSX)
                    {
                        \_SB.PC00.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP02.HPSX = One
                }
            }

            If (((\_SB.PC00.RP03.VDID != 0xFFFFFFFF) && \_SB.PC00.RP03.HPSX))
            {
                If (\_SB.PC00.RP03.PDCX)
                {
                    \_SB.PC00.RP03.PDCX = One
                    \_SB.PC00.RP03.HPSX = One
                    If (!\_SB.PC00.RP03.PDSX)
                    {
                        \_SB.PC00.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP03.HPSX = One
                }
            }

            If (((\_SB.PC00.RP04.VDID != 0xFFFFFFFF) && \_SB.PC00.RP04.HPSX))
            {
                If (\_SB.PC00.RP04.PDCX)
                {
                    \_SB.PC00.RP04.PDCX = One
                    \_SB.PC00.RP04.HPSX = One
                    If (!\_SB.PC00.RP04.PDSX)
                    {
                        \_SB.PC00.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP04.HPSX = One
                }
            }

            If (((\_SB.PC00.RP05.VDID != 0xFFFFFFFF) && \_SB.PC00.RP05.HPSX))
            {
                If (\_SB.PC00.RP05.PDCX)
                {
                    \_SB.PC00.RP05.PDCX = One
                    \_SB.PC00.RP05.HPSX = One
                    If (!\_SB.PC00.RP05.PDSX)
                    {
                        \_SB.PC00.RP05.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP05, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP05.HPSX = One
                }
            }

            If (((\_SB.PC00.RP06.VDID != 0xFFFFFFFF) && \_SB.PC00.RP06.HPSX))
            {
                If (\_SB.PC00.RP06.PDCX)
                {
                    \_SB.PC00.RP06.PDCX = One
                    \_SB.PC00.RP06.HPSX = One
                    If (!\_SB.PC00.RP06.PDSX)
                    {
                        \_SB.PC00.RP06.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP06, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP06.HPSX = One
                }
            }

            If (((\_SB.PC00.RP07.VDID != 0xFFFFFFFF) && \_SB.PC00.RP07.HPSX))
            {
                If (\_SB.PC00.RP07.PDCX)
                {
                    \_SB.PC00.RP07.PDCX = One
                    \_SB.PC00.RP07.HPSX = One
                    If (!\_SB.PC00.RP07.PDSX)
                    {
                        \_SB.PC00.RP07.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        Notify (\_SB.PC00.RP07, Zero) // Bus Check
                    }
                    ElseIf (ECON)
                    {
                        Notify (\_SB.PC00.RP07, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PC00.RP07.HPSX = One
                }
            }

            If (((\_SB.PC00.RP08.VDID != 0xFFFFFFFF) && \_SB.PC00.RP08.HPSX))
            {
                If (\_SB.PC00.RP08.PDCX)
                {
                    \_SB.PC00.RP08.PDCX = One
                    \_SB.PC00.RP08.HPSX = One
                    If (!\_SB.PC00.RP08.PDSX)
                    {
                        \_SB.PC00.RP08.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        Notify (\_SB.PC00.RP08, Zero) // Bus Check
                    }
                    ElseIf (ECON)
                    {
                        Notify (\_SB.PC00.RP08, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PC00.RP08.HPSX = One
                }
            }

            If (((\_SB.PC00.RP09.VDID != 0xFFFFFFFF) && \_SB.PC00.RP09.HPSX))
            {
                If (\_SB.PC00.RP09.PDCX)
                {
                    \_SB.PC00.RP09.PDCX = One
                    \_SB.PC00.RP09.HPSX = One
                    If (!\_SB.PC00.RP09.PDSX)
                    {
                        \_SB.PC00.RP09.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP09, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP09.HPSX = One
                }
            }

            If (((\_SB.PC00.RP10.VDID != 0xFFFFFFFF) && \_SB.PC00.RP10.HPSX))
            {
                If (\_SB.PC00.RP10.PDCX)
                {
                    \_SB.PC00.RP10.PDCX = One
                    \_SB.PC00.RP10.HPSX = One
                    If (!\_SB.PC00.RP10.PDSX)
                    {
                        \_SB.PC00.RP10.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP10, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP10.HPSX = One
                }
            }

            If (((\_SB.PC00.RP11.VDID != 0xFFFFFFFF) && \_SB.PC00.RP11.HPSX))
            {
                If (\_SB.PC00.RP11.PDCX)
                {
                    \_SB.PC00.RP11.PDCX = One
                    \_SB.PC00.RP11.HPSX = One
                    If (!\_SB.PC00.RP11.PDSX)
                    {
                        \_SB.PC00.RP11.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP11, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP11.HPSX = One
                }
            }

            If (((\_SB.PC00.RP12.VDID != 0xFFFFFFFF) && \_SB.PC00.RP12.HPSX))
            {
                If (\_SB.PC00.RP12.PDCX)
                {
                    \_SB.PC00.RP12.PDCX = One
                    \_SB.PC00.RP12.HPSX = One
                    If (!\_SB.PC00.RP12.PDSX)
                    {
                        \_SB.PC00.RP12.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP12, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP12.HPSX = One
                }
            }

            If (((\_SB.PC00.RP13.VDID != 0xFFFFFFFF) && \_SB.PC00.RP13.HPSX))
            {
                If (\_SB.PC00.RP13.PDCX)
                {
                    \_SB.PC00.RP13.PDCX = One
                    \_SB.PC00.RP13.HPSX = One
                    If (!\_SB.PC00.RP13.PDSX)
                    {
                        \_SB.PC00.RP13.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP13, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP13.HPSX = One
                }
            }

            If (((\_SB.PC00.RP14.VDID != 0xFFFFFFFF) && \_SB.PC00.RP14.HPSX))
            {
                If (\_SB.PC00.RP14.PDCX)
                {
                    \_SB.PC00.RP14.PDCX = One
                    \_SB.PC00.RP14.HPSX = One
                    If (!\_SB.PC00.RP14.PDSX)
                    {
                        \_SB.PC00.RP14.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP14, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP14.HPSX = One
                }
            }

            If (((\_SB.PC00.RP15.VDID != 0xFFFFFFFF) && \_SB.PC00.RP15.HPSX))
            {
                If (\_SB.PC00.RP15.PDCX)
                {
                    \_SB.PC00.RP15.PDCX = One
                    \_SB.PC00.RP15.HPSX = One
                    If (!\_SB.PC00.RP15.PDSX)
                    {
                        \_SB.PC00.RP15.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP15, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP15.HPSX = One
                }
            }

            If (((\_SB.PC00.RP16.VDID != 0xFFFFFFFF) && \_SB.PC00.RP16.HPSX))
            {
                If (\_SB.PC00.RP16.PDCX)
                {
                    \_SB.PC00.RP16.PDCX = One
                    \_SB.PC00.RP16.HPSX = One
                    If (!\_SB.PC00.RP16.PDSX)
                    {
                        \_SB.PC00.RP16.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP16, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP16.HPSX = One
                }
            }

            If (((\_SB.PC00.RP17.VDID != 0xFFFFFFFF) && \_SB.PC00.RP17.HPSX))
            {
                If (\_SB.PC00.RP17.PDCX)
                {
                    \_SB.PC00.RP17.PDCX = One
                    \_SB.PC00.RP17.HPSX = One
                    If (!\_SB.PC00.RP17.PDSX)
                    {
                        \_SB.PC00.RP17.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP17, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP17.HPSX = One
                }
            }

            If (((\_SB.PC00.RP18.VDID != 0xFFFFFFFF) && \_SB.PC00.RP18.HPSX))
            {
                If (\_SB.PC00.RP18.PDCX)
                {
                    \_SB.PC00.RP18.PDCX = One
                    \_SB.PC00.RP18.HPSX = One
                    If (!\_SB.PC00.RP18.PDSX)
                    {
                        \_SB.PC00.RP18.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP18, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP18.HPSX = One
                }
            }

            If (((\_SB.PC00.RP19.VDID != 0xFFFFFFFF) && \_SB.PC00.RP19.HPSX))
            {
                If (\_SB.PC00.RP19.PDCX)
                {
                    \_SB.PC00.RP19.PDCX = One
                    \_SB.PC00.RP19.HPSX = One
                    If (!\_SB.PC00.RP19.PDSX)
                    {
                        \_SB.PC00.RP19.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP19, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP19.HPSX = One
                }
            }

            If (((\_SB.PC00.RP20.VDID != 0xFFFFFFFF) && \_SB.PC00.RP20.HPSX))
            {
                If (\_SB.PC00.RP20.PDCX)
                {
                    \_SB.PC00.RP20.PDCX = One
                    \_SB.PC00.RP20.HPSX = One
                    If (!\_SB.PC00.RP20.PDSX)
                    {
                        \_SB.PC00.RP20.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP20, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP20.HPSX = One
                }
            }

            If (((\_SB.PC00.RP21.VDID != 0xFFFFFFFF) && \_SB.PC00.RP21.HPSX))
            {
                If (\_SB.PC00.RP21.PDCX)
                {
                    \_SB.PC00.RP21.PDCX = One
                    \_SB.PC00.RP21.HPSX = One
                    If (!\_SB.PC00.RP21.PDSX)
                    {
                        \_SB.PC00.RP21.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP21, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP21.HPSX = One
                }
            }

            If (((\_SB.PC00.RP22.VDID != 0xFFFFFFFF) && \_SB.PC00.RP22.HPSX))
            {
                If (\_SB.PC00.RP22.PDCX)
                {
                    \_SB.PC00.RP22.PDCX = One
                    \_SB.PC00.RP22.HPSX = One
                    If (!\_SB.PC00.RP22.PDSX)
                    {
                        \_SB.PC00.RP22.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP22, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP22.HPSX = One
                }
            }

            If (((\_SB.PC00.RP23.VDID != 0xFFFFFFFF) && \_SB.PC00.RP23.HPSX))
            {
                If (\_SB.PC00.RP23.PDCX)
                {
                    \_SB.PC00.RP23.PDCX = One
                    \_SB.PC00.RP23.HPSX = One
                    If (!\_SB.PC00.RP23.PDSX)
                    {
                        \_SB.PC00.RP23.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP23, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP23.HPSX = One
                }
            }

            If (((\_SB.PC00.RP24.VDID != 0xFFFFFFFF) && \_SB.PC00.RP24.HPSX))
            {
                If (\_SB.PC00.RP24.PDCX)
                {
                    \_SB.PC00.RP24.PDCX = One
                    \_SB.PC00.RP24.HPSX = One
                    If (!\_SB.PC00.RP24.PDSX)
                    {
                        \_SB.PC00.RP24.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP24, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP24.HPSX = One
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPEV ()
                    \_SB.PC01.TRP1.HPEV ()
                    \_SB.PC01.TRP2.HPEV ()
                    \_SB.PC01.TRP3.HPEV ()
                }
                Else
                {
                    \_SB.PC00.TRP0.HPEV ()
                    \_SB.PC00.TRP1.HPEV ()
                    \_SB.PC00.TRP2.HPEV ()
                    \_SB.PC00.TRP3.HPEV ()
                }
            }
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PC00.GFX0.GSSE && !GSMI))
            {
                \_SB.PC00.GFX0.GSCI ()
            }
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            Local0 = SSCI /* \SSCI */
            If (Local0)
            {
                SSCI = Zero
                If ((Local0 == 0x05))
                {
                    If (\_SB.WLBU._STA ())
                    {
                        If (CondRefOf (\_SB.HIDD._STA))
                        {
                            If (\_SB.HIDD._STA ())
                            {
                                \_SB.HIDD.HPEM (0x08)
                            }
                        }

                        Notify (\_SB.WLBU, 0x80) // Status Change
                    }
                    Else
                    {
                        \_SB.WMIV.GVWE (Local0, Zero)
                    }
                }

                If (CondRefOf (\_SB.PC00.G475))
                {
                    \_SB.PC00.G475 (Local0)
                }

                If ((Local0 == 0x0A))
                {
                    \_SB.WMIV.GVWE (0x18, Zero)
                }
            }
        }

        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_GPE.AL6F))
            {
                AL6F ()
            }

            If ((SGGP == One))
            {
                If (CondRefOf (\_GPE.P0L6))
                {
                    P0L6 ()
                }
            }

            If ((P1GP == One))
            {
                If (CondRefOf (\_GPE.P1L6))
                {
                    P1L6 ()
                }
            }

            If ((P2GP == One))
            {
                If (CondRefOf (\_GPE.P2L6))
                {
                    P2L6 ()
                }
            }

            If ((P3GP == One))
            {
                If (CondRefOf (\_GPE.P3L6))
                {
                    P3L6 ()
                }
            }

            If (CondRefOf (\_SB.PC00.HGGE))
            {
                \_SB.PC00.HGGE ()
            }
        }

        Method (_L72, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.AWAC))
            {
                \_SB.AWAC.WAST = One
                Notify (\_SB.AWAC, 0x02) // Device Wake
            }
        }

        Method (_L6D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.PC00.XHCI))
            {
                \_SB.PC00.XHCI.GPEH ()
            }

            If (CondRefOf (\_SB.PC00.HDAS))
            {
                \_SB.PC00.HDAS.GPEH ()
            }

            If (CondRefOf (\_SB.PC00.GLAN))
            {
                \_SB.PC00.GLAN.GPEH ()
            }

            If (CondRefOf (\_SB.PC00.CNVW))
            {
                \_SB.PC00.CNVW.GPEH ()
            }

            If (CondRefOf (\_SB.PC00.XDCI))
            {
                \_SB.PC00.XDCI.GPEH ()
            }

            Local3 = Zero
            If (CondRefOf (\_SB.PC00.D3C))
            {
                If ((\_SB.PC00.D3C._STA () == Zero))
                {
                    Local3 = 0x03
                    \_SB.PC00.D3C._ON ()
                }
            }

            If (CondRefOf (\_SB.PC00.TDM0))
            {
                If ((\_SB.PC00.TDM0._STA () == 0x0F))
                {
                    Local0 = Zero
                    If ((\_SB.PC00.TDM0.STAT == Zero))
                    {
                        \_SB.PC00.TBT0._ON ()
                        Local0 = One
                    }

                    Local1 = \_SB.PC00.TDM0.PMES /* External reference */
                    If ((Local1 == Zero))
                    {
                        If ((Local0 == One))
                        {
                            If ((\_SB.PC00.TDM0.PMST == 0x03))
                            {
                                If ((\_SB.PC00.TDM0.MEMS == Zero))
                                {
                                    If ((\_SB.PC00.TDM0.STAT == One))
                                    {
                                        \_SB.PC00.TBT0._OFF ()
                                    }
                                }
                            }
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TDM1))
            {
                If ((\_SB.PC00.TDM1._STA () == 0x0F))
                {
                    Local0 = Zero
                    If ((\_SB.PC00.TDM1.STAT == Zero))
                    {
                        \_SB.PC00.TBT1._ON ()
                        Local0 = One
                    }

                    Local1 = \_SB.PC00.TDM1.PMES /* External reference */
                    If ((Local1 == Zero))
                    {
                        If ((Local0 == One))
                        {
                            If ((\_SB.PC00.TDM1.PMST == 0x03))
                            {
                                If ((\_SB.PC00.TDM1.MEMS == Zero))
                                {
                                    If ((\_SB.PC00.TDM1.STAT == One))
                                    {
                                        \_SB.PC00.TBT1._OFF ()
                                    }
                                }
                            }
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TXDC))
            {
                If ((\_SB.PC00.TXDC._STA () == 0x0F))
                {
                    Local1 = \_SB.PC00.TXDC.PMES /* External reference */
                    If ((Local1 == One))
                    {
                        Notify (\_SB.PC00.TXDC, 0x02) // Device Wake
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If ((\_SB.PC00.TXHC._STA () == 0x0F))
                {
                    Local1 = \_SB.PC00.TXHC.PMES /* External reference */
                    If ((Local1 == One))
                    {
                        Notify (\_SB.PC00.TXHC, 0x02) // Device Wake
                    }
                }
            }
        }
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420") /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PSME == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            DerefOf (SPLX [One]) [Zero] = PDT1 /* \PDT1 */
            DerefOf (SPLX [One]) [One] = PLM1 /* \PLM1 */
            DerefOf (SPLX [One]) [0x02] = PTW1 /* \PTW1 */
            Return (SPLX) /* \PSM_.SPLX */
        }

        Name (DPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            DerefOf (DPLX [One]) [Zero] = DDT1 /* \DDT1 */
            DerefOf (DPLX [One]) [One] = DDP1 /* \DDP1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [Zero]
                 = DLI1 /* \DLI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [One]
                 = DPL1 /* \DPL1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x02]
                 = DTW1 /* \DTW1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x03]
                 = DMI1 /* \DMI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x04]
                 = DMA1 /* \DMA1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x05]
                 = DMT1 /* \DMT1 */
            Return (DPLX) /* \PSM_.DPLX */
        }
    }

    Scope (_SB.PC00)
    {
        Method (PINR, 2, Serialized)
        {
            Name (GPIR, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            CreateWordField (GPIR, 0x17, PINF)
            PINF = (GINF (Arg1, 0x06) + Arg0)
            Return (GPIR) /* \_SB_.PC00.PINR.GPIR */
        }

        Method (VPIN, 1, Serialized)
        {
            Name (GPOR, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PC00.XHCI.RHUB.HS04.VGPO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            CreateWordField (GPOR, 0x17, PINV)
            PINV = Arg0
            Return (GPOR) /* \_SB_.PC00.VPIN.GPOR */
        }

        Method (DSMI, 4, Serialized)
        {
            Local3 = (Arg3 << 0x18)
            Local2 = (Arg2 << 0x10)
            Local1 = (Arg1 << 0x08)
            Local0 = (Local1 | Arg0)
            Local0 |= Local2
            Local0 |= Local3
            Return (Local0)
        }

        Method (GPPI, 4, Serialized)
        {
            Local3 = (Arg3 << 0x18)
            Local2 = (Arg2 << 0x10)
            Local1 = (Arg1 << 0x08)
            Local0 = (Local1 | Arg0)
            Local0 |= Local2
            Local0 |= Local3
            Return (Local0)
        }

        Method (GRID, 1, Serialized)
        {
            Name (BUF, Buffer (0x09){})
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    BUF [Zero] = L0H0 /* \L0H0 */
                    BUF [One] = L0H1 /* \L0H1 */
                    BUF [0x02] = L0H2 /* \L0H2 */
                    BUF [0x03] = L0H3 /* \L0H3 */
                    BUF [0x04] = L0H4 /* \L0H4 */
                    BUF [0x05] = L0H5 /* \L0H5 */
                    BUF [0x06] = L0H6 /* \L0H6 */
                    BUF [0x07] = L0H7 /* \L0H7 */
                    BUF [0x08] = L0H8 /* \L0H8 */
                }
                Case (One)
                {
                    BUF [Zero] = L1H0 /* \L1H0 */
                    BUF [One] = L1H1 /* \L1H1 */
                    BUF [0x02] = L1H2 /* \L1H2 */
                    BUF [0x03] = L1H3 /* \L1H3 */
                    BUF [0x04] = L1H4 /* \L1H4 */
                    BUF [0x05] = L1H5 /* \L1H5 */
                    BUF [0x06] = L1H6 /* \L1H6 */
                    BUF [0x07] = L1H7 /* \L1H7 */
                    BUF [0x08] = L1H8 /* \L1H8 */
                }
                Case (0x02)
                {
                    BUF [Zero] = L2H0 /* \L2H0 */
                    BUF [One] = L2H1 /* \L2H1 */
                    BUF [0x02] = L2H2 /* \L2H2 */
                    BUF [0x03] = L2H3 /* \L2H3 */
                    BUF [0x04] = L2H4 /* \L2H4 */
                    BUF [0x05] = L2H5 /* \L2H5 */
                    BUF [0x06] = L2H6 /* \L2H6 */
                    BUF [0x07] = L2H7 /* \L2H7 */
                    BUF [0x08] = L2H8 /* \L2H8 */
                }
                Default
                {
                    BUF [Zero] = L3H0 /* \L3H0 */
                    BUF [One] = L3H1 /* \L3H1 */
                    BUF [0x02] = L3H2 /* \L3H2 */
                    BUF [0x03] = L3H3 /* \L3H3 */
                    BUF [0x04] = L3H4 /* \L3H4 */
                    BUF [0x05] = L3H5 /* \L3H5 */
                    BUF [0x06] = L3H6 /* \L3H6 */
                    BUF [0x07] = L3H7 /* \L3H7 */
                    BUF [0x08] = L3H8 /* \L3H8 */
                }

            }

            Return (ToString (BUF, Ones))
        }

        Method (HCID, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = L0SM /* \L0SM */
                }
                Case (One)
                {
                    Local0 = L1SM /* \L1SM */
                }
                Case (0x02)
                {
                    Local0 = L2SM /* \L2SM */
                }
                Case (0x03)
                {
                    Local0 = L3SM /* \L3SM */
                }
                Case (0x04)
                {
                    Local0 = L4SM /* \L4SM */
                }
                Default
                {
                    Local0 = L5SM /* \L5SM */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("INT3471")
                }
                Case (One)
                {
                    Return ("INT33BE")
                }
                Case (0x02)
                {
                    Return ("INT3476")
                }
                Case (0x03)
                {
                    Return ("INT3477")
                }
                Case (0x04)
                {
                    Return ("INT3474")
                }
                Case (0x05)
                {
                    Return ("INT3473")
                }
                Case (0x06)
                {
                    Return ("INT3475")
                }
                Case (0x07)
                {
                    Return ("INT3478")
                }
                Case (0x08)
                {
                    Return ("INT3479")
                }
                Case (0x09)
                {
                    Return ("INT347A")
                }
                Case (0x0A)
                {
                    Return ("INT347B")
                }
                Case (0x0B)
                {
                    Return ("OVTI2742")
                }
                Case (0x0C)
                {
                    Return ("OVTI9234")
                }
                Case (0x0D)
                {
                    Return ("OVTI8856")
                }
                Case (0x0E)
                {
                    Return ("OVTIF860")
                }
                Case (0x0F)
                {
                    Return ("SONY362A")
                }
                Case (0x10)
                {
                    Return ("SONY488A")
                }
                Case (0x11)
                {
                    Return ("OVTI01AS")
                }
                Case (0x12)
                {
                    Return ("OVTID858")
                }
                Case (0x13)
                {
                    Return ("OVTI5678")
                }
                Case (0x14)
                {
                    Return ("OVTI9738")
                }
                Case (0x15)
                {
                    Return ("HIMX11B1")
                }
                Default
                {
                    Return (GRID (Arg0))
                }

            }
        }

        Method (FHCI, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = F0FM /* \F0FM */
                }
                Case (One)
                {
                    Local0 = F1FM /* \F1FM */
                }
                Case (0x02)
                {
                    Local0 = F2FM /* \F2FM */
                }
                Case (0x03)
                {
                    Local0 = F3FM /* \F3FM */
                }
                Case (0x04)
                {
                    Local0 = F4FM /* \F4FM */
                }
                Default
                {
                    Local0 = F5FM /* \F5FM */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("TXNW3643")
                }
                Case (One)
                {
                    Return ("PWRC0000")
                }
                Default
                {
                    Return ("TXNW3643")
                }

            }
        }

        Method (FMID, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = F0FM /* \F0FM */
                }
                Case (One)
                {
                    Local0 = F1FM /* \F1FM */
                }
                Case (0x02)
                {
                    Local0 = F2FM /* \F2FM */
                }
                Case (0x03)
                {
                    Local0 = F3FM /* \F3FM */
                }
                Case (0x04)
                {
                    Local0 = F4FM /* \F4FM */
                }
                Default
                {
                    Local0 = F5FM /* \F5FM */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("LM3643")
                }
                Case (One)
                {
                    Return ("PMICWRC")
                }
                Default
                {
                    Return ("LM3643")
                }

            }
        }

        Method (FMLS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (F0MS) /* \F0MS */
                }
                Case (One)
                {
                    Return (F1MS) /* \F1MS */
                }
                Case (0x02)
                {
                    Return (F2MS) /* \F2MS */
                }
                Case (0x03)
                {
                    Return (F3MS) /* \F3MS */
                }
                Case (0x04)
                {
                    Return (F4MS) /* \F4MS */
                }
                Default
                {
                    Return (F5MS) /* \F5MS */
                }

            }
        }

        Method (AGPN, 2, Serialized)
        {
            Local0 = (Arg1 << 0x10)
            Local0 |= Arg0
            Local1 = GNUM (Local0)
            Return (Local1)
        }

        Method (CDEP, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                If ((C0TP == One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC0
                            })
                        }

                    }
                }

                If ((C0TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP0
                    })
                }
            }

            If ((Arg0 == One))
            {
                If ((C1TP == One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC1
                            })
                        }

                    }
                }

                If ((C1TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP1
                    })
                }
            }

            If ((Arg0 == 0x02))
            {
                If ((C2TP == One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC2
                            })
                        }

                    }
                }

                If ((C2TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP2
                    })
                }
            }

            If ((Arg0 == 0x03))
            {
                If ((C3TP == One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC3
                            })
                        }

                    }
                }

                If ((C3TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP3
                    })
                }
            }

            If ((Arg0 == 0x04))
            {
                If ((C4TP == One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC4
                            })
                        }

                    }
                }

                If ((C4TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP4
                    })
                }
            }

            If ((Arg0 == 0x05))
            {
                If ((C5TP == One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC5
                            })
                        }

                    }
                }

                If ((C5TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP5
                    })
                }
            }

            Return (Package (0x01)
            {
                PC00
            })
        }

        Method (CDEG, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Zero)
                }
                Case (One)
                {
                    Return (0x2D)
                }
                Case (0x02)
                {
                    Return (0x5A)
                }
                Case (0x03)
                {
                    Return (0x87)
                }
                Case (0x04)
                {
                    Return (0xB4)
                }
                Case (0x05)
                {
                    Return (0xE1)
                }
                Case (0x06)
                {
                    Return (0x010E)
                }
                Case (0x07)
                {
                    Return (0x013B)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Device (DSC0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C0GP > Zero))
                {
                    Local1 = PINR (C0P0, C0G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > One))
                {
                    Local1 = PINR (C0P1, C0G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > 0x02))
                {
                    Local1 = PINR (C0P2, C0G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > 0x03))
                {
                    Local1 = PINR (C0P3, C0G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If ((C0TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C0VE /* \C0VE */
                PAR [One] = C0TP /* \C0TP */
                PAR [0x03] = C0CV /* \C0CV */
                PAR [0x04] = C0IC /* \C0IC */
                PAR [0x06] = C0SP /* \C0SP */
                PAR [0x08] = C0W0 /* \C0W0 */
                PAR [0x09] = C0W1 /* \C0W1 */
                PAR [0x0A] = C0W2 /* \C0W2 */
                PAR [0x0B] = C0W3 /* \C0W3 */
                PAR [0x0C] = C0W4 /* \C0W4 */
                PAR [0x0D] = C0W5 /* \C0W5 */
                PAR [0x0E] = C0CS /* \C0CS */
                Return (PAR) /* \_SB_.PC00.DSC0.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C0GP) /* \C0GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C0F0, ((0x20 * C0G0) + C0P0), C0I0, C0A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C0F1, ((0x20 * C0G1) + C0P1), C0I1, C0A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C0F2, ((0x20 * C0G2) + C0P2), C0I2, C0A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C0F3, ((0x20 * C0G3) + C0P3), C0I3, C0A3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == One))
                    {
                        CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            One])))
                        CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            0x02])))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C1GP > Zero))
                {
                    Local1 = PINR (C1P0, C1G0)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If ((C1GP > One))
                {
                    Local1 = PINR (C1P1, C1G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C1GP > 0x02))
                {
                    Local1 = PINR (C1P2, C1G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C1GP > 0x03))
                {
                    Local1 = PINR (C1P3, C1G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If ((C1TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C1VE /* \C1VE */
                PAR [One] = C1TP /* \C1TP */
                PAR [0x03] = C1CV /* \C1CV */
                PAR [0x04] = C1IC /* \C1IC */
                PAR [0x06] = C1SP /* \C1SP */
                PAR [0x08] = C1W0 /* \C1W0 */
                PAR [0x09] = C1W1 /* \C1W1 */
                PAR [0x0A] = C1W2 /* \C1W2 */
                PAR [0x0B] = C1W3 /* \C1W3 */
                PAR [0x0C] = C1W4 /* \C1W4 */
                PAR [0x0D] = C1W5 /* \C1W5 */
                PAR [0x0E] = C1CS /* \C1CS */
                Return (PAR) /* \_SB_.PC00.DSC1.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C1GP) /* \C1GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C1F0, ((0x20 * C1G0) + C1P0), C1I0, C1A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C1F1, ((0x20 * C1G1) + C1P1), C1I1, C1A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C1F2, ((0x20 * C1G2) + C1P2), C1I2, C1A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C1F3, ((0x20 * C1G3) + C1P3), C1I3, C1A3))
                    }
                }

                If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == One))
                    {
                        CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            One])))
                        CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            0x02])))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C2GP > Zero))
                {
                    Local1 = PINR (C2P0, C2G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > One))
                {
                    Local1 = PINR (C2P1, C2G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > 0x02))
                {
                    Local1 = PINR (C2P2, C2G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > 0x03))
                {
                    Local1 = PINR (C2P3, C2G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If ((C2TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C2VE /* \C2VE */
                PAR [One] = C2TP /* \C2TP */
                PAR [0x03] = C2CV /* \C2CV */
                PAR [0x04] = C2IC /* \C2IC */
                PAR [0x06] = C2SP /* \C2SP */
                PAR [0x08] = C2W0 /* \C2W0 */
                PAR [0x09] = C2W1 /* \C2W1 */
                PAR [0x0A] = C2W2 /* \C2W2 */
                PAR [0x0B] = C2W3 /* \C2W3 */
                PAR [0x0C] = C2W4 /* \C2W4 */
                PAR [0x0D] = C2W5 /* \C2W5 */
                PAR [0x0E] = C2CS /* \C2CS */
                Return (PAR) /* \_SB_.PC00.DSC2.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C2GP) /* \C2GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C2F0, ((0x20 * C2G0) + C2P0), C2I0, C2A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C2F1, ((0x20 * C2G1) + C2P1), C2I1, C2A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C2F2, ((0x20 * C2G2) + C2P2), C2I2, C2A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C2F3, ((0x20 * C2G3) + C2P3), C2I3, C2A3))
                    }
                }

                If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == One))
                    {
                        CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            One])))
                        CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            0x02])))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C3GP > Zero))
                {
                    Local1 = PINR (C3P0, C3G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > One))
                {
                    Local1 = PINR (C3P1, C3G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > 0x02))
                {
                    Local1 = PINR (C3P2, C3G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > 0x03))
                {
                    Local1 = PINR (C3P3, C3G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If ((C3TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C3VE /* \C3VE */
                PAR [One] = C3TP /* \C3TP */
                PAR [0x03] = C3CV /* \C3CV */
                PAR [0x04] = C3IC /* \C3IC */
                PAR [0x06] = C3SP /* \C3SP */
                PAR [0x08] = C3W0 /* \C3W0 */
                PAR [0x09] = C3W1 /* \C3W1 */
                PAR [0x0A] = C3W2 /* \C3W2 */
                PAR [0x0B] = C3W3 /* \C3W3 */
                PAR [0x0C] = C3W4 /* \C3W4 */
                PAR [0x0D] = C3W5 /* \C3W5 */
                PAR [0x0E] = C3CS /* \C3CS */
                Return (PAR) /* \_SB_.PC00.DSC3.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C3GP) /* \C3GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C3F0, ((0x20 * C3G0) + C3P0), C3I0, C3A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C3F1, ((0x20 * C3G1) + C3P1), C3I1, C3A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C3F2, ((0x20 * C3G2) + C3P2), C3I2, C3A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C3F3, ((0x20 * C3G3) + C3P3), C3I3, C3A3))
                    }
                }

                If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == One))
                    {
                        CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            One])))
                        CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                            0x02])))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C4GP > Zero))
                {
                    Local1 = PINR (C4P0, C4G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C4GP > One))
                {
                    Local1 = PINR (C4P1, C4G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C4GP > 0x02))
                {
                    Local1 = PINR (C4P2, C4G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C4GP > 0x03))
                {
                    Local1 = PINR (C4P3, C4G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL04)
                {
                    If ((C4TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C4VE /* \C4VE */
                PAR [One] = C4TP /* \C4TP */
                PAR [0x03] = C4CV /* \C4CV */
                PAR [0x04] = C4IC /* \C4IC */
                PAR [0x06] = C4SP /* \C4SP */
                PAR [0x08] = C4W0 /* \C4W0 */
                PAR [0x09] = C4W1 /* \C4W1 */
                PAR [0x0A] = C4W2 /* \C4W2 */
                PAR [0x0B] = C4W3 /* \C4W3 */
                PAR [0x0C] = C4W4 /* \C4W4 */
                PAR [0x0D] = C4W5 /* \C4W5 */
                PAR [0x0E] = C4CS /* \C4CS */
                Return (PAR) /* \_SB_.PC00.DSC4.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C4GP) /* \C4GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C4F0, ((0x20 * C4G0) + C4P0), C4I0, C4A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C4F1, ((0x20 * C4G1) + C4P1), C4I1, C4A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C4F2, ((0x20 * C4G2) + C4P2), C4I2, C4A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C4F3, ((0x20 * C4G3) + C4P3), C4I3, C4A3))
                    }
                }

                If ((PCHS == PCHL))
                {
                    If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                One])))
                            CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                0x02])))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC5)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C5GP > Zero))
                {
                    Local1 = PINR (C5P0, C5G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C5GP > One))
                {
                    Local1 = PINR (C5P1, C5G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C5GP > 0x02))
                {
                    Local1 = PINR (C5P2, C5G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C5GP > 0x03))
                {
                    Local1 = PINR (C5P3, C5G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL05)
                {
                    If ((C5TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C5VE /* \C5VE */
                PAR [One] = C5TP /* \C5TP */
                PAR [0x03] = C5CV /* \C5CV */
                PAR [0x04] = C5IC /* \C5IC */
                PAR [0x06] = C5SP /* \C5SP */
                PAR [0x08] = C5W0 /* \C5W0 */
                PAR [0x09] = C5W1 /* \C5W1 */
                PAR [0x0A] = C5W2 /* \C5W2 */
                PAR [0x0B] = C5W3 /* \C5W3 */
                PAR [0x0C] = C5W4 /* \C5W4 */
                PAR [0x0D] = C5W5 /* \C5W5 */
                PAR [0x0E] = C5CS /* \C5CS */
                Return (PAR) /* \_SB_.PC00.DSC5.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C5GP) /* \C5GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C5F0, ((0x20 * C5G0) + C5P0), C5I0, C5A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C5F1, ((0x20 * C5G1) + C5P1), C5I1, C5A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C5F2, ((0x20 * C5G2) + C5P2), C5I2, C5A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C5F3, ((0x20 * C5G3) + C5P3), C5I3, C5A3))
                    }
                }

                If ((PCHS == PCHL))
                {
                    If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                One])))
                            CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                0x02])))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL00)
                {
                    If ((C0IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C0IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C0IA, C0IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If ((C0TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C0VE /* \C0VE */
                PAR [One] = C0TP /* \C0TP */
                PAR [0x03] = C0CV /* \C0CV */
                PAR [0x04] = C0IC /* \C0IC */
                PAR [0x06] = C0SP /* \C0SP */
                PAR [0x08] = C0W0 /* \C0W0 */
                PAR [0x09] = C0W1 /* \C0W1 */
                PAR [0x0A] = C0W2 /* \C0W2 */
                PAR [0x0B] = C0W3 /* \C0W3 */
                PAR [0x0C] = C0W4 /* \C0W4 */
                PAR [0x0D] = C0W5 /* \C0W5 */
                Return (PAR) /* \_SB_.PC00.CLP0.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C0PL /* \C0PL */
                Return (PLDB) /* \_SB_.PC00.CLP0._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C0IA, Zero, C0IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C0IA, Zero, C0IB)
                        Return (DSMB) /* \_SB_.PC00.CLP0._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL01)
                {
                    If ((C1IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C1IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C1IA, C1IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If ((C1TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C1VE /* \C1VE */
                PAR [One] = C1TP /* \C1TP */
                PAR [0x03] = C1CV /* \C1CV */
                PAR [0x04] = C1IC /* \C1IC */
                PAR [0x06] = C1SP /* \C1SP */
                PAR [0x08] = C1W0 /* \C1W0 */
                PAR [0x09] = C1W1 /* \C1W1 */
                PAR [0x0A] = C1W2 /* \C1W2 */
                PAR [0x0B] = C1W3 /* \C1W3 */
                PAR [0x0C] = C1W4 /* \C1W4 */
                PAR [0x0D] = C1W5 /* \C1W5 */
                Return (PAR) /* \_SB_.PC00.CLP1.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C1PL /* \C1PL */
                Return (PLDB) /* \_SB_.PC00.CLP1._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C1IA, Zero, C1IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C1IA, Zero, C1IB)
                        Return (DSMB) /* \_SB_.PC00.CLP1._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL02)
                {
                    If ((C2IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C2IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C2IA, C2IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If ((C2TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C2VE /* \C2VE */
                PAR [One] = C2TP /* \C2TP */
                PAR [0x03] = C2CV /* \C2CV */
                PAR [0x04] = C2IC /* \C2IC */
                PAR [0x06] = C2SP /* \C2SP */
                PAR [0x08] = C2W0 /* \C2W0 */
                PAR [0x09] = C2W1 /* \C2W1 */
                PAR [0x0A] = C2W2 /* \C2W2 */
                PAR [0x0B] = C2W3 /* \C2W3 */
                PAR [0x0C] = C2W4 /* \C2W4 */
                PAR [0x0D] = C2W5 /* \C2W5 */
                Return (PAR) /* \_SB_.PC00.CLP2.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C2PL /* \C2PL */
                Return (PLDB) /* \_SB_.PC00.CLP2._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C2IA, Zero, C2IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C2IA, Zero, C2IB)
                        Return (DSMB) /* \_SB_.PC00.CLP2._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL03)
                {
                    If ((C3IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C3IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x09)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C3IA, C3IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If ((C3TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C3VE /* \C3VE */
                PAR [One] = C3TP /* \C3TP */
                PAR [0x03] = C3CV /* \C3CV */
                PAR [0x04] = C3IC /* \C3IC */
                PAR [0x06] = C3SP /* \C3SP */
                PAR [0x08] = C3W0 /* \C3W0 */
                PAR [0x09] = C3W1 /* \C3W1 */
                PAR [0x0A] = C3W2 /* \C3W2 */
                PAR [0x0B] = C3W3 /* \C3W3 */
                PAR [0x0C] = C3W4 /* \C3W4 */
                PAR [0x0D] = C3W5 /* \C3W5 */
                Return (PAR) /* \_SB_.PC00.CLP3.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C3PL /* \C3PL */
                Return (PLDB) /* \_SB_.PC00.CLP3._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C3IA, Zero, C3IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C3IA, Zero, C3IB)
                        Return (DSMB) /* \_SB_.PC00.CLP3._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL04)
                {
                    If ((C4IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C4IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0A)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C4IA, C4IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL04)
                {
                    If ((C4TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C4VE /* \C4VE */
                PAR [One] = C4TP /* \C4TP */
                PAR [0x03] = C4CV /* \C4CV */
                PAR [0x04] = C4IC /* \C4IC */
                PAR [0x06] = C4SP /* \C4SP */
                PAR [0x08] = C4W0 /* \C4W0 */
                PAR [0x09] = C4W1 /* \C4W1 */
                PAR [0x0A] = C4W2 /* \C4W2 */
                PAR [0x0B] = C4W3 /* \C4W3 */
                PAR [0x0C] = C4W4 /* \C4W4 */
                PAR [0x0D] = C4W5 /* \C4W5 */
                Return (PAR) /* \_SB_.PC00.CLP4.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C4PL /* \C4PL */
                Return (PLDB) /* \_SB_.PC00.CLP4._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C4IA, Zero, C4IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C4IA, Zero, C4IB)
                        Return (DSMB) /* \_SB_.PC00.CLP4._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP5)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL05)
                {
                    If ((C5IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C5IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0B)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C5IA, C5IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL05)
                {
                    If ((C5TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x0C, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C5VE /* \C5VE */
                PAR [One] = C5TP /* \C5TP */
                PAR [0x03] = C5CV /* \C5CV */
                PAR [0x04] = C5IC /* \C5IC */
                PAR [0x06] = C5SP /* \C5SP */
                PAR [0x08] = C5W0 /* \C5W0 */
                PAR [0x09] = C5W1 /* \C5W1 */
                PAR [0x0A] = C5W2 /* \C5W2 */
                PAR [0x0B] = C5W3 /* \C5W3 */
                PAR [0x0C] = C5W4 /* \C5W4 */
                PAR [0x0D] = C5W5 /* \C5W5 */
                Return (PAR) /* \_SB_.PC00.CLP5.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C5PL /* \C5PL */
                Return (PLDB) /* \_SB_.PC00.CLP5._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C5IA, Zero, C5IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C5IA, Zero, C5IB)
                        Return (DSMB) /* \_SB_.PC00.CLP5._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L0EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL, L0BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (Zero))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L0M0 /* \L0M0 */
                BUF [One] = L0M1 /* \L0M1 */
                BUF [0x02] = L0M2 /* \L0M2 */
                BUF [0x03] = L0M3 /* \L0M3 */
                BUF [0x04] = L0M4 /* \L0M4 */
                BUF [0x05] = L0M5 /* \L0M5 */
                BUF [0x06] = L0M6 /* \L0M6 */
                BUF [0x07] = L0M7 /* \L0M7 */
                BUF [0x08] = L0M8 /* \L0M8 */
                BUF [0x09] = L0M9 /* \L0M9 */
                BUF [0x0A] = L0MA /* \L0MA */
                BUF [0x0B] = L0MB /* \L0MB */
                BUF [0x0C] = L0MC /* \L0MC */
                BUF [0x0D] = L0MD /* \L0MD */
                BUF [0x0E] = L0ME /* \L0ME */
                BUF [0x0F] = L0MF /* \L0MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L0PL /* \L0PL */
                RPOS = L0DG /* \L0DG */
                Return (PLDB) /* \_SB_.PC00.LNK0._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L0DI > Zero))
                {
                    Local1 = IICB (L0A0, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > One))
                {
                    Local1 = IICB (L0A1, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x02))
                {
                    Local1 = IICB (L0A2, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x03))
                {
                    Local1 = IICB (L0A3, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x04))
                {
                    Local1 = IICB (L0A4, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x05))
                {
                    Local1 = IICB (L0A5, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x06))
                {
                    Local1 = IICB (L0A6, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x07))
                {
                    Local1 = IICB (L0A7, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x08))
                {
                    Local1 = IICB (L0A8, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x09))
                {
                    Local1 = IICB (L0A9, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x0A))
                {
                    Local1 = IICB (L0AA, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x0B))
                {
                    Local1 = IICB (L0AB, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L0DV /* \L0DV */
                PAR [One] = L0CV /* \L0CV */
                PAR [0x18] = L0LC /* \L0LC */
                PAR [0x1C] = L0LU /* \L0LU */
                PAR [0x1D] = L0NL /* \L0NL */
                PAR [0x4E] = L0EE /* \L0EE */
                PAR [0x4F] = L0VC /* \L0VC */
                If ((PCHS == PCHH))
                {
                    PAR [0x50] = 0x0D
                }

                PAR [0x52] = L0FS /* \L0FS */
                PAR [0x53] = L0LE /* \L0LE */
                PAR [0x54] = CDEG (L0DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L0CK /* \L0CK */
                PAR [0x5A] = L0CL /* \L0CL */
                PAR [0x5F] = L0PP /* \L0PP */
                PAR [0x60] = L0VR /* \L0VR */
                PAR [0x61] = L0PV /* \L0PV */
                PAR [0x62] = L0PU /* \L0PU */
                Return (PAR) /* \_SB_.PC00.LNK0.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L0M0 /* \L0M0 */
                        BUF [One] = L0M1 /* \L0M1 */
                        BUF [0x02] = L0M2 /* \L0M2 */
                        BUF [0x03] = L0M3 /* \L0M3 */
                        BUF [0x04] = L0M4 /* \L0M4 */
                        BUF [0x05] = L0M5 /* \L0M5 */
                        BUF [0x06] = L0M6 /* \L0M6 */
                        BUF [0x07] = L0M7 /* \L0M7 */
                        BUF [0x08] = L0M8 /* \L0M8 */
                        BUF [0x09] = L0M9 /* \L0M9 */
                        BUF [0x0A] = L0MA /* \L0MA */
                        BUF [0x0B] = L0MB /* \L0MB */
                        BUF [0x0C] = L0MC /* \L0MC */
                        BUF [0x0D] = L0MD /* \L0MD */
                        BUF [0x0E] = L0ME /* \L0ME */
                        BUF [0x0F] = L0MF /* \L0MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L0DI /* \L0DI */
                        DEV0 = DSMI (L0D0, L0A0, Zero, L0BS)
                        DEV1 = DSMI (L0D1, L0A1, Zero, L0BS)
                        DEV2 = DSMI (L0D2, L0A2, Zero, L0BS)
                        DEV3 = DSMI (L0D3, L0A3, Zero, L0BS)
                        DEV4 = DSMI (L0D4, L0A4, Zero, L0BS)
                        DEV5 = DSMI (L0D5, L0A5, Zero, L0BS)
                        DEV6 = DSMI (L0D6, L0A6, Zero, L0BS)
                        DEV7 = DSMI (L0D7, L0A7, Zero, L0BS)
                        DEV8 = DSMI (L0D8, L0A8, Zero, L0BS)
                        DEV9 = DSMI (L0D9, L0A9, Zero, L0BS)
                        DEVA = DSMI (L0DA, L0AA, Zero, L0BS)
                        DEVB = DSMI (L0DB, L0AB, Zero, L0BS)
                        Return (DSMB) /* \_SB_.PC00.LNK0._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L0DI) /* \L0DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L0DI > Zero))
                        {
                            Return (DSMI (L0D0, L0A0, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L0DI > One))
                        {
                            Return (DSMI (L0D1, L0A1, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L0DI > 0x02))
                        {
                            Return (DSMI (L0D2, L0A2, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L0DI > 0x03))
                        {
                            Return (DSMI (L0D3, L0A3, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L0DI > 0x04))
                        {
                            Return (DSMI (L0D4, L0A4, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L0DI > 0x05))
                        {
                            Return (DSMI (L0D5, L0A5, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L0DI > 0x06))
                        {
                            Return (DSMI (L0D6, L0A6, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L0DI > 0x07))
                        {
                            Return (DSMI (L0D7, L0A7, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L0DI > 0x08))
                        {
                            Return (DSMI (L0D8, L0A8, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L0DI > 0x09))
                        {
                            Return (DSMI (L0D9, L0A9, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L0DI > 0x0A))
                        {
                            Return (DSMI (L0DA, L0AA, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L0DI > 0x0B))
                        {
                            Return (DSMI (L0DB, L0AB, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PNIO, Package (0x01)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD"
            })
            Name (PUSB, Package (0x02)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD", 
                "\\_SB.PC00.XHCI.RHUB.HS04.VI2C"
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L1EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, Serialized)  // _DEP: Dependencies
            {
                If (L1EN)
                {
                    Switch (CVFS)
                    {
                        Case (0x02)
                        {
                            Return (PUSB) /* \_SB_.PC00.LNK1.PUSB */
                        }
                        Case (One)
                        {
                            Return (PNIO) /* \_SB_.PC00.LNK1.PNIO */
                        }
                        Default
                        {
                            Return (CDEP (L1CL, L1BS))
                        }

                    }
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (One))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L1M0 /* \L1M0 */
                BUF [One] = L1M1 /* \L1M1 */
                BUF [0x02] = L1M2 /* \L1M2 */
                BUF [0x03] = L1M3 /* \L1M3 */
                BUF [0x04] = L1M4 /* \L1M4 */
                BUF [0x05] = L1M5 /* \L1M5 */
                BUF [0x06] = L1M6 /* \L1M6 */
                BUF [0x07] = L1M7 /* \L1M7 */
                BUF [0x08] = L1M8 /* \L1M8 */
                BUF [0x09] = L1M9 /* \L1M9 */
                BUF [0x0A] = L1MA /* \L1MA */
                BUF [0x0B] = L1MB /* \L1MB */
                BUF [0x0C] = L1MC /* \L1MC */
                BUF [0x0D] = L1MD /* \L1MD */
                BUF [0x0E] = L1ME /* \L1ME */
                BUF [0x0F] = L1MF /* \L1MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L1PL /* \L1PL */
                RPOS = L1DG /* \L1DG */
                Return (PLDB) /* \_SB_.PC00.LNK1._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((CVFS == 0x02))
                {
                    Return (VIIC (L1A0))
                }

                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L1DI > Zero))
                {
                    Local1 = IICB (L1A0, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > One))
                {
                    Local1 = IICB (L1A1, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x02))
                {
                    Local1 = IICB (L1A2, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x03))
                {
                    Local1 = IICB (L1A3, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x04))
                {
                    Local1 = IICB (L1A4, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x05))
                {
                    Local1 = IICB (L1A5, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x06))
                {
                    Local1 = IICB (L1A6, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x07))
                {
                    Local1 = IICB (L1A7, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x08))
                {
                    Local1 = IICB (L1A8, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x09))
                {
                    Local1 = IICB (L1A9, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x0A))
                {
                    Local1 = IICB (L1AA, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x0B))
                {
                    Local1 = IICB (L1AB, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L1DV /* \L1DV */
                PAR [One] = L1CV /* \L1CV */
                PAR [0x18] = L1LC /* \L1LC */
                PAR [0x1C] = L1LU /* \L1LU */
                PAR [0x1D] = L1NL /* \L1NL */
                PAR [0x4E] = L1EE /* \L1EE */
                PAR [0x4F] = L1VC /* \L1VC */
                If ((PCHS == PCHH))
                {
                    PAR [0x50] = 0x0D
                }

                PAR [0x52] = L1FS /* \L1FS */
                PAR [0x53] = L1LE /* \L1LE */
                PAR [0x54] = CDEG (L1DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L1CK /* \L1CK */
                PAR [0x5A] = L1CL /* \L1CL */
                PAR [0x5F] = L1PP /* \L1PP */
                PAR [0x60] = L1VR /* \L1VR */
                PAR [0x61] = L1PV /* \L1PV */
                PAR [0x62] = L1PU /* \L1PU */
                Return (PAR) /* \_SB_.PC00.LNK1.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L1M0 /* \L1M0 */
                        BUF [One] = L1M1 /* \L1M1 */
                        BUF [0x02] = L1M2 /* \L1M2 */
                        BUF [0x03] = L1M3 /* \L1M3 */
                        BUF [0x04] = L1M4 /* \L1M4 */
                        BUF [0x05] = L1M5 /* \L1M5 */
                        BUF [0x06] = L1M6 /* \L1M6 */
                        BUF [0x07] = L1M7 /* \L1M7 */
                        BUF [0x08] = L1M8 /* \L1M8 */
                        BUF [0x09] = L1M9 /* \L1M9 */
                        BUF [0x0A] = L1MA /* \L1MA */
                        BUF [0x0B] = L1MB /* \L1MB */
                        BUF [0x0C] = L1MC /* \L1MC */
                        BUF [0x0D] = L1MD /* \L1MD */
                        BUF [0x0E] = L1ME /* \L1ME */
                        BUF [0x0F] = L1MF /* \L1MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L1DI /* \L1DI */
                        DEV0 = DSMI (L1D0, L1A0, Zero, L1BS)
                        DEV1 = DSMI (L1D1, L1A1, Zero, L1BS)
                        DEV2 = DSMI (L1D2, L1A2, Zero, L1BS)
                        DEV3 = DSMI (L1D3, L1A3, Zero, L1BS)
                        DEV4 = DSMI (L1D4, L1A4, Zero, L1BS)
                        DEV5 = DSMI (L1D5, L1A5, Zero, L1BS)
                        DEV6 = DSMI (L1D6, L1A6, Zero, L1BS)
                        DEV7 = DSMI (L1D7, L1A7, Zero, L1BS)
                        DEV8 = DSMI (L1D8, L1A8, Zero, L1BS)
                        DEV9 = DSMI (L1D9, L1A9, Zero, L1BS)
                        DEVA = DSMI (L1DA, L1AA, Zero, L1BS)
                        DEVB = DSMI (L1DB, L1AB, Zero, L1BS)
                        Return (DSMB) /* \_SB_.PC00.LNK1._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L1DI) /* \L1DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L1DI > Zero))
                        {
                            Return (DSMI (L1D0, L1A0, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L1DI > One))
                        {
                            Return (DSMI (L1D1, L1A1, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L1DI > 0x02))
                        {
                            Return (DSMI (L1D2, L1A2, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L1DI > 0x03))
                        {
                            Return (DSMI (L1D3, L1A3, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L1DI > 0x04))
                        {
                            Return (DSMI (L1D4, L1A4, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L1DI > 0x05))
                        {
                            Return (DSMI (L1D5, L1A5, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L1DI > 0x06))
                        {
                            Return (DSMI (L1D6, L1A6, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L1DI > 0x07))
                        {
                            Return (DSMI (L1D7, L1A7, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L1DI > 0x08))
                        {
                            Return (DSMI (L1D8, L1A8, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L1DI > 0x09))
                        {
                            Return (DSMI (L1D9, L1A9, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L1DI > 0x0A))
                        {
                            Return (DSMI (L1DA, L1AA, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L1DI > 0x0B))
                        {
                            Return (DSMI (L1DB, L1AB, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L2EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL, L2BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x02))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L2M0 /* \L2M0 */
                BUF [One] = L2M1 /* \L2M1 */
                BUF [0x02] = L2M2 /* \L2M2 */
                BUF [0x03] = L2M3 /* \L2M3 */
                BUF [0x04] = L2M4 /* \L2M4 */
                BUF [0x05] = L2M5 /* \L2M5 */
                BUF [0x06] = L2M6 /* \L2M6 */
                BUF [0x07] = L2M7 /* \L2M7 */
                BUF [0x08] = L2M8 /* \L2M8 */
                BUF [0x09] = L2M9 /* \L2M9 */
                BUF [0x0A] = L2MA /* \L2MA */
                BUF [0x0B] = L2MB /* \L2MB */
                BUF [0x0C] = L2MC /* \L2MC */
                BUF [0x0D] = L2MD /* \L2MD */
                BUF [0x0E] = L2ME /* \L2ME */
                BUF [0x0F] = L2MF /* \L2MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L2PL /* \L2PL */
                RPOS = L2DG /* \L2DG */
                Return (PLDB) /* \_SB_.PC00.LNK2._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L2DI > Zero))
                {
                    Local1 = IICB (L2A0, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > One))
                {
                    Local1 = IICB (L2A1, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x02))
                {
                    Local1 = IICB (L2A2, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x03))
                {
                    Local1 = IICB (L2A3, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x04))
                {
                    Local1 = IICB (L2A4, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x05))
                {
                    Local1 = IICB (L2A5, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x06))
                {
                    Local1 = IICB (L2A6, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x07))
                {
                    Local1 = IICB (L2A7, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x08))
                {
                    Local1 = IICB (L2A8, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x09))
                {
                    Local1 = IICB (L2A9, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x0A))
                {
                    Local1 = IICB (L2AA, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x0B))
                {
                    Local1 = IICB (L2AB, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L2DV /* \L2DV */
                PAR [One] = L2CV /* \L2CV */
                PAR [0x18] = L2LC /* \L2LC */
                PAR [0x1C] = L2LU /* \L2LU */
                PAR [0x1D] = L2NL /* \L2NL */
                PAR [0x4E] = L2EE /* \L2EE */
                PAR [0x4F] = L2VC /* \L2VC */
                If ((PCHS == PCHH))
                {
                    PAR [0x50] = 0x0D
                }

                PAR [0x52] = L2FS /* \L2FS */
                PAR [0x53] = L2LE /* \L2LE */
                PAR [0x54] = CDEG (L2DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L2CK /* \L2CK */
                PAR [0x5A] = L2CL /* \L2CL */
                PAR [0x5F] = L2PP /* \L2PP */
                PAR [0x60] = L2VR /* \L2VR */
                PAR [0x61] = L2PV /* \L2PV */
                PAR [0x62] = L2PU /* \L2PU */
                Return (PAR) /* \_SB_.PC00.LNK2.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L2M0 /* \L2M0 */
                        BUF [One] = L2M1 /* \L2M1 */
                        BUF [0x02] = L2M2 /* \L2M2 */
                        BUF [0x03] = L2M3 /* \L2M3 */
                        BUF [0x04] = L2M4 /* \L2M4 */
                        BUF [0x05] = L2M5 /* \L2M5 */
                        BUF [0x06] = L2M6 /* \L2M6 */
                        BUF [0x07] = L2M7 /* \L2M7 */
                        BUF [0x08] = L2M8 /* \L2M8 */
                        BUF [0x09] = L2M9 /* \L2M9 */
                        BUF [0x0A] = L2MA /* \L2MA */
                        BUF [0x0B] = L2MB /* \L2MB */
                        BUF [0x0C] = L2MC /* \L2MC */
                        BUF [0x0D] = L2MD /* \L2MD */
                        BUF [0x0E] = L2ME /* \L2ME */
                        BUF [0x0F] = L2MF /* \L2MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L2DI /* \L2DI */
                        DEV0 = DSMI (L2D0, L2A0, Zero, L2BS)
                        DEV1 = DSMI (L2D1, L2A1, Zero, L2BS)
                        DEV2 = DSMI (L2D2, L2A2, Zero, L2BS)
                        DEV3 = DSMI (L2D3, L2A3, Zero, L2BS)
                        DEV4 = DSMI (L2D4, L2A4, Zero, L2BS)
                        DEV5 = DSMI (L2D5, L2A5, Zero, L2BS)
                        DEV6 = DSMI (L2D6, L2A6, Zero, L2BS)
                        DEV7 = DSMI (L2D7, L2A7, Zero, L2BS)
                        DEV8 = DSMI (L2D8, L2A8, Zero, L2BS)
                        DEV9 = DSMI (L2D9, L2A9, Zero, L2BS)
                        DEVA = DSMI (L2DA, L2AA, Zero, L2BS)
                        DEVB = DSMI (L2DB, L2AB, Zero, L2BS)
                        Return (DSMB) /* \_SB_.PC00.LNK2._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L2DI) /* \L2DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L2DI > Zero))
                        {
                            Return (DSMI (L2D0, L2A0, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L2DI > One))
                        {
                            Return (DSMI (L2D1, L2A1, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L2DI > 0x02))
                        {
                            Return (DSMI (L2D2, L2A2, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L2DI > 0x03))
                        {
                            Return (DSMI (L2D3, L2A3, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L2DI > 0x04))
                        {
                            Return (DSMI (L2D4, L2A4, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L2DI > 0x05))
                        {
                            Return (DSMI (L2D5, L2A5, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L2DI > 0x06))
                        {
                            Return (DSMI (L2D6, L2A6, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L2DI > 0x07))
                        {
                            Return (DSMI (L2D7, L2A7, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L2DI > 0x08))
                        {
                            Return (DSMI (L2D8, L2A8, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L2DI > 0x09))
                        {
                            Return (DSMI (L2D9, L2A9, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L2DI > 0x0A))
                        {
                            Return (DSMI (L2DA, L2AA, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L2DI > 0x0B))
                        {
                            Return (DSMI (L2DB, L2AB, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L3EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL, L3BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x03))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L3M0 /* \L3M0 */
                BUF [One] = L3M1 /* \L3M1 */
                BUF [0x02] = L3M2 /* \L3M2 */
                BUF [0x03] = L3M3 /* \L3M3 */
                BUF [0x04] = L3M4 /* \L3M4 */
                BUF [0x05] = L3M5 /* \L3M5 */
                BUF [0x06] = L3M6 /* \L3M6 */
                BUF [0x07] = L3M7 /* \L3M7 */
                BUF [0x08] = L3M8 /* \L3M8 */
                BUF [0x09] = L3M9 /* \L3M9 */
                BUF [0x0A] = L3MA /* \L3MA */
                BUF [0x0B] = L3MB /* \L3MB */
                BUF [0x0C] = L3MC /* \L3MC */
                BUF [0x0D] = L3MD /* \L3MD */
                BUF [0x0E] = L3ME /* \L3ME */
                BUF [0x0F] = L3MF /* \L3MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L3PL /* \L3PL */
                RPOS = L3DG /* \L3DG */
                Return (PLDB) /* \_SB_.PC00.LNK3._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L3DI > Zero))
                {
                    Local1 = IICB (L3A0, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > One))
                {
                    Local1 = IICB (L3A1, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x02))
                {
                    Local1 = IICB (L3A2, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x03))
                {
                    Local1 = IICB (L3A3, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x04))
                {
                    Local1 = IICB (L3A4, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x05))
                {
                    Local1 = IICB (L3A5, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x06))
                {
                    Local1 = IICB (L3A6, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x07))
                {
                    Local1 = IICB (L3A7, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x08))
                {
                    Local1 = IICB (L3A8, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x09))
                {
                    Local1 = IICB (L3A9, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x0A))
                {
                    Local1 = IICB (L3AA, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x0B))
                {
                    Local1 = IICB (L3AB, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L3DV /* \L3DV */
                PAR [One] = L3CV /* \L3CV */
                PAR [0x18] = L3LC /* \L3LC */
                PAR [0x1C] = L3LU /* \L3LU */
                PAR [0x1D] = L3NL /* \L3NL */
                PAR [0x4E] = L3EE /* \L3EE */
                PAR [0x4F] = L3VC /* \L3VC */
                If ((PCHS == PCHH))
                {
                    PAR [0x50] = 0x0D
                }

                PAR [0x52] = L3FS /* \L3FS */
                PAR [0x53] = L3LE /* \L3LE */
                PAR [0x54] = CDEG (L3DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L3CK /* \L3CK */
                PAR [0x5A] = L3CL /* \L3CL */
                PAR [0x5F] = L3PP /* \L3PP */
                PAR [0x60] = L3VR /* \L3VR */
                PAR [0x61] = L3PV /* \L3PV */
                PAR [0x62] = L3PU /* \L3PU */
                Return (PAR) /* \_SB_.PC00.LNK3.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L3M0 /* \L3M0 */
                        BUF [One] = L3M1 /* \L3M1 */
                        BUF [0x02] = L3M2 /* \L3M2 */
                        BUF [0x03] = L3M3 /* \L3M3 */
                        BUF [0x04] = L3M4 /* \L3M4 */
                        BUF [0x05] = L3M5 /* \L3M5 */
                        BUF [0x06] = L3M6 /* \L3M6 */
                        BUF [0x07] = L3M7 /* \L3M7 */
                        BUF [0x08] = L3M8 /* \L3M8 */
                        BUF [0x09] = L3M9 /* \L3M9 */
                        BUF [0x0A] = L3MA /* \L3MA */
                        BUF [0x0B] = L3MB /* \L3MB */
                        BUF [0x0C] = L3MC /* \L3MC */
                        BUF [0x0D] = L3MD /* \L3MD */
                        BUF [0x0E] = L3ME /* \L3ME */
                        BUF [0x0F] = L3MF /* \L3MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L3DI /* \L3DI */
                        DEV0 = DSMI (L3D0, L3A0, Zero, L3BS)
                        DEV1 = DSMI (L3D1, L3A1, Zero, L3BS)
                        DEV2 = DSMI (L3D2, L3A2, Zero, L3BS)
                        DEV3 = DSMI (L3D3, L3A3, Zero, L3BS)
                        DEV4 = DSMI (L3D4, L3A4, Zero, L3BS)
                        DEV5 = DSMI (L3D5, L3A5, Zero, L3BS)
                        DEV6 = DSMI (L3D6, L3A6, Zero, L3BS)
                        DEV7 = DSMI (L3D7, L3A7, Zero, L3BS)
                        DEV8 = DSMI (L3D8, L3A8, Zero, L3BS)
                        DEV9 = DSMI (L3D9, L3A9, Zero, L3BS)
                        DEVA = DSMI (L3DA, L3AA, Zero, L3BS)
                        DEVB = DSMI (L3DB, L3AB, Zero, L3BS)
                        Return (DSMB) /* \_SB_.PC00.LNK3._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L3DI) /* \L3DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L3DI > Zero))
                        {
                            Return (DSMI (L3D0, L3A0, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L3DI > One))
                        {
                            Return (DSMI (L3D1, L3A1, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L3DI > 0x02))
                        {
                            Return (DSMI (L3D2, L3A2, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L3DI > 0x03))
                        {
                            Return (DSMI (L3D3, L3A3, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L3DI > 0x04))
                        {
                            Return (DSMI (L3D4, L3A4, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L3DI > 0x05))
                        {
                            Return (DSMI (L3D5, L3A5, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L3DI > 0x06))
                        {
                            Return (DSMI (L3D6, L3A6, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L3DI > 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L3DI > 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L3DI > 0x09))
                        {
                            Return (DSMI (L3D9, L3A9, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L3DI > 0x0A))
                        {
                            Return (DSMI (L3DA, L3AA, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L3DI > 0x0B))
                        {
                            Return (DSMI (L3DB, L3AB, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L4EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L4EN)
                {
                    Return (CDEP (L4CL, L4BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x04))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L4M0 /* \L4M0 */
                BUF [One] = L4M1 /* \L4M1 */
                BUF [0x02] = L4M2 /* \L4M2 */
                BUF [0x03] = L4M3 /* \L4M3 */
                BUF [0x04] = L4M4 /* \L4M4 */
                BUF [0x05] = L4M5 /* \L4M5 */
                BUF [0x06] = L4M6 /* \L4M6 */
                BUF [0x07] = L4M7 /* \L4M7 */
                BUF [0x08] = L4M8 /* \L4M8 */
                BUF [0x09] = L4M9 /* \L4M9 */
                BUF [0x0A] = L4MA /* \L4MA */
                BUF [0x0B] = L4MB /* \L4MB */
                BUF [0x0C] = L4MC /* \L4MC */
                BUF [0x0D] = L4MD /* \L4MD */
                BUF [0x0E] = L4ME /* \L4ME */
                BUF [0x0F] = L4MF /* \L4MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L4PL /* \L4PL */
                RPOS = L4DG /* \L4DG */
                Return (PLDB) /* \_SB_.PC00.LNK4._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L4DI > Zero))
                {
                    Local1 = IICB (L4A0, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > One))
                {
                    Local1 = IICB (L4A1, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x02))
                {
                    Local1 = IICB (L4A2, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x03))
                {
                    Local1 = IICB (L4A3, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x04))
                {
                    Local1 = IICB (L4A4, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x05))
                {
                    Local1 = IICB (L4A5, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x06))
                {
                    Local1 = IICB (L4A6, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x07))
                {
                    Local1 = IICB (L4A7, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x08))
                {
                    Local1 = IICB (L4A8, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x09))
                {
                    Local1 = IICB (L4A9, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x0A))
                {
                    Local1 = IICB (L4AA, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L4DI > 0x0B))
                {
                    Local1 = IICB (L4AB, L4BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L4DV /* \L4DV */
                PAR [One] = L4CV /* \L4CV */
                PAR [0x18] = L4LC /* \L4LC */
                PAR [0x1C] = L4LU /* \L4LU */
                PAR [0x1D] = L4NL /* \L4NL */
                PAR [0x4E] = L4EE /* \L4EE */
                PAR [0x4F] = L4VC /* \L4VC */
                If ((PCHS == PCHH))
                {
                    PAR [0x50] = 0x0D
                }

                PAR [0x52] = L4FS /* \L4FS */
                PAR [0x53] = L4LE /* \L4LE */
                PAR [0x54] = CDEG (L4DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L4CK /* \L4CK */
                PAR [0x5A] = L4CL /* \L4CL */
                PAR [0x5F] = L4PP /* \L4PP */
                PAR [0x60] = L4VR /* \L4VR */
                PAR [0x61] = L4PV /* \L4PV */
                PAR [0x62] = L4PU /* \L4PU */
                Return (PAR) /* \_SB_.PC00.LNK4.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L4M0 /* \L4M0 */
                        BUF [One] = L4M1 /* \L4M1 */
                        BUF [0x02] = L4M2 /* \L4M2 */
                        BUF [0x03] = L4M3 /* \L4M3 */
                        BUF [0x04] = L4M4 /* \L4M4 */
                        BUF [0x05] = L4M5 /* \L4M5 */
                        BUF [0x06] = L4M6 /* \L4M6 */
                        BUF [0x07] = L4M7 /* \L4M7 */
                        BUF [0x08] = L4M8 /* \L4M8 */
                        BUF [0x09] = L4M9 /* \L4M9 */
                        BUF [0x0A] = L4MA /* \L4MA */
                        BUF [0x0B] = L4MB /* \L4MB */
                        BUF [0x0C] = L4MC /* \L4MC */
                        BUF [0x0D] = L4MD /* \L4MD */
                        BUF [0x0E] = L4ME /* \L4ME */
                        BUF [0x0F] = L4MF /* \L4MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L4DI /* \L4DI */
                        DEV0 = DSMI (L4D0, L4A0, Zero, L4BS)
                        DEV1 = DSMI (L4D1, L4A1, Zero, L4BS)
                        DEV2 = DSMI (L4D2, L4A2, Zero, L4BS)
                        DEV3 = DSMI (L4D3, L4A3, Zero, L4BS)
                        DEV4 = DSMI (L4D4, L4A4, Zero, L4BS)
                        DEV5 = DSMI (L4D5, L4A5, Zero, L4BS)
                        DEV6 = DSMI (L4D6, L4A6, Zero, L4BS)
                        DEV7 = DSMI (L4D7, L4A7, Zero, L4BS)
                        DEV8 = DSMI (L4D8, L4A8, Zero, L4BS)
                        DEV9 = DSMI (L4D9, L4A9, Zero, L4BS)
                        DEVA = DSMI (L4DA, L4AA, Zero, L4BS)
                        DEVB = DSMI (L4DB, L4AB, Zero, L4BS)
                        Return (DSMB) /* \_SB_.PC00.LNK4._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L4DI) /* \L4DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L4DI > Zero))
                        {
                            Return (DSMI (L4D0, L4A0, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L4DI > One))
                        {
                            Return (DSMI (L4D1, L4A1, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L4DI > 0x02))
                        {
                            Return (DSMI (L4D2, L4A2, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L4DI > 0x03))
                        {
                            Return (DSMI (L4D3, L4A3, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L4DI > 0x04))
                        {
                            Return (DSMI (L4D4, L4A4, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L4DI > 0x05))
                        {
                            Return (DSMI (L4D5, L4A5, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L4DI > 0x06))
                        {
                            Return (DSMI (L4D6, L4A6, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L4DI > 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L4DI > 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L4DI > 0x09))
                        {
                            Return (DSMI (L4D9, L4A9, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L4DI > 0x0A))
                        {
                            Return (DSMI (L4DA, L4AA, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L4DI > 0x0B))
                        {
                            Return (DSMI (L4DB, L4AB, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK5)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L5EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L5EN)
                {
                    Return (CDEP (L5CL, L5BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x05))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L5M0 /* \L5M0 */
                BUF [One] = L5M1 /* \L5M1 */
                BUF [0x02] = L5M2 /* \L5M2 */
                BUF [0x03] = L5M3 /* \L5M3 */
                BUF [0x04] = L5M4 /* \L5M4 */
                BUF [0x05] = L5M5 /* \L5M5 */
                BUF [0x06] = L5M6 /* \L5M6 */
                BUF [0x07] = L5M7 /* \L5M7 */
                BUF [0x08] = L5M8 /* \L5M8 */
                BUF [0x09] = L5M9 /* \L5M9 */
                BUF [0x0A] = L5MA /* \L5MA */
                BUF [0x0B] = L5MB /* \L5MB */
                BUF [0x0C] = L5MC /* \L5MC */
                BUF [0x0D] = L5MD /* \L5MD */
                BUF [0x0E] = L5ME /* \L5ME */
                BUF [0x0F] = L5MF /* \L5MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L5PL /* \L5PL */
                RPOS = L5DG /* \L5DG */
                Return (PLDB) /* \_SB_.PC00.LNK5._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L5DI > Zero))
                {
                    Local1 = IICB (L5A0, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > One))
                {
                    Local1 = IICB (L5A1, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x02))
                {
                    Local1 = IICB (L5A2, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x03))
                {
                    Local1 = IICB (L5A3, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x04))
                {
                    Local1 = IICB (L5A4, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x05))
                {
                    Local1 = IICB (L5A5, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x06))
                {
                    Local1 = IICB (L5A6, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x07))
                {
                    Local1 = IICB (L5A7, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x08))
                {
                    Local1 = IICB (L5A8, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x09))
                {
                    Local1 = IICB (L5A9, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x0A))
                {
                    Local1 = IICB (L5AA, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L5DI > 0x0B))
                {
                    Local1 = IICB (L5AB, L5BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L5DV /* \L5DV */
                PAR [One] = L5CV /* \L5CV */
                PAR [0x18] = L5LC /* \L5LC */
                PAR [0x1C] = L5LU /* \L5LU */
                PAR [0x1D] = L5NL /* \L5NL */
                PAR [0x4E] = L5EE /* \L5EE */
                PAR [0x4F] = L5VC /* \L5VC */
                If ((PCHS == PCHH))
                {
                    PAR [0x50] = 0x0D
                }

                PAR [0x52] = L5FS /* \L5FS */
                PAR [0x53] = L5LE /* \L5LE */
                PAR [0x54] = CDEG (L5DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L5CK /* \L5CK */
                PAR [0x5A] = L5CL /* \L5CL */
                PAR [0x5F] = L5PP /* \L5PP */
                PAR [0x60] = L5VR /* \L5VR */
                PAR [0x61] = L5PV /* \L5PV */
                PAR [0x62] = L5PU /* \L5PU */
                Return (PAR) /* \_SB_.PC00.LNK5.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L5M0 /* \L5M0 */
                        BUF [One] = L5M1 /* \L5M1 */
                        BUF [0x02] = L5M2 /* \L5M2 */
                        BUF [0x03] = L5M3 /* \L5M3 */
                        BUF [0x04] = L5M4 /* \L5M4 */
                        BUF [0x05] = L5M5 /* \L5M5 */
                        BUF [0x06] = L5M6 /* \L5M6 */
                        BUF [0x07] = L5M7 /* \L5M7 */
                        BUF [0x08] = L5M8 /* \L5M8 */
                        BUF [0x09] = L5M9 /* \L5M9 */
                        BUF [0x0A] = L5MA /* \L5MA */
                        BUF [0x0B] = L5MB /* \L5MB */
                        BUF [0x0C] = L5MC /* \L5MC */
                        BUF [0x0D] = L5MD /* \L5MD */
                        BUF [0x0E] = L5ME /* \L5ME */
                        BUF [0x0F] = L5MF /* \L5MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L5DI /* \L5DI */
                        DEV0 = DSMI (L5D0, L5A0, Zero, L5BS)
                        DEV1 = DSMI (L5D1, L5A1, Zero, L5BS)
                        DEV2 = DSMI (L5D2, L5A2, Zero, L5BS)
                        DEV3 = DSMI (L5D3, L5A3, Zero, L5BS)
                        DEV4 = DSMI (L5D4, L5A4, Zero, L5BS)
                        DEV5 = DSMI (L5D5, L5A5, Zero, L5BS)
                        DEV6 = DSMI (L5D6, L5A6, Zero, L5BS)
                        DEV7 = DSMI (L5D7, L5A7, Zero, L5BS)
                        DEV8 = DSMI (L5D8, L5A8, Zero, L5BS)
                        DEV9 = DSMI (L5D9, L5A9, Zero, L5BS)
                        DEVA = DSMI (L5DA, L5AA, Zero, L5BS)
                        DEVB = DSMI (L5DB, L5AB, Zero, L5BS)
                        Return (DSMB) /* \_SB_.PC00.LNK5._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L5DI) /* \L5DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L5DI > Zero))
                        {
                            Return (DSMI (L5D0, L5A0, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L5DI > One))
                        {
                            Return (DSMI (L5D1, L5A1, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L5DI > 0x02))
                        {
                            Return (DSMI (L5D2, L5A2, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L5DI > 0x03))
                        {
                            Return (DSMI (L5D3, L5A3, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L5DI > 0x04))
                        {
                            Return (DSMI (L5D4, L5A4, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L5DI > 0x05))
                        {
                            Return (DSMI (L5D5, L5A5, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L5DI > 0x06))
                        {
                            Return (DSMI (L5D6, L5A6, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L5DI > 0x07))
                        {
                            Return (DSMI (L5D7, L5A7, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L5DI > 0x08))
                        {
                            Return (DSMI (L5D8, L5A8, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L5DI > 0x09))
                        {
                            Return (DSMI (L5D9, L5A9, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L5DI > 0x0A))
                        {
                            Return (DSMI (L5DA, L5AA, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L5DI > 0x0B))
                        {
                            Return (DSMI (L5DB, L5AB, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (FLM0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L0FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL, L0BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (Zero))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = F0M0 /* \F0M0 */
                BUF [One] = F0M1 /* \F0M1 */
                BUF [0x02] = F0M2 /* \F0M2 */
                BUF [0x03] = F0M3 /* \F0M3 */
                BUF [0x04] = F0M4 /* \F0M4 */
                BUF [0x05] = F0M5 /* \F0M5 */
                BUF [0x06] = F0M6 /* \F0M6 */
                BUF [0x07] = F0M7 /* \F0M7 */
                BUF [0x08] = F0M8 /* \F0M8 */
                BUF [0x09] = F0M9 /* \F0M9 */
                BUF [0x0A] = F0MA /* \F0MA */
                BUF [0x0B] = F0MB /* \F0MB */
                BUF [0x0C] = F0MC /* \F0MC */
                BUF [0x0D] = F0MD /* \F0MD */
                BUF [0x0E] = F0ME /* \F0ME */
                BUF [0x0F] = F0MF /* \F0MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDB) /* \_SB_.PC00.FLM0._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Local1 = PINR (F0GP, F0GG)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Local1 = IICB (F0AB, F0BS)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                {
                    Return (FHCI (Zero))
                }

                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return (FMID (Zero))
                }

                If ((Arg0 == ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a") /* Unknown UUID */))
                {
                    Return (FMLS (Zero))
                }

                If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                {
                    Return ("TGL")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (Zero, F0AB, Zero, F0BS))
                    }
                }

                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (0x04, (AGPN (F0GP, F0GG) & 0xFF), F0IV, F0AV))
                    }
                }

                If ((Arg0 == ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca") /* Unknown UUID */))
                {
                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (FLM1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PKG1, Package (0x01)
            {
                "\\_SB.PC00.XHCI.RHUB.HS04.VI2C"
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L1FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L1EN)
                {
                    If ((CVFS == 0x02))
                    {
                        Return (PKG1) /* \_SB_.PC00.FLM1.PKG1 */
                    }
                    Else
                    {
                        Return (CDEP (L1CL, L1BS))
                    }
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (One))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = F1M0 /* \F1M0 */
                BUF [One] = F1M1 /* \F1M1 */
                BUF [0x02] = F1M2 /* \F1M2 */
                BUF [0x03] = F1M3 /* \F1M3 */
                BUF [0x04] = F1M4 /* \F1M4 */
                BUF [0x05] = F1M5 /* \F1M5 */
                BUF [0x06] = F1M6 /* \F1M6 */
                BUF [0x07] = F1M7 /* \F1M7 */
                BUF [0x08] = F1M8 /* \F1M8 */
                BUF [0x09] = F1M9 /* \F1M9 */
                BUF [0x0A] = F1MA /* \F1MA */
                BUF [0x0B] = F1MB /* \F1MB */
                BUF [0x0C] = F1MC /* \F1MC */
                BUF [0x0D] = F1MD /* \F1MD */
                BUF [0x0E] = F1ME /* \F1ME */
                BUF [0x0F] = F1MF /* \F1MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDB) /* \_SB_.PC00.FLM1._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((CVFS == 0x02))
                {
                    Local1 = VPIN (0x03)
                }
                Else
                {
                    Local1 = PINR (F1GP, F1GG)
                }

                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                If ((CVFS == 0x02))
                {
                    Local1 = VIIC (F1AB)
                }
                Else
                {
                    Local1 = IICB (F1AB, F1BS)
                }

                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                {
                    Return (FHCI (One))
                }

                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return (FMID (One))
                }

                If ((Arg0 == ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a") /* Unknown UUID */))
                {
                    Return (FMLS (One))
                }

                If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                {
                    Return ("LKF")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (Zero, F1AB, Zero, F1BS))
                    }
                }

                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (0x04, (AGPN (F1GP, F1GG) & 0xFF), F1IV, F1AV))
                    }
                }

                If ((Arg0 == ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca") /* Unknown UUID */))
                {
                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (FLM2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L2FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL, L2BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x02))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = F2M0 /* \F2M0 */
                BUF [One] = F2M1 /* \F2M1 */
                BUF [0x02] = F2M2 /* \F2M2 */
                BUF [0x03] = F2M3 /* \F2M3 */
                BUF [0x04] = F2M4 /* \F2M4 */
                BUF [0x05] = F2M5 /* \F2M5 */
                BUF [0x06] = F2M6 /* \F2M6 */
                BUF [0x07] = F2M7 /* \F2M7 */
                BUF [0x08] = F2M8 /* \F2M8 */
                BUF [0x09] = F2M9 /* \F2M9 */
                BUF [0x0A] = F2MA /* \F2MA */
                BUF [0x0B] = F2MB /* \F2MB */
                BUF [0x0C] = F2MC /* \F2MC */
                BUF [0x0D] = F2MD /* \F2MD */
                BUF [0x0E] = F2ME /* \F2ME */
                BUF [0x0F] = F2MF /* \F2MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDB) /* \_SB_.PC00.FLM2._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Local1 = PINR (F2GP, F2GG)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Local1 = IICB (F2AB, F2BS)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                {
                    Return (FHCI (0x02))
                }

                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return (FMID (0x02))
                }

                If ((Arg0 == ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a") /* Unknown UUID */))
                {
                    Return (FMLS (0x02))
                }

                If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                {
                    Return ("TGL")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (Zero, F2AB, Zero, F2BS))
                    }
                }

                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (0x04, (AGPN (F2GP, F2GG) & 0xFF), F2IV, F2AV))
                    }
                }

                If ((Arg0 == ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca") /* Unknown UUID */))
                {
                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (FLM3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L3FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL, L3BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x03))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = F3M0 /* \F3M0 */
                BUF [One] = F3M1 /* \F3M1 */
                BUF [0x02] = F3M2 /* \F3M2 */
                BUF [0x03] = F3M3 /* \F3M3 */
                BUF [0x04] = F3M4 /* \F3M4 */
                BUF [0x05] = F3M5 /* \F3M5 */
                BUF [0x06] = F3M6 /* \F3M6 */
                BUF [0x07] = F3M7 /* \F3M7 */
                BUF [0x08] = F3M8 /* \F3M8 */
                BUF [0x09] = F3M9 /* \F3M9 */
                BUF [0x0A] = F3MA /* \F3MA */
                BUF [0x0B] = F3MB /* \F3MB */
                BUF [0x0C] = F3MC /* \F3MC */
                BUF [0x0D] = F3MD /* \F3MD */
                BUF [0x0E] = F3ME /* \F3ME */
                BUF [0x0F] = F3MF /* \F3MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDB) /* \_SB_.PC00.FLM3._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Local1 = PINR (F3GP, F3GG)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Local1 = IICB (F3AB, F3BS)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                {
                    Return (FHCI (0x03))
                }

                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return (FMID (0x03))
                }

                If ((Arg0 == ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a") /* Unknown UUID */))
                {
                    Return (FMLS (0x03))
                }

                If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                {
                    Return ("TGL")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (Zero, F3AB, Zero, F3BS))
                    }
                }

                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (0x04, (AGPN (F3GP, F3GG) & 0xFF), F3IV, F3AV))
                    }
                }

                If ((Arg0 == ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca") /* Unknown UUID */))
                {
                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (FLM4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L4FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L4EN)
                {
                    Return (CDEP (L4CL, L4BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x04))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = F4M0 /* \F4M0 */
                BUF [One] = F4M1 /* \F4M1 */
                BUF [0x02] = F4M2 /* \F4M2 */
                BUF [0x03] = F4M3 /* \F4M3 */
                BUF [0x04] = F4M4 /* \F4M4 */
                BUF [0x05] = F4M5 /* \F4M5 */
                BUF [0x06] = F4M6 /* \F4M6 */
                BUF [0x07] = F4M7 /* \F4M7 */
                BUF [0x08] = F4M8 /* \F4M8 */
                BUF [0x09] = F4M9 /* \F4M9 */
                BUF [0x0A] = F4MA /* \F4MA */
                BUF [0x0B] = F4MB /* \F4MB */
                BUF [0x0C] = F4MC /* \F4MC */
                BUF [0x0D] = F4MD /* \F4MD */
                BUF [0x0E] = F4ME /* \F4ME */
                BUF [0x0F] = F4MF /* \F4MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDB) /* \_SB_.PC00.FLM4._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Local1 = PINR (F4GP, F4GG)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Local1 = IICB (F4AB, F4BS)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                {
                    Return (FHCI (0x04))
                }

                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return (FMID (0x04))
                }

                If ((Arg0 == ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a") /* Unknown UUID */))
                {
                    Return (FMLS (0x04))
                }

                If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                {
                    Return ("TGL")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (Zero, F4AB, Zero, F4BS))
                    }
                }

                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (0x04, (AGPN (F4GP, F4GG) & 0xFF), F4IV, F4AV))
                    }
                }

                If ((Arg0 == ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca") /* Unknown UUID */))
                {
                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (FLM5)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L5FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L5EN)
                {
                    Return (CDEP (L5CL, L5BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x05))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = F5M0 /* \F5M0 */
                BUF [One] = F5M1 /* \F5M1 */
                BUF [0x02] = F5M2 /* \F5M2 */
                BUF [0x03] = F5M3 /* \F5M3 */
                BUF [0x04] = F5M4 /* \F5M4 */
                BUF [0x05] = F5M5 /* \F5M5 */
                BUF [0x06] = F5M6 /* \F5M6 */
                BUF [0x07] = F5M7 /* \F5M7 */
                BUF [0x08] = F5M8 /* \F5M8 */
                BUF [0x09] = F5M9 /* \F5M9 */
                BUF [0x0A] = F5MA /* \F5MA */
                BUF [0x0B] = F5MB /* \F5MB */
                BUF [0x0C] = F5MC /* \F5MC */
                BUF [0x0D] = F5MD /* \F5MD */
                BUF [0x0E] = F5ME /* \F5ME */
                BUF [0x0F] = F5MF /* \F5MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDB) /* \_SB_.PC00.FLM5._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Local1 = PINR (F5GP, F5GG)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Local1 = IICB (F5AB, F5BS)
                ConcatenateResTemplate (Local0, Local1, Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015") /* Unknown UUID */))
                {
                    Return (FHCI (0x05))
                }

                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return (FMID (0x05))
                }

                If ((Arg0 == ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a") /* Unknown UUID */))
                {
                    Return (FMLS (0x05))
                }

                If ((Arg0 == ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8") /* Unknown UUID */))
                {
                    Return ("TGL")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (Zero, F5AB, Zero, F5BS))
                    }
                }

                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (0x04, (AGPN (F5GP, F5GG) & 0xFF), F5IV, F5AV))
                    }
                }

                If ((Arg0 == ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca") /* Unknown UUID */))
                {
                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Device (CAM0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3471")  // _HID: Hardware ID
            Name (_CID, "INT3481")  // _CID: Compatible ID
            Name (_DDN, "IMX135-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x000E, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0050, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0051, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0052, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PC00.I2C2.CAM0._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .P......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x36,  // .......6
                    /* 0058 */  0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // n.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PC00.I2C2.CAM0.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return ("13P2BAD33")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (0x06)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x02001000)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (0x02000E01)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (0x02005002)
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (0x02005103)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Return (0x02005204)
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (0x02005305)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.I2C4)
    {
        Device (CAM1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3474")  // _HID: Hardware ID
            Name (_CID, "INT3484")  // _CID: Compatible ID
            Name (_DDN, "OV2740-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^^I2C2.PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PC00.I2C4.CAM1._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .P......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0xF8,  // ........
                    /* 0058 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PC00.I2C4.CAM1.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    Return ("4SF259T2")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x04003600)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Device (PMIC)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3482")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, 0x0C)  // _UID: Unique ID
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "CENTER",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PC00.I2C2.PMIC._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,  // ...P....
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Return (PAR) /* \_SB_.PC00.I2C2.PMIC.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (0x07)
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x02004C0B)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b") /* Unknown UUID */)
        Method (HIDD, 5, Serialized)
        {
            If ((Arg0 == HIDG))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If ((Arg0 == TP7G))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (I2CM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y40, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.I2CM._Y40._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.PC00.I2CM._Y40._SPE, DSP0)  // _SPE: Speed
                    DAD0 = Arg1
                    DSP0 = Arg2
                    Return (IIC0) /* \_SB_.PC00.I2CM.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y41, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.I2CM._Y41._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.PC00.I2CM._Y41._SPE, DSP1)  // _SPE: Speed
                    DAD1 = Arg1
                    DSP1 = Arg2
                    Return (IIC1) /* \_SB_.PC00.I2CM.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y42, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.I2CM._Y42._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.PC00.I2CM._Y42._SPE, DSP2)  // _SPE: Speed
                    DAD2 = Arg1
                    DSP2 = Arg2
                    Return (IIC2) /* \_SB_.PC00.I2CM.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y43, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.I2CM._Y43._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.PC00.I2CM._Y43._SPE, DSP3)  // _SPE: Speed
                    DAD3 = Arg1
                    DSP3 = Arg2
                    Return (IIC3) /* \_SB_.PC00.I2CM.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y44, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.I2CM._Y44._ADR, DAD4)  // _ADR: Address
                    CreateDWordField (IIC4, \_SB.PC00.I2CM._Y44._SPE, DSP4)  // _SPE: Speed
                    DAD4 = Arg1
                    DSP4 = Arg2
                    Return (IIC4) /* \_SB_.PC00.I2CM.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y45, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.I2CM._Y45._ADR, DAD5)  // _ADR: Address
                    CreateDWordField (IIC5, \_SB.PC00.I2CM._Y45._SPE, DSP5)  // _SPE: Speed
                    DAD5 = Arg1
                    DSP5 = Arg2
                    Return (IIC5) /* \_SB_.PC00.I2CM.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (SPIM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PC00.SPI1",
                            0x00, ResourceConsumer, _Y46, Exclusive,
                            )
                    })
                    CreateWordField (IIC7, \_SB.PC00.SPIM._Y46._PHA, DPH7)  // _PHA: Clock Phase
                    CreateDWordField (IIC7, \_SB.PC00.SPIM._Y46._SPE, DSP7)  // _SPE: Speed
                    DPH7 = Arg1
                    DSP7 = Arg2
                    Return (IIC7) /* \_SB_.PC00.SPIM.IIC7 */
                }
                Case (0x08)
                {
                    Name (IIC8, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PC00.SPI2",
                            0x00, ResourceConsumer, _Y47, Exclusive,
                            )
                    })
                    CreateWordField (IIC8, \_SB.PC00.SPIM._Y47._PHA, DPH8)  // _PHA: Clock Phase
                    CreateDWordField (IIC8, \_SB.PC00.SPIM._Y47._SPE, DSP8)  // _SPE: Speed
                    DPH8 = Arg1
                    DSP8 = Arg2
                    Return (IIC8) /* \_SB_.PC00.SPIM.IIC8 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (UCMM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (UCM0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM0) /* \_SB_.PC00.UCMM.UCM0 */
                }
                Case (One)
                {
                    Name (UCM1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM1) /* \_SB_.PC00.UCMM.UCM1 */
                }
                Case (0x02)
                {
                    Name (UCM2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM2) /* \_SB_.PC00.UCMM.UCM2 */
                }
                Case (0x03)
                {
                    Name (UCM3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM3) /* \_SB_.PC00.UCMM.UCM3 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS0 /* \SDS0 */
        I2CX = Zero
    }

    Scope (_SB.PC00.I2C1)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS1 /* \SDS1 */
        I2CX = One
    }

    Scope (_SB.PC00.I2C2)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS2 /* \SDS2 */
        I2CX = 0x02
    }

    Scope (_SB.PC00.I2C3)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS3 /* \SDS3 */
        I2CX = 0x03
    }

    Scope (_SB.PC00.SPI1)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        SPIP = SDS7 /* \SDS7 */
        SPIX = 0x07
        Device (FPNT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((FPTT == One))
                {
                    Return ("FPC1011")
                }

                If ((FPTT == 0x02))
                {
                    Return ("FPC1020")
                }

                If ((FPTT == 0x03))
                {
                    Return ("VFSI6101")
                }

                If ((FPTT == 0x04))
                {
                    Return ("VFSI7500")
                }

                If ((FPTT == 0x05))
                {
                    Return ("EGIS0300")
                }

                If ((FPTT == 0x06))
                {
                    Return ("FPC1021")
                }

                Return ("DUMY0000")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GFPI, One)
                SHPO (GFPS, One)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((FPTT != Zero) && (SPIP == One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y48)
                    {
                        0x00000000,
                    }
                })
                Name (GBUF, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, _Y49,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (UBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (BBUF, 0x17, SPIN)
                CreateWordField (GBUF, 0x17, GPIN)
                CreateDWordField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y48._INT, IPIN)  // _INT: Interrupts
                CreateWordField (UBUF, 0x17, UPIN)
                CreateBitField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y48._LL, ILVL)  // _LL_: Low Level
                CreateBitField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y48._HE, ITRG)  // _HE_: High-Edge
                CreateField (GBUF, \_SB.PC00.SPI1.FPNT._CRS._Y49._POL, 0x02, GLVL)  // _POL: Polarity
                CreateBitField (GBUF, \_SB.PC00.SPI1.FPNT._CRS._Y49._MOD, GTRG)  // _MOD: Mode
                SPIN = GNUM (GFPS)
                GPIN = GNUM (GFPI)
                IPIN = INUM (GFPI)
                UPIN = GNUM (GFPI)
                If (((FPTT == 0x02) || (FPTT == 0x06)))
                {
                    ILVL = Zero
                    ITRG = One
                    GLVL = Zero
                    GTRG = One
                }

                If ((FPTT == 0x04))
                {
                    ILVL = Zero
                    ITRG = One
                }

                Switch (ToInteger (FPTT))
                {
                    Case (One)
                    {
                        Local1 = 0x00989680
                        Local0 = Zero
                    }
                    Case (0x02)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Case (0x03)
                    {
                        Local1 = 0x007A1200
                        Local0 = One
                    }
                    Case (0x04)
                    {
                        Local1 = 0x007A1200
                        Local0 = Zero
                    }
                    Case (0x05)
                    {
                        Local1 = 0x00F42400
                        Local0 = Zero
                    }
                    Case (0x06)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Default
                    {
                        Local1 = Zero
                        Local0 = Zero
                    }

                }

                If ((FPTT == One))
                {
                    Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                }

                If (((FPTT == 0x04) && (FPTM == Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                        )))
                }

                If (((FPTT == 0x04) && (FPTM != Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                        )))
                }

                If ((FPTM == Zero))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                }

                Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
            }
        }
    }

    Scope (_SB.PC00.SPI2)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        SPIP = SDS8 /* \SDS8 */
        SPIX = 0x08
        Device (FPNT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((FPTT == One))
                {
                    Return ("FPC1011")
                }

                If ((FPTT == 0x02))
                {
                    Return ("FPC1020")
                }

                If ((FPTT == 0x03))
                {
                    Return ("VFSI6101")
                }

                If ((FPTT == 0x04))
                {
                    Return ("VFSI7500")
                }

                If ((FPTT == 0x05))
                {
                    Return ("EGIS0300")
                }

                If ((FPTT == 0x06))
                {
                    Return ("FPC1021")
                }

                Return ("DUMY0000")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GFPI, One)
                SHPO (GFPS, One)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((FPTT != Zero) && (SPIP == One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y4A)
                    {
                        0x00000000,
                    }
                })
                Name (GBUF, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, _Y4B,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (UBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (BBUF, 0x17, SPIN)
                CreateWordField (GBUF, 0x17, GPIN)
                CreateDWordField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y4A._INT, IPIN)  // _INT: Interrupts
                CreateWordField (UBUF, 0x17, UPIN)
                CreateBitField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y4A._LL, ILVL)  // _LL_: Low Level
                CreateBitField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y4A._HE, ITRG)  // _HE_: High-Edge
                CreateField (GBUF, \_SB.PC00.SPI2.FPNT._CRS._Y4B._POL, 0x02, GLVL)  // _POL: Polarity
                CreateBitField (GBUF, \_SB.PC00.SPI2.FPNT._CRS._Y4B._MOD, GTRG)  // _MOD: Mode
                SPIN = GNUM (GFPS)
                GPIN = GNUM (GFPI)
                IPIN = INUM (GFPI)
                UPIN = GNUM (GFPI)
                If (((FPTT == 0x02) || (FPTT == 0x06)))
                {
                    ILVL = Zero
                    ITRG = One
                    GLVL = Zero
                    GTRG = One
                }

                If ((FPTT == 0x04))
                {
                    ILVL = Zero
                    ITRG = One
                }

                Switch (ToInteger (FPTT))
                {
                    Case (One)
                    {
                        Local1 = 0x00989680
                        Local0 = Zero
                    }
                    Case (0x02)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Case (0x03)
                    {
                        Local1 = 0x007A1200
                        Local0 = One
                    }
                    Case (0x04)
                    {
                        Local1 = 0x007A1200
                        Local0 = Zero
                    }
                    Case (0x05)
                    {
                        Local1 = 0x00F42400
                        Local0 = Zero
                    }
                    Case (0x06)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Default
                    {
                        Local1 = Zero
                        Local0 = Zero
                    }

                }

                If ((FPTT == One))
                {
                    Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                }

                If (((FPTT == 0x04) && (FPTM == Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                        )))
                }

                If (((FPTT == 0x04) && (FPTM != Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                        )))
                }

                If ((FPTM == Zero))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                }

                Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
            }
        }
    }

    Scope (_SB.PC00.HDAS.SNDW)
    {
        Device (SWD0)
        {
            Name (_ADR, 0x000010025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD1)
        {
            Name (_ADR, 0x000110025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD2)
        {
            Name (_ADR, 0x000210025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD3)
        {
            Name (_ADR, 0x000310025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD4)
        {
            Name (_ADR, 0x000010025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD5)
        {
            Name (_ADR, 0x000110025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD6)
        {
            Name (_ADR, 0x000210025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD7)
        {
            Name (_ADR, 0x000310025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }
    }

    If ((I2SC != Zero))
    {
        If ((I2SB == Zero))
        {
            Scope (_SB.PC00.I2C0)
            {
                Device (HDAC)
                {
                    Name (_HID, "INT00000")  // _HID: Hardware ID
                    Name (_CID, "INT00000")  // _CID: Compatible ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CADR, Zero)
                    Name (CDIS, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == One))
                        {
                            _HID = "INT34C2"
                            _CID = "INT34C2"
                            CADR = 0x1C
                        }
                        ElseIf ((I2SC == 0x02))
                        {
                            _HID = "10EC1308"
                            _CID = "10EC1308"
                            CADR = 0x10
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC != Zero) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        If ((CDIS == One))
                        {
                            Return (0x0D)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
        }
        ElseIf ((I2SB == One))
        {
            Scope (_SB.PC00.I2C1)
            {
                Device (HDAC)
                {
                    Name (_HID, "INT00000")  // _HID: Hardware ID
                    Name (_CID, "INT00000")  // _CID: Compatible ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CADR, Zero)
                    Name (CDIS, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == One))
                        {
                            _HID = "INT34C2"
                            _CID = "INT34C2"
                            CADR = 0x1C
                        }
                        ElseIf ((I2SC == 0x02))
                        {
                            _HID = "10EC1308"
                            _CID = "10EC1308"
                            CADR = 0x10
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC != Zero) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        If ((CDIS == One))
                        {
                            Return (0x0D)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
        }
        ElseIf ((I2SB == 0x02))
        {
            Scope (_SB.PC00.I2C2)
            {
                Device (HDAC)
                {
                    Name (_HID, "INT00000")  // _HID: Hardware ID
                    Name (_CID, "INT00000")  // _CID: Compatible ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CADR, Zero)
                    Name (CDIS, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == One))
                        {
                            _HID = "INT34C2"
                            _CID = "INT34C2"
                            CADR = 0x1C
                        }
                        ElseIf ((I2SC == 0x02))
                        {
                            _HID = "10EC1308"
                            _CID = "10EC1308"
                            CADR = 0x10
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC != Zero) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        If ((CDIS == One))
                        {
                            Return (0x0D)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
        }
        ElseIf ((I2SB == 0x03))
        {
            Scope (_SB.PC00.I2C3)
            {
                Device (HDAC)
                {
                    Name (_HID, "INT00000")  // _HID: Hardware ID
                    Name (_CID, "INT00000")  // _CID: Compatible ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CADR, Zero)
                    Name (CDIS, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == One))
                        {
                            _HID = "INT34C2"
                            _CID = "INT34C2"
                            CADR = 0x1C
                        }
                        ElseIf ((I2SC == 0x02))
                        {
                            _HID = "10EC1308"
                            _CID = "10EC1308"
                            CADR = 0x10
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC != Zero) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        If ((CDIS == One))
                        {
                            Return (0x0D)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
        }
        ElseIf ((I2SB == 0x04))
        {
            Scope (_SB.PC00.I2C4)
            {
                Device (HDAC)
                {
                    Name (_HID, "INT00000")  // _HID: Hardware ID
                    Name (_CID, "INT00000")  // _CID: Compatible ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CADR, Zero)
                    Name (CDIS, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == One))
                        {
                            _HID = "INT34C2"
                            _CID = "INT34C2"
                            CADR = 0x1C
                        }
                        ElseIf ((I2SC == 0x02))
                        {
                            _HID = "10EC1308"
                            _CID = "10EC1308"
                            CADR = 0x10
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC != Zero) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        If ((CDIS == One))
                        {
                            Return (0x0D)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
        }
        ElseIf ((I2SB == 0x05))
        {
            Scope (_SB.PC00.I2C5)
            {
                Device (HDAC)
                {
                    Name (_HID, "INT00000")  // _HID: Hardware ID
                    Name (_CID, "INT00000")  // _CID: Compatible ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CADR, Zero)
                    Name (CDIS, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == One))
                        {
                            _HID = "INT34C2"
                            _CID = "INT34C2"
                            CADR = 0x1C
                        }
                        ElseIf ((I2SC == 0x02))
                        {
                            _HID = "10EC1308"
                            _CID = "10EC1308"
                            CADR = 0x10
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC != Zero) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        If ((CDIS == One))
                        {
                            Return (0x0D)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ToUUID ("d46f9d72-81a4-47fd-b301-8e39d17c0981") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0200))
            }

            If ((Arg0 == ToUUID ("f3578986-4400-4adf-ae7e-cd433cd3f26e") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0400))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                Return ((ADPM & 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10){})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
        }
    }

    Method (HIDW, 4, Serialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            If ((Arg2 == Zero))
            {
                If ((Arg1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((Arg2 == One))
            {
                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                {
                    Case (Zero)
                    {
                        If (CondRefOf (\_SB.HIDD.HPEM))
                        {
                            \_SB.HIDD.HPEM (0x1B)
                        }
                    }
                    Case (One)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x80) // Status Change
                        }
                    }
                    Case (0x02)
                    {
                        If (CondRefOf (\_SB.PC00.LPCB.EC0.UPBT))
                        {
                            \_SB.PC00.LPCB.EC0.UPBT (0x07, One)
                            Notify (\_SB.HIDD, 0xCA) // Hardware-Specific
                        }
                    }
                    Case (0x03)
                    {
                        If (CondRefOf (\_SB.PC00.LPCB.EC0.UPBT))
                        {
                            \_SB.PC00.LPCB.EC0.UPBT (0x07, Zero)
                            Notify (\_SB.HIDD, 0xCB) // Hardware-Specific
                        }
                    }
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x02) // Device Wake
                        }
                    }

                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Method (HIWC, 1, NotSerialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            Return (One)
        }

        Return (Zero)
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                    )))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
            }

            Method (OFF, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                    )
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (_SB)
    {
        Name (C0PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Name (C1PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x04, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
    }

    Scope (\)
    {
        Method (PLD1, 0, Serialized)
        {
            Return (\_SB.C0PF)
        }
    }

    Scope (\)
    {
        Method (PLD2, 0, Serialized)
        {
            Return (\_SB.C1PF)
        }
    }

    Scope (_SB.PC00.THC0)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.THC1)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Method (_SB.G46D, 0, Serialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (_SB.GRFS, 0, Serialized)
    {
    }

    Method (_SB.GLVR, 2, Serialized)
    {
        If (Arg1)
        {
            Local0 = GGIV (Arg0)
        }
        Else
        {
            Local0 = GGOV (Arg0)
        }

        Return (Local0)
    }

    Method (_SB.GLVW, 2, Serialized)
    {
        SGOV (Arg0, Arg1)
        Return (One)
    }

    Method (_SB.GISR, 1, Serialized)
    {
        Local0 = GPC0 (Arg0)
        Local1 = 0x08
        Local0 >>= Local1
        Local2 = (Local0 & 0x03)
        If ((Local2 == 0x03))
        {
            Return (0x07)
        }
        ElseIf ((Local2 == 0x02))
        {
            Return (0x09)
        }
        ElseIf ((Local2 == One))
        {
            Return (0x0B)
        }
        Else
        {
            Return (0x05)
        }
    }

    Method (_SB.GISW, 2, Serialized)
    {
        Local0 = GPC0 (Arg0)
        If ((Arg1 == 0x09))
        {
            Local1 = 0x0300
            Local2 = (Local0 & ~Local1)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x19))
        {
            Local1 = 0x0300
            Local2 = (Local0 & ~Local1)
            Local3 = (0x00800000 | Local2)
            SPC0 (Arg0, Local3)
            Return (One)
        }
        ElseIf ((Arg1 == 0x0B))
        {
            Local2 = (0x0100 | Local0)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x1B))
        {
            Local1 = 0x00800100
            Local2 = (Local0 | Local1)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x05))
        {
            Local2 = (0x0200 | Local0)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x07))
        {
            Local1 = 0x0300
            Local2 = (Local0 | Local1)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (_SB.GOWW, 2, Serialized)
    {
        SHPO (Arg0, Arg1)
        Return (One)
    }

    Method (_SB.GESC, 1, Serialized)
    {
        CAGS (Arg0)
        Return (One)
    }

    Method (_SB.GINR, 1, Serialized)
    {
        Local0 = GGII (Arg0)
        Return (Local0)
    }

    Method (_SB.GINW, 2, Serialized)
    {
        SGII (Arg0, Arg1)
        Return (One)
    }

    Method (PPTS, 1, Serialized)
    {
    }

    Method (_SB.PC00.LPCB.PS2M._HID, 0, Serialized)  // _HID: Hardware ID
    {
        Switch (HPID)
        {
            Case (0x103C00B0)
            {
                Local1 = 0xA4302E4F
            }
            Case (0x103C00B3)
            {
                Local1 = 0xA5302E4F
            }
            Case (0x103C00B2)
            {
                Local1 = 0xA6302E4F
            }
            Case (0x103C00BB)
            {
                Local1 = 0xAA302E4F
            }
            Case (0x103C00B4)
            {
                Local1 = 0xA4302E4F
            }
            Case (0x103C00B7)
            {
                Local1 = 0xA5302E4F
            }
            Case (0x103C00B6)
            {
                Local1 = 0xA6302E4F
            }
            Case (0x103C00BC)
            {
                Local1 = 0xA4302E4F
            }
            Case (0x103C00BF)
            {
                Local1 = 0xA5302E4F
            }
            Case (0x103C00BE)
            {
                Local1 = 0xA6302E4F
            }
            Default
            {
                Local1 = 0xFF302E4F
            }

        }

        Return (Local1)
    }

    Method (_SB.PC00.LPCB.PS2M._CID, 0, Serialized)  // _CID: Compatible ID
    {
        Return (Package (0x03)
        {
            0x00012E4F, 
            0x02002E4F, 
            0x130FD041
        })
    }

    Method (_SB.THID, 0, Serialized)
    {
        Return ("ELAN2513")
    }

    If ((CVFS != Zero))
    {
        Scope (_SB.PC00.SPI1)
        {
            Device (SPFD)
            {
                Name (_HID, "INTC1058")  // _HID: Hardware ID
                Name (_DDN, "Intel SPI OED Device")  // _DDN: DOS Device Name
                Name (PKG0, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS04.VGPO"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If ((CVFS == 0x02))
                    {
                        Return (PKG0) /* \_SB_.PC00.SPI1.SPFD.PKG0 */
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            PC00
                        })
                    }
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (CBUF, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x008F
                            }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x008D
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0165
                            }
                    })
                    Name (VBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS04.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS04.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0001
                            }
                    })
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x008F
                            }
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    If ((CVFS == 0x02))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, VBUF), SBUF))
                    }
                    Else
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, GBUF), SBUF))
                    }
                }

                Device (CVFD)
                {
                    Name (_HID, "INTC1059")  // _HID: Hardware ID
                    Name (_DDN, "Intel CVF Device")  // _DDN: DOS Device Name
                    Method (SID, 1, Serialized)
                    {
                        Return (HCID (One))
                    }
                }
            }
        }

        Scope (_SB.PC00.XHCI.RHUB.HS04)
        {
            If ((CVFS == 0x02))
            {
                Device (VGPO)
                {
                    Name (_HID, "INTC1074")  // _HID: Hardware ID
                    Name (_DDN, "Intel UsbGpio Device")  // _DDN: DOS Device Name
                }

                Device (VI2C)
                {
                    Name (_HID, "INTC1075")  // _HID: Hardware ID
                    Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                }
            }
        }
    }

    If ((VMDE == One))
    {
        Name (VDSD, One)
        Scope (_SB.PC00)
        {
            Device (VMD0)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                If (CondRefOf (\VDSD))
                {
                    If ((VDSD == One))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (CBAR, 3, Serialized)
                {
                    Name (VCFB, Zero)
                    VCFB = XBAS /* \XBAS */
                    VCFB |= Zero
                    VCFB |= 0x00070000
                    VCFB |= Zero
                    OperationRegion (VCFG, SystemMemory, VCFB, 0x0100)
                    Field (VCFG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Name (DCFB, Zero)
                    DCFB = BAR0 /* \_SB_.PC00.VMD0.CBAR.BAR0 */
                    DCFB &= 0xFFFFFFFFFFFFFFF0
                    DCFB |= (Arg0 << 0x14)
                    DCFB |= (Arg1 << 0x0F)
                    DCFB |= (Arg2 << 0x0C)
                    Return (DCFB) /* \_SB_.PC00.VMD0.CBAR.DCFB */
                }

                Device (NVDR)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((DPMS == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("a3316317-e8b6-4adf-96e8-94d94a51a38e") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (0x03)
                                        }
                                        Default
                                        {
                                            Return (Zero)
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    Name (PPAR, Package (0x01)
                                    {
                                        Buffer (0x18){}
                                    })
                                    CreateWordField (DerefOf (PPAR [Zero]), Zero, DPM0)
                                    CreateWordField (DerefOf (PPAR [Zero]), 0x02, DPM1)
                                    CreateDWordField (DerefOf (PPAR [Zero]), 0x04, DPM2)
                                    CreateQWordField (DerefOf (PPAR [Zero]), 0x08, DPM3)
                                    CreateQWordField (DerefOf (PPAR [Zero]), 0x10, DPM4)
                                    If ((DPMS == Zero))
                                    {
                                        DPM0 = 0x02
                                        DPM1 = Zero
                                        DPM3 = Zero
                                        DPM4 = Zero
                                        Return (PPAR) /* \_SB_.PC00.VMD0.NVDR._DSM.PPAR */
                                    }
                                    Else
                                    {
                                        DPM0 = Zero
                                        DPM1 = Zero
                                        DPM3 = PMSA /* \PMSA */
                                        DPM4 = PMRL /* \PMRL */
                                        Return (PPAR) /* \_SB_.PC00.VMD0.NVDR._DSM.PPAR */
                                    }
                                }

                            }
                        }
                        Else
                        {
                            Return (^^^^NVDR._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Device (NVD1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((DPMS == One))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_LSI, 0, NotSerialized)  // _LSI: Label Storage Information
                        {
                            Return (\_SB.NVDR.NVD1._LSI ())
                        }

                        Method (_LSR, 2, Serialized)  // _LSR: Label Storage Read
                        {
                            Return (\_SB.NVDR.NVD1._LSR (Arg0, Arg1))
                        }

                        Method (_LSW, 3, Serialized)  // _LSW: Label Storage Write
                        {
                            Return (\_SB.NVDR.NVD1._LSW (Arg0, Arg1, Arg2))
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Return (\_SB.NVDR.NVD1._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Device (RP01)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x80E0FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP02)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, One)
                    Name (_ADR, 0x80E1FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP03)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x80E2FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP04)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x80E3FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP05)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x80E4FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP06)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x80E5FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP07)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x80E6FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP08)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x80E7FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP09)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x08)
                    Name (_ADR, 0x80E8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP10)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x09)
                    Name (_ADR, 0x80E9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP11)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x0A)
                    Name (_ADR, 0x80EAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP12)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x0B)
                    Name (_ADR, 0x80EBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP13)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x0C)
                    Name (_ADR, 0x80ECFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP14)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x0D)
                    Name (_ADR, 0x80EDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP15)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x0E)
                    Name (_ADR, 0x80EEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP16)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x0F)
                    Name (_ADR, 0x80EFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP17)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x10)
                    Name (_ADR, 0x80D8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP18)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x11)
                    Name (_ADR, 0x80D9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP19)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x12)
                    Name (_ADR, 0x80DAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP20)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x13)
                    Name (_ADR, 0x80DBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP21)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x14)
                    Name (_ADR, 0x80DCFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP22)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x15)
                    Name (_ADR, 0x80DDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP23)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x16)
                    Name (_ADR, 0x80DEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP24)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x17)
                    Name (_ADR, 0x80DFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG0)
                {
                    Name (RPD, 0x06)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x8030FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG1)
                {
                    Name (RPD, One)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, One)
                    Name (_ADR, 0x8008FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG2)
                {
                    Name (RPD, One)
                    Name (RPF, One)
                    Name (RSPT, 0x02)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x8009FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG3)
                {
                    Name (RPD, One)
                    Name (RPF, 0x02)
                    Name (RSPT, 0x02)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x800AFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PRT0)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x00B8FFF0)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT1)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, One)
                    Name (_ADR, 0x00B8FFF1)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT2)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x00B8FFF2)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT3)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x00B8FFF3)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT4)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x00B8FFF4)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT5)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x00B8FFF5)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT6)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x00B8FFF6)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT7)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x00B8FFF7)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Name (VLVN, Zero)
                Name (VV0D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV1D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV2D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV3D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VD3A, Zero)
                Name (VV0S, Zero)
                Name (VV1S, Zero)
                Name (VV2S, Zero)
                Name (VV3S, Zero)
                Method (SVRP, 3, NotSerialized)
                {
                    Local0 = (SizeOf (Arg0) - One)
                    ADBG (Concatenate ("Volume size is: ", Local0))
                    If ((Local0 > 0x20))
                    {
                        ADBG ("Volume size over 32")
                        Return (Zero)
                    }

                    Arg2 = Local0
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        Arg1 [Local1] = DerefOf (Arg0 [(Local1 + One)]
                            )
                        ADBG (Concatenate ("Adding to volume: ", ToHexString (DerefOf (Arg1 [Local1]))))
                        Local1++
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (RBUF, Buffer (One)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (RBUF, Zero, SFUN)
                                SFUN = 0x3F
                                Return (RBUF) /* \_SB_.PC00.VMD0._DSM.RBUF */
                            }
                            Case (One)
                            {
                                VLVN = ToInteger (DerefOf (Arg3 [Zero]))
                                If ((VLVN == Zero))
                                {
                                    SVRP (Arg3, VV0D, RefOf (VV0S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == One))
                                {
                                    SVRP (Arg3, VV1D, RefOf (VV1S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x02))
                                {
                                    SVRP (Arg3, VV2D, RefOf (VV2S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x03))
                                {
                                    SVRP (Arg3, VV3D, RefOf (VV3S))
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Case (0x02)
                            {
                                Name (VVON, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVON [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        Local1++
                                    }

                                    VLON (Local0, VVON)
                                    Return (Zero)
                                }
                            }
                            Case (0x03)
                            {
                                Name (VVOF, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVOF [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        Local1++
                                    }

                                    VLOF (Local0, VVOF)
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                VD3A = DerefOf (Arg3 [Zero])
                                Return (Zero)
                            }
                            Default
                            {
                                Return (0x02)
                            }

                        }
                    }
                }

                Method (VLON, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If ((HBSL & One))
                                {
                                    If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                    {
                                        PSD0 (^RP03.RSPI)
                                        HBCM (^RP03.RSPI, One)
                                    }
                                }

                                ^RP01.VPON ()
                                If ((HBSL & One))
                                {
                                    If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                    {
                                        ^RP03.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80E1FFFF)
                            {
                                ^RP02.VPON ()
                            }
                            Case (0x80E2FFFF)
                            {
                                If ((HBSL & One)){}
                                Else
                                {
                                    ^RP03.VPON ()
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                ^RP04.VPON ()
                            }
                            Case (0x80E4FFFF)
                            {
                                If ((HBSL & 0x02))
                                {
                                    If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                    {
                                        PSD0 (^RP07.RSPI)
                                        HBCM (^RP07.RSPI, One)
                                    }
                                }

                                ^RP05.VPON ()
                                If ((HBSL & 0x02))
                                {
                                    If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                    {
                                        ^RP07.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80E5FFFF)
                            {
                                ^RP06.VPON ()
                            }
                            Case (0x80E6FFFF)
                            {
                                If ((HBSL & 0x02)){}
                                Else
                                {
                                    ^RP07.VPON ()
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                ^RP08.VPON ()
                            }
                            Case (0x80E8FFFF)
                            {
                                If ((HBSL & 0x04))
                                {
                                    If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                    {
                                        PSD0 (^RP11.RSPI)
                                        HBCM (^RP11.RSPI, One)
                                    }
                                }

                                ^RP09.VPON ()
                                If ((HBSL & 0x04))
                                {
                                    If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                    {
                                        ^RP11.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80E9FFFF)
                            {
                                ^RP10.VPON ()
                            }
                            Case (0x80EAFFFF)
                            {
                                If ((HBSL & 0x04)){}
                                Else
                                {
                                    ^RP11.VPON ()
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                ^RP12.VPON ()
                            }
                            Case (0x80ECFFFF)
                            {
                                If ((HBSL & 0x08))
                                {
                                    If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                    {
                                        PSD0 (^RP15.RSPI)
                                        HBCM (^RP15.RSPI, One)
                                    }
                                }

                                ^RP13.VPON ()
                                If ((HBSL & 0x08))
                                {
                                    If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                    {
                                        ^RP15.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80EDFFFF)
                            {
                                ^RP14.VPON ()
                            }
                            Case (0x80EEFFFF)
                            {
                                If ((HBSL & 0x08)){}
                                Else
                                {
                                    ^RP15.VPON ()
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                ^RP16.VPON ()
                            }
                            Case (0x80D8FFFF)
                            {
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        PSD0 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, One)
                                    }
                                }

                                ^RP17.VPON ()
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPON ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If ((HBSL & 0x10)){}
                                Else
                                {
                                    ^RP19.VPON ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPON ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        PSD0 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, One)
                                    }
                                }

                                ^RP21.VPON ()
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPON ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If ((HBSL & 0x20)){}
                                Else
                                {
                                    ^RP23.VPON ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPON ()
                            }
                            Case (0x8030FFFF)
                            {
                                ^PEG0.VPON ()
                            }
                            Case (0x8008FFFF)
                            {
                                ^PEG1.VPON ()
                            }
                            Case (0x8009FFFF)
                            {
                                ^PEG2.VPON ()
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPON ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSON ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSON ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSON ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSON ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSON ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSON ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSON ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSON ()
                            }

                        }

                        Local0++
                    }
                }

                Method (VLOF, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If ((HBSL & One))
                                {
                                    If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                    {
                                        ^RP03.RL23 ()
                                        PSD3 (^RP03.RSPI)
                                        HBCM (^RP03.RSPI, Zero)
                                    }
                                }

                                ^RP01.VPOF ()
                            }
                            Case (0x80E1FFFF)
                            {
                                ^RP02.VPOF ()
                            }
                            Case (0x80E2FFFF)
                            {
                                If ((HBSL & One)){}
                                Else
                                {
                                    ^RP03.VPOF ()
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                ^RP04.VPOF ()
                            }
                            Case (0x80E4FFFF)
                            {
                                If ((HBSL & 0x02))
                                {
                                    If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                    {
                                        ^RP07.RL23 ()
                                        PSD3 (^RP07.RSPI)
                                        HBCM (^RP07.RSPI, Zero)
                                    }
                                }

                                ^RP05.VPOF ()
                            }
                            Case (0x80E5FFFF)
                            {
                                ^RP06.VPOF ()
                            }
                            Case (0x80E6FFFF)
                            {
                                If ((HBSL & 0x02)){}
                                Else
                                {
                                    ^RP07.VPOF ()
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                ^RP08.VPOF ()
                            }
                            Case (0x80E8FFFF)
                            {
                                If ((HBSL & 0x04))
                                {
                                    If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                    {
                                        ^RP11.RL23 ()
                                        PSD3 (^RP11.RSPI)
                                        HBCM (^RP11.RSPI, Zero)
                                    }
                                }

                                ^RP09.VPOF ()
                            }
                            Case (0x80E9FFFF)
                            {
                                ^RP10.VPOF ()
                            }
                            Case (0x80EAFFFF)
                            {
                                If ((HBSL & 0x04)){}
                                Else
                                {
                                    ^RP11.VPOF ()
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                ^RP12.VPOF ()
                            }
                            Case (0x80ECFFFF)
                            {
                                If ((HBSL & 0x08))
                                {
                                    If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                    {
                                        ^RP15.RL23 ()
                                        PSD3 (^RP15.RSPI)
                                        HBCM (^RP15.RSPI, Zero)
                                    }
                                }

                                ^RP13.VPOF ()
                            }
                            Case (0x80EDFFFF)
                            {
                                ^RP14.VPOF ()
                            }
                            Case (0x80EEFFFF)
                            {
                                If ((HBSL & 0x08)){}
                                Else
                                {
                                    ^RP15.VPOF ()
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                ^RP16.VPOF ()
                            }
                            Case (0x80D8FFFF)
                            {
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RL23 ()
                                        PSD3 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, Zero)
                                    }
                                }

                                ^RP17.VPOF ()
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPOF ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If ((HBSL & 0x10)){}
                                Else
                                {
                                    ^RP19.VPOF ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPOF ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RL23 ()
                                        PSD3 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, Zero)
                                    }
                                }

                                ^RP21.VPOF ()
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPOF ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If ((HBSL & 0x20)){}
                                Else
                                {
                                    ^RP23.VPOF ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPOF ()
                            }
                            Case (0x8030FFFF)
                            {
                                ^PEG0.VPOF ()
                            }
                            Case (0x8008FFFF)
                            {
                                ^PEG1.VPOF ()
                            }
                            Case (0x8009FFFF)
                            {
                                ^PEG2.VPOF ()
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPOF ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSOF ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSOF ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSOF ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSOF ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSOF ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSOF ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSOF ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSOF ()
                            }

                        }

                        Local0++
                    }
                }

                Method (IVRM, 1, NotSerialized)
                {
                    Local0 = Zero
                    While ((VV0S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV0D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV1S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV1D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV2S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV2D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV3S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV3D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Return (Zero)
                }

                Method (VD3C, 1, NotSerialized)
                {
                    Return ((VD3A && IVRM (Arg0)))
                }

                Device (VOL0)
                {
                    Name (_ADR, 0x0080FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V0PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V0PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V0PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV0S, VV0D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV0S, VV0D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Device (VOL1)
                {
                    Name (_ADR, 0x0081FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V1PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V1PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V1PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV1S, VV1D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV1S, VV1D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Device (VOL2)
                {
                    Name (_ADR, 0x0082FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V2PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V2PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V2PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV2S, VV2D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV2S, VV2D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Device (VOL3)
                {
                    Name (_ADR, 0x0083FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V3PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V3PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V3PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV3S, VV3D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV3S, VV3D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Method (D3CV, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }

                    }

                    Return (Zero)
                }

                Method (VDON, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPON))
                                    {
                                        ^^SAT0.PRT0.SPON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPON))
                                    {
                                        ^^SAT0.PRT1.SPON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPON))
                                    {
                                        ^^SAT0.PRT2.SPON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPON))
                                    {
                                        ^^SAT0.PRT3.SPON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPON))
                                    {
                                        ^^SAT0.PRT4.SPON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPON))
                                    {
                                        ^^SAT0.PRT5.SPON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPON))
                                    {
                                        ^^SAT0.PRT6.SPON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPON))
                                    {
                                        ^^SAT0.PRT7.SPON ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.PON))
                                    {
                                        ^^RP01.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.PON))
                                    {
                                        ^^RP02.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.PON))
                                    {
                                        ^^RP03.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.PON))
                                    {
                                        ^^RP04.PON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.PON))
                                    {
                                        ^^RP05.PON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.PON))
                                    {
                                        ^^RP06.PON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.PON))
                                    {
                                        ^^RP07.PON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.PON))
                                    {
                                        ^^RP08.PON ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.PON))
                                    {
                                        ^^RP09.PON ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.PON))
                                    {
                                        ^^RP10.PON ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.PON))
                                    {
                                        ^^RP11.PON ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.PON))
                                    {
                                        ^^RP12.PON ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.PON))
                                    {
                                        ^^RP13.PON ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.PON))
                                    {
                                        ^^RP14.PON ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.PON))
                                    {
                                        ^^RP15.PON ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.PON))
                                    {
                                        ^^RP16.PON ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.PON))
                                    {
                                        ^^RP17.PON ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.PON))
                                    {
                                        ^^RP18.PON ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.PON))
                                    {
                                        ^^RP19.PON ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.PON))
                                    {
                                        ^^RP20.PON ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.PON))
                                    {
                                        ^^RP21.PON ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.PON))
                                    {
                                        ^^RP22.PON ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.PON))
                                    {
                                        ^^RP23.PON ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.PON))
                                    {
                                        ^^RP24.PON ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.PON))
                                    {
                                        ^^PEG0.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.PON))
                                    {
                                        ^^PEG1.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.PON))
                                    {
                                        ^^PEG2.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.PON))
                                    {
                                        ^^PEG3.PON ()
                                    }
                                }

                            }
                        }

                    }
                }

                Method (VDOF, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        ^^SAT0.PRT0.SPOF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        ^^SAT0.PRT1.SPOF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        ^^SAT0.PRT2.SPOF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        ^^SAT0.PRT3.SPOF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        ^^SAT0.PRT4.SPOF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        ^^SAT0.PRT5.SPOF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        ^^SAT0.PRT6.SPOF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        ^^SAT0.PRT7.SPOF ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        ^^RP01.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        ^^RP02.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        ^^RP03.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        ^^RP04.POFF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        ^^RP05.POFF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        ^^RP06.POFF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        ^^RP07.POFF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        ^^RP08.POFF ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        ^^RP09.POFF ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        ^^RP10.POFF ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        ^^RP11.POFF ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        ^^RP12.POFF ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        ^^RP13.POFF ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        ^^RP14.POFF ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        ^^RP15.POFF ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        ^^RP16.POFF ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        ^^RP17.POFF ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        ^^RP18.POFF ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        ^^RP19.POFF ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        ^^RP20.POFF ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        ^^RP21.POFF ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        ^^RP22.POFF ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        ^^RP23.POFF ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        ^^RP24.POFF ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        ^^PEG0.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        ^^PEG1.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        ^^PEG2.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        ^^PEG3.POFF ()
                                    }
                                }

                            }
                        }

                    }
                }
            }
        }
    }

    Scope (_SB.PC00.RP09)
    {
        Name (_S0W, Zero)  // _S0W: S0 Device Wake State
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        Name (_S0W, Zero)  // _S0W: S0 Device Wake State
        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        Zero
                    }
                }
            })
        }
    }

    Scope (_SB.PC00.SAT0)
    {
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "StorageD3Enable", 
                    Zero
                }
            }
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (Zero)
        }
    }

    If (((PSWP != Zero) && (RPNB == 0x05)))
    {
        Scope (_SB.PC00.RP05)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
        }
    }

    If ((((PSW2 != Zero) && (RPN2 == 0x08)) || (
        (WLWK != Zero) && (WLRP == 0x08))))
    {
        Scope (_SB.PC00.RP08)
        {
            Method (PPRW, 0, NotSerialized)
            {
                If (((PSW2 != Zero) && (RPN2 == 0x08)))
                {
                    Return (GPRW (GGPE (PSW2), 0x04))
                }

                If (((WLWK != Zero) && (WLRP == 0x08)))
                {
                    Return (GPRW (GGPE (WLWK), 0x04))
                }
            }
        }
    }

    If (((WLWK != Zero) && (WLRP == 0x03)))
    {
        Scope (_SB.PC00.RP03)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
        }
    }

    If (((WWKP != Zero) && (WWRP == 0x04)))
    {
        Scope (_SB.PC00.RP04)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
        }
    }

    If (((WWKP != Zero) && (WWRP == 0x09)))
    {
        Scope (_SB.PC00.RP09)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
        }
    }

    If (((PSW2 != Zero) && (RPN2 == One)))
    {
        Scope (_SB.PC00.RP01)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (PSW2), 0x04))
            }
        }
    }

    If (((PSWP != Zero) && (RPNB == 0x15)))
    {
        Scope (_SB.PC00.RP21)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0){}
    }

    Method (WAK, 1, NotSerialized)
    {
        If (Arg0){}
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : E2
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]                FACS Address : 23AA4000
[028h 0040 004h]                DSDT Address : 23B88000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : F0
[035h 0053 001h]          ACPI Disable Value : F1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000000
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000000
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000000
[04Ch 0076 004h]      PM Timer Block Address : 00001808
[050h 0080 004h]          GPE0 Block Address : 00001860
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 20
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 10
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 002384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 01
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 0000000023B88000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000001800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000001804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000001850

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000001808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 00
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000001860

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 01 [SystemIO]
[0F5h 0245 001h]                   Bit Width : 08
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 03 [DWord Access:32]
[0F8h 0248 008h]                     Address : 0000000000001804

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 01 [SystemIO]
[101h 0257 001h]                   Bit Width : 08
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 03 [DWord Access:32]
[104h 0260 008h]                     Address : 0000000000001800

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 E2 48 50 51 4F 45 4D  // FACP......HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 00 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 00 40 AA 23 00 80 B8 23 00 02 09 00  // .....@.#...#....
    0030: B2 00 00 00 F0 F1 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 08 18 00 00  // ................
    0050: 60 18 00 00 00 00 00 00 04 02 01 04 20 00 10 00  // `........... ...
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 84 23 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ..#.............
    0080: 06 00 00 01 00 00 00 00 00 00 00 00 00 80 B8 23  // ...............#
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 60 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  // `...............
    00F0: 00 00 00 00 01 08 00 03 04 18 00 00 00 00 00 00  // ................
    0100: 01 08 00 03 00 18 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 68100D4A
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 4A 0D 10 68 00 00 00 00  // FACS@...J..h....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 10
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "TGL-ULT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000239B4000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 0000000023A03000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 10 48 50 51 4F 45 4D  // FPDTD.....HPQOEM
    0010: 54 47 4C 2D 55 4C 54 00 02 00 00 00 20 20 20 20  // TGL-ULT.....    
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 40 9B 23  // .............@.#
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 30 A0 23  // .............0.#
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 43
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "87ED    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 43 48 50 51 4F 45 4D  // HPET8....CHPQOEM
    0010: 38 37 45 44 20 20 20 20 01 00 00 00 48 50 20 20  // 87ED    ....HP  
    0020: 01 00 00 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000 004h]                   Signature : "LPIT"    [Low Power Idle Table]
[004h 0004 004h]                Table Length : 0000005C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E4
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "TGL-ULT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 004h]               Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040 004h]                      Length : 00000038
[02Ch 0044 002h]                   Unique ID : 0000
[02Eh 0046 002h]                    Reserved : 0000
[030h 0048 004h]       Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052 00Ch]               Entry Trigger : [Generic Address Structure]
[034h 0052 001h]                    Space ID : 7F [FunctionalFixedHW]
[035h 0053 001h]                   Bit Width : 01
[036h 0054 001h]                  Bit Offset : 02
[037h 0055 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056 008h]                     Address : 0000000000000060

[040h 0064 004h]                   Residency : 00007530
[044h 0068 004h]                     Latency : 00000BB8
[048h 0072 00Ch]           Residency Counter : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 00 [SystemMemory]
[049h 0073 001h]                   Bit Width : 20
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076 008h]                     Address : 00000000FE00193C

[054h 0084 008h]           Counter Frequency : 0000000000002005


Raw Table Data: Length 92 (0x5C)

    0000: 4C 50 49 54 5C 00 00 00 01 E4 48 50 51 4F 45 4D  // LPIT\.....HPQOEM
    0010: 54 47 4C 2D 55 4C 54 00 02 00 00 00 20 20 20 20  // TGL-ULT.....    
    0020: 13 00 00 01 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 00 20 00 03 3C 19 00 FE  // 0u....... ..<...
    0050: 00 00 00 00 05 20 00 00 00 00 00 00              // ..... ......


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 52
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "TGL-ULT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000C0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 2B
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 52 48 50 51 4F 45 4D  // MCFG<....RHPQOEM
    0010: 54 47 4C 2D 55 4C 54 00 02 00 00 00 20 20 20 20  // TGL-ULT.....    
    0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 C0  // ................
    0030: 00 00 00 00 00 00 00 2B 00 00 00 00              // .......+....


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 37
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 031h] Software Licensing Structure : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 034h 0052  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 044h 0068  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 37 48 50 51 4F 45 4D  // MSDMU....7HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 00 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 56 54 42 54 4E 2D 32 36  // ........VTBTN-26
    0040: 58 4D 52 2D 39 51 34 32 51 2D 4A 33 36 43 59 2D  // XMR-9Q42Q-J36CY-
    0050: 34 33 4B 38 36                                   // 43K86


NHLT
----
[000h 0000 004h]                   Signature : "NHLT"    [Non HD Audio Link Table]
[004h 0004 004h]                Table Length : 00001B27
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : 07
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "TGL-ULT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013


Raw Table Data: Length 6951 (0x1B27)

    0000: 4E 48 4C 54 27 1B 00 00 00 07 48 50 51 4F 45 4D  // NHLT'.....HPQOEM
    0010: 54 47 4C 2D 55 4C 54 00 02 00 00 00 20 20 20 20  // TGL-ULT.....    
    0020: 13 00 00 01 03 9B 01 00 00 03 00 86 80 30 AE 01  // .............0..
    0030: 00 01 00 00 00 00 00 02 02 00 00 00 00 00 03 FE  // ................
    0040: FF 01 00 40 1F 00 00 80 3E 00 00 02 00 10 00 16  // ...@....>.......
    0050: 00 10 00 04 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    0060: 00 00 AA 00 38 9B 71 54 00 00 00 00 00 00 00 F0  // ....8.qT........
    0070: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3F  // ...............?
    0090: 00 C0 80 00 00 40 D3 00 00 00 00 05 00 00 02 01  // .....@..........
    00A0: 00 00 00 01 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    00B0: 00 02 07 00 00 00 00 01 00 00 00 00 00 00 00 FE  // ................
    00C0: FF 01 00 80 3E 00 00 00 7D 00 00 02 00 10 00 16  // ....>...}.......
    00D0: 00 10 00 04 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    00E0: 00 00 AA 00 38 9B 71 54 00 00 00 00 00 00 00 F0  // ....8.qT........
    00F0: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3F  // ...............?
    0110: 00 C0 80 00 00 40 D3 00 00 00 00 05 00 00 02 01  // .....@..........
    0120: 00 00 00 01 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    0130: 00 02 07 00 00 00 00 01 00 00 00 00 00 00 00 FE  // ................
    0140: FF 02 00 80 BB 00 00 00 65 04 00 06 00 20 00 16  // ........e.... ..
    0150: 00 18 00 03 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    0160: 00 00 AA 00 38 9B 71 54 00 00 00 00 00 00 00 F0  // ....8.qT........
    0170: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3F  // ...............?
    0190: 00 C0 80 00 00 40 D3 00 00 00 00 05 00 00 02 01  // .....@..........
    01A0: 00 00 00 01 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    01B0: 00 02 07 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    01C0: 1B 01 00 00 03 00 86 80 30 AE 01 00 01 00 00 00  // ........0.......
    01D0: 00 01 02 02 00 00 00 00 00 02 FE FF 01 00 40 1F  // ..............@.
    01E0: 00 00 80 3E 00 00 02 00 10 00 16 00 10 00 04 00  // ...>............
    01F0: 00 00 01 00 00 00 00 00 10 00 80 00 00 AA 00 38  // ...............8
    0200: 9B 71 54 00 00 00 00 00 00 00 F0 FF FF FF 00 00  // .qT.............
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 3F 00 C0 80 00 00  // ..........?.....
    0230: 40 D3 00 00 00 00 05 00 00 02 01 00 00 00 01 00  // @...............
    0240: 00 00 02 40 00 00 00 00 00 00 00 00 02 07 00 00  // ...@............
    0250: 00 00 01 00 00 00 00 00 00 00 FE FF 01 00 80 3E  // ...............>
    0260: 00 00 00 7D 00 00 02 00 10 00 16 00 10 00 04 00  // ...}............
    0270: 00 00 01 00 00 00 00 00 10 00 80 00 00 AA 00 38  // ...............8
    0280: 9B 71 54 00 00 00 00 00 00 00 F0 FF FF FF 00 00  // .qT.............
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 3F 00 C0 80 00 00  // ..........?.....
    02B0: 40 D3 00 00 00 00 05 00 00 02 01 00 00 00 01 00  // @...............
    02C0: 00 00 02 40 00 00 00 00 00 00 00 00 02 07 00 00  // ...@............
    02D0: 00 00 01 00 00 00 00 00 00 00 00 44 18 00 00 02  // ...........D....
    02E0: 00 86 80 20 AE 01 00 01 00 00 00 00 01 00 03 00  // ... ............
    02F0: 00 00 00 01 0A 02 FE FF 02 00 80 BB 00 00 00 EE  // ................
    0300: 02 00 04 00 10 00 16 00 10 00 03 00 00 00 01 00  // ................
    0310: 00 00 00 00 10 00 80 00 00 AA 00 38 9B 71 E8 0B  // ...........8.q..
    0320: 00 00 01 00 00 00 10 FF FF FF 10 FF FF FF FF FF  // ................
    0330: FF FF FF FF FF FF 03 00 00 00 03 00 00 00 03 00  // ................
    0340: 30 00 03 00 30 00 03 00 00 00 01 C0 00 00 03 18  // 0...0...........
    0350: 00 0B 00 00 00 00 03 0E 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 91 00 00 00 76 00  // ..............v.
    0370: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 91 00 00 00 E8 01  // ................
    0390: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 00 00 00 49 00 00 40 81 01  // ..........I..@..
    03B0: 40 40 6D 03 80 40 53 04 C0 40 78 02 00 41 19 FF  // @@m..@S..@x..A..
    03C0: 4F 41 ED FD 8F 41 37 00 C0 41 45 02 00 42 8C 00  // OA...A7..AE..B..
    03D0: 40 42 9B FD 8F 42 9D FE CF 42 6C 02 00 43 67 02  // @B...B...Bl..Cg.
    03E0: 40 43 B1 FD 8F 43 25 FC CF 43 6F 01 00 44 21 05  // @C...C%..Co..D!.
    03F0: 40 44 F3 FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF 06  // @D...D...D...E..
    0400: 40 45 8E 04 80 45 73 F9 CF 45 96 F8 0F 46 72 05  // @E...Es..E...Fr.
    0410: 40 46 69 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4 FF  // @Fi..F...F...G..
    0420: 4F 47 25 0F 80 47 FC 04 C0 47 13 F0 0F 48 93 F5  // OG%..G...G...H..
    0430: 4F 48 33 0F 80 48 68 10 C0 48 75 F3 0F 49 99 E9  // OH3..Hh..Hu..I..
    0440: 4F 49 A2 07 80 49 90 1B C0 49 65 FF 0F 4A C2 E0  // OI...I...Ie..J..
    0450: 4F 4A 99 F7 8F 4A 92 20 C0 4A C4 12 00 4B 03 E1  // OJ...J. .J...K..
    0460: 4F 4B 2C E2 8F 4B F2 19 C0 4B A3 28 00 4C F5 EE  // OK,..K...K.(.L..
    0470: 4F 4C 29 CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C 0B  // OL)..L...L@8.M,.
    0480: 40 4D 5E C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8 2F  // @M^..M...M.7.N./
    0490: 40 4E 92 D0 8F 4E E1 BD CF 4E DD 20 00 4F 18 52  // @N...N...N. .O.R
    04A0: 40 4F 4F F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08 60  // @OO..O...OM..P.`
    04B0: 40 50 78 2D 80 50 80 A5 CF 50 54 B3 0F 51 82 4A  // @Px-.P...PT..Q.J
    04C0: 40 51 A2 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C 0B  // @Q.i.Q...Q.~.R\.
    04D0: 40 52 CF 8E 80 52 52 21 C0 52 DC 70 0F 53 96 AD  // @R...RR!.R.p.S..
    04E0: 4F 53 06 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D 53  // OS...S...S...T.S
    04F0: 4F 54 C1 28 80 54 14 C8 C0 54 21 1B 00 55 23 32  // OT.(.T...T!..U#2
    0500: 4F 55 41 97 8F 55 F2 B6 C0 55 87 B6 00 56 02 81  // OUA..U...U...V..
    0510: 4F 56 43 08 8F 56 34 25 C0 56 19 1C 01 57 7E 50  // OVC..V4%.V...W~P
    0520: 40 57 24 EE 8E 57 FD 2C CF 57 1C C9 00 58 71 47  // @W$..W.,.W...XqG
    0530: 41 58 01 C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE 5E  // AX...X.y.Xkn.Y.^
    0540: 41 59 00 70 81 59 76 5B CF 59 77 F7 0D 5A AC 51  // AY.p.Yv[.Yw..Z.Q
    0550: 4F 5A 09 CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8 3D  // OZ...ZS6.Z7..[.=
    0560: 4D 5B B8 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2 E2  // M[.e.[.P.[7..\..
    0570: 44 5C A5 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E 3F  // D\...\.Y.\H..].?
    0580: 40 5D 39 08 80 5D 1B 00 00 80 18 00 40 80 0A 00  // @]9..]......@...
    0590: 80 80 D7 FF CF 80 67 FF 0F 81 A2 FE 4F 81 76 FD  // ......g.....O.v.
    05A0: 8F 81 DD FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67 F5  // ............O.g.
    05B0: 8F 82 6C F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A F2  // ..l.........O.J.
    05C0: 8F 83 3B F4 CF 83 51 F7 0F 84 3F FB 4F 84 88 FF  // ..;...Q...?.O...
    05D0: 8F 84 92 03 C0 84 C0 06 00 85 8B 08 40 85 A2 08  // ............@...
    05E0: 80 85 FD 06 C0 85 E9 03 00 86 FC FF 4F 86 FF FB  // ............O...
    05F0: 8F 86 C8 F8 CF 86 0F F7 0F 87 45 F7 4F 87 75 F9  // ..........E.O.u.
    0600: 8F 87 3D FD CF 87 DA 01 00 88 4C 06 40 88 8F 09  // ..=.......L.@...
    0610: 80 88 D0 0A C0 88 A4 09 00 89 27 06 40 89 FF 00  // ..........'.@...
    0620: 80 89 43 FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD F2  // ..C...<...&.O...
    0630: 8F 8A A5 F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E 09  // ............@...
    0640: 80 8B 72 0E C0 8B D3 10 00 8C 69 0F 40 8C 42 0A  // ..r.......i.@.B.
    0650: 80 8C 4F 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1 EB  // ..O...>... .O...
    0660: 8F 8D 25 EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96 02  // ..%...=.....O...
    0670: 80 8E BD 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F 18  // ......m...g.@._.
    0680: 80 8F 61 10 C0 8F E4 03 00 90 8F F5 4F 90 AB E8  // ..a.........O...
    0690: 8F 90 66 E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3 F2  // ..f.........O...
    06A0: 8F 91 27 04 C0 91 D6 15 00 92 99 23 40 92 D9 29  // ..'........#@..)
    06B0: 80 92 84 26 C0 92 AA 19 00 93 A6 05 40 93 B6 EE  // ...&........@...
    06C0: 8F 93 21 DA CF 93 09 CD 0F 94 2C CB 4F 94 E8 D5  // ..!.......,.O...
    06D0: 8F 94 B1 EB CF 94 38 08 00 95 31 25 40 95 AF 3B  // ......8...1%@..;
    06E0: 80 95 B6 45 C0 95 C0 3F 00 96 C6 29 40 96 99 07  // ...E...?...)@...
    06F0: 80 96 4C E0 CF 96 DB BC 0F 97 3A A6 4F 97 39 A3  // ..L.......:.O.9.
    0700: 8F 97 AF B6 CF 97 6D DE 0F 98 33 13 40 98 D5 49  // ......m...3.@..I
    0710: 80 98 5A 75 C0 98 C4 89 00 99 ED 7E 40 99 D5 52  // ..Zu.......~@..R
    0720: 80 99 E7 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67 23  // ..........._O.g#
    0730: 8F 9A 59 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87 46  // ..Y....:....O..F
    0740: 80 9B 8B 16 C1 9B BC FB 01 9C 6F D9 42 9C 33 92  // ..........o.B.3.
    0750: 83 9C 98 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33 92  // ......k7....D.3.
    0760: 83 9D 6F D9 C2 9D BC FB 01 9E 8B 16 41 9E 87 46  // ..o.........A..F
    0770: 80 9E 13 A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67 23  // .......:..Y.O.g#
    0780: 8F 9F B8 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5 52  // ..._........@..R
    0790: 80 A0 ED 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5 49  // ...~......Zu@..I
    07A0: 80 A1 33 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39 A3  // ..3...m.....O.9.
    07B0: 8F A2 3A A6 CF A2 DB BC 0F A3 4C E0 4F A3 99 07  // ..:.......L.O...
    07C0: 80 A3 C6 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF 3B  // ...)...?...E@..;
    07D0: 80 A4 31 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8 D5  // ..1%..8.....O...
    07E0: 8F A5 2C CB CF A5 09 CD 0F A6 21 DA 4F A6 B6 EE  // ..,.......!.O...
    07F0: 8F A6 A6 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9 29  // ...........&@..)
    0800: 80 A7 99 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3 F2  // ...#......'.@...
    0810: 8F A8 83 E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB E8  // ..........f.O...
    0820: 8F A9 8F F5 CF A9 E4 03 00 AA 61 10 40 AA 5F 18  // ..........a.@._.
    0830: 80 AA 67 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96 02  // ..g...m.....@...
    0840: 80 AB 9D F7 CF AB 3D EF 0F AC 25 EB 4F AC F1 EB  // ......=...%.O...
    0850: 8F AC 20 F1 CF AC 3E F9 0F AD 4F 02 40 AD 42 0A  // .. ...>...O.@.B.
    0860: 80 AD 69 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E 09  // ..i.......r.@...
    0870: 80 AE 0C 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD F2  // ............O...
    0880: 8F AF 26 F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF 00  // ..&...<...C.O...
    0890: 80 B0 27 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F 09  // ..'.........@...
    08A0: 80 B1 4C 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75 F9  // ..L.......=.O.u.
    08B0: 8F B2 45 F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF FB  // ..E.........O...
    08C0: 8F B3 FC FF CF B3 E9 03 00 B4 FD 06 40 B4 A2 08  // ............@...
    08D0: 80 B4 8B 08 C0 B4 C0 06 00 B5 92 03 40 B5 88 FF  // ............@...
    08E0: 8F B5 3F FB CF B5 51 F7 0F B6 3B F4 4F B6 4A F2  // ..?...Q...;.O.J.
    08F0: 8F B6 97 F1 CF B6 0B F2 0F B7 6C F3 4F B7 67 F5  // ..........l.O.g.
    0900: 8F B7 A8 F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76 FD  // ............O.v.
    0910: 8F B8 A2 FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A 00  // ......g.....O...
    0920: 80 B9 18 00 C0 B9 1B 00 00 BA 01 C0 00 00 03 18  // ................
    0930: 00 0B 00 00 00 00 03 0E 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 00 00 00 00 00 00 91 00 00 00 76 00  // ..............v.
    0950: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 91 00 00 00 E8 01  // ................
    0970: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 49 00 00 40 81 01  // ..........I..@..
    0990: 40 40 6D 03 80 40 53 04 C0 40 78 02 00 41 19 FF  // @@m..@S..@x..A..
    09A0: 4F 41 ED FD 8F 41 37 00 C0 41 45 02 00 42 8C 00  // OA...A7..AE..B..
    09B0: 40 42 9B FD 8F 42 9D FE CF 42 6C 02 00 43 67 02  // @B...B...Bl..Cg.
    09C0: 40 43 B1 FD 8F 43 25 FC CF 43 6F 01 00 44 21 05  // @C...C%..Co..D!.
    09D0: 40 44 F3 FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF 06  // @D...D...D...E..
    09E0: 40 45 8E 04 80 45 73 F9 CF 45 96 F8 0F 46 72 05  // @E...Es..E...Fr.
    09F0: 40 46 69 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4 FF  // @Fi..F...F...G..
    0A00: 4F 47 25 0F 80 47 FC 04 C0 47 13 F0 0F 48 93 F5  // OG%..G...G...H..
    0A10: 4F 48 33 0F 80 48 68 10 C0 48 75 F3 0F 49 99 E9  // OH3..Hh..Hu..I..
    0A20: 4F 49 A2 07 80 49 90 1B C0 49 65 FF 0F 4A C2 E0  // OI...I...Ie..J..
    0A30: 4F 4A 99 F7 8F 4A 92 20 C0 4A C4 12 00 4B 03 E1  // OJ...J. .J...K..
    0A40: 4F 4B 2C E2 8F 4B F2 19 C0 4B A3 28 00 4C F5 EE  // OK,..K...K.(.L..
    0A50: 4F 4C 29 CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C 0B  // OL)..L...L@8.M,.
    0A60: 40 4D 5E C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8 2F  // @M^..M...M.7.N./
    0A70: 40 4E 92 D0 8F 4E E1 BD CF 4E DD 20 00 4F 18 52  // @N...N...N. .O.R
    0A80: 40 4F 4F F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08 60  // @OO..O...OM..P.`
    0A90: 40 50 78 2D 80 50 80 A5 CF 50 54 B3 0F 51 82 4A  // @Px-.P...PT..Q.J
    0AA0: 40 51 A2 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C 0B  // @Q.i.Q...Q.~.R\.
    0AB0: 40 52 CF 8E 80 52 52 21 C0 52 DC 70 0F 53 96 AD  // @R...RR!.R.p.S..
    0AC0: 4F 53 06 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D 53  // OS...S...S...T.S
    0AD0: 4F 54 C1 28 80 54 14 C8 C0 54 21 1B 00 55 23 32  // OT.(.T...T!..U#2
    0AE0: 4F 55 41 97 8F 55 F2 B6 C0 55 87 B6 00 56 02 81  // OUA..U...U...V..
    0AF0: 4F 56 43 08 8F 56 34 25 C0 56 19 1C 01 57 7E 50  // OVC..V4%.V...W~P
    0B00: 40 57 24 EE 8E 57 FD 2C CF 57 1C C9 00 58 71 47  // @W$..W.,.W...XqG
    0B10: 41 58 01 C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE 5E  // AX...X.y.Xkn.Y.^
    0B20: 41 59 00 70 81 59 76 5B CF 59 77 F7 0D 5A AC 51  // AY.p.Yv[.Yw..Z.Q
    0B30: 4F 5A 09 CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8 3D  // OZ...ZS6.Z7..[.=
    0B40: 4D 5B B8 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2 E2  // M[.e.[.P.[7..\..
    0B50: 44 5C A5 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E 3F  // D\...\.Y.\H..].?
    0B60: 40 5D 39 08 80 5D 1B 00 00 80 18 00 40 80 0A 00  // @]9..]......@...
    0B70: 80 80 D7 FF CF 80 67 FF 0F 81 A2 FE 4F 81 76 FD  // ......g.....O.v.
    0B80: 8F 81 DD FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67 F5  // ............O.g.
    0B90: 8F 82 6C F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A F2  // ..l.........O.J.
    0BA0: 8F 83 3B F4 CF 83 51 F7 0F 84 3F FB 4F 84 88 FF  // ..;...Q...?.O...
    0BB0: 8F 84 92 03 C0 84 C0 06 00 85 8B 08 40 85 A2 08  // ............@...
    0BC0: 80 85 FD 06 C0 85 E9 03 00 86 FC FF 4F 86 FF FB  // ............O...
    0BD0: 8F 86 C8 F8 CF 86 0F F7 0F 87 45 F7 4F 87 75 F9  // ..........E.O.u.
    0BE0: 8F 87 3D FD CF 87 DA 01 00 88 4C 06 40 88 8F 09  // ..=.......L.@...
    0BF0: 80 88 D0 0A C0 88 A4 09 00 89 27 06 40 89 FF 00  // ..........'.@...
    0C00: 80 89 43 FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD F2  // ..C...<...&.O...
    0C10: 8F 8A A5 F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E 09  // ............@...
    0C20: 80 8B 72 0E C0 8B D3 10 00 8C 69 0F 40 8C 42 0A  // ..r.......i.@.B.
    0C30: 80 8C 4F 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1 EB  // ..O...>... .O...
    0C40: 8F 8D 25 EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96 02  // ..%...=.....O...
    0C50: 80 8E BD 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F 18  // ......m...g.@._.
    0C60: 80 8F 61 10 C0 8F E4 03 00 90 8F F5 4F 90 AB E8  // ..a.........O...
    0C70: 8F 90 66 E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3 F2  // ..f.........O...
    0C80: 8F 91 27 04 C0 91 D6 15 00 92 99 23 40 92 D9 29  // ..'........#@..)
    0C90: 80 92 84 26 C0 92 AA 19 00 93 A6 05 40 93 B6 EE  // ...&........@...
    0CA0: 8F 93 21 DA CF 93 09 CD 0F 94 2C CB 4F 94 E8 D5  // ..!.......,.O...
    0CB0: 8F 94 B1 EB CF 94 38 08 00 95 31 25 40 95 AF 3B  // ......8...1%@..;
    0CC0: 80 95 B6 45 C0 95 C0 3F 00 96 C6 29 40 96 99 07  // ...E...?...)@...
    0CD0: 80 96 4C E0 CF 96 DB BC 0F 97 3A A6 4F 97 39 A3  // ..L.......:.O.9.
    0CE0: 8F 97 AF B6 CF 97 6D DE 0F 98 33 13 40 98 D5 49  // ......m...3.@..I
    0CF0: 80 98 5A 75 C0 98 C4 89 00 99 ED 7E 40 99 D5 52  // ..Zu.......~@..R
    0D00: 80 99 E7 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67 23  // ..........._O.g#
    0D10: 8F 9A 59 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87 46  // ..Y....:....O..F
    0D20: 80 9B 8B 16 C1 9B BC FB 01 9C 6F D9 42 9C 33 92  // ..........o.B.3.
    0D30: 83 9C 98 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33 92  // ......k7....D.3.
    0D40: 83 9D 6F D9 C2 9D BC FB 01 9E 8B 16 41 9E 87 46  // ..o.........A..F
    0D50: 80 9E 13 A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67 23  // .......:..Y.O.g#
    0D60: 8F 9F B8 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5 52  // ..._........@..R
    0D70: 80 A0 ED 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5 49  // ...~......Zu@..I
    0D80: 80 A1 33 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39 A3  // ..3...m.....O.9.
    0D90: 8F A2 3A A6 CF A2 DB BC 0F A3 4C E0 4F A3 99 07  // ..:.......L.O...
    0DA0: 80 A3 C6 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF 3B  // ...)...?...E@..;
    0DB0: 80 A4 31 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8 D5  // ..1%..8.....O...
    0DC0: 8F A5 2C CB CF A5 09 CD 0F A6 21 DA 4F A6 B6 EE  // ..,.......!.O...
    0DD0: 8F A6 A6 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9 29  // ...........&@..)
    0DE0: 80 A7 99 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3 F2  // ...#......'.@...
    0DF0: 8F A8 83 E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB E8  // ..........f.O...
    0E00: 8F A9 8F F5 CF A9 E4 03 00 AA 61 10 40 AA 5F 18  // ..........a.@._.
    0E10: 80 AA 67 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96 02  // ..g...m.....@...
    0E20: 80 AB 9D F7 CF AB 3D EF 0F AC 25 EB 4F AC F1 EB  // ......=...%.O...
    0E30: 8F AC 20 F1 CF AC 3E F9 0F AD 4F 02 40 AD 42 0A  // .. ...>...O.@.B.
    0E40: 80 AD 69 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E 09  // ..i.......r.@...
    0E50: 80 AE 0C 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD F2  // ............O...
    0E60: 8F AF 26 F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF 00  // ..&...<...C.O...
    0E70: 80 B0 27 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F 09  // ..'.........@...
    0E80: 80 B1 4C 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75 F9  // ..L.......=.O.u.
    0E90: 8F B2 45 F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF FB  // ..E.........O...
    0EA0: 8F B3 FC FF CF B3 E9 03 00 B4 FD 06 40 B4 A2 08  // ............@...
    0EB0: 80 B4 8B 08 C0 B4 C0 06 00 B5 92 03 40 B5 88 FF  // ............@...
    0EC0: 8F B5 3F FB CF B5 51 F7 0F B6 3B F4 4F B6 4A F2  // ..?...Q...;.O.J.
    0ED0: 8F B6 97 F1 CF B6 0B F2 0F B7 6C F3 4F B7 67 F5  // ..........l.O.g.
    0EE0: 8F B7 A8 F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76 FD  // ............O.v.
    0EF0: 8F B8 A2 FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A 00  // ......g.....O...
    0F00: 80 B9 18 00 C0 B9 1B 00 00 BA FE FF 02 00 80 BB  // ................
    0F10: 00 00 00 DC 05 00 08 00 20 00 16 00 20 00 03 00  // ........ ... ...
    0F20: 00 00 01 00 00 00 00 00 10 00 80 00 00 AA 00 38  // ...............8
    0F30: 9B 71 E8 0B 00 00 01 00 00 00 10 FF FF FF 10 FF  // .q..............
    0F40: FF FF FF FF FF FF FF FF FF FF 03 00 00 00 03 00  // ................
    0F50: 00 00 03 00 38 00 03 00 38 00 03 00 00 00 01 C0  // ....8...8.......
    0F60: 00 00 03 18 00 0B 00 00 00 00 03 0E 00 00 00 00  // ................
    0F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 91 00  // ................
    0F80: 00 00 76 00 01 00 00 00 00 00 00 00 00 00 00 00  // ..v.............
    0F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 91 00  // ................
    0FA0: 00 00 E8 01 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 49 00  // ..............I.
    0FC0: 00 40 81 01 40 40 6D 03 80 40 53 04 C0 40 78 02  // .@..@@m..@S..@x.
    0FD0: 00 41 19 FF 4F 41 ED FD 8F 41 37 00 C0 41 45 02  // .A..OA...A7..AE.
    0FE0: 00 42 8C 00 40 42 9B FD 8F 42 9D FE CF 42 6C 02  // .B..@B...B...Bl.
    0FF0: 00 43 67 02 40 43 B1 FD 8F 43 25 FC CF 43 6F 01  // .Cg.@C...C%..Co.
    1000: 00 44 21 05 40 44 F3 FF 8F 44 C4 F9 CF 44 F9 FD  // .D!.@D...D...D..
    1010: 0F 45 BF 06 40 45 8E 04 80 45 73 F9 CF 45 96 F8  // .E..@E...Es..E..
    1020: 0F 46 72 05 40 46 69 0A 80 46 CF FC CF 46 D1 F2  // .Fr.@Fi..F...F..
    1030: 0F 47 A4 FF 4F 47 25 0F 80 47 FC 04 C0 47 13 F0  // .G..OG%..G...G..
    1040: 0F 48 93 F5 4F 48 33 0F 80 48 68 10 C0 48 75 F3  // .H..OH3..Hh..Hu.
    1050: 0F 49 99 E9 4F 49 A2 07 80 49 90 1B C0 49 65 FF  // .I..OI...I...Ie.
    1060: 0F 4A C2 E0 4F 4A 99 F7 8F 4A 92 20 C0 4A C4 12  // .J..OJ...J. .J..
    1070: 00 4B 03 E1 4F 4B 2C E2 8F 4B F2 19 C0 4B A3 28  // .K..OK,..K...K.(
    1080: 00 4C F5 EE 4F 4C 29 CE 8F 4C 84 04 C0 4C 40 38  // .L..OL)..L...L@8
    1090: 00 4D 2C 0B 40 4D 5E C5 8F 4D E9 E2 CF 4D F5 37  // .M,.@M^..M...M.7
    10A0: 00 4E F8 2F 40 4E 92 D0 8F 4E E1 BD CF 4E DD 20  // .N./@N...N...N. 
    10B0: 00 4F 18 52 40 4F 4F F4 8F 4F B2 A2 CF 4F 4D F0  // .O.R@OO..O...OM.
    10C0: 0F 50 08 60 40 50 78 2D 80 50 80 A5 CF 50 54 B3  // .P.`@Px-.P...PT.
    10D0: 0F 51 82 4A 40 51 A2 69 80 51 00 D0 CF 51 F5 7E  // .Q.J@Q.i.Q...Q.~
    10E0: 0F 52 5C 0B 40 52 CF 8E 80 52 52 21 C0 52 DC 70  // .R\.@R...RR!.R.p
    10F0: 0F 53 96 AD 4F 53 06 7F 80 53 C7 82 C0 53 0A A3  // .S..OS...S...S..
    1100: 0F 54 8D 53 4F 54 C1 28 80 54 14 C8 C0 54 21 1B  // .T.SOT.(.T...T!.
    1110: 00 55 23 32 4F 55 41 97 8F 55 F2 B6 C0 55 87 B6  // .U#2OUA..U...U..
    1120: 00 56 02 81 4F 56 43 08 8F 56 34 25 C0 56 19 1C  // .V..OVC..V4%.V..
    1130: 01 57 7E 50 40 57 24 EE 8E 57 FD 2C CF 57 1C C9  // .W~P@W$..W.,.W..
    1140: 00 58 71 47 41 58 01 C6 8F 58 BA 79 CE 58 6B 6E  // .XqGAX...X.y.Xkn
    1150: 0F 59 BE 5E 41 59 00 70 81 59 76 5B CF 59 77 F7  // .Y.^AY.p.Yv[.Yw.
    1160: 0D 5A AC 51 4F 5A 09 CF 81 5A 53 36 C2 5A 37 CE  // .Z.QOZ...ZS6.Z7.
    1170: 0F 5B A8 3D 4D 5B B8 65 8D 5B EF 50 C0 5B 37 8E  // .[.=M[.e.[.P.[7.
    1180: 03 5C B2 E2 44 5C A5 11 84 5C A3 59 C2 5C 48 F2  // .\..D\...\.Y.\H.
    1190: 00 5D 0E 3F 40 5D 39 08 80 5D 1B 00 00 80 18 00  // .].?@]9..]......
    11A0: 40 80 0A 00 80 80 D7 FF CF 80 67 FF 0F 81 A2 FE  // @.........g.....
    11B0: 4F 81 76 FD 8F 81 DD FB CF 81 E2 F9 0F 82 A8 F7  // O.v.............
    11C0: 4F 82 67 F5 8F 82 6C F3 CF 82 0B F2 0F 83 97 F1  // O.g...l.........
    11D0: 4F 83 4A F2 8F 83 3B F4 CF 83 51 F7 0F 84 3F FB  // O.J...;...Q...?.
    11E0: 4F 84 88 FF 8F 84 92 03 C0 84 C0 06 00 85 8B 08  // O...............
    11F0: 40 85 A2 08 80 85 FD 06 C0 85 E9 03 00 86 FC FF  // @...............
    1200: 4F 86 FF FB 8F 86 C8 F8 CF 86 0F F7 0F 87 45 F7  // O.............E.
    1210: 4F 87 75 F9 8F 87 3D FD CF 87 DA 01 00 88 4C 06  // O.u...=.......L.
    1220: 40 88 8F 09 80 88 D0 0A C0 88 A4 09 00 89 27 06  // @.............'.
    1230: 40 89 FF 00 80 89 43 FB CF 89 3C F6 0F 8A 26 F3  // @.....C...<...&.
    1240: 4F 8A DD F2 8F 8A A5 F5 CF 8A 11 FB 0F 8B 0C 02  // O...............
    1250: 40 8B 0E 09 80 8B 72 0E C0 8B D3 10 00 8C 69 0F  // @.....r.......i.
    1260: 40 8C 42 0A 80 8C 4F 02 C0 8C 3E F9 0F 8D 20 F1  // @.B...O...>... .
    1270: 4F 8D F1 EB 8F 8D 25 EB CF 8D 3D EF 0F 8E 9D F7  // O.....%...=.....
    1280: 4F 8E 96 02 80 8E BD 0D C0 8E 6D 16 00 8F 67 1A  // O.........m...g.
    1290: 40 8F 5F 18 80 8F 61 10 C0 8F E4 03 00 90 8F F5  // @._...a.........
    12A0: 4F 90 AB E8 8F 90 66 E0 CF 90 12 DF 0F 91 83 E5  // O.....f.........
    12B0: 4F 91 C3 F2 8F 91 27 04 C0 91 D6 15 00 92 99 23  // O.....'........#
    12C0: 40 92 D9 29 80 92 84 26 C0 92 AA 19 00 93 A6 05  // @..)...&........
    12D0: 40 93 B6 EE 8F 93 21 DA CF 93 09 CD 0F 94 2C CB  // @.....!.......,.
    12E0: 4F 94 E8 D5 8F 94 B1 EB CF 94 38 08 00 95 31 25  // O.........8...1%
    12F0: 40 95 AF 3B 80 95 B6 45 C0 95 C0 3F 00 96 C6 29  // @..;...E...?...)
    1300: 40 96 99 07 80 96 4C E0 CF 96 DB BC 0F 97 3A A6  // @.....L.......:.
    1310: 4F 97 39 A3 8F 97 AF B6 CF 97 6D DE 0F 98 33 13  // O.9.......m...3.
    1320: 40 98 D5 49 80 98 5A 75 C0 98 C4 89 00 99 ED 7E  // @..I..Zu.......~
    1330: 40 99 D5 52 80 99 E7 0A C0 99 CC B3 0F 9A B8 5F  // @..R..........._
    1340: 4F 9A 67 23 8F 9A 59 12 CF 9A EA 3A 0F 9B 13 A3  // O.g#..Y....:....
    1350: 4F 9B 87 46 80 9B 8B 16 C1 9B BC FB 01 9C 6F D9  // O..F..........o.
    1360: 42 9C 33 92 83 9C 98 0C C4 9C 6B 37 04 9D 98 0C  // B.3.......k7....
    1370: 44 9D 33 92 83 9D 6F D9 C2 9D BC FB 01 9E 8B 16  // D.3...o.........
    1380: 41 9E 87 46 80 9E 13 A3 CF 9E EA 3A 0F 9F 59 12  // A..F.......:..Y.
    1390: 4F 9F 67 23 8F 9F B8 5F CF 9F CC B3 0F A0 E7 0A  // O.g#..._........
    13A0: 40 A0 D5 52 80 A0 ED 7E C0 A0 C4 89 00 A1 5A 75  // @..R...~......Zu
    13B0: 40 A1 D5 49 80 A1 33 13 C0 A1 6D DE 0F A2 AF B6  // @..I..3...m.....
    13C0: 4F A2 39 A3 8F A2 3A A6 CF A2 DB BC 0F A3 4C E0  // O.9...:.......L.
    13D0: 4F A3 99 07 80 A3 C6 29 C0 A3 C0 3F 00 A4 B6 45  // O......)...?...E
    13E0: 40 A4 AF 3B 80 A4 31 25 C0 A4 38 08 00 A5 B1 EB  // @..;..1%..8.....
    13F0: 4F A5 E8 D5 8F A5 2C CB CF A5 09 CD 0F A6 21 DA  // O.....,.......!.
    1400: 4F A6 B6 EE 8F A6 A6 05 C0 A6 AA 19 00 A7 84 26  // O..............&
    1410: 40 A7 D9 29 80 A7 99 23 C0 A7 D6 15 00 A8 27 04  // @..)...#......'.
    1420: 40 A8 C3 F2 8F A8 83 E5 CF A8 12 DF 0F A9 66 E0  // @.............f.
    1430: 4F A9 AB E8 8F A9 8F F5 CF A9 E4 03 00 AA 61 10  // O.............a.
    1440: 40 AA 5F 18 80 AA 67 1A C0 AA 6D 16 00 AB BD 0D  // @._...g...m.....
    1450: 40 AB 96 02 80 AB 9D F7 CF AB 3D EF 0F AC 25 EB  // @.........=...%.
    1460: 4F AC F1 EB 8F AC 20 F1 CF AC 3E F9 0F AD 4F 02  // O..... ...>...O.
    1470: 40 AD 42 0A 80 AD 69 0F C0 AD D3 10 00 AE 72 0E  // @.B...i.......r.
    1480: 40 AE 0E 09 80 AE 0C 02 C0 AE 11 FB 0F AF A5 F5  // @...............
    1490: 4F AF DD F2 8F AF 26 F3 CF AF 3C F6 0F B0 43 FB  // O.....&...<...C.
    14A0: 4F B0 FF 00 80 B0 27 06 C0 B0 A4 09 00 B1 D0 0A  // O.....'.........
    14B0: 40 B1 8F 09 80 B1 4C 06 C0 B1 DA 01 00 B2 3D FD  // @.....L.......=.
    14C0: 4F B2 75 F9 8F B2 45 F7 CF B2 0F F7 0F B3 C8 F8  // O.u...E.........
    14D0: 4F B3 FF FB 8F B3 FC FF CF B3 E9 03 00 B4 FD 06  // O...............
    14E0: 40 B4 A2 08 80 B4 8B 08 C0 B4 C0 06 00 B5 92 03  // @...............
    14F0: 40 B5 88 FF 8F B5 3F FB CF B5 51 F7 0F B6 3B F4  // @.....?...Q...;.
    1500: 4F B6 4A F2 8F B6 97 F1 CF B6 0B F2 0F B7 6C F3  // O.J...........l.
    1510: 4F B7 67 F5 8F B7 A8 F7 CF B7 E2 F9 0F B8 DD FB  // O.g.............
    1520: 4F B8 76 FD 8F B8 A2 FE CF B8 67 FF 0F B9 D7 FF  // O.v.......g.....
    1530: 4F B9 0A 00 80 B9 18 00 C0 B9 1B 00 00 BA 01 C0  // O...............
    1540: 00 00 03 18 00 0B 00 00 00 00 03 0E 00 00 00 00  // ................
    1550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 91 00  // ................
    1560: 00 00 76 00 01 00 00 00 00 00 00 00 00 00 00 00  // ..v.............
    1570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 91 00  // ................
    1580: 00 00 E8 01 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 49 00  // ..............I.
    15A0: 00 40 81 01 40 40 6D 03 80 40 53 04 C0 40 78 02  // .@..@@m..@S..@x.
    15B0: 00 41 19 FF 4F 41 ED FD 8F 41 37 00 C0 41 45 02  // .A..OA...A7..AE.
    15C0: 00 42 8C 00 40 42 9B FD 8F 42 9D FE CF 42 6C 02  // .B..@B...B...Bl.
    15D0: 00 43 67 02 40 43 B1 FD 8F 43 25 FC CF 43 6F 01  // .Cg.@C...C%..Co.
    15E0: 00 44 21 05 40 44 F3 FF 8F 44 C4 F9 CF 44 F9 FD  // .D!.@D...D...D..
    15F0: 0F 45 BF 06 40 45 8E 04 80 45 73 F9 CF 45 96 F8  // .E..@E...Es..E..
    1600: 0F 46 72 05 40 46 69 0A 80 46 CF FC CF 46 D1 F2  // .Fr.@Fi..F...F..
    1610: 0F 47 A4 FF 4F 47 25 0F 80 47 FC 04 C0 47 13 F0  // .G..OG%..G...G..
    1620: 0F 48 93 F5 4F 48 33 0F 80 48 68 10 C0 48 75 F3  // .H..OH3..Hh..Hu.
    1630: 0F 49 99 E9 4F 49 A2 07 80 49 90 1B C0 49 65 FF  // .I..OI...I...Ie.
    1640: 0F 4A C2 E0 4F 4A 99 F7 8F 4A 92 20 C0 4A C4 12  // .J..OJ...J. .J..
    1650: 00 4B 03 E1 4F 4B 2C E2 8F 4B F2 19 C0 4B A3 28  // .K..OK,..K...K.(
    1660: 00 4C F5 EE 4F 4C 29 CE 8F 4C 84 04 C0 4C 40 38  // .L..OL)..L...L@8
    1670: 00 4D 2C 0B 40 4D 5E C5 8F 4D E9 E2 CF 4D F5 37  // .M,.@M^..M...M.7
    1680: 00 4E F8 2F 40 4E 92 D0 8F 4E E1 BD CF 4E DD 20  // .N./@N...N...N. 
    1690: 00 4F 18 52 40 4F 4F F4 8F 4F B2 A2 CF 4F 4D F0  // .O.R@OO..O...OM.
    16A0: 0F 50 08 60 40 50 78 2D 80 50 80 A5 CF 50 54 B3  // .P.`@Px-.P...PT.
    16B0: 0F 51 82 4A 40 51 A2 69 80 51 00 D0 CF 51 F5 7E  // .Q.J@Q.i.Q...Q.~
    16C0: 0F 52 5C 0B 40 52 CF 8E 80 52 52 21 C0 52 DC 70  // .R\.@R...RR!.R.p
    16D0: 0F 53 96 AD 4F 53 06 7F 80 53 C7 82 C0 53 0A A3  // .S..OS...S...S..
    16E0: 0F 54 8D 53 4F 54 C1 28 80 54 14 C8 C0 54 21 1B  // .T.SOT.(.T...T!.
    16F0: 00 55 23 32 4F 55 41 97 8F 55 F2 B6 C0 55 87 B6  // .U#2OUA..U...U..
    1700: 00 56 02 81 4F 56 43 08 8F 56 34 25 C0 56 19 1C  // .V..OVC..V4%.V..
    1710: 01 57 7E 50 40 57 24 EE 8E 57 FD 2C CF 57 1C C9  // .W~P@W$..W.,.W..
    1720: 00 58 71 47 41 58 01 C6 8F 58 BA 79 CE 58 6B 6E  // .XqGAX...X.y.Xkn
    1730: 0F 59 BE 5E 41 59 00 70 81 59 76 5B CF 59 77 F7  // .Y.^AY.p.Yv[.Yw.
    1740: 0D 5A AC 51 4F 5A 09 CF 81 5A 53 36 C2 5A 37 CE  // .Z.QOZ...ZS6.Z7.
    1750: 0F 5B A8 3D 4D 5B B8 65 8D 5B EF 50 C0 5B 37 8E  // .[.=M[.e.[.P.[7.
    1760: 03 5C B2 E2 44 5C A5 11 84 5C A3 59 C2 5C 48 F2  // .\..D\...\.Y.\H.
    1770: 00 5D 0E 3F 40 5D 39 08 80 5D 1B 00 00 80 18 00  // .].?@]9..]......
    1780: 40 80 0A 00 80 80 D7 FF CF 80 67 FF 0F 81 A2 FE  // @.........g.....
    1790: 4F 81 76 FD 8F 81 DD FB CF 81 E2 F9 0F 82 A8 F7  // O.v.............
    17A0: 4F 82 67 F5 8F 82 6C F3 CF 82 0B F2 0F 83 97 F1  // O.g...l.........
    17B0: 4F 83 4A F2 8F 83 3B F4 CF 83 51 F7 0F 84 3F FB  // O.J...;...Q...?.
    17C0: 4F 84 88 FF 8F 84 92 03 C0 84 C0 06 00 85 8B 08  // O...............
    17D0: 40 85 A2 08 80 85 FD 06 C0 85 E9 03 00 86 FC FF  // @...............
    17E0: 4F 86 FF FB 8F 86 C8 F8 CF 86 0F F7 0F 87 45 F7  // O.............E.
    17F0: 4F 87 75 F9 8F 87 3D FD CF 87 DA 01 00 88 4C 06  // O.u...=.......L.
    1800: 40 88 8F 09 80 88 D0 0A C0 88 A4 09 00 89 27 06  // @.............'.
    1810: 40 89 FF 00 80 89 43 FB CF 89 3C F6 0F 8A 26 F3  // @.....C...<...&.
    1820: 4F 8A DD F2 8F 8A A5 F5 CF 8A 11 FB 0F 8B 0C 02  // O...............
    1830: 40 8B 0E 09 80 8B 72 0E C0 8B D3 10 00 8C 69 0F  // @.....r.......i.
    1840: 40 8C 42 0A 80 8C 4F 02 C0 8C 3E F9 0F 8D 20 F1  // @.B...O...>... .
    1850: 4F 8D F1 EB 8F 8D 25 EB CF 8D 3D EF 0F 8E 9D F7  // O.....%...=.....
    1860: 4F 8E 96 02 80 8E BD 0D C0 8E 6D 16 00 8F 67 1A  // O.........m...g.
    1870: 40 8F 5F 18 80 8F 61 10 C0 8F E4 03 00 90 8F F5  // @._...a.........
    1880: 4F 90 AB E8 8F 90 66 E0 CF 90 12 DF 0F 91 83 E5  // O.....f.........
    1890: 4F 91 C3 F2 8F 91 27 04 C0 91 D6 15 00 92 99 23  // O.....'........#
    18A0: 40 92 D9 29 80 92 84 26 C0 92 AA 19 00 93 A6 05  // @..)...&........
    18B0: 40 93 B6 EE 8F 93 21 DA CF 93 09 CD 0F 94 2C CB  // @.....!.......,.
    18C0: 4F 94 E8 D5 8F 94 B1 EB CF 94 38 08 00 95 31 25  // O.........8...1%
    18D0: 40 95 AF 3B 80 95 B6 45 C0 95 C0 3F 00 96 C6 29  // @..;...E...?...)
    18E0: 40 96 99 07 80 96 4C E0 CF 96 DB BC 0F 97 3A A6  // @.....L.......:.
    18F0: 4F 97 39 A3 8F 97 AF B6 CF 97 6D DE 0F 98 33 13  // O.9.......m...3.
    1900: 40 98 D5 49 80 98 5A 75 C0 98 C4 89 00 99 ED 7E  // @..I..Zu.......~
    1910: 40 99 D5 52 80 99 E7 0A C0 99 CC B3 0F 9A B8 5F  // @..R..........._
    1920: 4F 9A 67 23 8F 9A 59 12 CF 9A EA 3A 0F 9B 13 A3  // O.g#..Y....:....
    1930: 4F 9B 87 46 80 9B 8B 16 C1 9B BC FB 01 9C 6F D9  // O..F..........o.
    1940: 42 9C 33 92 83 9C 98 0C C4 9C 6B 37 04 9D 98 0C  // B.3.......k7....
    1950: 44 9D 33 92 83 9D 6F D9 C2 9D BC FB 01 9E 8B 16  // D.3...o.........
    1960: 41 9E 87 46 80 9E 13 A3 CF 9E EA 3A 0F 9F 59 12  // A..F.......:..Y.
    1970: 4F 9F 67 23 8F 9F B8 5F CF 9F CC B3 0F A0 E7 0A  // O.g#..._........
    1980: 40 A0 D5 52 80 A0 ED 7E C0 A0 C4 89 00 A1 5A 75  // @..R...~......Zu
    1990: 40 A1 D5 49 80 A1 33 13 C0 A1 6D DE 0F A2 AF B6  // @..I..3...m.....
    19A0: 4F A2 39 A3 8F A2 3A A6 CF A2 DB BC 0F A3 4C E0  // O.9...:.......L.
    19B0: 4F A3 99 07 80 A3 C6 29 C0 A3 C0 3F 00 A4 B6 45  // O......)...?...E
    19C0: 40 A4 AF 3B 80 A4 31 25 C0 A4 38 08 00 A5 B1 EB  // @..;..1%..8.....
    19D0: 4F A5 E8 D5 8F A5 2C CB CF A5 09 CD 0F A6 21 DA  // O.....,.......!.
    19E0: 4F A6 B6 EE 8F A6 A6 05 C0 A6 AA 19 00 A7 84 26  // O..............&
    19F0: 40 A7 D9 29 80 A7 99 23 C0 A7 D6 15 00 A8 27 04  // @..)...#......'.
    1A00: 40 A8 C3 F2 8F A8 83 E5 CF A8 12 DF 0F A9 66 E0  // @.............f.
    1A10: 4F A9 AB E8 8F A9 8F F5 CF A9 E4 03 00 AA 61 10  // O.............a.
    1A20: 40 AA 5F 18 80 AA 67 1A C0 AA 6D 16 00 AB BD 0D  // @._...g...m.....
    1A30: 40 AB 96 02 80 AB 9D F7 CF AB 3D EF 0F AC 25 EB  // @.........=...%.
    1A40: 4F AC F1 EB 8F AC 20 F1 CF AC 3E F9 0F AD 4F 02  // O..... ...>...O.
    1A50: 40 AD 42 0A 80 AD 69 0F C0 AD D3 10 00 AE 72 0E  // @.B...i.......r.
    1A60: 40 AE 0E 09 80 AE 0C 02 C0 AE 11 FB 0F AF A5 F5  // @...............
    1A70: 4F AF DD F2 8F AF 26 F3 CF AF 3C F6 0F B0 43 FB  // O.....&...<...C.
    1A80: 4F B0 FF 00 80 B0 27 06 C0 B0 A4 09 00 B1 D0 0A  // O.....'.........
    1A90: 40 B1 8F 09 80 B1 4C 06 C0 B1 DA 01 00 B2 3D FD  // @.....L.......=.
    1AA0: 4F B2 75 F9 8F B2 45 F7 CF B2 0F F7 0F B3 C8 F8  // O.u...E.........
    1AB0: 4F B3 FF FB 8F B3 FC FF CF B3 E9 03 00 B4 FD 06  // O...............
    1AC0: 40 B4 A2 08 80 B4 8B 08 C0 B4 C0 06 00 B5 92 03  // @...............
    1AD0: 40 B5 88 FF 8F B5 3F FB CF B5 51 F7 0F B6 3B F4  // @.....?...Q...;.
    1AE0: 4F B6 4A F2 8F B6 97 F1 CF B6 0B F2 0F B7 6C F3  // O.J...........l.
    1AF0: 4F B7 67 F5 8F B7 A8 F7 CF B7 E2 F9 0F B8 DD FB  // O.g.............
    1B00: 4F B8 76 FD 8F B8 A2 FE CF B8 67 FF 0F B9 D7 FF  // O.v.......g.....
    1B10: 4F B9 0A 00 80 B9 18 00 C0 B9 1B 00 00 BA 00 04  // O...............
    1B20: 00 00 00 DE AD BE EF                             // .......


OEML
----


PTDT
----
[000h 0000 004h]                   Signature : "PTDT"    
[004h 0004 004h]                Table Length : 00000024
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : 5C
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000005
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 0100000D


**** Unknown ACPI table signature [PTDT]


Raw Table Data: Length 36 (0x24)

    0000: 50 54 44 54 24 00 00 00 00 5C 48 50 51 4F 45 4D  // PTDT$....\HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 05 00 00 00 4D 53 46 54  // SLIC-BPC....MSFT
    0020: 0D 00 00 01                                      // ....


RTMA
----
[000h 0000 004h]                   Signature : "RTMA"    
[004h 0004 004h]                Table Length : 0000009E
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 59
[00Ah 0010 006h]                      Oem ID : "HP"
[010h 0016 008h]                Oem Table ID : "_HBMART_"
[018h 0024 004h]                Oem Revision : 00001000
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [RTMA]


Raw Table Data: Length 158 (0x9E)

    0000: 52 54 4D 41 9E 00 00 00 01 59 48 50 00 00 00 00  // RTMA.....YHP....
    0010: 5F 48 42 4D 41 52 54 5F 00 10 00 00 48 50 20 20  // _HBMART_....HP  
    0020: 01 00 00 00 5F 52 54 41 43 50 49 5F 00 7A 00 00  // ...._RTACPI_.z..
    0030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0040: 01 00 5F 52 54 55 45 30 30 5F 00 5C 00 00 02 00  // .._RTUE00_.\....
    0050: 0B DA 81 53 00 00 00 00 30 00 00 00 00 00 00 00  // ...S....0.......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 01 00 5F 41 55 58 4D 41 43 5F  // ........_AUXMAC_
    0080: 00 26 00 00 00 00 00 00 00 00 01 00 00 00 00 00  // .&..............
    0090: 00 00 01 00 00 00 5C 60 BA D1 CF 8A 00 00        // ......\`......


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AcpiRe", "PLT_RTD3", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.OSCO, UnknownObj)
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GEXP, DeviceObj)
    External (_SB_.PC00.GEXP.SGEP, MethodObj)    // 3 Arguments
    External (_SB_.PC00.GLAN, DeviceObj)
    External (_SB_.PC00.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.I2C0, DeviceObj)
    External (_SB_.PC00.I2C0.TPD0, DeviceObj)
    External (_SB_.PC00.I2C1, DeviceObj)
    External (_SB_.PC00.I2C1.TPL1, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.ECAV, IntObj)
    External (_SB_.PC00.LPCB.H_EC.SPT2, UnknownObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.DPGE, UnknownObj)
    External (_SB_.PC00.RP01.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.L23E, UnknownObj)
    External (_SB_.PC00.RP01.L23R, UnknownObj)
    External (_SB_.PC00.RP01.LASX, UnknownObj)
    External (_SB_.PC00.RP01.LDIS, UnknownObj)
    External (_SB_.PC00.RP01.LEDM, UnknownObj)
    External (_SB_.PC00.RP01.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP01.VDID, UnknownObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.DPGE, UnknownObj)
    External (_SB_.PC00.RP02.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.L23E, UnknownObj)
    External (_SB_.PC00.RP02.L23R, UnknownObj)
    External (_SB_.PC00.RP02.LASX, UnknownObj)
    External (_SB_.PC00.RP02.LDIS, UnknownObj)
    External (_SB_.PC00.RP02.LEDM, UnknownObj)
    External (_SB_.PC00.RP02.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP02.VDID, UnknownObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.DPGE, UnknownObj)
    External (_SB_.PC00.RP03.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.L23E, UnknownObj)
    External (_SB_.PC00.RP03.L23R, UnknownObj)
    External (_SB_.PC00.RP03.LASX, UnknownObj)
    External (_SB_.PC00.RP03.LDIS, UnknownObj)
    External (_SB_.PC00.RP03.LEDM, UnknownObj)
    External (_SB_.PC00.RP03.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP03.VDID, UnknownObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.DPGE, UnknownObj)
    External (_SB_.PC00.RP04.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.L23E, UnknownObj)
    External (_SB_.PC00.RP04.L23R, UnknownObj)
    External (_SB_.PC00.RP04.LASX, UnknownObj)
    External (_SB_.PC00.RP04.LDIS, UnknownObj)
    External (_SB_.PC00.RP04.LEDM, UnknownObj)
    External (_SB_.PC00.RP04.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP04.VDID, UnknownObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.DPGE, UnknownObj)
    External (_SB_.PC00.RP05.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.L23E, UnknownObj)
    External (_SB_.PC00.RP05.L23R, UnknownObj)
    External (_SB_.PC00.RP05.LASX, UnknownObj)
    External (_SB_.PC00.RP05.LDIS, UnknownObj)
    External (_SB_.PC00.RP05.LEDM, UnknownObj)
    External (_SB_.PC00.RP05.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP05.VDID, UnknownObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.DPGE, UnknownObj)
    External (_SB_.PC00.RP06.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.L23E, UnknownObj)
    External (_SB_.PC00.RP06.L23R, UnknownObj)
    External (_SB_.PC00.RP06.LASX, UnknownObj)
    External (_SB_.PC00.RP06.LDIS, UnknownObj)
    External (_SB_.PC00.RP06.LEDM, UnknownObj)
    External (_SB_.PC00.RP06.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP06.VDID, UnknownObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.DPGE, UnknownObj)
    External (_SB_.PC00.RP07.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.L23E, UnknownObj)
    External (_SB_.PC00.RP07.L23R, UnknownObj)
    External (_SB_.PC00.RP07.LASX, UnknownObj)
    External (_SB_.PC00.RP07.LDIS, UnknownObj)
    External (_SB_.PC00.RP07.LEDM, UnknownObj)
    External (_SB_.PC00.RP07.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP07.VDID, UnknownObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.DPGE, UnknownObj)
    External (_SB_.PC00.RP08.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.L23E, UnknownObj)
    External (_SB_.PC00.RP08.L23R, UnknownObj)
    External (_SB_.PC00.RP08.LASX, UnknownObj)
    External (_SB_.PC00.RP08.LDIS, UnknownObj)
    External (_SB_.PC00.RP08.LEDM, UnknownObj)
    External (_SB_.PC00.RP08.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP08.VDID, UnknownObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.DPGE, UnknownObj)
    External (_SB_.PC00.RP09.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.L23E, UnknownObj)
    External (_SB_.PC00.RP09.L23R, UnknownObj)
    External (_SB_.PC00.RP09.LASX, UnknownObj)
    External (_SB_.PC00.RP09.LDIS, UnknownObj)
    External (_SB_.PC00.RP09.LEDM, UnknownObj)
    External (_SB_.PC00.RP09.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP09.VDID, UnknownObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.DPGE, UnknownObj)
    External (_SB_.PC00.RP10.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.L23E, UnknownObj)
    External (_SB_.PC00.RP10.L23R, UnknownObj)
    External (_SB_.PC00.RP10.LASX, UnknownObj)
    External (_SB_.PC00.RP10.LDIS, UnknownObj)
    External (_SB_.PC00.RP10.LEDM, UnknownObj)
    External (_SB_.PC00.RP10.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP10.VDID, UnknownObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.DPGE, UnknownObj)
    External (_SB_.PC00.RP11.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.L23E, UnknownObj)
    External (_SB_.PC00.RP11.L23R, UnknownObj)
    External (_SB_.PC00.RP11.LASX, UnknownObj)
    External (_SB_.PC00.RP11.LDIS, UnknownObj)
    External (_SB_.PC00.RP11.LEDM, UnknownObj)
    External (_SB_.PC00.RP11.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP11.VDID, UnknownObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.DPGE, UnknownObj)
    External (_SB_.PC00.RP12.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.L23E, UnknownObj)
    External (_SB_.PC00.RP12.L23R, UnknownObj)
    External (_SB_.PC00.RP12.LASX, UnknownObj)
    External (_SB_.PC00.RP12.LDIS, UnknownObj)
    External (_SB_.PC00.RP12.LEDM, UnknownObj)
    External (_SB_.PC00.RP12.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP12.VDID, UnknownObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.DPGE, UnknownObj)
    External (_SB_.PC00.RP13.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.L23E, UnknownObj)
    External (_SB_.PC00.RP13.L23R, UnknownObj)
    External (_SB_.PC00.RP13.LASX, UnknownObj)
    External (_SB_.PC00.RP13.LDIS, UnknownObj)
    External (_SB_.PC00.RP13.LEDM, UnknownObj)
    External (_SB_.PC00.RP13.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP13.VDID, UnknownObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.DPGE, UnknownObj)
    External (_SB_.PC00.RP14.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.L23E, UnknownObj)
    External (_SB_.PC00.RP14.L23R, UnknownObj)
    External (_SB_.PC00.RP14.LASX, UnknownObj)
    External (_SB_.PC00.RP14.LDIS, UnknownObj)
    External (_SB_.PC00.RP14.LEDM, UnknownObj)
    External (_SB_.PC00.RP14.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP14.VDID, UnknownObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.DPGE, UnknownObj)
    External (_SB_.PC00.RP15.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.L23E, UnknownObj)
    External (_SB_.PC00.RP15.L23R, UnknownObj)
    External (_SB_.PC00.RP15.LASX, UnknownObj)
    External (_SB_.PC00.RP15.LDIS, UnknownObj)
    External (_SB_.PC00.RP15.LEDM, UnknownObj)
    External (_SB_.PC00.RP15.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP15.VDID, UnknownObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.DPGE, UnknownObj)
    External (_SB_.PC00.RP16.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.L23E, UnknownObj)
    External (_SB_.PC00.RP16.L23R, UnknownObj)
    External (_SB_.PC00.RP16.LASX, UnknownObj)
    External (_SB_.PC00.RP16.LDIS, UnknownObj)
    External (_SB_.PC00.RP16.LEDM, UnknownObj)
    External (_SB_.PC00.RP16.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP16.VDID, UnknownObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.DPGE, UnknownObj)
    External (_SB_.PC00.RP17.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.L23E, UnknownObj)
    External (_SB_.PC00.RP17.L23R, UnknownObj)
    External (_SB_.PC00.RP17.LASX, UnknownObj)
    External (_SB_.PC00.RP17.LDIS, UnknownObj)
    External (_SB_.PC00.RP17.LEDM, UnknownObj)
    External (_SB_.PC00.RP17.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP17.VDID, UnknownObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.DPGE, UnknownObj)
    External (_SB_.PC00.RP18.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.L23E, UnknownObj)
    External (_SB_.PC00.RP18.L23R, UnknownObj)
    External (_SB_.PC00.RP18.LASX, UnknownObj)
    External (_SB_.PC00.RP18.LDIS, UnknownObj)
    External (_SB_.PC00.RP18.LEDM, UnknownObj)
    External (_SB_.PC00.RP18.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP18.VDID, UnknownObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.DPGE, UnknownObj)
    External (_SB_.PC00.RP19.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.L23E, UnknownObj)
    External (_SB_.PC00.RP19.L23R, UnknownObj)
    External (_SB_.PC00.RP19.LASX, UnknownObj)
    External (_SB_.PC00.RP19.LDIS, UnknownObj)
    External (_SB_.PC00.RP19.LEDM, UnknownObj)
    External (_SB_.PC00.RP19.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP19.VDID, UnknownObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.DPGE, UnknownObj)
    External (_SB_.PC00.RP20.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.L23E, UnknownObj)
    External (_SB_.PC00.RP20.L23R, UnknownObj)
    External (_SB_.PC00.RP20.LASX, UnknownObj)
    External (_SB_.PC00.RP20.LDIS, UnknownObj)
    External (_SB_.PC00.RP20.LEDM, UnknownObj)
    External (_SB_.PC00.RP20.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP20.VDID, UnknownObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.DPGE, UnknownObj)
    External (_SB_.PC00.RP21.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.L23E, UnknownObj)
    External (_SB_.PC00.RP21.L23R, UnknownObj)
    External (_SB_.PC00.RP21.LASX, UnknownObj)
    External (_SB_.PC00.RP21.LDIS, UnknownObj)
    External (_SB_.PC00.RP21.LEDM, UnknownObj)
    External (_SB_.PC00.RP21.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP21.VDID, UnknownObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.DPGE, UnknownObj)
    External (_SB_.PC00.RP22.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.L23E, UnknownObj)
    External (_SB_.PC00.RP22.L23R, UnknownObj)
    External (_SB_.PC00.RP22.LASX, UnknownObj)
    External (_SB_.PC00.RP22.LDIS, UnknownObj)
    External (_SB_.PC00.RP22.LEDM, UnknownObj)
    External (_SB_.PC00.RP22.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP22.VDID, UnknownObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.DPGE, UnknownObj)
    External (_SB_.PC00.RP23.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.L23E, UnknownObj)
    External (_SB_.PC00.RP23.L23R, UnknownObj)
    External (_SB_.PC00.RP23.LASX, UnknownObj)
    External (_SB_.PC00.RP23.LDIS, UnknownObj)
    External (_SB_.PC00.RP23.LEDM, UnknownObj)
    External (_SB_.PC00.RP23.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP23.VDID, UnknownObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.DPGE, UnknownObj)
    External (_SB_.PC00.RP24.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.L23E, UnknownObj)
    External (_SB_.PC00.RP24.L23R, UnknownObj)
    External (_SB_.PC00.RP24.LASX, UnknownObj)
    External (_SB_.PC00.RP24.LDIS, UnknownObj)
    External (_SB_.PC00.RP24.LEDM, UnknownObj)
    External (_SB_.PC00.RP24.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PC00.RP24.VDID, UnknownObj)
    External (_SB_.PC00.SAT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT1, DeviceObj)
    External (_SB_.PC00.SAT0.PRT2, DeviceObj)
    External (_SB_.PC00.SAT0.PRT3, DeviceObj)
    External (_SB_.PC00.SAT0.PRT4, DeviceObj)
    External (_SB_.PC00.SAT0.PRT5, DeviceObj)
    External (_SB_.PC00.XDCI, DeviceObj)
    External (_SB_.PC00.XDCI.D0I3, UnknownObj)
    External (_SB_.PC00.XDCI.XDCB, UnknownObj)
    External (_SB_.PC00.XHCI, DeviceObj)
    External (_SB_.PC00.XHCI.PMEE, UnknownObj)
    External (_SB_.PC00.XHCI.PMES, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS11, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS12, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS13, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS14, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AUDD, FieldUnitObj)
    External (DVID, UnknownObj)
    External (GBEP, UnknownObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (I20D, FieldUnitObj)
    External (I21D, FieldUnitObj)
    External (IC0D, FieldUnitObj)
    External (IC1D, FieldUnitObj)
    External (IC1S, FieldUnitObj)
    External (PCHG, UnknownObj)
    External (PCHH, UnknownObj)
    External (PCHS, UnknownObj)
    External (PEP0, UnknownObj)
    External (PEP3, UnknownObj)
    External (RCG0, IntObj)
    External (RCG1, IntObj)
    External (RIC0, FieldUnitObj)
    External (SDS0, FieldUnitObj)
    External (SDS1, FieldUnitObj)
    External (SHSB, FieldUnitObj)
    External (SPST, IntObj)
    External (UAMS, UnknownObj)
    External (VRRD, FieldUnitObj)
    External (VRSD, FieldUnitObj)
    External (XDST, IntObj)
    External (XHPR, UnknownObj)

    OperationRegion (R3NV, SystemMemory, 0x23AF1018, 0x0000019F)
    Field (R3NV, AnyAcc, NoLock, Preserve)
    {
        R301,   1, 
        Offset (0x0E), 
        R302,   1, 
        Offset (0x1C), 
        R303,   1, 
        Offset (0x2A), 
        R304,   1, 
        Offset (0x38), 
        R305,   1, 
        Offset (0x46), 
        R306,   1, 
        Offset (0x54), 
        R307,   1, 
        Offset (0x62), 
        R308,   1, 
        Offset (0x70), 
        R309,   1, 
        Offset (0x7E), 
        R310,   1, 
        Offset (0x8C), 
        R311,   1, 
        Offset (0x9A), 
        R312,   1, 
        Offset (0xA8), 
        R313,   1, 
        Offset (0xB6), 
        R314,   1, 
        Offset (0xC4), 
        R315,   1, 
        Offset (0xD2), 
        R316,   1, 
        Offset (0xE0), 
        R317,   1, 
        Offset (0xEE), 
        R318,   1, 
        Offset (0xFC), 
        R319,   1, 
        Offset (0x10A), 
        R320,   1, 
        Offset (0x118), 
        R321,   1, 
        Offset (0x126), 
        R322,   1, 
        Offset (0x134), 
        R323,   1, 
        Offset (0x142), 
        R324,   1, 
        Offset (0x150), 
        U301,   1, 
        Offset (0x155), 
        U302,   1, 
        Offset (0x15A), 
        U303,   1, 
        Offset (0x15F), 
        U304,   1, 
        Offset (0x164), 
        U305,   1, 
        Offset (0x169), 
        U306,   1, 
        Offset (0x16E), 
        U307,   1, 
        Offset (0x173), 
        U308,   1, 
        Offset (0x178), 
        U309,   1, 
        Offset (0x17D), 
        U310,   1, 
        Offset (0x182), 
        U311,   1, 
        Offset (0x187), 
        U312,   1, 
        Offset (0x18C), 
        U313,   1, 
        Offset (0x191), 
        U314,   1, 
        Offset (0x196), 
        ZPDE,   1
    }

    If ((R301 == One))
    {
        Scope (\_SB.PC00.RP01)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x02), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP01.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP01.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP01.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP01.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP01.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP01.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP01.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP01.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP01.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP01.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP01.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP01, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP01, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX01, 0, NotSerialized)
        {
            \_SB.PC00.RP01.XPEH ()
        }
    }

    If ((R302 == One))
    {
        Scope (\_SB.PC00.RP02)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0E), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x10), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP02.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP02.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP02.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP02.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP02.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP02.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP02.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP02.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP02.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP02.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP02.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP02, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP02, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX02, 0, NotSerialized)
        {
            \_SB.PC00.RP02.XPEH ()
        }
    }

    If ((R303 == One))
    {
        Scope (\_SB.PC00.RP03)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x1C), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x1E), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP03.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP03.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP03.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP03.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP03.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP03.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP03.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP03.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP03.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP03.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP03.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP03, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP03, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX03, 0, NotSerialized)
        {
            \_SB.PC00.RP03.XPEH ()
        }
    }

    If ((R304 == One))
    {
        Scope (\_SB.PC00.RP04)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x2A), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x2C), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP04.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP04.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP04.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP04.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP04.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP04.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP04.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP04.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP04.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP04.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP04.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP04, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP04, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX04, 0, NotSerialized)
        {
            \_SB.PC00.RP04.XPEH ()
        }
    }

    If ((R305 == One))
    {
        Scope (\_SB.PC00.RP05)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x38), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x3A), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP05.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP05.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP05.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP05.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP05.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP05.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP05.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP05.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP05.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP05.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP05.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP05, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP05, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX05, 0, NotSerialized)
        {
            \_SB.PC00.RP05.XPEH ()
        }
    }

    If ((R306 == One))
    {
        Scope (\_SB.PC00.RP06)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x46), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x48), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP06.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP06.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP06.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP06.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP06.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP06.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP06.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP06.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP06.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP06.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP06.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP06, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP06, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX06, 0, NotSerialized)
        {
            \_SB.PC00.RP06.XPEH ()
        }
    }

    If ((R307 == One))
    {
        Scope (\_SB.PC00.RP07)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x56), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP07.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP07.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP07.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP07.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP07.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP07.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP07.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP07.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP07.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP07.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP07.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP07, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP07, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX07, 0, NotSerialized)
        {
            \_SB.PC00.RP07.XPEH ()
        }
    }

    If ((R308 == One))
    {
        Scope (\_SB.PC00.RP08)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x62), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x64), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP08.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP08.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP08.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP08.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP08.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP08.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP08.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP08.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP08.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP08.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP08.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP08, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP08, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX08, 0, NotSerialized)
        {
            \_SB.PC00.RP08.XPEH ()
        }
    }

    If ((R309 == One))
    {
        Scope (\_SB.PC00.RP09)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x70), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x72), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP09.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP09.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP09.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP09.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP09.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP09.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP09.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP09.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP09.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP09.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP09.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP09, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP09, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX09, 0, NotSerialized)
        {
            \_SB.PC00.RP09.XPEH ()
        }
    }

    If ((R310 == One))
    {
        Scope (\_SB.PC00.RP10)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x7E), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x80), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP10.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP10.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP10.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP10.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP10.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP10.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP10.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP10.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP10.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP10.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP10.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP10, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP10, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX10, 0, NotSerialized)
        {
            \_SB.PC00.RP10.XPEH ()
        }
    }

    If ((R311 == One))
    {
        Scope (\_SB.PC00.RP11)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x8C), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x8E), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP11.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP11.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP11.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP11.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP11.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP11.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP11.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP11.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP11.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP11.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP11.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP11, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP11, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX11, 0, NotSerialized)
        {
            \_SB.PC00.RP11.XPEH ()
        }
    }

    If ((R312 == One))
    {
        Scope (\_SB.PC00.RP12)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x9A), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x9C), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP12.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP12.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP12.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP12.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP12.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP12.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP12.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP12.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP12.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP12.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP12.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP12, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP12, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX12, 0, NotSerialized)
        {
            \_SB.PC00.RP12.XPEH ()
        }
    }

    If ((R313 == One))
    {
        Scope (\_SB.PC00.RP13)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xA8), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xAA), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP13.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP13.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP13.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP13.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP13.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP13.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP13.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP13.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP13.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP13.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP13.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP13, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP13, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX13, 0, NotSerialized)
        {
            \_SB.PC00.RP13.XPEH ()
        }
    }

    If ((R314 == One))
    {
        Scope (\_SB.PC00.RP14)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xB6), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xB8), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP14.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP14.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP14.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP14.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP14.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP14.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP14.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP14.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP14.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP14.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP14.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP14, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP14, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX14, 0, NotSerialized)
        {
            \_SB.PC00.RP14.XPEH ()
        }
    }

    If ((R315 == One))
    {
        Scope (\_SB.PC00.RP15)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xC4), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xC6), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP15.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP15.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP15.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP15.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP15.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP15.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP15.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP15.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP15.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP15.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP15.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP15, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP15, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX15, 0, NotSerialized)
        {
            \_SB.PC00.RP15.XPEH ()
        }
    }

    If ((R316 == One))
    {
        Scope (\_SB.PC00.RP16)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xD2), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xD4), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP16.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP16.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP16.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP16.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP16.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP16.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP16.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP16.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP16.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP16.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP16.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP16, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP16, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX16, 0, NotSerialized)
        {
            \_SB.PC00.RP16.XPEH ()
        }
    }

    If ((R317 == One))
    {
        Scope (\_SB.PC00.RP17)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x56), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP17.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP17.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP17.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP17.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP17.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP17.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP17.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP17.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP17.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP17.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP17.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP17, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP17, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX17, 0, NotSerialized)
        {
            \_SB.PC00.RP17.XPEH ()
        }
    }

    If ((R318 == One))
    {
        Scope (\_SB.PC00.RP18)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xEE), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xF0), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP18.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP18.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP18.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP18.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP18.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP18.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP18.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP18.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP18.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP18.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP18.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP18, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP18, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX18, 0, NotSerialized)
        {
            \_SB.PC00.RP18.XPEH ()
        }
    }

    If ((R319 == One))
    {
        Scope (\_SB.PC00.RP19)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xFC), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xFE), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP19.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP19.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP19.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP19.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP19.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP19.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP19.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP19.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP19.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP19.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP19.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PC00.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP19, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP19, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX19, 0, NotSerialized)
        {
            \_SB.PC00.RP19.XPEH ()
        }
    }

    If ((R320 == One))
    {
        Scope (\_SB.PC00.RP20)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10A), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x10C), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP20.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP20.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP20.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP20.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP20.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP20.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP20.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP20.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP20.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP20.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP20.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP20, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP20, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX20, 0, NotSerialized)
        {
            \_SB.PC00.RP20.XPEH ()
        }
    }

    If ((R321 == One))
    {
        Scope (\_SB.PC00.RP21)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x118), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x11A), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP21.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP21.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP21.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP21.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP21.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP21.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP21.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP21.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP21.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP21.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP21.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP21, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP21, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX21, 0, NotSerialized)
        {
            \_SB.PC00.RP21.XPEH ()
        }
    }

    If ((R322 == One))
    {
        Scope (\_SB.PC00.RP22)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x126), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x128), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP22.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP22.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP22.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP22.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP22.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP22.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP22.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP22.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP22.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP22.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP22.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP22, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP22, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX22, 0, NotSerialized)
        {
            \_SB.PC00.RP22.XPEH ()
        }
    }

    If ((R323 == One))
    {
        Scope (\_SB.PC00.RP23)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x134), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x136), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP23.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP23.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP23.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP23.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP23.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP23.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP23.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP23.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP23.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP23.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP23.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP20, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP23, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX23, 0, NotSerialized)
        {
            \_SB.PC00.RP23.XPEH ()
        }
    }

    If ((R324 == One))
    {
        Scope (\_SB.PC00.RP24)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x142), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x144), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.RP24.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PC00.RP24.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PC00.RP24.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PC00.RP24.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PC00.RP24.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PC00.RP24.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PC00.RP24.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PC00.RP24.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PC00.RP24.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PC00.RP24.CLQS */
                SCLK [One] = CLQN /* \_SB_.PC00.RP24.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                    L23D ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    DL23 ()
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }
                }
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }
                    }

                    Notify (RP24, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP24, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX24, 0, NotSerialized)
        {
            \_SB.PC00.RP24.XPEH ()
        }
    }

    Scope (\_SB.PC00.XHCI)
    {
        OperationRegion (XHCP, SystemMemory, (\_SB.PC00.GPCB () + 0x000A0000), 0x0100)
        Field (XHCP, AnyAcc, Lock, Preserve)
        {
            Offset (0x04), 
            PDBM,   16, 
            Offset (0x10), 
            MEMB,   64
        }

        OperationRegion (XHCM, SystemMemory, (MEMB & 0xFFFFFFFFFFFF0000), 0x0600)
    }

    If ((U301 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS01)
        {
            Name (SLOT, One)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x150), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x151), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x480), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS01.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS01.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS01.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U302 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS02)
        {
            Name (SLOT, 0x02)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x155), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x156), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x490), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS02.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS02.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS02.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U303 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS03)
        {
            Name (SLOT, 0x03)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x15A), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x15B), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4A0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS03.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS03.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS03.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U304 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS04)
        {
            Name (SLOT, 0x04)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x15F), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x160), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4B0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS04.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS04.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS04.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U305 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS05)
        {
            Name (SLOT, 0x05)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x164), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x165), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4C0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS05.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS05.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS05.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U306 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS06)
        {
            Name (SLOT, 0x06)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x169), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x16A), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4D0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS06.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS06.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS06.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U307 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS07)
        {
            Name (SLOT, 0x07)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x16E), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x16F), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4E0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS07.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS07.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS07.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U308 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS08)
        {
            Name (SLOT, 0x08)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x173), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x174), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4F0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS08.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS08.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS08.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U309 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS09)
        {
            Name (SLOT, 0x09)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x178), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x179), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x500), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS09.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS09.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS09.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U310 == One))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS10)
        {
            Name (SLOT, 0x0A)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x17D), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x17E), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x510), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS10.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS10.PWRP */
                PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS10.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((PCHS == PCHH))
    {
        If ((U311 == One))
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS11)
            {
                Name (SLOT, 0x0B)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x182), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x183), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x520), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS11.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS11.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS11.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U312 == One))
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS12)
            {
                Name (SLOT, 0x0C)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x187), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x188), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x520), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS12.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS12.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS12.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U313 == One))
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS13)
            {
                Name (SLOT, 0x0D)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x18C), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x18D), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x530), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS13.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS13.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS13.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U314 == One))
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS14)
            {
                Name (SLOT, 0x0E)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x191), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x192), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x540), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PC00.XHCI.RHUB.HS14.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PC00.XHCI.RHUB.HS14.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PC00.XHCI.RHUB.HS14.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }
    }

    Field (R3NV, AnyAcc, Lock, Preserve)
    {
        Offset (0x196), 
            ,   1, 
        ZSPN,   3, 
        OPEA,   1, 
        Offset (0x197), 
        OPEP,   32, 
        ODAP,   32
    }

    If ((ZPDE == One))
    {
        If ((ZSPN == Zero))
        {
            Scope (\_SB.PC00.SAT0.PRT0)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PC00.SAT0, 0x80) // Status Change
                    }
                    Else
                    {
                        Notify (\_SB.PC00.SAT0.PRT0, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ0, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == One))
        {
            Scope (\_SB.PC00.SAT0.PRT1)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PC00.SAT0, 0x81) // Information Change
                    }
                    Else
                    {
                        Notify (\_SB.PC00.SAT0.PRT1, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ1, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x02))
        {
            Scope (\_SB.PC00.SAT0.PRT2)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PC00.SAT0, 0x82) // Device-Specific Change
                    }
                    Else
                    {
                        Notify (\_SB.PC00.SAT0.PRT2, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ2, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x03))
        {
            Scope (\_SB.PC00.SAT0.PRT3)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PC00.SAT0, 0x83) // Device-Specific Change
                    }
                    Else
                    {
                        Notify (\_SB.PC00.SAT0.PRT3, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ3, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x04))
        {
            Scope (\_SB.PC00.SAT0.PRT4)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PC00.SAT0, 0x84) // Reserved
                    }
                    Else
                    {
                        Notify (\_SB.PC00.SAT0.PRT4, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ4, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x05))
        {
            Scope (\_SB.PC00.SAT0.PRT5)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PC00.SAT0, 0x85) // Device-Specific
                    }
                    Else
                    {
                        Notify (\_SB.PC00.SAT0.PRT5, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ5, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Method (YY00, 0, NotSerialized)
        {
            \_SB.PC00.SAT0.PRT0.XPEH ()
        }

        Method (YY01, 0, NotSerialized)
        {
            \_SB.PC00.SAT0.PRT1.XPEH ()
        }

        Method (YY02, 0, NotSerialized)
        {
            \_SB.PC00.SAT0.PRT2.XPEH ()
        }

        Method (YY03, 0, NotSerialized)
        {
            \_SB.PC00.SAT0.PRT3.XPEH ()
        }

        Method (YY04, 0, NotSerialized)
        {
            \_SB.PC00.SAT0.PRT4.XPEH ()
        }

        Method (YY05, 0, NotSerialized)
        {
            \_SB.PC00.SAT0.PRT5.XPEH ()
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPCAHWID", 0x00001000)
{
    External (FDRS, FieldUnitObj)

    Scope (\_SB)
    {
        Device (FDAD)
        {
            Name (_HID, "HPIC000C")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((FDRS == One))
                {
                    If (Ones)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "INTEL ", "IgfxSsdt", 0x00003000)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.HDOD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.HDOS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HGME, MethodObj)    // 1 Arguments
    External (_SB_.PC00.IMMC, MethodObj)    // 5 Arguments
    External (ASLB, UnknownObj)
    External (BRTL, UnknownObj)
    External (CPSC, UnknownObj)
    External (CSTE, UnknownObj)
    External (DID1, UnknownObj)
    External (DID2, UnknownObj)
    External (DID3, UnknownObj)
    External (DID4, UnknownObj)
    External (DID5, UnknownObj)
    External (DID6, UnknownObj)
    External (DID7, UnknownObj)
    External (DID8, UnknownObj)
    External (DID9, UnknownObj)
    External (DIDA, UnknownObj)
    External (DIDB, UnknownObj)
    External (DIDC, UnknownObj)
    External (DIDD, UnknownObj)
    External (DIDE, UnknownObj)
    External (DIDF, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (DSEN, UnknownObj)
    External (ECON, IntObj)
    External (EDPV, UnknownObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (HGMD, UnknownObj)
    External (HVCO, UnknownObj)
    External (IBIA, UnknownObj)
    External (IBTT, UnknownObj)
    External (IDMS, UnknownObj)
    External (IF1E, UnknownObj)
    External (IPAT, UnknownObj)
    External (IPSC, UnknownObj)
    External (IPTP, UnknownObj)
    External (ISSC, UnknownObj)
    External (KSV0, UnknownObj)
    External (KSV1, UnknownObj)
    External (LIDS, UnknownObj)
    External (NDID, UnknownObj)
    External (NSTE, UnknownObj)
    External (NXD1, UnknownObj)
    External (NXD2, UnknownObj)
    External (NXD3, UnknownObj)
    External (NXD4, UnknownObj)
    External (NXD5, UnknownObj)
    External (NXD6, UnknownObj)
    External (NXD7, UnknownObj)
    External (NXD8, UnknownObj)
    External (NXDX, UnknownObj)
    External (NXDY, UnknownObj)
    External (OSYS, IntObj)
    External (PAVP, UnknownObj)
    External (PBCL, MethodObj)    // 0 Arguments
    External (PCON, UnknownObj)
    External (PDI0, UnknownObj)
    External (PDI1, UnknownObj)
    External (PDIW, UnknownObj)
    External (PLD1, MethodObj)    // 0 Arguments
    External (PLD2, MethodObj)    // 0 Arguments
    External (PNHM, IntObj)
    External (S0ID, UnknownObj)

    Scope (\_SB.PC00.GFX0)
    {
        Name (DPLD, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS (Arg0)
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            If (CondRefOf (HDOD))
            {
                HDOD ()
            }

            NDID = 0x02
            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                Name (TMP1, Package (0x01)
                {
                    0xFFFFFFFF
                })
                If ((IPTP == One))
                {
                    TMP1 [Zero] = 0x00023480
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PC00.GFX0._DOD.TMP1 */
            }

            If ((NDID == 0x02))
            {
                Name (TMP2, Package (0x02)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IPTP == One))
                {
                    TMP2 [One] = 0x00023480
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PC00.GFX0._DOD.TMP2 */
            }

            If ((NDID == 0x03))
            {
                Name (TMP3, Package (0x03)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IPTP == One))
                {
                    TMP3 [0x02] = 0x00023480
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PC00.GFX0._DOD.TMP3 */
            }

            If ((NDID == 0x04))
            {
                Name (TMP4, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IPTP == One))
                {
                    TMP4 [0x03] = 0x00023480
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PC00.GFX0._DOD.TMP4 */
            }

            If ((NDID == 0x05))
            {
                Name (TMP5, Package (0x05)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IPTP == One))
                {
                    TMP5 [0x04] = 0x00023480
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PC00.GFX0._DOD.TMP5 */
            }

            If ((NDID == 0x06))
            {
                Name (TMP6, Package (0x06)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IPTP == One))
                {
                    TMP6 [0x05] = 0x00023480
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PC00.GFX0._DOD.TMP6 */
            }

            If ((NDID == 0x07))
            {
                Name (TMP7, Package (0x07)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IPTP == One))
                {
                    TMP7 [0x06] = 0x00023480
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PC00.GFX0._DOD.TMP7 */
            }

            If ((NDID == 0x08))
            {
                Name (TMP8, Package (0x08)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IPTP == One))
                {
                    TMP8 [0x07] = 0x00023480
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PC00.GFX0._DOD.TMP8 */
            }

            If ((NDID == 0x09))
            {
                Name (TMP9, Package (0x09)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IPTP == One))
                {
                    TMP9 [0x08] = 0x00023480
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PC00.GFX0._DOD.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                Name (TMPA, Package (0x0A)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IPTP == One))
                {
                    TMPA [0x09] = 0x00023480
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PC00.GFX0._DOD.TMPA */
            }

            If ((NDID == 0x0B))
            {
                Name (TMPB, Package (0x0B)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IPTP == One))
                {
                    TMPB [0x0A] = 0x00023480
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PC00.GFX0._DOD.TMPB */
            }

            If ((NDID == 0x0C))
            {
                Name (TMPC, Package (0x0C)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IPTP == One))
                {
                    TMPC [0x0B] = 0x00023480
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PC00.GFX0._DOD.TMPC */
            }

            If ((NDID == 0x0D))
            {
                Name (TMPD, Package (0x0D)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IPTP == One))
                {
                    TMPD [0x0C] = 0x00023480
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PC00.GFX0._DOD.TMPD */
            }

            If ((NDID == 0x0E))
            {
                Name (TMPE, Package (0x0E)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IPTP == One))
                {
                    TMPE [0x0D] = 0x00023480
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PC00.GFX0._DOD.TMPE */
            }

            If ((NDID == 0x0F))
            {
                Name (TMPF, Package (0x0F)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IPTP == One))
                {
                    TMPF [0x0E] = 0x00023480
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PC00.GFX0._DOD.TMPF */
            }

            If ((NDID == 0x10))
            {
                Name (TMPG, Package (0x10)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x00023480
                Return (TMPG) /* \_SB_.PC00.GFX0._DOD.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* External reference */
                    DIDX = DID1 /* External reference */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (CDDS (DID1))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD1) /* External reference */
                }

                Return (NDDS (DID1))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    If (((0x0F & DID2) == One))
                    {
                        EDPV = 0x02
                        NXDY = NXD2 /* External reference */
                        DIDY = DID2 /* External reference */
                        Return (0x02)
                    }

                    EDPV = 0x02
                    NXDX = NXD2 /* External reference */
                    DIDX = DID2 /* External reference */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((LIDS == Zero))
                {
                    Return (Zero)
                }

                Return (CDDS (DID2))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD2) /* External reference */
                }

                Return (NDDS (DID2))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* External reference */
                    DIDX = DID3 /* External reference */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID3 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID3))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD3) /* External reference */
                }

                Return (NDDS (DID3))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* External reference */
                    DIDX = DID4 /* External reference */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID4 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID4))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD4) /* External reference */
                }

                Return (NDDS (DID4))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* External reference */
                    DIDX = DID5 /* External reference */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID5 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID5))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD5) /* External reference */
                }

                Return (NDDS (DID5))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* External reference */
                    DIDX = DID6 /* External reference */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID6 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID6))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD6) /* External reference */
                }

                Return (NDDS (DID6))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* External reference */
                    DIDX = DID7 /* External reference */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID7 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID7))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD7) /* External reference */
                }

                Return (NDDS (DID7))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* External reference */
                    DIDX = DID8 /* External reference */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID8 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID8))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DID8))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* External reference */
                    DIDX = DID9 /* External reference */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID9 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID9))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DID9))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDA /* External reference */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDA == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDA))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDA))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDB /* External reference */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDB))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDB))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDC /* External reference */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return (CDDS (DIDC))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDC))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDD /* External reference */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return (CDDS (DIDD))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDD))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDE /* External reference */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return (CDDS (DIDE))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDE))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDF /* External reference */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (CDDS (DIDF))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDF))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDX))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDX) /* External reference */
                }

                Return (NDDS (DIDX))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    Return (PBCL ())
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PC00.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* External reference */
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD1))
                {
                    Return (PLD1 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Device (DD2F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }

                If ((EDPV == One))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDY))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }

                If ((EDPV == One))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDY))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDY) /* External reference */
                }

                Return (NDDS (DIDY))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    Return (PBCL ())
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PC00.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* External reference */
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD2))
                {
                    Return (PLD2 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        Method (CDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (0x1D)
            }

            If ((CADL == Local0))
            {
                Return (0x1F)
            }

            If ((CAL2 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL3 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL4 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL5 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL6 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL7 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL8 == Local0))
            {
                Return (0x1F)
            }

            Return (0x1D)
        }

        Method (NDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((NADL == Local0))
            {
                Return (One)
            }

            If ((NDL2 == Local0))
            {
                Return (One)
            }

            If ((NDL3 == Local0))
            {
                Return (One)
            }

            If ((NDL4 == Local0))
            {
                Return (One)
            }

            If ((NDL5 == Local0))
            {
                Return (One)
            }

            If ((NDL6 == Local0))
            {
                Return (One)
            }

            If ((NDL7 == Local0))
            {
                Return (One)
            }

            If ((NDL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DSST, 1, NotSerialized)
        {
            If (((Arg0 & 0xC0000000) == 0xC0000000))
            {
                CSTE = NSTE /* External reference */
            }
        }

        Scope (\_SB.PC00)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                AUDE,   8, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x12), 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            CPL9,   32, 
            CP10,   32, 
            CP11,   32, 
            CP12,   32, 
            CP13,   32, 
            CP14,   32, 
            CP15,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSS,   64, 
            FDSP,   32, 
            STAT,   32, 
            RVDA,   64, 
            RVDS,   32, 
            Offset (0x400), 
            RVBT,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Name (CDCT, Package (0x05)
        {
            Package (0x02)
            {
                0xE4, 
                0x0140
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                Zero, 
                Zero
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }
        })
        Name (SUCC, One)
        Name (NVLD, 0x02)
        Name (CRIT, 0x04)
        Name (NCRT, 0x06)
        Method (GSCI, 0, Serialized)
        {
            Method (GBDA, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0659
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x00300482
                    If ((S0ID == One))
                    {
                        PARM |= 0x0100
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PC00.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* External reference */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LIDS << 0x10)
                    PARM += 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    PARM = GIVD /* \_SB_.PC00.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (IDMS << 0x11)
                    PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                        0x15) /* \_SB_.PC00.GFX0.PARM */
                    GESF = One
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* External reference */
                    GESF = KSV1 /* External reference */
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \_SB_.PC00.GFX0.CRIT */
            }

            Method (SBCB, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = Zero
                    PARM = 0x000F87DD
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    If (((S0ID == One) && (OSYS < 0x07DF)))
                    {
                        If (((PARM & 0xFF) == One))
                        {
                            \GUAM (One)
                        }

                        If (((PARM & 0xFF) == Zero))
                        {
                            \GUAM (Zero)
                        }
                    }

                    If ((PARM == Zero))
                    {
                        Local0 = CLID /* \_SB_.PC00.GFX0.CLID */
                        If ((0x80000000 & Local0))
                        {
                            CLID &= 0x0F
                            GLID (CLID)
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    IPSC = (PARM & 0xFF)
                    If (((PARM >> 0x08) & 0xFF))
                    {
                        IPAT = ((PARM >> 0x08) & 0xFF)
                        IPAT--
                    }

                    IBIA = ((PARM >> 0x14) & 0x07)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    IF1E = ((PARM >> One) & One)
                    If ((PARM & 0x0001E000))
                    {
                        IDMS = ((PARM >> 0x0D) & 0x0F)
                    }
                    Else
                    {
                        IDMS = ((PARM >> 0x11) & 0x0F)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LIDS << 0x08)
                    PARM += 0x0100
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \_SB_.PC00.GFX0.CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
            }

            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            CPSC = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                Notify (\_SB.PC00.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PC00.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLC = (One << Arg0)
                ASLE = One
                Local2 = Zero
                While (((Local2 < 0xFA) && (ASLC != Zero)))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        ElseIf ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            PFIT = One
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        ElseIf ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            PFIT = 0x06
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        ElseIf ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            PFIT = 0x08
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            ElseIf ((Arg0 == One))
            {
                If ((Arg1 & 0x80000000))
                {
                    Arg1 &= 0x7FFFFFFF
                    BCLP = Arg1
                }
                Else
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                }

                BCLP |= 0x80000000
                ASLC = 0x02
            }
            ElseIf ((Arg0 == Zero))
            {
                ALSI = Arg1
                ASLC = One
            }
            Else
            {
                Return (One)
            }

            ASLE = One
            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            If (CondRefOf (\_SB.PC00.HGME))
                            {
                                \_SB.PC00.HGME (One)
                            }

                            If (((PCON & 0x0180) == 0x0180))
                            {
                                If (((PDIW && One) && CondRefOf (PDIW)))
                                {
                                    Return (0x0011E7FF)
                                }
                            }

                            Return (0x0001E7FF)
                        }
                    }
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = " Adapter Power State Notification "
                            If (((S0ID == One) && (OSYS < 0x07DF)))
                            {
                                If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                {
                                    \GUAM (One)
                                }

                                Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                If ((Local0 == Zero))
                                {
                                    \GUAM (Zero)
                                }
                            }

                            If ((DerefOf (Arg3 [Zero]) == Zero))
                            {
                                Local0 = CLID /* \_SB_.PC00.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Display Power State Notification "
                            Return (One)
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "BIOS POST Completion Notification "
                            Return (One)
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Pre-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Post-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetDisplayDeviceNotification"
                            Return (One)
                        }
                    }
                    Case (0x07)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetBootDevicePreference "
                            IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetPanelPreference "
                            IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                            If ((DerefOf (Arg3 [One]) & 0xFF))
                            {
                                IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                            Return (One)
                        }
                    }
                    Case (0x09)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "FullScreenDOS "
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "APM Complete "
                            Local0 = (LIDS << 0x08)
                            Local0 += 0x0100
                            Return (Local0)
                        }
                    }
                    Case (0x0D)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetBootDisplayPreference "
                            Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                Arg3 [0x02]) << 0x10))
                            Local0 &= 0xEFFF0000
                            Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                            Local0 |= IBTT
                            Return (Local0)
                        }
                    }
                    Case (0x0E)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetPanelDetails "
                            Local0 = IPSC /* External reference */
                            Local0 |= (IPAT << 0x08)
                            Local0 += 0x0100
                            Local0 |= (LIDS << 0x10)
                            Local0 += 0x00010000
                            Local0 |= (IBIA << 0x14)
                            Return (Local0)
                        }
                    }
                    Case (0x0F)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetInternalGraphics "
                            Local0 = GIVD /* \_SB_.PC00.GFX0.GIVD */
                            Local0 ^= One
                            Local0 |= (GMFN << One)
                            Local0 |= 0x1800
                            Local0 |= (IDMS << 0x11)
                            Local0 |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15)
                            Return (Local0)
                        }
                    }
                    Case (0x10)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetAKSV "
                            Name (KSVP, Package (0x02)
                            {
                                0x80000000, 
                                0x8000
                            })
                            KSVP [Zero] = KSV0 /* External reference */
                            KSVP [One] = KSV1 /* External reference */
                            Return (KSVP) /* \_SB_.PC00.GFX0._DSM.KSVP */
                        }
                    }
                    Case (0x14)
                    {
                        Name (OPTS, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (OPTS, Zero, CMST)
                        CreateByteField (OPTS, One, RTB1)
                        Name (GEDB, Buffer (0x0A)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00                                       // ..
                        })
                        CreateDWordField (GEDB, Zero, GEDF)
                        CreateByteField (GEDB, 0x04, GESF)
                        Sleep (PDI0)
                        OPTS = \_SB.PC00.IMMC (0x08, PDI1, Zero, Zero, Zero)
                        GESF = CMST /* \_SB_.PC00.GFX0._DSM.CMST */
                        GEDF = RTB1 /* \_SB_.PC00.GFX0._DSM.RTB1 */
                        Return (GEDB) /* \_SB_.PC00.GFX0._DSM.GEDB */
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "CpuRef", "CpuSsdt", 0x00003000)
{
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x1B)
        {
            "CPU0IST ", 
            0x23A89198, 
            0x00000605, 
            "APIST   ", 
            0x23A26018, 
            0x000008E7, 
            "CPU0CST ", 
            0x23A26A98, 
            0x00000386, 
            "APCST   ", 
            0x23A25698, 
            0x0000048A, 
            "CPU0HWP ", 
            0x23A89C18, 
            0x00000316, 
            "APHWP   ", 
            0x23A24018, 
            0x0000048A, 
            "HWPLVT  ", 
            0x80000000, 
            0x80000000, 
            "CPU0PSD ", 
            0x23A89818, 
            0x000001C6, 
            "APPSD   ", 
            0x23A25018, 
            0x000004D4
        })
        Name (\PF00, 0x80000000)
        Name (\PF01, 0x80000000)
        Name (\PF02, 0x80000000)
        Name (\PF03, 0x80000000)
        Name (\PF04, 0x80000000)
        Name (\PF05, 0x80000000)
        Name (\PF06, 0x80000000)
        Name (\PF07, 0x80000000)
        Name (\PF08, 0x80000000)
        Name (\PF09, 0x80000000)
        Name (\PF10, 0x80000000)
        Name (\PF11, 0x80000000)
        Name (\PF12, 0x80000000)
        Name (\PF13, 0x80000000)
        Name (\PF14, 0x80000000)
        Name (\PF15, 0x80000000)
        Name (\PF16, 0x80000000)
        Name (\PF17, 0x80000000)
        Name (\PF18, 0x80000000)
        Name (\PF19, 0x80000000)
        Name (\PF20, 0x80000000)
        Name (\PF21, 0x80000000)
        Name (\PF22, 0x80000000)
        Name (\PF23, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_SB)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x23B32000, 0x0065)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL11,   16, 
            PL12,   16, 
            PL20,   16, 
            PL21,   16, 
            PL22,   16, 
            PLW0,   8, 
            PLW1,   8, 
            PLW2,   8, 
            CTC0,   8, 
            CTC1,   8, 
            CTC2,   8, 
            TAR0,   8, 
            TAR1,   8, 
            TAR2,   8, 
            PPC0,   8, 
            PPC1,   8, 
            PPC2,   8, 
            Offset (0x29), 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            Offset (0x2E), 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            DTSE,   8, 
            DTSF,   8, 
            PDTS,   8, 
            PKGA,   8, 
            DSIA,   16, 
            DSIL,   8, 
            DSAE,   8, 
            EPCS,   8, 
            EMNA,   64, 
            ELNG,   64, 
            HWPV,   8, 
            HWPI,   8, 
            DTSI,   8, 
            LMPS,   8, 
            ITBM,   8, 
            ITBD,   8, 
            ITBI,   8, 
            ITBS,   8, 
            OBIN,   8, 
            TXTE,   8, 
            HWPE,   8, 
            HTRO,   8, 
            CORE,   32, 
            MDID,   8, 
            SCNT,   8, 
            BCNT,   8
        }

        OperationRegion (BGNV, SystemMemory, 0xFFFF0000, 0xAA55)
        Field (BGNV, AnyAcc, Lock, Preserve)
        {
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   16, 
            BGIL,   16
        }

        OperationRegion (IO_D, SystemIO, \_SB.DSIA, \_SB.DSIL)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        If (CondRefOf (\_SB.BGIL))
        {
            If ((\_SB.BGIL != Zero))
            {
                OperationRegion (IO_P, SystemIO, \_SB.BGIA, \_SB.BGIL)
                Field (IO_P, ByteAcc, NoLock, Preserve)
                {
                    TRPF,   8
                }
            }
        }
    }

    Scope (\_SB.PR00)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Name (HW0, Zero)
        Name (HW2, Zero)
        Name (HP0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Local3 = Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            Concatenate (Local3, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Local0 = ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */
            CreateDWordField (Local0, Zero, EID0)
            CreateDWordField (Local0, 0x04, EID1)
            CreateDWordField (Local0, 0x08, EID2)
            CreateDWordField (Local0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PF00 = ((PF00 & 0x7FFFFFFF) | CAP0) /* \_SB_.PR00.GCAP.CAP0 */
            If ((CFGD & 0x72))
            {
                If ((((CFGD & 0x0200) && (PF00 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_SB_.PR00.HC0_ */
                }
            }

            If (((PF00 & 0x09) == 0x09))
            {
                If (((CFGD & One) && !(SDTL & 0x08)))
                {
                    SDTL |= 0x08
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_SB_.PR00.HI0_ */
                }
            }

            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0100)))
            {
                SDTL |= 0x0100
                OperationRegion (PSD0, SystemMemory, DerefOf (SSDT [0x16]), DerefOf (SSDT [0x17]))
                Load (PSD0, HP0) /* \_SB_.PR00.HP0_ */
            }

            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x40)))
                {
                    If ((\_SB.OSCP & 0x40))
                    {
                        SDTL |= 0x40
                        OperationRegion (HWP0, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (HWP0, HW0) /* \_SB_.PR00.HW0_ */
                    }

                    If ((\_SB.OSCP & 0x20))
                    {
                        If (!(\_SB.OSCP & 0x40))
                        {
                            HWPV = Zero
                        }
                    }

                    If ((\_SB.OSCP & 0x40))
                    {
                        HWPV = 0x02
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PR01)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Name (HP1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x0BFF
                Return (Zero)
            }

            PF01 = ((PF01 & 0x7FFFFFFF) | CP01) /* \_SB_.PR01.GCAP.CP01 */
            If (((PF01 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                HWPT ()
            }

            If ((((PF01 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                APPS ()
            }

            If ((PF01 & 0x18))
            {
                APCT ()
            }

            PF00 = PF01 /* \PF01 */
            Return (Zero)
        }

        Method (APCT, 0, Serialized)
        {
            If (((CFGD & 0x72) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_SB_.PR01.HC1_ */
            }
        }

        Method (APPT, 0, Serialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_SB_.PR01.HI1_ */
            }
        }

        Method (APPS, 0, Serialized)
        {
            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0200)))
            {
                SDTL |= 0x0200
                OperationRegion (PSD1, SystemMemory, DerefOf (SSDT [0x19]), DerefOf (SSDT [0x1A]))
                Load (PSD1, HP1) /* \_SB_.PR01.HP1_ */
            }
        }

        Method (HWPT, 0, Serialized)
        {
            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (HWP1, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (HWP1, HW1) /* \_SB_.PR01.HW1_ */
                }
            }
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST02)
            CreateDWordField (Arg0, 0x04, CP02)
            If (((ST02 == 0x06) || (ST02 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST02 & One))
            {
                CP02 &= 0x0BFF
                Return (Zero)
            }

            PF02 = ((PF02 & 0x7FFFFFFF) | CP02) /* \_SB_.PR02.GCAP.CP02 */
            If (((PF02 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF02 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF02 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF02 /* \PF02 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST03)
            CreateDWordField (Arg0, 0x04, CP03)
            If (((ST03 == 0x06) || (ST03 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST03 & One))
            {
                CP03 &= 0x0BFF
                Return (Zero)
            }

            PF03 = ((PF03 & 0x7FFFFFFF) | CP03) /* \_SB_.PR03.GCAP.CP03 */
            If (((PF03 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF03 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF03 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF03 /* \PF03 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST04)
            CreateDWordField (Arg0, 0x04, CP04)
            If (((ST04 == 0x06) || (ST04 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST04 & One))
            {
                CP04 &= 0x0BFF
                Return (Zero)
            }

            PF04 = ((PF04 & 0x7FFFFFFF) | CP04) /* \_SB_.PR04.GCAP.CP04 */
            If (((PF04 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF04 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF04 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF04 /* \PF04 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST05)
            CreateDWordField (Arg0, 0x04, CP05)
            If (((ST05 == 0x06) || (ST05 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST05 & One))
            {
                CP05 &= 0x0BFF
                Return (Zero)
            }

            PF05 = ((PF05 & 0x7FFFFFFF) | CP05) /* \_SB_.PR05.GCAP.CP05 */
            If (((PF05 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF05 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF05 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF05 /* \PF05 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST06)
            CreateDWordField (Arg0, 0x04, CP06)
            If (((ST06 == 0x06) || (ST06 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST06 & One))
            {
                CP06 &= 0x0BFF
                Return (Zero)
            }

            PF06 = ((PF06 & 0x7FFFFFFF) | CP06) /* \_SB_.PR06.GCAP.CP06 */
            If (((PF06 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF06 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF06 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF06 /* \PF06 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST07)
            CreateDWordField (Arg0, 0x04, CP07)
            If (((ST07 == 0x06) || (ST07 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST07 & One))
            {
                CP07 &= 0x0BFF
                Return (Zero)
            }

            PF07 = ((PF07 & 0x7FFFFFFF) | CP07) /* \_SB_.PR07.GCAP.CP07 */
            If (((PF07 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF07 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF07 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF07 /* \PF07 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST08)
            CreateDWordField (Arg0, 0x04, CP08)
            If (((ST08 == 0x06) || (ST08 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST08 & One))
            {
                CP08 &= 0x0BFF
                Return (Zero)
            }

            PF08 = ((PF08 & 0x7FFFFFFF) | CP08) /* \_SB_.PR08.GCAP.CP08 */
            If (((PF08 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF08 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF08 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF08 /* \PF08 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST09)
            CreateDWordField (Arg0, 0x04, CP09)
            If (((ST09 == 0x06) || (ST09 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST09 & One))
            {
                CP09 &= 0x0BFF
                Return (Zero)
            }

            PF09 = ((PF09 & 0x7FFFFFFF) | CP09) /* \_SB_.PR09.GCAP.CP09 */
            If (((PF09 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF09 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF09 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF09 /* \PF09 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST10)
            CreateDWordField (Arg0, 0x04, CP10)
            If (((ST10 == 0x06) || (ST10 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST10 & One))
            {
                CP10 = (ST10 & 0x0BFF)
                Return (Zero)
            }

            PF10 = ((PF10 & 0x7FFFFFFF) | CP10) /* \_SB_.PR10.GCAP.CP10 */
            If (((PF10 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF10 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF10 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF10 /* \PF10 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST11)
            CreateDWordField (Arg0, 0x04, CP11)
            If (((ST11 == 0x06) || (ST11 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST11 & One))
            {
                CP11 = (ST11 & 0x0BFF)
                Return (Zero)
            }

            PF11 = ((PF11 & 0x7FFFFFFF) | CP11) /* \_SB_.PR11.GCAP.CP11 */
            If (((PF11 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF11 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF11 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF11 /* \PF11 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST12)
            CreateDWordField (Arg0, 0x04, CP12)
            If (((ST12 == 0x06) || (ST12 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST12 & One))
            {
                CP12 = (ST12 & 0x0BFF)
                Return (Zero)
            }

            PF12 = ((PF12 & 0x7FFFFFFF) | CP12) /* \_SB_.PR12.GCAP.CP12 */
            If (((PF12 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF12 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF12 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF12 /* \PF12 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST13)
            CreateDWordField (Arg0, 0x04, CP13)
            If (((ST13 == 0x06) || (ST13 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST13 & One))
            {
                CP13 = (ST13 & 0x0BFF)
                Return (Zero)
            }

            PF13 = ((PF13 & 0x7FFFFFFF) | CP13) /* \_SB_.PR13.GCAP.CP13 */
            If (((PF13 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF13 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF13 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF13 /* \PF13 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST14)
            CreateDWordField (Arg0, 0x04, CP14)
            If (((ST14 == 0x06) || (ST14 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST14 & One))
            {
                CP14 = (ST14 & 0x0BFF)
                Return (Zero)
            }

            PF14 = ((PF14 & 0x7FFFFFFF) | CP14) /* \_SB_.PR14.GCAP.CP14 */
            If (((PF14 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF14 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF14 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF14 /* \PF14 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST15)
            CreateDWordField (Arg0, 0x04, CP15)
            If (((ST15 == 0x06) || (ST15 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST15 & One))
            {
                CP15 = (ST15 & 0x0BFF)
                Return (Zero)
            }

            PF15 = ((PF15 & 0x7FFFFFFF) | CP15) /* \_SB_.PR15.GCAP.CP15 */
            If (((PF15 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF15 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF15 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF15 /* \PF15 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST16)
            CreateDWordField (Arg0, 0x04, CP16)
            If (((ST16 == 0x06) || (ST16 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST16 & One))
            {
                CP16 = (ST16 & 0x0BFF)
                Return (Zero)
            }

            PF16 = ((PF15 & 0x7FFFFFFF) | CP16) /* \_SB_.PR16.GCAP.CP16 */
            If (((PF16 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF16 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF16 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF16 /* \PF16 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST17)
            CreateDWordField (Arg0, 0x04, CP17)
            If (((ST17 == 0x06) || (ST17 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST17 & One))
            {
                CP17 = (ST17 & 0x0BFF)
                Return (Zero)
            }

            PF17 = ((PF17 & 0x7FFFFFFF) | CP17) /* \_SB_.PR17.GCAP.CP17 */
            If (((PF17 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF17 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF17 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF17 /* \PF17 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST18)
            CreateDWordField (Arg0, 0x04, CP18)
            If (((ST18 == 0x06) || (ST18 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST18 & One))
            {
                CP18 = (ST18 & 0x0BFF)
                Return (Zero)
            }

            PF18 = ((PF18 & 0x7FFFFFFF) | CP18) /* \_SB_.PR18.GCAP.CP18 */
            If (((PF18 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF18 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF18 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF18 /* \PF18 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST19)
            CreateDWordField (Arg0, 0x04, CP19)
            If (((ST19 == 0x06) || (ST19 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST19 & One))
            {
                CP19 = (ST19 & 0x0BFF)
                Return (Zero)
            }

            PF19 = ((PF19 & 0x7FFFFFFF) | CP19) /* \_SB_.PR19.GCAP.CP19 */
            If (((PF19 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF19 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF19 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF19 /* \PF19 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST20)
            CreateDWordField (Arg0, 0x04, CP20)
            If (((ST20 == 0x06) || (ST20 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST20 & One))
            {
                CP20 = (ST20 & 0x0BFF)
                Return (Zero)
            }

            PF20 = ((PF20 & 0x7FFFFFFF) | CP20) /* \_SB_.PR20.GCAP.CP20 */
            If (((PF20 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF20 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF20 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF20 /* \PF20 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST21)
            CreateDWordField (Arg0, 0x04, CP21)
            If (((ST21 == 0x06) || (ST21 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST21 & One))
            {
                CP21 = (ST21 & 0x0BFF)
                Return (Zero)
            }

            PF21 = ((PF21 & 0x7FFFFFFF) | CP21) /* \_SB_.PR21.GCAP.CP21 */
            If (((PF21 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x21))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF21 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF21 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF21 /* \PF21 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST22)
            CreateDWordField (Arg0, 0x04, CP22)
            If (((ST22 == 0x06) || (ST22 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST22 & One))
            {
                CP22 = (ST22 & 0x0BFF)
                Return (Zero)
            }

            PF22 = ((PF22 & 0x7FFFFFFF) | CP22) /* \_SB_.PR22.GCAP.CP22 */
            If (((PF22 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF22 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF22 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF22 /* \PF22 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST23)
            CreateDWordField (Arg0, 0x04, CP23)
            If (((ST23 == 0x06) || (ST23 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST23 & One))
            {
                CP23 = (ST23 & 0x0BFF)
                Return (Zero)
            }

            PF23 = ((PF23 & 0x7FFFFFFF) | CP23) /* \_SB_.PR23.GCAP.CP23 */
            If (((PF23 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF23 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF23 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF23 /* \PF23 */
            Return (Zero)
        }
    }

    Scope (\_SB)
    {
        If ((TXTE == One))
        {
            Device (ACM)
            {
                Name (_HID, "INTC1025")  // _HID: Hardware ID
                Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
                {
                    Local0 = (CPID & 0xFFFFFFF0)
                    If (((Local0 == 0x000806C0) || (Local0 == 0x000806D0)))
                    {
                        Return ("INT_TGL_SINIT")
                    }

                    If (((Local0 == 0x000A0680) || (Local0 == 0x000A0670)))
                    {
                        Return ("INT_RKL_SINIT")
                    }

                    Return ("INT_UNK_SINIT")
                }
            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "HP", "HPINTELG", 0x00001000)
{
    External (_GPE.G400, MethodObj)    // 1 Arguments
    External (_GPE.G413, MethodObj)    // 0 Arguments
    External (_SB_.G408, EventObj)
    External (_SB_.G42A, MethodObj)    // 0 Arguments
    External (_SB_.G45C, MethodObj)    // 1 Arguments
    External (_SB_.G45D, MethodObj)    // 1 Arguments
    External (_SB_.G463, MethodObj)    // 0 Arguments
    External (_SB_.G46D, MethodObj)    // 0 Arguments
    External (_SB_.G493, FieldUnitObj)
    External (_SB_.G494, FieldUnitObj)
    External (_SB_.G495, FieldUnitObj)
    External (_SB_.HDDC, MethodObj)    // 1 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.NPCF.STAM, IntObj)
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.G40E, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G469, MethodObj)    // 0 Arguments
    External (_SB_.PC00.G47F, MethodObj)    // 1 Arguments
    External (_SB_.PC00.G489, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.AINT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.GFX0.BCLP, UnknownObj)
    External (_SB_.PC00.GFX0.CDDS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.CLID, UnknownObj)
    External (_SB_.PC00.GFX0.CPDL, UnknownObj)
    External (_SB_.PC00.GFX0.CPL2, UnknownObj)
    External (_SB_.PC00.GFX0.CPL3, UnknownObj)
    External (_SB_.PC00.GFX0.CPL4, UnknownObj)
    External (_SB_.PC00.GFX0.CPL5, UnknownObj)
    External (_SB_.PC00.GFX0.CPL6, UnknownObj)
    External (_SB_.PC00.GFX0.CPL7, UnknownObj)
    External (_SB_.PC00.GFX0.CPL8, UnknownObj)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)
    External (_SB_.PC00.GFX0.G406, MethodObj)    // 2 Arguments
    External (_SB_.PC00.GFX0.G425, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.G43F, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.GDCK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.GHDS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.GIVD, UnknownObj)
    External (_SB_.PC00.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.NADL, UnknownObj)
    External (_SB_.PC00.GFX0.NDL2, UnknownObj)
    External (_SB_.PC00.GFX0.NDL3, UnknownObj)
    External (_SB_.PC00.GFX0.NDL4, UnknownObj)
    External (_SB_.PC00.GFX0.NDL5, UnknownObj)
    External (_SB_.PC00.GFX0.NDL6, UnknownObj)
    External (_SB_.PC00.GFX0.NDL7, UnknownObj)
    External (_SB_.PC00.GFX0.NDL8, UnknownObj)
    External (_SB_.PC00.GFX0.TCHE, UnknownObj)
    External (_SB_.PC00.HGME, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC0_.BOTP, FieldUnitObj)
    External (G1A7, FieldUnitObj)
    External (G1A8, FieldUnitObj)
    External (G1A9, FieldUnitObj)
    External (G1AB, FieldUnitObj)
    External (G1AD, FieldUnitObj)
    External (G1AF, FieldUnitObj)
    External (G1B2, FieldUnitObj)
    External (G1C9, FieldUnitObj)
    External (G24B, FieldUnitObj)
    External (G24C, FieldUnitObj)
    External (G286, FieldUnitObj)
    External (G287, FieldUnitObj)
    External (G288, FieldUnitObj)
    External (G48E, IntObj)
    External (GTOS, MethodObj)    // 0 Arguments
    External (NADL, IntObj)
    External (NDL2, IntObj)
    External (NDL3, IntObj)
    External (NDL4, IntObj)
    External (NDL5, IntObj)
    External (NDL6, IntObj)
    External (NDL7, IntObj)
    External (NDL8, IntObj)

    Name (G468, Zero)
    Scope (\_SB.PC00)
    {
        Method (G466, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                G468 = \_SB.LID._LID ()
            }

            If (CondRefOf (\_SB.G45C))
            {
                \_SB.G45C (Arg0)
            }

            If (CondRefOf (\_SB.G463))
            {
                \_SB.G463 ()
            }
        }

        Method (G467, 1, Serialized)
        {
            If (CondRefOf (\G48E))
            {
                If (((\G48E & 0x80) == 0x80))
                {
                    \G48E &= 0xFE
                }
            }

            If ((Arg0 == 0x03))
            {
                Local0 = \_SB.LID._LID ()
                If ((Local0 ^ G468))
                {
                    \_SB.PC00.GFX0.GLID (Local0)
                }
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PC00.GFX0.GLID (\_SB.LID._LID ())
                If (CondRefOf (\_SB.PC00.HGME))
                {
                    G1C9 = 0x0F
                    \_SB.PC00.HGME (0x04)
                }

                If (CondRefOf (\_SB.PC00.GFX0.G425))
                {
                    \_SB.PC00.GFX0.G425 ()
                }
            }

            If (CondRefOf (\_SB.G45D))
            {
                \_SB.G45D (Arg0)
            }

            If (CondRefOf (\_SB.PC00.G489))
            {
                \_SB.PC00.G489 (One)
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If (CondRefOf (\_SB.PC00.G40E))
                {
                    \_SB.PC00.G40E (One)
                }

                If (CondRefOf (\_SB.PC00.G469))
                {
                    \_SB.PC00.G469 ()
                }

                If (CondRefOf (\_SB.NPCF.STAM))
                {
                    \_SB.NPCF.STAM = Zero
                }
            }
        }

        Method (G472, 0, NotSerialized)
        {
            \_GPE.G400 (Zero)
            If (CondRefOf (\_SB.PC00.G47F))
            {
                \_SB.PC00.G47F (Zero)
            }
        }

        Method (G473, 0, NotSerialized)
        {
            Local4 = \_GPE.G413 ()
        }

        Method (G474, 0, NotSerialized)
        {
            If ((\_SB.PC00.LPCB.EC0.BOTP == One))
            {
                G24B = One
                If (CondRefOf (\_SB.PC00.G47F))
                {
                    \_SB.PC00.G47F (One)
                }
            }
            Else
            {
                G24B = Zero
                If (CondRefOf (\_SB.PC00.G47F))
                {
                    \_SB.PC00.G47F (0x02)
                }
            }
        }

        Method (G475, 1, Serialized)
        {
            If ((Arg0 == 0x08))
            {
                G24C = One
                If (CondRefOf (\_SB.PC00.G47F))
                {
                    \_SB.PC00.G47F (0x03)
                }
            }
            ElseIf ((Arg0 == 0x09))
            {
                G24C = Zero
                If (CondRefOf (\_SB.PC00.G47F))
                {
                    \_SB.PC00.G47F (0x04)
                }
            }
        }
    }

    Scope (\_SB.PC00.GFX0)
    {
        Name (INIM, Zero)
        Name (G418, Package (0x09)
        {
            0x0400, 
            0x0100, 
            0x0200, 
            0x0300, 
            0x0301, 
            0x0302, 
            0x0303, 
            0x0304, 
            0x0305
        })
        Name (DSPR, Buffer (0x09)
        {
            /* 0000 */  0x00, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01,  // ........
            /* 0008 */  0x02                                             // .
        })
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            INIM = One
            G425 ()
            G1A9 = Zero
            G1AB = Zero
            G1AD = Zero
        }

        Method (HDOS, 1, NotSerialized)
        {
            Local0 = (G1A8 & 0xF8)
            Local1 = (G1A8 & 0x87)
            G1A8 = (Local0 | Arg0)
            If (CondRefOf (^G406))
            {
                ^G406 (Arg0, Local1)
            }
        }

        Method (HDOD, 0, NotSerialized)
        {
            Local1 = One
            If ((TCHE & 0x02))
            {
                Local1 = 0x03
            }

            G1A7 |= Local1
        }

        Method (G420, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((CPDL == Local0))
            {
                Return (One)
            }

            If ((CPL2 == Local0))
            {
                Return (One)
            }

            If ((CPL3 == Local0))
            {
                Return (One)
            }

            If ((CPL4 == Local0))
            {
                Return (One)
            }

            If ((CPL5 == Local0))
            {
                Return (One)
            }

            If ((CPL6 == Local0))
            {
                Return (One)
            }

            If ((CPL7 == Local0))
            {
                Return (One)
            }

            If ((CPL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (G424, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Local1 = NADL /* External reference */
                NADL = Arg1
            }

            If ((Arg0 == One))
            {
                Local1 = NDL2 /* External reference */
                NDL2 = Arg1
            }

            If ((Arg0 == 0x02))
            {
                Local1 = NDL3 /* External reference */
                NDL3 = Arg1
            }

            If ((Arg0 == 0x03))
            {
                Local1 = NDL4 /* External reference */
                NDL4 = Arg1
            }

            If ((Arg0 == 0x04))
            {
                Local1 = NDL5 /* External reference */
                NDL5 = Arg1
            }

            If ((Arg0 == 0x05))
            {
                Local1 = NDL6 /* External reference */
                NDL6 = Arg1
            }

            If ((Arg0 == 0x06))
            {
                Local1 = NDL7 /* External reference */
                NDL7 = Arg1
            }

            If ((Arg0 == 0x07))
            {
                Local1 = NDL8 /* External reference */
                NDL8 = Arg1
            }

            Return (Local1)
        }

        Method (G423, 0, Serialized)
        {
            Local1 = Zero
            While ((Local1 < SizeOf (G418)))
            {
                Local0 = (One << Local1)
                Local2 = DerefOf (G418 [Local1])
                If (G420 (Local2))
                {
                    G1AB |= Local0
                }
                Else
                {
                    G1AB &= ~Local0
                }

                If ((CDDS (Local2) == 0x1F))
                {
                    G1A9 |= Local0
                }
                Else
                {
                    G1A9 &= ~Local0
                }

                Local1++
            }
        }

        Method (G422, 0, Serialized)
        {
            Local1 = G1AD /* External reference */
            Local0 = Zero
            Local2 = Zero
            While (((Local0 < SizeOf (DSPR)) && Local1))
            {
                Local3 = DerefOf (DSPR [Local0])
                Local4 = (One << Local3)
                If ((Local1 & Local4))
                {
                    Local5 = DerefOf (G418 [Local3])
                    G424 (Local2, Local5)
                    Local2++
                    Local1 &= ~Local4
                }

                If ((Local2 >= 0x02))
                {
                    Break
                }

                Local0++
            }

            G1AD ^= Local1
            Local1 = One
            While (((Local2 < 0x08) && Local1))
            {
                Local1 = G424 (Local2, Zero)
                Local2++
            }
        }

        Method (G42C, 1, Serialized)
        {
            If (Arg0){}
            G423 ()
            If ((G1A9 == One))
            {
                G1AD |= One
            }
            ElseIf ((G1A9 & One))
            {
                G1AD &= 0xFFFFFFFFFFFFFFFE
            }
            Else
            {
                G1AD = One
            }

            G422 ()
            Signal (\_SB.G408)
            GHDS (Zero)
            Return (One)
        }

        Method (G425, 0, NotSerialized)
        {
            If ((\_SB.PC00.GFX0.GIVD == Zero))
            {
                Local0 = \_SB.G46D ()
                \_SB.PC00.GFX0.GDCK (Local0)
            }

            Return (Zero)
        }

        Method (G41A, 1, Serialized)
        {
            If (Arg0)
            {
                G423 ()
            }
            Else
            {
                Local0 = Wait (\_SB.G408, 0x0500)
                If ((Local0 != Zero)){}
            }
        }

        Method (G41C, 0, Serialized)
        {
            G422 ()
            GHDS (Zero)
        }

        Method (G41E, 0, Serialized)
        {
            If (((G1A7 & 0x02) == Zero))
            {
                If ((TCHE & 0x02))
                {
                    G1A7 |= 0x02
                }
            }

            Local3 = (G1A7 & 0x02)
            If (Local3)
            {
                Local1 = \_SB.G42A ()
                Local1 |= 0x80000000
                AINT (One, Local1)
            }

            Return (Local3)
        }

        Scope (\_GPE)
        {
            Name (G40F, 0xFF)
            Method (G410, 1, NotSerialized)
            {
                If ((\_SB.PC00.GFX0.GIVD == Zero))
                {
                    If ((Arg0 || (G1AB != G40F)))
                    {
                        G40F = G1AB /* External reference */
                        If ((\GTOS () >= 0x04))
                        {
                            Notify (\_SB.PC00, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (\_SB.PC00.GFX0, Zero) // Bus Check
                        }

                        Sleep (0x02EE)
                    }
                }
            }

            Method (G40B, 3, Serialized)
            {
                If ((G1B2 != Zero))
                {
                    Return (One)
                }

                If (\_SB.PC00.GFX0.GIVD)
                {
                    Return (One)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (One)
                    {
                        If ((Arg0 & 0x80))
                        {
                            Notify (\_SB.PC00.GFX0.DD1F, Arg0)
                        }
                        ElseIf (((G1A8 & 0x44) == Zero))
                        {
                            \_SB.PC00.GFX0.G41E ()
                        }
                    }
                    Case (0x03)
                    {
                        \_SB.PC00.GFX0.CLID = \_SB.LID._LID ()
                        If (((\GTOS () < 0x06) || ((G1A8 & 0x03) == Zero)))
                        {
                            If ((G1A7 & One))
                            {
                                If (\_SB.PC00.GFX0.GLID (\_SB.LID._LID ()))
                                {
                                    \_SB.PC00.GFX0.CLID |= 0x80000000 /* External reference */
                                }
                            }
                        }
                    }
                    Case (0x05)
                    {
                        If (((Arg0 == One) && (Arg1 == Zero))){}
                    }
                    Case (0x06)
                    {
                        If ((G1A7 & One))
                        {
                            \_SB.PC00.GFX0.G41C ()
                        }
                        Else
                        {
                            \_GPE.G410 (Zero)
                            Notify (\_SB.PC00.GFX0, 0x80) // Status Change
                        }
                    }
                    Case (0x07)
                    {
                        \_SB.PC00.GFX0.G41A (Arg0)
                    }
                    Case (0x08)
                    {
                        If ((Arg0 == 0x04))
                        {
                            \_SB.PC00.GFX0.GLID (\_SB.LID._LID ())
                            \_SB.PC00.GFX0.G425 ()
                        }

                        If ((Arg0 >= 0x03))
                        {
                            If (((G1A8 & 0x44) == Zero))
                            {
                                Local0 = \_SB.G42A ()
                                \_SB.PC00.GFX0.BCLP = (Local0 | 0x80000000)
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (((G1A8 & 0x04) == Zero))
                        {
                            \_SB.PC00.GFX0.G41E ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.GFX0.G43F))
                        {
                            \_SB.PC00.GFX0.G43F ()
                        }
                    }

                }

                Return (Zero)
            }
        }

        Method (_REG, 2, NotSerialized)  // _REG: Region Availability
        {
            If ((\_SB.PC00.GFX0.INIM == One))
            {
                \_SB.PC00.GFX0.GLID (\_SB.LID._LID ())
                \_SB.PC00.GFX0.INIM = Zero
            }
        }

        Scope (DD1F)
        {
            If ((G287 == One))
            {
                Method (_DDC, 1, Serialized)  // _DDC: Display Data Current
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (One)
                        {
                            Return (\_SB.HDDC (One))
                        }
                        Case (0x02)
                        {
                            If ((G288 == One))
                            {
                                Return (\_SB.HDDC (0x02))
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                    }

                    Return (Zero)
                }
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 1, "HP    ", "NVTEC", 0x00000001)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ACPR, IntObj)
    External (_SB_.PC00.LPCB.EC0_.ADP_, IntObj)
    External (_SB_.PC00.LPCB.EC0_.BDC_, IntObj)
    External (_SB_.PC00.LPCB.EC0_.BDV_, IntObj)
    External (_SB_.PC00.LPCB.EC0_.CLID, IntObj)
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Method (EC10, 0, NotSerialized)
        {
            Local0 = \_SB.PC00.LPCB.EC0.CLID /* External reference */
            Return (Local0)
        }

        Method (EC11, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PC00.LPCB.EC0.ADP /* External reference */
            }

            Release (\_SB.PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC12, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PC00.LPCB.EC0.ACPR /* External reference */
            }

            Release (\_SB.PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC13, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                Local1 = \_SB.PC00.LPCB.EC0.BDV /* External reference */
                Local2 = \_SB.PC00.LPCB.EC0.BDC /* External reference */
                Local0 = (Local1 * Local2)
                Divide (Local0, 0x000F4240, Local3, Local0)
                If ((Local3 >= 0x0007A120))
                {
                    Local0++
                }
            }

            Release (\_SB.PC00.LPCB.EC0.ECMX)
            Return (Local0)
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPINNBWL", 0x00001000)
{
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.CNIP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.CNVW, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ITPT, FieldUnitObj)
    External (_SB_.PC00.RP07.PXSX, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS14, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SLPB, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (CDP1, FieldUnitObj)
    External (CDP2, FieldUnitObj)
    External (DAG1, FieldUnitObj)
    External (DAG2, FieldUnitObj)
    External (DAG3, FieldUnitObj)
    External (DAG4, FieldUnitObj)
    External (DAG5, FieldUnitObj)
    External (DAG6, FieldUnitObj)
    External (DAG7, FieldUnitObj)
    External (DAG8, FieldUnitObj)
    External (DAG9, FieldUnitObj)
    External (DAGA, FieldUnitObj)
    External (DAGB, FieldUnitObj)
    External (DAGC, FieldUnitObj)
    External (DAGD, FieldUnitObj)
    External (DAGE, FieldUnitObj)
    External (DAGF, FieldUnitObj)
    External (DAGG, FieldUnitObj)
    External (DAGH, FieldUnitObj)
    External (DAGI, FieldUnitObj)
    External (DAGJ, FieldUnitObj)
    External (DAGK, FieldUnitObj)
    External (DAGL, FieldUnitObj)
    External (DAGM, FieldUnitObj)
    External (DAGN, FieldUnitObj)
    External (DOM1, FieldUnitObj)
    External (DOM2, FieldUnitObj)
    External (DOM3, FieldUnitObj)
    External (DS21, FieldUnitObj)
    External (DS22, FieldUnitObj)
    External (DS23, FieldUnitObj)
    External (DS24, FieldUnitObj)
    External (DS25, FieldUnitObj)
    External (DS26, FieldUnitObj)
    External (DS27, FieldUnitObj)
    External (DS28, FieldUnitObj)
    External (DS29, FieldUnitObj)
    External (DS2A, FieldUnitObj)
    External (DS2B, FieldUnitObj)
    External (DS2C, FieldUnitObj)
    External (DS2D, FieldUnitObj)
    External (DS2E, FieldUnitObj)
    External (DS2F, FieldUnitObj)
    External (DS2G, FieldUnitObj)
    External (DS2H, FieldUnitObj)
    External (DS2I, FieldUnitObj)
    External (DS2J, FieldUnitObj)
    External (DS2K, FieldUnitObj)
    External (DS2L, FieldUnitObj)
    External (DS2M, FieldUnitObj)
    External (DS31, FieldUnitObj)
    External (DS32, FieldUnitObj)
    External (DS33, FieldUnitObj)
    External (DS34, FieldUnitObj)
    External (DS35, FieldUnitObj)
    External (DS36, FieldUnitObj)
    External (DS37, FieldUnitObj)
    External (DS38, FieldUnitObj)
    External (DS39, FieldUnitObj)
    External (DS3A, FieldUnitObj)
    External (DS3B, FieldUnitObj)
    External (DS3C, FieldUnitObj)
    External (DS3D, FieldUnitObj)
    External (DS3E, FieldUnitObj)
    External (DS3F, FieldUnitObj)
    External (DS3G, FieldUnitObj)
    External (DS3H, FieldUnitObj)
    External (DS3I, FieldUnitObj)
    External (DS3J, FieldUnitObj)
    External (DS3K, FieldUnitObj)
    External (DS3L, FieldUnitObj)
    External (DS3M, FieldUnitObj)
    External (DS41, FieldUnitObj)
    External (DS42, FieldUnitObj)
    External (DS43, FieldUnitObj)
    External (DS44, FieldUnitObj)
    External (DS45, FieldUnitObj)
    External (DS46, FieldUnitObj)
    External (DS47, FieldUnitObj)
    External (DS48, FieldUnitObj)
    External (DS49, FieldUnitObj)
    External (DS4A, FieldUnitObj)
    External (DS4B, FieldUnitObj)
    External (DS4C, FieldUnitObj)
    External (DS4D, FieldUnitObj)
    External (DS4E, FieldUnitObj)
    External (DS4F, FieldUnitObj)
    External (DS4G, FieldUnitObj)
    External (DS4H, FieldUnitObj)
    External (DS4I, FieldUnitObj)
    External (DS4J, FieldUnitObj)
    External (DS4K, FieldUnitObj)
    External (DS4L, FieldUnitObj)
    External (DS4M, FieldUnitObj)
    External (DWNS, FieldUnitObj)
    External (DWRS, FieldUnitObj)
    External (GA20, FieldUnitObj)
    External (GA21, FieldUnitObj)
    External (GA22, FieldUnitObj)
    External (GA23, FieldUnitObj)
    External (GA24, FieldUnitObj)
    External (GA50, FieldUnitObj)
    External (GA51, FieldUnitObj)
    External (GA52, FieldUnitObj)
    External (GA53, FieldUnitObj)
    External (GA54, FieldUnitObj)
    External (GB20, FieldUnitObj)
    External (GB21, FieldUnitObj)
    External (GB22, FieldUnitObj)
    External (GB23, FieldUnitObj)
    External (GB24, FieldUnitObj)
    External (GB50, FieldUnitObj)
    External (GB51, FieldUnitObj)
    External (GB52, FieldUnitObj)
    External (GB53, FieldUnitObj)
    External (GB54, FieldUnitObj)
    External (GC20, FieldUnitObj)
    External (GC21, FieldUnitObj)
    External (GC22, FieldUnitObj)
    External (GC23, FieldUnitObj)
    External (GC24, FieldUnitObj)
    External (GC50, FieldUnitObj)
    External (GC51, FieldUnitObj)
    External (GC52, FieldUnitObj)
    External (GC53, FieldUnitObj)
    External (GC54, FieldUnitObj)
    External (HBTR, IntObj)
    External (ITDA, FieldUnitObj)
    External (LIM1, FieldUnitObj)
    External (LIM2, FieldUnitObj)
    External (LIM3, FieldUnitObj)
    External (NF2A, FieldUnitObj)
    External (NF2B, FieldUnitObj)
    External (NF2M, FieldUnitObj)
    External (NF5A, FieldUnitObj)
    External (NF5B, FieldUnitObj)
    External (NF5M, FieldUnitObj)
    External (NF6A, FieldUnitObj)
    External (NF6B, FieldUnitObj)
    External (NF6M, FieldUnitObj)
    External (NJ2A, FieldUnitObj)
    External (NJ2B, FieldUnitObj)
    External (NJ2M, FieldUnitObj)
    External (NJ5A, FieldUnitObj)
    External (NJ5B, FieldUnitObj)
    External (NJ5M, FieldUnitObj)
    External (NJ6A, FieldUnitObj)
    External (NJ6B, FieldUnitObj)
    External (NJ6M, FieldUnitObj)
    External (NR2A, FieldUnitObj)
    External (NR2B, FieldUnitObj)
    External (NR2M, FieldUnitObj)
    External (NR5A, FieldUnitObj)
    External (NR5B, FieldUnitObj)
    External (NR5M, FieldUnitObj)
    External (NR6A, FieldUnitObj)
    External (NR6B, FieldUnitObj)
    External (NR6M, FieldUnitObj)
    External (PCHS, UnknownObj)
    External (RMRC, FieldUnitObj)
    External (RT00, FieldUnitObj)
    External (RT01, FieldUnitObj)
    External (RT02, FieldUnitObj)
    External (RT03, FieldUnitObj)
    External (RT04, FieldUnitObj)
    External (RT05, FieldUnitObj)
    External (RT06, FieldUnitObj)
    External (RT07, FieldUnitObj)
    External (RT08, FieldUnitObj)
    External (RT09, FieldUnitObj)
    External (RT10, FieldUnitObj)
    External (RT11, FieldUnitObj)
    External (RT12, FieldUnitObj)
    External (RT13, FieldUnitObj)
    External (RT14, FieldUnitObj)
    External (RT15, FieldUnitObj)
    External (RT16, FieldUnitObj)
    External (RT17, FieldUnitObj)
    External (RT18, FieldUnitObj)
    External (RT19, FieldUnitObj)
    External (RTXE, FieldUnitObj)
    External (TIM1, FieldUnitObj)
    External (TIM2, FieldUnitObj)
    External (TIM3, FieldUnitObj)
    External (TRD0, FieldUnitObj)
    External (TRD1, FieldUnitObj)
    External (TRL0, FieldUnitObj)
    External (TRL1, FieldUnitObj)
    External (WGEN, FieldUnitObj)
    External (WGR1, FieldUnitObj)
    External (WGR2, FieldUnitObj)
    External (WGR3, FieldUnitObj)
    External (WGR4, FieldUnitObj)
    External (WRD1, FieldUnitObj)
    External (WRD2, FieldUnitObj)
    External (WTX0, FieldUnitObj)
    External (WTX1, FieldUnitObj)
    External (WTX2, FieldUnitObj)
    External (WTX3, FieldUnitObj)
    External (WTX4, FieldUnitObj)
    External (WTX5, FieldUnitObj)
    External (WTX6, FieldUnitObj)
    External (WTX7, FieldUnitObj)
    External (WTX8, FieldUnitObj)
    External (WTX9, FieldUnitObj)
    External (WTXA, FieldUnitObj)
    External (WTXB, FieldUnitObj)
    External (WTXC, FieldUnitObj)
    External (WTXD, FieldUnitObj)
    External (WTXE, FieldUnitObj)
    External (WTXF, FieldUnitObj)
    External (WTXG, FieldUnitObj)
    External (WTXH, FieldUnitObj)
    External (WTXI, FieldUnitObj)
    External (WTXJ, FieldUnitObj)
    External (WTXK, FieldUnitObj)
    External (WTXL, FieldUnitObj)
    External (WTXN, FieldUnitObj)

    Scope (\_SB.PC00.RP07.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (RWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0xC82210EC)
                    {
                        Return (One)
                    }
                    Case (0xC82110EC)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = \DOM1 /* External reference */
                DerefOf (SPLX [One]) [One] = \LIM1 /* External reference */
                DerefOf (SPLX [One]) [0x02] = \TIM1 /* External reference */
                DerefOf (SPLX [0x02]) [Zero] = \DOM2 /* External reference */
                DerefOf (SPLX [0x02]) [One] = \LIM2 /* External reference */
                DerefOf (SPLX [0x02]) [0x02] = \TIM2 /* External reference */
                DerefOf (SPLX [0x03]) [Zero] = \DOM3 /* External reference */
                DerefOf (SPLX [0x03]) [One] = \LIM3 /* External reference */
                DerefOf (SPLX [0x03]) [0x02] = \TIM3 /* External reference */
                Return (SPLX) /* \_SB_.PC00.RP07.PXSX.SPLX */
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP07.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = \TRD0 /* External reference */
                DerefOf (WANX [One]) [0x02] = \TRL0 /* External reference */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = \TRD1 /* External reference */
                DerefOf (WANX [0x02]) [0x02] = \TRL1 /* External reference */
                Return (WANX) /* \_SB_.PC00.RP07.PXSX.WANX */
            }
        }

        If ((RWST () || WIST ()))
        {
            OperationRegion (RPWL, PCI_Config, Zero, 0x10)
            Field (RPWL, AnyAcc, NoLock, Preserve)
            {
                VNID,   16
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = 0x07
                DerefOf (WRDX [One]) [One] = \WRD1 /* External reference */
                DerefOf (WRDX [0x02]) [Zero] = 0x10
                DerefOf (WRDX [0x02]) [One] = \WRD2 /* External reference */
                Return (WRDX) /* \_SB_.PC00.RP07.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Name (WRDR, Package (0x17)
            {
                0x48, 
                0x50, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = \WTXN /* External reference */
                DerefOf (WRDY [One]) [0x02] = \WTX0 /* External reference */
                DerefOf (WRDY [One]) [0x03] = \WTX1 /* External reference */
                DerefOf (WRDY [One]) [0x04] = \WTX2 /* External reference */
                DerefOf (WRDY [One]) [0x05] = \WTX3 /* External reference */
                DerefOf (WRDY [One]) [0x06] = \WTX4 /* External reference */
                DerefOf (WRDY [One]) [0x07] = \WTX5 /* External reference */
                DerefOf (WRDY [One]) [0x08] = \WTX6 /* External reference */
                DerefOf (WRDY [One]) [0x09] = \WTX7 /* External reference */
                DerefOf (WRDY [One]) [0x0A] = \WTX8 /* External reference */
                DerefOf (WRDY [One]) [0x0B] = \WTX9 /* External reference */
                DerefOf (WRDY [0x02]) [One] = \WGEN /* External reference */
                DerefOf (WRDY [0x02]) [0x02] = \WGR1 /* External reference */
                DerefOf (WRDY [0x02]) [0x03] = \WGR2 /* External reference */
                DerefOf (WRDY [0x02]) [0x04] = \WGR3 /* External reference */
                DerefOf (WRDY [0x02]) [0x05] = \WGR4 /* External reference */
                WRDR [0x02] = \RTXE /* External reference */
                WRDR [0x03] = \RT00 /* External reference */
                WRDR [0x04] = \RT01 /* External reference */
                WRDR [0x05] = \RT02 /* External reference */
                WRDR [0x06] = \RT03 /* External reference */
                WRDR [0x07] = \RT04 /* External reference */
                WRDR [0x08] = \RT05 /* External reference */
                WRDR [0x09] = \RT06 /* External reference */
                WRDR [0x0A] = \RT07 /* External reference */
                WRDR [0x0B] = \RT08 /* External reference */
                WRDR [0x0C] = \RT09 /* External reference */
                WRDR [0x0D] = \RT10 /* External reference */
                WRDR [0x0E] = \RT11 /* External reference */
                WRDR [0x0F] = \RT12 /* External reference */
                WRDR [0x10] = \RT13 /* External reference */
                WRDR [0x11] = \RT14 /* External reference */
                WRDR [0x12] = \RT15 /* External reference */
                WRDR [0x13] = \RT16 /* External reference */
                WRDR [0x14] = \RT17 /* External reference */
                WRDR [0x15] = \RT18 /* External reference */
                WRDR [0x16] = \RT19 /* External reference */
                If (CondRefOf (VNID))
                {
                    Switch (ToInteger (VNID))
                    {
                        Case (0x8086)
                        {
                            Return (WRDY) /* \_SB_.PC00.RP07.PXSX.WRDY */
                        }
                        Case (0x10EC)
                        {
                            Return (WRDR) /* \_SB_.PC00.RP07.PXSX.WRDR */
                        }
                        Default
                        {
                            Return (WRDY) /* \_SB_.PC00.RP07.PXSX.WRDY */
                        }

                    }
                }
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = \DWRS /* External reference */
                DerefOf (EWRY [One]) [0x02] = \DWNS /* External reference */
                DerefOf (EWRY [One]) [0x03] = \DS21 /* External reference */
                DerefOf (EWRY [One]) [0x04] = \DS22 /* External reference */
                DerefOf (EWRY [One]) [0x05] = \DS23 /* External reference */
                DerefOf (EWRY [One]) [0x06] = \DS24 /* External reference */
                DerefOf (EWRY [One]) [0x07] = \DS25 /* External reference */
                DerefOf (EWRY [One]) [0x08] = \DS2C /* External reference */
                DerefOf (EWRY [One]) [0x09] = \DS2D /* External reference */
                DerefOf (EWRY [One]) [0x0A] = \DS2E /* External reference */
                DerefOf (EWRY [One]) [0x0B] = \DS2F /* External reference */
                DerefOf (EWRY [One]) [0x0C] = \DS2G /* External reference */
                DerefOf (EWRY [One]) [0x0D] = \DS31 /* External reference */
                DerefOf (EWRY [One]) [0x0E] = \DS32 /* External reference */
                DerefOf (EWRY [One]) [0x0F] = \DS33 /* External reference */
                DerefOf (EWRY [One]) [0x10] = \DS34 /* External reference */
                DerefOf (EWRY [One]) [0x11] = \DS35 /* External reference */
                DerefOf (EWRY [One]) [0x12] = \DS3C /* External reference */
                DerefOf (EWRY [One]) [0x13] = \DS3D /* External reference */
                DerefOf (EWRY [One]) [0x14] = \DS3E /* External reference */
                DerefOf (EWRY [One]) [0x15] = \DS3F /* External reference */
                DerefOf (EWRY [One]) [0x16] = \DS3G /* External reference */
                DerefOf (EWRY [One]) [0x17] = \DS41 /* External reference */
                DerefOf (EWRY [One]) [0x18] = \DS42 /* External reference */
                DerefOf (EWRY [One]) [0x19] = \DS43 /* External reference */
                DerefOf (EWRY [One]) [0x1A] = \DS44 /* External reference */
                DerefOf (EWRY [One]) [0x1B] = \DS45 /* External reference */
                DerefOf (EWRY [One]) [0x1C] = \DS4C /* External reference */
                DerefOf (EWRY [One]) [0x1D] = \DS4D /* External reference */
                DerefOf (EWRY [One]) [0x1E] = \DS4E /* External reference */
                DerefOf (EWRY [One]) [0x1F] = \DS4F /* External reference */
                DerefOf (EWRY [One]) [0x20] = \DS4G /* External reference */
                Return (EWRY) /* \_SB_.PC00.RP07.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = \NF2M /* External reference */
                DerefOf (WGDY [One]) [0x02] = \NF2A /* External reference */
                DerefOf (WGDY [One]) [0x03] = \NF2B /* External reference */
                DerefOf (WGDY [One]) [0x04] = \NF5M /* External reference */
                DerefOf (WGDY [One]) [0x05] = \NF5A /* External reference */
                DerefOf (WGDY [One]) [0x06] = \NF5B /* External reference */
                DerefOf (WGDY [One]) [0x07] = \NJ2M /* External reference */
                DerefOf (WGDY [One]) [0x08] = \NJ2A /* External reference */
                DerefOf (WGDY [One]) [0x09] = \NJ2B /* External reference */
                DerefOf (WGDY [One]) [0x0A] = \NJ5M /* External reference */
                DerefOf (WGDY [One]) [0x0B] = \NJ5A /* External reference */
                DerefOf (WGDY [One]) [0x0C] = \NJ5B /* External reference */
                DerefOf (WGDY [One]) [0x0D] = \NR2M /* External reference */
                DerefOf (WGDY [One]) [0x0E] = \NR2A /* External reference */
                DerefOf (WGDY [One]) [0x0F] = \NR2B /* External reference */
                DerefOf (WGDY [One]) [0x10] = \NR5M /* External reference */
                DerefOf (WGDY [One]) [0x11] = \NR5A /* External reference */
                DerefOf (WGDY [One]) [0x12] = \NR5B /* External reference */
                Return (WGDY) /* \_SB_.PC00.RP07.PXSX.WGDY */
            }

            Name (RWGY, Package (0x1E)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (RWGS, 0, Serialized)
            {
                RWGY [Zero] = \GA20 /* External reference */
                RWGY [One] = \GA21 /* External reference */
                RWGY [0x02] = \GA22 /* External reference */
                RWGY [0x03] = \GA23 /* External reference */
                RWGY [0x04] = \GA24 /* External reference */
                RWGY [0x05] = \GA50 /* External reference */
                RWGY [0x06] = \GA51 /* External reference */
                RWGY [0x07] = \GA52 /* External reference */
                RWGY [0x08] = \GA53 /* External reference */
                RWGY [0x09] = \GA54 /* External reference */
                RWGY [0x0A] = \GB20 /* External reference */
                RWGY [0x0B] = \GB21 /* External reference */
                RWGY [0x0C] = \GB22 /* External reference */
                RWGY [0x0D] = \GB23 /* External reference */
                RWGY [0x0E] = \GB24 /* External reference */
                RWGY [0x0F] = \GB50 /* External reference */
                RWGY [0x10] = \GB51 /* External reference */
                RWGY [0x11] = \GB52 /* External reference */
                RWGY [0x12] = \GB53 /* External reference */
                RWGY [0x13] = \GB54 /* External reference */
                RWGY [0x14] = \GC20 /* External reference */
                RWGY [0x15] = \GC21 /* External reference */
                RWGY [0x16] = \GC22 /* External reference */
                RWGY [0x17] = \GC23 /* External reference */
                RWGY [0x18] = \GC24 /* External reference */
                RWGY [0x19] = \GC50 /* External reference */
                RWGY [0x1A] = \GC51 /* External reference */
                RWGY [0x1B] = \GC52 /* External reference */
                RWGY [0x1C] = \GC53 /* External reference */
                RWGY [0x1D] = \GC54 /* External reference */
                Return (RWGY) /* \_SB_.PC00.RP07.PXSX.RWGY */
            }

            Name (WTAS, Package (0x02)
            {
                Zero, 
                Package (0x05)
                {
                    0x07, 
                    One, 
                    0x02, 
                    0x5553, 
                    0x4341
                }
            })
            Name (PPAY, Package (0x02)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = \DAGN /* External reference */
                DerefOf (PPAY [One]) [0x02] = \DAG1 /* External reference */
                DerefOf (PPAY [One]) [0x03] = \DAG2 /* External reference */
                DerefOf (PPAY [One]) [0x04] = \DAG3 /* External reference */
                DerefOf (PPAY [One]) [0x05] = \DAG4 /* External reference */
                DerefOf (PPAY [One]) [0x06] = \DAG5 /* External reference */
                DerefOf (PPAY [One]) [0x07] = \DAG6 /* External reference */
                DerefOf (PPAY [One]) [0x08] = \DAG7 /* External reference */
                DerefOf (PPAY [One]) [0x09] = \DAG8 /* External reference */
                DerefOf (PPAY [One]) [0x0A] = \DAG9 /* External reference */
                DerefOf (PPAY [One]) [0x0B] = \DAGA /* External reference */
                Return (PPAY) /* \_SB_.PC00.RP07.PXSX.PPAY */
            }
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x4F                                             // O
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = Zero
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = One
                    Return (Local0)
                }

                If ((Arg2 == 0x06))
                {
                    Return (Buffer (One)
                    {
                         0x0F                                             // .
                    })
                }

                Return (Zero)
            }
            ElseIf ((Arg0 == ToUUID ("d2a8c3e8-4b69-4f00-82bd-fe8607803aa7") /* Unknown UUID */))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             // .
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = Zero
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = One
                    Return (Local0)
                }

                Return (Zero)
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    If (\_SB.PC00.CNIP ())
    {
        Scope (\_SB.PC00.CNVW)
        {
            OperationRegion (RPWL, PCI_Config, Zero, 0x10)
            Field (RPWL, AnyAcc, NoLock, Preserve)
            {
                VNID,   16
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = 0x07
                DerefOf (WRDX [One]) [One] = \WRD1 /* External reference */
                DerefOf (WRDX [0x02]) [Zero] = 0x10
                DerefOf (WRDX [0x02]) [One] = \WRD2 /* External reference */
                Return (WRDX) /* \_SB_.PC00.CNVW.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Name (WRDR, Package (0x17)
            {
                0x48, 
                0x50, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = \WTXN /* External reference */
                DerefOf (WRDY [One]) [0x02] = \WTX0 /* External reference */
                DerefOf (WRDY [One]) [0x03] = \WTX1 /* External reference */
                DerefOf (WRDY [One]) [0x04] = \WTX2 /* External reference */
                DerefOf (WRDY [One]) [0x05] = \WTX3 /* External reference */
                DerefOf (WRDY [One]) [0x06] = \WTX4 /* External reference */
                DerefOf (WRDY [One]) [0x07] = \WTX5 /* External reference */
                DerefOf (WRDY [One]) [0x08] = \WTX6 /* External reference */
                DerefOf (WRDY [One]) [0x09] = \WTX7 /* External reference */
                DerefOf (WRDY [One]) [0x0A] = \WTX8 /* External reference */
                DerefOf (WRDY [One]) [0x0B] = \WTX9 /* External reference */
                DerefOf (WRDY [0x02]) [One] = \WGEN /* External reference */
                DerefOf (WRDY [0x02]) [0x02] = \WGR1 /* External reference */
                DerefOf (WRDY [0x02]) [0x03] = \WGR2 /* External reference */
                DerefOf (WRDY [0x02]) [0x04] = \WGR3 /* External reference */
                DerefOf (WRDY [0x02]) [0x05] = \WGR4 /* External reference */
                WRDR [0x02] = \RTXE /* External reference */
                WRDR [0x03] = \RT00 /* External reference */
                WRDR [0x04] = \RT01 /* External reference */
                WRDR [0x05] = \RT02 /* External reference */
                WRDR [0x06] = \RT03 /* External reference */
                WRDR [0x07] = \RT04 /* External reference */
                WRDR [0x08] = \RT05 /* External reference */
                WRDR [0x09] = \RT06 /* External reference */
                WRDR [0x0A] = \RT07 /* External reference */
                WRDR [0x0B] = \RT08 /* External reference */
                WRDR [0x0C] = \RT09 /* External reference */
                WRDR [0x0D] = \RT10 /* External reference */
                WRDR [0x0E] = \RT11 /* External reference */
                WRDR [0x0F] = \RT12 /* External reference */
                WRDR [0x10] = \RT13 /* External reference */
                WRDR [0x11] = \RT14 /* External reference */
                WRDR [0x12] = \RT15 /* External reference */
                WRDR [0x13] = \RT16 /* External reference */
                WRDR [0x14] = \RT17 /* External reference */
                WRDR [0x15] = \RT18 /* External reference */
                WRDR [0x16] = \RT19 /* External reference */
                If (CondRefOf (VNID))
                {
                    Switch (ToInteger (VNID))
                    {
                        Case (0x8086)
                        {
                            Return (WRDY) /* \_SB_.PC00.CNVW.WRDY */
                        }
                        Case (0x10EC)
                        {
                            Return (WRDR) /* \_SB_.PC00.CNVW.WRDR */
                        }
                        Default
                        {
                            Return (WRDY) /* \_SB_.PC00.CNVW.WRDY */
                        }

                    }
                }
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = \DWRS /* External reference */
                DerefOf (EWRY [One]) [0x02] = \DWNS /* External reference */
                DerefOf (EWRY [One]) [0x03] = \DS21 /* External reference */
                DerefOf (EWRY [One]) [0x04] = \DS22 /* External reference */
                DerefOf (EWRY [One]) [0x05] = \DS23 /* External reference */
                DerefOf (EWRY [One]) [0x06] = \DS24 /* External reference */
                DerefOf (EWRY [One]) [0x07] = \DS25 /* External reference */
                DerefOf (EWRY [One]) [0x08] = \DS2C /* External reference */
                DerefOf (EWRY [One]) [0x09] = \DS2D /* External reference */
                DerefOf (EWRY [One]) [0x0A] = \DS2E /* External reference */
                DerefOf (EWRY [One]) [0x0B] = \DS2F /* External reference */
                DerefOf (EWRY [One]) [0x0C] = \DS2G /* External reference */
                DerefOf (EWRY [One]) [0x0D] = \DS31 /* External reference */
                DerefOf (EWRY [One]) [0x0E] = \DS32 /* External reference */
                DerefOf (EWRY [One]) [0x0F] = \DS33 /* External reference */
                DerefOf (EWRY [One]) [0x10] = \DS34 /* External reference */
                DerefOf (EWRY [One]) [0x11] = \DS35 /* External reference */
                DerefOf (EWRY [One]) [0x12] = \DS3C /* External reference */
                DerefOf (EWRY [One]) [0x13] = \DS3D /* External reference */
                DerefOf (EWRY [One]) [0x14] = \DS3E /* External reference */
                DerefOf (EWRY [One]) [0x15] = \DS3F /* External reference */
                DerefOf (EWRY [One]) [0x16] = \DS3G /* External reference */
                DerefOf (EWRY [One]) [0x17] = \DS41 /* External reference */
                DerefOf (EWRY [One]) [0x18] = \DS42 /* External reference */
                DerefOf (EWRY [One]) [0x19] = \DS43 /* External reference */
                DerefOf (EWRY [One]) [0x1A] = \DS44 /* External reference */
                DerefOf (EWRY [One]) [0x1B] = \DS45 /* External reference */
                DerefOf (EWRY [One]) [0x1C] = \DS4C /* External reference */
                DerefOf (EWRY [One]) [0x1D] = \DS4D /* External reference */
                DerefOf (EWRY [One]) [0x1E] = \DS4E /* External reference */
                DerefOf (EWRY [One]) [0x1F] = \DS4F /* External reference */
                DerefOf (EWRY [One]) [0x20] = \DS4G /* External reference */
                Return (EWRY) /* \_SB_.PC00.CNVW.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = \NF2M /* External reference */
                DerefOf (WGDY [One]) [0x02] = \NF2A /* External reference */
                DerefOf (WGDY [One]) [0x03] = \NF2B /* External reference */
                DerefOf (WGDY [One]) [0x04] = \NF5M /* External reference */
                DerefOf (WGDY [One]) [0x05] = \NF5A /* External reference */
                DerefOf (WGDY [One]) [0x06] = \NF5B /* External reference */
                DerefOf (WGDY [One]) [0x07] = \NJ2M /* External reference */
                DerefOf (WGDY [One]) [0x08] = \NJ2A /* External reference */
                DerefOf (WGDY [One]) [0x09] = \NJ2B /* External reference */
                DerefOf (WGDY [One]) [0x0A] = \NJ5M /* External reference */
                DerefOf (WGDY [One]) [0x0B] = \NJ5A /* External reference */
                DerefOf (WGDY [One]) [0x0C] = \NJ5B /* External reference */
                DerefOf (WGDY [One]) [0x0D] = \NR2M /* External reference */
                DerefOf (WGDY [One]) [0x0E] = \NR2A /* External reference */
                DerefOf (WGDY [One]) [0x0F] = \NR2B /* External reference */
                DerefOf (WGDY [One]) [0x10] = \NR5M /* External reference */
                DerefOf (WGDY [One]) [0x11] = \NR5A /* External reference */
                DerefOf (WGDY [One]) [0x12] = \NR5B /* External reference */
                Return (WGDY) /* \_SB_.PC00.CNVW.WGDY */
            }

            Name (RWGY, Package (0x1E)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (RWGS, 0, Serialized)
            {
                RWGY [Zero] = \GA20 /* External reference */
                RWGY [One] = \GA21 /* External reference */
                RWGY [0x02] = \GA22 /* External reference */
                RWGY [0x03] = \GA23 /* External reference */
                RWGY [0x04] = \GA24 /* External reference */
                RWGY [0x05] = \GA50 /* External reference */
                RWGY [0x06] = \GA51 /* External reference */
                RWGY [0x07] = \GA52 /* External reference */
                RWGY [0x08] = \GA53 /* External reference */
                RWGY [0x09] = \GA54 /* External reference */
                RWGY [0x0A] = \GB20 /* External reference */
                RWGY [0x0B] = \GB21 /* External reference */
                RWGY [0x0C] = \GB22 /* External reference */
                RWGY [0x0D] = \GB23 /* External reference */
                RWGY [0x0E] = \GB24 /* External reference */
                RWGY [0x0F] = \GB50 /* External reference */
                RWGY [0x10] = \GB51 /* External reference */
                RWGY [0x11] = \GB52 /* External reference */
                RWGY [0x12] = \GB53 /* External reference */
                RWGY [0x13] = \GB54 /* External reference */
                RWGY [0x14] = \GC20 /* External reference */
                RWGY [0x15] = \GC21 /* External reference */
                RWGY [0x16] = \GC22 /* External reference */
                RWGY [0x17] = \GC23 /* External reference */
                RWGY [0x18] = \GC24 /* External reference */
                RWGY [0x19] = \GC50 /* External reference */
                RWGY [0x1A] = \GC51 /* External reference */
                RWGY [0x1B] = \GC52 /* External reference */
                RWGY [0x1C] = \GC53 /* External reference */
                RWGY [0x1D] = \GC54 /* External reference */
                Return (RWGY) /* \_SB_.PC00.CNVW.RWGY */
            }

            Name (WTAS, Package (0x02)
            {
                Zero, 
                Package (0x05)
                {
                    0x07, 
                    One, 
                    0x02, 
                    0x5553, 
                    0x4341
                }
            })
            Name (PPAY, Package (0x02)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = \DAGN /* External reference */
                DerefOf (PPAY [One]) [0x02] = \DAG1 /* External reference */
                DerefOf (PPAY [One]) [0x03] = \DAG2 /* External reference */
                DerefOf (PPAY [One]) [0x04] = \DAG3 /* External reference */
                DerefOf (PPAY [One]) [0x05] = \DAG4 /* External reference */
                DerefOf (PPAY [One]) [0x06] = \DAG5 /* External reference */
                DerefOf (PPAY [One]) [0x07] = \DAG6 /* External reference */
                DerefOf (PPAY [One]) [0x08] = \DAG7 /* External reference */
                DerefOf (PPAY [One]) [0x09] = \DAG8 /* External reference */
                DerefOf (PPAY [One]) [0x0A] = \DAG9 /* External reference */
                DerefOf (PPAY [One]) [0x0B] = \DAGA /* External reference */
                Return (PPAY) /* \_SB_.PC00.CNVW.PPAY */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x4F                                             // O
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = Zero
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = One
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("d2a8c3e8-4b69-4f00-82bd-fe8607803aa7") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = Zero
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = One
                        Return (Local0)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (\_SB.PC00)
    {
        Method (WHIT, 0, NotSerialized)
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    "*?", 
                    "*?", 
                    Zero, 
                    0x02, 
                    0x02
                }
            })
        }

        Method (SELF, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                "PcOemId", 
                "PcSkuId"
            })
        }
    }

    Name (RDEL, 0x69)
    If ((PCHS == 0x02))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS10)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            \RDEL = DerefOf (Arg3 [Zero])
                            Return (ToBuffer (RDEL))
                        }
                    }
                }

                If ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                            If ((Local0 == Zero))
                            {
                                \_SB.PC00.LPCB.EC0.ITPT = Zero
                            }
                            Else
                            {
                                \_SB.PC00.LPCB.EC0.ITPT = One
                            }

                            Release (\_SB.PC00.LPCB.EC0.ECMX)
                            Return (ToBuffer (Local0))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
    Else
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS14)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            \RDEL = DerefOf (Arg3 [Zero])
                            Return (ToBuffer (RDEL))
                        }
                    }
                }

                If ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                            If ((Local0 == Zero))
                            {
                                \_SB.PC00.LPCB.EC0.ITPT = Zero
                            }
                            Else
                            {
                                \_SB.PC00.LPCB.EC0.ITPT = One
                            }

                            Release (\_SB.PC00.LPCB.EC0.ECMX)
                            Return (ToBuffer (Local0))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\_SB)
    {
        Method (BTRK, 1, Serialized)
        {
            \_SB.SGOV (HBTR, Arg0)
        }

        Method (GBTR, 0, NotSerialized)
        {
            Return (\_SB.GGOV (HBTR))
        }
    }

    If (\_SB.PC00.CNIP ())
    {
        If ((PCHS == 0x02))
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS10)
            {
                PowerResource (BTPR, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.GBTR () == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        \_SB.BTRK (One)
                        Sleep (RDEL)
                        \_SB.BTRK (Zero)
                        Sleep (RDEL)
                    }
                }
            }
        }
        Else
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS14)
            {
                PowerResource (BTPR, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.GBTR () == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        \_SB.BTRK (One)
                        Sleep (RDEL)
                        \_SB.BTRK (Zero)
                        Sleep (RDEL)
                    }
                }
            }
        }
    }

    If ((\_SB.PC00.CNIP () || \_SB.PC00.RP07.PXSX.WIST ()))
    {
        If ((PCHS == 0x02))
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS10)
            {
                If (\_SB.PC00.RP07.PXSX.WIST ())
                {
                    PowerResource (DBTP, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((\_SB.GBTR () == Zero))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            \_SB.BTRK (One)
                            Sleep (RDEL)
                            \_SB.BTRK (Zero)
                            Sleep (RDEL)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (\_SB.PC00.CNIP ())
                    {
                        Return (Package (0x01)
                        {
                            BTPR
                        })
                    }

                    If (\_SB.PC00.RP07.PXSX.WIST ())
                    {
                        Return (Package (0x01)
                        {
                            DBTP
                        })
                    }
                }
            }
        }
        Else
        {
            Scope (\_SB.PC00.XHCI.RHUB.HS14)
            {
                If (\_SB.PC00.RP07.PXSX.WIST ())
                {
                    PowerResource (DBTP, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((\_SB.GBTR () == Zero))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            \_SB.BTRK (One)
                            Sleep (RDEL)
                            \_SB.BTRK (Zero)
                            Sleep (RDEL)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (\_SB.PC00.CNIP ())
                    {
                        Return (Package (0x01)
                        {
                            BTPR
                        })
                    }

                    If (\_SB.PC00.RP07.PXSX.WIST ())
                    {
                        Return (Package (0x01)
                        {
                            DBTP
                        })
                    }
                }
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPNBCONV", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PC00.LPCB.EC0_.KBBL, FieldUnitObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (CDP1, UnknownObj)
    External (RAFB, IntObj)
    External (RCWG, IntObj)
    External (RFCR, IntObj)
    External (RVFB, IntObj)

    Scope (\_GPE)
    {
        Method (RFBL, 0, NotSerialized)
        {
            Local0 = \CDP1 /* External reference */
            Local0 += One
            \CDP1 = Local0
            If ((RVFB == One))
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PC00.LPCB.EC0.KBBL = 0xFF
                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }

            If ((RAFB == One))
            {
                If ((RCWG != Zero))
                {
                    \_SB.SGOV (\RCWG, Zero)
                    Sleep (0xC8)
                    \_SB.SGOV (\RCWG, One)
                }
            }

            \_SB.WMIV.GVWE (0x1C, Zero)
            \_SB.CAGS (RFCR)
        }
    }

    Scope (\_SB)
    {
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 1, "HP", "LAPTOPPC", 0x00001000)
{
    External (_SB_.G46D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.AINT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.IUER, IntObj)
    External (_SB_.PC00.LPCB.EC0_, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PC00.LPCB.EC0_.GBNT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.EC0_.PTEN, IntObj)
    External (_SB_.PC00.LPCB.EC0_.UDTS, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.EC0_.VBPS, IntObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (AEAB, IntObj)
    External (AHDB, IntObj)
    External (G237, FieldUnitObj)
    External (G23B, FieldUnitObj)
    External (G23F, FieldUnitObj)
    External (G240, FieldUnitObj)
    External (G241, FieldUnitObj)
    External (G247, IntObj)
    External (GCGN, UnknownObj)
    External (GTOS, MethodObj)    // 0 Arguments
    External (HEB1, IntObj)
    External (HEFE, IntObj)
    External (IUBE, IntObj)
    External (IUCE, IntObj)
    External (IUDE, IntObj)
    External (MDBG, MethodObj)    // 1 Arguments
    External (OSYS, IntObj)
    External (PB1E, IntObj)
    External (S0ID, UnknownObj)
    External (VBPS, IntObj)

    Method (VHBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG (Arg0))
        }

        Return (Zero)
    }

    Scope (\_SB)
    {
        Scope (\_SB.PC00.LPCB.EC0)
        {
            Name (G461, Zero)
            Device (BIND)
            {
                Name (_HID, "INT33D2" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C40" /* Standard Button Controller */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((IUBE & One) && (OSYS >= 0x07DD)))
                    {
                        If ((PB1E & One))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("dfbcf3c5-e7a5-44e6-9c1f-29c76f6e059c") /* Power Button Device */))
                    {
                        If ((Zero == ToInteger (Arg1)))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    If (((PB1E & One) == One))
                                    {
                                        Return (0x07)
                                    }

                                    Return (Zero)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Name (VBDS, Zero)
            Name (ONTM, Zero)
            Method (VGBS, 0, Serialized)
            {
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                G461 = \_SB.PC00.LPCB.EC0.VBPS /* External reference */
                Release (\_SB.PC00.LPCB.EC0.ECMX)
                If ((ONTM == Zero))
                {
                    If (((G461 & 0x10) == 0x10))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (0x04, One)
                    }

                    If (((G461 & 0x40) == 0x40))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (0x06, One)
                    }

                    If (((G461 & 0x80) == 0x80))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (0x07, One)
                    }

                    ONTM = One
                    G23F = VBPS /* External reference */
                }

                Return (VBDS) /* \_SB_.PC00.LPCB.EC0_.VBDS */
            }

            Method (UPBT, 2, Serialized)
            {
                Local0 = (One << Arg0)
                If (Arg1)
                {
                    VBDS |= Local0
                }
                Else
                {
                    VBDS &= ~Local0
                }
            }

            Method (GPBT, 1, Serialized)
            {
                Local0 = (One << Arg0)
                If (((VBDS & Local0) == Local0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Scope (\_SB.PC00.LPCB.EC0)
        {
            Device (CIND)
            {
                Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((IUCE & One) && (OSYS >= 0x07DC)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Scope (\_SB.PC00.LPCB.EC0)
        {
            Device (DIND)
            {
                Name (_HID, "INT33D4" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C70" /* Dock Sensor Device */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((IUDE & One) && (OSYS >= 0x07DC)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Scope (\_SB)
        {
            Device (HIDD)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((GCGN == 0x02))
                    {
                        Return ("INTC1051")
                    }
                    ElseIf ((GCGN == 0x05))
                    {
                        Return ("INTC1054")
                    }
                    ElseIf ((GCGN == 0x06))
                    {
                        Return ("INTC1070")
                    }
                    ElseIf ((GCGN == 0x03))
                    {
                        Return ("INTC1076")
                    }
                    Else
                    {
                        Return ("INT33D5")
                    }
                }

                Name (HBSY, Zero)
                Name (HIDX, Zero)
                Name (HMDE, Zero)
                Name (HRDY, Zero)
                Name (BTLD, Zero)
                Name (BTS1, Zero)
                Name (BTEN, Zero)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((OSYS >= 0x07DD) && (HEFE == One)))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (HDDM, 0, Serialized)
                {
                    Name (DPKG, Package (0x04)
                    {
                        0x11111111, 
                        0x22222222, 
                        0x33333333, 
                        0x44444444
                    })
                    Return (DPKG) /* \_SB_.HIDD.HDDM.DPKG */
                }

                Method (HDEM, 0, Serialized)
                {
                    HBSY = Zero
                    If ((HMDE == Zero))
                    {
                        Return (HIDX) /* \_SB_.HIDD.HIDX */
                    }

                    Return (HMDE) /* \_SB_.HIDD.HMDE */
                }

                Method (HDMM, 0, Serialized)
                {
                    Return (HMDE) /* \_SB_.HIDD.HMDE */
                }

                Method (HDSM, 1, Serialized)
                {
                    HRDY = Arg0
                    If ((Arg0 == Zero))
                    {
                        Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.PTEN = Zero
                        Release (\_SB.PC00.LPCB.EC0.ECMX)
                    }
                }

                Method (HPEM, 1, Serialized)
                {
                    HBSY = One
                    If ((HMDE == Zero))
                    {
                        HIDX = Arg0
                    }
                    Else
                    {
                        HIDX = Arg0
                    }

                    Notify (\_SB.HIDD, 0xC0) // Hardware-Specific
                    Local0 = Zero
                    While (((Local0 < 0xFA) && HBSY))
                    {
                        Sleep (0x04)
                        Local0++
                    }

                    If ((HBSY == One))
                    {
                        HBSY = Zero
                        HIDX = Zero
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (BTNL, 0, Serialized)
                {
                    \_SB.HIDD.BTLD = One
                    If ((\AEAB == One))
                    {
                        If ((\S0ID == Zero))
                        {
                            BTS1 = 0x1E
                        }
                        Else
                        {
                            BTS1 = 0x1F
                        }
                    }
                    Else
                    {
                        BTS1 = Zero
                    }

                    BTEN = BTS1 /* \_SB_.HIDD.BTS1 */
                    If (((PB1E & One) == One))
                    {
                        Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.PTEN = One
                        Release (\_SB.PC00.LPCB.EC0.ECMX)
                    }
                    Else
                    {
                        Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.PTEN = Zero
                        Release (\_SB.PC00.LPCB.EC0.ECMX)
                    }
                }

                Method (BTNE, 1, Serialized)
                {
                    If ((\AEAB == One))
                    {
                        BTS1 = ((Arg0 & 0x1E) | One)
                        BTEN = BTS1 /* \_SB_.HIDD.BTS1 */
                        G241 = BTEN /* \_SB_.HIDD.BTEN */
                    }
                }

                Method (BTNS, 0, Serialized)
                {
                    If ((\AEAB == One))
                    {
                        BTS1 = BTEN /* \_SB_.HIDD.BTEN */
                        G240 = BTS1 /* \_SB_.HIDD.BTS1 */
                    }

                    Return (BTS1) /* \_SB_.HIDD.BTS1 */
                }

                Method (BTNC, 0, Serialized)
                {
                    If ((\AEAB == One))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (HEB2, Zero)
                Method (HEBC, 0, Serialized)
                {
                    If ((\AHDB == One))
                    {
                        Return (\HEB1) /* External reference */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (H2BC, 0, Serialized)
                {
                    If ((\AHDB == One))
                    {
                        Return (\HEB1) /* External reference */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (HEEC, 0, Serialized)
                {
                    If ((\AHDB == One))
                    {
                        Return (HEB2) /* \_SB_.HIDD.HEB2 */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("eeec56b3-4442-408f-a792-4edd4d758054") /* Unknown UUID */))
                    {
                        If ((One == ToInteger (Arg1)))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0xFF, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    BTNL ()
                                }
                                Case (0x02)
                                {
                                    Return (HDMM ())
                                }
                                Case (0x03)
                                {
                                    HDSM (DerefOf (Arg3 [Zero]))
                                }
                                Case (0x04)
                                {
                                    Return (HDEM ())
                                }
                                Case (0x05)
                                {
                                    Return (BTNS ())
                                }
                                Case (0x06)
                                {
                                    BTNE (DerefOf (Arg3 [Zero]))
                                }
                                Case (0x07)
                                {
                                    Return (HEBC ())
                                }
                                Case (0x08)
                                {
                                    Return (\_SB.PC00.LPCB.EC0.VGBS ())
                                }
                                Case (0x09)
                                {
                                    Return (H2BC ())
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (PWPR, 0, Serialized)
            {
                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                {
                    Notify (\_SB.HIDD, 0xCE) // Hardware-Specific
                }
                ElseIf (CondRefOf (\_SB.PC00.GFX0.IUER))
                {
                    Local0 = \_SB.PC00.GFX0.IUER /* External reference */
                    \_SB.PC00.GFX0.IUER = (Local0 & 0xC0)
                    Local0 = \_SB.PC00.GFX0.IUER /* External reference */
                    \_SB.PC00.GFX0.IUER = (Local0 | One)
                }
            }

            Method (PWRR, 0, Serialized)
            {
                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                {
                    Notify (\_SB.HIDD, 0xCF) // Hardware-Specific
                }
                ElseIf (CondRefOf (\_SB.PC00.GFX0.IUER))
                {
                    Local0 = \_SB.PC00.GFX0.IUER /* External reference */
                    \_SB.PC00.GFX0.IUER = (Local0 & 0xC0)
                }
            }
        }

        Scope (\_SB.PC00.LPCB.EC0)
        {
            Name (G45E, Zero)
            Name (G45F, Zero)
            Name (G460, Zero)
            Method (_Q30, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                G237 = 0x30000000
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    G461 = \_SB.PC00.LPCB.EC0.VBPS /* External reference */
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, Zero))
                    {
                        If ((\_SB.PC00.LPCB.EC0.GPBT (Zero) == Zero))
                        {
                            \_SB.PC00.LPCB.EC0.UPBT (Zero, One)
                            \_SB.PWPR ()
                            G237 |= One
                            If (\_SB.PC00.LPCB.EC0.GPBT (One))
                            {
                                G460 = One
                            }
                        }
                    }

                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, One))
                    {
                        If ((\_SB.PC00.LPCB.EC0.GPBT (One) == Zero))
                        {
                            \_SB.PC00.LPCB.EC0.UPBT (One, One)
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                Notify (\_SB.HIDD, 0xC2) // Hardware-Specific
                            }
                            ElseIf ((\_SB.HIDD.HRDY == One))
                            {
                                \_SB.HIDD.HPEM (One)
                            }
                            Else
                            {
                                \_SB.PC00.GFX0.IUEH (One)
                            }

                            G237 |= 0x02
                        }
                    }

                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, 0x02))
                    {
                        If (((G247 & 0x20) != 0x20))
                        {
                            If (NAnd ((\_SB.PC00.LPCB.EC0.GPBT (Zero) || \_SB.PC00.LPCB.EC0.GPBT (One)), \_SB.PC00.LPCB.EC0.GPBT (0x02)))
                            {
                                If ((G460 == Zero))
                                {
                                    \_SB.PC00.LPCB.EC0.UPBT (0x02, One)
                                    If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                    {
                                        Notify (\_SB.HIDD, 0xC4) // Hardware-Specific
                                    }
                                    ElseIf ((\_SB.HIDD.HRDY == One))
                                    {
                                        \_SB.HIDD.HPEM (0x11)
                                    }
                                    Else
                                    {
                                        \_SB.PC00.GFX0.IUEH (0x02)
                                    }

                                    G237 |= 0x04
                                    If (\_SB.PC00.LPCB.EC0.GPBT (Zero))
                                    {
                                        G460 = One
                                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                        {
                                            Notify (\_SB.HIDD, 0xCF) // Hardware-Specific
                                            Notify (\_SB.HIDD, 0xC5) // Hardware-Specific
                                        }

                                        G237 |= 0x0100
                                    }
                                    ElseIf (\_SB.PC00.LPCB.EC0.GPBT (One))
                                    {
                                        G460 = One
                                    }
                                }
                            }
                        }
                    }

                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, 0x03))
                    {
                        If (((G247 & 0x20) != 0x20))
                        {
                            If (NAnd ((\_SB.PC00.LPCB.EC0.GPBT (Zero) || \_SB.PC00.LPCB.EC0.GPBT (One)), \_SB.PC00.LPCB.EC0.GPBT (0x03)))
                            {
                                If ((G460 == Zero))
                                {
                                    \_SB.PC00.LPCB.EC0.UPBT (0x03, One)
                                    If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                    {
                                        Notify (\_SB.HIDD, 0xC6) // Hardware-Specific
                                    }
                                    ElseIf ((\_SB.HIDD.HRDY == One))
                                    {
                                        \_SB.HIDD.HPEM (0x12)
                                    }
                                    Else
                                    {
                                        \_SB.PC00.GFX0.IUEH (0x03)
                                    }

                                    G237 |= 0x08
                                    If (\_SB.PC00.LPCB.EC0.GPBT (Zero))
                                    {
                                        G460 = One
                                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                        {
                                            Notify (\_SB.HIDD, 0xCF) // Hardware-Specific
                                            Notify (\_SB.HIDD, 0xC7) // Hardware-Specific
                                        }

                                        G237 |= 0x0200
                                    }
                                    ElseIf (\_SB.PC00.LPCB.EC0.GPBT (One))
                                    {
                                        G460 = One
                                    }
                                }
                            }
                        }
                    }

                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, 0x04))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (0x04, One)
                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                        {
                            Notify (\_SB.HIDD, 0xC8) // Hardware-Specific
                        }
                        ElseIf ((\_SB.HIDD.HRDY == One))
                        {
                            \_SB.HIDD.HPEM (0x02)
                        }
                        Else
                        {
                            \_SB.PC00.GFX0.IUEH (0x04)
                        }

                        G237 |= 0x10
                    }

                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, 0x06))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If ((\_SB.PC00.LPCB.EC0.GPBT (0x06) == Zero))
                                {
                                    \_SB.PC00.LPCB.EC0.UPBT (0x06, One)
                                    Notify (\_SB.HIDD, 0xCD) // Hardware-Specific
                                    G237 |= 0x20
                                    If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
                                    }
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PC00.GFX0.IUEH))
                            {
                                If ((G45E == Zero))
                                {
                                    G45E = One
                                    \_SB.PC00.GFX0.IUEH (0x06)
                                    G237 |= 0x20
                                }
                            }
                        }
                        ElseIf ((G45E == Zero))
                        {
                            G45E = One
                            \_SB.WMIV.GVWE (One, Zero)
                            G237 |= 0x20
                        }
                    }

                    If (\_SB.PC00.LPCB.EC0.GBNT (G461, 0x07))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If ((\_SB.PC00.LPCB.EC0.GPBT (0x07) == Zero))
                                {
                                    \_SB.PC00.LPCB.EC0.UPBT (0x07, One)
                                    Notify (\_SB.HIDD, 0xCA) // Hardware-Specific
                                    If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
                                    }

                                    G237 |= 0x40
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PC00.GFX0.IUEH))
                            {
                                If ((G45F == Zero))
                                {
                                    G45F = One
                                    \_SB.PC00.GFX0.IUEH (0x07)
                                    G237 |= 0x40
                                }
                            }
                        }
                        ElseIf ((G45F == Zero))
                        {
                            G45F = One
                            \_SB.WMIV.GVWE (One, Zero)
                            G237 |= 0x40
                        }
                    }
                }
            }

            Method (_Q31, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                G23B = 0x31000000
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    G461 = \_SB.PC00.LPCB.EC0.VBPS /* External reference */
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    If (((\_SB.PC00.LPCB.EC0.GBNT (G461, Zero) == Zero) && \_SB.PC00.LPCB.EC0.GPBT (Zero)))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (Zero, Zero)
                        If ((G460 == Zero))
                        {
                            \_SB.PWRR ()
                        }

                        G23B |= One
                    }

                    If (((\_SB.PC00.LPCB.EC0.GBNT (G461, One) == Zero) && \_SB.PC00.LPCB.EC0.GPBT (One)))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (One, Zero)
                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                        {
                            Notify (\_SB.HIDD, 0xC3) // Hardware-Specific
                        }

                        G23B |= 0x02
                    }

                    If (((G247 & 0x20) != 0x20))
                    {
                        If (((\_SB.PC00.LPCB.EC0.GBNT (G461, 0x02) == Zero) && \_SB.PC00.LPCB.EC0.GPBT (0x02)))
                        {
                            \_SB.PC00.LPCB.EC0.UPBT (0x02, Zero)
                            If ((G460 == Zero))
                            {
                                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                {
                                    Notify (\_SB.HIDD, 0xC5) // Hardware-Specific
                                }

                                G23B |= 0x04
                            }
                        }
                    }

                    If (((G247 & 0x20) != 0x20))
                    {
                        If (((\_SB.PC00.LPCB.EC0.GBNT (G461, 0x03) == Zero) && \_SB.PC00.LPCB.EC0.GPBT (0x03)))
                        {
                            \_SB.PC00.LPCB.EC0.UPBT (0x03, Zero)
                            If ((G460 == Zero))
                            {
                                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                {
                                    Notify (\_SB.HIDD, 0xC7) // Hardware-Specific
                                }

                                G23B |= 0x08
                            }
                        }
                    }

                    If (((\_SB.PC00.LPCB.EC0.GBNT (G461, 0x04) == Zero) && \_SB.PC00.LPCB.EC0.GPBT (0x04)))
                    {
                        \_SB.PC00.LPCB.EC0.UPBT (0x04, Zero)
                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                        {
                            Notify (\_SB.HIDD, 0xC9) // Hardware-Specific
                        }

                        G23B |= 0x10
                    }

                    If ((\_SB.PC00.LPCB.EC0.GBNT (G461, 0x06) == Zero))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If (\_SB.PC00.LPCB.EC0.GPBT (0x06))
                                {
                                    \_SB.PC00.LPCB.EC0.UPBT (0x06, Zero)
                                    Notify (\_SB.HIDD, 0xCC) // Hardware-Specific
                                    G23B |= 0x20
                                    If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
                                    }
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PC00.GFX0.IUEH))
                            {
                                If ((G45E == One))
                                {
                                    G45E = Zero
                                    \_SB.PC00.GFX0.IUEH (0x06)
                                    G23B |= 0x20
                                }
                            }
                        }
                        ElseIf ((G45E == One))
                        {
                            G45E = Zero
                            \_SB.WMIV.GVWE (One, Zero)
                            G23B |= 0x20
                        }
                    }

                    If ((\_SB.PC00.LPCB.EC0.GBNT (G461, 0x07) == Zero))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If (\_SB.PC00.LPCB.EC0.GPBT (0x07))
                                {
                                    \_SB.PC00.LPCB.EC0.UPBT (0x07, Zero)
                                    Notify (\_SB.HIDD, 0xCB) // Hardware-Specific
                                    If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
                                    }

                                    G23B |= 0x40
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PC00.GFX0.IUEH))
                            {
                                If ((G45F == One))
                                {
                                    G45F = Zero
                                    \_SB.PC00.GFX0.IUEH (0x07)
                                    G23B |= 0x40
                                }
                            }
                        }
                        ElseIf ((G45F == One))
                        {
                            G45F = Zero
                            \_SB.WMIV.GVWE (One, Zero)
                            G23B |= 0x40
                        }
                    }

                    If (G460)
                    {
                        If (((G461 & 0x0F) == Zero))
                        {
                            G460 = Zero
                        }
                    }
                }
            }
        }

        Scope (\_SB)
        {
            Method (G45C, 1, Serialized)
            {
                If ((Arg0 > Zero))
                {
                    If (\_SB.PC00.LPCB.EC0.ECRG)
                    {
                        Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.PTEN = Zero
                        Release (\_SB.PC00.LPCB.EC0.ECMX)
                    }
                }
            }

            Method (G45D, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    If (((PB1E & One) == One))
                    {
                        \_SB.PC00.LPCB.EC0.PTEN = One
                    }
                    Else
                    {
                        \_SB.PC00.LPCB.EC0.PTEN = Zero
                    }

                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                }

                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    If (\_SB.PC00.LPCB.EC0.ECRG)
                    {
                        Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.G461 = \_SB.PC00.LPCB.EC0.VBPS /* External reference */
                        Release (\_SB.PC00.LPCB.EC0.ECMX)
                        If ((\GTOS () >= 0x08))
                        {
                            If ((\_SB.PC00.LPCB.EC0.G461 & 0x40))
                            {
                                \_SB.PC00.LPCB.EC0.UPBT (0x06, One)
                                If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                                {
                                    \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
                                }
                            }
                            Else
                            {
                                \_SB.PC00.LPCB.EC0.UPBT (0x06, Zero)
                                If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
                                {
                                    \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
                                }
                            }

                            If ((\_SB.PC00.LPCB.EC0.GBNT (\_SB.PC00.LPCB.EC0.G461, 0x06) == One))
                            {
                                \_SB.PC00.GFX0.IUER |= 0x40
                            }
                            Else
                            {
                                \_SB.PC00.GFX0.IUER &= 0xFFFFFFBF
                            }

                            \_SB.PC00.GFX0.AINT (0x06, Zero)
                        }

                        If ((\GTOS () <= 0x08))
                        {
                            \_SB.PC00.LPCB.EC0.G45E = \_SB.PC00.LPCB.EC0.GBNT (\_SB.PC00.LPCB.EC0.G461, 0x06)
                        }

                        If ((\GTOS () >= 0x08))
                        {
                            If ((\_SB.PC00.LPCB.EC0.G461 & 0x80))
                            {
                                \_SB.PC00.LPCB.EC0.UPBT (0x07, One)
                            }
                            Else
                            {
                                \_SB.PC00.LPCB.EC0.UPBT (0x07, Zero)
                            }

                            If (\_SB.G46D ())
                            {
                                \_SB.PC00.GFX0.IUER |= 0x80
                            }
                            Else
                            {
                                \_SB.PC00.GFX0.IUER &= 0xFFFFFF7F
                            }

                            \_SB.PC00.GFX0.AINT (0x07, Zero)
                        }

                        If ((\GTOS () <= 0x08))
                        {
                            If (\_SB.G46D ())
                            {
                                \_SB.PC00.LPCB.EC0.G45F = One
                            }
                            Else
                            {
                                \_SB.PC00.LPCB.EC0.G45F = Zero
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.LPCB.EC0.ONTM))
                    {
                        \_SB.PC00.LPCB.EC0.ONTM = One
                    }
                }
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "DptfTb", "DptfTabl", 0x00001000)
{
    External (_SB_.AAC0, FieldUnitObj)
    External (_SB_.ACRT, FieldUnitObj)
    External (_SB_.APSV, FieldUnitObj)
    External (_SB_.CBMI, FieldUnitObj)
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CLVL, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.CTC0, FieldUnitObj)
    External (_SB_.CTC1, FieldUnitObj)
    External (_SB_.CTC2, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.FBDX, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ACPR, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.AFAN, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.BATP, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.BDC_, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.BDV_, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.CPSN, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.CRZN, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.DGPS, MethodObj)    // 4 Arguments
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PC00.LPCB.EC0_.IOBP, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.PHTP, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.PLTP, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.SCPS, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC0_.SEN1.S1CH, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.SEN1.S1CL, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.SEN2.S2CH, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.SEN2.S2CL, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.UDTS, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.EC0_.VBPS, UnknownObj)
    External (_SB_.PC00.LPCB.H_EC.UVTH, FieldUnitObj)
    External (_SB_.PC00.MHBR, FieldUnitObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.PXCS, OpRegionObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.PXCS, OpRegionObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.PXCS, OpRegionObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.PXCS, OpRegionObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.PXCS, OpRegionObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.PXCS, OpRegionObj)
    External (_SB_.PC00.TCPU, DeviceObj)
    External (_SB_.PL10, FieldUnitObj)
    External (_SB_.PL11, FieldUnitObj)
    External (_SB_.PL12, FieldUnitObj)
    External (_SB_.PL20, FieldUnitObj)
    External (_SB_.PL21, FieldUnitObj)
    External (_SB_.PL22, FieldUnitObj)
    External (_SB_.PLW0, FieldUnitObj)
    External (_SB_.PLW1, FieldUnitObj)
    External (_SB_.PLW2, FieldUnitObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TPC, IntObj)
    External (_SB_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR00.TSMC, PkgObj)
    External (_SB_.PR00.TSMF, PkgObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.SLPB, DeviceObj)
    External (_SB_.TAR0, FieldUnitObj)
    External (_SB_.TAR1, FieldUnitObj)
    External (_SB_.TAR2, FieldUnitObj)
    External (_TZ_.BATZ._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.CPUZ, ThermalZoneObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.EXTZ._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.GFXZ._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.LOCZ._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.SK1Z._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.TZ00, ThermalZoneObj)
    External (ACTT, IntObj)
    External (APLD, UnknownObj)
    External (APLH, UnknownObj)
    External (APLL, UnknownObj)
    External (ATMC, IntObj)
    External (ATPC, IntObj)
    External (BATR, IntObj)
    External (CHGE, IntObj)
    External (CPUS, IntObj)
    External (CRTT, IntObj)
    External (CTDP, IntObj)
    External (DCFE, IntObj)
    External (DPOS, UnknownObj)
    External (DPTF, IntObj)
    External (DTOL, UnknownObj)
    External (FND1, IntObj)
    External (G25F, UnknownObj)
    External (G261, UnknownObj)
    External (HIDW, MethodObj)    // 4 Arguments
    External (HIWC, MethodObj)    // 1 Arguments
    External (HPID, UnknownObj)
    External (IN34, IntObj)
    External (LPER, IntObj)
    External (LPOE, IntObj)
    External (LPOP, IntObj)
    External (LPOS, IntObj)
    External (LPOW, IntObj)
    External (MPL0, IntObj)
    External (MPL1, IntObj)
    External (MPL2, IntObj)
    External (NPLD, UnknownObj)
    External (NPLH, UnknownObj)
    External (NPLL, UnknownObj)
    External (ODV0, IntObj)
    External (ODV1, IntObj)
    External (ODV2, IntObj)
    External (ODV3, IntObj)
    External (ODV4, IntObj)
    External (ODV5, IntObj)
    External (ODV6, IntObj)
    External (ODV7, IntObj)
    External (ODV8, IntObj)
    External (ODV9, IntObj)
    External (ODVA, IntObj)
    External (ODVB, IntObj)
    External (ODVC, IntObj)
    External (PCHE, FieldUnitObj)
    External (PF00, IntObj)
    External (PNHM, IntObj)
    External (PPPR, IntObj)
    External (PPSZ, IntObj)
    External (PSVT, IntObj)
    External (PTMC, IntObj)
    External (PTPC, IntObj)
    External (PV01, UnknownObj)
    External (PV02, UnknownObj)
    External (PV03, UnknownObj)
    External (PV04, UnknownObj)
    External (PV05, UnknownObj)
    External (PV06, UnknownObj)
    External (PV07, UnknownObj)
    External (PV08, UnknownObj)
    External (PV09, UnknownObj)
    External (PV0A, UnknownObj)
    External (PV0B, UnknownObj)
    External (PV0C, UnknownObj)
    External (PV0D, UnknownObj)
    External (PV0E, UnknownObj)
    External (PV0F, UnknownObj)
    External (PV10, UnknownObj)
    External (PV11, UnknownObj)
    External (PV12, UnknownObj)
    External (PV13, UnknownObj)
    External (PV14, UnknownObj)
    External (PV15, UnknownObj)
    External (PV16, UnknownObj)
    External (PV17, UnknownObj)
    External (PV18, UnknownObj)
    External (PV19, UnknownObj)
    External (PV1A, UnknownObj)
    External (PV1B, UnknownObj)
    External (PV1C, UnknownObj)
    External (PV1D, UnknownObj)
    External (PV1E, UnknownObj)
    External (PV1F, UnknownObj)
    External (PV20, UnknownObj)
    External (PV21, UnknownObj)
    External (PV22, UnknownObj)
    External (PV23, UnknownObj)
    External (PV24, UnknownObj)
    External (PWRE, IntObj)
    External (PWRS, IntObj)
    External (S1AT, IntObj)
    External (S1CT, IntObj)
    External (S1DE, IntObj)
    External (S1HT, IntObj)
    External (S1P2, IntObj)
    External (S1PT, IntObj)
    External (S1S3, IntObj)
    External (S2DE, IntObj)
    External (S3DE, IntObj)
    External (S4DE, IntObj)
    External (S5DE, IntObj)
    External (S6PE, IntObj)
    External (S6PT, IntObj)
    External (SAC3, IntObj)
    External (SACT, IntObj)
    External (SADE, IntObj)
    External (SAHT, IntObj)
    External (SSP2, IntObj)
    External (SSP3, IntObj)
    External (SSP4, IntObj)
    External (SSP5, IntObj)
    External (TCNT, IntObj)
    External (TH01, UnknownObj)
    External (TH06, UnknownObj)
    External (TH09, UnknownObj)
    External (TH0A, UnknownObj)
    External (TSOD, IntObj)
    External (WAND, IntObj)
    External (WWAT, IntObj)
    External (WWC3, IntObj)
    External (WWCT, IntObj)
    External (WWHT, IntObj)
    External (WWPT, IntObj)

    Scope (\_SB)
    {
        Device (IETM)
        {
            Name (_HID, "INTC1040")  // _HID: Hardware ID
            Name (DOSS, Zero)
            Name (DFFG, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((\DPTF == One) && (\IN34 == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (CondRefOf (\_SB.APSV))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }
                }

                If (CondRefOf (\_SB.AAC0))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }
                }

                If (CondRefOf (\_SB.ACRT))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_SB.ACRT /* External reference */
                    }
                }

                If ((Arg0 == ToUUID ("b23ba85d-c8b7-3542-88de-8de2ffcfd698") /* Unknown UUID */))
                {
                    DOSS = One
                    If (~(STS1 & One))
                    {
                        If ((CAP1 & One))
                        {
                            If ((CAP1 & 0x02))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If ((CAP1 & 0x04))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If ((CAP1 & 0x08))
                            {
                                \_SB.ACRT = 0xD2
                            }
                            Else
                            {
                                \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }
                        }
                        Else
                        {
                            \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                            \_TZ.ETMD = One
                        }

                        If (CondRefOf (\_TZ.TZ00))
                        {
                            Notify (\_TZ.TZ00, 0x81) // Information Change
                        }
                    }

                    Return (Arg3)
                }

                Return (Arg3)
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE) /* External reference */
            }

            Name (ODVX, Package (0x0D)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0 /* External reference */
                ODVX [One] = \ODV1 /* External reference */
                ODVX [0x02] = G25F /* External reference */
                ODVX [0x03] = \ODV3 /* External reference */
                ODVX [0x04] = (HPID & 0xFF)
                ODVX [0x05] = \ODV5 /* External reference */
                ODVX [0x06] = \ODV6 /* External reference */
                ODVX [0x07] = \ODV7 /* External reference */
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                ODVX [0x08] = \_SB.PC00.LPCB.EC0.ACPR /* External reference */
                Release (\_SB.PC00.LPCB.EC0.ECMX)
                ODVX [0x09] = \ODV9 /* External reference */
                Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                If ((\_SB.PC00.LPCB.EC0.BATP == One))
                {
                    ODVX [0x0A] = ((\_SB.PC00.LPCB.EC0.BDC * \_SB.PC00.LPCB.EC0.BDV) / 0x000F4240)
                }
                Else
                {
                    ODVX [0x0A] = Zero
                }

                Release (\_SB.PC00.LPCB.EC0.ECMX)
                ODVX [0x0B] = \ODVB /* External reference */
                ODVX [0x0C] = \ODVC /* External reference */
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (KTOC, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return (((Arg0 - 0x0AAC) / 0x0A))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CTOK, 1, Serialized)
        {
            Return (((Arg0 * 0x0A) + 0x0AAC))
        }

        Method (C10K, 1, Serialized)
        {
            Name (TMP1, Buffer (0x10)
            {
                 0x00                                             // .
            })
            CreateByteField (TMP1, Zero, TMPL)
            CreateByteField (TMP1, One, TMPH)
            Local0 = (Arg0 + 0x0AAC)
            TMPL = (Local0 & 0xFF)
            TMPH = ((Local0 & 0xFF00) >> 0x08)
            ToInteger (TMP1, Local1)
            Return (Local1)
        }

        Method (K10C, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return ((Arg0 - 0x0AAC))
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.TCPU)
    {
        Name (PFLG, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (MBAR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            CPL0 ()
            Return (NPCC) /* \_SB_.PC00.TCPU.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x88B8, 
                0xAFC8, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0xDBBA, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PC00.TCPU.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = PV24 /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = PV1C /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW0 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = PV11 /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = PV12 /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = \MPL1 /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL11, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW1 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = \MPL2 /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL12, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW2 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_SB.CPPC))
            {
                \_SB.CPPC = Arg0
            }

            Switch (ToInteger (\TCNT))
            {
                Case (0x10)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                    Notify (\_SB.PR14, 0x80) // Status Change
                    Notify (\_SB.PR15, 0x80) // Status Change
                }
                Case (0x0E)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                }
                Case (0x0C)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                }
                Case (0x08)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                }
                Case (0x07)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                }
                Case (0x06)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                }
                Case (0x05)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                }
                Case (0x04)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                }
                Case (0x03)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                }
                Case (0x02)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                }
                Default
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                }

            }
        }

        Method (SPUR, 1, NotSerialized)
        {
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PC00.TCPU.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (_TMP, 0, Serialized)  // _TMP: Temperature
        {
            Return (\_SB.IETM.CTOK (PCTP))
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PC00.TCPU, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                Return (\_SB.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_SB.PR00._TSS))
            {
                Return (\_SB.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_SB.PR00._TPC))
            {
                Return (\_SB.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PF00) && (\PF00 != 0x80000000)))
            {
                If ((\PF00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_SB.PR00._TSD))
            {
                Return (\_SB.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_SB.PR00._TSS) && CondRefOf (\_SB.CFGD)))
            {
                If ((\_SB.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_SB.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_SB.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (TJMX, 0x6E)
        Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x0A
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x1E
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x28
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x37
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x46
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN1)
        {
            Name (_HID, "INTC1043")  // _HID: Hardware ID
            Name (_UID, "SEN1")  // _UID: Unique ID
            Name (_STR, Unicode ("EXTZ-External/Remote 1 Sensor"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (S1TH, Zero)
            Name (S1TL, Zero)
            Name (S1HO, 0x7D)
            Name (S1LO, 0x05)
            Name (S1CH, Zero)
            Name (S1CL, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S1DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.EXTZ._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x03
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 < 0x05))
                    {
                        Local0 = 0x05
                    }

                    \_SB.PC00.LPCB.EC0.PLTP = Local0
                    S1TL = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    If (((S1TL <= 0x55) && (S1TL >= 0x19)))
                    {
                        S1CL = One
                    }
                    Else
                    {
                        S1CL = Zero
                    }

                    If (CondRefOf (\_SB.IETM.DXGP))
                    {
                        \_SB.IETM.DXGP (One, S1CH, S1CL)
                    }

                    S1LO = S1TL /* \_SB_.PC00.LPCB.EC0_.SEN1.S1TL */
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x03
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 > 0x7D))
                    {
                        Local0 = 0x7D
                    }

                    \_SB.PC00.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    S1TH = Local0
                    If (((S1TH <= 0x55) && (S1TH >= 0x19)))
                    {
                        S1CH = One
                    }
                    Else
                    {
                        S1CH = Zero
                    }

                    If (CondRefOf (\_SB.IETM.DXGP))
                    {
                        \_SB.IETM.DXGP (One, S1CH, S1CL)
                    }

                    S1HO = S1TH /* \_SB_.PC00.LPCB.EC0_.SEN1.S1TH */
                }
            }

            Name (GTSH, 0x14)
            Name (S1AC, 0x3C)
            Name (S1PV, 0x41)
            Name (S1CC, 0x50)
            Name (S1C3, 0x46)
            Name (S1HP, 0x4B)
            Name (SSP1, Zero)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S1PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S1CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S1C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S1HP))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN2)
        {
            Name (_HID, "INTC1043")  // _HID: Hardware ID
            Name (_UID, "SEN2")  // _UID: Unique ID
            Name (_STR, Unicode ("LOCZ-Local/Internal Sensor"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (S2TH, Zero)
            Name (S2TL, Zero)
            Name (S2HO, 0x7D)
            Name (S2LO, 0x05)
            Name (S2CH, Zero)
            Name (S2CL, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S2DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.LOCZ._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x04
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 < 0x05))
                    {
                        Local0 = 0x05
                    }

                    \_SB.PC00.LPCB.EC0.PLTP = Local0
                    S2TL = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    If (((S2TL <= 0x55) && (S2TL >= 0x19)))
                    {
                        S2CL = One
                    }
                    Else
                    {
                        S2CL = Zero
                    }

                    If (CondRefOf (\_SB.IETM.DXGP))
                    {
                        \_SB.IETM.DXGP (0x02, S2CH, S2CL)
                    }

                    S2LO = S2TL /* \_SB_.PC00.LPCB.EC0_.SEN2.S2TL */
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x04
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 > 0x7D))
                    {
                        Local0 = 0x7D
                    }

                    \_SB.PC00.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    S2TH = Local0
                    If (((S2TH <= 0x55) && (S2TH >= 0x19)))
                    {
                        S2CH = One
                    }
                    Else
                    {
                        S2CH = Zero
                    }

                    If (CondRefOf (\_SB.IETM.DXGP))
                    {
                        \_SB.IETM.DXGP (0x02, S2CH, S2CL)
                    }

                    S2HO = S2TH /* \_SB_.PC00.LPCB.EC0_.SEN2.S2TH */
                }
            }

            Name (GTSH, 0x14)
            Name (S2AC, 0x3C)
            Name (S2A1, 0x32)
            Name (S2A2, 0x28)
            Name (S2PV, 0x41)
            Name (S2CC, 0x50)
            Name (S2C3, 0x46)
            Name (S2HP, 0x4B)
            Name (SSP2, Zero)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S2PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S2CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S2C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S2HP))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN3)
        {
            Name (_HID, "INTC1043")  // _HID: Hardware ID
            Name (_UID, "SEN3")  // _UID: Unique ID
            Name (_STR, Unicode ("BATZ-Battery Sensor"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S3DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.BATZ._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x05
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    \_SB.PC00.LPCB.EC0.PLTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x05
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    \_SB.PC00.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                }
            }

            Name (GTSH, 0x14)
            Name (S3AC, 0x3C)
            Name (S3A1, 0x32)
            Name (S3A2, 0x28)
            Name (S3PV, 0x41)
            Name (S3CC, 0x50)
            Name (S3C3, 0x46)
            Name (S3HP, 0x4B)
            Name (SSP3, Zero)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S3PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S3CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S3C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S3HP))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN4)
        {
            Name (_HID, "INTC1043")  // _HID: Hardware ID
            Name (_UID, "SEN4")  // _UID: Unique ID
            Name (_STR, Unicode ("Gfx temperature"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S4DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.GFXZ._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x02
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 < 0x05))
                    {
                        Local0 = 0x05
                    }

                    \_SB.PC00.LPCB.EC0.PLTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x02
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 > 0x7D))
                    {
                        Local0 = 0x7D
                    }

                    \_SB.PC00.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                }
            }

            Name (GTSH, 0x14)
            Name (S4PV, 0x41)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S4PV))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN6)
        {
            Name (_HID, "INTC1043")  // _HID: Hardware ID
            Name (_UID, "SEN6")  // _UID: Unique ID
            Name (_STR, Unicode ("Extra Skin Sensor 2"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (S6TH, Zero)
            Name (S6TL, Zero)
            Name (S6HO, 0x7D)
            Name (S6LO, 0x05)
            Name (S6CH, Zero)
            Name (S6CL, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S6PE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.SK1Z._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x07
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 < 0x05))
                    {
                        Local0 = 0x05
                    }

                    \_SB.PC00.LPCB.EC0.PLTP = Local0
                    S6TL = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    If ((S6TL < S6LO))
                    {
                        S6CL = 0x02
                    }
                    ElseIf ((S6TL > S6LO))
                    {
                        S6CL = One
                    }
                    Else
                    {
                        S6CL = Zero
                    }

                    If (CondRefOf (\_SB.IETM.DXGP)){}
                    S6LO = S6TL /* \_SB_.PC00.LPCB.EC0_.SEN6.S6TL */
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PC00.LPCB.EC0.CRZN = 0x07
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 > 0x7D))
                    {
                        Local0 = 0x7D
                    }

                    \_SB.PC00.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    S6TH = Local0
                    If ((S6TH < S6HO))
                    {
                        S6CH = 0x02
                    }
                    ElseIf ((S6TH > S6HO))
                    {
                        S6CH = One
                    }
                    Else
                    {
                        S6CH = Zero
                    }

                    If (CondRefOf (\_SB.IETM.DXGP)){}
                    S6HO = S6TH /* \_SB_.PC00.LPCB.EC0_.SEN6.S6TH */
                }
            }

            Name (GTSH, 0x14)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (\S6PT))
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (TRT0, Package (0x04)
        {
            Package (0x08)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.TCPU, 
                0x24, 
                0x32, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN1, 
                0x14, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN2, 
                0x64, 
                0x3C, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN3, 
                0x14, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Method (_TRT, 0, NotSerialized)  // _TRT: Thermal Relationship Table
        {
            Return (TRT0) /* \_SB_.IETM.TRT0 */
        }
    }

    Scope (\_SB.IETM)
    {
        Name (PTTL, 0x14)
        Name (PSVT, Package (0x03)
        {
            0x02, 
            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN1, 
                PV1D, 
                PV06, 
                PV01, 
                0x09, 
                0x00010000, 
                "MAX", 
                PV13, 
                PV09, 
                PV0D, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN2, 
                PV1E, 
                PV07, 
                PV02, 
                0x09, 
                0x00010000, 
                "MAX", 
                PV14, 
                PV0A, 
                PV0E, 
                Zero
            }
        })
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (RFIP, Package (0x01)
        {
            ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */
        })
    }

    Scope (\_SB.IETM)
    {
        Name (S1ON, Zero)
        Name (S2ON, Zero)
        Name (SSIX, Zero)
        Method (DTDC, 0, NotSerialized)
        {
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
        }

        Method (DTDD, 0, NotSerialized)
        {
            ODV0 = Zero
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
        }

        Method (CCON, 0, NotSerialized)
        {
            ODV1 = One
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
            If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
            {
                \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
            }
        }

        Method (CCOF, 0, NotSerialized)
        {
            ODV1 = Zero
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
            If (CondRefOf (\_SB.PC00.LPCB.EC0.UDTS))
            {
                \_SB.PC00.LPCB.EC0.UDTS (Zero, Zero)
            }
        }

        Method (DXGP, 3, NotSerialized)
        {
            If ((\_SB.IETM.DOSS == One))
            {
                If ((Arg0 == One))
                {
                    If (((Arg1 == Zero) && (Arg2 == One)))
                    {
                        S1ON = One
                    }
                    ElseIf (((Arg1 == One) && (Arg2 == One))){}
                    Else
                    {
                        S1ON = Zero
                    }
                }

                SSIX |= One
                If ((Arg0 == 0x02))
                {
                    If (((Arg1 == Zero) && (Arg2 == One)))
                    {
                        S2ON = One
                    }
                    ElseIf (((Arg1 == One) && (Arg2 == One))){}
                    Else
                    {
                        S2ON = Zero
                    }
                }

                SSIX |= 0x02
                If (((Arg0 == 0x03) && (SSIX != Zero)))
                {
                    If ((SSIX >= One))
                    {
                        If (CondRefOf (\_SB.PC00.LPCB.EC0.SEN1.S1CH))
                        {
                            If (((\_SB.PC00.LPCB.EC0.SEN1.S1CH == Zero) && (\_SB.PC00.LPCB.EC0.SEN1.S1CL == One)))
                            {
                                S1ON = One
                            }
                            ElseIf (((\_SB.PC00.LPCB.EC0.SEN1.S1CH == One) && (\_SB.PC00.LPCB.EC0.SEN1.S1CL == One))){}
                            Else
                            {
                                S1ON = Zero
                            }
                        }
                    }

                    If ((SSIX >= 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.LPCB.EC0.SEN2.S2CH))
                        {
                            If (((\_SB.PC00.LPCB.EC0.SEN2.S2CH == Zero) && (\_SB.PC00.LPCB.EC0.SEN2.S2CL == One)))
                            {
                                S2ON = One
                            }
                            ElseIf (((\_SB.PC00.LPCB.EC0.SEN2.S2CH == One) && (\_SB.PC00.LPCB.EC0.SEN2.S2CL == One))){}
                            Else
                            {
                                S2ON = Zero
                            }
                        }
                    }
                }

                \_SB.PC00.LPCB.EC0.DGPS (SSIX, S1ON, S2ON, One)
            }
            Else
            {
                \_SB.PC00.LPCB.EC0.DGPS (Zero, Zero, Zero, One)
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            If (CondRefOf (\_SB.IETM.ODVP))
            {
                \_SB.IETM.ODVP ()
                Notify (\_SB.IETM, 0x88) // Device-Specific
            }

            Switch (HPID)
            {
                Case (Package (0x04)
                    {
                        0x103C00B0, 
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB
                    }

)
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x089E)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x34, 0x30, 0x30, 0x5F,  // ...@400_
                            /* 0010 */  0x64, 0x74, 0x74, 0x5F, 0x67, 0x70, 0x75, 0x5F,  // dtt_gpu_
                            /* 0018 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                            /* 0020 */  0x61, 0x6E, 0x74, 0x5F, 0x32, 0x30, 0x32, 0x30,  // ant_2020
                            /* 0028 */  0x31, 0x32, 0x30, 0x38, 0x34, 0x30, 0x30, 0x5F,  // 1208400_
                            /* 0030 */  0x44, 0x54, 0x54, 0x5F, 0x47, 0x50, 0x55, 0x5F,  // DTT_GPU_
                            /* 0038 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                            /* 0040 */  0x61, 0x6E, 0x74, 0x5F, 0x32, 0x30, 0x32, 0x30,  // ant_2020
                            /* 0048 */  0x31, 0x32, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00,  // 1208....
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xF9, 0xCA, 0x24, 0x9C,  // ......$.
                            /* 0070 */  0x00, 0x37, 0x09, 0xA2, 0x6F, 0xBF, 0x22, 0xC3,  // .7..o.".
                            /* 0078 */  0x5E, 0xA4, 0x6E, 0xBC, 0x31, 0x86, 0x2B, 0x6D,  // ^.n.1.+m
                            /* 0080 */  0x0F, 0x14, 0x0D, 0x60, 0xC0, 0x88, 0x85, 0x8B,  // ...`....
                            /* 0088 */  0xEC, 0xD7, 0x7C, 0x9D, 0x0A, 0x08, 0x00, 0x00,  // ..|.....
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x06, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0xC6, 0xD6,  // u8...D..
                            /* 00D0 */  0x61, 0x68, 0x30, 0x51, 0x0E, 0xDE, 0x5C, 0x81,  // ah0Q..\.
                            /* 00D8 */  0x89, 0x65, 0xAE, 0xCE, 0xBD, 0xF8, 0x2B, 0x5D,  // .e....+]
                            /* 00E0 */  0x7B, 0x65, 0xB2, 0x43, 0x7D, 0xDD, 0x45, 0x4C,  // {e.C}.EL
                            /* 00E8 */  0x9C, 0x82, 0x53, 0x84, 0xAA, 0xA9, 0xA5, 0x27,  // ..S....'
                            /* 00F0 */  0xBA, 0x18, 0xB5, 0xDB, 0x79, 0xEA, 0x54, 0x92,  // ....y.T.
                            /* 00F8 */  0x0C, 0xED, 0x45, 0x29, 0x58, 0x66, 0xC0, 0xCD,  // ..E)Xf..
                            /* 0100 */  0x22, 0xFA, 0xA0, 0x28, 0x86, 0x61, 0xFD, 0x60,  // "..(.a.`
                            /* 0108 */  0x2B, 0xF4, 0x4B, 0x2D, 0x67, 0x60, 0xC7, 0xDF,  // +.K-g`..
                            /* 0110 */  0x02, 0xC4, 0x8C, 0xA8, 0x07, 0x03, 0x50, 0x2E,  // ......P.
                            /* 0118 */  0xE1, 0xB0, 0x7A, 0xD3, 0xF3, 0xD9, 0x1C, 0x52,  // ..z....R
                            /* 0120 */  0xBE, 0x7E, 0x4E, 0x70, 0x60, 0xD3, 0xA1, 0x62,  // .~Np`..b
                            /* 0128 */  0x6A, 0x3D, 0x85, 0xFE, 0x33, 0x31, 0x21, 0x44,  // j=..31!D
                            /* 0130 */  0x6D, 0x0E, 0xEE, 0x98, 0x38, 0xED, 0x0D, 0x1E,  // m...8...
                            /* 0138 */  0x04, 0xF9, 0xFC, 0x09, 0xB2, 0x67, 0xB8, 0xEE,  // .....g..
                            /* 0140 */  0x3A, 0x4C, 0xE3, 0x5A, 0x61, 0x63, 0x0B, 0x2D,  // :L.Zac.-
                            /* 0148 */  0x11, 0xD6, 0xA2, 0xF5, 0xF5, 0xEE, 0x8C, 0x45,  // .......E
                            /* 0150 */  0xD2, 0x95, 0x83, 0x2F, 0xBD, 0xA5, 0x0A, 0x04,  // .../....
                            /* 0158 */  0xC5, 0xF1, 0x3A, 0x07, 0x19, 0xE6, 0xA2, 0xEF,  // ..:.....
                            /* 0160 */  0x47, 0xF9, 0xCF, 0x0E, 0xBB, 0x75, 0xC5, 0x13,  // G....u..
                            /* 0168 */  0x88, 0xE3, 0xA0, 0x72, 0x6F, 0x9B, 0xDF, 0x6E,  // ...ro..n
                            /* 0170 */  0xFF, 0x6B, 0x6D, 0x87, 0x2B, 0xA9, 0xA0, 0xAF,  // .km.+...
                            /* 0178 */  0xC5, 0x5D, 0xF2, 0xE9, 0xBE, 0xA1, 0x10, 0x3A,  // .].....:
                            /* 0180 */  0x4F, 0xEF, 0x24, 0xFF, 0x81, 0x42, 0x8F, 0x7E,  // O.$..B.~
                            /* 0188 */  0x37, 0x36, 0x62, 0x8B, 0x09, 0x1E, 0xAE, 0x2D,  // 76b....-
                            /* 0190 */  0xC6, 0xE6, 0x8A, 0x19, 0x7F, 0x0B, 0x25, 0xEB,  // ......%.
                            /* 0198 */  0x90, 0x2F, 0xBD, 0x46, 0x63, 0x1A, 0x41, 0x62,  // ./.Fc.Ab
                            /* 01A0 */  0x0B, 0xD4, 0x11, 0x6F, 0x68, 0xD2, 0xD7, 0x89,  // ...oh...
                            /* 01A8 */  0x90, 0x5E, 0x14, 0x2F, 0xCE, 0x2A, 0xE9, 0x4C,  // .^./.*.L
                            /* 01B0 */  0x9B, 0x87, 0xCD, 0xD0, 0x81, 0xE4, 0xDE, 0x8A,  // ........
                            /* 01B8 */  0xA7, 0xBB, 0x6D, 0xBC, 0xAA, 0x99, 0xAD, 0xB5,  // ..m.....
                            /* 01C0 */  0x44, 0xC7, 0x43, 0xB9, 0xAF, 0x5B, 0x5F, 0x06,  // D.C..[_.
                            /* 01C8 */  0x67, 0x84, 0x00, 0xB3, 0x6E, 0xC6, 0x1F, 0x49,  // g...n..I
                            /* 01D0 */  0xBA, 0x4A, 0x66, 0x94, 0xB5, 0xD8, 0xC3, 0x74,  // .Jf....t
                            /* 01D8 */  0x72, 0x53, 0xC6, 0x60, 0x57, 0x15, 0xD2, 0x3B,  // rS.`W..;
                            /* 01E0 */  0xC4, 0x91, 0x79, 0x8C, 0x22, 0x7E, 0x34, 0xEE,  // ..y."~4.
                            /* 01E8 */  0x13, 0x9B, 0xAE, 0x72, 0x12, 0x01, 0xE9, 0x52,  // ...r...R
                            /* 01F0 */  0x8A, 0x40, 0xEA, 0xBE, 0xF0, 0xE6, 0x93, 0x75,  // .@.....u
                            /* 01F8 */  0x85, 0xA8, 0x88, 0xDB, 0xA7, 0xF2, 0x38, 0xBD,  // ......8.
                            /* 0200 */  0x91, 0x66, 0xDE, 0xE5, 0xD7, 0x17, 0x61, 0x69,  // .f....ai
                            /* 0208 */  0x17, 0xD5, 0xB6, 0xCA, 0x6D, 0x74, 0x34, 0x5D,  // ....mt4]
                            /* 0210 */  0xEE, 0x82, 0xEF, 0x53, 0x19, 0x20, 0x0D, 0x1F,  // ...S. ..
                            /* 0218 */  0x36, 0x72, 0xDF, 0x6A, 0x24, 0xEA, 0x52, 0x6C,  // 6r.j$.Rl
                            /* 0220 */  0xAA, 0xD0, 0x0C, 0xE4, 0x5C, 0xEF, 0xB3, 0x72,  // ....\..r
                            /* 0228 */  0x22, 0x9C, 0xD6, 0x12, 0x97, 0x96, 0x93, 0x98,  // ".......
                            /* 0230 */  0x09, 0x37, 0xC4, 0x1F, 0xA5, 0x49, 0x16, 0x87,  // .7...I..
                            /* 0238 */  0x52, 0xBF, 0x2C, 0xC5, 0xF4, 0x84, 0x0F, 0x9D,  // R.,.....
                            /* 0240 */  0x98, 0xB3, 0x25, 0xF5, 0x93, 0xB2, 0xE8, 0x06,  // ..%.....
                            /* 0248 */  0xBD, 0xFD, 0x57, 0x7A, 0x2E, 0x61, 0x83, 0x7D,  // ..Wz.a.}
                            /* 0250 */  0x9A, 0xC5, 0x8F, 0xFB, 0x5C, 0xE0, 0x91, 0x21,  // ....\..!
                            /* 0258 */  0x84, 0x1E, 0xC2, 0xF2, 0x34, 0xE2, 0x8D, 0xF3,  // ....4...
                            /* 0260 */  0xA0, 0x0B, 0x03, 0x08, 0x14, 0x01, 0x2D, 0xED,  // ......-.
                            /* 0268 */  0xBC, 0x63, 0x91, 0xE6, 0x47, 0x4B, 0x67, 0x68,  // .c..GKgh
                            /* 0270 */  0x23, 0x7F, 0x59, 0x57, 0xC4, 0x03, 0x88, 0x2B,  // #.YW...+
                            /* 0278 */  0xC3, 0xC4, 0x8A, 0xA3, 0xFF, 0xA4, 0xE8, 0xD0,  // ........
                            /* 0280 */  0xFB, 0x1F, 0x25, 0x82, 0x96, 0xBE, 0xDC, 0x4F,  // ..%....O
                            /* 0288 */  0xBD, 0xFD, 0x7B, 0x8D, 0xE4, 0xE0, 0xDF, 0x20,  // ..{.... 
                            /* 0290 */  0x39, 0xF6, 0xFE, 0x1A, 0x1C, 0xFE, 0x67, 0x79,  // 9.....gy
                            /* 0298 */  0x8A, 0x1D, 0x22, 0x2D, 0x8B, 0x88, 0x76, 0x8B,  // .."-..v.
                            /* 02A0 */  0x8B, 0x71, 0xCB, 0x89, 0x59, 0x25, 0x0F, 0x07,  // .q..Y%..
                            /* 02A8 */  0xC9, 0x53, 0x72, 0xA4, 0xB2, 0x07, 0xA9, 0xEF,  // .Sr.....
                            /* 02B0 */  0xC4, 0x53, 0x00, 0x14, 0x4B, 0x1A, 0xDE, 0x07,  // .S..K...
                            /* 02B8 */  0x3B, 0x9B, 0xB3, 0x97, 0xF3, 0x16, 0x4E, 0x13,  // ;.....N.
                            /* 02C0 */  0x5E, 0xF9, 0x82, 0x4F, 0xA3, 0x74, 0x53, 0x26,  // ^..O.tS&
                            /* 02C8 */  0xD1, 0x08, 0xAB, 0xE9, 0xEE, 0x25, 0x7E, 0x25,  // .....%~%
                            /* 02D0 */  0x01, 0xA1, 0x6A, 0x8B, 0xF5, 0xD5, 0x41, 0x8D,  // ..j...A.
                            /* 02D8 */  0x92, 0x3D, 0xA8, 0x31, 0x62, 0xD0, 0xFA, 0x86,  // .=.1b...
                            /* 02E0 */  0xED, 0xE4, 0xCB, 0x74, 0x2D, 0x60, 0x7A, 0x99,  // ...t-`z.
                            /* 02E8 */  0x92, 0x32, 0x68, 0x51, 0xC2, 0x79, 0x76, 0xEB,  // .2hQ.yv.
                            /* 02F0 */  0x20, 0x72, 0x43, 0xE9, 0x98, 0x57, 0xA4, 0xC7,  //  rC..W..
                            /* 02F8 */  0x22, 0x01, 0x82, 0x31, 0x15, 0x12, 0x3B, 0x8E,  // "..1..;.
                            /* 0300 */  0xAD, 0xF8, 0x25, 0x4F, 0x1E, 0x58, 0x71, 0x3A,  // ..%O.Xq:
                            /* 0308 */  0x7B, 0x89, 0x4C, 0x66, 0x28, 0x43, 0xD2, 0x3C,  // {.Lf(C.<
                            /* 0310 */  0x23, 0xA4, 0x1E, 0x59, 0x1F, 0x2C, 0x03, 0xBB,  // #..Y.,..
                            /* 0318 */  0xE6, 0xED, 0xEB, 0x4A, 0x5C, 0x72, 0xD1, 0xDF,  // ...J\r..
                            /* 0320 */  0x63, 0x82, 0xFC, 0x18, 0x1D, 0x9F, 0xF8, 0x3C,  // c......<
                            /* 0328 */  0x9C, 0xFC, 0x90, 0x9F, 0xEC, 0x61, 0x61, 0xD9,  // .....aa.
                            /* 0330 */  0x90, 0xAB, 0xD6, 0xA2, 0x98, 0x23, 0x5E, 0xE7,  // .....#^.
                            /* 0338 */  0xF9, 0xEE, 0x5E, 0xFD, 0x8B, 0xD0, 0xD8, 0x33,  // ..^....3
                            /* 0340 */  0xF2, 0x4E, 0x46, 0x7A, 0x5E, 0x61, 0x96, 0x2D,  // .NFz^a.-
                            /* 0348 */  0xD7, 0x9D, 0xC3, 0xD4, 0x1C, 0xA6, 0x1C, 0x3D,  // .......=
                            /* 0350 */  0x20, 0x8A, 0x73, 0xC4, 0x5F, 0xB2, 0x85, 0x8C,  //  .s._...
                            /* 0358 */  0xC3, 0xBC, 0xC8, 0x0D, 0xA8, 0x2A, 0xD2, 0x04,  // .....*..
                            /* 0360 */  0x1E, 0x7D, 0x3A, 0xD6, 0xD6, 0xC9, 0x1F, 0x7A,  // .}:....z
                            /* 0368 */  0xAA, 0x41, 0x6F, 0x78, 0x26, 0x3A, 0x0A, 0xC7,  // .Aox&:..
                            /* 0370 */  0x5D, 0xD1, 0x44, 0x53, 0xDF, 0x35, 0xC7, 0xA7,  // ].DS.5..
                            /* 0378 */  0x1D, 0xC1, 0x2E, 0xBF, 0x83, 0x22, 0xD6, 0xA6,  // ....."..
                            /* 0380 */  0x6E, 0xA3, 0xB3, 0x4E, 0x2F, 0xB9, 0x4D, 0x1B,  // n..N/.M.
                            /* 0388 */  0xAB, 0x63, 0xBB, 0xC1, 0xE4, 0x1C, 0xBF, 0xAB,  // .c......
                            /* 0390 */  0x2A, 0x15, 0xC1, 0x71, 0x05, 0xD5, 0xB0, 0x23,  // *..q...#
                            /* 0398 */  0x5B, 0x42, 0xF7, 0x90, 0xA9, 0x81, 0x35, 0x9F,  // [B....5.
                            /* 03A0 */  0xEE, 0x2B, 0x5E, 0x5E, 0x93, 0x41, 0xDE, 0xD1,  // .+^^.A..
                            /* 03A8 */  0x87, 0x83, 0x55, 0x9F, 0x3A, 0xD9, 0xA1, 0x83,  // ..U.:...
                            /* 03B0 */  0xE6, 0x89, 0x7F, 0xFD, 0x57, 0xDA, 0xEE, 0x03,  // ....W...
                            /* 03B8 */  0x06, 0x28, 0x0A, 0x5C, 0x65, 0xB7, 0x5F, 0x79,  // .(.\e._y
                            /* 03C0 */  0x73, 0x89, 0xC3, 0x0D, 0xD9, 0xBD, 0x95, 0x06,  // s.......
                            /* 03C8 */  0xF7, 0xBB, 0x3C, 0x15, 0xB0, 0xD3, 0x69, 0x78,  // ..<...ix
                            /* 03D0 */  0x46, 0x9C, 0x1F, 0x35, 0x87, 0x6C, 0x2B, 0xA1,  // F..5.l+.
                            /* 03D8 */  0x4E, 0x7A, 0x10, 0x4C, 0xD6, 0x5B, 0x2E, 0xFB,  // Nz.L.[..
                            /* 03E0 */  0x6F, 0x49, 0xF8, 0x4E, 0x91, 0xD4, 0x39, 0x21,  // oI.N..9!
                            /* 03E8 */  0x3C, 0xC9, 0x80, 0x43, 0x93, 0xB6, 0x0A, 0xED,  // <..C....
                            /* 03F0 */  0x06, 0x62, 0x48, 0xB4, 0x0E, 0xFB, 0xDC, 0xD5,  // .bH.....
                            /* 03F8 */  0x3E, 0x6B, 0x74, 0x24, 0x4E, 0x7C, 0xD6, 0xA8,  // >kt$N|..
                            /* 0400 */  0x53, 0x74, 0x14, 0x9B, 0x62, 0x73, 0xDB, 0xCE,  // St..bs..
                            /* 0408 */  0xE2, 0x7F, 0xC0, 0x4A, 0x00, 0xBA, 0xDB, 0xE1,  // ...J....
                            /* 0410 */  0x0C, 0xFB, 0x70, 0x56, 0x61, 0x24, 0x7C, 0xB9,  // ..pVa$|.
                            /* 0418 */  0x77, 0x43, 0xD2, 0xB0, 0x4E, 0x30, 0x4B, 0x14,  // wC..N0K.
                            /* 0420 */  0x5C, 0xB1, 0x7A, 0x32, 0xB9, 0x72, 0xD3, 0x84,  // \.z2.r..
                            /* 0428 */  0x31, 0xE2, 0x26, 0xE4, 0x7D, 0xE1, 0x9F, 0xB4,  // 1.&.}...
                            /* 0430 */  0x0B, 0xEB, 0x17, 0xCB, 0xE6, 0x49, 0xBE, 0xD7,  // .....I..
                            /* 0438 */  0xD8, 0x8D, 0x53, 0xA7, 0x7C, 0xA3, 0x25, 0x09,  // ..S.|.%.
                            /* 0440 */  0x9B, 0x23, 0x51, 0x0A, 0x56, 0xF7, 0xB1, 0xAE,  // .#Q.V...
                            /* 0448 */  0xF1, 0x2B, 0x8B, 0x6B, 0xB0, 0xBB, 0x0D, 0xB4,  // .+.k....
                            /* 0450 */  0x01, 0x25, 0x81, 0x18, 0x17, 0x3F, 0x3E, 0x91,  // .%...?>.
                            /* 0458 */  0xD0, 0xFC, 0x1A, 0x52, 0xFF, 0x03, 0xCA, 0xAF,  // ...R....
                            /* 0460 */  0xD9, 0xF0, 0xC7, 0xEA, 0xEC, 0xAE, 0x7C, 0x4C,  // ......|L
                            /* 0468 */  0xFD, 0x8C, 0xF0, 0xAB, 0xE5, 0x8C, 0x0F, 0xCC,  // ........
                            /* 0470 */  0xCE, 0x35, 0xA1, 0x4A, 0x5D, 0x6E, 0x97, 0x1D,  // .5.J]n..
                            /* 0478 */  0x5D, 0x96, 0x41, 0xD1, 0x71, 0x9D, 0xD8, 0x3B,  // ].A.q..;
                            /* 0480 */  0x03, 0xE3, 0x9A, 0xF5, 0x33, 0xAC, 0x95, 0xB4,  // ....3...
                            /* 0488 */  0x7B, 0xA0, 0x9B, 0x30, 0x91, 0x35, 0x33, 0xC7,  // {..0.53.
                            /* 0490 */  0x6A, 0x05, 0x55, 0x06, 0x51, 0x51, 0xCE, 0xFF,  // j.U.QQ..
                            /* 0498 */  0x84, 0x1A, 0xFC, 0xB4, 0x4E, 0x17, 0x70, 0xDD,  // ....N.p.
                            /* 04A0 */  0xFF, 0x4D, 0x33, 0x13, 0x49, 0x3B, 0x6B, 0xE5,  // .M3.I;k.
                            /* 04A8 */  0x67, 0x80, 0x10, 0xAB, 0x52, 0x78, 0x5C, 0x98,  // g...Rx\.
                            /* 04B0 */  0x74, 0xCA, 0x11, 0x9E, 0x84, 0x7D, 0x53, 0x6F,  // t....}So
                            /* 04B8 */  0xB7, 0x20, 0xF1, 0x2E, 0x76, 0x49, 0x30, 0x96,  // . ..vI0.
                            /* 04C0 */  0x6D, 0x02, 0x57, 0xA5, 0x1B, 0xF7, 0xE0, 0x9C,  // m.W.....
                            /* 04C8 */  0xF1, 0x71, 0x07, 0x7C, 0x12, 0xB9, 0xE3, 0xD4,  // .q.|....
                            /* 04D0 */  0x3A, 0x86, 0xAE, 0x54, 0x31, 0xCE, 0x9B, 0x1C,  // :..T1...
                            /* 04D8 */  0xBC, 0x3C, 0xDE, 0xA7, 0x74, 0xCA, 0x39, 0xDA,  // .<..t.9.
                            /* 04E0 */  0x63, 0x4A, 0x2D, 0x70, 0xD9, 0x47, 0x6B, 0x27,  // cJ-p.Gk'
                            /* 04E8 */  0x30, 0x43, 0x9E, 0xAB, 0x1E, 0x86, 0x6F, 0xD3,  // 0C....o.
                            /* 04F0 */  0xBA, 0x16, 0x59, 0xF4, 0x1E, 0xBD, 0x96, 0x3A,  // ..Y....:
                            /* 04F8 */  0x45, 0x62, 0x16, 0x47, 0x5C, 0xF3, 0xDC, 0xB6,  // Eb.G\...
                            /* 0500 */  0xC8, 0x64, 0x4A, 0xCF, 0x1A, 0x27, 0xBF, 0x0C,  // .dJ..'..
                            /* 0508 */  0xC8, 0xF5, 0x97, 0x6A, 0xF6, 0xD6, 0xB3, 0xEB,  // ...j....
                            /* 0510 */  0x50, 0x39, 0x50, 0x4F, 0xCB, 0xFA, 0x38, 0xCA,  // P9PO..8.
                            /* 0518 */  0xB0, 0x46, 0x33, 0xFB, 0xE9, 0xB2, 0x44, 0x26,  // .F3...D&
                            /* 0520 */  0xA7, 0xA0, 0x25, 0x62, 0x0E, 0x31, 0x6F, 0xB2,  // ..%b.1o.
                            /* 0528 */  0x6B, 0x8B, 0x97, 0xA4, 0x58, 0x5B, 0x4C, 0x7A,  // k...X[Lz
                            /* 0530 */  0x7D, 0xDA, 0xD2, 0xC0, 0xD2, 0x74, 0x06, 0xF0,  // }....t..
                            /* 0538 */  0xF0, 0x39, 0x35, 0x4F, 0x5D, 0x68, 0x1E, 0x7F,  // .95O]h..
                            /* 0540 */  0x1B, 0x5E, 0x18, 0xFE, 0xF4, 0xF2, 0x76, 0x3C,  // .^....v<
                            /* 0548 */  0x33, 0x23, 0xE6, 0xA6, 0x92, 0xD6, 0x39, 0x64,  // 3#....9d
                            /* 0550 */  0x25, 0x03, 0x1C, 0xA9, 0x58, 0x87, 0xB5, 0x16,  // %...X...
                            /* 0558 */  0x39, 0xC7, 0xF8, 0x4A, 0x2E, 0x24, 0x79, 0xD0,  // 9..J.$y.
                            /* 0560 */  0x5F, 0x88, 0x5C, 0xBE, 0x41, 0x73, 0xD7, 0x73,  // _.\.As.s
                            /* 0568 */  0xBB, 0x23, 0x28, 0xEB, 0xB6, 0x58, 0x8A, 0xCE,  // .#(..X..
                            /* 0570 */  0x4D, 0x43, 0x59, 0xC1, 0xB4, 0x98, 0xD3, 0xC6,  // MCY.....
                            /* 0578 */  0x41, 0x94, 0xE9, 0x86, 0x65, 0x45, 0x1D, 0x74,  // A...eE.t
                            /* 0580 */  0x89, 0xCD, 0x38, 0xA3, 0x82, 0x1B, 0x7B, 0x87,  // ..8...{.
                            /* 0588 */  0x5D, 0x4B, 0xC7, 0xFE, 0xF5, 0x45, 0x6A, 0xAB,  // ]K...Ej.
                            /* 0590 */  0xF8, 0x71, 0xA7, 0xD4, 0x4E, 0x95, 0x1B, 0xCD,  // .q..N...
                            /* 0598 */  0x68, 0xA6, 0x82, 0xF8, 0x1E, 0x1D, 0xFD, 0xC3,  // h.......
                            /* 05A0 */  0xB9, 0x1A, 0xE8, 0x54, 0xC5, 0x0A, 0x24, 0x05,  // ...T..$.
                            /* 05A8 */  0x9E, 0x32, 0x2F, 0xE0, 0x9F, 0x8F, 0x9F, 0xFB,  // .2/.....
                            /* 05B0 */  0xDC, 0x20, 0xDE, 0x0D, 0x07, 0x13, 0x92, 0xB6,  // . ......
                            /* 05B8 */  0x12, 0x47, 0x67, 0xC7, 0x25, 0x00, 0x9F, 0xA5,  // .Gg.%...
                            /* 05C0 */  0x5F, 0xF1, 0x1E, 0x1B, 0xCB, 0x31, 0xF2, 0x22,  // _....1."
                            /* 05C8 */  0xD4, 0x7A, 0x5A, 0x4D, 0xD1, 0x79, 0x1A, 0x61,  // .zZM.y.a
                            /* 05D0 */  0xFB, 0x41, 0x1A, 0xD3, 0xEC, 0xFE, 0x8C, 0x31,  // .A.....1
                            /* 05D8 */  0xF7, 0x0A, 0xB5, 0x41, 0x50, 0x33, 0x59, 0x47,  // ...AP3YG
                            /* 05E0 */  0x8E, 0x2C, 0xE1, 0x51, 0x9C, 0x32, 0x02, 0xE3,  // .,.Q.2..
                            /* 05E8 */  0x09, 0x27, 0x87, 0xBF, 0xA7, 0x0F, 0x3B, 0x7E,  // .'....;~
                            /* 05F0 */  0x4D, 0x41, 0xEE, 0x52, 0x4A, 0x07, 0xCE, 0x88,  // MA.RJ...
                            /* 05F8 */  0x51, 0x35, 0xDB, 0x10, 0xAD, 0x17, 0xAC, 0x2D,  // Q5.....-
                            /* 0600 */  0x83, 0x4C, 0xA5, 0xA8, 0x94, 0x61, 0x71, 0xDA,  // .L...aq.
                            /* 0608 */  0x71, 0x3E, 0x1A, 0x51, 0x7D, 0xA1, 0x0C, 0x0D,  // q>.Q}...
                            /* 0610 */  0x49, 0x72, 0x6A, 0x93, 0xA7, 0xFB, 0x27, 0xF0,  // Irj...'.
                            /* 0618 */  0xF1, 0x45, 0xF3, 0x76, 0x33, 0xBC, 0x67, 0xB1,  // .E.v3.g.
                            /* 0620 */  0xE1, 0xE6, 0x6A, 0x4D, 0x44, 0x52, 0x04, 0x1D,  // ..jMDR..
                            /* 0628 */  0xD0, 0xC7, 0xCC, 0x0F, 0x4F, 0x74, 0xD1, 0x4F,  // ....Ot.O
                            /* 0630 */  0x67, 0x1A, 0xAA, 0x7B, 0x77, 0xF1, 0x9F, 0x4A,  // g..{w..J
                            /* 0638 */  0xED, 0x1D, 0x32, 0xF3, 0xA0, 0xF4, 0x6B, 0x25,  // ..2...k%
                            /* 0640 */  0x43, 0xBE, 0x33, 0x31, 0xF5, 0x86, 0xCB, 0x9A,  // C.31....
                            /* 0648 */  0xFB, 0xEC, 0x5D, 0x7C, 0xC0, 0xA4, 0xD0, 0x02,  // ..]|....
                            /* 0650 */  0x1D, 0x20, 0x69, 0x44, 0x92, 0x7F, 0x41, 0x37,  // . iD..A7
                            /* 0658 */  0x03, 0xB3, 0xF8, 0x9E, 0x71, 0x21, 0x80, 0x2C,  // ....q!.,
                            /* 0660 */  0x90, 0x66, 0x1C, 0xCD, 0x78, 0xD4, 0xFB, 0xFE,  // .f..x...
                            /* 0668 */  0x5B, 0x54, 0x40, 0x80, 0xAD, 0x9D, 0x3E, 0x06,  // [T@...>.
                            /* 0670 */  0x2A, 0xE3, 0xCA, 0x62, 0x12, 0x9D, 0x34, 0x63,  // *..b..4c
                            /* 0678 */  0xBC, 0xB6, 0xB6, 0xC6, 0x33, 0xB6, 0x91, 0x4E,  // ....3..N
                            /* 0680 */  0x67, 0xDD, 0x04, 0x2A, 0xB6, 0x4D, 0x11, 0x08,  // g..*.M..
                            /* 0688 */  0x49, 0xA1, 0xCD, 0x0D, 0x43, 0xCC, 0x03, 0xE9,  // I...C...
                            /* 0690 */  0x78, 0x26, 0x46, 0x4F, 0x30, 0x6C, 0x0D, 0xFB,  // x&FO0l..
                            /* 0698 */  0x74, 0x73, 0x2E, 0x5D, 0xB5, 0x5C, 0xB6, 0x0F,  // ts.].\..
                            /* 06A0 */  0x5F, 0xE7, 0xC5, 0xEB, 0xC7, 0x95, 0xA0, 0x61,  // _......a
                            /* 06A8 */  0xF3, 0xCC, 0x74, 0x7A, 0x8A, 0x43, 0x20, 0x26,  // ..tz.C &
                            /* 06B0 */  0x00, 0xF6, 0xC4, 0x9B, 0x9D, 0x93, 0x1D, 0x55,  // .......U
                            /* 06B8 */  0x47, 0x16, 0xDB, 0xC2, 0xD7, 0x17, 0x57, 0x22,  // G.....W"
                            /* 06C0 */  0xEC, 0xBC, 0x69, 0x84, 0x46, 0xBA, 0xA9, 0xF0,  // ..i.F...
                            /* 06C8 */  0xE8, 0x8F, 0x3B, 0x6C, 0x89, 0x22, 0x7F, 0xDB,  // ..;l."..
                            /* 06D0 */  0x58, 0xF4, 0x0C, 0xDF, 0x59, 0xC8, 0x37, 0xD5,  // X...Y.7.
                            /* 06D8 */  0xF6, 0x97, 0xC2, 0x96, 0x37, 0x2F, 0xC9, 0xE8,  // ....7/..
                            /* 06E0 */  0xFD, 0xE9, 0x61, 0x19, 0x02, 0x35, 0xC8, 0x87,  // ..a..5..
                            /* 06E8 */  0x77, 0x45, 0xA2, 0x0E, 0x4E, 0xA2, 0xD4, 0x48,  // wE..N..H
                            /* 06F0 */  0xE7, 0xCB, 0x43, 0x4A, 0xC2, 0xB4, 0xF5, 0x77,  // ..CJ...w
                            /* 06F8 */  0x4D, 0x4A, 0x69, 0x30, 0x05, 0x0F, 0xC4, 0x84,  // MJi0....
                            /* 0700 */  0x03, 0x0E, 0x75, 0xD0, 0xBC, 0xB0, 0x5B, 0x6B,  // ..u...[k
                            /* 0708 */  0xF4, 0x46, 0x60, 0xFF, 0xAC, 0xAE, 0x9F, 0xCD,  // .F`.....
                            /* 0710 */  0xF4, 0x76, 0x7F, 0x59, 0x51, 0x2B, 0x34, 0x73,  // .v.YQ+4s
                            /* 0718 */  0x72, 0x29, 0x90, 0xC7, 0x2B, 0x25, 0xCC, 0xC6,  // r)..+%..
                            /* 0720 */  0x64, 0xDC, 0xE0, 0xF2, 0xB6, 0x84, 0xED, 0x3B,  // d......;
                            /* 0728 */  0xED, 0xE9, 0xB1, 0x00, 0x39, 0xB0, 0x73, 0xB6,  // ....9.s.
                            /* 0730 */  0x8B, 0x6B, 0xE2, 0x8C, 0xE0, 0xEF, 0x61, 0x98,  // .k....a.
                            /* 0738 */  0x29, 0x98, 0xEA, 0x07, 0xAE, 0xA4, 0x2D, 0x11,  // ).....-.
                            /* 0740 */  0x5E, 0xE6, 0x09, 0x61, 0x44, 0xE7, 0xFC, 0xBD,  // ^..aD...
                            /* 0748 */  0x7D, 0x23, 0xE7, 0x35, 0x09, 0xBB, 0x08, 0xD1,  // }#.5....
                            /* 0750 */  0xAE, 0x45, 0x76, 0x35, 0xAF, 0x14, 0x41, 0xED,  // .Ev5..A.
                            /* 0758 */  0x0E, 0x0D, 0x4E, 0x21, 0x65, 0x7F, 0x0F, 0xA0,  // ..N!e...
                            /* 0760 */  0xCA, 0x19, 0xE2, 0x92, 0x54, 0xEB, 0x1A, 0x43,  // ....T..C
                            /* 0768 */  0x4E, 0x4F, 0xC7, 0xB1, 0xA9, 0xFE, 0x57, 0xCC,  // NO....W.
                            /* 0770 */  0xE2, 0xDE, 0x9D, 0xF1, 0xD9, 0xC7, 0x40, 0x5E,  // ......@^
                            /* 0778 */  0x11, 0xDB, 0xEC, 0x87, 0xBC, 0x42, 0xFF, 0xB0,  // .....B..
                            /* 0780 */  0xC9, 0x02, 0xAE, 0x81, 0xC8, 0xED, 0x5F, 0xA1,  // ......_.
                            /* 0788 */  0x22, 0x45, 0x55, 0xCC, 0x3D, 0x69, 0x89, 0xEB,  // "EU.=i..
                            /* 0790 */  0x27, 0x21, 0xBE, 0xE4, 0xD0, 0x45, 0x76, 0xC6,  // '!...Ev.
                            /* 0798 */  0xB9, 0xA5, 0x36, 0x43, 0x87, 0x4C, 0xD1, 0xD4,  // ..6C.L..
                            /* 07A0 */  0x4B, 0xAC, 0x90, 0x85, 0x68, 0xD6, 0xCE, 0x56,  // K...h..V
                            /* 07A8 */  0xC8, 0x2A, 0x71, 0xA6, 0x4F, 0xDA, 0x9B, 0x6C,  // .*q.O..l
                            /* 07B0 */  0x69, 0xA1, 0xAF, 0xD7, 0xD1, 0x23, 0x9B, 0x02,  // i....#..
                            /* 07B8 */  0x23, 0x79, 0x60, 0x96, 0x27, 0x5F, 0xE0, 0x93,  // #y`.'_..
                            /* 07C0 */  0x88, 0x61, 0x4B, 0xB6, 0xE4, 0xB7, 0x59, 0x27,  // .aK...Y'
                            /* 07C8 */  0xB2, 0x5C, 0x9A, 0x8B, 0xE0, 0xA8, 0xC3, 0xE0,  // .\......
                            /* 07D0 */  0xCE, 0x26, 0x76, 0x55, 0xDF, 0x59, 0x6A, 0x6A,  // .&vU.Yjj
                            /* 07D8 */  0x80, 0x4F, 0x2F, 0x69, 0xCD, 0x77, 0x31, 0x4D,  // .O/i.w1M
                            /* 07E0 */  0x6A, 0x23, 0x0F, 0xC2, 0xAE, 0xAA, 0xE9, 0x60,  // j#.....`
                            /* 07E8 */  0xA3, 0x55, 0xF9, 0xC5, 0x30, 0x22, 0x31, 0x55,  // .U..0"1U
                            /* 07F0 */  0x03, 0xED, 0x57, 0xB3, 0x63, 0x82, 0x77, 0xE2,  // ..W.c.w.
                            /* 07F8 */  0xCB, 0x17, 0x09, 0x6D, 0x5A, 0xE9, 0x82, 0x97,  // ...mZ...
                            /* 0800 */  0xC7, 0xC6, 0xA8, 0x26, 0x2E, 0x36, 0x7F, 0x9F,  // ...&.6..
                            /* 0808 */  0xD8, 0x22, 0x0C, 0x41, 0x95, 0x76, 0xDE, 0x1D,  // .".A.v..
                            /* 0810 */  0x4E, 0x86, 0xD3, 0x16, 0x9A, 0xCF, 0xB6, 0x3D,  // N......=
                            /* 0818 */  0xFF, 0x3E, 0x96, 0x9B, 0x72, 0xD2, 0x4A, 0x4F,  // .>..r.JO
                            /* 0820 */  0xF4, 0x27, 0xEB, 0x12, 0x97, 0x9A, 0xE6, 0x1D,  // .'......
                            /* 0828 */  0xDF, 0x5C, 0xCA, 0x68, 0x36, 0xAA, 0x8A, 0xAA,  // .\.h6...
                            /* 0830 */  0xBE, 0xEB, 0x39, 0xFB, 0x2F, 0xFF, 0x18, 0x0B,  // ..9./...
                            /* 0838 */  0x97, 0x50, 0xD3, 0xF7, 0x1E, 0x2E, 0xD0, 0x0C,  // .P......
                            /* 0840 */  0x18, 0x34, 0x30, 0x10, 0x24, 0x05, 0x77, 0xDA,  // .40.$.w.
                            /* 0848 */  0x44, 0xC2, 0x30, 0x8D, 0x81, 0xB5, 0x9B, 0x3B,  // D.0....;
                            /* 0850 */  0xA2, 0xBC, 0xFF, 0x0B, 0x9C, 0x61, 0x3C, 0x8F,  // .....a<.
                            /* 0858 */  0xDD, 0x24, 0x52, 0xF4, 0x4F, 0x35, 0xCA, 0x68,  // .$R.O5.h
                            /* 0860 */  0x30, 0x96, 0xC4, 0xA9, 0x59, 0x05, 0xC2, 0xFA,  // 0...Y...
                            /* 0868 */  0x2A, 0x22, 0x91, 0x66, 0x1A, 0xB2, 0xBD, 0xF1,  // *".f....
                            /* 0870 */  0x23, 0x65, 0xBC, 0x64, 0x7E, 0xA8, 0xC7, 0xB8,  // #e.d~...
                            /* 0878 */  0x16, 0x5F, 0x2D, 0xBA, 0x9C, 0xE2, 0xC0, 0x0E,  // ._-.....
                            /* 0880 */  0x1C, 0x55, 0xF0, 0x5E, 0x28, 0x30, 0x57, 0x47,  // .U.^(0WG
                            /* 0888 */  0xA5, 0x7A, 0x66, 0x06, 0x4D, 0x41, 0xB4, 0xCA,  // .zf.MA..
                            /* 0890 */  0x9B, 0xDA, 0xC3, 0x89, 0x23, 0x87, 0x76, 0x2A,  // ....#.v*
                            /* 0898 */  0x3A, 0x2A, 0xC2, 0xEF, 0xEE, 0x00               // :*....
                        }
                    })
                }
                Case (Package (0x03)
                    {
                        0x103C00B4, 
                        0x103C00B7, 
                        0x103C00B6
                    }

)
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x0718)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x36, 0x30, 0x30, 0x5F,  // ...@600_
                            /* 0010 */  0x64, 0x74, 0x74, 0x5F, 0x67, 0x70, 0x75, 0x5F,  // dtt_gpu_
                            /* 0018 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                            /* 0020 */  0x61, 0x6E, 0x74, 0x5F, 0x32, 0x30, 0x32, 0x31,  // ant_2021
                            /* 0028 */  0x30, 0x31, 0x31, 0x35, 0x36, 0x30, 0x30, 0x5F,  // 0115600_
                            /* 0030 */  0x44, 0x54, 0x54, 0x5F, 0x47, 0x50, 0x55, 0x5F,  // DTT_GPU_
                            /* 0038 */  0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // Particip
                            /* 0040 */  0x61, 0x6E, 0x74, 0x5F, 0x32, 0x30, 0x32, 0x31,  // ant_2021
                            /* 0048 */  0x30, 0x31, 0x31, 0x35, 0x00, 0x00, 0x00, 0x00,  // 0115....
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xF5, 0x36, 0x4B, 0x32,  // .....6K2
                            /* 0070 */  0xB1, 0x7C, 0x58, 0x84, 0x72, 0x8F, 0x16, 0xB0,  // .|X.r...
                            /* 0078 */  0x41, 0xBE, 0x28, 0x4A, 0x17, 0x59, 0x34, 0x90,  // A.(J.Y4.
                            /* 0080 */  0xB8, 0x34, 0xA6, 0x12, 0x42, 0x3F, 0xA5, 0x2E,  // .4..B?..
                            /* 0088 */  0x50, 0x7E, 0xE7, 0x3C, 0x84, 0x06, 0x00, 0x00,  // P~.<....
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0xA1, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0xFE, 0x07,  // u8...C..
                            /* 00D0 */  0xFE, 0x24, 0x99, 0xB6, 0xB9, 0x10, 0xEC, 0xCF,  // .$......
                            /* 00D8 */  0xBF, 0x30, 0x3C, 0xDD, 0x0E, 0xC2, 0x43, 0x6D,  // .0<...Cm
                            /* 00E0 */  0x26, 0x58, 0xC2, 0x67, 0x3C, 0x3C, 0x83, 0x6E,  // &X.g<<.n
                            /* 00E8 */  0x47, 0xCD, 0x67, 0xD7, 0x88, 0x92, 0x5F, 0xE3,  // G.g..._.
                            /* 00F0 */  0x18, 0xC2, 0xD3, 0x9E, 0xCA, 0xC2, 0x00, 0x12,  // ........
                            /* 00F8 */  0x31, 0x96, 0xC8, 0xD8, 0xF4, 0xBB, 0x04, 0x1E,  // 1.......
                            /* 0100 */  0x90, 0xBD, 0x80, 0x00, 0x3A, 0x52, 0x51, 0x6B,  // ....:RQk
                            /* 0108 */  0x68, 0xF7, 0x63, 0x24, 0x9C, 0xA8, 0xD2, 0x4B,  // h.c$...K
                            /* 0110 */  0xA5, 0x9E, 0xA6, 0x2C, 0xA7, 0x48, 0xE0, 0x40,  // ...,.H.@
                            /* 0118 */  0x8C, 0xCB, 0x6A, 0xFE, 0x4C, 0x07, 0x3A, 0x7D,  // ..j.L.:}
                            /* 0120 */  0x04, 0x41, 0x4B, 0x02, 0xD0, 0x2D, 0xB7, 0x11,  // .AK..-..
                            /* 0128 */  0x9C, 0xED, 0x65, 0x60, 0x56, 0x36, 0xA7, 0x9F,  // ..e`V6..
                            /* 0130 */  0x17, 0x4E, 0xD2, 0x48, 0x45, 0x05, 0x74, 0x01,  // .N.HE.t.
                            /* 0138 */  0x9D, 0x51, 0x57, 0x92, 0xD0, 0x35, 0x04, 0xEF,  // .QW..5..
                            /* 0140 */  0x69, 0x4E, 0xA9, 0x0D, 0x5C, 0x7F, 0xCF, 0x0C,  // iN..\...
                            /* 0148 */  0x48, 0x3C, 0xD3, 0x5B, 0xB1, 0xCA, 0x1F, 0x8E,  // H<.[....
                            /* 0150 */  0x1C, 0xC4, 0x07, 0xB7, 0xCA, 0xC3, 0x60, 0x34,  // ......`4
                            /* 0158 */  0xF7, 0xA6, 0x3A, 0x3A, 0x2A, 0xB3, 0xCF, 0xFF,  // ..::*...
                            /* 0160 */  0x66, 0x35, 0xB5, 0xD0, 0xE5, 0x18, 0x79, 0x9D,  // f5....y.
                            /* 0168 */  0xC2, 0xBE, 0xF2, 0xAB, 0xAD, 0x71, 0xBA, 0xF1,  // .....q..
                            /* 0170 */  0xD4, 0x16, 0xB7, 0x7F, 0x56, 0xA5, 0x6C, 0x70,  // ....V.lp
                            /* 0178 */  0x90, 0x01, 0xAE, 0xEA, 0x0D, 0x08, 0xB3, 0x9F,  // ........
                            /* 0180 */  0x76, 0x42, 0xE4, 0x79, 0x8B, 0x91, 0xBB, 0x9A,  // vB.y....
                            /* 0188 */  0x71, 0x56, 0x4C, 0x1D, 0x52, 0x9D, 0xA5, 0x41,  // qVL.R..A
                            /* 0190 */  0x36, 0xE0, 0xAE, 0x1A, 0x17, 0x3D, 0xEF, 0x0F,  // 6....=..
                            /* 0198 */  0x79, 0x9F, 0x3C, 0x11, 0xC9, 0x5C, 0x3A, 0x19,  // y.<..\:.
                            /* 01A0 */  0xB6, 0x78, 0x0E, 0x05, 0x2D, 0xED, 0xD9, 0x51,  // .x..-..Q
                            /* 01A8 */  0x64, 0x0D, 0x0D, 0x2D, 0x3B, 0x17, 0x6F, 0x7E,  // d..-;.o~
                            /* 01B0 */  0x5E, 0x83, 0x02, 0x2D, 0x70, 0xD7, 0x28, 0xBA,  // ^..-p.(.
                            /* 01B8 */  0xBF, 0x8F, 0xBC, 0x6F, 0xEF, 0x13, 0xF5, 0xD9,  // ...o....
                            /* 01C0 */  0x72, 0x19, 0xB2, 0x5D, 0x6F, 0xAD, 0x30, 0xC2,  // r..]o.0.
                            /* 01C8 */  0xEC, 0x81, 0x01, 0xAB, 0x93, 0x44, 0xF2, 0x64,  // .....D.d
                            /* 01D0 */  0x4F, 0x5F, 0xB3, 0xFD, 0xCD, 0x40, 0xAE, 0x4D,  // O_...@.M
                            /* 01D8 */  0xC7, 0x89, 0xEF, 0xC3, 0x11, 0x8E, 0x67, 0xC2,  // ......g.
                            /* 01E0 */  0x14, 0xD1, 0xDD, 0x92, 0xEA, 0xE7, 0xB4, 0x27,  // .......'
                            /* 01E8 */  0x91, 0x8E, 0x16, 0xCA, 0xD0, 0xFC, 0x7B, 0x96,  // ......{.
                            /* 01F0 */  0xC9, 0x42, 0xB3, 0x0E, 0x13, 0x0D, 0x29, 0xD0,  // .B....).
                            /* 01F8 */  0x95, 0x46, 0xDD, 0x74, 0xB7, 0xD0, 0x36, 0xEA,  // .F.t..6.
                            /* 0200 */  0x43, 0xEF, 0x0A, 0x39, 0xD5, 0x22, 0x94, 0xCC,  // C..9."..
                            /* 0208 */  0x3C, 0xE5, 0x02, 0xC5, 0xA6, 0x53, 0x87, 0xC9,  // <....S..
                            /* 0210 */  0x3E, 0xAC, 0xB9, 0x8C, 0xC4, 0x67, 0x15, 0xDF,  // >....g..
                            /* 0218 */  0xFD, 0x98, 0xDD, 0x8A, 0xA4, 0xC4, 0x29, 0xB6,  // ......).
                            /* 0220 */  0x46, 0xB2, 0xE0, 0x79, 0xDE, 0xA1, 0x98, 0x25,  // F..y...%
                            /* 0228 */  0x54, 0xC9, 0x3D, 0x75, 0xBC, 0x38, 0xDD, 0x3D,  // T.=u.8.=
                            /* 0230 */  0x09, 0x9D, 0x1C, 0x86, 0x55, 0x78, 0x14, 0x75,  // ....Ux.u
                            /* 0238 */  0x4C, 0x0C, 0xD8, 0x74, 0x86, 0x2F, 0xCC, 0xA0,  // L..t./..
                            /* 0240 */  0x04, 0x93, 0x15, 0x40, 0xBD, 0x04, 0x76, 0x35,  // ...@..v5
                            /* 0248 */  0x32, 0x7B, 0x52, 0x9F, 0x78, 0x11, 0x89, 0xAC,  // 2{R.x...
                            /* 0250 */  0x1A, 0xE7, 0x02, 0x42, 0x28, 0x33, 0x55, 0x0E,  // ...B(3U.
                            /* 0258 */  0x03, 0x53, 0x33, 0x99, 0x06, 0xF3, 0x5B, 0x13,  // .S3...[.
                            /* 0260 */  0x97, 0x49, 0x94, 0xB2, 0xCC, 0xA5, 0x16, 0x56,  // .I.....V
                            /* 0268 */  0x32, 0x9F, 0xDB, 0x47, 0x95, 0x66, 0x3F, 0x55,  // 2..G.f?U
                            /* 0270 */  0xEC, 0xDC, 0x73, 0xC3, 0xD3, 0x94, 0x84, 0x68,  // ..s....h
                            /* 0278 */  0x2D, 0x58, 0x8D, 0xEF, 0xF5, 0x52, 0x5C, 0x51,  // -X...R\Q
                            /* 0280 */  0xD6, 0xEB, 0x96, 0xF1, 0x97, 0x27, 0x56, 0xF8,  // .....'V.
                            /* 0288 */  0xBD, 0x4B, 0x9D, 0x72, 0xF3, 0x59, 0x59, 0x21,  // .K.r.YY!
                            /* 0290 */  0x5F, 0x36, 0x78, 0xD6, 0xDB, 0x88, 0x6A, 0xE9,  // _6x...j.
                            /* 0298 */  0xA4, 0x0C, 0x97, 0x70, 0x13, 0x01, 0x04, 0x5B,  // ...p...[
                            /* 02A0 */  0x8F, 0x22, 0xAE, 0x07, 0xC8, 0x6D, 0x5A, 0x36,  // ."...mZ6
                            /* 02A8 */  0x2A, 0x13, 0x7F, 0x74, 0x43, 0xA4, 0x48, 0x28,  // *..tC.H(
                            /* 02B0 */  0xC8, 0x99, 0x1B, 0x89, 0xAE, 0x6E, 0x41, 0xC9,  // .....nA.
                            /* 02B8 */  0x90, 0xBB, 0xFE, 0xF8, 0x2F, 0xFB, 0x44, 0x6E,  // ..../.Dn
                            /* 02C0 */  0x7F, 0x5D, 0x1C, 0x2B, 0x14, 0x4C, 0x22, 0x9F,  // .].+.L".
                            /* 02C8 */  0xBE, 0x06, 0x6E, 0x2E, 0x67, 0xA4, 0x24, 0xD9,  // ..n.g.$.
                            /* 02D0 */  0xB5, 0x4D, 0xE4, 0x1A, 0x31, 0x50, 0x7D, 0xF5,  // .M..1P}.
                            /* 02D8 */  0x2D, 0xE0, 0x1C, 0xE1, 0x98, 0x3C, 0x6C, 0xAF,  // -....<l.
                            /* 02E0 */  0xCD, 0xA6, 0x58, 0x5B, 0x02, 0x61, 0x8F, 0x76,  // ..X[.a.v
                            /* 02E8 */  0xEB, 0x1C, 0x27, 0x29, 0x00, 0xF1, 0x1A, 0x48,  // ..')...H
                            /* 02F0 */  0xE2, 0x43, 0x3E, 0xE1, 0xB6, 0xA4, 0x55, 0xF0,  // .C>...U.
                            /* 02F8 */  0x28, 0x57, 0x2A, 0x66, 0xA8, 0x06, 0xC1, 0x86,  // (W*f....
                            /* 0300 */  0x55, 0xE2, 0x35, 0x66, 0x7F, 0x7F, 0xDE, 0xA4,  // U.5f....
                            /* 0308 */  0x52, 0x0F, 0xA3, 0xBF, 0x2E, 0x49, 0x8C, 0xBA,  // R....I..
                            /* 0310 */  0x86, 0xBC, 0x95, 0xD4, 0xDF, 0x9E, 0xBF, 0xD5,  // ........
                            /* 0318 */  0x36, 0x79, 0xCC, 0x9C, 0xD3, 0xA6, 0xAA, 0x6E,  // 6y.....n
                            /* 0320 */  0x86, 0x35, 0x83, 0x67, 0x22, 0x5A, 0xF9, 0x11,  // .5.g"Z..
                            /* 0328 */  0x74, 0xD5, 0x56, 0x55, 0xF3, 0xB8, 0xE7, 0xF5,  // t.VU....
                            /* 0330 */  0xA8, 0x59, 0xAE, 0x5A, 0x58, 0x91, 0xCD, 0x36,  // .Y.ZX..6
                            /* 0338 */  0x21, 0x10, 0x64, 0xF2, 0x9F, 0x39, 0x49, 0x56,  // !.d..9IV
                            /* 0340 */  0x2C, 0x34, 0xB4, 0x73, 0x7A, 0x71, 0xE9, 0xCB,  // ,4.szq..
                            /* 0348 */  0x27, 0xA3, 0x83, 0x45, 0x4F, 0x2E, 0x08, 0x91,  // '..EO...
                            /* 0350 */  0xCA, 0xB9, 0x60, 0x8A, 0xA6, 0xEE, 0x96, 0x98,  // ..`.....
                            /* 0358 */  0xA2, 0x91, 0x58, 0x7B, 0xE7, 0x7A, 0x6A, 0xE4,  // ..X{.zj.
                            /* 0360 */  0x31, 0xE5, 0xB9, 0x7B, 0xDB, 0x35, 0xB2, 0x18,  // 1..{.5..
                            /* 0368 */  0xF9, 0xFC, 0x12, 0x92, 0x20, 0x2F, 0xA9, 0x9C,  // .... /..
                            /* 0370 */  0xFF, 0x2E, 0xAD, 0xA5, 0xF3, 0x15, 0x49, 0xA9,  // ......I.
                            /* 0378 */  0x87, 0x72, 0x8B, 0xC5, 0x84, 0xD6, 0x78, 0x73,  // .r....xs
                            /* 0380 */  0x84, 0x3C, 0x9B, 0x84, 0x73, 0x8C, 0xFB, 0xC7,  // .<..s...
                            /* 0388 */  0xD9, 0x56, 0xEA, 0x1C, 0x13, 0xEA, 0xC7, 0x0E,  // .V......
                            /* 0390 */  0x12, 0xAF, 0xE8, 0xDD, 0xA7, 0x5B, 0xDB, 0x2A,  // .....[.*
                            /* 0398 */  0xA0, 0xA9, 0x7B, 0xF4, 0x05, 0x48, 0x72, 0x27,  // ..{..Hr'
                            /* 03A0 */  0xFE, 0x76, 0x56, 0x42, 0x0A, 0x0A, 0x8B, 0x31,  // .vVB...1
                            /* 03A8 */  0x4E, 0x52, 0xF3, 0xB7, 0xE5, 0xFB, 0x9A, 0xDC,  // NR......
                            /* 03B0 */  0x08, 0x7B, 0xBF, 0x33, 0x90, 0x35, 0x63, 0x17,  // .{.3.5c.
                            /* 03B8 */  0x20, 0x19, 0x71, 0xF2, 0x49, 0x96, 0xBF, 0x8A,  //  .q.I...
                            /* 03C0 */  0x4C, 0x31, 0x33, 0xA2, 0xAC, 0x62, 0x78, 0xA1,  // L13..bx.
                            /* 03C8 */  0x66, 0xDE, 0x26, 0x2A, 0x6C, 0x27, 0xEB, 0x2E,  // f.&*l'..
                            /* 03D0 */  0x15, 0x93, 0x43, 0xC1, 0xEA, 0xA8, 0x85, 0x72,  // ..C....r
                            /* 03D8 */  0xDA, 0x16, 0x12, 0x9F, 0x4A, 0x76, 0xA9, 0xFF,  // ....Jv..
                            /* 03E0 */  0xDA, 0x6B, 0xFC, 0x3D, 0x76, 0xFD, 0x6A, 0x77,  // .k.=v.jw
                            /* 03E8 */  0x0B, 0x55, 0x27, 0x4F, 0xED, 0x08, 0xBE, 0x9E,  // .U'O....
                            /* 03F0 */  0xEB, 0xC7, 0x7A, 0xA5, 0x91, 0x5E, 0x01, 0xBC,  // ..z..^..
                            /* 03F8 */  0xD3, 0x1B, 0x4E, 0xCD, 0xFF, 0x0C, 0xD6, 0xD3,  // ..N.....
                            /* 0400 */  0xB2, 0x11, 0x38, 0xD8, 0x12, 0xC2, 0x4A, 0x6F,  // ..8...Jo
                            /* 0408 */  0x65, 0x37, 0x90, 0x5A, 0xAF, 0x3E, 0x6C, 0x75,  // e7.Z.>lu
                            /* 0410 */  0x10, 0xC1, 0x49, 0x98, 0x0F, 0x63, 0x16, 0xF4,  // ..I..c..
                            /* 0418 */  0xDE, 0x9E, 0x26, 0xA8, 0x48, 0x4B, 0x29, 0x40,  // ..&.HK)@
                            /* 0420 */  0x7D, 0x76, 0x40, 0xFA, 0x67, 0x12, 0x5C, 0x2C,  // }v@.g.\,
                            /* 0428 */  0x1F, 0xA5, 0x6F, 0x37, 0xCA, 0xD4, 0x30, 0xE8,  // ..o7..0.
                            /* 0430 */  0x76, 0xF7, 0xE3, 0x1A, 0x52, 0x86, 0x9D, 0xC4,  // v...R...
                            /* 0438 */  0x67, 0x4B, 0x96, 0xE0, 0xF9, 0x84, 0x5A, 0xA6,  // gK....Z.
                            /* 0440 */  0x72, 0x50, 0x3B, 0xBA, 0x8A, 0x39, 0x22, 0xEC,  // rP;..9".
                            /* 0448 */  0x5C, 0xE7, 0x3C, 0xBF, 0xD0, 0xEC, 0xC7, 0x27,  // \.<....'
                            /* 0450 */  0x3B, 0xDE, 0xD5, 0xCA, 0xC5, 0xB6, 0x9B, 0x51,  // ;......Q
                            /* 0458 */  0xFB, 0xE9, 0x90, 0xCC, 0x55, 0x33, 0xC8, 0xEE,  // ....U3..
                            /* 0460 */  0x7B, 0xF5, 0xCF, 0xE1, 0x77, 0xBF, 0x53, 0x0C,  // {...w.S.
                            /* 0468 */  0x84, 0x04, 0x16, 0xF8, 0x29, 0x7B, 0x86, 0xF3,  // ....){..
                            /* 0470 */  0xFB, 0x16, 0x4C, 0x13, 0x6E, 0x2D, 0x22, 0x5B,  // ..L.n-"[
                            /* 0478 */  0x16, 0x74, 0x9B, 0x11, 0xB8, 0x89, 0x3B, 0x30,  // .t....;0
                            /* 0480 */  0x9E, 0x79, 0x0F, 0xBE, 0x54, 0xAB, 0xE0, 0xDF,  // .y..T...
                            /* 0488 */  0xC5, 0xFC, 0x45, 0x82, 0xA7, 0x11, 0xEF, 0xF4,  // ..E.....
                            /* 0490 */  0xAC, 0x8C, 0x4F, 0x9B, 0x30, 0x9C, 0xF6, 0xF0,  // ..O.0...
                            /* 0498 */  0x59, 0xB1, 0x9D, 0xFD, 0x45, 0xE6, 0x09, 0x08,  // Y...E...
                            /* 04A0 */  0x9B, 0xE3, 0xE1, 0xEA, 0x71, 0x0B, 0xEC, 0x5A,  // ....q..Z
                            /* 04A8 */  0x1A, 0xF9, 0x3A, 0x3F, 0xB9, 0xDD, 0x2D, 0xF0,  // ..:?..-.
                            /* 04B0 */  0x2D, 0xBE, 0xA9, 0xE6, 0x25, 0x70, 0x7D, 0xC1,  // -...%p}.
                            /* 04B8 */  0x75, 0x84, 0xDE, 0x3B, 0x05, 0x62, 0x10, 0x27,  // u..;.b.'
                            /* 04C0 */  0xC6, 0x49, 0x74, 0x5E, 0x14, 0xE4, 0x8D, 0xA5,  // .It^....
                            /* 04C8 */  0xC4, 0x6E, 0x1E, 0xBC, 0x30, 0x86, 0x53, 0xB0,  // .n..0.S.
                            /* 04D0 */  0x2A, 0x30, 0xFF, 0x46, 0xC4, 0x92, 0x61, 0xC2,  // *0.F..a.
                            /* 04D8 */  0xD2, 0x9D, 0x83, 0x68, 0xC0, 0x89, 0xF4, 0x75,  // ...h...u
                            /* 04E0 */  0x7E, 0x12, 0x0A, 0x27, 0x48, 0x14, 0x7E, 0xE1,  // ~..'H.~.
                            /* 04E8 */  0xAC, 0xDD, 0x52, 0x51, 0xC3, 0xDE, 0x7C, 0xEB,  // ..RQ..|.
                            /* 04F0 */  0xF4, 0x9E, 0x84, 0x0C, 0x69, 0x43, 0x42, 0x82,  // ....iCB.
                            /* 04F8 */  0x90, 0x37, 0x7C, 0x0B, 0xA0, 0xC0, 0x95, 0xAB,  // .7|.....
                            /* 0500 */  0xC3, 0xFE, 0xA9, 0x27, 0xDE, 0x67, 0x3C, 0x0C,  // ...'.g<.
                            /* 0508 */  0x0C, 0x21, 0x7A, 0xA0, 0xFE, 0xBC, 0xC9, 0xA9,  // .!z.....
                            /* 0510 */  0x7A, 0x71, 0x82, 0x5C, 0xE4, 0x73, 0x87, 0x83,  // zq.\.s..
                            /* 0518 */  0x41, 0xCC, 0x37, 0xEB, 0x5C, 0x14, 0xBF, 0x91,  // A.7.\...
                            /* 0520 */  0x9A, 0x57, 0x2D, 0x67, 0x13, 0x41, 0x05, 0x7E,  // .W-g.A.~
                            /* 0528 */  0x90, 0x2F, 0x82, 0x8D, 0xFF, 0x5F, 0x7C, 0xC6,  // ./..._|.
                            /* 0530 */  0x12, 0x35, 0xEE, 0xB2, 0xDE, 0xC4, 0x0C, 0x58,  // .5.....X
                            /* 0538 */  0x5D, 0x71, 0x1A, 0x2B, 0x26, 0x91, 0x6B, 0xFD,  // ]q.+&.k.
                            /* 0540 */  0x50, 0x72, 0xA0, 0xA3, 0x70, 0xA5, 0x49, 0x74,  // Pr..p.It
                            /* 0548 */  0xFB, 0xFF, 0x74, 0x98, 0xEC, 0x86, 0x0B, 0x5A,  // ..t....Z
                            /* 0550 */  0xE1, 0xC3, 0x7C, 0x0E, 0x58, 0xD2, 0x0D, 0xBF,  // ..|.X...
                            /* 0558 */  0xE6, 0x17, 0xC3, 0x62, 0x36, 0x84, 0xEF, 0xF5,  // ...b6...
                            /* 0560 */  0xBA, 0x69, 0x7C, 0xCF, 0xD3, 0x81, 0x2F, 0x0C,  // .i|.../.
                            /* 0568 */  0xD9, 0x0C, 0x39, 0xDC, 0xB5, 0x32, 0x4B, 0xA3,  // ..9..2K.
                            /* 0570 */  0x2D, 0xA4, 0xD3, 0xCE, 0xF7, 0x95, 0x06, 0xB6,  // -.......
                            /* 0578 */  0xDD, 0x86, 0x22, 0x42, 0x37, 0x37, 0x0F, 0x43,  // .."B77.C
                            /* 0580 */  0x41, 0x3A, 0x26, 0x84, 0xCB, 0x79, 0xA3, 0xE4,  // A:&..y..
                            /* 0588 */  0x8B, 0x47, 0xD8, 0xC9, 0xBB, 0x50, 0xA7, 0x1C,  // .G...P..
                            /* 0590 */  0xD6, 0x83, 0x39, 0x60, 0x9D, 0x6D, 0x72, 0x7F,  // ..9`.mr.
                            /* 0598 */  0x94, 0x36, 0xB1, 0x13, 0x86, 0x5E, 0xC0, 0xB6,  // .6...^..
                            /* 05A0 */  0x9C, 0x3D, 0xDB, 0x98, 0x28, 0xA7, 0xF9, 0x49,  // .=..(..I
                            /* 05A8 */  0x46, 0xC1, 0xA1, 0x98, 0x03, 0x7F, 0x59, 0xC9,  // F.....Y.
                            /* 05B0 */  0xCF, 0x13, 0xD9, 0xCD, 0xAD, 0xC9, 0xB0, 0xC1,  // ........
                            /* 05B8 */  0x76, 0x01, 0xB5, 0x0E, 0x4D, 0xAA, 0x3B, 0x70,  // v...M.;p
                            /* 05C0 */  0xAD, 0x7E, 0x2B, 0x23, 0x22, 0xC3, 0x37, 0x2F,  // .~+#".7/
                            /* 05C8 */  0x4B, 0x2C, 0x6D, 0x78, 0x6E, 0xE6, 0x2F, 0xE9,  // K,mxn./.
                            /* 05D0 */  0x02, 0x5D, 0x5C, 0x40, 0xE6, 0x3C, 0x29, 0x6F,  // .]\@.<)o
                            /* 05D8 */  0xBC, 0x50, 0x42, 0x1C, 0x4A, 0x55, 0xDF, 0x05,  // .PB.JU..
                            /* 05E0 */  0xC3, 0x81, 0xE3, 0xBD, 0xE7, 0xFD, 0xA2, 0xE6,  // ........
                            /* 05E8 */  0x9F, 0xB7, 0x4E, 0xE2, 0xC4, 0x80, 0x37, 0x56,  // ..N...7V
                            /* 05F0 */  0xFD, 0x76, 0x1B, 0x7A, 0x66, 0x1E, 0x39, 0xD1,  // .v.zf.9.
                            /* 05F8 */  0x17, 0x07, 0xD5, 0x5A, 0xA1, 0x0B, 0x78, 0x96,  // ...Z..x.
                            /* 0600 */  0x03, 0x3B, 0x7C, 0x7F, 0x17, 0xDA, 0xE7, 0x58,  // .;|....X
                            /* 0608 */  0x4C, 0x50, 0xAD, 0x34, 0xCD, 0xAB, 0xC8, 0x76,  // LP.4...v
                            /* 0610 */  0x36, 0x01, 0x30, 0x13, 0xEE, 0x04, 0xE3, 0x16,  // 6.0.....
                            /* 0618 */  0xA1, 0xF7, 0x90, 0xD2, 0x3F, 0xEF, 0x75, 0x90,  // ....?.u.
                            /* 0620 */  0x83, 0x83, 0x24, 0x2F, 0xA1, 0xD8, 0xC1, 0xDC,  // ..$/....
                            /* 0628 */  0xC5, 0xDD, 0xE6, 0x70, 0x35, 0xEC, 0x30, 0xFF,  // ...p5.0.
                            /* 0630 */  0x57, 0xE6, 0xD8, 0xBB, 0x06, 0x33, 0xFD, 0x03,  // W....3..
                            /* 0638 */  0x8F, 0x40, 0xD8, 0x52, 0xD4, 0x47, 0xFE, 0xE6,  // .@.R.G..
                            /* 0640 */  0x9F, 0x27, 0x56, 0x50, 0x2D, 0x99, 0x11, 0x2A,  // .'VP-..*
                            /* 0648 */  0x2F, 0x2B, 0x7E, 0x28, 0xEA, 0x64, 0xD6, 0x97,  // /+~(.d..
                            /* 0650 */  0xC1, 0xC5, 0xED, 0xF7, 0x9F, 0x24, 0x21, 0x43,  // .....$!C
                            /* 0658 */  0xC8, 0x52, 0x9F, 0xC1, 0xB6, 0xEB, 0x69, 0xF5,  // .R....i.
                            /* 0660 */  0x94, 0x76, 0x30, 0x32, 0xCD, 0xFA, 0x9C, 0x4C,  // .v02...L
                            /* 0668 */  0x86, 0x11, 0x99, 0x2E, 0xA0, 0x92, 0x1B, 0xE1,  // ........
                            /* 0670 */  0x06, 0x9F, 0x44, 0x27, 0xFD, 0x3E, 0xF8, 0x2D,  // ..D'.>.-
                            /* 0678 */  0x2F, 0x0B, 0x5D, 0x73, 0xBE, 0xE8, 0x9A, 0x64,  // /.]s...d
                            /* 0680 */  0xCA, 0xC4, 0xE7, 0x88, 0x0A, 0x5A, 0x46, 0xCB,  // .....ZF.
                            /* 0688 */  0x4E, 0x94, 0x29, 0x31, 0x01, 0x15, 0x4C, 0xCD,  // N.)1..L.
                            /* 0690 */  0x75, 0x2A, 0x8C, 0xFF, 0x60, 0xEA, 0x53, 0xBD,  // u*..`.S.
                            /* 0698 */  0x12, 0xB6, 0xAA, 0xF1, 0x16, 0xF3, 0xB6, 0x6A,  // .......j
                            /* 06A0 */  0xD8, 0x96, 0x97, 0x2F, 0xBC, 0xCF, 0x04, 0x10,  // .../....
                            /* 06A8 */  0x34, 0xA0, 0x32, 0x4D, 0x1C, 0x1A, 0x26, 0xFE,  // 4.2M..&.
                            /* 06B0 */  0x88, 0x24, 0xB2, 0xA7, 0xB8, 0x8B, 0xFF, 0xD9,  // .$......
                            /* 06B8 */  0xFA, 0x89, 0x39, 0xAA, 0xA2, 0x41, 0xF5, 0xE4,  // ..9..A..
                            /* 06C0 */  0x73, 0x85, 0x71, 0x9B, 0xC5, 0xAE, 0xC4, 0x3B,  // s.q....;
                            /* 06C8 */  0xC1, 0xB3, 0x72, 0xDE, 0x2F, 0x84, 0xE1, 0x66,  // ..r./..f
                            /* 06D0 */  0x35, 0x68, 0xF1, 0xAD, 0xCE, 0x58, 0x1C, 0x01,  // 5h...X..
                            /* 06D8 */  0xA7, 0xC2, 0xF8, 0x12, 0x7A, 0x97, 0x08, 0x5E,  // ....z..^
                            /* 06E0 */  0x9E, 0x19, 0xDD, 0xC4, 0xB8, 0x69, 0x7F, 0x11,  // .....i..
                            /* 06E8 */  0x88, 0xA5, 0x02, 0xDD, 0x3F, 0xA7, 0xF6, 0x00,  // ....?...
                            /* 06F0 */  0x42, 0xE1, 0x9D, 0xC8, 0x58, 0xAA, 0xD6, 0xCB,  // B...X...
                            /* 06F8 */  0xB3, 0x9C, 0x03, 0x23, 0xE8, 0x22, 0x8A, 0xE8,  // ...#."..
                            /* 0700 */  0x5A, 0xD3, 0x19, 0x83, 0xC3, 0x4B, 0xF3, 0x2F,  // Z....K./
                            /* 0708 */  0x9F, 0x70, 0xB1, 0x14, 0x6D, 0x1A, 0x78, 0xEB,  // .p..m.x.
                            /* 0710 */  0xF8, 0xE7, 0xB2, 0xBE, 0x45, 0xC5, 0x35, 0x1D   // ....E.5.
                        }
                    })
                }
                Case (Package (0x03)
                    {
                        0x103C00BC, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x072F)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x36, 0x30, 0x30, 0x5F,  // ...@600_
                            /* 0010 */  0x74, 0x62, 0x74, 0x5F, 0x64, 0x74, 0x74, 0x5F,  // tbt_dtt_
                            /* 0018 */  0x73, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x5F,  // setting_
                            /* 0020 */  0x32, 0x30, 0x32, 0x31, 0x30, 0x32, 0x32, 0x35,  // 20210225
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x36, 0x30, 0x30, 0x5F,  // ....600_
                            /* 0030 */  0x54, 0x42, 0x54, 0x5F, 0x44, 0x54, 0x54, 0x5F,  // TBT_DTT_
                            /* 0038 */  0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x5F,  // Setting_
                            /* 0040 */  0x32, 0x30, 0x32, 0x31, 0x30, 0x32, 0x32, 0x35,  // 20210225
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x02, 0xC9, 0x31, 0xE5,  // ......1.
                            /* 0070 */  0xC9, 0xF2, 0x78, 0xC0, 0x91, 0xB9, 0x4B, 0x89,  // ..x...K.
                            /* 0078 */  0x87, 0xCF, 0x89, 0xDA, 0xC2, 0x87, 0x40, 0x2A,  // ......@*
                            /* 0080 */  0x3F, 0xDF, 0x63, 0x8B, 0x00, 0x66, 0x60, 0x7B,  // ?.c..f`{
                            /* 0088 */  0x35, 0x74, 0x23, 0x4E, 0x9B, 0x06, 0x00, 0x00,  // 5t#N....
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0xA5, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x45, 0xEC,  // u8...DE.
                            /* 00D0 */  0xC8, 0xCB, 0x9D, 0x56, 0x51, 0x75, 0xE3, 0x50,  // ...VQu.P
                            /* 00D8 */  0x9D, 0x02, 0xED, 0x39, 0x5F, 0x64, 0x0F, 0xDB,  // ...9_d..
                            /* 00E0 */  0xC9, 0xA0, 0x13, 0xC1, 0x2A, 0x13, 0x81, 0x16,  // ....*...
                            /* 00E8 */  0x70, 0xC3, 0x49, 0x15, 0x21, 0x28, 0xA5, 0x0D,  // p.I.!(..
                            /* 00F0 */  0x4B, 0xB6, 0x85, 0xED, 0x9B, 0x70, 0xBA, 0xA0,  // K....p..
                            /* 00F8 */  0x05, 0xC3, 0x79, 0xB1, 0x9B, 0xE9, 0xEC, 0xB6,  // ..y.....
                            /* 0100 */  0x3C, 0xAC, 0x2D, 0x30, 0x1A, 0x3C, 0xDE, 0x97,  // <.-0.<..
                            /* 0108 */  0xF3, 0x9B, 0x5E, 0x7B, 0x06, 0xB5, 0x61, 0x32,  // ..^{..a2
                            /* 0110 */  0x6C, 0xD3, 0xBF, 0x07, 0x01, 0x10, 0x77, 0xFE,  // l.....w.
                            /* 0118 */  0x61, 0x29, 0xF6, 0xB0, 0xB7, 0x18, 0x66, 0xA2,  // a)....f.
                            /* 0120 */  0x4A, 0xAC, 0xF7, 0xBB, 0x14, 0x63, 0x47, 0x5C,  // J....cG\
                            /* 0128 */  0xC4, 0xB0, 0xDD, 0x13, 0xBC, 0x1D, 0x0F, 0x9B,  // ........
                            /* 0130 */  0xEC, 0x7A, 0x37, 0x3E, 0xA8, 0x79, 0xC2, 0x92,  // .z7>.y..
                            /* 0138 */  0x33, 0x4E, 0x06, 0x22, 0xFE, 0x3E, 0xEE, 0x50,  // 3N.".>.P
                            /* 0140 */  0x7D, 0xB8, 0x23, 0xC6, 0x75, 0xFD, 0x30, 0xB8,  // }.#.u.0.
                            /* 0148 */  0x5D, 0x0D, 0x96, 0xD8, 0xF3, 0xFB, 0xB5, 0x20,  // ]...... 
                            /* 0150 */  0x60, 0x21, 0x51, 0x52, 0x9E, 0xAB, 0xD0, 0x59,  // `!QR...Y
                            /* 0158 */  0x92, 0x09, 0x92, 0x09, 0x64, 0x0F, 0x70, 0x99,  // ....d.p.
                            /* 0160 */  0xB0, 0xB3, 0x50, 0xE6, 0x07, 0x15, 0xF9, 0x97,  // ..P.....
                            /* 0168 */  0xF2, 0xAF, 0xE0, 0xA9, 0x34, 0x8F, 0xED, 0x0E,  // ....4...
                            /* 0170 */  0xB3, 0xFD, 0xAA, 0xE1, 0xA8, 0x7C, 0xD0, 0x3D,  // .....|.=
                            /* 0178 */  0x75, 0xF1, 0x0C, 0xAE, 0xBD, 0x0F, 0x5D, 0x20,  // u.....] 
                            /* 0180 */  0xE5, 0x1B, 0x5A, 0xA7, 0x02, 0x49, 0xE8, 0x76,  // ..Z..I.v
                            /* 0188 */  0x17, 0x7E, 0x1B, 0x8D, 0x0A, 0x06, 0x06, 0x1B,  // .~......
                            /* 0190 */  0xE3, 0x6D, 0xC2, 0x88, 0x7D, 0xD7, 0xFC, 0x3A,  // .m..}..:
                            /* 0198 */  0x04, 0x16, 0xA8, 0x18, 0x7A, 0xED, 0x3A, 0x71,  // ....z.:q
                            /* 01A0 */  0xED, 0xC5, 0xF4, 0x32, 0x9D, 0x59, 0x27, 0xBD,  // ...2.Y'.
                            /* 01A8 */  0x3E, 0xE4, 0xA7, 0xF0, 0x85, 0x1B, 0x03, 0xD6,  // >.......
                            /* 01B0 */  0x11, 0xD0, 0x5C, 0xCB, 0x6E, 0xA7, 0xF3, 0x91,  // ..\.n...
                            /* 01B8 */  0xA0, 0xFB, 0x43, 0x57, 0x30, 0xEE, 0xF6, 0xCE,  // ..CW0...
                            /* 01C0 */  0x7F, 0xF7, 0x22, 0x89, 0xB6, 0x40, 0x13, 0x9F,  // .."..@..
                            /* 01C8 */  0x9F, 0xE5, 0x4C, 0x5D, 0x8E, 0x41, 0x42, 0x1D,  // ..L].AB.
                            /* 01D0 */  0x7C, 0xE9, 0x2E, 0xFD, 0x58, 0x75, 0xBD, 0x65,  // |...Xu.e
                            /* 01D8 */  0x53, 0x6C, 0x1B, 0x39, 0x5D, 0x37, 0xA0, 0x47,  // Sl.9]7.G
                            /* 01E0 */  0xA3, 0x0D, 0xE4, 0x9E, 0xE7, 0x83, 0xA5, 0x50,  // .......P
                            /* 01E8 */  0x6C, 0x82, 0x2A, 0xCA, 0x8C, 0xCD, 0x3B, 0x33,  // l.*...;3
                            /* 01F0 */  0x5F, 0x5F, 0xF5, 0xED, 0x1C, 0x43, 0x9E, 0xA8,  // __...C..
                            /* 01F8 */  0x8A, 0xC1, 0xB6, 0x71, 0x85, 0xCF, 0xAF, 0x46,  // ...q...F
                            /* 0200 */  0x6E, 0x67, 0x92, 0x7F, 0xA5, 0xA7, 0x27, 0xDE,  // ng....'.
                            /* 0208 */  0xB0, 0xB3, 0x00, 0x44, 0xE3, 0x31, 0x5E, 0x47,  // ...D.1^G
                            /* 0210 */  0xCB, 0x0C, 0x03, 0x48, 0xED, 0xA3, 0x55, 0x8C,  // ...H..U.
                            /* 0218 */  0x19, 0xE5, 0xC4, 0x2E, 0x32, 0xA2, 0xE3, 0x1D,  // ....2...
                            /* 0220 */  0x31, 0xA7, 0x77, 0x5C, 0x00, 0xCA, 0x61, 0x13,  // 1.w\..a.
                            /* 0228 */  0x8F, 0x16, 0xE7, 0x86, 0x80, 0xF3, 0x4F, 0x69,  // ......Oi
                            /* 0230 */  0x15, 0x07, 0xFE, 0x8A, 0x96, 0xA2, 0x32, 0x0D,  // ......2.
                            /* 0238 */  0x41, 0x44, 0xC9, 0x8E, 0xB0, 0x66, 0x8D, 0x67,  // AD...f.g
                            /* 0240 */  0xF0, 0x83, 0x04, 0x15, 0xB5, 0x14, 0x42, 0xD1,  // ......B.
                            /* 0248 */  0x74, 0x83, 0x29, 0x10, 0xBE, 0xDB, 0x8E, 0x65,  // t.)....e
                            /* 0250 */  0xCE, 0xFD, 0x1C, 0x07, 0xEC, 0xCF, 0xB8, 0xE5,  // ........
                            /* 0258 */  0x8A, 0xDD, 0x3B, 0xA6, 0xAD, 0x8A, 0x66, 0x89,  // ..;...f.
                            /* 0260 */  0x9A, 0xAE, 0xD6, 0x63, 0xBC, 0xAB, 0x42, 0x8C,  // ...c..B.
                            /* 0268 */  0x3F, 0xD9, 0xAB, 0x07, 0xC3, 0x8B, 0x67, 0x53,  // ?.....gS
                            /* 0270 */  0x40, 0x81, 0x8C, 0x56, 0x75, 0x86, 0x5B, 0x6D,  // @..Vu.[m
                            /* 0278 */  0x41, 0x6E, 0xD8, 0x6B, 0x04, 0x58, 0x1B, 0xE3,  // An.k.X..
                            /* 0280 */  0xDF, 0x55, 0xA2, 0x8C, 0x66, 0x8A, 0x6A, 0x6F,  // .U..f.jo
                            /* 0288 */  0x6E, 0x2A, 0x0B, 0xE6, 0x82, 0x46, 0xB7, 0x83,  // n*...F..
                            /* 0290 */  0xD5, 0xFD, 0xE4, 0x80, 0x44, 0x38, 0x82, 0x02,  // ....D8..
                            /* 0298 */  0xD8, 0x0D, 0x6C, 0xEB, 0x7E, 0xEB, 0x86, 0xBD,  // ..l.~...
                            /* 02A0 */  0x40, 0xA7, 0x6E, 0xC7, 0xE4, 0x33, 0xB2, 0x62,  // @.n..3.b
                            /* 02A8 */  0x87, 0x43, 0xDD, 0x4D, 0x5B, 0x4E, 0xA8, 0x42,  // .C.M[N.B
                            /* 02B0 */  0x21, 0x51, 0x55, 0x1D, 0x5E, 0xED, 0x5A, 0x0F,  // !QU.^.Z.
                            /* 02B8 */  0x16, 0x24, 0x11, 0x05, 0x65, 0x1A, 0xDD, 0x81,  // .$..e...
                            /* 02C0 */  0x8E, 0xCC, 0x23, 0x7A, 0x78, 0xB2, 0x4B, 0x36,  // ..#zx.K6
                            /* 02C8 */  0xCA, 0x51, 0xEF, 0x51, 0x95, 0x98, 0x54, 0x92,  // .Q.Q..T.
                            /* 02D0 */  0x7E, 0x63, 0x33, 0x81, 0x45, 0xAD, 0x24, 0x03,  // ~c3.E.$.
                            /* 02D8 */  0x11, 0x5B, 0x54, 0x2C, 0x9C, 0x06, 0xA2, 0xF5,  // .[T,....
                            /* 02E0 */  0x21, 0xCA, 0x47, 0x36, 0x23, 0x07, 0xF3, 0x94,  // !.G6#...
                            /* 02E8 */  0xE1, 0x9C, 0x09, 0x0B, 0xE4, 0x51, 0xC9, 0xD5,  // .....Q..
                            /* 02F0 */  0x6C, 0x1E, 0x48, 0x79, 0xC9, 0xAE, 0xA6, 0xCA,  // l.Hy....
                            /* 02F8 */  0xA8, 0x6F, 0x4B, 0x12, 0x92, 0x56, 0x5A, 0x43,  // .oK..VZC
                            /* 0300 */  0xBF, 0x79, 0xBE, 0x7E, 0xD6, 0xB9, 0x4E, 0x8F,  // .y.~..N.
                            /* 0308 */  0x06, 0x98, 0x85, 0xEC, 0xD6, 0x27, 0x3C, 0x04,  // .....'<.
                            /* 0310 */  0xF1, 0x59, 0xEA, 0xBF, 0xE6, 0xF4, 0x8E, 0xB7,  // .Y......
                            /* 0318 */  0xB8, 0x00, 0x22, 0xF6, 0xD7, 0x8C, 0x33, 0x8C,  // .."...3.
                            /* 0320 */  0x5C, 0xEB, 0xC6, 0x34, 0xA5, 0x91, 0xD9, 0xC8,  // \..4....
                            /* 0328 */  0x68, 0x08, 0x54, 0x13, 0x33, 0xE4, 0x19, 0x62,  // h.T.3..b
                            /* 0330 */  0x48, 0x45, 0xB7, 0xF7, 0x02, 0x4F, 0xAF, 0x1D,  // HE...O..
                            /* 0338 */  0x47, 0x30, 0x14, 0x9F, 0xE9, 0x99, 0x30, 0xA4,  // G0....0.
                            /* 0340 */  0xB9, 0x03, 0x87, 0x12, 0x45, 0xA6, 0x3F, 0x90,  // ....E.?.
                            /* 0348 */  0xE9, 0x8E, 0x5D, 0xF7, 0xEF, 0xC2, 0xDE, 0x50,  // ..]....P
                            /* 0350 */  0x47, 0x64, 0x0A, 0xB5, 0x3C, 0x29, 0xBB, 0x93,  // Gd..<)..
                            /* 0358 */  0x42, 0xF6, 0x8D, 0xDA, 0x52, 0x66, 0xB1, 0xC9,  // B...Rf..
                            /* 0360 */  0x4C, 0xD9, 0x8D, 0x24, 0xFD, 0xDC, 0xCE, 0x6D,  // L..$...m
                            /* 0368 */  0xB5, 0x86, 0xDB, 0x03, 0x4C, 0x7E, 0xAA, 0xD6,  // ....L~..
                            /* 0370 */  0x40, 0x05, 0xFD, 0x62, 0x6D, 0x9B, 0x4A, 0x6C,  // @..bm.Jl
                            /* 0378 */  0x04, 0xB3, 0x0A, 0x26, 0x32, 0x05, 0x45, 0xB8,  // ...&2.E.
                            /* 0380 */  0x4F, 0xBD, 0x81, 0x6F, 0xEC, 0x80, 0x6D, 0x7C,  // O..o..m|
                            /* 0388 */  0x8F, 0x22, 0x06, 0xC3, 0xF5, 0xC6, 0x38, 0xCC,  // ."....8.
                            /* 0390 */  0x64, 0xBE, 0x91, 0x00, 0x35, 0x41, 0xB3, 0xE0,  // d...5A..
                            /* 0398 */  0xE6, 0x33, 0xBD, 0x2C, 0xB7, 0xAE, 0xB2, 0xCB,  // .3.,....
                            /* 03A0 */  0xD8, 0x95, 0x6D, 0xCA, 0x95, 0x11, 0xE6, 0x1E,  // ..m.....
                            /* 03A8 */  0x29, 0x0D, 0xA9, 0x7E, 0x53, 0x0F, 0xB6, 0x90,  // )..~S...
                            /* 03B0 */  0x0E, 0xA5, 0xF8, 0x48, 0xC1, 0x16, 0x10, 0xE8,  // ...H....
                            /* 03B8 */  0x6A, 0x8C, 0xE7, 0x37, 0x4B, 0x63, 0xA6, 0xBA,  // j..7Kc..
                            /* 03C0 */  0x9A, 0xAC, 0x48, 0xC1, 0x71, 0x56, 0x16, 0x39,  // ..H.qV.9
                            /* 03C8 */  0xB2, 0xE2, 0x75, 0x45, 0xAE, 0x16, 0x73, 0x8D,  // ..uE..s.
                            /* 03D0 */  0xEE, 0x4A, 0x0D, 0x7F, 0x4F, 0xBD, 0xDA, 0xC9,  // .J..O...
                            /* 03D8 */  0x79, 0x91, 0xDD, 0xEE, 0xBF, 0x75, 0xDD, 0xC4,  // y....u..
                            /* 03E0 */  0x52, 0xCD, 0x69, 0xEC, 0xF3, 0x19, 0xF0, 0x81,  // R.i.....
                            /* 03E8 */  0x90, 0xE8, 0x2F, 0x21, 0x9D, 0xB4, 0xA1, 0xCC,  // ../!....
                            /* 03F0 */  0x58, 0xD1, 0x6A, 0xC8, 0xB4, 0xDD, 0x4E, 0x1E,  // X.j...N.
                            /* 03F8 */  0x6C, 0xAA, 0xAC, 0xEC, 0x8F, 0x9E, 0xE9, 0x49,  // l......I
                            /* 0400 */  0xA8, 0xF1, 0xA2, 0xF5, 0x20, 0x05, 0xE2, 0xA7,  // .... ...
                            /* 0408 */  0xB3, 0xA9, 0x6B, 0xF9, 0x21, 0x01, 0xC2, 0x19,  // ..k.!...
                            /* 0410 */  0xD6, 0x77, 0x42, 0x52, 0xEB, 0xC7, 0x87, 0xA4,  // .wBR....
                            /* 0418 */  0x35, 0x1B, 0x92, 0x9A, 0xD3, 0xC0, 0x13, 0xB0,  // 5.......
                            /* 0420 */  0xF5, 0xB7, 0x47, 0x12, 0xB2, 0xD6, 0x71, 0x21,  // ..G...q!
                            /* 0428 */  0x81, 0x20, 0x44, 0x26, 0xB8, 0x19, 0xF7, 0x8C,  // . D&....
                            /* 0430 */  0xDA, 0x89, 0x28, 0xE9, 0xFA, 0xB9, 0x34, 0xBE,  // ..(...4.
                            /* 0438 */  0xB1, 0x79, 0xC6, 0xEE, 0xD7, 0x57, 0x88, 0x1B,  // .y...W..
                            /* 0440 */  0xB0, 0x3C, 0x6D, 0xF7, 0x0B, 0xF9, 0x74, 0x09,  // .<m...t.
                            /* 0448 */  0xF9, 0x0D, 0x08, 0x56, 0x6D, 0xAD, 0x49, 0x40,  // ...Vm.I@
                            /* 0450 */  0xAC, 0x2A, 0x7E, 0x17, 0x0B, 0xE9, 0xBA, 0x96,  // .*~.....
                            /* 0458 */  0x65, 0x7D, 0xC8, 0xEA, 0x02, 0x9E, 0xFB, 0x8A,  // e}......
                            /* 0460 */  0xDA, 0xED, 0x3E, 0xE8, 0x11, 0x03, 0xB9, 0xF3,  // ..>.....
                            /* 0468 */  0x51, 0x58, 0x54, 0xFF, 0x99, 0x97, 0xBE, 0x07,  // QXT.....
                            /* 0470 */  0x9A, 0x97, 0xAE, 0x22, 0x57, 0x21, 0x37, 0xFE,  // ..."W!7.
                            /* 0478 */  0x11, 0x28, 0x42, 0x1C, 0x60, 0x2C, 0xA4, 0x4C,  // .(B.`,.L
                            /* 0480 */  0x1F, 0x6E, 0x53, 0x9B, 0x19, 0x80, 0x39, 0x3E,  // .nS...9>
                            /* 0488 */  0xDA, 0x5B, 0xE3, 0x5C, 0x5D, 0x9F, 0xF1, 0xA3,  // .[.\]...
                            /* 0490 */  0x00, 0x23, 0xD0, 0x06, 0xEA, 0x2B, 0x0A, 0xFC,  // .#...+..
                            /* 0498 */  0x6A, 0x83, 0x6B, 0x4A, 0xCA, 0xDE, 0x59, 0xB3,  // j.kJ..Y.
                            /* 04A0 */  0xB3, 0x58, 0x3D, 0xE7, 0xFC, 0xA1, 0x87, 0x8D,  // .X=.....
                            /* 04A8 */  0x83, 0x70, 0x6B, 0x5A, 0xEE, 0x7E, 0x39, 0x2D,  // .pkZ.~9-
                            /* 04B0 */  0x9A, 0x16, 0x77, 0x79, 0x01, 0xB4, 0x0B, 0x7E,  // ..wy...~
                            /* 04B8 */  0x66, 0x83, 0xBF, 0x4C, 0x0C, 0x91, 0x7F, 0x75,  // f..L...u
                            /* 04C0 */  0xCB, 0xD4, 0x32, 0x41, 0xC5, 0xC5, 0x0B, 0x3C,  // ..2A...<
                            /* 04C8 */  0x91, 0x42, 0xC6, 0x9F, 0xF0, 0x40, 0x7D, 0x21,  // .B...@}!
                            /* 04D0 */  0x1A, 0x70, 0xCA, 0x46, 0xEA, 0xFF, 0x47, 0xA1,  // .p.F..G.
                            /* 04D8 */  0x6A, 0xFD, 0x7E, 0x9B, 0xE5, 0x6F, 0x0C, 0x6C,  // j.~..o.l
                            /* 04E0 */  0x0B, 0xA4, 0xA9, 0x26, 0x5C, 0x45, 0xD9, 0x3B,  // ...&\E.;
                            /* 04E8 */  0xEB, 0xC6, 0x0A, 0x40, 0xD3, 0xAA, 0x76, 0xF7,  // ...@..v.
                            /* 04F0 */  0x3F, 0x8A, 0xD5, 0x83, 0x5D, 0xBC, 0xD3, 0x4B,  // ?...]..K
                            /* 04F8 */  0x21, 0x4C, 0x33, 0xBA, 0xB0, 0xF9, 0x59, 0x7B,  // !L3...Y{
                            /* 0500 */  0xAB, 0xB7, 0xE1, 0x67, 0x61, 0xDD, 0x6B, 0x43,  // ...ga.kC
                            /* 0508 */  0xBF, 0xDD, 0x0E, 0x04, 0xA8, 0xE4, 0x09, 0xBB,  // ........
                            /* 0510 */  0xCF, 0x14, 0x05, 0x00, 0xC0, 0x8E, 0x9A, 0x23,  // .......#
                            /* 0518 */  0x68, 0x04, 0x8E, 0x66, 0x23, 0x1B, 0xFC, 0xB2,  // h..f#...
                            /* 0520 */  0x1C, 0xF9, 0xD3, 0xD2, 0x11, 0x70, 0xF5, 0xBA,  // .....p..
                            /* 0528 */  0x0E, 0x93, 0x86, 0x80, 0xCC, 0xBD, 0xF7, 0x66,  // .......f
                            /* 0530 */  0xC4, 0x34, 0x3C, 0xC4, 0xA8, 0x25, 0x5A, 0x81,  // .4<..%Z.
                            /* 0538 */  0x9B, 0xB4, 0xBD, 0x44, 0x98, 0xF0, 0xF9, 0x2E,  // ...D....
                            /* 0540 */  0x48, 0x7C, 0x54, 0x9D, 0x68, 0x31, 0x2D, 0xA3,  // H|T.h1-.
                            /* 0548 */  0x4B, 0x4E, 0x52, 0xEF, 0x2A, 0xCF, 0xFF, 0x87,  // KNR.*...
                            /* 0550 */  0x96, 0xD2, 0xED, 0x8B, 0x11, 0x2D, 0x3D, 0x5A,  // .....-=Z
                            /* 0558 */  0xEB, 0xC5, 0x38, 0x42, 0x3B, 0x0A, 0x46, 0x56,  // ..8B;.FV
                            /* 0560 */  0x9A, 0xF8, 0xFE, 0x53, 0xCA, 0x6F, 0xA1, 0xFE,  // ...S.o..
                            /* 0568 */  0xEB, 0x22, 0xB1, 0x8A, 0xA9, 0xB4, 0x0F, 0x4E,  // .".....N
                            /* 0570 */  0x9D, 0xF8, 0xBC, 0x26, 0x6A, 0x5F, 0x74, 0xE7,  // ...&j_t.
                            /* 0578 */  0xFE, 0x13, 0x03, 0xF4, 0xFA, 0x48, 0xB2, 0x46,  // .....H.F
                            /* 0580 */  0xB0, 0x79, 0xF5, 0x98, 0xAA, 0x13, 0x6C, 0xA0,  // .y....l.
                            /* 0588 */  0x21, 0xBA, 0x42, 0xDC, 0x1A, 0xD7, 0x0A, 0x45,  // !.B....E
                            /* 0590 */  0x3F, 0x4A, 0xAF, 0x6E, 0x5B, 0xC5, 0x38, 0xB8,  // ?J.n[.8.
                            /* 0598 */  0x3F, 0x97, 0xDA, 0x76, 0x3F, 0x7C, 0xA6, 0x22,  // ?..v?|."
                            /* 05A0 */  0xF3, 0x4F, 0xD3, 0x39, 0xAA, 0x95, 0x0C, 0x2F,  // .O.9.../
                            /* 05A8 */  0xC6, 0xE5, 0xD5, 0x26, 0xD4, 0x49, 0x28, 0x5B,  // ...&.I([
                            /* 05B0 */  0x03, 0x90, 0x3E, 0xA8, 0x4A, 0x9F, 0x50, 0x44,  // ..>.J.PD
                            /* 05B8 */  0xCB, 0x00, 0xC7, 0x4D, 0xEB, 0x60, 0x52, 0x21,  // ...M.`R!
                            /* 05C0 */  0x84, 0xC7, 0xE8, 0xBB, 0x77, 0x58, 0xE3, 0x61,  // ....wX.a
                            /* 05C8 */  0xF0, 0x6C, 0x86, 0x5D, 0xFF, 0xDF, 0xEF, 0x27,  // .l.]...'
                            /* 05D0 */  0xC8, 0xB2, 0xB7, 0x79, 0xE9, 0x11, 0xA2, 0xDA,  // ...y....
                            /* 05D8 */  0x99, 0x33, 0xF3, 0x32, 0x2E, 0x81, 0xB8, 0xF5,  // .3.2....
                            /* 05E0 */  0x06, 0xE1, 0x44, 0x8A, 0x24, 0x93, 0x5F, 0x0A,  // ..D.$._.
                            /* 05E8 */  0x1D, 0x46, 0xA8, 0xD2, 0x17, 0x9C, 0x07, 0xC2,  // .F......
                            /* 05F0 */  0x95, 0xA5, 0xEE, 0x00, 0xCF, 0xAA, 0xF0, 0xA1,  // ........
                            /* 05F8 */  0x22, 0x73, 0x76, 0x37, 0xBF, 0xDF, 0x36, 0x59,  // "sv7..6Y
                            /* 0600 */  0x57, 0x29, 0x89, 0x3F, 0x7B, 0x8C, 0xEB, 0xEB,  // W).?{...
                            /* 0608 */  0x72, 0xCC, 0x5C, 0x82, 0xE7, 0x39, 0x62, 0x62,  // r.\..9bb
                            /* 0610 */  0x86, 0x21, 0x55, 0xA5, 0xE4, 0xA3, 0xB5, 0x85,  // .!U.....
                            /* 0618 */  0xB7, 0xE4, 0x5B, 0x02, 0xB5, 0x56, 0x1E, 0xE3,  // ..[..V..
                            /* 0620 */  0xD5, 0x81, 0x1F, 0x01, 0xC0, 0x1E, 0xE2, 0x16,  // ........
                            /* 0628 */  0x31, 0x12, 0x65, 0x38, 0x4D, 0xEB, 0xC3, 0x7D,  // 1.e8M..}
                            /* 0630 */  0xC3, 0x28, 0xA8, 0x19, 0x23, 0xD2, 0x28, 0xA8,  // .(..#.(.
                            /* 0638 */  0x48, 0xE9, 0x4D, 0xC9, 0xB3, 0x26, 0x3A, 0x87,  // H.M..&:.
                            /* 0640 */  0xC0, 0xEF, 0x69, 0x07, 0x32, 0x22, 0x97, 0xE8,  // ..i.2"..
                            /* 0648 */  0x27, 0x7C, 0x10, 0xDA, 0xEB, 0xD7, 0x28, 0xE8,  // '|....(.
                            /* 0650 */  0xB3, 0x48, 0x87, 0xE9, 0xFC, 0xF0, 0x23, 0xBA,  // .H....#.
                            /* 0658 */  0xC8, 0x9F, 0x15, 0xFD, 0x18, 0xEF, 0x67, 0x29,  // ......g)
                            /* 0660 */  0xC7, 0xEC, 0x56, 0x07, 0x81, 0xBF, 0x12, 0x53,  // ..V....S
                            /* 0668 */  0x00, 0x09, 0x00, 0x97, 0x05, 0x40, 0x08, 0xFC,  // .....@..
                            /* 0670 */  0xAF, 0x9B, 0xCA, 0x00, 0x54, 0x64, 0x1C, 0xC1,  // ....Td..
                            /* 0678 */  0x87, 0x65, 0x38, 0x0D, 0xE0, 0xEB, 0x9B, 0x01,  // .e8.....
                            /* 0680 */  0x84, 0x1D, 0x1D, 0x09, 0x3E, 0x65, 0xEC, 0xE3,  // ....>e..
                            /* 0688 */  0x62, 0x4A, 0x77, 0xE7, 0xF2, 0x89, 0x54, 0x6F,  // bJw...To
                            /* 0690 */  0x59, 0xCA, 0xC4, 0x18, 0x2E, 0x7C, 0xC0, 0x19,  // Y....|..
                            /* 0698 */  0x0A, 0x6B, 0xD6, 0xE2, 0xA1, 0x7F, 0xEE, 0x3F,  // .k.....?
                            /* 06A0 */  0xC5, 0xC0, 0xD7, 0x9C, 0x03, 0x67, 0x76, 0x28,  // .....gv(
                            /* 06A8 */  0xF9, 0x35, 0xF7, 0x81, 0x0F, 0x9E, 0x28, 0xCF,  // .5....(.
                            /* 06B0 */  0x8C, 0x1D, 0x36, 0xCE, 0xC4, 0x17, 0x7F, 0x70,  // ..6....p
                            /* 06B8 */  0x91, 0x1A, 0x01, 0x61, 0xF9, 0xE9, 0x32, 0x43,  // ...a..2C
                            /* 06C0 */  0xBD, 0x66, 0x41, 0x2C, 0x92, 0x90, 0x71, 0x3F,  // .fA,..q?
                            /* 06C8 */  0x59, 0xC7, 0x96, 0x8D, 0xD8, 0x7C, 0xD7, 0x2F,  // Y....|./
                            /* 06D0 */  0xE0, 0xD0, 0xD2, 0x44, 0x11, 0xAA, 0xCF, 0x4D,  // ...D...M
                            /* 06D8 */  0x34, 0xAC, 0x2A, 0xDF, 0x81, 0xCC, 0x8B, 0x70,  // 4.*....p
                            /* 06E0 */  0xDA, 0x37, 0x23, 0x0D, 0x42, 0x1D, 0xA5, 0x34,  // .7#.B..4
                            /* 06E8 */  0x59, 0x70, 0x9E, 0x6C, 0x9C, 0xFC, 0x73, 0xB3,  // Yp.l..s.
                            /* 06F0 */  0x5A, 0xF0, 0x4E, 0x1A, 0x74, 0x72, 0x99, 0x39,  // Z.N.tr.9
                            /* 06F8 */  0x89, 0xFD, 0x79, 0xB5, 0xD8, 0xFC, 0x2A, 0x64,  // ..y...*d
                            /* 0700 */  0xA2, 0xD6, 0xC3, 0xFA, 0x5F, 0x0D, 0x39, 0x0D,  // ...._.9.
                            /* 0708 */  0xAB, 0x79, 0x3B, 0x1A, 0x98, 0x2B, 0xA5, 0x09,  // .y;..+..
                            /* 0710 */  0x2C, 0x62, 0x4E, 0xDD, 0x66, 0xAF, 0x33, 0x69,  // ,bN.f.3i
                            /* 0718 */  0x8E, 0x74, 0xC6, 0xA1, 0xC4, 0x2D, 0x0D, 0x1D,  // .t...-..
                            /* 0720 */  0xE5, 0xB6, 0xF5, 0x2A, 0x1E, 0xAF, 0x9D, 0xD2,  // ...*....
                            /* 0728 */  0x63, 0xB8, 0x60, 0xC7, 0x34, 0xE2, 0x00         // c.`.4..
                        }
                    })
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x089E)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x34, 0x30, 0x30, 0x5F,  // ...@400_
                            /* 0010 */  0x64, 0x74, 0x74, 0x5F, 0x67, 0x70, 0x75, 0x5F,  // dtt_gpu_
                            /* 0018 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                            /* 0020 */  0x61, 0x6E, 0x74, 0x5F, 0x32, 0x30, 0x32, 0x30,  // ant_2020
                            /* 0028 */  0x31, 0x32, 0x30, 0x38, 0x34, 0x30, 0x30, 0x5F,  // 1208400_
                            /* 0030 */  0x44, 0x54, 0x54, 0x5F, 0x47, 0x50, 0x55, 0x5F,  // DTT_GPU_
                            /* 0038 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                            /* 0040 */  0x61, 0x6E, 0x74, 0x5F, 0x32, 0x30, 0x32, 0x30,  // ant_2020
                            /* 0048 */  0x31, 0x32, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00,  // 1208....
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xF9, 0xCA, 0x24, 0x9C,  // ......$.
                            /* 0070 */  0x00, 0x37, 0x09, 0xA2, 0x6F, 0xBF, 0x22, 0xC3,  // .7..o.".
                            /* 0078 */  0x5E, 0xA4, 0x6E, 0xBC, 0x31, 0x86, 0x2B, 0x6D,  // ^.n.1.+m
                            /* 0080 */  0x0F, 0x14, 0x0D, 0x60, 0xC0, 0x88, 0x85, 0x8B,  // ...`....
                            /* 0088 */  0xEC, 0xD7, 0x7C, 0x9D, 0x0A, 0x08, 0x00, 0x00,  // ..|.....
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x06, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0xC6, 0xD6,  // u8...D..
                            /* 00D0 */  0x61, 0x68, 0x30, 0x51, 0x0E, 0xDE, 0x5C, 0x81,  // ah0Q..\.
                            /* 00D8 */  0x89, 0x65, 0xAE, 0xCE, 0xBD, 0xF8, 0x2B, 0x5D,  // .e....+]
                            /* 00E0 */  0x7B, 0x65, 0xB2, 0x43, 0x7D, 0xDD, 0x45, 0x4C,  // {e.C}.EL
                            /* 00E8 */  0x9C, 0x82, 0x53, 0x84, 0xAA, 0xA9, 0xA5, 0x27,  // ..S....'
                            /* 00F0 */  0xBA, 0x18, 0xB5, 0xDB, 0x79, 0xEA, 0x54, 0x92,  // ....y.T.
                            /* 00F8 */  0x0C, 0xED, 0x45, 0x29, 0x58, 0x66, 0xC0, 0xCD,  // ..E)Xf..
                            /* 0100 */  0x22, 0xFA, 0xA0, 0x28, 0x86, 0x61, 0xFD, 0x60,  // "..(.a.`
                            /* 0108 */  0x2B, 0xF4, 0x4B, 0x2D, 0x67, 0x60, 0xC7, 0xDF,  // +.K-g`..
                            /* 0110 */  0x02, 0xC4, 0x8C, 0xA8, 0x07, 0x03, 0x50, 0x2E,  // ......P.
                            /* 0118 */  0xE1, 0xB0, 0x7A, 0xD3, 0xF3, 0xD9, 0x1C, 0x52,  // ..z....R
                            /* 0120 */  0xBE, 0x7E, 0x4E, 0x70, 0x60, 0xD3, 0xA1, 0x62,  // .~Np`..b
                            /* 0128 */  0x6A, 0x3D, 0x85, 0xFE, 0x33, 0x31, 0x21, 0x44,  // j=..31!D
                            /* 0130 */  0x6D, 0x0E, 0xEE, 0x98, 0x38, 0xED, 0x0D, 0x1E,  // m...8...
                            /* 0138 */  0x04, 0xF9, 0xFC, 0x09, 0xB2, 0x67, 0xB8, 0xEE,  // .....g..
                            /* 0140 */  0x3A, 0x4C, 0xE3, 0x5A, 0x61, 0x63, 0x0B, 0x2D,  // :L.Zac.-
                            /* 0148 */  0x11, 0xD6, 0xA2, 0xF5, 0xF5, 0xEE, 0x8C, 0x45,  // .......E
                            /* 0150 */  0xD2, 0x95, 0x83, 0x2F, 0xBD, 0xA5, 0x0A, 0x04,  // .../....
                            /* 0158 */  0xC5, 0xF1, 0x3A, 0x07, 0x19, 0xE6, 0xA2, 0xEF,  // ..:.....
                            /* 0160 */  0x47, 0xF9, 0xCF, 0x0E, 0xBB, 0x75, 0xC5, 0x13,  // G....u..
                            /* 0168 */  0x88, 0xE3, 0xA0, 0x72, 0x6F, 0x9B, 0xDF, 0x6E,  // ...ro..n
                            /* 0170 */  0xFF, 0x6B, 0x6D, 0x87, 0x2B, 0xA9, 0xA0, 0xAF,  // .km.+...
                            /* 0178 */  0xC5, 0x5D, 0xF2, 0xE9, 0xBE, 0xA1, 0x10, 0x3A,  // .].....:
                            /* 0180 */  0x4F, 0xEF, 0x24, 0xFF, 0x81, 0x42, 0x8F, 0x7E,  // O.$..B.~
                            /* 0188 */  0x37, 0x36, 0x62, 0x8B, 0x09, 0x1E, 0xAE, 0x2D,  // 76b....-
                            /* 0190 */  0xC6, 0xE6, 0x8A, 0x19, 0x7F, 0x0B, 0x25, 0xEB,  // ......%.
                            /* 0198 */  0x90, 0x2F, 0xBD, 0x46, 0x63, 0x1A, 0x41, 0x62,  // ./.Fc.Ab
                            /* 01A0 */  0x0B, 0xD4, 0x11, 0x6F, 0x68, 0xD2, 0xD7, 0x89,  // ...oh...
                            /* 01A8 */  0x90, 0x5E, 0x14, 0x2F, 0xCE, 0x2A, 0xE9, 0x4C,  // .^./.*.L
                            /* 01B0 */  0x9B, 0x87, 0xCD, 0xD0, 0x81, 0xE4, 0xDE, 0x8A,  // ........
                            /* 01B8 */  0xA7, 0xBB, 0x6D, 0xBC, 0xAA, 0x99, 0xAD, 0xB5,  // ..m.....
                            /* 01C0 */  0x44, 0xC7, 0x43, 0xB9, 0xAF, 0x5B, 0x5F, 0x06,  // D.C..[_.
                            /* 01C8 */  0x67, 0x84, 0x00, 0xB3, 0x6E, 0xC6, 0x1F, 0x49,  // g...n..I
                            /* 01D0 */  0xBA, 0x4A, 0x66, 0x94, 0xB5, 0xD8, 0xC3, 0x74,  // .Jf....t
                            /* 01D8 */  0x72, 0x53, 0xC6, 0x60, 0x57, 0x15, 0xD2, 0x3B,  // rS.`W..;
                            /* 01E0 */  0xC4, 0x91, 0x79, 0x8C, 0x22, 0x7E, 0x34, 0xEE,  // ..y."~4.
                            /* 01E8 */  0x13, 0x9B, 0xAE, 0x72, 0x12, 0x01, 0xE9, 0x52,  // ...r...R
                            /* 01F0 */  0x8A, 0x40, 0xEA, 0xBE, 0xF0, 0xE6, 0x93, 0x75,  // .@.....u
                            /* 01F8 */  0x85, 0xA8, 0x88, 0xDB, 0xA7, 0xF2, 0x38, 0xBD,  // ......8.
                            /* 0200 */  0x91, 0x66, 0xDE, 0xE5, 0xD7, 0x17, 0x61, 0x69,  // .f....ai
                            /* 0208 */  0x17, 0xD5, 0xB6, 0xCA, 0x6D, 0x74, 0x34, 0x5D,  // ....mt4]
                            /* 0210 */  0xEE, 0x82, 0xEF, 0x53, 0x19, 0x20, 0x0D, 0x1F,  // ...S. ..
                            /* 0218 */  0x36, 0x72, 0xDF, 0x6A, 0x24, 0xEA, 0x52, 0x6C,  // 6r.j$.Rl
                            /* 0220 */  0xAA, 0xD0, 0x0C, 0xE4, 0x5C, 0xEF, 0xB3, 0x72,  // ....\..r
                            /* 0228 */  0x22, 0x9C, 0xD6, 0x12, 0x97, 0x96, 0x93, 0x98,  // ".......
                            /* 0230 */  0x09, 0x37, 0xC4, 0x1F, 0xA5, 0x49, 0x16, 0x87,  // .7...I..
                            /* 0238 */  0x52, 0xBF, 0x2C, 0xC5, 0xF4, 0x84, 0x0F, 0x9D,  // R.,.....
                            /* 0240 */  0x98, 0xB3, 0x25, 0xF5, 0x93, 0xB2, 0xE8, 0x06,  // ..%.....
                            /* 0248 */  0xBD, 0xFD, 0x57, 0x7A, 0x2E, 0x61, 0x83, 0x7D,  // ..Wz.a.}
                            /* 0250 */  0x9A, 0xC5, 0x8F, 0xFB, 0x5C, 0xE0, 0x91, 0x21,  // ....\..!
                            /* 0258 */  0x84, 0x1E, 0xC2, 0xF2, 0x34, 0xE2, 0x8D, 0xF3,  // ....4...
                            /* 0260 */  0xA0, 0x0B, 0x03, 0x08, 0x14, 0x01, 0x2D, 0xED,  // ......-.
                            /* 0268 */  0xBC, 0x63, 0x91, 0xE6, 0x47, 0x4B, 0x67, 0x68,  // .c..GKgh
                            /* 0270 */  0x23, 0x7F, 0x59, 0x57, 0xC4, 0x03, 0x88, 0x2B,  // #.YW...+
                            /* 0278 */  0xC3, 0xC4, 0x8A, 0xA3, 0xFF, 0xA4, 0xE8, 0xD0,  // ........
                            /* 0280 */  0xFB, 0x1F, 0x25, 0x82, 0x96, 0xBE, 0xDC, 0x4F,  // ..%....O
                            /* 0288 */  0xBD, 0xFD, 0x7B, 0x8D, 0xE4, 0xE0, 0xDF, 0x20,  // ..{.... 
                            /* 0290 */  0x39, 0xF6, 0xFE, 0x1A, 0x1C, 0xFE, 0x67, 0x79,  // 9.....gy
                            /* 0298 */  0x8A, 0x1D, 0x22, 0x2D, 0x8B, 0x88, 0x76, 0x8B,  // .."-..v.
                            /* 02A0 */  0x8B, 0x71, 0xCB, 0x89, 0x59, 0x25, 0x0F, 0x07,  // .q..Y%..
                            /* 02A8 */  0xC9, 0x53, 0x72, 0xA4, 0xB2, 0x07, 0xA9, 0xEF,  // .Sr.....
                            /* 02B0 */  0xC4, 0x53, 0x00, 0x14, 0x4B, 0x1A, 0xDE, 0x07,  // .S..K...
                            /* 02B8 */  0x3B, 0x9B, 0xB3, 0x97, 0xF3, 0x16, 0x4E, 0x13,  // ;.....N.
                            /* 02C0 */  0x5E, 0xF9, 0x82, 0x4F, 0xA3, 0x74, 0x53, 0x26,  // ^..O.tS&
                            /* 02C8 */  0xD1, 0x08, 0xAB, 0xE9, 0xEE, 0x25, 0x7E, 0x25,  // .....%~%
                            /* 02D0 */  0x01, 0xA1, 0x6A, 0x8B, 0xF5, 0xD5, 0x41, 0x8D,  // ..j...A.
                            /* 02D8 */  0x92, 0x3D, 0xA8, 0x31, 0x62, 0xD0, 0xFA, 0x86,  // .=.1b...
                            /* 02E0 */  0xED, 0xE4, 0xCB, 0x74, 0x2D, 0x60, 0x7A, 0x99,  // ...t-`z.
                            /* 02E8 */  0x92, 0x32, 0x68, 0x51, 0xC2, 0x79, 0x76, 0xEB,  // .2hQ.yv.
                            /* 02F0 */  0x20, 0x72, 0x43, 0xE9, 0x98, 0x57, 0xA4, 0xC7,  //  rC..W..
                            /* 02F8 */  0x22, 0x01, 0x82, 0x31, 0x15, 0x12, 0x3B, 0x8E,  // "..1..;.
                            /* 0300 */  0xAD, 0xF8, 0x25, 0x4F, 0x1E, 0x58, 0x71, 0x3A,  // ..%O.Xq:
                            /* 0308 */  0x7B, 0x89, 0x4C, 0x66, 0x28, 0x43, 0xD2, 0x3C,  // {.Lf(C.<
                            /* 0310 */  0x23, 0xA4, 0x1E, 0x59, 0x1F, 0x2C, 0x03, 0xBB,  // #..Y.,..
                            /* 0318 */  0xE6, 0xED, 0xEB, 0x4A, 0x5C, 0x72, 0xD1, 0xDF,  // ...J\r..
                            /* 0320 */  0x63, 0x82, 0xFC, 0x18, 0x1D, 0x9F, 0xF8, 0x3C,  // c......<
                            /* 0328 */  0x9C, 0xFC, 0x90, 0x9F, 0xEC, 0x61, 0x61, 0xD9,  // .....aa.
                            /* 0330 */  0x90, 0xAB, 0xD6, 0xA2, 0x98, 0x23, 0x5E, 0xE7,  // .....#^.
                            /* 0338 */  0xF9, 0xEE, 0x5E, 0xFD, 0x8B, 0xD0, 0xD8, 0x33,  // ..^....3
                            /* 0340 */  0xF2, 0x4E, 0x46, 0x7A, 0x5E, 0x61, 0x96, 0x2D,  // .NFz^a.-
                            /* 0348 */  0xD7, 0x9D, 0xC3, 0xD4, 0x1C, 0xA6, 0x1C, 0x3D,  // .......=
                            /* 0350 */  0x20, 0x8A, 0x73, 0xC4, 0x5F, 0xB2, 0x85, 0x8C,  //  .s._...
                            /* 0358 */  0xC3, 0xBC, 0xC8, 0x0D, 0xA8, 0x2A, 0xD2, 0x04,  // .....*..
                            /* 0360 */  0x1E, 0x7D, 0x3A, 0xD6, 0xD6, 0xC9, 0x1F, 0x7A,  // .}:....z
                            /* 0368 */  0xAA, 0x41, 0x6F, 0x78, 0x26, 0x3A, 0x0A, 0xC7,  // .Aox&:..
                            /* 0370 */  0x5D, 0xD1, 0x44, 0x53, 0xDF, 0x35, 0xC7, 0xA7,  // ].DS.5..
                            /* 0378 */  0x1D, 0xC1, 0x2E, 0xBF, 0x83, 0x22, 0xD6, 0xA6,  // ....."..
                            /* 0380 */  0x6E, 0xA3, 0xB3, 0x4E, 0x2F, 0xB9, 0x4D, 0x1B,  // n..N/.M.
                            /* 0388 */  0xAB, 0x63, 0xBB, 0xC1, 0xE4, 0x1C, 0xBF, 0xAB,  // .c......
                            /* 0390 */  0x2A, 0x15, 0xC1, 0x71, 0x05, 0xD5, 0xB0, 0x23,  // *..q...#
                            /* 0398 */  0x5B, 0x42, 0xF7, 0x90, 0xA9, 0x81, 0x35, 0x9F,  // [B....5.
                            /* 03A0 */  0xEE, 0x2B, 0x5E, 0x5E, 0x93, 0x41, 0xDE, 0xD1,  // .+^^.A..
                            /* 03A8 */  0x87, 0x83, 0x55, 0x9F, 0x3A, 0xD9, 0xA1, 0x83,  // ..U.:...
                            /* 03B0 */  0xE6, 0x89, 0x7F, 0xFD, 0x57, 0xDA, 0xEE, 0x03,  // ....W...
                            /* 03B8 */  0x06, 0x28, 0x0A, 0x5C, 0x65, 0xB7, 0x5F, 0x79,  // .(.\e._y
                            /* 03C0 */  0x73, 0x89, 0xC3, 0x0D, 0xD9, 0xBD, 0x95, 0x06,  // s.......
                            /* 03C8 */  0xF7, 0xBB, 0x3C, 0x15, 0xB0, 0xD3, 0x69, 0x78,  // ..<...ix
                            /* 03D0 */  0x46, 0x9C, 0x1F, 0x35, 0x87, 0x6C, 0x2B, 0xA1,  // F..5.l+.
                            /* 03D8 */  0x4E, 0x7A, 0x10, 0x4C, 0xD6, 0x5B, 0x2E, 0xFB,  // Nz.L.[..
                            /* 03E0 */  0x6F, 0x49, 0xF8, 0x4E, 0x91, 0xD4, 0x39, 0x21,  // oI.N..9!
                            /* 03E8 */  0x3C, 0xC9, 0x80, 0x43, 0x93, 0xB6, 0x0A, 0xED,  // <..C....
                            /* 03F0 */  0x06, 0x62, 0x48, 0xB4, 0x0E, 0xFB, 0xDC, 0xD5,  // .bH.....
                            /* 03F8 */  0x3E, 0x6B, 0x74, 0x24, 0x4E, 0x7C, 0xD6, 0xA8,  // >kt$N|..
                            /* 0400 */  0x53, 0x74, 0x14, 0x9B, 0x62, 0x73, 0xDB, 0xCE,  // St..bs..
                            /* 0408 */  0xE2, 0x7F, 0xC0, 0x4A, 0x00, 0xBA, 0xDB, 0xE1,  // ...J....
                            /* 0410 */  0x0C, 0xFB, 0x70, 0x56, 0x61, 0x24, 0x7C, 0xB9,  // ..pVa$|.
                            /* 0418 */  0x77, 0x43, 0xD2, 0xB0, 0x4E, 0x30, 0x4B, 0x14,  // wC..N0K.
                            /* 0420 */  0x5C, 0xB1, 0x7A, 0x32, 0xB9, 0x72, 0xD3, 0x84,  // \.z2.r..
                            /* 0428 */  0x31, 0xE2, 0x26, 0xE4, 0x7D, 0xE1, 0x9F, 0xB4,  // 1.&.}...
                            /* 0430 */  0x0B, 0xEB, 0x17, 0xCB, 0xE6, 0x49, 0xBE, 0xD7,  // .....I..
                            /* 0438 */  0xD8, 0x8D, 0x53, 0xA7, 0x7C, 0xA3, 0x25, 0x09,  // ..S.|.%.
                            /* 0440 */  0x9B, 0x23, 0x51, 0x0A, 0x56, 0xF7, 0xB1, 0xAE,  // .#Q.V...
                            /* 0448 */  0xF1, 0x2B, 0x8B, 0x6B, 0xB0, 0xBB, 0x0D, 0xB4,  // .+.k....
                            /* 0450 */  0x01, 0x25, 0x81, 0x18, 0x17, 0x3F, 0x3E, 0x91,  // .%...?>.
                            /* 0458 */  0xD0, 0xFC, 0x1A, 0x52, 0xFF, 0x03, 0xCA, 0xAF,  // ...R....
                            /* 0460 */  0xD9, 0xF0, 0xC7, 0xEA, 0xEC, 0xAE, 0x7C, 0x4C,  // ......|L
                            /* 0468 */  0xFD, 0x8C, 0xF0, 0xAB, 0xE5, 0x8C, 0x0F, 0xCC,  // ........
                            /* 0470 */  0xCE, 0x35, 0xA1, 0x4A, 0x5D, 0x6E, 0x97, 0x1D,  // .5.J]n..
                            /* 0478 */  0x5D, 0x96, 0x41, 0xD1, 0x71, 0x9D, 0xD8, 0x3B,  // ].A.q..;
                            /* 0480 */  0x03, 0xE3, 0x9A, 0xF5, 0x33, 0xAC, 0x95, 0xB4,  // ....3...
                            /* 0488 */  0x7B, 0xA0, 0x9B, 0x30, 0x91, 0x35, 0x33, 0xC7,  // {..0.53.
                            /* 0490 */  0x6A, 0x05, 0x55, 0x06, 0x51, 0x51, 0xCE, 0xFF,  // j.U.QQ..
                            /* 0498 */  0x84, 0x1A, 0xFC, 0xB4, 0x4E, 0x17, 0x70, 0xDD,  // ....N.p.
                            /* 04A0 */  0xFF, 0x4D, 0x33, 0x13, 0x49, 0x3B, 0x6B, 0xE5,  // .M3.I;k.
                            /* 04A8 */  0x67, 0x80, 0x10, 0xAB, 0x52, 0x78, 0x5C, 0x98,  // g...Rx\.
                            /* 04B0 */  0x74, 0xCA, 0x11, 0x9E, 0x84, 0x7D, 0x53, 0x6F,  // t....}So
                            /* 04B8 */  0xB7, 0x20, 0xF1, 0x2E, 0x76, 0x49, 0x30, 0x96,  // . ..vI0.
                            /* 04C0 */  0x6D, 0x02, 0x57, 0xA5, 0x1B, 0xF7, 0xE0, 0x9C,  // m.W.....
                            /* 04C8 */  0xF1, 0x71, 0x07, 0x7C, 0x12, 0xB9, 0xE3, 0xD4,  // .q.|....
                            /* 04D0 */  0x3A, 0x86, 0xAE, 0x54, 0x31, 0xCE, 0x9B, 0x1C,  // :..T1...
                            /* 04D8 */  0xBC, 0x3C, 0xDE, 0xA7, 0x74, 0xCA, 0x39, 0xDA,  // .<..t.9.
                            /* 04E0 */  0x63, 0x4A, 0x2D, 0x70, 0xD9, 0x47, 0x6B, 0x27,  // cJ-p.Gk'
                            /* 04E8 */  0x30, 0x43, 0x9E, 0xAB, 0x1E, 0x86, 0x6F, 0xD3,  // 0C....o.
                            /* 04F0 */  0xBA, 0x16, 0x59, 0xF4, 0x1E, 0xBD, 0x96, 0x3A,  // ..Y....:
                            /* 04F8 */  0x45, 0x62, 0x16, 0x47, 0x5C, 0xF3, 0xDC, 0xB6,  // Eb.G\...
                            /* 0500 */  0xC8, 0x64, 0x4A, 0xCF, 0x1A, 0x27, 0xBF, 0x0C,  // .dJ..'..
                            /* 0508 */  0xC8, 0xF5, 0x97, 0x6A, 0xF6, 0xD6, 0xB3, 0xEB,  // ...j....
                            /* 0510 */  0x50, 0x39, 0x50, 0x4F, 0xCB, 0xFA, 0x38, 0xCA,  // P9PO..8.
                            /* 0518 */  0xB0, 0x46, 0x33, 0xFB, 0xE9, 0xB2, 0x44, 0x26,  // .F3...D&
                            /* 0520 */  0xA7, 0xA0, 0x25, 0x62, 0x0E, 0x31, 0x6F, 0xB2,  // ..%b.1o.
                            /* 0528 */  0x6B, 0x8B, 0x97, 0xA4, 0x58, 0x5B, 0x4C, 0x7A,  // k...X[Lz
                            /* 0530 */  0x7D, 0xDA, 0xD2, 0xC0, 0xD2, 0x74, 0x06, 0xF0,  // }....t..
                            /* 0538 */  0xF0, 0x39, 0x35, 0x4F, 0x5D, 0x68, 0x1E, 0x7F,  // .95O]h..
                            /* 0540 */  0x1B, 0x5E, 0x18, 0xFE, 0xF4, 0xF2, 0x76, 0x3C,  // .^....v<
                            /* 0548 */  0x33, 0x23, 0xE6, 0xA6, 0x92, 0xD6, 0x39, 0x64,  // 3#....9d
                            /* 0550 */  0x25, 0x03, 0x1C, 0xA9, 0x58, 0x87, 0xB5, 0x16,  // %...X...
                            /* 0558 */  0x39, 0xC7, 0xF8, 0x4A, 0x2E, 0x24, 0x79, 0xD0,  // 9..J.$y.
                            /* 0560 */  0x5F, 0x88, 0x5C, 0xBE, 0x41, 0x73, 0xD7, 0x73,  // _.\.As.s
                            /* 0568 */  0xBB, 0x23, 0x28, 0xEB, 0xB6, 0x58, 0x8A, 0xCE,  // .#(..X..
                            /* 0570 */  0x4D, 0x43, 0x59, 0xC1, 0xB4, 0x98, 0xD3, 0xC6,  // MCY.....
                            /* 0578 */  0x41, 0x94, 0xE9, 0x86, 0x65, 0x45, 0x1D, 0x74,  // A...eE.t
                            /* 0580 */  0x89, 0xCD, 0x38, 0xA3, 0x82, 0x1B, 0x7B, 0x87,  // ..8...{.
                            /* 0588 */  0x5D, 0x4B, 0xC7, 0xFE, 0xF5, 0x45, 0x6A, 0xAB,  // ]K...Ej.
                            /* 0590 */  0xF8, 0x71, 0xA7, 0xD4, 0x4E, 0x95, 0x1B, 0xCD,  // .q..N...
                            /* 0598 */  0x68, 0xA6, 0x82, 0xF8, 0x1E, 0x1D, 0xFD, 0xC3,  // h.......
                            /* 05A0 */  0xB9, 0x1A, 0xE8, 0x54, 0xC5, 0x0A, 0x24, 0x05,  // ...T..$.
                            /* 05A8 */  0x9E, 0x32, 0x2F, 0xE0, 0x9F, 0x8F, 0x9F, 0xFB,  // .2/.....
                            /* 05B0 */  0xDC, 0x20, 0xDE, 0x0D, 0x07, 0x13, 0x92, 0xB6,  // . ......
                            /* 05B8 */  0x12, 0x47, 0x67, 0xC7, 0x25, 0x00, 0x9F, 0xA5,  // .Gg.%...
                            /* 05C0 */  0x5F, 0xF1, 0x1E, 0x1B, 0xCB, 0x31, 0xF2, 0x22,  // _....1."
                            /* 05C8 */  0xD4, 0x7A, 0x5A, 0x4D, 0xD1, 0x79, 0x1A, 0x61,  // .zZM.y.a
                            /* 05D0 */  0xFB, 0x41, 0x1A, 0xD3, 0xEC, 0xFE, 0x8C, 0x31,  // .A.....1
                            /* 05D8 */  0xF7, 0x0A, 0xB5, 0x41, 0x50, 0x33, 0x59, 0x47,  // ...AP3YG
                            /* 05E0 */  0x8E, 0x2C, 0xE1, 0x51, 0x9C, 0x32, 0x02, 0xE3,  // .,.Q.2..
                            /* 05E8 */  0x09, 0x27, 0x87, 0xBF, 0xA7, 0x0F, 0x3B, 0x7E,  // .'....;~
                            /* 05F0 */  0x4D, 0x41, 0xEE, 0x52, 0x4A, 0x07, 0xCE, 0x88,  // MA.RJ...
                            /* 05F8 */  0x51, 0x35, 0xDB, 0x10, 0xAD, 0x17, 0xAC, 0x2D,  // Q5.....-
                            /* 0600 */  0x83, 0x4C, 0xA5, 0xA8, 0x94, 0x61, 0x71, 0xDA,  // .L...aq.
                            /* 0608 */  0x71, 0x3E, 0x1A, 0x51, 0x7D, 0xA1, 0x0C, 0x0D,  // q>.Q}...
                            /* 0610 */  0x49, 0x72, 0x6A, 0x93, 0xA7, 0xFB, 0x27, 0xF0,  // Irj...'.
                            /* 0618 */  0xF1, 0x45, 0xF3, 0x76, 0x33, 0xBC, 0x67, 0xB1,  // .E.v3.g.
                            /* 0620 */  0xE1, 0xE6, 0x6A, 0x4D, 0x44, 0x52, 0x04, 0x1D,  // ..jMDR..
                            /* 0628 */  0xD0, 0xC7, 0xCC, 0x0F, 0x4F, 0x74, 0xD1, 0x4F,  // ....Ot.O
                            /* 0630 */  0x67, 0x1A, 0xAA, 0x7B, 0x77, 0xF1, 0x9F, 0x4A,  // g..{w..J
                            /* 0638 */  0xED, 0x1D, 0x32, 0xF3, 0xA0, 0xF4, 0x6B, 0x25,  // ..2...k%
                            /* 0640 */  0x43, 0xBE, 0x33, 0x31, 0xF5, 0x86, 0xCB, 0x9A,  // C.31....
                            /* 0648 */  0xFB, 0xEC, 0x5D, 0x7C, 0xC0, 0xA4, 0xD0, 0x02,  // ..]|....
                            /* 0650 */  0x1D, 0x20, 0x69, 0x44, 0x92, 0x7F, 0x41, 0x37,  // . iD..A7
                            /* 0658 */  0x03, 0xB3, 0xF8, 0x9E, 0x71, 0x21, 0x80, 0x2C,  // ....q!.,
                            /* 0660 */  0x90, 0x66, 0x1C, 0xCD, 0x78, 0xD4, 0xFB, 0xFE,  // .f..x...
                            /* 0668 */  0x5B, 0x54, 0x40, 0x80, 0xAD, 0x9D, 0x3E, 0x06,  // [T@...>.
                            /* 0670 */  0x2A, 0xE3, 0xCA, 0x62, 0x12, 0x9D, 0x34, 0x63,  // *..b..4c
                            /* 0678 */  0xBC, 0xB6, 0xB6, 0xC6, 0x33, 0xB6, 0x91, 0x4E,  // ....3..N
                            /* 0680 */  0x67, 0xDD, 0x04, 0x2A, 0xB6, 0x4D, 0x11, 0x08,  // g..*.M..
                            /* 0688 */  0x49, 0xA1, 0xCD, 0x0D, 0x43, 0xCC, 0x03, 0xE9,  // I...C...
                            /* 0690 */  0x78, 0x26, 0x46, 0x4F, 0x30, 0x6C, 0x0D, 0xFB,  // x&FO0l..
                            /* 0698 */  0x74, 0x73, 0x2E, 0x5D, 0xB5, 0x5C, 0xB6, 0x0F,  // ts.].\..
                            /* 06A0 */  0x5F, 0xE7, 0xC5, 0xEB, 0xC7, 0x95, 0xA0, 0x61,  // _......a
                            /* 06A8 */  0xF3, 0xCC, 0x74, 0x7A, 0x8A, 0x43, 0x20, 0x26,  // ..tz.C &
                            /* 06B0 */  0x00, 0xF6, 0xC4, 0x9B, 0x9D, 0x93, 0x1D, 0x55,  // .......U
                            /* 06B8 */  0x47, 0x16, 0xDB, 0xC2, 0xD7, 0x17, 0x57, 0x22,  // G.....W"
                            /* 06C0 */  0xEC, 0xBC, 0x69, 0x84, 0x46, 0xBA, 0xA9, 0xF0,  // ..i.F...
                            /* 06C8 */  0xE8, 0x8F, 0x3B, 0x6C, 0x89, 0x22, 0x7F, 0xDB,  // ..;l."..
                            /* 06D0 */  0x58, 0xF4, 0x0C, 0xDF, 0x59, 0xC8, 0x37, 0xD5,  // X...Y.7.
                            /* 06D8 */  0xF6, 0x97, 0xC2, 0x96, 0x37, 0x2F, 0xC9, 0xE8,  // ....7/..
                            /* 06E0 */  0xFD, 0xE9, 0x61, 0x19, 0x02, 0x35, 0xC8, 0x87,  // ..a..5..
                            /* 06E8 */  0x77, 0x45, 0xA2, 0x0E, 0x4E, 0xA2, 0xD4, 0x48,  // wE..N..H
                            /* 06F0 */  0xE7, 0xCB, 0x43, 0x4A, 0xC2, 0xB4, 0xF5, 0x77,  // ..CJ...w
                            /* 06F8 */  0x4D, 0x4A, 0x69, 0x30, 0x05, 0x0F, 0xC4, 0x84,  // MJi0....
                            /* 0700 */  0x03, 0x0E, 0x75, 0xD0, 0xBC, 0xB0, 0x5B, 0x6B,  // ..u...[k
                            /* 0708 */  0xF4, 0x46, 0x60, 0xFF, 0xAC, 0xAE, 0x9F, 0xCD,  // .F`.....
                            /* 0710 */  0xF4, 0x76, 0x7F, 0x59, 0x51, 0x2B, 0x34, 0x73,  // .v.YQ+4s
                            /* 0718 */  0x72, 0x29, 0x90, 0xC7, 0x2B, 0x25, 0xCC, 0xC6,  // r)..+%..
                            /* 0720 */  0x64, 0xDC, 0xE0, 0xF2, 0xB6, 0x84, 0xED, 0x3B,  // d......;
                            /* 0728 */  0xED, 0xE9, 0xB1, 0x00, 0x39, 0xB0, 0x73, 0xB6,  // ....9.s.
                            /* 0730 */  0x8B, 0x6B, 0xE2, 0x8C, 0xE0, 0xEF, 0x61, 0x98,  // .k....a.
                            /* 0738 */  0x29, 0x98, 0xEA, 0x07, 0xAE, 0xA4, 0x2D, 0x11,  // ).....-.
                            /* 0740 */  0x5E, 0xE6, 0x09, 0x61, 0x44, 0xE7, 0xFC, 0xBD,  // ^..aD...
                            /* 0748 */  0x7D, 0x23, 0xE7, 0x35, 0x09, 0xBB, 0x08, 0xD1,  // }#.5....
                            /* 0750 */  0xAE, 0x45, 0x76, 0x35, 0xAF, 0x14, 0x41, 0xED,  // .Ev5..A.
                            /* 0758 */  0x0E, 0x0D, 0x4E, 0x21, 0x65, 0x7F, 0x0F, 0xA0,  // ..N!e...
                            /* 0760 */  0xCA, 0x19, 0xE2, 0x92, 0x54, 0xEB, 0x1A, 0x43,  // ....T..C
                            /* 0768 */  0x4E, 0x4F, 0xC7, 0xB1, 0xA9, 0xFE, 0x57, 0xCC,  // NO....W.
                            /* 0770 */  0xE2, 0xDE, 0x9D, 0xF1, 0xD9, 0xC7, 0x40, 0x5E,  // ......@^
                            /* 0778 */  0x11, 0xDB, 0xEC, 0x87, 0xBC, 0x42, 0xFF, 0xB0,  // .....B..
                            /* 0780 */  0xC9, 0x02, 0xAE, 0x81, 0xC8, 0xED, 0x5F, 0xA1,  // ......_.
                            /* 0788 */  0x22, 0x45, 0x55, 0xCC, 0x3D, 0x69, 0x89, 0xEB,  // "EU.=i..
                            /* 0790 */  0x27, 0x21, 0xBE, 0xE4, 0xD0, 0x45, 0x76, 0xC6,  // '!...Ev.
                            /* 0798 */  0xB9, 0xA5, 0x36, 0x43, 0x87, 0x4C, 0xD1, 0xD4,  // ..6C.L..
                            /* 07A0 */  0x4B, 0xAC, 0x90, 0x85, 0x68, 0xD6, 0xCE, 0x56,  // K...h..V
                            /* 07A8 */  0xC8, 0x2A, 0x71, 0xA6, 0x4F, 0xDA, 0x9B, 0x6C,  // .*q.O..l
                            /* 07B0 */  0x69, 0xA1, 0xAF, 0xD7, 0xD1, 0x23, 0x9B, 0x02,  // i....#..
                            /* 07B8 */  0x23, 0x79, 0x60, 0x96, 0x27, 0x5F, 0xE0, 0x93,  // #y`.'_..
                            /* 07C0 */  0x88, 0x61, 0x4B, 0xB6, 0xE4, 0xB7, 0x59, 0x27,  // .aK...Y'
                            /* 07C8 */  0xB2, 0x5C, 0x9A, 0x8B, 0xE0, 0xA8, 0xC3, 0xE0,  // .\......
                            /* 07D0 */  0xCE, 0x26, 0x76, 0x55, 0xDF, 0x59, 0x6A, 0x6A,  // .&vU.Yjj
                            /* 07D8 */  0x80, 0x4F, 0x2F, 0x69, 0xCD, 0x77, 0x31, 0x4D,  // .O/i.w1M
                            /* 07E0 */  0x6A, 0x23, 0x0F, 0xC2, 0xAE, 0xAA, 0xE9, 0x60,  // j#.....`
                            /* 07E8 */  0xA3, 0x55, 0xF9, 0xC5, 0x30, 0x22, 0x31, 0x55,  // .U..0"1U
                            /* 07F0 */  0x03, 0xED, 0x57, 0xB3, 0x63, 0x82, 0x77, 0xE2,  // ..W.c.w.
                            /* 07F8 */  0xCB, 0x17, 0x09, 0x6D, 0x5A, 0xE9, 0x82, 0x97,  // ...mZ...
                            /* 0800 */  0xC7, 0xC6, 0xA8, 0x26, 0x2E, 0x36, 0x7F, 0x9F,  // ...&.6..
                            /* 0808 */  0xD8, 0x22, 0x0C, 0x41, 0x95, 0x76, 0xDE, 0x1D,  // .".A.v..
                            /* 0810 */  0x4E, 0x86, 0xD3, 0x16, 0x9A, 0xCF, 0xB6, 0x3D,  // N......=
                            /* 0818 */  0xFF, 0x3E, 0x96, 0x9B, 0x72, 0xD2, 0x4A, 0x4F,  // .>..r.JO
                            /* 0820 */  0xF4, 0x27, 0xEB, 0x12, 0x97, 0x9A, 0xE6, 0x1D,  // .'......
                            /* 0828 */  0xDF, 0x5C, 0xCA, 0x68, 0x36, 0xAA, 0x8A, 0xAA,  // .\.h6...
                            /* 0830 */  0xBE, 0xEB, 0x39, 0xFB, 0x2F, 0xFF, 0x18, 0x0B,  // ..9./...
                            /* 0838 */  0x97, 0x50, 0xD3, 0xF7, 0x1E, 0x2E, 0xD0, 0x0C,  // .P......
                            /* 0840 */  0x18, 0x34, 0x30, 0x10, 0x24, 0x05, 0x77, 0xDA,  // .40.$.w.
                            /* 0848 */  0x44, 0xC2, 0x30, 0x8D, 0x81, 0xB5, 0x9B, 0x3B,  // D.0....;
                            /* 0850 */  0xA2, 0xBC, 0xFF, 0x0B, 0x9C, 0x61, 0x3C, 0x8F,  // .....a<.
                            /* 0858 */  0xDD, 0x24, 0x52, 0xF4, 0x4F, 0x35, 0xCA, 0x68,  // .$R.O5.h
                            /* 0860 */  0x30, 0x96, 0xC4, 0xA9, 0x59, 0x05, 0xC2, 0xFA,  // 0...Y...
                            /* 0868 */  0x2A, 0x22, 0x91, 0x66, 0x1A, 0xB2, 0xBD, 0xF1,  // *".f....
                            /* 0870 */  0x23, 0x65, 0xBC, 0x64, 0x7E, 0xA8, 0xC7, 0xB8,  // #e.d~...
                            /* 0878 */  0x16, 0x5F, 0x2D, 0xBA, 0x9C, 0xE2, 0xC0, 0x0E,  // ._-.....
                            /* 0880 */  0x1C, 0x55, 0xF0, 0x5E, 0x28, 0x30, 0x57, 0x47,  // .U.^(0WG
                            /* 0888 */  0xA5, 0x7A, 0x66, 0x06, 0x4D, 0x41, 0xB4, 0xCA,  // .zf.MA..
                            /* 0890 */  0x9B, 0xDA, 0xC3, 0x89, 0x23, 0x87, 0x76, 0x2A,  // ....#.v*
                            /* 0898 */  0x3A, 0x2A, 0xC2, 0xEF, 0xEE, 0x00               // :*....
                        }
                    })
                }

            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (LPNV, Zero)
        Method (IMOK, 1, NotSerialized)
        {
            Return (Arg0)
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "UcsiCntr", 0x00000001)
{
    External (_SB_.UBTC, DeviceObj)
    External (TPLD, MethodObj)    // 2 Arguments

    Scope (\_SB.UBTC)
    {
        Device (CR01)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x03))
            }
        }

        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "HP    ", "ShmTable", 0x00000001)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB, DeviceObj)

    Scope (\_SB.PC00.LPCB)
    {
        Device (NSHM)
        {
            Name (IOBA, 0x00000200)
            Name (IOLN, 0x00000080)
            Name (MEBA, 0xFEDF0000)
            Name (MELN, 0x00010000)
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x1000)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0x00,               // Length
                    _Y00)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y01)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PC00.LPCB.NSHM._Y00._MIN, IMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PC00.LPCB.NSHM._Y00._MAX, IMAX)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, \_SB.PC00.LPCB.NSHM._Y00._LEN, ILEN)  // _LEN: Length
                IMIN = IOBA /* \_SB_.PC00.LPCB.NSHM.IOBA */
                IMAX = IOBA /* \_SB_.PC00.LPCB.NSHM.IOBA */
                ILEN = IOLN /* \_SB_.PC00.LPCB.NSHM.IOLN */
                CreateDWordField (BUF0, \_SB.PC00.LPCB.NSHM._Y01._BAS, MBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PC00.LPCB.NSHM._Y01._LEN, MLEN)  // _LEN: Length
                MBAS = MEBA /* \_SB_.PC00.LPCB.NSHM.MEBA */
                MLEN = MELN /* \_SB_.PC00.LPCB.NSHM.MELN */
                Return (BUF0) /* \_SB_.PC00.LPCB.NSHM.BUF0 */
            }
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "PwrCtlEv", 0x00000001)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PC00.LPCB.EC0_.PSSB, FieldUnitObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (ECRG, IntObj)

    Scope (\_SB.PC00.LPCB.EC0)
    {
        OperationRegion (HPSF, SystemMemory, 0x23AA6000, 0x00000003)
        Field (HPSF, AnyAcc, Lock, Preserve)
        {
            PSCF,   8, 
            BCIF,   8, 
            BCSC,   8
        }

        Name (PSSS, Zero)
        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF)
            If (ECRG)
            {
                Local0 = (PSSS & One)
                Local1 = (\_SB.PC00.LPCB.EC0.PSSB & One)
                Local2 = (PSSS & 0x02)
                Local3 = (\_SB.PC00.LPCB.EC0.PSSB & 0x02)
                Local4 = (PSSS & 0x10)
                Local5 = (\_SB.PC00.LPCB.EC0.PSSB & 0x10)
                If (((Local0 != Local1) && (Local0 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, Zero)
                    PSSS = \_SB.PC00.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local4 != Local5) && (Local4 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, 0x03)
                    PSSS = \_SB.PC00.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local0 != Local1) && (Local0 == One)))
                {
                    \_SB.WMIV.GVWE (0x0F, One)
                    PSSS = \_SB.PC00.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == 0x02)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, Zero)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PC00.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == Zero)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, One)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PC00.LPCB.EC0.PSSB /* External reference */
                }
            }

            Release (\_SB.PC00.LPCB.EC0.ECMX)
        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "INTEL ", "TcssSsdt", 0x00001000)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC01, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (CPWE, UnknownObj)
    External (CPWS, UnknownObj)
    External (CSFR, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (DUWS, UnknownObj)
    External (ECR1, UnknownObj)
    External (G28A, FieldUnitObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (IMRY, UnknownObj)
    External (ITM0, UnknownObj)
    External (ITM1, UnknownObj)
    External (LTE0, UnknownObj)
    External (LTE1, UnknownObj)
    External (LTE2, UnknownObj)
    External (LTE3, UnknownObj)
    External (OTHC, UnknownObj)
    External (P2PS, UnknownObj)
    External (PCIC, MethodObj)    // 1 Arguments
    External (PCID, MethodObj)    // 4 Arguments
    External (PDI0, UnknownObj)
    External (PDI1, UnknownObj)
    External (PICM, UnknownObj)
    External (PNS0, UnknownObj)
    External (PNS1, UnknownObj)
    External (PNS2, UnknownObj)
    External (PNS3, UnknownObj)
    External (PSL0, UnknownObj)
    External (PSL1, UnknownObj)
    External (PSL2, UnknownObj)
    External (PSL3, UnknownObj)
    External (RTBM, UnknownObj)
    External (TCDS, UnknownObj)
    External (TCIR, UnknownObj)
    External (TCIT, UnknownObj)
    External (TDCE, UnknownObj)
    External (THCE, UnknownObj)
    External (TIVS, UnknownObj)
    External (TPA0, UnknownObj)
    External (TPA1, UnknownObj)
    External (TPA2, UnknownObj)
    External (TPA3, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TRTD, UnknownObj)
    External (XDAT, MethodObj)    // 0 Arguments

    Name (ITNB, 0x23AA7000)
    Name (ITNL, 0x0012)
    OperationRegion (ITNV, SystemMemory, ITNB, ITNL)
    Field (ITNV, AnyAcc, Lock, Preserve)
    {
        ITSP,   8, 
        IDM0,   8, 
        IDM1,   8, 
        ITCP,   8, 
        IT0E,   8, 
        IT1E,   8, 
        IT2E,   8, 
        IT3E,   8, 
        IORB,   8, 
        ITRT,   8, 
        ITRE,   16, 
        ITIM,   8, 
        ITFP,   16, 
        ITCT,   16, 
        ITVD,   8
    }

    If (ITRT)
    {
        Scope (\_SB.PC00.GFX0)
        {
            Name (_S3D, 0x03)  // _S3D: S3 Device State
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }
        }
    }

    Scope (\_SB)
    {
        Name (C2PW, Zero)
        Method (C2PM, 4, Serialized)
        {
            Switch (ToInteger (Arg3))
            {
                Case (Zero)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 0"
                }
                Case (One)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 1"
                }
                Case (0x02)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 2"
                }
                Case (0x03)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 3"
                }
                Case (0x04)
                {
                    Local0 = "Tcss xHci"
                }
                Case (0x05)
                {
                    Local0 = "Tcss xDci"
                }
                Case (0x06)
                {
                    Local0 = "Tcss Dma 0"
                }
                Case (0x07)
                {
                    Local0 = "Tcss Dma 1"
                }
                Case (0x08)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 0"
                }
                Case (0x09)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 1"
                }
                Case (0x0A)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 2"
                }
                Case (0x0B)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 3"
                }
                Default
                {
                    Return (Zero)
                }

            }

            Local1 = Zero
            Local1 = (One << ToInteger (Arg3))
            ADBG (Concatenate ("Local1 = ", ToHexString (Local1)))
            ADBG (Concatenate ("Before CPU to PCH Wake capability configuration Start from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Status = ", ToHexString (CPWS))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Enable = ", ToHexString (CPWE))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            ADBG (Concatenate ("C2PM ", Local0))
            If ((Arg0 && Arg1))
            {
                If ((CPWE == Zero))
                {
                    If (CPWS)
                    {
                        CPWS = One
                    }

                    CPWE = One
                }

                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " Sx EnWak"))
            }
            ElseIf ((Arg0 || Arg2))
            {
                If ((CPWE == Zero))
                {
                    If (CPWS)
                    {
                        CPWS = One
                    }

                    CPWE = One
                }

                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " D3 En Wak"))
            }
            Else
            {
                If (((C2PW & Local1) != Zero))
                {
                    C2PW &= ~Local1
                }

                If (((CPWE != Zero) && (C2PW == Zero)))
                {
                    CPWE = Zero
                }

                ADBG (Concatenate (Local0, " DisWak"))
            }

            ADBG (Concatenate ("After CPU to PCH Wake capability configuration End from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Status = ", ToHexString (CPWS))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Enable = ", ToHexString (CPWE))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            Return (Zero)
        }
    }

    Scope (\_SB.PC00)
    {
        OperationRegion (MBAR, SystemMemory, (\_SB.PC00.GMHB () + 0x7100), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            RBAR,   64
        }

        OperationRegion (PBAR, SystemMemory, (\_SB.PC00.GMHB () + 0x5DA0), 0x08)
        Field (PBAR, DWordAcc, NoLock, Preserve)
        {
            PMBD,   32, 
            PMBC,   8, 
            PSCM,   8, 
                ,   15, 
            PMBR,   1
        }

        Method (PMBY, 0, NotSerialized)
        {
            Local0 = Zero
            While ((PMBR && (Local0 < 0x03E8)))
            {
                Local0++
                Stall (One)
            }

            If ((Local0 == 0x03E8))
            {
                Return (0xFF)
            }

            Return (Zero)
        }

        Method (DSGS, 0, NotSerialized)
        {
            If ((PMBY () == Zero))
            {
                PMBC = 0x15
                PSCM = Zero
                PMBR = One
                If ((PMBY () == Zero))
                {
                    Local0 = PMBD /* \_SB_.PC00.PMBD */
                    Local1 = PMBC /* \_SB_.PC00.PMBC */
                    Stall (0x0A)
                    If (((Local0 != PMBD) || (Local1 != PMBC)))
                    {
                        Return (0xFF)
                    }

                    Return (Local0)
                }
                Else
                {
                    Return (0xFE)
                }
            }
            Else
            {
                Return (0xFE)
            }
        }

        Method (DSCR, 1, NotSerialized)
        {
            If ((Arg0 > One))
            {
                Return (0xFD)
            }

            If ((PMBY () == Zero))
            {
                PMBC = 0x15
                PSCM = One
                PMBD = Arg0
                PMBR = One
                If ((PMBY () == Zero))
                {
                    Local0 = PMBD /* \_SB_.PC00.PMBD */
                    Local1 = PMBC /* \_SB_.PC00.PMBC */
                    Stall (0x0A)
                    If (((Local0 != PMBD) || (Local1 != PMBC)))
                    {
                        Return (0xFF)
                    }

                    Local0 = Zero
                    While (((DSGS () & 0x02) && (Local0 < 0x64)))
                    {
                        Stall (0x64)
                        Local0++
                    }

                    If ((Local0 == 0x64))
                    {
                        Return (0xFE)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (0xFE)
                }
            }
            Else
            {
                Return (0xFE)
            }
        }

        Method (IOMA, 0, NotSerialized)
        {
            Return ((^RBAR & 0xFFFFFFFFFFFFFFFE))
        }

        Method (PIDS, 0, NotSerialized)
        {
            Return (0x00C10000)
        }

        OperationRegion (IOMR, SystemMemory, (IOMA () + PIDS ()), 0x0100)
        Field (IOMR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   15, 
            TD3C,   1, 
            TACK,   1, 
            DPOF,   1, 
            Offset (0x70), 
            IMCD,   32, 
            IMDA,   32
        }

        Method (IMMD, 1, NotSerialized)
        {
            IMDA = Arg0
            ADBG (Concatenate ("IMMD :: ", ToHexString (IMDA)))
            Return (Zero)
        }

        Method (IMMC, 5, Serialized)
        {
            Name (OPTS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (OPTS, Zero, CMST)
            CreateByteField (OPTS, One, RTB1)
            IMMD (Arg4)
            Local1 = Arg3
            Local1 <<= 0x08
            Local1 += Arg2
            Local1 <<= 0x08
            Local1 += Arg0
            IMCD = Local1
            ADBG (Concatenate ("Set IMMC Command ", ToHexString (IMCD)))
            IMCD |= 0x80000000
            ADBG (Concatenate ("Set IMMC Run Bit ", ToHexString (IMCD)))
            Local0 = Arg1
            ADBG (Concatenate ("IMMC Delay ", ToHexString (Local0)))
            While ((((IMCD & 0x80000000) != Zero) && (Local0 != 
                Zero)))
            {
                Sleep (One)
                Local0--
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x02)
                {
                    ADBG ("GEM_SB_TRAN_CMD")
                    Return (Zero)
                }
                Case (0x03)
                {
                    ADBG ("IOM_BIOS_MBX_GET_HPD_COUNT")
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg ", ToHexString (IMDA)))
                        CMST = One
                        Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                    }
                    Else
                    {
                        ADBG ("Passed")
                        ADBG (Concatenate ("IOM MB CMD Reg :: ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg :: ", ToHexString (IMDA)))
                        ADBG (Concatenate ("Arg2 is Port Number :: ", ToHexString (Arg2)))
                        CMST = Zero
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Case (Package (0x02)
                    {
                        0x06, 
                        0x08
                    }

)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (0x06)
                        {
                            ADBG ("IOM_BIOS_MBX_DEC_HPD_COUNT:")
                        }
                        Case (0x08)
                        {
                            ADBG ("IOM_BIOS_DPIN_SWITCH_CMD:")
                        }
                        Default
                        {
                            ADBG ("UnKnownType")
                            CMST = One
                            Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                        }

                    }

                    If ((ToInteger (Arg0) == 0x08))
                    {
                        G28A = IMCD /* \_SB_.PC00.IMCD */
                    }

                    RTB1 = Zero
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        CMST = One
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }
                    Else
                    {
                        ADBG ("Passed")
                        CMST = Zero
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Default
                {
                    ADBG ("UnKnownType")
                    CMST = One
                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }

            }
        }

        Method (DPFC, 0, NotSerialized)
        {
            Name (OPTS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (OPTS, Zero, CMST)
            CreateByteField (OPTS, One, RTB1)
            Sleep (PDI0)
            OPTS = \_SB.PC00.IMMC (0x08, PDI1, Zero, Zero, Zero)
            Return (OPTS) /* \_SB_.PC00.DPFC.OPTS */
        }

        Name (CTP0, Zero)
        Name (CTP1, Zero)
        Method (TG0N, 0, NotSerialized)
        {
            ADBG ("TG0N Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == Zero))
                {
                    \_SB.PC00.TDM0.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP0.D3CX ()
                        }

                        If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP1.D3CX ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP0.D3CX ()
                        }

                        If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP1.D3CX ()
                            Local0 = One
                        }
                    }

                    If ((\_SB.PC00.TDM0.ALCT == One))
                    {
                        If ((CTP0 == One))
                        {
                            If ((ITCT != Zero))
                            {
                                \_SB.PC00.TDM0.CNTP ()
                                \_SB.PC00.TDM0.WACT = One
                                CTP0 = Zero
                            }
                        }

                        \_SB.PC00.TDM0.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG0N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG0N End")
        }

        Method (TG0F, 0, NotSerialized)
        {
            ADBG ("TG0F Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == One))
                {
                    \_SB.PC00.TDM0.D3CE ()
                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP0.PDSX -", ToHexString (\_SB.PC01.TRP0.PDSX)))
                            If ((\_SB.PC01.TRP0.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC01.TRP0.D3CE ()
                        }

                        If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP1.PDSX -", ToHexString (\_SB.PC01.TRP1.PDSX)))
                            If ((\_SB.PC01.TRP1.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC01.TRP1.D3CE ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP0.PDSX -", ToHexString (\_SB.PC00.TRP0.PDSX)))
                            If ((\_SB.PC00.TRP0.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC00.TRP0.D3CE ()
                        }

                        If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP1.PDSX -", ToHexString (\_SB.PC00.TRP1.PDSX)))
                            If ((\_SB.PC00.TRP1.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC00.TRP1.D3CE ()
                        }
                    }
                }
            }

            ADBG ("TG0F End")
        }

        Method (TG1N, 0, NotSerialized)
        {
            ADBG ("TG1N Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == Zero))
                {
                    \_SB.PC00.TDM1.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP2.D3CX ()
                        }

                        If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP3.D3CX ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP2.D3CX ()
                        }

                        If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP3.D3CX ()
                        }
                    }

                    If ((\_SB.PC00.TDM1.ALCT == One))
                    {
                        If ((CTP1 == One))
                        {
                            If ((ITCT != Zero))
                            {
                                \_SB.PC00.TDM1.CNTP ()
                                \_SB.PC00.TDM1.WACT = One
                                CTP1 = Zero
                            }
                        }

                        \_SB.PC00.TDM1.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG1N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG1N End")
        }

        Method (TG1F, 0, NotSerialized)
        {
            ADBG ("TG1F Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == One))
                {
                    \_SB.PC00.TDM1.D3CE ()
                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP2.PDSX -", ToHexString (\_SB.PC01.TRP2.PDSX)))
                            If ((\_SB.PC01.TRP2.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC01.TRP2.D3CE ()
                        }

                        If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP3.PDSX -", ToHexString (\_SB.PC01.TRP3.PDSX)))
                            If ((\_SB.PC01.TRP3.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC01.TRP3.D3CE ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP2.PDSX -", ToHexString (\_SB.PC00.TRP2.PDSX)))
                            If ((\_SB.PC00.TRP2.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC00.TRP2.D3CE ()
                        }

                        If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP3.PDSX -", ToHexString (\_SB.PC00.TRP3.PDSX)))
                            If ((\_SB.PC00.TRP3.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC00.TRP3.D3CE ()
                        }
                    }
                }
            }

            ADBG ("TG1F End")
        }

        If (ITRT)
        {
            PowerResource (TBT0, 0x05, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA0 D3C STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
                    Return (\_SB.PC00.TDM0.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT0 Group ON Start")
                    If (ITIM)
                    {
                        TG0N ()
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT0 Group ON End")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT0 Group OFF Start")
                    If (ITIM)
                    {
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                        If ((\_SB.PC00.TDM0.SD3C == Zero))
                        {
                            TG0F ()
                        }
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT0 Group OFF End")
                }
            }

            PowerResource (TBT1, 0x05, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA1 D3C STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
                    Return (\_SB.PC00.TDM1.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT1 Group ON Start")
                    If (ITIM)
                    {
                        TG1N ()
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT1 Group ON End")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT1 Group OFF Start")
                    If (ITIM)
                    {
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                        If ((\_SB.PC00.TDM1.SD3C == Zero))
                        {
                            TG1F ()
                        }
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT1 Group OFF End")
                }
            }
        }

        If (TRTD)
        {
            Method (TCON, 0, NotSerialized)
            {
                ADBG ("TCSS ON")
                ADBG ("TCON")
                If ((TD3C == One))
                {
                    ADBG (Concatenate ("TACK before D3 cold exit -", ToHexString (TACK)))
                    TD3C = Zero
                    Local0 = Zero
                    While (((TACK != Zero) && (Local0 < 0x64)))
                    {
                        Sleep (One)
                        Local0++
                    }

                    ADBG (Concatenate ("TACK after D3 cold exit -", ToHexString (TACK)))
                    ADBG (Concatenate ("Time for wait TACK - ", ToHexString (Local0)))
                    If ((Local0 == 0x64))
                    {
                        ADBG ("Error: Timeout occurred")
                    }
                    Else
                    {
                        ADBG ("D3Cold Exit")
                        Local0 = Zero
                        While ((\_SB.PC00.TXHC.VDID == 0xFFFFFFFF))
                        {
                            If ((DSGS () == One))
                            {
                                DSCR (Zero)
                            }

                            ADBG (Concatenate ("TXHC VDID -", ToHexString (\_SB.PC00.TXHC.VDID)))
                            Local0++
                            If ((Local0 == 0x05))
                            {
                                ADBG ("pCode mailbox command failed")
                                Break
                            }
                        }

                        If (((TDCE == One) && (IMRY == One)))
                        {
                            ADBG ("IOM.D3.TDCE")
                            \_SB.PC00.TXDC.SINT (TCIT, TCIR)
                            ADBG ("IOM.D3.TDCE Done")
                        }
                    }
                }
                Else
                {
                    ADBG ("Drop TCON due to it is already exit D3 cold")
                    Return (Zero)
                }

                ADBG ("TCSS ON End")
            }

            Method (TCOF, 0, NotSerialized)
            {
                ADBG ("TCSS OFF Start")
                ADBG ("TCOF")
                ADBG (Concatenate ("DMA0 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("DMA1 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                ADBG (Concatenate ("XHCI Skip D3C entry? ", ToHexString (\_SB.PC00.TXHC.SD3C)))
                If (((\_SB.PC00.TXHC.SD3C != Zero) || ((\_SB.PC00.TDM0.SD3C != Zero) || 
                    (\_SB.PC00.TDM1.SD3C != Zero))))
                {
                    Return (Zero)
                }

                Local0 = Zero
                While ((\_SB.PC00.TXHC.VDID != 0xFFFFFFFF))
                {
                    If ((DSGS () == Zero))
                    {
                        DSCR (One)
                    }

                    ADBG (Concatenate ("TXHC VDID -", ToHexString (\_SB.PC00.TXHC.VDID)))
                    Local0++
                    If ((Local0 == 0x05))
                    {
                        ADBG ("pCode mailbox command failed")
                        Break
                    }
                }

                ADBG ("D3Cold Entry")
                TD3C = One
                ADBG (Concatenate ("IOM D3Cold -", ToHexString (TD3C)))
                ADBG ("TCSS OFF End")
            }

            PowerResource (D3C, 0x05, 0x0000)
            {
                Name (STAT, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS D3C STAT -", ToHexString (STAT)))
                    Return (STAT) /* \_SB_.PC00.D3C_.STAT */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.PC00.TCON ()
                    STAT = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.PC00.TCOF ()
                    STAT = Zero
                }
            }
        }

        Device (TXHC)
        {
            Name (_ADR, 0x000D0000)  // _ADR: Address
            Name (_DDN, "ICL North XHCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL North XHCI controller"))  // _STR: Description String
            Name (DCPM, 0x04)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS xHCI _STA", ToHexString (THCE)))
                If ((THCE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (_ADR & 0x07)
                Local1 = ((_ADR >> 0x10) & 0x1F)
                Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                Local3 = (\_SB.PC00.GPCB () + Local2)
                ADBG (Concatenate ("CPU XHCI PCIe MMIO Address", ToHexString (Local3)))
                Return (Local3)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("CPU XHCI _PS0 Start")
                If ((\_SB.PC00.TXHC.PMEE == One))
                {
                    ADBG ("Clear PME_EN of CPU XHCI")
                    \_SB.PC00.TXHC.PMEE = Zero
                }

                ADBG ("CPU XHCI _PS0 End")
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("CPU XHCI _PS3 Start")
                If ((\_SB.PC00.TXHC.PMEE == Zero))
                {
                    ADBG ("PME_EN was not set. Set PME_EN of CPU XHCI")
                    \_SB.PC00.TXHC.PMEE = One
                }

                ADBG ("CPU XHCI _PS3 End")
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (TRTD)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Name (SD3C, Zero)
            If (TRTD)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }
            }

            OperationRegion (XPRT, SystemMemory, BASE (), 0x0100)
            Field (XPRT, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (DUWS))
                {
                    Return (GPRW (0x6D, DUWS))
                }
                Else
                {
                    Return (GPRW (0x6D, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG ("TCSS XHCI _DSW")
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                ADBG (Concatenate ("Arg2 -", ToHexString (Arg2)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (TPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x10){}
                    })
                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                    REV = One
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    VISI = Arg0
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    GPOS = Arg1
                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                    SHAP = One
                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                    WID = 0x08
                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                    HGT = 0x03
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TPLD.PCKG */
                }

                Method (TUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    PCKG [Zero] = Arg0
                    PCKG [One] = Arg1
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TUPC.PCKG */
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (SS01)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS01 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS01 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS01 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS01 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & One) == One))
                                    {
                                        ADBG ("XHC SS01 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SS02)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS02 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS02 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS02 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS02 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & 0x02) == 0x02))
                                    {
                                        ADBG ("XHC SS02 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SS03)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS03 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS03 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS03 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS03 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & 0x04) == 0x04))
                                    {
                                        ADBG ("XHC SS03 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SS04)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS04 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS04 _GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS04 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS04 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & 0x08) == 0x08))
                                    {
                                        ADBG ("XHC SS04 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("TCSS RHUB XHCI PS0")
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("TCSS RHUB XHCI PS2")
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("TCSS RHUB XHCI PS3")
                }
            }
        }

        If ((TDCE == One))
        {
            Device (TXDC)
            {
                Name (_ADR, 0x000D0001)  // _ADR: Address
                Name (_DDN, "ICL North XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("ICL North XDCI controller"))  // _STR: Description String
                Name (DCPM, 0x05)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS xDCI _STA", ToHexString (TDCE)))
                    If ((TDCE == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (SINT, 2, Serialized)
                {
                    ADBG ("xDCI.SINT")
                    If ((IMRY == One))
                    {
                        Local0 = (Arg0 << 0x08)
                        Local1 = (Arg1 << 0x14)
                        Local0 += Local1
                        ADBG (Concatenate ("TCSS xDCI SINT", ToHexString (Local0)))
                        IMMC (0x02, Zero, One, Zero, Local0)
                    }
                    Else
                    {
                        ADBG ("IOM not ready")
                    }

                    ADBG ("xDCI.SINT Done")
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                OperationRegion (XDCS, PCI_Config, Zero, 0x0100)
                Field (XDCS, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (XDCS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0I3,   2, 
                    Offset (0x85), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (XDBA, 0, NotSerialized)
                {
                    Return ((^XDCB & 0xFFFFFFFFFFFFFF00))
                }

                OperationRegion (XDMM, SystemMemory, XDBA (), 0x00110000)
                Field (XDMM, WordAcc, NoLock, Preserve)
                {
                    Offset (0xC110), 
                    GCTL,   32, 
                    Offset (0x10F810), 
                    Offset (0x10F811), 
                    U2CP,   2, 
                    U3CP,   2, 
                    Offset (0x10F818), 
                    PUPS,   2, 
                        ,   1, 
                    PURC,   1, 
                    Offset (0x10F81A), 
                    Offset (0x10F81C), 
                        ,   3, 
                    UXPE,   2, 
                    Offset (0x10F81E)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG ("TXDC DSM")
                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPT, 2, Serialized)
                            {
                                ADBG ("TXDC Set PMU Power State")
                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    ADBG ("TXDC PMU D0")
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ADBG ("TXDC PMU D3")
                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03))
                                    {
                                        ADBG ("TXDC U2 not in D3")
                                    }

                                    If ((U3CP != 0x03))
                                    {
                                        ADBG ("TXDC U3 not in D3")
                                    }

                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("TXDC Fn0")
                                    Return (Buffer (0x02)
                                    {
                                         0xF3, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("TXDC Fn1")
                                    Return (One)
                                }
                                Case (0x04)
                                {
                                    ADBG ("TXDC Fn4")
                                    Local1 = DerefOf (Arg3 [Zero])
                                    ADBG (Local1)
                                    SPPT (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    ADBG ("TXDC Fn5")
                                    If (CondRefOf (XDAT))
                                    {
                                        If ((XDAT () == One))
                                        {
                                            ADBG ("USB Attach")
                                            Notify (\_SB.PC00.TXDC, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            ADBG ("USB Detach")
                                            Notify (\_SB.PC00.TXDC, 0x81) // Information Change
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    ADBG ("TXDC Fn6")
                                    If ((OTHC == Zero))
                                    {
                                        CSFR = One
                                        Local0 = Zero
                                        While ((Local0 < 0x64))
                                        {
                                            If ((CSFR == Zero))
                                            {
                                                Break
                                            }

                                            Sleep (One)
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    ADBG ("TXDC Fn7")
                                    Local0 = PUPS /* \_SB_.PC00.TXDC.PUPS */
                                    Return (Local0)
                                }
                                Case (0x08)
                                {
                                    ADBG ("TXDC Fn8")
                                    Return (One)
                                }
                                Case (0x09)
                                {
                                    ADBG ("TXDC Fn9")
                                    Local1 = (TCDS & 0xFFF80000)
                                    Local1 >>= 0x13
                                    ADBG (Concatenate ("CPU XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                    Return (Local1)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }
            }
        }

        Device (TDM0)
        {
            Name (_ADR, 0x000D0002)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA0 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA0 controller"))  // _STR: Description String
            Name (DUID, Zero)
            Name (DCPM, 0x06)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA0 _STA", ToHexString (DME0)))
                If ((DME0 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006A000)
                ADBG (Concatenate ("TDM0 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                MEMS,   1, 
                    ,   29, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                If ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                ALCT = One
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM0._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM0._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (Arg1)
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   31, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                Local0 = (Arg0 | One)
                P2TB = Local0
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (CNTP, 0, Serialized)
            {
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
            }
        }

        Device (TDM1)
        {
            Name (_ADR, 0x000D0003)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA1 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA1 controller"))  // _STR: Description String
            Name (DUID, One)
            Name (DCPM, 0x07)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA1 _STA", ToHexString (DME1)))
                If ((DME1 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006B000)
                ADBG (Concatenate ("TDM1 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                MEMS,   1, 
                    ,   29, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                If ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                ALCT = One
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM1._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM1._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (Arg1)
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   31, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                Local0 = (Arg0 | One)
                P2TB = Local0
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (CNTP, 0, Serialized)
            {
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC01))
    {
        Scope (\_SB.PC01)
        {
            Device (TRP0)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA0 != Zero))
                    {
                        Return (TPA0) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070000)
                    }
                }

                Name (TUID, Zero)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x08)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                    If ((TRE0 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE0 /* External reference */
                    LMSL = PSL0 /* External reference */
                    LNSL = PNS0 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP0._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP0.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP0.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP0.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP0.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP0.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP0.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP0.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP0.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP0.PD01 */
                }
            }

            Device (TRP1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA1 != Zero))
                    {
                        Return (TPA1) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070001)
                    }
                }

                Name (TUID, One)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x09)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                    If ((TRE1 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE1 /* External reference */
                    LMSL = PSL1 /* External reference */
                    LNSL = PNS1 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP1._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP1.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP1.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP1.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP1.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP1.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP1.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP1.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP1.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP1.PD01 */
                }
            }

            Device (TRP2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA2 != Zero))
                    {
                        Return (TPA2) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070002)
                    }
                }

                Name (TUID, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x0A)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                    If ((TRE2 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE2 /* External reference */
                    LMSL = PSL2 /* External reference */
                    LNSL = PNS2 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP2._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP2.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP2.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP2.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP2.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP2.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP2.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP2.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP2.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP2.PD01 */
                }
            }

            Device (TRP3)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA3 != Zero))
                    {
                        Return (TPA3) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070003)
                    }
                }

                Name (TUID, 0x03)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x0B)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                    If ((TRE3 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE3 /* External reference */
                    LMSL = PSL3 /* External reference */
                    LNSL = PNS3 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP3._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP3.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP3.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP3.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP3.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP3.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP3.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP3.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP3.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP3.PD01 */
                }
            }
        }
    }
    Else
    {
        Scope (\_SB.PC00)
        {
            Device (TRP0)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA0 != Zero))
                    {
                        Return (TPA0) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070000)
                    }
                }

                Name (TUID, Zero)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, Zero)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                    If ((TRE0 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE0 /* External reference */
                    LMSL = PSL0 /* External reference */
                    LNSL = PNS0 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP0._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP0.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP0.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP0.PD01 */
                }
            }

            Device (TRP1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA1 != Zero))
                    {
                        Return (TPA1) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070001)
                    }
                }

                Name (TUID, One)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                    If ((TRE1 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE1 /* External reference */
                    LMSL = PSL1 /* External reference */
                    LNSL = PNS1 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP1._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP1.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP1.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP1.PD01 */
                }
            }

            Device (TRP2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA2 != Zero))
                    {
                        Return (TPA2) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070002)
                    }
                }

                Name (TUID, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x02)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                    If ((TRE2 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE2 /* External reference */
                    LMSL = PSL2 /* External reference */
                    LNSL = PNS2 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP2._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP2.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP2.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP2.PD01 */
                }
            }

            Device (TRP3)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA3 != Zero))
                    {
                        Return (TPA3) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070003)
                    }
                }

                Name (TUID, 0x03)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x03)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                    If ((TRE3 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE3 /* External reference */
                    LMSL = PSL3 /* External reference */
                    LNSL = PNS3 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP3._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP3.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP3.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP3.PD01 */
                }
            }
        }
    }

    Scope (\_SB)
    {
        Method (TCWK, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP0, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP1, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP2, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP3, Zero) // Bus Check
                    }
                }
                Else
                {
                    If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP0, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP1, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP2, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP3, Zero) // Bus Check
                    }
                }
            }
        }
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApPsd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00.GPSD, MethodObj)    // 1 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (PF00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR01)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (One))
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x02))
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x03))
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x04))
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x05))
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x06))
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x07))
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x08))
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x09))
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0A))
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0B))
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0C))
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0D))
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0E))
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0F))
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x10))
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x11))
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x12))
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x13))
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x14))
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x15))
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x16))
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x17))
        }
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_SB_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }
}



SSDT24
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Psd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (BCNT, UnknownObj)
    External (CORE, UnknownObj)
    External (HTRO, UnknownObj)
    External (MDID, UnknownObj)
    External (PF00, IntObj)
    External (SCNT, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (GPSD, 1, NotSerialized)
        {
            Name (HPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFE, 
                    0x80
                }
            })
            Name (SPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    0x80
                }
            })
            If (((\_SB.CFGD & 0x02000000) && (\_SB.CFGD & 0x00400000)))
            {
                DerefOf (HPSD [Zero]) [0x02] = Arg0
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            ElseIf (HTRO)
            {
                If (((CORE >> Arg0) & One))
                {
                    DerefOf (HPSD [Zero]) [0x04] = SCNT /* External reference */
                    DerefOf (SPSD [Zero]) [0x04] = SCNT /* External reference */
                    If ((MDID && One))
                    {
                        DerefOf (HPSD [Zero]) [0x02] = 0xFF
                    }
                    ElseIf ((MDID && 0x02))
                    {
                        DerefOf (HPSD [Zero]) [0x02] = 0xFE
                    }
                }
                Else
                {
                    DerefOf (HPSD [Zero]) [0x04] = BCNT /* External reference */
                    DerefOf (SPSD [Zero]) [0x04] = BCNT /* External reference */
                }
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PF00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR00.GPSD.HPSD */
            }

            Return (SPSD) /* \_SB_.PR00.GPSD.SPSD */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (GPSD (Zero))
        }
    }
}



SSDT25
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_SB_.PR00, DeviceObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PF00, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_SB.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PF00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_SB_.PR00.MWES */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PF00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_SB_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_SB_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_SB_.PR00.C6TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_SB_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_SB_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_SB_.PR00.C1ST */
            }
        }
    }
}



SSDT26
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_SB_.PR00._CST, UnknownObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }
}



SSDT27
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApHwp", 0x00003000)
{
    External (_SB_.PR00._CPC, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }
}



SSDT28
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Hwp", 0x00003000)
{
    External (_SB_.CFGD, IntObj)
    External (_SB_.HWPE, IntObj)
    External (_SB_.HWPV, IntObj)
    External (_SB_.ITBM, IntObj)
    External (_SB_.LMPS, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PC00.NVSO, MethodObj)    // 0 Arguments
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.CPC2, PkgObj)
    External (CPC2, IntObj)
    External (G24F, FieldUnitObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Name (CPOC, Package (0x15)
        {
            0x15, 
            0x02, 
            0xFF, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Name (CPDB, ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000025E, // Address
                    0x01,               // Access Size
                    )
            })
            If ((G24F == 0x10DE))
            {
                If (CondRefOf (\_SB.PC00.NVSO))
                {
                    Local0 = \_SB.PC00.NVSO ()
                    Local2 = DerefOf (Local0 [One])
                    If ((Local2 == One))
                    {
                        CPOC [0x02] = CPDB /* \_SB_.PR00._CPC.CPDB */
                        CPC2 [0x02] = CPDB /* \_SB_.PR00._CPC.CPDB */
                    }
                }
            }

            If ((\_SB.CFGD & 0x01000000))
            {
                If (((\_SB.CFGD & 0x02000000) && (\_SB.ITBM == One)))
                {
                    Return (CPC2) /* External reference */
                }

                Return (CPOC) /* \_SB_.PR00.CPOC */
            }
            Else
            {
                If (((\_SB.CFGD & 0x02000000) && (\_SB.ITBM == Zero)))
                {
                    If ((\_SB.LMPS != Zero))
                    {
                        Return (CPOC) /* \_SB_.PR00.CPOC */
                    }
                }

                Return (CPC2) /* External reference */
            }
        }
    }
}



SSDT29
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.CPPC) /* External reference */
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_SB_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_SB_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x000009C5, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000067CE, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00006258, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00005CFC, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00005295, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00004D8D, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000044C1, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000036CB, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00003254, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00002EE7, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x0000266F, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00002257, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001E59, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x000016A0, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x000013C2, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000C8F, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
        Name (TPSS, Package (0x18)
        {
            Package (0x06)
            {
                0x00000A29, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00002C00, 
                0x00002C00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000067CE, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00006258, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00005CFC, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000057BB, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00005295, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00004D8D, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000499D, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000044C1, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00004000, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00003B57, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000036CB, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00003254, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00002EE7, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00002A9F, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x0000266F, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00002257, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001E59, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001A71, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x000016A0, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x000013C2, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x000001F4, 
                0x0000101D, 
                0x0000000A, 
                0x0000000A, 
                0x00000500, 
                0x00000500
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000C8F, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "HP", "HPCONDEV", 0x00001000)
{
    Scope (\_GPE)
    {
    }

    Scope (\_SB)
    {
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "HP", "INTTPL", 0x00001000)
{
    External (_SB_.GNUM, MethodObj)    // 1 Arguments
    External (_SB_.INUM, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HIDD, MethodObj)    // 5 Arguments
    External (_SB_.PC00.HIDG, MethodObj)    // 0 Arguments
    External (_SB_.PC00.I2C1.TPL0, DeviceObj)
    External (_SB_.PC00.TP7D, MethodObj)    // 6 Arguments
    External (_SB_.PC00.TP7G, MethodObj)    // 0 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (_SB_.SRXO, MethodObj)    // 2 Arguments
    External (_SB_.THID, MethodObj)    // 0 Arguments
    External (G000, FieldUnitObj)
    External (GPLI, FieldUnitObj)
    External (OSYS, UnknownObj)
    External (SDM0, FieldUnitObj)
    External (THHA, FieldUnitObj)
    External (TPLE, FieldUnitObj)
    External (TPSA, FieldUnitObj)

    Scope (\_SB.PC00.I2C1.TPL0)
    {
        Name (HID2, Zero)
        Name (SBFB, ResourceTemplate ()
        {
            I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                0x00, ResourceConsumer, _Y00, Exclusive,
                )
        })
        CreateWordField (SBFB, \_SB.PC00.I2C1.TPL0._Y00._ADR, BADR)  // _ADR: Address
        CreateDWordField (SBFB, \_SB.PC00.I2C1.TPL0._Y00._SPE, SPED)  // _SPE: Speed
        Name (SBFG, ResourceTemplate ()
        {
            GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0000
                }
        })
        CreateWordField (SBFG, 0x17, INT1)
        Name (SBFI, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y01)
            {
                0x00000000,
            }
        })
        CreateDWordField (SBFI, \_SB.PC00.I2C1.TPL0._Y01._INT, INT2)  // _INT: Interrupts
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((OSYS < 0x07DC))
            {
                SRXO (GPLI, One)
            }

            INT1 = GNUM (GPLI)
            INT2 = INUM (GPLI)
            If ((SDM0 == Zero))
            {
                SHPO (GPLI, One)
            }

            HID2 = THHA /* External reference */
            BADR = TPSA /* External reference */
            SPED = 0x00061A80
        }

        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            Local1 = G000 /* External reference */
            CreateWordField (Local1, 0x08, PNID)
            CreateWordField (Local1, 0x0A, DNID)
            If ((PNID == 0xAF06))
            {
                If ((DNID == 0x232D))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x333D))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x203D))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x20ED))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x518B))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x9B8B))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0xA68B))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x569E))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x9B95))
                {
                    Return ("ELAN2513")
                }
            }
            ElseIf ((PNID == 0xE509))
            {
                If ((DNID == 0x07F5))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x07EF))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x07F0))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x07EE))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x08A2))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x08BF))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x08CB))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x0999))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x0803))
                {
                    Return ("GTCH7503")
                }
                ElseIf ((DNID == 0x0A49))
                {
                    Return ("GTCH7503")
                }
            }
            ElseIf ((PNID == 0xAE0D))
            {
                If ((DNID == 0x1392))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x14F5))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x14F4))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x1505))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x1407))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x13AB))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x1518))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x13BC))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x141E))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x1531))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x13CA))
                {
                    Return ("ELAN2513")
                }
                ElseIf ((DNID == 0x143D))
                {
                    Return ("ELAN2513")
                }
            }
            ElseIf ((PNID == 0xCF26))
            {
                If ((DNID == 0x057D))
                {
                    Return ("ELAN2513")
                }
            }

            If (CondRefOf (\_SB.THID))
            {
                Return (\_SB.THID ())
            }

            Return ("ELAN2513")
        }

        Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == HIDG ()))
            {
                Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
            }

            If ((Arg0 == TP7G ()))
            {
                Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (TPLE) /* External reference */
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            If ((OSYS < 0x07DC))
            {
                Return (SBFI) /* \_SB_.PC00.I2C1.TPL0.SBFI */
            }

            If ((SDM0 == Zero))
            {
                Return (ConcatenateResTemplate (SBFB, SBFG))
            }

            Return (ConcatenateResTemplate (SBFB, SBFI))
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "SaSsdt", "SaSsdt ", 0x00003000)
{
    External (_ADR, IntObj)
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.B0D3, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.HDFE, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDOE, MethodObj)    // 1 Arguments
    External (_SB_.PC00.IPU0, DeviceObj)
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG2.PEGP, DeviceObj)
    External (_SB_.PC00.PEG3, DeviceObj)
    External (_SB_.PC00.PEG3.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG3.PEGP, DeviceObj)
    External (_SB_.PC00.SVDG, MethodObj)    // 1 Arguments
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AR02, UnknownObj)
    External (AR0A, UnknownObj)
    External (AR0B, UnknownObj)
    External (AR0C, UnknownObj)
    External (DLHR, UnknownObj)
    External (DLPW, UnknownObj)
    External (ECR1, UnknownObj)
    External (EEC1, UnknownObj)
    External (EEC2, UnknownObj)
    External (EEC3, UnknownObj)
    External (EECP, UnknownObj)
    External (HGMD, UnknownObj)
    External (HGST, UnknownObj)
    External (HRA0, UnknownObj)
    External (HRA1, UnknownObj)
    External (HRA2, UnknownObj)
    External (HRA3, UnknownObj)
    External (HRE0, UnknownObj)
    External (HRE1, UnknownObj)
    External (HRE2, UnknownObj)
    External (HRE3, UnknownObj)
    External (HRG0, UnknownObj)
    External (HRG1, UnknownObj)
    External (HRG2, UnknownObj)
    External (HRG3, UnknownObj)
    External (LTRW, UnknownObj)
    External (LTRX, UnknownObj)
    External (LTRY, UnknownObj)
    External (LTRZ, UnknownObj)
    External (MPGN, UnknownObj)
    External (OBFA, UnknownObj)
    External (OBFX, UnknownObj)
    External (OBFY, UnknownObj)
    External (OBFZ, UnknownObj)
    External (OSYS, UnknownObj)
    External (P0SC, UnknownObj)
    External (P0WK, UnknownObj)
    External (P1GP, UnknownObj)
    External (P1SC, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2GP, UnknownObj)
    External (P2SC, UnknownObj)
    External (P2WK, UnknownObj)
    External (P3GP, UnknownObj)
    External (P3SC, UnknownObj)
    External (P3WK, UnknownObj)
    External (PBR1, UnknownObj)
    External (PBR2, UnknownObj)
    External (PBR3, UnknownObj)
    External (PD02, UnknownObj)
    External (PD0A, UnknownObj)
    External (PD0B, UnknownObj)
    External (PD0C, UnknownObj)
    External (PG0E, UnknownObj)
    External (PG1E, UnknownObj)
    External (PG2E, UnknownObj)
    External (PG3E, UnknownObj)
    External (PICM, UnknownObj)
    External (PWA0, UnknownObj)
    External (PWA1, UnknownObj)
    External (PWA2, UnknownObj)
    External (PWA3, UnknownObj)
    External (PWE0, UnknownObj)
    External (PWE1, UnknownObj)
    External (PWE2, UnknownObj)
    External (PWE3, UnknownObj)
    External (PWG0, UnknownObj)
    External (PWG1, UnknownObj)
    External (PWG2, UnknownObj)
    External (PWG3, UnknownObj)
    External (SBN0, UnknownObj)
    External (SBN1, UnknownObj)
    External (SBN2, UnknownObj)
    External (SBN3, UnknownObj)
    External (SGGP, UnknownObj)
    External (SLOT, UnknownObj)
    External (SMSL, UnknownObj)
    External (SNSL, UnknownObj)
    External (SPCO, MethodObj)    // 2 Arguments
    External (VMCP, UnknownObj)
    External (VMDE, UnknownObj)
    External (XBAS, UnknownObj)

    Scope (\_SB.PC00.PEG0)
    {
        Name (SLOT, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG0E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTEN = LTRX /* External reference */
            LMSL = SMSL /* External reference */
            LNSL = SNSL /* External reference */
            If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
            {
                If (((VMDE == One) && ((VMCP & 0x08) != Zero)))
                {
                    CPMV = One
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            Offset (0xE0), 
            SCB0,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (CPMV, Zero)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        FUN0 = One
                        If ((LTEN == One))
                        {
                            FUN6 = One
                        }

                        If ((Arg1 >= 0x02))
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG0._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG0.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG1)
    {
        Name (SLOT, One)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG1E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTEN = LTRY /* External reference */
            LMSL = SMSL /* External reference */
            LNSL = SNSL /* External reference */
            If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
            {
                If (((VMDE == One) && ((VMCP & One) != Zero)))
                {
                    CPMV = One
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            Offset (0xE0), 
            SCB0,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (CPMV, Zero)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        FUN0 = One
                        If ((LTEN == One))
                        {
                            FUN6 = One
                        }

                        If ((Arg1 >= 0x02))
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG1._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG1.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG2)
    {
        Name (SLOT, 0x02)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG2E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTEN = LTRZ /* External reference */
            LMSL = SMSL /* External reference */
            LNSL = SNSL /* External reference */
            If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
            {
                If (((VMDE == One) && ((VMCP & 0x02) != Zero)))
                {
                    CPMV = One
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            Offset (0xE0), 
            SCB0,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (CPMV, Zero)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        FUN0 = One
                        If ((LTEN == One))
                        {
                            FUN6 = One
                        }

                        If ((Arg1 >= 0x02))
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG2._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG2.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (\_SB.PC00.PEG3)
        {
            Name (SLOT, 0x03)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PG3E == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRW /* External reference */
                LMSL = SMSL /* External reference */
                LNSL = SNSL /* External reference */
                If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMCP & 0x04) != Zero)))
                    {
                        CPMV = One
                    }
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0A) /* External reference */
                }

                Return (PD0A) /* External reference */
            }

            OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                SCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CPMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            FUN0 = One
                            If ((LTEN == One))
                            {
                                FUN6 = One
                            }

                            If ((Arg1 >= 0x02))
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.PEG3._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.PEG3.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((HPEX == One))
                {
                    HPEX = Zero
                    HPSX = One
                }

                If ((PMEX == One))
                {
                    PMEX = Zero
                    PMSX = One
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((HPEX == Zero))
                {
                    HPEX = One
                    HPSX = One
                }

                If ((PMEX == Zero))
                {
                    PMEX = One
                    PMSX = One
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                Return (Package (0x02)
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    HPSX = One
                    If ((PDCX == One))
                    {
                        PDCX = One
                        If ((PDSX == Zero))
                        {
                            L0SE = Zero
                        }

                        Notify (^, Zero) // Bus Check
                    }
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG0.PEGP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR1)
    {
        Scope (\_SB.PC00.PEG1.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Device (PEGD)
            {
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }

                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR2)
    {
        Scope (\_SB.PC00.PEG2.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Device (PEGD)
            {
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }

                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG2.PEGP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR3)
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Device (PEGD)
            {
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }

                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    If (((HGMD == 0x02) && (HGST == One)))
    {
        Scope (\_GPE)
        {
            Method (P0L6, 0, NotSerialized)
            {
                If (\_SB.ISME (P0WK))
                {
                    \_SB.SHPO (P0WK, One)
                    Notify (\_SB.PC00.PEG0, 0x02) // Device Wake
                    \_SB.CAGS (P0WK)
                }
            }

            Method (P1L6, 0, NotSerialized)
            {
                If (\_SB.ISME (P1WK))
                {
                    \_SB.SHPO (P1WK, One)
                    Notify (\_SB.PC00.PEG1, 0x02) // Device Wake
                    \_SB.CAGS (P1WK)
                }
            }

            Method (P2L6, 0, NotSerialized)
            {
                If (\_SB.ISME (P2WK))
                {
                    \_SB.SHPO (P2WK, One)
                    Notify (\_SB.PC00.PEG2, 0x02) // Device Wake
                    \_SB.CAGS (P2WK)
                }
            }

            If (CondRefOf (\_SB.PC00.PEG3))
            {
                Method (P3L6, 0, NotSerialized)
                {
                    If (\_SB.ISME (P3WK))
                    {
                        \_SB.SHPO (P3WK, One)
                        Notify (\_SB.PC00.PEG3, 0x02) // Device Wake
                        \_SB.CAGS (P3WK)
                    }
                }
            }
        }

        If (((HGMD == 0x02) && (HGST == One)))
        {
            Scope (\_SB.PC00.PEG0)
            {
                Name (WKEN, Zero)
                PowerResource (PG00, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If (CondRefOf (\_SB.PC00.HDOE))
                            {
                                \_SB.PC00.HDOE (Zero)
                            }
                            Else
                            {
                                PGON (Zero)
                            }

                            _STA = One
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If (CondRefOf (\_SB.PC00.HDFE))
                            {
                                \_SB.PC00.HDFE (Zero)
                            }
                            Else
                            {
                                PGOF (Zero)
                            }

                            _STA = Zero
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PG00
                })
                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (CondRefOf (\_SB.PC00.SVDG))
                    {
                        \_SB.PC00.SVDG (Zero)
                    }

                    Return (Package (0x01)
                    {
                        PG00
                    })
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (P0EW, 0, NotSerialized)
                {
                    If (WKEN)
                    {
                        If ((SGGP != Zero))
                        {
                            If ((SGGP == One))
                            {
                                \_SB.SGOV (P0WK, One)
                                \_SB.SHPO (P0WK, Zero)
                            }
                        }
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }
            }

            Scope (\_SB.PC00.PEG1)
            {
                Name (WKEN, Zero)
                PowerResource (PG01, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If (CondRefOf (\_SB.PC00.HDOE))
                            {
                                \_SB.PC00.HDOE (One)
                            }
                            Else
                            {
                                PGON (One)
                            }

                            _STA = One
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If (CondRefOf (\_SB.PC00.HDFE))
                            {
                                \_SB.PC00.HDFE (One)
                            }
                            Else
                            {
                                PGOF (One)
                            }

                            _STA = Zero
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PG01
                })
                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (CondRefOf (\_SB.PC00.SVDG))
                    {
                        \_SB.PC00.SVDG (One)
                    }

                    Return (Package (0x01)
                    {
                        PG01
                    })
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (P1EW, 0, NotSerialized)
                {
                    If (WKEN)
                    {
                        If ((P1GP != Zero))
                        {
                            If ((P1GP == One))
                            {
                                \_SB.SGOV (P1WK, One)
                                \_SB.SHPO (P1WK, Zero)
                            }
                        }
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }
            }

            Scope (\_SB.PC00.PEG2)
            {
                Name (WKEN, Zero)
                PowerResource (PG02, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If (CondRefOf (\_SB.PC00.HDOE))
                            {
                                \_SB.PC00.HDOE (0x02)
                            }
                            Else
                            {
                                PGON (0x02)
                            }

                            _STA = One
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If (CondRefOf (\_SB.PC00.HDFE))
                            {
                                \_SB.PC00.HDFE (0x02)
                            }
                            Else
                            {
                                PGOF (0x02)
                            }

                            _STA = Zero
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PG02
                })
                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (CondRefOf (\_SB.PC00.SVDG))
                    {
                        \_SB.PC00.SVDG (0x02)
                    }

                    Return (Package (0x01)
                    {
                        PG02
                    })
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (P2EW, 0, NotSerialized)
                {
                    If (WKEN)
                    {
                        If ((P2GP != Zero))
                        {
                            If ((P2GP == One))
                            {
                                \_SB.SGOV (P2WK, One)
                                \_SB.SHPO (P2WK, Zero)
                            }
                        }
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.PEG3))
            {
                Scope (\_SB.PC00.PEG3)
                {
                    Name (WKEN, Zero)
                    PowerResource (PG03, 0x00, 0x0000)
                    {
                        Name (_STA, One)  // _STA: Status
                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((OSYS > 0x07D9))
                            {
                                If (CondRefOf (\_SB.PC00.HDOE))
                                {
                                    \_SB.PC00.HDOE (0x03)
                                }
                                Else
                                {
                                    PGON (0x03)
                                }

                                _STA = One
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((OSYS > 0x07D9))
                            {
                                If (CondRefOf (\_SB.PC00.HDFE))
                                {
                                    \_SB.PC00.HDFE (0x03)
                                }
                                Else
                                {
                                    PGOF (0x03)
                                }

                                _STA = Zero
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PG03
                    })
                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (CondRefOf (\_SB.PC00.SVDG))
                        {
                            \_SB.PC00.SVDG (0x03)
                        }

                        Return (Package (0x01)
                        {
                            PG03
                        })
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                        If (Arg1)
                        {
                            WKEN = Zero
                        }
                        ElseIf ((Arg0 && Arg2))
                        {
                            WKEN = One
                        }
                        Else
                        {
                            WKEN = Zero
                        }
                    }

                    Method (P3EW, 0, NotSerialized)
                    {
                        If (WKEN)
                        {
                            If ((P3GP != Zero))
                            {
                                If ((P3GP == One))
                                {
                                    \_SB.SGOV (P3WK, One)
                                    \_SB.SHPO (P3WK, Zero)
                                }
                            }
                        }
                    }
                }
            }

            Scope (\_SB.PC00)
            {
                Name (IVID, 0xFFFF)
                Name (PEBA, Zero)
                Name (PION, Zero)
                Name (PIOF, Zero)
                Name (PBUS, Zero)
                Name (PDEV, Zero)
                Name (PFUN, Zero)
                Name (EBUS, Zero)
                Name (EDEV, Zero)
                Name (EFN0, Zero)
                Name (EFN1, One)
                Name (LTRS, Zero)
                Name (OBFS, Zero)
                Name (DSOF, 0x06)
                Name (CPOF, 0x34)
                Name (SBOF, 0x19)
                Name (ELC0, Zero)
                Name (ECP0, 0xFFFFFFFF)
                Name (H0VI, Zero)
                Name (H0DI, Zero)
                Name (ELC1, Zero)
                Name (ECP1, 0xFFFFFFFF)
                Name (H1VI, Zero)
                Name (H1DI, Zero)
                Name (ELC2, Zero)
                Name (ECP2, 0xFFFFFFFF)
                Name (H2VI, Zero)
                Name (H2DI, Zero)
                Name (ELC3, Zero)
                Name (ECP3, 0xFFFFFFFF)
                Name (H3VI, Zero)
                Name (H3DI, Zero)
                Name (AFL0, Zero)
                Name (AFL1, Zero)
                Name (AFL2, Zero)
                Name (AFL3, Zero)
                Name (AFL4, Zero)
                Name (AFL5, Zero)
                Name (AFL6, Zero)
                Name (AFL7, Zero)
                Name (AFL8, Zero)
                Name (AFL9, Zero)
                Name (AFLA, Zero)
                Name (AFLB, Zero)
                Name (AFLC, Zero)
                Name (AFLD, Zero)
                Name (AFLE, Zero)
                Name (AFLF, Zero)
                OperationRegion (OPG0, SystemMemory, (XBAS + 0x00030000), 0x1000)
                Field (OPG0, AnyAcc, NoLock, Preserve)
                {
                    P0VI,   16, 
                    P0DI,   16, 
                    Offset (0x06), 
                    DSO0,   16, 
                    Offset (0x34), 
                    CPO0,   8, 
                    Offset (0xB0), 
                        ,   4, 
                    P0LD,   1, 
                    Offset (0x11A), 
                        ,   1, 
                    P0VC,   1, 
                    Offset (0x214), 
                    Offset (0x216), 
                    P0LS,   4, 
                    Offset (0x248), 
                        ,   7, 
                    Q0L2,   1, 
                    Q0L0,   1, 
                    Offset (0x504), 
                    HST0,   32, 
                    P0TR,   1, 
                    Offset (0xC74), 
                    P0LT,   4, 
                    Offset (0xD0C), 
                    LRV0,   32
                }

                OperationRegion (PCS0, SystemMemory, (XBAS + (SBN0 << 0x14)), 0xF0)
                Field (PCS0, DWordAcc, Lock, Preserve)
                {
                    D0VI,   16, 
                    Offset (0x2C), 
                    S0VI,   16, 
                    S0DI,   16
                }

                OperationRegion (CAP0, SystemMemory, ((XBAS + (SBN0 << 0x14)) + EECP), 0x14)
                Field (CAP0, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    LCP0,   32, 
                    LCT0,   16
                }

                OperationRegion (OPG1, SystemMemory, (XBAS + 0x8000), 0x1000)
                Field (OPG1, AnyAcc, NoLock, Preserve)
                {
                    P1VI,   16, 
                    P1DI,   16, 
                    Offset (0x06), 
                    DSO1,   16, 
                    Offset (0x34), 
                    CPO1,   8, 
                    Offset (0xB0), 
                        ,   4, 
                    P1LD,   1, 
                    Offset (0x11A), 
                        ,   1, 
                    P1VC,   1, 
                    Offset (0x214), 
                    Offset (0x216), 
                    P1LS,   4, 
                    Offset (0x248), 
                        ,   7, 
                    Q1L2,   1, 
                    Q1L0,   1, 
                    Offset (0x504), 
                    HST1,   32, 
                    P1TR,   1, 
                    Offset (0x70C), 
                    PA0V,   32, 
                    Offset (0x71C), 
                    PA1V,   32, 
                    Offset (0x72C), 
                    PA2V,   32, 
                    Offset (0x73C), 
                    PA3V,   32, 
                    Offset (0x74C), 
                    PA4V,   32, 
                    Offset (0x75C), 
                    PA5V,   32, 
                    Offset (0x76C), 
                    PA6V,   32, 
                    Offset (0x77C), 
                    PA7V,   32, 
                    Offset (0x78C), 
                    PA8V,   32, 
                    Offset (0x79C), 
                    PA9V,   32, 
                    Offset (0x7AC), 
                    PAAV,   32, 
                    Offset (0x7BC), 
                    PABV,   32, 
                    Offset (0x7CC), 
                    PACV,   32, 
                    Offset (0x7DC), 
                    PADV,   32, 
                    Offset (0x7EC), 
                    PAEV,   32, 
                    Offset (0x7FC), 
                    PAFV,   32, 
                    Offset (0x91C), 
                        ,   31, 
                    BSP1,   1, 
                    Offset (0x93C), 
                        ,   31, 
                    BSP2,   1, 
                    Offset (0x95C), 
                        ,   31, 
                    BSP3,   1, 
                    Offset (0x97C), 
                        ,   31, 
                    BSP4,   1, 
                    Offset (0x99C), 
                        ,   31, 
                    BSP5,   1, 
                    Offset (0x9BC), 
                        ,   31, 
                    BSP6,   1, 
                    Offset (0x9DC), 
                        ,   31, 
                    BSP7,   1, 
                    Offset (0x9FC), 
                        ,   31, 
                    BSP8,   1, 
                    Offset (0xC20), 
                        ,   4, 
                    P1AP,   2, 
                    Offset (0xC38), 
                        ,   3, 
                    P1RM,   1, 
                    Offset (0xC3C), 
                        ,   31, 
                    PRST,   1, 
                    Offset (0xC74), 
                    P1LT,   4, 
                    Offset (0xD0C), 
                    LRV1,   32
                }

                OperationRegion (PCS1, SystemMemory, (XBAS + (SBN1 << 0x14)), 0xF0)
                Field (PCS1, DWordAcc, Lock, Preserve)
                {
                    D1VI,   16, 
                    Offset (0x2C), 
                    S1VI,   16, 
                    S1DI,   16
                }

                OperationRegion (CAP1, SystemMemory, ((XBAS + (SBN1 << 0x14)) + EEC1), 0x14)
                Field (CAP1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    LCP1,   32, 
                    LCT1,   16
                }

                OperationRegion (OPG2, SystemMemory, (XBAS + 0x9000), 0x1000)
                Field (OPG2, AnyAcc, NoLock, Preserve)
                {
                    P2VI,   16, 
                    P2DI,   16, 
                    Offset (0x06), 
                    DSO2,   16, 
                    Offset (0x34), 
                    CPO2,   8, 
                    Offset (0xB0), 
                        ,   4, 
                    P2LD,   1, 
                    Offset (0x11A), 
                        ,   1, 
                    P2VC,   1, 
                    Offset (0x214), 
                    Offset (0x216), 
                    P2LS,   4, 
                    Offset (0x248), 
                        ,   7, 
                    Q2L2,   1, 
                    Q2L0,   1, 
                    Offset (0x504), 
                    HST2,   32, 
                    P2TR,   1, 
                    Offset (0xC20), 
                        ,   4, 
                    P2AP,   2, 
                    Offset (0xC38), 
                        ,   3, 
                    P2RM,   1, 
                    Offset (0xC74), 
                    P2LT,   4, 
                    Offset (0xD0C), 
                    LRV2,   32
                }

                OperationRegion (PCS2, SystemMemory, (XBAS + (SBN2 << 0x14)), 0xF0)
                Field (PCS2, DWordAcc, Lock, Preserve)
                {
                    D2VI,   16, 
                    Offset (0x2C), 
                    S2VI,   16, 
                    S2DI,   16
                }

                OperationRegion (CAP2, SystemMemory, ((XBAS + (SBN2 << 0x14)) + EEC2), 0x14)
                Field (CAP2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    LCP2,   32, 
                    LCT2,   16
                }

                OperationRegion (OPG3, SystemMemory, (XBAS + 0xA000), 0x1000)
                Field (OPG3, AnyAcc, NoLock, Preserve)
                {
                    P3VI,   16, 
                    P3DI,   16, 
                    Offset (0x06), 
                    DSO3,   16, 
                    Offset (0x34), 
                    CPO3,   8, 
                    Offset (0xB0), 
                        ,   4, 
                    P3LD,   1, 
                    Offset (0x11A), 
                        ,   1, 
                    P3VC,   1, 
                    Offset (0x214), 
                    Offset (0x216), 
                    P3LS,   4, 
                    Offset (0x248), 
                        ,   7, 
                    Q3L2,   1, 
                    Q3L0,   1, 
                    Offset (0x504), 
                    HST3,   32, 
                    P3TR,   1, 
                    Offset (0xC20), 
                        ,   4, 
                    P3AP,   2, 
                    Offset (0xC38), 
                        ,   3, 
                    P3RM,   1, 
                    Offset (0xC74), 
                    P3LT,   4, 
                    Offset (0xD0C), 
                    LRV3,   32
                }

                OperationRegion (PCS3, SystemMemory, (XBAS + (SBN3 << 0x14)), 0xF0)
                Field (PCS2, DWordAcc, Lock, Preserve)
                {
                    D3VI,   16, 
                    Offset (0x2C), 
                    S3VI,   16, 
                    S3DI,   16
                }

                OperationRegion (CAP3, SystemMemory, ((XBAS + (SBN3 << 0x14)) + EEC3), 0x14)
                Field (CAP3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    LCP3,   32, 
                    LCT3,   16
                }

                Method (PGON, 1, Serialized)
                {
                    PION = Arg0
                    If ((PION == Zero))
                    {
                        If ((SGGP == Zero))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((PION == One))
                    {
                        If ((P1GP == Zero))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((PION == 0x02))
                    {
                        If ((P2GP == Zero))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((PION == 0x03))
                    {
                        If ((P3GP == Zero))
                        {
                            Return (Zero)
                        }
                    }

                    PEBA = \XBAS /* External reference */
                    PDEV = GDEV (PIOF)
                    PFUN = GFUN (PIOF)
                    PGSC (Arg0, One)
                    If ((CCHK (PION, One) == Zero))
                    {
                        Return (Zero)
                    }

                    GPPR (PION, One)
                    RTEN ()
                    If ((PION == Zero))
                    {
                        S0VI = H0VI /* \_SB_.PC00.H0VI */
                        S0DI = H0DI /* \_SB_.PC00.H0DI */
                        LCT0 = ((ELC0 & 0x43) | (LCT0 & 0xFFBC))
                    }
                    ElseIf ((PION == One))
                    {
                        S1VI = H1VI /* \_SB_.PC00.H1VI */
                        S1DI = H1DI /* \_SB_.PC00.H1DI */
                        LCT1 = ((ELC1 & 0x43) | (LCT1 & 0xFFBC))
                    }
                    ElseIf ((PION == 0x02))
                    {
                        S2VI = H2VI /* \_SB_.PC00.H2VI */
                        S2DI = H2DI /* \_SB_.PC00.H2DI */
                        LCT2 = ((ELC2 & 0x43) | (LCT2 & 0xFFBC))
                    }
                    ElseIf ((PION == 0x03))
                    {
                        S3VI = H3VI /* \_SB_.PC00.H3VI */
                        S3DI = H3DI /* \_SB_.PC00.H3DI */
                        LCT3 = ((ELC3 & 0x43) | (LCT3 & 0xFFBC))
                    }

                    Return (Zero)
                }

                Method (PGOF, 1, Serialized)
                {
                    PIOF = Arg0
                    If ((PIOF == Zero))
                    {
                        If ((SGGP == Zero))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((PIOF == One))
                    {
                        If ((P1GP == Zero))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((PIOF == 0x02))
                    {
                        If ((P2GP == Zero))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf ((PIOF == 0x03))
                    {
                        If ((P3GP == Zero))
                        {
                            Return (Zero)
                        }
                    }

                    PEBA = \XBAS /* External reference */
                    PDEV = GDEV (PIOF)
                    PFUN = GFUN (PIOF)
                    If ((CCHK (PIOF, Zero) == Zero))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 == Zero))
                    {
                        ELC0 = LCT0 /* \_SB_.PC00.LCT0 */
                        H0VI = S0VI /* \_SB_.PC00.S0VI */
                        H0DI = S0DI /* \_SB_.PC00.S0DI */
                        ECP0 = LCP0 /* \_SB_.PC00.LCP0 */
                    }
                    ElseIf ((Arg0 == One))
                    {
                        ELC1 = LCT1 /* \_SB_.PC00.LCT1 */
                        H1VI = S1VI /* \_SB_.PC00.S1VI */
                        H1DI = S1DI /* \_SB_.PC00.S1DI */
                        ECP1 = LCP1 /* \_SB_.PC00.LCP1 */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        ELC2 = LCT2 /* \_SB_.PC00.LCT2 */
                        H2VI = S2VI /* \_SB_.PC00.S2VI */
                        H2DI = S2DI /* \_SB_.PC00.S2DI */
                        ECP2 = LCP2 /* \_SB_.PC00.LCP2 */
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        ELC3 = LCT3 /* \_SB_.PC00.LCT3 */
                        H3VI = S3VI /* \_SB_.PC00.S3VI */
                        H3DI = S3DI /* \_SB_.PC00.S3DI */
                        ECP3 = LCP3 /* \_SB_.PC00.LCP3 */
                    }

                    RTDS ()
                    PGSC (Arg0, Zero)
                    GPPR (PIOF, Zero)
                    DIWK (PIOF)
                    Return (Zero)
                }

                Method (GDEV, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = 0x06
                    }
                    ElseIf ((Arg0 == One))
                    {
                        Local0 = One
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local0 = One
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Local0 = One
                    }

                    Return (Local0)
                }

                Method (GFUN, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((Arg0 == One))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local0 = One
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local0 = 0x02
                    }

                    Return (Local0)
                }

                Method (CCHK, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local7 = P0VI /* \_SB_.PC00.P0VI */
                    }
                    ElseIf ((Arg0 == One))
                    {
                        Local7 = P1VI /* \_SB_.PC00.P1VI */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local7 = P2VI /* \_SB_.PC00.P2VI */
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Local7 = P3VI /* \_SB_.PC00.P3VI */
                    }

                    If ((Local7 == IVID))
                    {
                        Return (Zero)
                    }

                    If ((Arg0 != One))
                    {
                        Local7 = P1VI /* \_SB_.PC00.P1VI */
                        If ((Local7 == IVID))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg0 == Zero))
                        {
                            If ((SGPI (SGGP, PWE0, PWG0, PWA0) == Zero))
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == One))
                        {
                            If ((SGPI (P1GP, PWE1, PWG1, PWA1) == Zero))
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == 0x02))
                        {
                            If ((SGPI (P2GP, PWE2, PWG2, PWA2) == Zero))
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == 0x03))
                        {
                            If ((SGPI (P3GP, PWE3, PWG3, PWA3) == Zero))
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf ((Arg1 == One))
                    {
                        If ((Arg0 == Zero))
                        {
                            If ((SGPI (SGGP, PWE0, PWG0, PWA0) == One))
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == One))
                        {
                            If ((SGPI (P1GP, PWE1, PWG1, PWA1) == One))
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == 0x02))
                        {
                            If ((SGPI (P2GP, PWE2, PWG2, PWA2) == One))
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == 0x03))
                        {
                            If ((SGPI (P3GP, PWE3, PWG3, PWA3) == One))
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Return (One)
                }

                Method (SGPI, 4, Serialized)
                {
                    If ((Arg0 == One))
                    {
                        If (CondRefOf (\_SB.GGOV))
                        {
                            Local0 = \_SB.GGOV (Arg2)
                        }
                    }

                    If ((Arg3 == Zero))
                    {
                        Local0 = ~Local0
                        Local0 &= One
                    }

                    Return (Local0)
                }

                Method (PGSC, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = P0SC /* External reference */
                    }
                    ElseIf ((Arg0 == One))
                    {
                        Local0 = P1SC /* External reference */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local0 = P2SC /* External reference */
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Local0 = P3SC /* External reference */
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    SPCO (Local0, Arg1)
                }

                Method (GPPR, 2, NotSerialized)
                {
                    If ((Arg1 == Zero))
                    {
                        If ((Arg0 == Zero))
                        {
                            SGPO (SGGP, HRE0, HRG0, HRA0, One)
                            SGPO (SGGP, PWE0, PWG0, PWA0, Zero)
                        }

                        If ((Arg0 == One))
                        {
                            SGPO (P1GP, HRE1, HRG1, HRA1, One)
                            SGPO (P1GP, PWE1, PWG1, PWA1, Zero)
                        }

                        If ((Arg0 == 0x02))
                        {
                            SGPO (P2GP, HRE2, HRG2, HRA2, One)
                            SGPO (P2GP, PWE2, PWG2, PWA2, Zero)
                        }

                        If ((Arg0 == 0x03))
                        {
                            SGPO (P3GP, HRE3, HRG3, HRA3, One)
                            SGPO (P3GP, PWE3, PWG3, PWA3, Zero)
                        }
                    }
                    ElseIf ((Arg1 == One))
                    {
                        If ((Arg0 == Zero))
                        {
                            SGPO (SGGP, PWE0, PWG0, PWA0, One)
                            SGPO (SGGP, HRE0, HRG0, HRA0, Zero)
                        }

                        If ((Arg0 == One))
                        {
                            SGPO (P1GP, PWE1, PWG1, PWA1, One)
                            SGPO (P1GP, HRE1, HRG1, HRA1, Zero)
                        }

                        If ((Arg0 == 0x02))
                        {
                            SGPO (P2GP, PWE2, PWG2, PWA2, One)
                            SGPO (P2GP, HRE2, HRG2, HRA2, Zero)
                        }

                        If ((Arg0 == 0x03))
                        {
                            SGPO (P3GP, PWE3, PWG3, PWA3, One)
                            SGPO (P3GP, HRE3, HRG3, HRA3, Zero)
                        }
                    }
                }

                Method (SGPO, 5, Serialized)
                {
                    If ((Arg3 == Zero))
                    {
                        Arg4 = ~Arg4
                        Arg4 &= One
                    }

                    If ((Arg0 == One))
                    {
                        If (CondRefOf (\_SB.SGOV))
                        {
                            \_SB.SGOV (Arg2, Arg4)
                        }
                    }
                }

                Method (DIWK, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        \_SB.PC00.PEG0.P0EW ()
                    }
                    ElseIf ((Arg0 == One))
                    {
                        \_SB.PC00.PEG1.P1EW ()
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        \_SB.PC00.PEG2.P2EW ()
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        \_SB.PC00.PEG3.P3EW ()
                    }
                }
            }
        }

        Scope (\_SB.PC00)
        {
            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                SCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (RTEN, 0, Serialized)
            {
                If ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (RTDS, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = One
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "MS-SSDT", 0x00003000)
{
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.GPC0, MethodObj)    // 1 Arguments
    External (_SB_.PC00.CNIP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.DPOF, UnknownObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GLAN, DeviceObj)
    External (_SB_.PC00.HDAS, DeviceObj)
    External (_SB_.PC00.HECI, DeviceObj)
    External (_SB_.PC00.I2C0, DeviceObj)
    External (_SB_.PC00.I2C1, DeviceObj)
    External (_SB_.PC00.I2C2, DeviceObj)
    External (_SB_.PC00.I2C3, DeviceObj)
    External (_SB_.PC00.I2C4, DeviceObj)
    External (_SB_.PC00.I2C5, DeviceObj)
    External (_SB_.PC00.I2C6, DeviceObj)
    External (_SB_.PC00.IPU0, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.SLPT, FieldUnitObj)
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG0.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC00.PEG1.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP, DeviceObj)
    External (_SB_.PC00.PEG2.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PEGP, DeviceObj)
    External (_SB_.PC00.PEG3.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX, DeviceObj)
    External (_SB_.PC00.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX, DeviceObj)
    External (_SB_.PC00.RP02.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX, DeviceObj)
    External (_SB_.PC00.RP03.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX, DeviceObj)
    External (_SB_.PC00.RP04.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX, DeviceObj)
    External (_SB_.PC00.RP05.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX, DeviceObj)
    External (_SB_.PC00.RP06.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX, DeviceObj)
    External (_SB_.PC00.RP07.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX, DeviceObj)
    External (_SB_.PC00.RP08.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX, DeviceObj)
    External (_SB_.PC00.RP09.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX, DeviceObj)
    External (_SB_.PC00.RP10.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX, DeviceObj)
    External (_SB_.PC00.RP11.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX, DeviceObj)
    External (_SB_.PC00.RP12.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX, DeviceObj)
    External (_SB_.PC00.RP13.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX, DeviceObj)
    External (_SB_.PC00.RP14.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX, DeviceObj)
    External (_SB_.PC00.RP15.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX, DeviceObj)
    External (_SB_.PC00.RP16.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX, DeviceObj)
    External (_SB_.PC00.RP17.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX, DeviceObj)
    External (_SB_.PC00.RP18.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX, DeviceObj)
    External (_SB_.PC00.RP19.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX, DeviceObj)
    External (_SB_.PC00.RP20.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX, DeviceObj)
    External (_SB_.PC00.RP21.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX, DeviceObj)
    External (_SB_.PC00.RP22.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PXSX, DeviceObj)
    External (_SB_.PC00.RP23.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX, DeviceObj)
    External (_SB_.PC00.RP24.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0, DeviceObj)
    External (_SB_.PC00.SAT0.VOL0, DeviceObj)
    External (_SB_.PC00.SPI0, DeviceObj)
    External (_SB_.PC00.SPI1, DeviceObj)
    External (_SB_.PC00.SPI2, DeviceObj)
    External (_SB_.PC00.UA00, DeviceObj)
    External (_SB_.PC00.UA01, DeviceObj)
    External (_SB_.PC00.UA02, DeviceObj)
    External (_SB_.PC00.XHCI, DeviceObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SPC0, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (ASGM, FieldUnitObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (ECLP, FieldUnitObj)
    External (ECUP, UnknownObj)
    External (EHLD, MutexObj)
    External (EMCE, UnknownObj)
    External (G1B3, UnknownObj)
    External (G21F, FieldUnitObj)
    External (GBES, FieldUnitObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (LPMR, FieldUnitObj)
    External (LPTL, UnknownObj)
    External (MPGN, UnknownObj)
    External (OSYS, FieldUnitObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (PEPC, FieldUnitObj)
    External (PEPY, FieldUnitObj)
    External (S0ID, FieldUnitObj)
    External (SDCE, UnknownObj)
    External (SPST, FieldUnitObj)
    External (TCNT, FieldUnitObj)
    External (TDCE, UnknownObj)
    External (THCE, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TRTD, UnknownObj)
    External (WRTO, UnknownObj)

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0xFF){})
    Name (TM_T, Zero)
    OperationRegion (MSNV, SystemMemory, 0x23AF1698, 0x00000100)
    Field (MSNV, AnyAcc, NoLock, Preserve)
    {
        ECND,   1, 
        DBDE,   1, 
        Offset (0x01), 
        DDMG,   2040
    }

    Method (NGBG, 1, Serialized)
    {
        If (DBDE)
        {
            Local0 = SizeOf (Arg0)
            Name (BUFS, Buffer (Local0){})
            BUFS = Arg0
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
                Local0--
            }

            DDMG = MBUF /* \MBUF */
        }
        ElseIf ((BUFN != Zero))
        {
            BUFN = Zero
            DDMG = Zero
            MBUF = Zero
        }
    }

    Method (PTMM, 2, Serialized)
    {
        If (DBDE)
        {
            If ((Arg0 == Zero))
            {
                TM_T = Timer
            }
            Else
            {
                NGBG (Arg1)
                Local0 = ((Timer - TM_T) / 0x2710)
                NGBG (Concatenate (ToDecimalString (Local0), "ms; "))
            }
        }
        Else
        {
            NGBG ("")
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0xFE))
        {
            BUFN &= 0xFE
            UP_L (0x0F)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0xFF - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0xFF - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Scope (\_SB.PC00.RP01.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP02.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP03.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP04.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP05.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP06.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP07.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP08.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP09.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP10.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP11.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP12.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP13.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP14.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP15.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP16.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP17.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP18.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP19.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP20.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP21.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP22.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP23.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.RP24.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.PEG0.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PC00.PEG2.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If (((SCCX == Zero) || (SCCX == 0x02)))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If (CondRefOf (RDID))
            {
                Switch (ToInteger (RDID))
                {
                    Case (Package (0x03)
                        {
                            0x522A10EC, 
                            0x525A10EC, 
                            0x526110EC
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Zero)
        }
    }

    If ((MPGN >= 0x04))
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            OperationRegion (PCCX, PCI_Config, Zero, 0x12)
            Field (PCCX, AnyAcc, NoLock, Preserve)
            {
                RDID,   32
            }

            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x09), 
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PGPA, 0, Serialized)
            {
                If ((BCCX == 0x03))
                {
                    If (((SCCX == Zero) || (SCCX == 0x02)))
                    {
                        If ((PIXX == Zero))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (CRST, 0, Serialized)
            {
                If (CondRefOf (RDID))
                {
                    Switch (ToInteger (RDID))
                    {
                        Case (Package (0x03)
                            {
                                0x522A10EC, 
                                0x525A10EC, 
                                0x526110EC
                            }

)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (\_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (LBUF, Buffer (0xC0){})
            Name (DEVY, Package (0x58)
            {
                Package (0x03)
                {
                    "\\_SB.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.XHCI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP04.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP17.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.CNVW", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.IPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GLAN", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG0.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HDAS.IDA", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "USB\\VID_8087&PID_0AC9&MI*", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x02, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C6", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TXHC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TXDC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TDM0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TDM1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GNA0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.VMD0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP21.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP22.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP23.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP24.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG1.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG2.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG3.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            0x03, 
                            0x80
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HEC3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }
            })
            Name (BCCD, Package (0x1D)
            {
                Package (0x02)
                {
                    "\\_SB.PC00.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP01.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP02.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP03.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP04.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP05.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP06.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP07.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP08.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP09.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP10.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP11.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP12.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP13.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP14.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP15.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP16.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP17.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP18.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP19.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP20.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP21.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP22.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP23.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP24.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            OperationRegion (LS0I, SystemMemory, LPMR, 0xC0)
            Field (LS0I, ByteAcc, Lock, Preserve)
            {
                L0IX,   1536
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG (Concatenate ("PEPC = ", ToHexString (PEPC)))
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00){})
                        }

                        If (((PEPC & One) == One))
                        {
                            If (((PEPC & 0x03) == One))
                            {
                                DerefOf (DEVY [0x09]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            Zero, 
                                            0x81
                                        }
                                    }
                            }
                            ElseIf (((PEPC & 0x03) == 0x03))
                            {
                                DerefOf (DEVY [0x09]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            DerefOf (DEVY [0x09]) [One] = One
                        }
                        ElseIf (((PEPC & 0x03) == 0x02))
                        {
                            DerefOf (DEVY [0x2D]) [One] = One
                        }

                        If (((PEPC & 0x10) == 0x10))
                        {
                            If ((\_SB.PC00.RP01.PXSX.PAHC () || \_SB.PC00.RP01.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x19]) [One] = One
                            }

                            If ((\_SB.PC00.RP02.PXSX.PAHC () || \_SB.PC00.RP02.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If ((\_SB.PC00.RP03.PXSX.PAHC () || \_SB.PC00.RP03.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If ((\_SB.PC00.RP04.PXSX.PAHC () || \_SB.PC00.RP04.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If ((\_SB.PC00.RP05.PXSX.PAHC () || \_SB.PC00.RP05.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1D]) [One] = One
                            }

                            If ((\_SB.PC00.RP06.PXSX.PAHC () || \_SB.PC00.RP06.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If ((\_SB.PC00.RP07.PXSX.PAHC () || \_SB.PC00.RP07.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If ((\_SB.PC00.RP08.PXSX.PAHC () || \_SB.PC00.RP08.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If ((\_SB.PC00.RP09.PXSX.PAHC () || \_SB.PC00.RP09.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x21]) [One] = One
                            }

                            If ((\_SB.PC00.RP10.PXSX.PAHC () || \_SB.PC00.RP10.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If ((\_SB.PC00.RP11.PXSX.PAHC () || \_SB.PC00.RP11.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If ((\_SB.PC00.RP12.PXSX.PAHC () || \_SB.PC00.RP12.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If ((\_SB.PC00.RP13.PXSX.PAHC () || \_SB.PC00.RP13.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If ((\_SB.PC00.RP14.PXSX.PAHC () || \_SB.PC00.RP14.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If ((\_SB.PC00.RP15.PXSX.PAHC () || \_SB.PC00.RP15.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If ((\_SB.PC00.RP16.PXSX.PAHC () || \_SB.PC00.RP16.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If ((\_SB.PC00.RP17.PXSX.PAHC () || \_SB.PC00.RP17.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If ((\_SB.PC00.RP18.PXSX.PAHC () || \_SB.PC00.RP18.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If ((\_SB.PC00.RP19.PXSX.PAHC () || \_SB.PC00.RP19.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If ((\_SB.PC00.RP20.PXSX.PAHC () || \_SB.PC00.RP20.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }

                            If ((\_SB.PC00.PEG0.PEGP.PAHC () || \_SB.PC00.PEG0.PEGP.PNVM ()))
                            {
                                DerefOf (DEVY [0x3B]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            Zero, 
                                            0x81
                                        }
                                    }
                                DerefOf (DEVY [0x3B]) [One] = One
                            }

                            If ((\_SB.PC00.RP21.PXSX.PAHC () || \_SB.PC00.RP21.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x50]) [One] = One
                            }

                            If ((\_SB.PC00.RP22.PXSX.PAHC () || \_SB.PC00.RP22.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x51]) [One] = One
                            }

                            If ((\_SB.PC00.RP23.PXSX.PAHC () || \_SB.PC00.RP23.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x52]) [One] = One
                            }

                            If ((\_SB.PC00.RP24.PXSX.PAHC () || \_SB.PC00.RP24.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x53]) [One] = One
                            }

                            If ((\_SB.PC00.PEG1.PEGP.PAHC () || \_SB.PC00.PEG1.PEGP.PNVM ()))
                            {
                                DerefOf (DEVY [0x54]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            Zero, 
                                            0x81
                                        }
                                    }
                                DerefOf (DEVY [0x54]) [One] = One
                            }

                            If ((\_SB.PC00.PEG2.PEGP.PAHC () || \_SB.PC00.PEG2.PEGP.PNVM ()))
                            {
                                DerefOf (DEVY [0x55]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            Zero, 
                                            0x81
                                        }
                                    }
                                DerefOf (DEVY [0x55]) [One] = One
                            }

                            If ((MPGN >= 0x04))
                            {
                                If ((\_SB.PC00.PEG3.PEGP.PAHC () || \_SB.PC00.PEG3.PEGP.PNVM ()))
                                {
                                    DerefOf (DEVY [0x56]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                Zero, 
                                                0x81
                                            }
                                        }
                                    DerefOf (DEVY [0x56]) [One] = One
                                }
                            }
                        }

                        If (((OSYS >= 0x07DF) && (WRTO != Zero)))
                        {
                            If ((CondRefOf (\_SB.PC00.RP01.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP01.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP01"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP02.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP02.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP02"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP03.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP03.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP03"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP04.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP04.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP04"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP05.PXSX.WWST) && Ones))
                            {
                                If (\_SB.PC00.RP05.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP05"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP06.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP06.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP06"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP07.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP07.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP07"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP08.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP08.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP08"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP09.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP09.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP09"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP10.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP10.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP10"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP11.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP11.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP11"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP12.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP12.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP12"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP13.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP13.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP13"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP14.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP14.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP14"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP15.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP15.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP15"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP16.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP16.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP16"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP17.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP17.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP17"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP18.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP18.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP18"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP19.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP19.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP19"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP20.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP20.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP20"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP21.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP21.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP21"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP22.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP22.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP22"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP23.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP23.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP23"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP24.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PC00.RP24.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        DerefOf (DEVY [0x41]) [Zero] = "\\_SB.PC00.RP24"
                                        DerefOf (DEVY [0x41]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }
                                }
                            }
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero)){}
                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == Zero))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }

                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x2E]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x2E]) [One] = Zero
                            DerefOf (DEVY [0x2F]) [One] = Zero
                            DerefOf (DEVY [0x30]) [One] = Zero
                            DerefOf (DEVY [0x31]) [One] = Zero
                            DerefOf (DEVY [0x32]) [One] = Zero
                            DerefOf (DEVY [0x33]) [One] = Zero
                            DerefOf (DEVY [0x34]) [One] = Zero
                            DerefOf (DEVY [0x35]) [One] = Zero
                        }

                        If ((((PEPC & 0x0800) == Zero) || (EMCE == Zero)))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If ((((PEPC & 0x1000) == Zero) || (SDCE == Zero)))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x2000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x00100000) == Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = Zero
                        }

                        If (((PEPC & 0x00200000) == Zero))
                        {
                            DerefOf (DEVY [0x38]) [One] = Zero
                        }

                        If (((PEPC & 0x00400000) == Zero))
                        {
                            DerefOf (DEVY [0x39]) [One] = Zero
                        }

                        If ((((PEPC & 0x00800000) == Zero) || (GBES == Zero)))
                        {
                            DerefOf (DEVY [0x3A]) [One] = Zero
                        }

                        If (((PEPC & 0x02000000) == Zero))
                        {
                            DerefOf (DEVY [0x3C]) [One] = Zero
                        }

                        If (((PEPC & 0x04000000) == Zero))
                        {
                            DerefOf (DEVY [0x3D]) [One] = Zero
                        }

                        DerefOf (DEVY [0x3E]) [One] = Zero
                        If (((PEPC & 0x10000000) == Zero))
                        {
                            DerefOf (DEVY [0x40]) [One] = Zero
                        }

                        If (((PEPC & 0x20000000) != Zero))
                        {
                            If ((THCE == One))
                            {
                                DerefOf (DEVY [0x42]) [One] = One
                            }

                            If ((TDCE == One))
                            {
                                DerefOf (DEVY [0x43]) [One] = One
                            }

                            If (CondRefOf (\_SB.PC01))
                            {
                                If ((TRE0 == One))
                                {
                                    DerefOf (DEVY [0x48]) [One] = One
                                }

                                If ((TRE1 == One))
                                {
                                    DerefOf (DEVY [0x49]) [One] = One
                                }

                                If ((TRE2 == One))
                                {
                                    DerefOf (DEVY [0x4A]) [One] = One
                                }

                                If ((TRE3 == One))
                                {
                                    DerefOf (DEVY [0x4B]) [One] = One
                                }
                            }
                            Else
                            {
                                If ((TRE0 == One))
                                {
                                    DerefOf (DEVY [0x44]) [One] = One
                                }

                                If ((TRE1 == One))
                                {
                                    DerefOf (DEVY [0x45]) [One] = One
                                }

                                If ((TRE2 == One))
                                {
                                    DerefOf (DEVY [0x46]) [One] = One
                                }

                                If ((TRE3 == One))
                                {
                                    DerefOf (DEVY [0x47]) [One] = One
                                }
                            }

                            If ((DME0 == One))
                            {
                                DerefOf (DEVY [0x4C]) [One] = One
                            }

                            If ((DME1 == One))
                            {
                                DerefOf (DEVY [0x4D]) [One] = One
                            }
                        }

                        If (((PEPC & 0x40000000) == Zero))
                        {
                            DerefOf (DEVY [0x4E]) [One] = Zero
                        }

                        If (((PEPC & 0x80000000) == Zero))
                        {
                            DerefOf (DEVY [0x4F]) [One] = Zero
                        }

                        If (((PEPC & 0x0000000100000000) == Zero))
                        {
                            DerefOf (DEVY [0x57]) [One] = Zero
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If ((CondRefOf (\_SB.PC00.RP01.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP01.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                    DerefOf (DEVY [0x19]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP02.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP02.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x1A]) [One] = One
                                    DerefOf (DEVY [0x1A]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP03.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP03.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x1B]) [One] = One
                                    DerefOf (DEVY [0x1B]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP04.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP04.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x1C]) [One] = One
                                    DerefOf (DEVY [0x1C]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP05.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP05.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x1D]) [One] = One
                                    DerefOf (DEVY [0x1D]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP06.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP06.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x1E]) [One] = One
                                    DerefOf (DEVY [0x1E]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP07.PXSX.WIST) && Ones))
                            {
                                If (\_SB.PC00.RP07.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x1F]) [One] = One
                                    DerefOf (DEVY [0x1F]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP08.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP08.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x20]) [One] = One
                                    DerefOf (DEVY [0x20]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP09.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP09.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x21]) [One] = One
                                    DerefOf (DEVY [0x21]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP10.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP10.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x22]) [One] = One
                                    DerefOf (DEVY [0x22]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP11.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP11.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x23]) [One] = One
                                    DerefOf (DEVY [0x23]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP12.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP12.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x24]) [One] = One
                                    DerefOf (DEVY [0x24]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP13.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP13.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x25]) [One] = One
                                    DerefOf (DEVY [0x25]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP14.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP14.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x26]) [One] = One
                                    DerefOf (DEVY [0x26]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP15.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP15.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x27]) [One] = One
                                    DerefOf (DEVY [0x27]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP16.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP16.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x28]) [One] = One
                                    DerefOf (DEVY [0x28]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP17.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP17.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x29]) [One] = One
                                    DerefOf (DEVY [0x29]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP18.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP18.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x2A]) [One] = One
                                    DerefOf (DEVY [0x2A]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP19.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP19.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x2B]) [One] = One
                                    DerefOf (DEVY [0x2B]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP20.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP20.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x2C]) [One] = One
                                    DerefOf (DEVY [0x2C]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP21.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP21.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x50]) [One] = One
                                    DerefOf (DEVY [0x50]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP22.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP22.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x51]) [One] = One
                                    DerefOf (DEVY [0x51]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP23.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP21.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x52]) [One] = One
                                    DerefOf (DEVY [0x52]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If ((CondRefOf (\_SB.PC00.RP24.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PC00.RP24.PXSX.WIST ())
                                {
                                    DerefOf (DEVY [0x52]) [One] = One
                                    DerefOf (DEVY [0x52]) [0x02] = Package (0x02)
                                        {
                                            Zero, 
                                            Package (0x03)
                                            {
                                                0xFF, 
                                                0x03, 
                                                0x80
                                            }
                                        }
                                }
                            }

                            If (\_SB.PC00.CNIP ())
                            {
                                DerefOf (DEVY [0x37]) [One] = One
                                DerefOf (DEVY [0x37]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If (\_SB.PC00.PEG0.PEGP.PGPA ())
                            {
                                DerefOf (DEVY [0x3B]) [Zero] = "\\_SB.PC00.PEG0"
                                DerefOf (DEVY [0x3B]) [One] = One
                            }

                            If (\_SB.PC00.PEG1.PEGP.PGPA ())
                            {
                                DerefOf (DEVY [0x54]) [Zero] = "\\_SB.PC00.PEG1"
                                DerefOf (DEVY [0x54]) [One] = One
                            }

                            If (\_SB.PC00.PEG2.PEGP.PGPA ())
                            {
                                DerefOf (DEVY [0x55]) [Zero] = "\\_SB.PC00.PEG2"
                                DerefOf (DEVY [0x55]) [One] = One
                            }

                            If ((MPGN >= 0x04))
                            {
                                If (\_SB.PC00.PEG3.PEGP.PGPA ())
                                {
                                    DerefOf (DEVY [0x56]) [Zero] = "\\_SB.PC00.PEG3"
                                    DerefOf (DEVY [0x56]) [One] = One
                                }
                            }

                            If (\_SB.PC00.RP01.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x19]) [Zero] = "\\_SB.PC00.RP01"
                                DerefOf (DEVY [0x19]) [One] = One
                                DerefOf (DEVY [0x19]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP02.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x1A]) [Zero] = "\\_SB.PC00.RP02"
                                DerefOf (DEVY [0x1A]) [One] = One
                                DerefOf (DEVY [0x1A]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP03.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x1B]) [Zero] = "\\_SB.PC00.RP03"
                                DerefOf (DEVY [0x1B]) [One] = One
                                DerefOf (DEVY [0x1B]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP04.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x1C]) [Zero] = "\\_SB.PC00.RP04"
                                DerefOf (DEVY [0x1C]) [One] = One
                                DerefOf (DEVY [0x1C]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP05.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x1D]) [Zero] = "\\_SB.PC00.RP05"
                                DerefOf (DEVY [0x1D]) [One] = One
                                DerefOf (DEVY [0x1D]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP06.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x1E]) [Zero] = "\\_SB.PC00.RP06"
                                DerefOf (DEVY [0x1E]) [One] = One
                                DerefOf (DEVY [0x1E]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP07.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x1F]) [Zero] = "\\_SB.PC00.RP07"
                                DerefOf (DEVY [0x1F]) [One] = One
                                DerefOf (DEVY [0x1F]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP08.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x20]) [Zero] = "\\_SB.PC00.RP08"
                                DerefOf (DEVY [0x20]) [One] = One
                                DerefOf (DEVY [0x20]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP09.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x21]) [Zero] = "\\_SB.PC00.RP09"
                                DerefOf (DEVY [0x21]) [One] = One
                                DerefOf (DEVY [0x21]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP10.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x22]) [Zero] = "\\_SB.PC00.RP10"
                                DerefOf (DEVY [0x22]) [One] = One
                                DerefOf (DEVY [0x22]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP11.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x23]) [Zero] = "\\_SB.PC00.RP11"
                                DerefOf (DEVY [0x23]) [One] = One
                                DerefOf (DEVY [0x23]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP12.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x24]) [Zero] = "\\_SB.PC00.RP12"
                                DerefOf (DEVY [0x24]) [One] = One
                                DerefOf (DEVY [0x24]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP13.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x25]) [Zero] = "\\_SB.PC00.RP13"
                                DerefOf (DEVY [0x25]) [One] = One
                                DerefOf (DEVY [0x25]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP14.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x26]) [Zero] = "\\_SB.PC00.RP14"
                                DerefOf (DEVY [0x26]) [One] = One
                                DerefOf (DEVY [0x26]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP15.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x27]) [Zero] = "\\_SB.PC00.RP15"
                                DerefOf (DEVY [0x27]) [One] = One
                                DerefOf (DEVY [0x27]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP16.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x28]) [Zero] = "\\_SB.PC00.RP16"
                                DerefOf (DEVY [0x28]) [One] = One
                                DerefOf (DEVY [0x28]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP17.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x29]) [Zero] = "\\_SB.PC00.RP17"
                                DerefOf (DEVY [0x29]) [One] = One
                                DerefOf (DEVY [0x29]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP18.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x2A]) [Zero] = "\\_SB.PC00.RP18"
                                DerefOf (DEVY [0x2A]) [One] = One
                                DerefOf (DEVY [0x2A]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP19.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x2B]) [Zero] = "\\_SB.PC00.RP19"
                                DerefOf (DEVY [0x2B]) [One] = One
                                DerefOf (DEVY [0x2B]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP20.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x2C]) [Zero] = "\\_SB.PC00.RP20"
                                DerefOf (DEVY [0x2C]) [One] = One
                                DerefOf (DEVY [0x2C]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP21.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x50]) [Zero] = "\\_SB.PC00.RP21"
                                DerefOf (DEVY [0x50]) [One] = One
                                DerefOf (DEVY [0x50]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP22.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x51]) [Zero] = "\\_SB.PC00.RP22"
                                DerefOf (DEVY [0x51]) [One] = One
                                DerefOf (DEVY [0x51]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP23.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x52]) [Zero] = "\\_SB.PC00.RP23"
                                DerefOf (DEVY [0x52]) [One] = One
                                DerefOf (DEVY [0x52]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP24.PXSX.PGPA ())
                            {
                                DerefOf (DEVY [0x53]) [Zero] = "\\_SB.PC00.RP24"
                                DerefOf (DEVY [0x53]) [One] = One
                                DerefOf (DEVY [0x53]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If (\_SB.PC00.RP01.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x19]) [One] = One
                                DerefOf (DEVY [0x19]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP02.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                                DerefOf (DEVY [0x1A]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP03.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                                DerefOf (DEVY [0x1B]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP04.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                                DerefOf (DEVY [0x1C]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP05.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x1D]) [One] = One
                                DerefOf (DEVY [0x1D]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP06.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                                DerefOf (DEVY [0x1E]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP07.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                                DerefOf (DEVY [0x1F]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP08.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                                DerefOf (DEVY [0x20]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP09.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x21]) [One] = One
                                DerefOf (DEVY [0x21]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP10.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                                DerefOf (DEVY [0x22]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP11.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                                DerefOf (DEVY [0x23]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP12.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                                DerefOf (DEVY [0x24]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP13.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                                DerefOf (DEVY [0x25]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP14.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                                DerefOf (DEVY [0x26]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP15.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                                DerefOf (DEVY [0x27]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP16.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                                DerefOf (DEVY [0x28]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP17.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                                DerefOf (DEVY [0x29]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP18.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                                DerefOf (DEVY [0x2A]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP19.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                                DerefOf (DEVY [0x2B]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP20.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                                DerefOf (DEVY [0x2C]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP21.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x50]) [One] = One
                                DerefOf (DEVY [0x50]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP22.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x51]) [One] = One
                                DerefOf (DEVY [0x51]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP23.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x52]) [One] = One
                                DerefOf (DEVY [0x52]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }

                            If (\_SB.PC00.RP24.PXSX.CRST ())
                            {
                                DerefOf (DEVY [0x53]) [One] = One
                                DerefOf (DEVY [0x53]) [0x02] = Package (0x02)
                                    {
                                        Zero, 
                                        Package (0x03)
                                        {
                                            0xFF, 
                                            0x03, 
                                            0x80
                                        }
                                    }
                            }
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        PTMM (Zero, "MS Enter:")
                        If ((S0ID == One))
                        {
                            ECNT (One)
                        }

                        PTMM (One, "MS Enter:")
                    }

                    If ((Arg2 == 0x04))
                    {
                        PTMM (Zero, "MS Exit:")
                        If ((S0ID == One))
                        {
                            ECNT (Zero)
                        }

                        PTMM (One, "MS Exit:")
                    }

                    If ((Arg2 == 0x05))
                    {
                        PTMM (Zero, "MS DRIPS Enter:")
                        If ((S0ID == One))
                        {
                            \GUAM (One)
                        }

                        ECNT (0x03)
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            \_SB.PC00.DPOF = One
                        }

                        PTMM (One, "MS DRIPS Enter:")
                    }

                    If ((Arg2 == 0x06))
                    {
                        PTMM (Zero, "MS DRIPS Exit:")
                        If ((S0ID == One))
                        {
                            \GUAM (Zero)
                        }

                        ECNT (0x02)
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            \_SB.PC00.DPOF = Zero
                        }

                        PTMM (One, "MS DRIPS Exit:")
                    }
                }

                If ((Arg0 == ToUUID ("57a6512e-3979-4e9d-9708-ff13b2508972") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        LBUF = L0IX /* \_SB_.PEPD.L0IX */
                        Return (LBUF) /* \_SB_.PEPD.LBUF */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Method (ECNT, 1, Serialized)
    {
        If (ECND)
        {
            Return (Zero)
        }

        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                P8XH (Zero, 0xC6)
                Local0 = Acquire (\EHLD, 0xFFFF)
                If ((Local0 == Zero))
                {
                    If (Zero)
                    {
                        \_SB.SGOV (0x020E00FF, Zero)
                    }

                    If ((G21F != 0xFF))
                    {
                        If ((G1B3 & 0x0F))
                        {
                            If (((\_SB.GPC0 (G21F) & 0x0200) == 0x0200))
                            {
                                \_SB.SPC0 (G21F, ((\_SB.GPC0 (G21F) & 0xFFFFFDFF) | 0x0100))
                            }
                        }
                    }

                    If (Ones)
                    {
                        \_SB.SGOV (0x090B000E, One)
                        While (!\_SB.GGIV (0x090E0007))
                        {
                            Stall (0x64)
                        }
                    }

                    \_SB.PC00.LPCB.EC0.SLPT = Zero
                    \ECUP = One
                    Release (\EHLD)
                }

                Return (Zero)
            }
            Case (One)
            {
                P8XH (Zero, 0xC5)
                If (Zero)
                {
                    \_SB.SGOV (0x020E00FF, One)
                }

                If ((G21F != 0xFF))
                {
                    If ((G1B3 & 0x0F))
                    {
                        If (((\_SB.GPC0 (G21F) & 0x0100) == 0x0100))
                        {
                            \_SB.SPC0 (G21F, ((\_SB.GPC0 (G21F) & 0xFFFFFEFF) | 0x0200))
                        }
                    }
                }

                \_SB.PC00.LPCB.EC0.SLPT = 0x06
                If (Ones)
                {
                    \_SB.SGOV (0x090B000E, Zero)
                }

                \ECUP = Zero
                Return (Zero)
            }
            Case (0x02)
            {
                P8XH (Zero, 0xC8)
                Return (Zero)
            }
            Case (0x03)
            {
                P8XH (Zero, 0xC7)
                Return (Zero)
            }
            Default
            {
                Return (0xFF)
            }

        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "Tpm2Tabl", 0x00001000)
{
    External (GSWS, MethodObj)    // 1 Arguments

    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "IFX0785")  // _HID: Hardware ID
            Noop
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8, 
                Offset (0x08), 
                INTE,   32, 
                INTV,   8, 
                Offset (0x10), 
                INTS,   32, 
                INTF,   32, 
                STS0,   32, 
                Offset (0x24), 
                FIFO,   32, 
                Offset (0x30), 
                TID0,   32
            }

            OperationRegion (TNVS, SystemMemory, 0x23AAF000, 0x2F)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32, 
                IRQN,   32, 
                SFRB,   8
            }

            Name (RESS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000030,
                }
            })
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (RESL, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                    0x0000000B,
                    0x0000000C,
                    0x0000000D,
                    0x0000000E,
                    0x0000000F,
                }
            })
            Name (RES0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y00)
                {
                    0x0000000C,
                }
            })
            Name (RES1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                Else
                {
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQN /* \_SB_.TPM_.IRQN */
                    Return (RES0) /* \_SB_.TPM_.RES0 */
                }
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                If ((IRQN != Zero))
                {
                    CreateDWordField (Arg0, 0x11, IRQ0)
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    IRQN = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x79, ITRG)
                    CreateBitField (RES0, \_SB.TPM._Y00._HE, LTRG)  // _HE_: High-Edge
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x7A, ILVL)
                    CreateBitField (RES0, \_SB.TPM._Y00._LL, LLVL)  // _LL_: Low Level
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    If ((((TID0 & 0x0F) == Zero) || ((TID0 & 0x0F
                        ) == 0x0F)))
                    {
                        If ((IRQ0 < 0x10))
                        {
                            INTV = (IRQ0 & 0x0F)
                        }

                        If ((ITRG == One))
                        {
                            INTE |= 0x10
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFEF
                        }

                        If ((LLVL == One))
                        {
                            INTE |= 0x08
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFF7
                        }
                    }
                }
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                ElseIf ((SFRB == Zero))
                {
                    Return (RESL) /* \_SB_.TPM_.RESL */
                }
                Else
                {
                    Return (RESS) /* \_SB_.TPM_.RESS */
                }
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        GSWS (MCIN)
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        GSWS (PPIN)
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg1 [One])
                        }

                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg1 [Zero])
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg1 [Zero])
                        MCIP = One
                        GSWS (MCIN)
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg2))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "HP_XHC_P", 0x00000000)
{
    External (_SB_.PC00.LPCB.CRID, IntObj)
    External (_SB_.PC00.TXHC.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS11, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS12, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS13, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS14, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.USR1, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.USR2, DeviceObj)
    External (GPLD, MethodObj)    // 2 Arguments
    External (GUPC, MethodObj)    // 2 Arguments
    External (HPID, FieldUnitObj)
    External (TPLD, MethodObj)    // 2 Arguments
    External (TUPC, MethodObj)    // 2 Arguments

    Scope (\_SB.PC00.XHCI.RHUB.HS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, 0x03))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, One))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x02))
        }

        Device (WCAM)
        {
            Name (_STA, 0x0F)  // _STA: Status
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS02.WCAM._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                        /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS02.WCAM._PLD.PLDP */
            }
        }

        Device (IRCM)
        {
            Name (_STA, 0x0F)  // _STA: Status
            Name (_ADR, 0x04)  // _ADR: Address
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS02.IRCM._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                        /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS02.IRCM._PLD.PLDP */
            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Switch (HPID)
            {
                Case (Package (0x04)
                    {
                        0x103C00B0, 
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB
                    }

)
                {
                    Return (GPLD (Zero, Zero))
                }
                Case (Package (0x06)
                    {
                        0x103C00B4, 
                        0x103C00B7, 
                        0x103C00B6, 
                        0x103C00BC, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (GPLD (Zero, 0x03))
                }
                Default
                {
                    Return (GPLD (Zero, Zero))
                }

            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Switch (HPID)
            {
                Case (Package (0x03)
                    {
                        0x103C00B0, 
                        0x103C00B4, 
                        0x103C00BC
                    }

)
                {
                    Return (GUPC (Zero, 0xFF))
                }
                Case (Package (0x07)
                    {
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB, 
                        0x103C00B7, 
                        0x103C00B6, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (GUPC (One, 0x03))
                }
                Default
                {
                    Return (GUPC (Zero, 0xFF))
                }

            }
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Switch (HPID)
            {
                Case (Package (0x03)
                    {
                        0x103C00B0, 
                        0x103C00B4, 
                        0x103C00BC
                    }

)
                {
                    Return (GPLD (Zero, Zero))
                }
                Case (Package (0x07)
                    {
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB, 
                        0x103C00B7, 
                        0x103C00B6, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (GPLD (One, 0x04))
                }
                Default
                {
                    Return (GPLD (Zero, Zero))
                }

            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, 0x09))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, 0x20))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, 0x03))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, 0x06))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS07)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x07))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS08)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS09)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Switch (HPID)
            {
                Case (Package (0x04)
                    {
                        0x103C00B0, 
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB
                    }

)
                {
                    Return (GPLD (Zero, Zero))
                }
                Case (Package (0x06)
                    {
                        0x103C00B4, 
                        0x103C00B7, 
                        0x103C00B6, 
                        0x103C00BC, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (GPLD (Zero, 0x09))
                }
                Default
                {
                    Return (GPLD (Zero, Zero))
                }

            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS10)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x0A))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.USR1)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.USR2)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, 0x03))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, One))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS02)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Switch (HPID)
            {
                Case (Package (0x03)
                    {
                        0x103C00B0, 
                        0x103C00B4, 
                        0x103C00BC
                    }

)
                {
                    Return (GUPC (Zero, 0xFF))
                }
                Case (Package (0x07)
                    {
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB, 
                        0x103C00B7, 
                        0x103C00B6, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (GUPC (One, 0x03))
                }
                Default
                {
                    Return (GUPC (Zero, 0xFF))
                }

            }
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Switch (HPID)
            {
                Case (Package (0x03)
                    {
                        0x103C00B0, 
                        0x103C00B4, 
                        0x103C00BC
                    }

)
                {
                    Return (GPLD (Zero, Zero))
                }
                Case (Package (0x07)
                    {
                        0x103C00B3, 
                        0x103C00B2, 
                        0x103C00BB, 
                        0x103C00B7, 
                        0x103C00B6, 
                        0x103C00BF, 
                        0x103C00BE
                    }

)
                {
                    Return (GPLD (One, 0x04))
                }
                Default
                {
                    Return (GPLD (Zero, Zero))
                }

            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, 0x03))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, 0x06))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.HS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (One, 0x09))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, 0x20))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "HP    ", "UcsiAcpi", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PC00.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PC00.LPCB.EC0_.ECRM, OpRegionObj)
    External (ECRM, MethodObj)    // Warning: Unknown method, guessing 4 arguments

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B), 
            UCOS,   8, 
            UDAT,   8
        }

        Method (RRMB, 1, Serialized)
        {
            Debug = "Enter RRMB"
            Name (RBUF, Buffer (Arg0){})
            Local0 = Zero
            While ((Local0 < Arg0))
            {
                RBUF [Local0] = Zero
                Local0++
            }

            If (\_SB.PC00.LPCB.EC0.ECRG)
            {
                If (Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF))
                {
                    Return (Zero)
                }

                UNL2 [Zero] = "RRMByte"
                Local0 = Zero
                While ((Local0 < Arg0))
                {
                    RBUF [Local0] = UDAT /* \_SB_.PC00.LPCB.EC0_.UDAT */
                    Local0++
                }

                Release (\_SB.PC00.LPCB.EC0.ECMX)
            }
            Else
            {
                UNL2 [Zero] = "RRMByte-no ECREG?"
                Debug = "RRMB No ECREG"
            }

            Debug = "Exit RRMB"
            Return (RBUF) /* \_SB_.PC00.LPCB.EC0_.RRMB.RBUF */
        }

        Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Debug = "Enter Q27"
            UNL1 = 0xC027
            \_SB.UBTC.UQDC ()
            Debug = "Exit Q27"
            UNL1 = 0xCF27
        }
    }

    Scope (\_SB)
    {
        Name (UNL1, Zero)
        Name (UNL2, Buffer (0x20){})
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "USB Type-C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (UBCB, 0x23AE8000)
            Name (UBCL, 0x00001000)
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Mutex (UMUT, 0x00)
            Name (UTE1, Zero)
            Mutex (UMU1, 0x00)
            Name (UOBF, Buffer (0x1A){})
            Name (UTE2, Zero)
            Mutex (UMU2, 0x00)
            OperationRegion (USBC, SystemMemory, UBCB, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* \_SB_.UBTC.UBCB */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Debug = "Enter UCSI _DSM"
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Debug = "Arg2 = "
                    Debug = Arg2
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            UNL1 = 0x0D50
                            Debug = "Exit UCSI _DSM Arg2=0"
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            UNL1 = 0x0D51
                            \_SB.UBTC.CCI0 = Zero
                            \_SB.UBTC.CCI1 = Zero
                            \_SB.UBTC.CCI2 = Zero
                            \_SB.UBTC.CCI3 = Zero
                            If ((\_SB.UBTC.CTL0 == One))
                            {
                                If ((URST () == One))
                                {
                                    \_SB.UBTC.CCI0 = Zero
                                    \_SB.UBTC.CCI1 = Zero
                                    \_SB.UBTC.CCI2 = Zero
                                    \_SB.UBTC.CCI3 = 0x08
                                    Notify (\_SB.UBTC, 0x80) // Status Change
                                }
                            }
                            Else
                            {
                                UOTE ()
                            }
                        }
                        Case (0x02)
                        {
                            UNL1 = 0x0D52
                        }
                        Case (0x03)
                        {
                            Debug = "Exit UCSI _DSM Arg2=3"
                            Return (Zero)
                        }

                    }
                }

                Debug = "Exit UCSI _DSM"
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (UCL1, 0, Serialized)
            {
                Debug = "Enter UCL1"
                UNL1 = 0xA001
                Name (ZBUF, Buffer (0x1A){})
                Local0 = Zero
                While ((Local0 < 0x1A))
                {
                    ZBUF [Local0] = Zero
                    Local0++
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = 0xFFFFFFFFFFFFFFFE
                UTE1 &= Local0
                Release (UMU1)
                If (Acquire (UMU2, 0xFFFF))
                {
                    Return (Zero)
                }

                \_SB.UBTC.UOBF = ZBUF /* \_SB_.UBTC.UCL1.ZBUF */
                UTE2 = Zero
                Release (UMU2)
                Debug = "Exit UCL1"
                Return (Zero)
            }

            Method (UCRT, 1, Serialized)
            {
                Debug = "Enter UCRT"
                Local0 = Zero
                Local3 = Zero
                UETO (Arg0)
                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local1 = (UTE1 & One)
                Release (UMU1)
                If ((Local1 == One))
                {
                    If (!Acquire (UMUT, 0x03E8))
                    {
                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = UTE2 /* \_SB_.UBTC.UTE2 */
                        Release (UMU2)
                        Debug = "Resignal EC to fetch cmd"
                        If ((UDHX (Local2) != One))
                        {
                            Local3 = One
                        }

                        Release (UMUT)
                    }
                    Else
                    {
                        UNL1 = 0xF031
                        Debug = "UCRT UMUT timeout"
                        Local3 = One
                    }
                }

                If ((Local3 == One))
                {
                    Debug = "UCRT bad exit"
                    Local0 = One
                    \_SB.UBTC.UCL1 ()
                }

                Debug = "Exit UCRT"
                Return (Local0)
            }

            Method (UQDC, 0, Serialized)
            {
                Debug = "Enter UQDC"
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    Local5 = Zero
                    If (Acquire (UMU1, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = UTE1 /* \_SB_.UBTC.UTE1 */
                    Release (UMU1)
                    If (Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UNL1 = 0xC001
                    Local2 = \_SB.PC00.LPCB.EC0.UCOS
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    Switch (ToInteger (Local2))
                    {
                        Case (Zero)
                        {
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Debug = "ASL slow execution timeout"
                                \_SB.UBTC.UCL1 ()
                            }

                            Return (One)
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Case (0x02)
                        {
                            UNL1 = 0xC002
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Local3 = UTTE ()
                                If ((Local3 == One))
                                {
                                    UNL2 [Zero] = "UQ-0"
                                    Debug = "Exit UQDC Cmd Fetched"
                                    Return (One)
                                }

                                UNL2 [Zero] = "UQDC() failout."
                                UNL1 = 0xF002
                                Local5 = One
                            }
                            Else
                            {
                                Debug = "Panic cleanup"
                                Local5 = One
                            }
                        }
                        Case (0x04)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - FullResp override."
                            }
                        }
                        Case (0x05)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - AbbrevResp override."
                            }
                        }
                        Case (0x07)
                        {
                            UNL2 [Zero] = "EC indicate cmdFail"
                            UNL1 = 0xF003
                            Local5 = One
                        }
                        Default
                        {
                            UNL1 = 0xF004
                            Local5 = One
                        }

                    }
                }
                Else
                {
                    Debug = "UQDC Fail ECREG"
                    Local5 = One
                }

                If ((Local5 == One))
                {
                    UNL1 = 0xF005
                    UNL2 [Zero] = "BigErr!Cleanup."
                    Debug = "UQDC Exit Big Error Cleanup"
                    \_SB.UBTC.UCL1 ()
                    Return (Zero)
                }

                Debug = "Exit UQDC"
                Return (One)
            }

            Method (UTTE, 0, Serialized)
            {
                Debug = "Enter UTTE"
                Local0 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF0F0
                    Debug = "UTTE UMUT timeout"
                    Local0 = Zero
                }
                Else
                {
                    If (\_SB.PC00.LPCB.EC0.ECRG)
                    {
                        UNL1 = 0xA003
                        If (Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local1 = Zero
                        While ((Local1 < UTE2))
                        {
                            \_SB.PC00.LPCB.EC0.UDAT = DerefOf (UOBF [Local1])
                            Local1++
                        }

                        Debug = "UTTE Work done"
                        Release (UMU2)
                        Release (\_SB.PC00.LPCB.EC0.ECMX)
                        UNL1 = 0xA004
                    }
                    Else
                    {
                        UNL2 [Zero] = "UTTE fail ECREG"
                        UNL1 = 0xF006
                        Debug = "UTTE fail ECREG"
                        Local0 = Zero
                    }

                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UTTE"
                Return (Local0)
            }

            Method (UDCT, 0, Serialized)
            {
                Debug = "Enter UDCT"
                UNL1 = 0xA011
                If ((DerefOf (UOBF [0x03]) != Zero))
                {
                    Debug = "Exit UDCT Long"
                    Return (0x1A)
                }

                Debug = "Exit UDCT short"
                Return (0x0A)
            }

            Method (UBCP, 0, Serialized)
            {
                Debug = "Enter UBCP"
                UOBF [Zero] = \_SB.UBTC.RSV1
                UOBF [One] = \_SB.UBTC.RSV2
                UOBF [0x02] = \_SB.UBTC.CTL0
                UOBF [0x03] = \_SB.UBTC.CTL1
                UOBF [0x04] = \_SB.UBTC.CTL2
                UOBF [0x05] = \_SB.UBTC.CTL3
                UOBF [0x06] = \_SB.UBTC.CTL4
                UOBF [0x07] = \_SB.UBTC.CTL5
                UOBF [0x08] = \_SB.UBTC.CTL6
                UOBF [0x09] = \_SB.UBTC.CTL7
                UOBF [0x0A] = \_SB.UBTC.MGO0
                UOBF [0x0B] = \_SB.UBTC.MGO1
                UOBF [0x0C] = \_SB.UBTC.MGO2
                UOBF [0x0D] = \_SB.UBTC.MGO3
                UOBF [0x0E] = \_SB.UBTC.MGO4
                UOBF [0x0F] = \_SB.UBTC.MGO5
                UOBF [0x10] = \_SB.UBTC.MGO6
                UOBF [0x11] = \_SB.UBTC.MGO7
                UOBF [0x12] = \_SB.UBTC.MGO8
                UOBF [0x13] = \_SB.UBTC.MGO9
                UOBF [0x14] = \_SB.UBTC.MGOA
                UOBF [0x15] = \_SB.UBTC.MGOB
                UOBF [0x16] = \_SB.UBTC.MGOC
                UOBF [0x17] = \_SB.UBTC.MGOD
                UOBF [0x18] = \_SB.UBTC.MGOE
                UOBF [0x19] = \_SB.UBTC.MGOF
                Debug = "Exit UBCP"
            }

            Method (UDHX, 1, Serialized)
            {
                Debug = "Enter UDHX"
                Local0 = Zero
                Local1 = 0x03
                If ((Arg0 == 0x1A))
                {
                    Local1 = 0x04
                }

                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PC00.LPCB.EC0.UCOS = Local1
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    UNL1 = 0xA020
                    Local0 = One
                }
                Else
                {
                    UNL2 [Zero] = "UDHX-Fail ECREG"
                    UNL1 = 0xF008
                    Debug = "UDHX fail ECREG"
                }

                Debug = "Exit UDHX"
                Return (Local0)
            }

            Method (UOTE, 0, Serialized)
            {
                Debug = "Enter UOTE"
                Local3 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF011
                    Debug = "UMUT dumping command"
                    Return (Zero)
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = (UTE1 & One)
                If ((Local0 == Zero))
                {
                    UBCP ()
                    UTE1 |= One
                    Local2 = UDCT ()
                    If (Acquire (UMU2, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UTE2 = Local2
                    Release (UMU2)
                    If ((UDHX (Local2) != One))
                    {
                        UNL2 [Zero] = "UOTE-Fail ECREG"
                        UNL1 = 0xF008
                        Debug = "UOTE Fail ECREG"
                        Local3 = Zero
                    }
                }
                Else
                {
                    Debug = "OUTCMD already started"
                    If (Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local4 = \_SB.PC00.LPCB.EC0.UCOS
                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    If ((Local4 == Zero))
                    {
                        Debug = "EC is illegally IDLE cleanup"
                        Local3 = Zero
                    }
                }

                Release (UMU1)
                If ((Local3 == Zero))
                {
                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UOTE"
                Return (Local3)
            }

            Method (UETO, 1, Serialized)
            {
                Debug = "Enter UETO"
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL2 [Zero] = "UETO-failUMUTacquire"
                    UNL1 = 0xCF01
                    Debug = "UETO UMUT timeout"
                    Return (Zero)
                }

                UNL1 = 0xCF00
                If ((Arg0 == 0x04))
                {
                    Local1 = 0x18
                    UNL2 [Zero] = "FullUETO"
                    UNL1 = 0xCF10
                }
                ElseIf ((Arg0 == 0x05))
                {
                    Local1 = 0x08
                    UNL2 [Zero] = "AbbrvUETO"
                    UNL1 = 0xCF11
                }

                Name (BUFF, Buffer (Local1){})
                BUFF = \_SB.PC00.LPCB.EC0.RRMB (Local1)
                \_SB.UBTC.VER1 = DerefOf (BUFF [Zero])
                \_SB.UBTC.VER2 = DerefOf (BUFF [One])
                \_SB.UBTC.RSV1 = DerefOf (BUFF [0x02])
                \_SB.UBTC.RSV2 = DerefOf (BUFF [0x03])
                \_SB.UBTC.CCI0 = DerefOf (BUFF [0x04])
                \_SB.UBTC.CCI1 = DerefOf (BUFF [0x05])
                \_SB.UBTC.CCI2 = DerefOf (BUFF [0x06])
                \_SB.UBTC.CCI3 = DerefOf (BUFF [0x07])
                If ((0x18 == Local1))
                {
                    UNL1 = 0xCF13
                    \_SB.UBTC.MGI0 = DerefOf (BUFF [0x08])
                    \_SB.UBTC.MGI1 = DerefOf (BUFF [0x09])
                    \_SB.UBTC.MGI2 = DerefOf (BUFF [0x0A])
                    \_SB.UBTC.MGI3 = DerefOf (BUFF [0x0B])
                    \_SB.UBTC.MGI4 = DerefOf (BUFF [0x0C])
                    \_SB.UBTC.MGI5 = DerefOf (BUFF [0x0D])
                    \_SB.UBTC.MGI6 = DerefOf (BUFF [0x0E])
                    \_SB.UBTC.MGI7 = DerefOf (BUFF [0x0F])
                    \_SB.UBTC.MGI8 = DerefOf (BUFF [0x10])
                    \_SB.UBTC.MGI9 = DerefOf (BUFF [0x11])
                    \_SB.UBTC.MGIA = DerefOf (BUFF [0x12])
                    \_SB.UBTC.MGIB = DerefOf (BUFF [0x13])
                    \_SB.UBTC.MGIC = DerefOf (BUFF [0x14])
                    \_SB.UBTC.MGID = DerefOf (BUFF [0x15])
                    \_SB.UBTC.MGIE = DerefOf (BUFF [0x16])
                    \_SB.UBTC.MGIF = DerefOf (BUFF [0x17])
                }

                Notify (\_SB.UBTC, 0x80) // Status Change
                Release (UMUT)
                UNL2 [Zero] = "xUETO"
                UNL1 = 0xCFFF
                Debug = "Exit UETO"
            }

            Method (URST, 0, Serialized)
            {
                Debug = "Enter URST"
                Local0 = Zero
                If (\_SB.PC00.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PC00.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PC00.LPCB.EC0.UCOS = 0x07
                    Local1 = 0x23
                    Local2 = \_SB.PC00.LPCB.EC0.UCOS
                    While (((ToInteger (Local2) != Zero) && (Local1 > Zero)))
                    {
                        Sleep (0x0A)
                        Local2 = \_SB.PC00.LPCB.EC0.UCOS
                        Local1--
                    }

                    Release (\_SB.PC00.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    If ((ToInteger (Local2) == Zero))
                    {
                        UNL1 = 0xA030
                        Local0 = One
                    }
                }
                Else
                {
                    UNL2 [Zero] = "URST-Fail ECREG"
                    UNL1 = 0xF013
                    Debug = "URST fail ECREG"
                }

                Debug = "Exit URST"
                Return (Local0)
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : CE
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "TGL-ULT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 0000000000000000
[030h 0048 004h]                Start Method : 06 [Memory Mapped I/O]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 0000000023AC8000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 CE 48 50 51 4F 45 4D  // TPM2L.....HPQOEM
    0010: 54 47 4C 2D 55 4C 54 00 02 00 00 00 20 20 20 20  // TGL-ULT.....    
    0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 80 AC 23 00 00 00 00              // .......#....


UEFI1
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 0000063A
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 7C
[00Ah 0010 006h]                      Oem ID : "INTEL"
[010h 0016 008h]                Oem Table ID : "RstVmdE"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "  "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 010h]             UUID Identifier : B73C1974-784D-4991-9692-6776E38AAA82
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 1594 (0x63A)

    0000: 55 45 46 49 3A 06 00 00 01 7C 49 4E 54 45 4C 00  // UEFI:....|INTEL.
    0010: 52 73 74 56 6D 64 45 00 00 00 00 00 86 80 00 00  // RstVmdE.........
    0020: 00 00 00 00 74 19 3C B7 4D 78 91 49 96 92 67 76  // ....t.<.Mx.I..gv
    0030: E3 8A AA 82 36 00 00 00 00 00 00 00 00 00 00 00  // ....6...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00                    // ..........


UEFI2
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 0000005C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 16
[00Ah 0010 006h]                      Oem ID : "INTEL"
[010h 0016 008h]                Oem Table ID : "RstVmdV"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "  "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 010h]             UUID Identifier : E4DD92E0-AC7D-11DF-94E2-0800200C9A66
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 92 (0x5C)

    0000: 55 45 46 49 5C 00 00 00 01 16 49 4E 54 45 4C 00  // UEFI\.....INTEL.
    0010: 52 73 74 56 6D 64 56 00 00 00 00 00 86 80 00 00  // RstVmdV.........
    0020: 00 00 00 00 E0 92 DD E4 7D AC DF 11 94 E2 08 00  // ........}.......
    0030: 20 0C 9A 66 36 00 24 56 45 52 02 02 12 00 01 00  //  ..f6.$VER......
    0040: 01 00 51 14 26 55 37 00 7E 00 06 00 20 00 02 04  // ..Q.&U7.~... ...
    0050: 37 00 00 AF 25 00 00 02 3B CE 00 00              // 7...%...;...


WSMT1
-----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BB
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : ""
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : ""
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 BB 48 50 51 4F 45 4D  // WSMT(.....HPQOEM
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 07 00 00 00                          // ........


WSMT2
-----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 69
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "87ED    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 69 48 50 51 4F 45 4D  // WSMT(....iHPQOEM
    0010: 38 37 45 44 20 20 20 20 01 00 00 00 48 50 20 20  // 87ED    ....HP  
    0020: 01 00 00 00 07 00 00 00                          // ........


