
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "HP    "  "INSYDE  "  0x00000001  "ACPI"   0x00040000
 02)  ASF!  0x000000A5  0x20  "HP    "  "INSYDE  "  0x00000001  "ACPI"   0x00040000
 03)  APIC  0x00000084  0x02  "HP    "  "INSYDE  "  0x00000001  "ACPI"   0x00040000
 04)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-MPC"  0x00000001  "ACPI"   0x00040000
 05)  SSDT  0x0000168E  0x02  "HP    "  "INSYDE  "  0x00000001  "MSFT"   0x04000000
 06)  BOOT  0x00000028  0x01  "HP    "  "INSYDE  "  0x00000001  "ACPI"   0x00040000
 07)  DSDT  0x0001009F  0x01  "HP    "  "INSYDE  "  0xF0000000  "ACPI"   0x00040000
 08)  FACP  0x000000F4  0x04  "HPQOEM"  "SLIC-MPC"  0x00000001  "ACPI"   0x00040000
 09)  SSDT  0x000003DE  0x01  "HP    "  "INSYDE  "  0x00000001  "AMD "   0x00000001
 10)  HPET  0x00000038  0x01  "HP    "  "INSYDE  "  0x00000001  "ACPI"   0x00040000
 11)  FACS  0x00000040  0x01

Found 11 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : BF
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 00
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 00
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 00
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 01
[075h 0117   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[077h 0119   1]         Interrupt Input LINT : 01

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 02
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 03
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

    0000: 41 50 49 43 84 00 00 00 02 BF 48 50 20 20 20 20  // APIC......HP    
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 41 43 50 49  // INSYDE  ....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 00  // ................
    0040: 00 00 00 00 00 08 03 00 00 00 00 00 01 0C 04 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 05  // ................
    0070: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  // ................
    0080: 03 05 00 01                                      // ....


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 01
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 00
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 21 F8 00 00 00 1B F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0100
[08Bh 0139   2]                 Boot Options : 8400
[08Dh 0141   2]               Oem Parameters : 1600

[08Fh 0143   1]                Subtable Type : 00 [ASF Information]
[090h 0144   1]                     Reserved : 10
[091h 0145   2]                       Length : 005C
[093h 0147   1]          Minimum Reset Value : 68
[094h 0148   1]     Minimum Polling Interval : 88
[095h 0149   2]                    System ID : D2C2
[097h 0151   4]              Manufacturer ID : A4A2A0DC
[09Bh 0155   1]                        Flags : A6
[09Ch 0156   3]                     Reserved : 000000


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 01 48 50 20 20 20 20  // ASF!.... .HP    
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 41 43 50 49  // INSYDE  ....ACPI
    0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 21 F8 00 00  // ............!...
    0080: 00 1B F0 00 00 00 01 57 00 00 01 00 84 00 16 00  // .......W........
    0090: 10 5C 00 68 88 C2 D2 DC A0 A2 A4 A6 00 00 00 00  // .\.h............
    00A0: 00 00 00 00 00                                   // .....


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 19
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 19 48 50 20 20 20 20  // BOOT(.....HP    
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 41 43 50 49  // INSYDE  ....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


DSDT
----
DefinitionBlock ("", "DSDT", 1, "HP    ", "INSYDE  ", 0xF0000000)
{
    External (_PR_.C000._PPC, UnknownObj)
    External (_PR_.C001._PPC, UnknownObj)
    External (_PR_.C002._PPC, UnknownObj)
    External (_PR_.C003._PPC, UnknownObj)
    External (ALIB, IntObj)

    Method (BGTB, 2, NotSerialized)
    {
        Local0 = DerefOf (Arg0 [Arg1])
        Return (Local0)
    }

    Name (ECON, Zero)
    Name (WIRE, Zero)
    OperationRegion (SPRT, SystemIO, 0xB0, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    OperationRegion (CMS1, SystemIO, 0x72, 0x02)
    Field (CMS1, ByteAcc, NoLock, Preserve)
    {
        CMSI,   8, 
        CMSD,   8
    }

    IndexField (CMSI, CMSD, ByteAcc, NoLock, Preserve)
    {
        Offset (0xEA), 
        BTLS,   1, 
        WLAN,   1, 
        BTTH,   1, 
        WLLS,   1, 
        BELS,   1, 
        Offset (0xF7), 
        HSDC,   8, 
        HSDS,   8, 
        HBUC,   8, 
        HBUS,   8
    }

    Method (CMSW, 2, NotSerialized)
    {
        CMSI = Arg0
        CMSD = Arg1
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x50), 
        HPAD,   32, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, MMSO, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x160), 
            ,   7, 
        GE01,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x1FF), 
            ,   1, 
        G01S,   1, 
        Offset (0x203), 
            ,   1, 
        G01E,   1, 
        Offset (0x207), 
            ,   1, 
        TR01,   1, 
        Offset (0x20B), 
            ,   1, 
        TL01,   1, 
        Offset (0x20D), 
            ,   7, 
        ACIR,   1, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3DE), 
        BLNK,   2, 
        Offset (0x3EF), 
        PHYD,   1, 
        Offset (0xE80), 
            ,   2, 
        ECES,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PWDE = One
        PEWD = Zero
    }

    Method (CHKH, 0, NotSerialized)
    {
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    OperationRegion (PEBA, SystemMemory, 0xF8000000, 0x02000000)
    Field (PEBA, AnyAcc, NoLock, Preserve)
    {
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (GNVS, SystemMemory, 0xDFEBEE98, 0x00000012)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        AIRC,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8
    }

    OperationRegion (OGNS, SystemMemory, 0xDFEBA018, 0x0000112D)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        SERN,   80, 
        MDID,   256, 
        GUID,   64, 
        UUID,   128, 
        SKUN,   96, 
        LCOD,   24, 
        MACA,   48, 
        KBMX,   8, 
        CHID,   8, 
        OSKU,   8, 
        QKPM,   8, 
        WPFL,   8, 
        DBSW,   8, 
        WPCR,   8, 
        WINA,   8, 
        GPSA,   8, 
        MSME,   8, 
        PREV,   24, 
        ODDC,   8, 
        WIN7,   8, 
        IMID,   8, 
        WSDY,   32, 
        WSDM,   16, 
        WSDD,   16, 
        CTNU,   152, 
        ESTL,   8, 
        CIMF,   8, 
        ASTG,   144, 
        Offset (0x1000), 
        HWCT,   8, 
        HWBC,   8, 
        HWRC,   8, 
        HWBF,   1024, 
        IAOR,   8, 
        CDAT,   32, 
        WLVD,   16, 
        WLDD,   16, 
        WLSV,   16, 
        WLSS,   16, 
        BTVD,   16, 
        BTDD,   16, 
        WWVD,   16, 
        WWDD,   16, 
        GPVD,   16, 
        GPDD,   16, 
        FACM,   16, 
        SMA4,   8, 
        WIVD,   16, 
        WIDD,   16, 
        OG00,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        PXDM,   8, 
        PXFM,   8, 
        XGPM,   8, 
        VGAM,   8, 
        PTID,   8, 
        PSID,   8, 
        HRST,   16, 
        VRST,   16, 
        PBCM,   256, 
        PNID,   32, 
        PHSZ,   8, 
        PVSZ,   8, 
        CCNO,   8, 
        PSMV,   8, 
        COMB,   8, 
        SGWC,   8, 
        CTP1,   8, 
        CTP2,   8, 
        CTP3,   8, 
        GTP1,   8, 
        GTP2,   8, 
        FTP1,   8, 
        FTP2,   8, 
        FTP3,   8, 
        FTP4,   8, 
        FTP5,   8, 
        BTP1,   8, 
        BTP2,   8, 
        CPTV,   8, 
        GPTV,   8, 
        FNTV,   8, 
        BTTV,   8, 
        TMTS,   8, 
        RSTP,   8, 
        PSM1,   8, 
        PSH1,   8, 
        PEM1,   8, 
        PEH1,   8, 
        PSM2,   8, 
        PSH2,   8, 
        PEM2,   8, 
        PEH2,   8, 
        PSM3,   8, 
        PSH3,   8, 
        PEM3,   8, 
        PEH3,   8, 
        PSM4,   8, 
        PSH4,   8, 
        PEM4,   8, 
        PEH4,   8, 
        PSM5,   8, 
        PSH5,   8, 
        PEM5,   8, 
        PEH5,   8, 
        PSM6,   8, 
        PSH6,   8, 
        PEM6,   8, 
        PEH6,   8, 
        PSM7,   8, 
        PSH7,   8, 
        PEM7,   8, 
        PEH7,   8, 
        BSM1,   8, 
        BSH1,   8, 
        BEM1,   8, 
        BEH1,   8, 
        BSM2,   8, 
        BSH2,   8, 
        BEM2,   8, 
        BEH2,   8, 
        BSM3,   8, 
        BSH3,   8, 
        BEM3,   8, 
        BEH3,   8, 
        BSM4,   8, 
        BSH4,   8, 
        BEM4,   8, 
        BEH4,   8, 
        BSM5,   8, 
        BSH5,   8, 
        BEM5,   8, 
        BEH5,   8, 
        BSM6,   8, 
        BSH6,   8, 
        BEM6,   8, 
        BEH6,   8, 
        BSM7,   8, 
        BSH7,   8, 
        BEM7,   8, 
        BEH7,   8, 
        FTSP,   8
    }

    OperationRegion (H1DA, SystemMemory, 0xDFEBEF98, 0x0000001F)
    Field (H1DA, AnyAcc, Lock, Preserve)
    {
        H1SG,   32, 
        RCKP,   8, 
        HDSM,   16, 
        HD1H,   64, 
        HD2H,   64, 
        OD1H,   64
    }

    OperationRegion (HSMI, SystemIO, 0xB0, 0x02)
    Field (HSMI, ByteAcc, NoLock, Preserve)
    {
        HSMC,   8, 
        HSMS,   8
    }

    Method (HTS3, 1, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            HSMS = Zero
            HSMC = 0xD6
        }

        If ((Arg0 == One))
        {
            HSMS = One
            HSMC = 0xD6
        }
    }

    OperationRegion (NVST, SystemMemory, 0xDFEBDBD4, 0x0000012A)
    Field (NVST, AnyAcc, Lock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50) {})
        Name (STG2, Buffer (0x50) {})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (STG1 [Local0]) != DerefOf (STG2 [Local0]
                )))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (CKOS, 0, NotSerialized)
    {
        If ((WNOS == Zero))
        {
            If (SCMP (_OS, "Microsoft Windows"))
            {
                WNOS = One
            }

            If (SCMP (_OS, "Microsoft Windows NT"))
            {
                WNOS = 0x02
            }

            If (SCMP (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                WNOS = 0x03
            }

            If (CondRefOf (\_OSI, Local0))
            {
                If (SCMP (_OS, "Windows 2006"))
                {
                    WNOS = 0x05
                }
                ElseIf (SCMP (_OS, "Windows 2009"))
                {
                    WNOS = 0x06
                }
                Else
                {
                    WNOS = 0x04
                }
            }
        }

        Return (WNOS) /* \WNOS */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_PR)
    {
        Processor (C000, 0x00, 0x00000410, 0x06) {}
        Processor (C001, 0x01, 0x00000000, 0x00) {}
        Processor (C002, 0x02, 0x00000000, 0x00) {}
        Processor (C003, 0x03, 0x00000000, 0x00) {}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((DAS3 == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB3, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB5, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB6, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB7, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB0, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB1, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB3, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (TRIC, 0, NotSerialized)
        {
            \_SB.PCI0.SMBS.E15C = ~\_SB.PCI0.SMBS.GE15
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.SMBS.E15C)
            {
                Sleep (0x14)
                If (\_SB.PCI0.SMBS.GE15)
                {
                    \_SB.PCI0.SMBS.E15C = Zero
                    Sleep (0x28)
                    \_SB.PCI0.SMBS.P35O = Zero
                    \_SB.PCI0.SMBS.P35E = Zero
                    Sleep (0x28)
                    P80H = 0x0F15
                }
            }
            Else
            {
                Sleep (0x14)
                If (!\_SB.PCI0.SMBS.GE15)
                {
                    \_SB.PCI0.SMBS.E15C = One
                    \_SB.PCI0.SMBS.P2CO = Zero
                    P80H = 0x1F15
                }
            }

            TRIC ()
            Notify (\_SB.PCI0.SATA.PRT1, Zero) // Bus Check
        }

        Method (TRIZ, 0, NotSerialized)
        {
            \_SB.PCI0.SMBS.E16C = ~\_SB.PCI0.SMBS.GE16
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.AFD.ODZP () == 0x80000001))
            {
                If (\_SB.PCI0.SMBS.E16C)
                {
                    Sleep (0x14)
                    If (\_SB.PCI0.SMBS.GE16)
                    {
                        \_SB.PCI0.SMBS.E16C = Zero
                        If (((\_SB.PCI0.SATA.VIDI == 0x43901002) || (\_SB.PCI0.SATA.VIDI == 0x43911002)))
                        {
                            Notify (\_SB.PCI0.AFD, 0x80) // Status Change
                        }

                        If ((\_SB.PCI0.SATA.VIDI == 0x43941002))
                        {
                            Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                        }

                        P80H = 0xDF15
                    }
                }
                Else
                {
                    Sleep (0x14)
                    If (!\_SB.PCI0.SMBS.GE16)
                    {
                        \_SB.PCI0.SMBS.E16C = One
                        If (((\_SB.PCI0.SATA.VIDI == 0x43901002) || (\_SB.PCI0.SATA.VIDI == 0x43911002)))
                        {
                            Notify (\_SB.PCI0.AFD, 0x80) // Status Change
                        }

                        If ((\_SB.PCI0.SATA.VIDI == 0x43941002))
                        {
                            Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                        }

                        P80H = 0xDF14
                    }
                }

                TRIZ ()
            }
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        OPTS (Arg0)
        SPTS (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0x51
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            IO80 = 0x53
            \_SB.S80H (0x53)
            \_SB.PCI0.SMBS.SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            IO80 = 0x54
            \_SB.S80H (0x54)
            \_SB.PCI0.SMBS.SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            IO80 = 0x55
            \_SB.S80H (0x55)
            \_SB.GSMI (0x03)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        SSMP = 0xC4
        OWAK (Arg0)
        SWAK (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0xE1
            \_SB.S80H (0xE1)
            \_SB.PCI0.P2P.PR4B = 0xF1
        }

        If ((Arg0 == 0x03))
        {
            IO80 = 0xE3
            \_SB.S80H (0xE3)
            CHKH ()
        }

        If ((Arg0 == 0x04))
        {
            IO80 = 0xE4
            \_SB.S80H (0xE4)
            \_SB.PCI0._INI ()
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Return (Zero)
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC == Zero)) {}
                Else
                {
                    DSPI ()
                }

                OSTP ()
                CHKH ()
                If (CondRefOf (_OSI, Local0))
                {
                    MYOS = Zero
                }
                ElseIf ((SizeOf (_OS) == 0x14))
                {
                    MYOS = One
                }
                ElseIf ((SizeOf (_OS) == 0x27))
                {
                    MYOS = 0x02
                }
                Else
                {
                    MYOS = 0x03
                }
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            Mutex (NBMM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                MIDX = Local0
                Local0 = MIDR /* \_SB_.PCI0.MIDR */
                MIDX = 0x7F
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                Local0 |= 0x80
                MIDX = Local0
                MIDR = Arg1
                MIDX = Local0 &= 0x7F
                Release (NBMM)
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBXM, 0x00)
            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                Local0 = NBXD /* \_SB_.PCI0.NBXD */
                NBXI = Zero
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                NBXD = Arg1
                NBXI = Zero
                Release (NBXM)
            }

            Method (GFXM, 0, NotSerialized)
            {
                Local0 = NBMR (0x08)
                Local0 >>= 0x08
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPM, 0, NotSerialized)
            {
                Local0 = NBMR (0x67)
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPX, 0, NotSerialized)
            {
                Local0 = NBMR (0x2D)
                Local0 >>= 0x07
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If ((Arg0 < 0x02))
                {
                    Return (Zero)
                }

                If (((Arg0 > 0x0A) || (Arg0 == 0x08)))
                {
                    Return (Zero)
                }
                Else
                {
                    Local0 = GPPM ()
                    Local1 = GPPX ()
                    If ((Arg0 == 0x0A))
                    {
                        If (((Local0 == 0x03) && (Local1 == 0x03)))
                        {
                            Local0 = 0x20
                            Local2 = NBMR (0x2D)
                            If (Arg1)
                            {
                                Local2 &= ~Local0
                            }
                            Else
                            {
                                Local2 |= Local0
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x09))
                    {
                        If (((Local0 >= 0x02) && (Local1 >= 0x02)))
                        {
                            Local0 = 0x10
                            Local2 = NBMR (0x2D)
                            If (Arg1)
                            {
                                Local2 &= ~Local0
                            }
                            Else
                            {
                                Local2 |= Local0
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Local0 = One
                    If ((Arg0 < 0x04))
                    {
                        Local1 = (Arg0 + 0x02)
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x11)
                    }

                    Local0 <<= Local1
                    Local2 = NBMR (0x08)
                    If (Arg1)
                    {
                        Local2 &= ~Local0
                    }
                    Else
                    {
                        Local2 |= Local0
                    }

                    NBMW (0x08, Local2)
                    Return (Ones)
                }
            }

            Method (XPLP, 2, NotSerialized)
            {
            }

            Method (XPLL, 2, NotSerialized)
            {
            }

            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (AMHP, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)) {}
                        If ((CTRL & 0x04))
                        {
                            ^SMBS.EPNM = One
                            ^SMBS.DPPF = Zero
                        }
                        Else
                        {
                            ^SMBS.EPNM = Zero
                            ^SMBS.DPPF = One
                        }

                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x77000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFED3FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02D40000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x012BB000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                BTLN = (0xF8000000 - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        ML02 = 0x1000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Method (XCMP, 2, NotSerialized)
            {
                If ((0x10 != SizeOf (Arg0)))
                {
                    Return (Zero)
                }

                If ((0x10 != SizeOf (Arg1)))
                {
                    Return (Zero)
                }

                Local0 = Zero
                While ((Local0 < 0x10))
                {
                    If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                        )))
                    {
                        Return (Zero)
                    }

                    Local0++
                }

                Return (One)
            }

            Method (AFN0, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN0 ()
                }

                If ((PDDN == 0x04))
                {
                    ^PB4.VGA.AFN0 ()
                }
            }

            Method (AFN1, 1, Serialized)
            {
            }

            Method (AFN2, 2, Serialized)
            {
            }

            Method (AFN3, 2, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN3 (Arg0, Arg1)
                }

                If ((PDDN == 0x04))
                {
                    ^PB4.VGA.AFN3 (Arg0, Arg1)
                }
            }

            Method (AFN4, 1, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN4 (Arg0)
                }

                If ((PDDN == 0x04))
                {
                    ^PB4.VGA.AFN4 (Arg0)
                }
            }

            Method (AFN5, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN5 ()
                }

                If ((PDDN == 0x04))
                {
                    ^PB4.VGA.AFN5 ()
                }
            }

            Method (AFN6, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN6 ()
                }

                If ((PDDN == 0x04))
                {
                    ^PB4.VGA.AFN6 ()
                }
            }

            Name (PR00, Package (0x15)
            {
                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x15)
            {
                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.PCI0.AR00 */
                }

                Return (PR00) /* \_SB_.PCI0.PR00 */
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (PXEN, 0, NotSerialized)
                {
                    If (VGAM)
                    {
                        Return (0x80000001)
                    }
                    Else
                    {
                        Return (0x80000000)
                    }
                }

                Name (PXID, 0x00020000)
                Name (PXMX, 0x80000001)
                Name (LCDT, 0x80000000)
                Name (DSCT, 0x80000000)
                Method (PXFX, 0, NotSerialized)
                {
                    If (PXFM)
                    {
                        Return (0x80000001)
                    }
                    Else
                    {
                        Return (0x80000000)
                    }
                }

                Method (PXDY, 0, NotSerialized)
                {
                    If (PXDM)
                    {
                        Return (0x80000001)
                    }
                    Else
                    {
                        Return (0x80000000)
                    }
                }

                Name (AF7E, 0x80000001)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (DOSA, Zero)
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSA = Arg0
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Name (DODL, Package (0x03)
                    {
                        0x00010110, 
                        0x00010100, 
                        0x00010210
                    })
                    Return (DODL) /* \_SB_.PCI0.VGA_._DOD.DODL */
                }

                Name (CRTA, One)
                Name (LCDA, One)
                Name (HDTV, One)
                Device (LCD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (LCDA)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (LCDA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }

                    Name (BRTL, Zero)
                    Name (BRLV, Package (0x0D)
                    {
                        0x64, 
                        0x32, 
                        Zero, 
                        0x0A, 
                        0x14, 
                        0x1E, 
                        0x28, 
                        0x32, 
                        0x3C, 
                        0x46, 
                        0x50, 
                        0x5A, 
                        0x64
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (BRLV) /* \_SB_.PCI0.VGA_.LCD_.BRLV */
                    }

                    Name (DFBL, Zero)
                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        DFBL = One
                        BRTL = Arg0
                        Local0 = (Arg0 / 0x0A)
                        ^^^LPC0.EC0.LPWN = BGTB (PBCM, (Local0 << One))
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        If (((^^^LPC0.EC0.QWKY == One) & (DFBL == Zero)))
                        {
                            If (^^^LPC0.EC0.ADIN)
                            {
                                Return (0x64)
                            }
                            Else
                            {
                                Return (0x32)
                            }
                        }

                        P80H = 0xB1
                        Return (BRTL) /* \_SB_.PCI0.VGA_.LCD_.BRTL */
                    }
                }

                Device (CRT)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CRTA)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CRTA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Device (HDMI)
                {
                    Name (_ADR, 0x0210)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (HDTV)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (HDTV)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Name (ATIB, Buffer (0x0100) {})
                Method (ATIF, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Return (AF00 ())
                    }

                    If ((Arg0 == One))
                    {
                        Return (AF01 ())
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (AF02 ())
                    }

                    If ((Arg0 == 0x03))
                    {
                        Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Return (AF15 ())
                    }
                    Else
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        NMSK = Zero
                        SFUN = Zero
                        Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                    }
                }

                Method (AF00, 0, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = 0x0C
                    VERN = One
                    If ((PXEN () == 0x80000000))
                    {
                        If (^^LPC0.EC0.QWKY)
                        {
                            NMSK = One
                        }
                        Else
                        {
                            NMSK = 0x11
                        }
                    }
                    Else
                    {
                        NMSK = 0x51
                    }

                    If ((AF7E == 0x80000001))
                    {
                        NMSK |= 0x80
                    }

                    MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                    SFUN = 0x4007
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (NCOD, 0x81)
                Method (AF01, 0, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateDWordField (ATIB, 0x02, VMSK)
                    CreateDWordField (ATIB, 0x06, FLGS)
                    VMSK = 0x0B
                    SSZE = 0x0A
                    VMSK = 0x03
                    FLGS = One
                    NCOD = 0x81
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (PSBR, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                Name (MSKN, Zero)
                Name (SEXM, Zero)
                Name (STHG, Zero)
                Name (STHI, Zero)
                Name (SFPG, Zero)
                Name (SFPI, Zero)
                Name (SSPS, Zero)
                Name (SSDM, 0x0A)
                Name (SCDY, Zero)
                Name (SACT, Buffer (0x07)
                {
                     0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         // .......
                })
                Method (AF02, 0, NotSerialized)
                {
                    CreateBitField (PSBR, Zero, PDSW)
                    CreateBitField (PSBR, One, PEXM)
                    CreateBitField (PSBR, 0x02, PTHR)
                    CreateBitField (PSBR, 0x03, PFPS)
                    CreateBitField (PSBR, 0x04, PSPS)
                    CreateBitField (PSBR, 0x05, PDCC)
                    CreateBitField (PSBR, 0x06, PXPS)
                    CreateBitField (PSBR, 0x07, PBRT)
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateDWordField (ATIB, 0x02, PSBI)
                    CreateByteField (ATIB, 0x06, EXPM)
                    CreateByteField (ATIB, 0x07, THRM)
                    CreateByteField (ATIB, 0x08, THID)
                    CreateByteField (ATIB, 0x09, FPWR)
                    CreateByteField (ATIB, 0x0A, FPID)
                    CreateByteField (ATIB, 0x0B, SPWR)
                    CreateByteField (ATIB, 0x0C, BRTL)
                    SSZE = 0x0D
                    PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                    If (PDSW)
                    {
                        PDSW = Zero
                    }

                    If (PEXM)
                    {
                        EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                        SEXM = Zero
                        PEXM = Zero
                    }

                    If (PTHR)
                    {
                        THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                        THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                        STHG = Zero
                        STHI = Zero
                        PTHR = Zero
                    }

                    If (PFPS)
                    {
                        FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                        FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                        SFPG = Zero
                        SFPI = Zero
                        PFPS = Zero
                    }

                    If (PSPS)
                    {
                        SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        PSPS = Zero
                    }

                    If (PXPS)
                    {
                        PXPS = Zero
                    }

                    If (PBRT)
                    {
                        PBRT = Zero
                    }

                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF03, 2, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, SSDP)
                    CreateWordField (ATIB, 0x04, SCDP)
                    SSDP = Arg0
                    SCDP = Arg1
                    Name (NXTD, 0x06)
                    Name (CIDX, 0x06)
                    Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Local1 &= 0x8B
                    Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                    If (CondRefOf (\_SB.LID._LID, Local4))
                    {
                        Local2 &= 0xFFFFFFFE
                        Local2 |= ^^^LID._LID ()
                    }
                    Else
                    {
                        Local2 |= One
                    }

                    P80H = Local2
                    Local0 = Zero
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local3 = DerefOf (SACT [Local0])
                        If ((Local3 == Local1))
                        {
                            CIDX = Local0
                            Local0 = SizeOf (SACT)
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local0++
                        If ((Local0 == SizeOf (SACT)))
                        {
                            Local0 = Zero
                        }

                        Local3 = DerefOf (SACT [Local0])
                        If (((Local3 & Local2) == Local3))
                        {
                            NXTD = Local0
                            Local0 = SizeOf (SACT)
                        }
                    }

                    If ((NXTD == SizeOf (SACT)))
                    {
                        SSDP = Zero
                    }
                    Else
                    {
                        Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                        Local3 = DerefOf (SACT [Local0])
                        SSDP &= 0xFFFFFF74
                        SSDP |= Local3
                    }

                    SSZE = 0x04
                    P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AFN0, 0, Serialized)
                {
                    If ((MSKN & One))
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        PDSW = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN3, 2, Serialized)
                {
                    If ((MSKN & 0x08))
                    {
                        Local0 = Arg0
                        SFPI = Local0
                        Local0 = Arg1
                        SFPG = Local0 &= 0x03
                        CreateBitField (PSBR, 0x03, PFPS)
                        PFPS = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN4, 1, Serialized)
                {
                    If ((MSKN & 0x10))
                    {
                        Local0 = Arg0
                        Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        SSPS = Local0
                        If ((Local0 == Local1)) {}
                        Else
                        {
                            CreateBitField (PSBR, 0x04, PSPS)
                            PSPS = One
                            Notify (VGA, NCOD)
                        }
                    }
                }

                Method (AFN5, 0, Serialized)
                {
                    If ((MSKN & 0x20))
                    {
                        CreateBitField (PSBR, 0x05, PDCC)
                        PDCC = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN6, 0, Serialized)
                {
                    If ((MSKN & 0x40))
                    {
                        CreateBitField (PSBR, 0x06, PXPS)
                        PXPS = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN7, 1, Serialized)
                {
                    If ((MSKN & 0x80))
                    {
                        CreateBitField (PSBR, 0x07, PBRT)
                        PBRT = One
                        CreateByteField (ATIB, 0x0C, BRTL)
                        BRTL = Arg0
                        Notify (VGA, NCOD)
                    }
                }

                Method (AF15, 0, NotSerialized)
                {
                    P80H = 0xFF
                    CreateWordField (ATIB, Zero, DNUM)
                    CreateWordField (ATIB, 0x02, DSZE)
                    DSZE = 0x08
                    Acquire (^^LPC0.PSMX, 0xFFFF)
                    BCMD = 0x8D
                    DID = 0x0F
                    INFO = ATIB /* \_SB_.PCI0.VGA_.ATIB */
                    BSMI (Zero)
                    ATIB = INFO /* \INFO */
                    Release (^^LPC0.PSMX)
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Scope (\_SB.PCI0.VGA)
                {
                    OperationRegion (REVD, SystemMemory, 0xDFEBED18, 0x00000008)
                    Field (REVD, AnyAcc, NoLock, Preserve)
                    {
                        SROM,   32, 
                        VROM,   32
                    }

                    Name (TVGA, Buffer (0x0004)
                    {
                         0x00                                             // .
                    })
                    Method (XTRM, 2, Serialized)
                    {
                        Local0 = (Arg0 + Arg1)
                        If ((Local0 <= SROM))
                        {
                            Local1 = (Arg1 * 0x08)
                            Local2 = (Arg0 * 0x08)
                            TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                            CreateField (TVGA, Local2, Local1, TEMP)
                            Name (RETB, Buffer (Arg1) {})
                            RETB = TEMP /* \_SB_.PCI0.VGA_.XTRM.TEMP */
                            Return (RETB) /* \_SB_.PCI0.VGA_.XTRM.RETB */
                        }
                        ElseIf ((Arg0 < SROM))
                        {
                            Local3 = (SROM - Arg0)
                            Local1 = (Local3 * 0x08)
                            Local2 = (Arg0 * 0x08)
                            TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                            CreateField (TVGA, Local2, Local1, TEM)
                            Name (RETC, Buffer (Local3) {})
                            RETC = TEM /* \_SB_.PCI0.VGA_.XTRM.TEM_ */
                            Return (RETC) /* \_SB_.PCI0.VGA_.XTRM.RETC */
                        }
                        Else
                        {
                            Name (RETD, Buffer (One) {})
                            Return (RETD) /* \_SB_.PCI0.VGA_.XTRM.RETD */
                        }
                    }
                }

                Scope (\_SB.PCI0.VGA)
                {
                    Name (ATPB, Buffer (0x0100) {})
                    Name (DSID, Ones)
                    Name (HSID, Ones)
                    Name (CNT0, Buffer (0x05)
                    {
                         0x05, 0x00, 0x00, 0x10, 0x01                     // .....
                    })
                    Name (CNT1, Buffer (0x05)
                    {
                         0x05, 0x01, 0x00, 0x00, 0x01                     // .....
                    })
                    Name (CNT2, Buffer (0x05)
                    {
                         0x07, 0x03, 0x00, 0x10, 0x02                     // .....
                    })
                    Name (CNT3, Buffer (0x05)
                    {
                         0x07, 0x07, 0x00, 0x20, 0x02                     // ... .
                    })
                    Name (CNT4, Buffer (0x05)
                    {
                         0x00, 0x09, 0x00, 0x30, 0x02                     // ...0.
                    })
                    Name (CNT5, Buffer (0x05)
                    {
                         0x05, 0x00, 0x01, 0x10, 0x01                     // .....
                    })
                    Name (CNT6, Buffer (0x05)
                    {
                         0x05, 0x01, 0x01, 0x00, 0x01                     // .....
                    })
                    Name (CNT7, Buffer (0x05)
                    {
                         0x07, 0x03, 0x01, 0x10, 0x02                     // .....
                    })
                    Name (CNT8, Buffer (0x05)
                    {
                         0x07, 0x07, 0x01, 0x20, 0x02                     // ... .
                    })
                    Name (CNT9, Buffer (0x05)
                    {
                         0x00, 0x09, 0x01, 0x30, 0x02                     // ...0.
                    })
                    Method (ATPX, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (PX00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (PX01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            PX02 (DerefOf (Arg1 [0x02]))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x03))
                        {
                            PX03 (DerefOf (Arg1 [0x02]))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x04))
                        {
                            PX04 (DerefOf (Arg1 [0x02]))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x08))
                        {
                            Return (PX08 ())
                        }

                        If ((Arg0 == 0x09))
                        {
                            Return (PX09 ())
                        }

                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, VERN)
                        CreateDWordField (ATPB, 0x04, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        SFUN = Zero
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX00, 0, NotSerialized)
                    {
                        P80H = 0xE0
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, VERN)
                        CreateDWordField (ATPB, 0x04, SFUN)
                        SSZE = 0x08
                        VERN = One
                        If ((PXEN () == 0x80000000))
                        {
                            SFUN = Zero
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((PXMX == 0x80000000))
                        {
                            SFUN = 0x018F
                        }
                        Else
                        {
                            SFUN = 0x0183
                        }

                        If ((PXDY () == 0x80000001))
                        {
                            SFUN &= 0xFFFFFFFD
                        }

                        If (((PXDY () == 0x80000001) && (PXFX () == 0x80000001)))
                        {
                            SFUN |= 0x02
                        }

                        Local0 = ^^PB4.VGA.SVID /* \_SB_.PCI0.PB4_.VGA_.SVID */
                        Local1 = ^^PB4.HDAU.SVID /* \_SB_.PCI0.PB4_.HDAU.SVID */
                        If ((Local0 != Ones))
                        {
                            DSID = Local0
                        }

                        If ((Local1 != Ones))
                        {
                            HSID = Local1
                        }

                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX01, 0, NotSerialized)
                    {
                        P80H = 0xE1
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateDWordField (ATPB, 0x02, VMSK)
                        CreateDWordField (ATPB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = 0xFF
                        If ((PXMX == 0x80000000))
                        {
                            FLGS = 0x4B
                        }
                        Else
                        {
                            FLGS = Zero
                            If ((PXDY () == 0x80000001))
                            {
                                FLGS |= 0x80
                            }
                        }

                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX02, 1, NotSerialized)
                    {
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateByteField (ATPB, 0x02, PWST)
                        SSZE = 0x03
                        Local7 = Buffer (0x05) {}
                        CreateWordField (Local7, Zero, SZZE)
                        CreateField (Local7, 0x10, 0x03, FUCC)
                        CreateField (Local7, 0x13, 0x05, DEVV)
                        CreateByteField (Local7, 0x03, BUSS)
                        CreateByteField (Local7, 0x04, HPST)
                        SZZE = 0x05
                        BUSS = Zero
                        FUCC = Zero
                        Local6 = Buffer (0x04) {}
                        CreateByteField (Local6, 0x02, HPOX)
                        PWST = (Arg0 & One)
                        Name (HPOK, Zero)
                        If (PWST)
                        {
                            P80H = 0x11E2
                            ^^SMBS.G21O = Zero
                            ^^SMBS.G21E = Zero
                            ^^SMBS.G45O = Zero
                            ^^SMBS.G45E = Zero
                            Sleep (0x14)
                            ^^SMBS.G45O = One
                            ^^SMBS.G45E = Zero
                            Sleep (0x1E)
                            ^^SMBS.G21O = One
                            ^^SMBS.G21E = Zero
                            P80H = 0x12E2
                            HPOK = Zero
                            Sleep (0x64)
                            Sleep (0x64)
                            DEVV = 0x04
                            HPST = One
                            0x06 = ALIB /* External reference */
                            Local7
                            Local6
                            Sleep (0x14)
                            Local2 = Zero
                            While ((Local2 < 0x0F))
                            {
                                ^^PB4.PSDC = One
                                Local4 = One
                                Local5 = 0xC8
                                While ((Local4 && Local5))
                                {
                                    Local0 = ^^PB4.XPRD (0xA5)
                                    Local0 &= 0x7F
                                    If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                If (!Local4)
                                {
                                    Local5 = ^^PB4.XPDL ()
                                    If (Local5)
                                    {
                                        ^^PB4.XPRT ()
                                        Sleep (0x05)
                                        Local2++
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        If ((^^PB4.XPR2 () == Ones))
                                        {
                                            Local0 = One
                                        }

                                        If (Local0)
                                        {
                                            HPOK = One
                                            Local2 = 0x10
                                        }
                                        Else
                                        {
                                            HPOK = Zero
                                            Local2 = 0x10
                                        }
                                    }
                                }
                                Else
                                {
                                    Local2 = 0x10
                                }
                            }

                            If (!HPOK)
                            {
                                P80H = 0x13E2
                                Local1 = ^^PB4.VGA.DVID /* \_SB_.PCI0.PB4_.VGA_.DVID */
                                Sleep (0x0A)
                                Local4 = One
                                Local5 = 0x05
                                While ((Local4 && Local5))
                                {
                                    Local0 = ^^PB4.XPRD (0xA5)
                                    Local0 &= 0x7F
                                    If ((Local0 <= 0x04))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = ^^PB4.VGA.DVID /* \_SB_.PCI0.PB4_.VGA_.DVID */
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                DEVV = 0x04
                                HPST = Zero
                                ALIB
                                0x06
                                Local7
                            }

                            P80H = 0x14E2
                        }
                        Else
                        {
                            P80H = 0x02E2
                            MUXF = 0x20
                            Sleep (0x14)
                            ^^SMBS.G45O = Zero
                            ^^SMBS.G45E = Zero
                            P80H = 0x03E2
                            ^^PB4.PSDC = One
                            Local1 = ^^PB4.VGA.DVID /* \_SB_.PCI0.PB4_.VGA_.DVID */
                            Sleep (0x14)
                            Local4 = One
                            Local5 = 0x05
                            While ((Local4 && Local5))
                            {
                                Local0 = ^^PB4.XPRD (0xA5)
                                Local0 &= 0x7F
                                If ((Local0 <= 0x04))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Local1 = ^^PB4.VGA.DVID /* \_SB_.PCI0.PB4_.VGA_.DVID */
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            DEVV = 0x04
                            HPST = Zero
                            ALIB
                            0x06
                            Local7
                            HPOK = 0x02
                            P80H = 0x04E2
                        }

                        If (HPOK)
                        {
                            If (((HPOK == One) && (DSID != Ones)))
                            {
                                Local1 = DSID /* \_SB_.PCI0.VGA_.DSID */
                                ^^PB4.VGA.SMID = Local1
                                Sleep (0x0A)
                                Local1 = HSID /* \_SB_.PCI0.VGA_.HSID */
                                If ((Local1 != Ones))
                                {
                                    ^^PB4.HDAU.SMID = Local1
                                }

                                Sleep (0x0A)
                            }

                            Notify (PB4, Zero) // Bus Check
                        }
                    }

                    Method (PX03, 1, NotSerialized)
                    {
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, DPSW)
                        SSZE = 0x04
                        DPSW = (Arg0 & One)
                        If (DPSW)
                        {
                            P80H = 0x02E3
                        }
                        Else
                        {
                            P80H = 0x01E3
                        }
                    }

                    Method (PX04, 1, NotSerialized)
                    {
                        P80H = 0xE4
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, ICSW)
                        SSZE = 0x04
                        ICSW = (Arg0 & One)
                        If (ICSW)
                        {
                            P80H = 0x02E4
                        }
                        Else
                        {
                            P80H = 0x01E4
                        }
                    }

                    Method (PX08, 0, NotSerialized)
                    {
                        P80H = 0xE8
                        CreateWordField (ATPB, Zero, CNUM)
                        CreateWordField (ATPB, 0x02, CSSZ)
                        CNUM = 0x0A
                        CSSZ = 0x05
                        CreateField (ATPB, 0x20, 0x28, CTI0)
                        CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
                        CreateField (ATPB, 0x48, 0x28, CTI1)
                        CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
                        CreateField (ATPB, 0x70, 0x28, CTI2)
                        CreateByteField (CNT2, Zero, FLG2)
                        If ((LCDT == 0x80000001))
                        {
                            If ((DSCT == 0x80000001))
                            {
                                FLG2 = Zero
                            }

                            If ((DSCT == 0x80000002))
                            {
                                FLG2 = 0x07
                            }
                        }

                        CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
                        CreateField (ATPB, 0x98, 0x28, CTI3)
                        CreateByteField (CNT3, Zero, FLG3)
                        If ((LCDT == 0x80000000))
                        {
                            FLG3 = 0x07
                        }

                        If ((LCDT == 0x80000001))
                        {
                            FLG3 = Zero
                            If ((DSCT == 0x80000002))
                            {
                                FLG3 = Zero
                            }
                        }

                        If ((LCDT == 0x80000002))
                        {
                            FLG3 = Zero
                            If ((DSCT == 0x80000002))
                            {
                                FLG3 = 0x07
                            }
                        }

                        CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
                        CreateField (ATPB, 0xC0, 0x28, CTI4)
                        CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
                        CreateField (ATPB, 0xE8, 0x28, CTI5)
                        CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
                        CreateField (ATPB, 0x0110, 0x28, CTI6)
                        CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
                        CreateField (ATPB, 0x0138, 0x28, CTI7)
                        CreateByteField (CNT7, Zero, FLG7)
                        If ((LCDT == 0x80000001))
                        {
                            If ((DSCT == 0x80000001))
                            {
                                FLG7 = Zero
                            }

                            If ((DSCT == 0x80000002))
                            {
                                FLG7 = 0x07
                            }
                        }

                        CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
                        CreateField (ATPB, 0x0160, 0x28, CTI8)
                        CreateByteField (CNT8, Zero, FLG8)
                        If ((LCDT == 0x80000000))
                        {
                            FLG8 = 0x07
                        }

                        If ((LCDT == 0x80000001))
                        {
                            FLG8 = Zero
                        }

                        If ((LCDT == 0x80000002))
                        {
                            FLG8 = Zero
                        }

                        If ((DSCT == 0x80000002))
                        {
                            FLG8 = 0x07
                        }

                        CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
                        CreateField (ATPB, 0x0188, 0x28, CTI9)
                        CreateByteField (CNT9, Zero, FLG9)
                        If ((DSCT == 0x80000002))
                        {
                            FLG9 = 0x07
                        }

                        CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX09, 0, NotSerialized)
                    {
                        P80H = 0xE9
                        CreateWordField (ATPB, Zero, CNUM)
                        CreateWordField (ATPB, 0x02, CSSZ)
                        CNUM = Zero
                        CSSZ = Zero
                        CreateByteField (ATPB, 0x04, ATI0)
                        CreateByteField (ATPB, 0x05, HPD0)
                        CreateByteField (ATPB, 0x06, DDC0)
                        ATI0 = Zero
                        HPD0 = Zero
                        DDC0 = Zero
                        CreateByteField (ATPB, 0x07, ATI1)
                        CreateByteField (ATPB, 0x08, HPD1)
                        CreateByteField (ATPB, 0x09, DDC1)
                        ATI1 = Zero
                        HPD1 = Zero
                        DDC1 = Zero
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }
                }

                Scope (\_SB.PCI0.VGA)
                {
                    Name (AT00, Buffer (0xFF) {})
                    Name (AT01, Buffer (0x03) {})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            ACT0 ()
                        }

                        If ((Arg0 == One))
                        {
                            ACT1 ()
                        }

                        If ((Arg0 == 0x02))
                        {
                            ACT2 (Arg1)
                        }

                        If ((Arg0 == 0x03))
                        {
                            ACT3 ()
                        }

                        If ((Arg0 == 0x04))
                        {
                            ACT4 (Arg1)
                        }

                        Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
                    }

                    Method (ACT0, 0, NotSerialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateWordField (AT00, 0x02, INTF)
                        CreateDWordField (AT00, 0x04, SUPP)
                        SZZE = 0x08
                        INTF = One
                        SUPP = 0x0F
                    }

                    Method (ACT1, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateDWordField (AT00, 0x02, VFMK)
                        CreateDWordField (AT00, 0x06, FLAG)
                        CreateField (AT00, 0x30, One, DOCK)
                        SZZE = 0x0A
                        VFMK = One
                        FLAG = Zero
                        DOCK = One
                    }

                    Method (ACT2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, One, ADVC)
                        CreateField (Arg0, 0x31, One, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        SZZE = 0x03
                        RETV = One
                        0x02 = ALIB /* External reference */
                        Arg0
                        AT00
                    }

                    Method (ACT3, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        CreateWordField (AT01, Zero, SZZB)
                        CreateByteField (AT01, 0x02, PSSP)
                        SZZE = 0x03
                        RETV = One
                        SZZB = 0x03
                        PSSP = One
                        0x03 = ALIB /* External reference */
                        AT01
                        AT00
                    }

                    Method (ACT4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, NULM)
                        SZZE = 0x03
                        NULM = One
                        0x04 = ALIB /* External reference */
                        Arg0
                        AT00
                    }
                }
            }

            Device (PB2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKB, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (PB3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKC, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (PB4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.PCI0.PB4_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PCI0.PB4_.PR04 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB4_.XPID */
                    XPIR = Zero
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB4_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = Zero
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = Zero
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = GPPX ()
                    Local3 = GFXM ()
                    Local1 = Zero
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = Zero
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = Zero
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((Zero != Local1))
                    {
                        Local2 = NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB4_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB4_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = GFXM ()
                    Local1 = XPPB ()
                    Local2 = Zero
                    If ((0x10 == Local1))
                    {
                        Local2 = One
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = One
                        Local3 = 0x00440040
                    }

                    Local0 = NBMR (0x07)
                    Local1 = NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = Zero
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = Zero
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (One)
                        XPLP (One)
                        Sleep (0xC8)
                        XPTR ((XPPB () << 0x03), One)
                        Sleep (0x14)
                    }
                    Else
                    {
                        XPTR ((XPPB () << 0x03), Zero)
                        XPLP (Zero)
                        XPLL (Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (DODL, Package (0x03)
                        {
                            0x00010110, 
                            0x00010100, 
                            0x00010210
                        })
                        Return (DODL) /* \_SB_.PCI0.PB4_.VGA_._DOD.DODL */
                    }

                    Name (CRTA, One)
                    Name (LCDA, One)
                    Name (HDTV, One)
                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (LCDA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (LCDA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }

                        Name (BRTL, Zero)
                        Name (BRLV, Package (0x0D)
                        {
                            0x64, 
                            0x32, 
                            Zero, 
                            0x0A, 
                            0x14, 
                            0x1E, 
                            0x28, 
                            0x32, 
                            0x3C, 
                            0x46, 
                            0x50, 
                            0x5A, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BRLV) /* \_SB_.PCI0.PB4_.VGA_.LCD_.BRLV */
                        }

                        Name (DFBL, Zero)
                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            DFBL = One
                            BRTL = Arg0
                            Local0 = (Arg0 / 0x0A)
                            ^^^^LPC0.EC0.LPWN = BGTB (PBCM, (Local0 << One))
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            If (((^^^^LPC0.EC0.QWKY == One) & (DFBL == Zero)))
                            {
                                If (^^^^LPC0.EC0.ADIN)
                                {
                                    Return (0x64)
                                }
                                Else
                                {
                                    Return (0x32)
                                }
                            }

                            P80H = 0xB1
                            Return (BRTL) /* \_SB_.PCI0.PB4_.VGA_.LCD_.BRTL */
                        }
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0210)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }
                    }

                    Name (ATIB, Buffer (0x0100) {})
                    Method (ATIF, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (AF00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (AF01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (AF02 ())
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                        }

                        If ((Arg0 == 0x0F))
                        {
                            Return (AF15 ())
                        }
                        Else
                        {
                            CreateWordField (ATIB, Zero, SSZE)
                            CreateWordField (ATIB, 0x02, VERN)
                            CreateDWordField (ATIB, 0x04, NMSK)
                            CreateDWordField (ATIB, 0x08, SFUN)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            SFUN = Zero
                            Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                        }
                    }

                    Method (AF00, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        If ((^^^VGA.PXEN () == 0x80000000))
                        {
                            If (^^^LPC0.EC0.QWKY)
                            {
                                NMSK = One
                            }
                            Else
                            {
                                NMSK = 0x11
                            }
                        }
                        Else
                        {
                            NMSK = 0x51
                        }

                        If ((^^^VGA.AF7E == 0x80000001))
                        {
                            NMSK |= 0x80
                        }

                        MSKN = NMSK /* \_SB_.PCI0.PB4_.VGA_.AF00.NMSK */
                        SFUN = 0x4007
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Name (NCOD, 0x81)
                    Method (AF01, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, VMSK)
                        CreateDWordField (ATIB, 0x06, FLGS)
                        VMSK = 0x0B
                        SSZE = 0x0A
                        VMSK = 0x03
                        FLGS = One
                        NCOD = 0x81
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Name (PSBR, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (MSKN, Zero)
                    Name (SEXM, Zero)
                    Name (STHG, Zero)
                    Name (STHI, Zero)
                    Name (SFPG, Zero)
                    Name (SFPI, Zero)
                    Name (SSPS, Zero)
                    Name (SSDM, 0x0A)
                    Name (SCDY, Zero)
                    Name (SACT, Buffer (0x07)
                    {
                         0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         // .......
                    })
                    Method (AF02, 0, NotSerialized)
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        CreateBitField (PSBR, One, PEXM)
                        CreateBitField (PSBR, 0x02, PTHR)
                        CreateBitField (PSBR, 0x03, PFPS)
                        CreateBitField (PSBR, 0x04, PSPS)
                        CreateBitField (PSBR, 0x05, PDCC)
                        CreateBitField (PSBR, 0x06, PXPS)
                        CreateBitField (PSBR, 0x07, PBRT)
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, PSBI)
                        CreateByteField (ATIB, 0x06, EXPM)
                        CreateByteField (ATIB, 0x07, THRM)
                        CreateByteField (ATIB, 0x08, THID)
                        CreateByteField (ATIB, 0x09, FPWR)
                        CreateByteField (ATIB, 0x0A, FPID)
                        CreateByteField (ATIB, 0x0B, SPWR)
                        CreateByteField (ATIB, 0x0C, BRTL)
                        SSZE = 0x0D
                        PSBI = PSBR /* \_SB_.PCI0.PB4_.VGA_.PSBR */
                        If (PDSW)
                        {
                            PDSW = Zero
                        }

                        If (PEXM)
                        {
                            EXPM = SEXM /* \_SB_.PCI0.PB4_.VGA_.SEXM */
                            SEXM = Zero
                            PEXM = Zero
                        }

                        If (PTHR)
                        {
                            THRM = STHG /* \_SB_.PCI0.PB4_.VGA_.STHG */
                            THID = STHI /* \_SB_.PCI0.PB4_.VGA_.STHI */
                            STHG = Zero
                            STHI = Zero
                            PTHR = Zero
                        }

                        If (PFPS)
                        {
                            FPWR = SFPG /* \_SB_.PCI0.PB4_.VGA_.SFPG */
                            FPWR = SFPI /* \_SB_.PCI0.PB4_.VGA_.SFPI */
                            SFPG = Zero
                            SFPI = Zero
                            PFPS = Zero
                        }

                        If (PSPS)
                        {
                            SPWR = SSPS /* \_SB_.PCI0.PB4_.VGA_.SSPS */
                            PSPS = Zero
                        }

                        If (PXPS)
                        {
                            PXPS = Zero
                        }

                        If (PBRT)
                        {
                            PBRT = Zero
                        }

                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Method (AF03, 2, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, SSDP)
                        CreateWordField (ATIB, 0x04, SCDP)
                        SSDP = Arg0
                        SCDP = Arg1
                        Name (NXTD, 0x06)
                        Name (CIDX, 0x06)
                        Local1 = SSDP /* \_SB_.PCI0.PB4_.VGA_.AF03.SSDP */
                        Local1 &= 0x8B
                        Local2 = SCDP /* \_SB_.PCI0.PB4_.VGA_.AF03.SCDP */
                        If (CondRefOf (\_SB.LID._LID, Local4))
                        {
                            Local2 &= 0xFFFFFFFE
                            Local2 |= ^^^^LID._LID ()
                        }
                        Else
                        {
                            Local2 |= One
                        }

                        P80H = Local2
                        Local0 = Zero
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local3 = DerefOf (SACT [Local0])
                            If ((Local3 == Local1))
                            {
                                CIDX = Local0
                                Local0 = SizeOf (SACT)
                            }
                            Else
                            {
                                Local0++
                            }
                        }

                        Local0 = CIDX /* \_SB_.PCI0.PB4_.VGA_.AF03.CIDX */
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local0++
                            If ((Local0 == SizeOf (SACT)))
                            {
                                Local0 = Zero
                            }

                            Local3 = DerefOf (SACT [Local0])
                            If (((Local3 & Local2) == Local3))
                            {
                                NXTD = Local0
                                Local0 = SizeOf (SACT)
                            }
                        }

                        If ((NXTD == SizeOf (SACT)))
                        {
                            SSDP = Zero
                        }
                        Else
                        {
                            Local0 = NXTD /* \_SB_.PCI0.PB4_.VGA_.AF03.NXTD */
                            Local3 = DerefOf (SACT [Local0])
                            SSDP &= 0xFFFFFF74
                            SSDP |= Local3
                        }

                        SSZE = 0x04
                        P80H = SSDP /* \_SB_.PCI0.PB4_.VGA_.AF03.SSDP */
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        If ((MSKN & One))
                        {
                            CreateBitField (PSBR, Zero, PDSW)
                            PDSW = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN3, 2, Serialized)
                    {
                        If ((MSKN & 0x08))
                        {
                            Local0 = Arg0
                            SFPI = Local0
                            Local0 = Arg1
                            SFPG = Local0 &= 0x03
                            CreateBitField (PSBR, 0x03, PFPS)
                            PFPS = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN4, 1, Serialized)
                    {
                        If ((MSKN & 0x10))
                        {
                            Local0 = Arg0
                            Local1 = SSPS /* \_SB_.PCI0.PB4_.VGA_.SSPS */
                            SSPS = Local0
                            If ((Local0 == Local1)) {}
                            Else
                            {
                                CreateBitField (PSBR, 0x04, PSPS)
                                PSPS = One
                                Notify (VGA, NCOD)
                            }
                        }
                    }

                    Method (AFN5, 0, Serialized)
                    {
                        If ((MSKN & 0x20))
                        {
                            CreateBitField (PSBR, 0x05, PDCC)
                            PDCC = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN6, 0, Serialized)
                    {
                        If ((MSKN & 0x40))
                        {
                            CreateBitField (PSBR, 0x06, PXPS)
                            PXPS = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN7, 1, Serialized)
                    {
                        If ((MSKN & 0x80))
                        {
                            CreateBitField (PSBR, 0x07, PBRT)
                            PBRT = One
                            CreateByteField (ATIB, 0x0C, BRTL)
                            BRTL = Arg0
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AF15, 0, NotSerialized)
                    {
                        P80H = 0xFF
                        CreateWordField (ATIB, Zero, DNUM)
                        CreateWordField (ATIB, 0x02, DSZE)
                        DSZE = 0x08
                        Acquire (^^^LPC0.PSMX, 0xFFFF)
                        BCMD = 0x8D
                        DID = 0x0F
                        INFO = ATIB /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                        BSMI (Zero)
                        ATIB = INFO /* \INFO */
                        Release (^^^LPC0.PSMX)
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((^^^VGA.PXMX != 0x80000000))
                        {
                            Return (Zero)
                        }
                        ElseIf ((0x18 == XPPB ()))
                        {
                            If ((^^^VGA.PXEN () != 0x80000000))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((^^^VGA.PXMX != 0x80000000))
                        {
                            Return (Zero)
                        }
                        ElseIf ((0x18 == XPPB ()))
                        {
                            If ((^^^VGA.PXEN () != 0x80000000))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
            }

            Device (PB5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (PR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (AR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.PCI0.PB5_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PCI0.PB5_.PR05 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF9028100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB5_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB5_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB5_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB5_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (PB6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.PCI0.PB6_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PCI0.PB6_.PR06 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF9030100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB6_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB6_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB6_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB6_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (PB7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (PR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        Zero
                    }
                })
                Name (AR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.PCI0.PB7_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PCI0.PB7_.PR07 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF9038100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB7_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB7_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB7_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB7_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Name (PR0A, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR0A, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.PCI0.SPB0.AR0A */
                    }

                    Return (PR0A) /* \_SB_.PCI0.SPB0.PR0A */
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0xFF)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0xDC), 
                        DISF,   32
                    }
                }

                Method (GHPS, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == Zero))
                    {
                        GEN2 ()
                        Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                        Local0 &= 0xFF
                        Local1 = 0x01F4
                        While (((Local1 > Zero) && (Local0 != 0x10)))
                        {
                            Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                            Local0 &= 0xFF
                            Local1--
                            Stall (0xC8)
                            Stall (0xC8)
                        }

                        If ((Local0 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TLS2 = 0x02
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TLS2 = One
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }
            }

            Device (SPB1)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x04
                })
                OperationRegion (PCFG, PCI_Config, Zero, 0x80)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32, 
                    Offset (0x78), 
                    WKST,   32
                }

                Name (PR0B, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }
                })
                Name (AR0B, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.PCI0.SPB1.AR0B */
                    }

                    Return (PR0B) /* \_SB_.PCI0.SPB1.PR0B */
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }

                Method (GHPS, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == Zero))
                    {
                        GEN2 ()
                        Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                        Local0 &= 0xFF
                        Local1 = 0x01F4
                        While (((Local1 > Zero) && (Local0 != 0x10)))
                        {
                            Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                            Local0 &= 0xFF
                            Local1--
                            Stall (0xC8)
                            Stall (0xC8)
                        }

                        If ((Local0 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TLS2 = 0x02
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TLS2 = One
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }
            }

            Device (SPB2)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Name (PR0C, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR0C, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.PCI0.SPB2.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PCI0.SPB2.PR0C */
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }

                Method (GHPS, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == Zero))
                    {
                        GEN2 ()
                        Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                        Local0 &= 0xFF
                        Local1 = 0x01F4
                        While (((Local1 > Zero) && (Local0 != 0x10)))
                        {
                            Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                            Local0 &= 0xFF
                            Local1--
                            Stall (0xC8)
                            Stall (0xC8)
                        }

                        If ((Local0 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TLS2 = 0x02
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TLS2 = One
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }
            }

            Device (SPB3)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Name (PR0D, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKG, 
                        Zero
                    }
                })
                Name (AR0D, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x16
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.PCI0.SPB3.AR0D */
                    }

                    Return (PR0D) /* \_SB_.PCI0.SPB3.PR0D */
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }

                Method (GHPS, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Arg1 == 0x02))
                        {
                            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == Zero))
                    {
                        GEN2 ()
                        Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                        Local0 &= 0xFF
                        Local1 = 0x01F4
                        While (((Local1 > Zero) && (Local0 != 0x10)))
                        {
                            Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                            Local0 &= 0xFF
                            Local1--
                            Stall (0xC8)
                            Stall (0xC8)
                        }

                        If ((Local0 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TLS2 = 0x02
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TLS2 = One
                    RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
                    RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((HPAD & 0x03) == 0x03))
                    {
                        If ((OSTB >= 0x40))
                        {
                            Return (0x0F)
                        }

                        HPAD = (HPAD & 0xFFFFFFE0)
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y04._BAS, HPEB)  // _BAS: Base Address
                    Local0 = HPAD /* \HPAD */
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (AZAL)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }
            }

            Device (GEC)
            {
                Name (_ADR, 0x00140006)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1A, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        ^^SMBS.E26C = One
                    }
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                OperationRegion (U0CS, PCI_Config, 0xC4, 0x04)
                Field (U0CS, DWordAcc, NoLock, Preserve)
                {
                    U0EN,   2
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                OperationRegion (U2CS, PCI_Config, 0xC4, 0x04)
                Field (U2CS, DWordAcc, NoLock, Preserve)
                {
                    U2EN,   2
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x14)  // _PLD: Physical Location of Device
                        {
                            0x82, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF
                        })
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                OperationRegion (U3CS, PCI_Config, 0xC4, 0x04)
                Field (U3CS, DWordAcc, NoLock, Preserve)
                {
                    U3EN,   2
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x14)  // _PLD: Physical Location of Device
                        {
                            0x82, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF
                        })
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x14)  // _PLD: Physical Location of Device
                        {
                            0x82, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF
                        })
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x0C), 
                    HPBS,   32, 
                    Offset (0x3B), 
                        ,   3, 
                    HIHP,   1, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
                Field (ERMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x105), 
                        ,   5, 
                    G06E,   1, 
                    G06O,   1, 
                    G06I,   1, 
                        ,   5, 
                    G07E,   1, 
                    G07O,   1, 
                    G07I,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    G11E,   1, 
                    G11O,   1, 
                    G11I,   1, 
                        ,   5, 
                    G12E,   1, 
                    G12O,   1, 
                    G12I,   1, 
                        ,   5, 
                    G13E,   1, 
                    G13O,   1, 
                    G13I,   1, 
                        ,   5, 
                    G14E,   1, 
                    G14O,   1, 
                    G14I,   1, 
                        ,   5, 
                    G15E,   1, 
                    G15O,   1, 
                    G15I,   1, 
                        ,   5, 
                    G16E,   1, 
                    G16O,   1, 
                    G16I,   1, 
                    Offset (0x113), 
                        ,   5, 
                    G20E,   1, 
                    G20O,   1, 
                    G20I,   1, 
                        ,   5, 
                    G21E,   1, 
                    G21O,   1, 
                    G21I,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    G27E,   1, 
                    G27O,   1, 
                    G27I,   1, 
                        ,   5, 
                    G28E,   1, 
                    G28O,   1, 
                    G28I,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    G32E,   1, 
                    G32O,   1, 
                    G32I,   1, 
                    Offset (0x122), 
                        ,   5, 
                    G35E,   1, 
                    G35O,   1, 
                    G35I,   1, 
                    Offset (0x128), 
                    GP41,   8, 
                    Offset (0x12B), 
                        ,   5, 
                    G44E,   1, 
                    G44O,   1, 
                    G44I,   1, 
                        ,   5, 
                    G45E,   1, 
                    G45O,   1, 
                    G45I,   1, 
                    GP46,   8, 
                    Offset (0x130), 
                        ,   5, 
                    G49E,   1, 
                    G49O,   1, 
                    G49I,   1, 
                    Offset (0x132), 
                        ,   5, 
                    G51E,   1, 
                    G51O,   1, 
                    G51I,   1, 
                    Offset (0x134), 
                        ,   5, 
                    G53E,   1, 
                    G53O,   1, 
                    G53I,   1, 
                    Offset (0x136), 
                        ,   5, 
                    G55E,   1, 
                    G55O,   1, 
                    G55I,   1, 
                    Offset (0x138), 
                        ,   5, 
                    G57E,   1, 
                    G57O,   1, 
                    G57I,   1, 
                        ,   5, 
                    G58E,   1, 
                    G58O,   1, 
                    G58I,   1, 
                        ,   5, 
                    G59E,   1, 
                    G59O,   1, 
                    G59I,   1, 
                    Offset (0x13E), 
                    GP63,   8, 
                        ,   5, 
                    G64E,   1, 
                    G64O,   1, 
                    G64I,   1, 
                    Offset (0x141), 
                    GP66,   8, 
                    Offset (0x164), 
                        ,   7, 
                    GE05,   1, 
                        ,   5, 
                    G66E,   1, 
                    G66O,   1, 
                    G66I,   1, 
                    Offset (0x16A), 
                    GE11,   8, 
                    Offset (0x16D), 
                        ,   5, 
                    G6EE,   1, 
                    G6EO,   1, 
                    G6EI,   1, 
                        ,   7, 
                    GE15,   1, 
                        ,   7, 
                    GE16,   1, 
                    Offset (0x174), 
                    GE21,   8, 
                        ,   7, 
                    GE22,   1, 
                    Offset (0x1A5), 
                    GPA6,   8, 
                    Offset (0x1A9), 
                        ,   5, 
                    GAAE,   1, 
                    GAAO,   1, 
                    GAAI,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    PD0E,   1, 
                    PD0O,   1, 
                    PD0I,   1, 
                        ,   5, 
                    PD1E,   1, 
                    PD1O,   1, 
                    PD1I,   1, 
                        ,   5, 
                    GB1E,   1, 
                    GB1O,   1, 
                    GB1I,   1, 
                        ,   5, 
                    GB2E,   1, 
                    GB2O,   1, 
                    GB2I,   1, 
                        ,   5, 
                    GB3E,   1, 
                    GB3O,   1, 
                    GB3I,   1, 
                        ,   5, 
                    GB4E,   1, 
                    GB4O,   1, 
                    GB4I,   1, 
                        ,   5, 
                    GB5E,   1, 
                    GB5O,   1, 
                    GB5I,   1, 
                        ,   5, 
                    GB6E,   1, 
                    GB6O,   1, 
                    GB6I,   1, 
                    Offset (0x1FF), 
                        ,   1, 
                    E01S,   1, 
                        ,   3, 
                    E05S,   1, 
                        ,   9, 
                    E15S,   1, 
                    E16S,   1, 
                        ,   5, 
                    E22S,   1, 
                    Offset (0x203), 
                        ,   1, 
                    E01E,   1, 
                        ,   3, 
                    E05E,   1, 
                        ,   9, 
                    E15E,   1, 
                    E16E,   1, 
                        ,   5, 
                    E22E,   1, 
                    Offset (0x207), 
                        ,   1, 
                    E01C,   1, 
                        ,   3, 
                    E05C,   1, 
                        ,   9, 
                    E15C,   1, 
                    E16C,   1, 
                        ,   5, 
                    E22C,   1, 
                    Offset (0x20B), 
                        ,   1, 
                    E01L,   1, 
                        ,   3, 
                    E05L,   1, 
                        ,   9, 
                    E15L,   1, 
                    E16L,   1, 
                        ,   5, 
                    E22L,   1, 
                    Offset (0x287), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x298), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AF), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x361), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x376), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BA), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BD), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C7), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DE), 
                    BLNK,   2, 
                    Offset (0x3EF), 
                    PHYD,   1, 
                    Offset (0x3FF), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x40F), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x41F), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x42F), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0xD06), 
                    MX07,   8, 
                    Offset (0xD0E), 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD14), 
                    MX21,   8, 
                    Offset (0xD1A), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD1F), 
                    MX32,   8, 
                    Offset (0xD2B), 
                    MX44,   8, 
                    Offset (0xD30), 
                    MX49,   8, 
                    Offset (0xD34), 
                    MX53,   8, 
                    Offset (0xD38), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD41), 
                    MX66,   8, 
                    Offset (0xD65), 
                    M102,   8, 
                    Offset (0xD6D), 
                    M110,   8, 
                    Offset (0xDAE), 
                    M175,   8, 
                    M176,   8, 
                    Offset (0xDB3), 
                    M180,   8, 
                    Offset (0xDB5), 
                    M182,   8, 
                    Offset (0xE01), 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE3F), 
                    MS40,   8, 
                    Offset (0xE80), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (ERM1, SystemMemory, MMSO, 0x1000)
                Field (ERM1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x100), 
                        ,   5, 
                    P01E,   1, 
                    P01O,   1, 
                    P01I,   1, 
                    Offset (0x105), 
                        ,   5, 
                    P06E,   1, 
                    P06O,   1, 
                    P06I,   1, 
                        ,   5, 
                    P07E,   1, 
                    P07O,   1, 
                    P07I,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    P0BE,   1, 
                    P0BO,   1, 
                    P0BI,   1, 
                        ,   5, 
                    P0CE,   1, 
                    P0CO,   1, 
                    P0CI,   1, 
                        ,   5, 
                    P0DE,   1, 
                    P0DO,   1, 
                    P0DI,   1, 
                        ,   5, 
                    P0EE,   1, 
                    P0EO,   1, 
                    P0EI,   1, 
                        ,   5, 
                    P0FE,   1, 
                    P0FO,   1, 
                    P0FI,   1, 
                        ,   5, 
                    P10E,   1, 
                    P10O,   1, 
                    P10I,   1, 
                    Offset (0x113), 
                        ,   5, 
                    P14E,   1, 
                    P14O,   1, 
                    P14I,   1, 
                        ,   5, 
                    P15E,   1, 
                    P15O,   1, 
                    P15I,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    P1BE,   1, 
                    P1BO,   1, 
                    P1BI,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    P20E,   1, 
                    P20O,   1, 
                    P20I,   1, 
                        ,   5, 
                    P21E,   1, 
                    P21O,   1, 
                    P21I,   1, 
                        ,   5, 
                    P22E,   1, 
                    P22O,   1, 
                    P22I,   1, 
                        ,   5, 
                    P23E,   1, 
                    P23O,   1, 
                    P23I,   1, 
                    Offset (0x128), 
                        ,   5, 
                    P29E,   1, 
                    P29O,   1, 
                    P29I,   1, 
                    Offset (0x12B), 
                        ,   5, 
                    P2CE,   1, 
                    P2CO,   1, 
                    P2CI,   1, 
                        ,   5, 
                    P2DE,   1, 
                    P2DO,   1, 
                    P2DI,   1, 
                    PO2E,   8, 
                    Offset (0x132), 
                        ,   5, 
                    P33E,   1, 
                    P33O,   1, 
                    P33I,   1, 
                    Offset (0x134), 
                        ,   5, 
                    P35E,   1, 
                    P35O,   1, 
                    P35I,   1, 
                    Offset (0x136), 
                        ,   5, 
                    P37E,   1, 
                    P37O,   1, 
                    P37I,   1, 
                    Offset (0x138), 
                        ,   5, 
                    P39E,   1, 
                    P39O,   1, 
                    P39I,   1, 
                    Offset (0x13A), 
                        ,   5, 
                    P3BE,   1, 
                    P3BO,   1, 
                    P3BI,   1, 
                    Offset (0x13C), 
                    PO3D,   8, 
                    PO3E,   8, 
                    PO3F,   8, 
                    PO40,   8, 
                    Offset (0x164), 
                        ,   7, 
                    Offset (0x165), 
                        ,   5, 
                    P66E,   1, 
                    P66O,   1, 
                    P66I,   1, 
                    Offset (0x16A), 
                    Offset (0x16B), 
                        ,   5, 
                    P6CE,   1, 
                    P6CO,   1, 
                    P6CI,   1, 
                    Offset (0x16E), 
                        ,   7, 
                    Offset (0x16F), 
                        ,   7, 
                    Offset (0x170), 
                    Offset (0x174), 
                    Offset (0x175), 
                        ,   7, 
                    Offset (0x176), 
                    Offset (0x1A5), 
                    POA6,   8, 
                    Offset (0x1A9), 
                        ,   5, 
                    PAAE,   1, 
                    PAAO,   1, 
                    PAAI,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    PAFE,   1, 
                    PAFO,   1, 
                    PAFI,   1, 
                        ,   5, 
                    PB0E,   1, 
                    PB0O,   1, 
                    PB0I,   1, 
                        ,   5, 
                    PB1E,   1, 
                    PB1O,   1, 
                    PB1I,   1, 
                        ,   5, 
                    PB2E,   1, 
                    PB2O,   1, 
                    PB2I,   1, 
                        ,   5, 
                    PB3E,   1, 
                    PB3O,   1, 
                    PB3I,   1, 
                        ,   5, 
                    PB4E,   1, 
                    PB4O,   1, 
                    PB4I,   1, 
                        ,   5, 
                    PB5E,   1, 
                    PB5O,   1, 
                    PB5I,   1, 
                        ,   5, 
                    PB6E,   1, 
                    PB6O,   1, 
                    PB6I,   1, 
                    Offset (0x1C6), 
                        ,   5, 
                    PC7E,   1, 
                    PC7O,   1, 
                    PC7I,   1, 
                        ,   5, 
                    PC8E,   1, 
                    PC8O,   1, 
                    PC8I,   1, 
                    Offset (0x207), 
                        ,   1, 
                        ,   1, 
                        ,   3, 
                        ,   1, 
                        ,   9, 
                    Offset (0x209), 
                        ,   1, 
                        ,   5, 
                        ,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0x6FF), 
                    RTC0,   8, 
                    Offset (0x701), 
                    RTC2,   8, 
                    Offset (0x703), 
                    RTC4,   8, 
                    Offset (0x705), 
                    RTC6,   8, 
                    Offset (0xD00), 
                    MX01,   8, 
                    Offset (0xD1F), 
                    Offset (0xD20), 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD28), 
                    MX41,   8, 
                    Offset (0xDA9), 
                    M170,   8, 
                    Offset (0xDB3), 
                    Offset (0xDB4), 
                    M181,   8, 
                    Offset (0xDB6), 
                    Offset (0xDC6), 
                    M199,   8, 
                    Offset (0xDFF), 
                    MS00,   8, 
                    MS01,   8
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((HPAD & 0x03) == 0x03))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }

                    OperationRegion (CMS1, SystemCMOS, Zero, 0x40)
                    Field (CMS1, ByteAcc, NoLock, Preserve)
                    {
                        RTC0,   8, 
                        Offset (0x02), 
                        RTC2,   8, 
                        Offset (0x04), 
                        RTC4,   8, 
                        Offset (0x06), 
                        RTC6,   8
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((HPAD & 0x03) == 0x03))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFFFFFB0,         // Address Base
                            0x0000004F,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFFFFF00,         // Address Base
                            0x000000FF,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFE00000,         // Address Base
                            0x00200000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (Ones - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Local0 = GPIO /* \_SB_.PCI0.LPC0.GPIO */
                    Local0 &= 0xFFFFFF3F
                    GPIO = Local0
                    Local1 = CLGP /* \_SB_.PCI0.LPC0.CLGP */
                    Return (Local1)
                }
            }

            Device (P2P)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x04, 0x05))
                    }
                    Else
                    {
                        Return (GPRW (0x04, Zero))
                    }
                }

                OperationRegion (PCPC, PCI_Config, Zero, 0xFF)
                Field (PCPC, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    PCMD,   8, 
                    Offset (0x1C), 
                    IOW1,   8, 
                    IOW2,   8, 
                    Offset (0x48), 
                    PR48,   8, 
                    PR49,   8, 
                    PR4A,   8, 
                    PR4B,   8
                }

                Name (PR09, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR09, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.PCI0.P2P_.AR09 */
                    }

                    Return (PR09) /* \_SB_.PCI0.P2P_.PR09 */
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, Zero)
                Name (BA_5, Zero)
                Name (SBAR, 0xF0449000)
                OperationRegion (SATX, PCI_Config, Zero, 0x28)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0x24), 
                    BA05,   32
                }

                Method (GBAA, 0, Serialized)
                {
                    BA_5 = BA05 /* \_SB_.PCI0.SATA.BA05 */
                    If (((BA_5 == Ones) || (STCL != 0x0101)))
                    {
                        B5EN = Zero
                        Return (SBAR) /* \_SB_.PCI0.SATA.SBAR */
                    }
                    Else
                    {
                        B5EN = One
                        Return (BA_5) /* \_SB_.PCI0.SATA.BA_5 */
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.PRID.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM0)
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM2)
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET0 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET2 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SECD.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM1)
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM3)
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET1 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET3 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((^^^AFD.ODZP () == 0x80000001))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Device (ODD)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }
                    }
                }
            }

            Device (IDE)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    Zero, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, WordAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (UDMT [(UDMX & 0x0F)])
                    }
                    ElseIf ((MDT0 != 0xFF))
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (UDMT [(UDMX >> 0x04)])
                    }
                    ElseIf ((MDT1 != 0xFF))
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Local0 %= 0x05
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Local1 %= 0x05
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (PITR [Local0])
                    PIT1 = DerefOf (PITR [Local1])
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Local0 %= 0x06
                        UDMX |= Local0
                        UDCX |= One
                    }
                    ElseIf ((DMA0 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                        MDT0 = DerefOf (MDTR [Local0])
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Local0 %= 0x06
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    ElseIf ((DMA1 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                        MDT1 = DerefOf (MDTR [Local0])
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDE_.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDE_.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF               // ......
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CMDA = Arg0
                    CMDB = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    ElseIf ((Local1 != 0xFF))
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = PPIT /* \_SB_.PCI0.IDE_.PPIT */
                        VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                        VPIC = PPIC /* \_SB_.PCI0.IDE_.PPIC */
                        VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                        VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        PPIT = VPIT /* \_SB_.PCI0.IDE_.PRID._STM.VPIT */
                        PMDT = VMDT /* \_SB_.PCI0.IDE_.PRID._STM.VMDT */
                        PPIM = VPIM /* \_SB_.PCI0.IDE_.PRID._STM.VPIM */
                        PUDC = VUDC /* \_SB_.PCI0.IDE_.PRID._STM.VUDC */
                        PUDM = VUDM /* \_SB_.PCI0.IDE_.PRID._STM.VUDM */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = SPIT /* \_SB_.PCI0.IDE_.SPIT */
                        VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                        VPIC = SPIC /* \_SB_.PCI0.IDE_.SPIC */
                        VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                        VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        SPIT = VPIT /* \_SB_.PCI0.IDE_.SECD._STM.VPIT */
                        SMDT = VMDT /* \_SB_.PCI0.IDE_.SECD._STM.VMDT */
                        SPIM = VPIM /* \_SB_.PCI0.IDE_.SECD._STM.VPIM */
                        SUDC = VUDC /* \_SB_.PCI0.IDE_.SECD._STM.VUDC */
                        SUDM = VUDM /* \_SB_.PCI0.IDE_.SECD._STM.VUDM */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Name (AFCB, Buffer (0xB8) {})
            Name (CALB, Buffer (0x05) {})
            Device (AFD)
            {
                Name (_HID, "AFD0001")  // _HID: Hardware ID
                Name (AFEN, 0x80000000)
                Name (FU3E, 0x80000001)
                Name (HDD0, 0x80000000)
                Method (ODZP, 0, NotSerialized)
                {
                    If (AOZP)
                    {
                        Return (0x80000001)
                    }
                    Else
                    {
                        Return (0x80000000)
                    }
                }

                Name (DAT6, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFF,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Name (DAT7, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Name (DAT8, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0xFF,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Name (DAT9, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0xFF, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Name (DATA, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0xFF,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Name (DATB, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0xFF,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Name (DATC, Buffer (0x0E)
                {
                    /* 0000 */  0x0E, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0xFF,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((AFEN == 0x80000000))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (AFCM, 3, NotSerialized)
                {
                    Arg0 &= 0xFF
                    If ((Arg0 == Zero))
                    {
                        Return (AFC0 ())
                    }

                    If ((Arg0 == One))
                    {
                        Return (AFC1 ())
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (AFC2 (Arg1, Arg2))
                    }
                    Else
                    {
                        CreateWordField (AFCB, Zero, SSZE)
                        CreateWordField (AFCB, 0x02, VERN)
                        CreateDWordField (AFCB, 0x04, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        SFUN = Zero
                        Return (AFCB) /* \_SB_.PCI0.AFCB */
                    }
                }

                Method (AFC0, 0, NotSerialized)
                {
                    P80H = 0xAF00
                    CreateWordField (AFCB, Zero, SSZE)
                    CreateWordField (AFCB, 0x02, VERN)
                    CreateDWordField (AFCB, 0x04, SFUN)
                    SSZE = 0x08
                    VERN = One
                    SFUN = 0x03
                    P80H = 0xAE00
                    Return (AFCB) /* \_SB_.PCI0.AFCB */
                }

                Method (AFC1, 0, NotSerialized)
                {
                    P80H = 0xAF01
                    CreateWordField (AFCB, Zero, SSZE)
                    CreateWordField (AFCB, 0x02, ESZ0)
                    CreateWordField (AFCB, 0x04, CCD0)
                    CreateWordField (AFCB, 0x06, EBU0)
                    CreateWordField (AFCB, 0x08, CFG0)
                    CreateWordField (AFCB, 0x0A, PCA0)
                    CreateWordField (AFCB, 0x0C, DCP0)
                    CreateWordField (AFCB, 0x0E, DRA0)
                    ESZ0 = 0x0E
                    EBU0 = 0x02
                    CFG0 = Zero
                    PCA0 = 0x88
                    If ((^^SATA.VIDI == 0x43901002))
                    {
                        EBU0 = One
                        CCD0 = 0x0101
                        DCP0 = Zero
                        DRA0 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43911002))
                    {
                        CCD0 = 0x0106
                        DCP0 = Zero
                        DRA0 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43921002))
                    {
                        CCD0 = 0x0104
                        DCP0 = Zero
                        DRA0 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43931002))
                    {
                        CCD0 = 0x0104
                        DCP0 = Zero
                        DRA0 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43941002))
                    {
                        CCD0 = 0x0106
                        DCP0 = Zero
                        DRA0 = Zero
                    }

                    CreateWordField (AFCB, 0x10, ESZ1)
                    CreateWordField (AFCB, 0x12, CCD1)
                    CreateWordField (AFCB, 0x14, EBU1)
                    CreateWordField (AFCB, 0x16, CFG1)
                    CreateWordField (AFCB, 0x18, PCA1)
                    CreateWordField (AFCB, 0x1A, DCP1)
                    CreateWordField (AFCB, 0x1C, DRA1)
                    ESZ1 = 0x0E
                    EBU1 = 0x02
                    CFG1 = Zero
                    PCA1 = 0x88
                    If ((^^SATA.VIDI == 0x43901002))
                    {
                        EBU1 = One
                        CCD1 = 0x0101
                        DCP1 = One
                        DRA1 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43911002))
                    {
                        CCD1 = 0x0106
                        DCP1 = One
                        DRA1 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43921002))
                    {
                        CCD1 = 0x0104
                        DCP1 = Zero
                        DRA1 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43931002))
                    {
                        CCD1 = 0x0104
                        DCP1 = Zero
                        DRA1 = Zero
                    }

                    If ((^^SATA.VIDI == 0x43941002))
                    {
                        CCD1 = 0x0106
                        DCP1 = One
                        DRA1 = Zero
                    }

                    CreateField (AFCB, 0x02B0, 0x70, IDX6)
                    CreateByteField (DAT6, 0x07, BUS6)
                    If ((^^VGA.PXEN () == 0x80000000))
                    {
                        BUS6 = 0xFF
                    }
                    Else
                    {
                        Local0 = ^^PB4.SBUS /* \_SB_.PCI0.PB4_.SBUS */
                        Local0 >>= 0x08
                        Local0 &= 0xFF
                        BUS6 = Local0
                    }

                    IDX6 = DAT6 /* \_SB_.PCI0.AFD_.DAT6 */
                    CreateField (AFCB, 0x0320, 0x70, IDX7)
                    CreateByteField (DAT7, 0x07, BUS7)
                    Local0 = ^^PB6.SBUS /* \_SB_.PCI0.PB6_.SBUS */
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    BUS7 = Local0
                    IDX7 = DAT7 /* \_SB_.PCI0.AFD_.DAT7 */
                    CreateField (AFCB, 0x0390, 0x70, IDX8)
                    CreateByteField (DAT8, 0x07, BUS8)
                    Local0 = ^^PB7.SBUS /* \_SB_.PCI0.PB7_.SBUS */
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    BUS8 = Local0
                    IDX8 = DAT8 /* \_SB_.PCI0.AFD_.DAT8 */
                    CreateField (AFCB, 0x0400, 0x70, IDX9)
                    If ((FU3E != 0x80000000))
                    {
                        CreateByteField (DAT9, 0x09, BUS9)
                        Local0 = ^^SPB1.SBUS /* \_SB_.PCI0.SPB1.SBUS */
                        Local0 >>= 0x08
                        Local0 &= 0xFF
                        BUS9 = Local0
                    }

                    IDX9 = DAT9 /* \_SB_.PCI0.AFD_.DAT9 */
                    CreateField (AFCB, 0x0470, 0x70, IDXA)
                    CreateByteField (DATA, 0x07, BUSA)
                    Local0 = ^^SPB2.SBUS /* \_SB_.PCI0.SPB2.SBUS */
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    BUSA = Local0
                    IDXA = DATA /* \_SB_.PCI0.AFD_.DATA */
                    CreateField (AFCB, 0x04E0, 0x70, IDXB)
                    IDXB = DATB /* \_SB_.PCI0.AFD_.DATB */
                    CreateField (AFCB, 0x0550, 0x70, IDXC)
                    IDXC = DATC /* \_SB_.PCI0.AFD_.DATC */
                    SSZE = 0xB8
                    P80H = 0xAE01
                    Return (AFCB) /* \_SB_.PCI0.AFCB */
                }

                Method (AFC2, 2, NotSerialized)
                {
                    P80H = 0xAF02
                    CreateDWordField (AFCB, Zero, FLAG)
                    CreateByteField (AFCB, 0x04, PWST)
                    CreateByteField (AFCB, 0x05, DIND)
                    CreateWordField (CALB, Zero, SZZE)
                    CreateField (CALB, 0x10, 0x03, FUCC)
                    CreateField (CALB, 0x13, 0x05, DEVV)
                    CreateField (CALB, 0x18, 0x08, BUSS)
                    CreateByteField (CALB, 0x04, HPST)
                    SZZE = 0x05
                    PWST = (Arg0 & 0xFF)
                    DIND = (Arg1 & 0xFF)
                    If ((HDD0 == 0x80000000))
                    {
                        ^^SMBS.PAAO = Zero
                        ^^SMBS.PAAE = Zero
                        ^^SMBS.MX57 = One
                        ^^SMBS.MX53 = One
                        If (^^SATA.IPM0)
                        {
                            ^^SMBS.P0FO = One
                            ^^SMBS.P0FE = Zero
                            Sleep (0xC8)
                        }

                        If (^^SATA.IPM1)
                        {
                            ^^SMBS.P2CO = One
                            ^^SMBS.P2CE = Zero
                            Sleep (0xC8)
                        }
                    }

                    If ((HDD0 == 0x80000000))
                    {
                        If (^^SATA.IPM0)
                        {
                            HDD0 = One
                        }
                        Else
                        {
                            HDD0 = Zero
                        }
                    }

                    If ((DIND == Zero))
                    {
                        If (((^^SATA.VIDI == 0x43921002) || (^^SATA.VIDI == 0x43931002)))
                        {
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        ^^SMBS.MX57 = One
                        If ((PWST == Zero))
                        {
                            If ((^^SATA.VIDI == 0x43901002))
                            {
                                Notify (^^SATA.PRID.P_D0, 0x03) // Eject Request
                            }

                            If (((^^SATA.VIDI == 0x43911002) || (^^SATA.VIDI == 0x43941002)))
                            {
                                Notify (^^SATA.PRID, 0x03) // Eject Request
                            }

                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.P39O = Zero
                            ^^SMBS.P39E = Zero
                            Sleep (0x07D0)
                            If ((^^SATA.VIDI == 0x43901002))
                            {
                                Notify (^^SATA.PRID.P_D0, One) // Device Check
                            }

                            If (((^^SATA.VIDI == 0x43911002) || (^^SATA.VIDI == 0x43941002)))
                            {
                                Notify (^^SATA.PRID, One) // Device Check
                            }

                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            FLAG = ^^SMBS.P39O /* \_SB_.PCI0.SMBS.P39O */
                        }
                    }

                    If ((DIND == One))
                    {
                        If (((^^SATA.VIDI == 0x43921002) || (^^SATA.VIDI == 0x43931002)))
                        {
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        ^^SMBS.MX53 = One
                        ^^SMBS.M170 = One
                        If ((ODZP () == 0x80000000))
                        {
                            If ((PWST == Zero))
                            {
                                If ((^^SATA.VIDI == 0x43901002))
                                {
                                    Notify (^^SATA.PRT1.ODD, 0x03) // Eject Request
                                }

                                If (((^^SATA.VIDI == 0x43911002) || (^^SATA.VIDI == 0x43941002)))
                                {
                                    If ((HDD0 == One))
                                    {
                                        Notify (^^SATA.PRT1, 0x03) // Eject Request
                                    }
                                    ElseIf ((TPOS >= 0x50))
                                    {
                                        Notify (^^SATA.PRT1, 0x03) // Eject Request
                                    }
                                    Else
                                    {
                                        Notify (^^SATA.PRID, 0x03) // Eject Request
                                    }
                                }

                                FLAG = Zero
                            }

                            If ((PWST == One))
                            {
                                ^^SMBS.PAAO = Zero
                                ^^SMBS.PAAE = Zero
                                ^^SMBS.P35O = One
                                ^^SMBS.P35E = Zero
                                Sleep (0x03E8)
                                If ((^^SATA.VIDI == 0x43901002))
                                {
                                    Notify (^^SATA.PRT1.ODD, One) // Device Check
                                }

                                If (((^^SATA.VIDI == 0x43911002) || (^^SATA.VIDI == 0x43941002)))
                                {
                                    If ((HDD0 == One))
                                    {
                                        Notify (^^SATA.PRT1, One) // Device Check
                                    }
                                    ElseIf ((TPOS >= 0x50))
                                    {
                                        Notify (^^SATA.PRT1, One) // Device Check
                                    }
                                    Else
                                    {
                                        Notify (^^SATA.PRID, One) // Device Check
                                    }
                                }

                                FLAG = One
                            }

                            If ((PWST == 0xFF))
                            {
                                FLAG = ^^SMBS.P35O /* \_SB_.PCI0.SMBS.P35O */
                            }
                        }
                        Else
                        {
                            If ((PWST == Zero))
                            {
                                If ((^^SATA.VIDI == 0x43941002))
                                {
                                    FLAG |= 0xC0
                                    Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                                }

                                If ((^^SATA.VIDI == 0x43901002))
                                {
                                    Notify (^^SATA.ODDZ.ODD, 0x03) // Eject Request
                                }

                                If ((^^SATA.VIDI == 0x43911002))
                                {
                                    If ((HDD0 == One))
                                    {
                                        Notify (^^SATA.ODDZ.ODD, 0x03) // Eject Request
                                    }
                                    ElseIf ((TPOS >= 0x50))
                                    {
                                        Notify (^^SATA.ODDZ.ODD, 0x03) // Eject Request
                                    }
                                    Else
                                    {
                                        Notify (^^SATA.PRID, 0x03) // Eject Request
                                    }
                                }

                                FLAG = Zero
                            }

                            If ((PWST == One))
                            {
                                ^^SMBS.PAAO = Zero
                                ^^SMBS.PAAE = Zero
                                ^^SMBS.P35O = One
                                ^^SMBS.P35E = Zero
                                Sleep (0x03E8)
                                If ((^^SATA.VIDI == 0x43901002))
                                {
                                    Notify (^^SATA.ODDZ.ODD, One) // Device Check
                                }

                                If ((^^SATA.VIDI == 0x43911002))
                                {
                                    If ((HDD0 == One))
                                    {
                                        Notify (^^SATA.ODDZ.ODD, One) // Device Check
                                    }
                                    ElseIf ((TPOS >= 0x50))
                                    {
                                        Notify (^^SATA.ODDZ.ODD, One) // Device Check
                                    }
                                    Else
                                    {
                                        Notify (^^SATA.PRID, One) // Device Check
                                    }
                                }

                                FLAG = One
                            }

                            If ((PWST == 0xFF))
                            {
                                FLAG = ^^SMBS.P35O /* \_SB_.PCI0.SMBS.P35O */
                                If (((^^SATA.VIDI == 0x43901002) || (^^SATA.VIDI == 0x43911002)))
                                {
                                    FLAG &= 0x7F
                                }
                                Else
                                {
                                    FLAG |= 0x80
                                }

                                FLAG |= 0x40
                            }
                        }
                    }

                    If ((DIND == 0x06))
                    {
                        If ((^^VGA.PXEN () == 0x80000000))
                        {
                            FLAG = ^^SMBS.P2DO /* \_SB_.PCI0.SMBS.P2DO */
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        If ((PWST == Zero))
                        {
                            Notify (^^PB4.VGA, 0x03) // Eject Request
                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^VGA.PX02 (One)
                            Notify (^^PB4.VGA, One) // Device Check
                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            FLAG = ^^SMBS.P2DO /* \_SB_.PCI0.SMBS.P2DO */
                        }
                    }

                    If ((DIND == 0x07))
                    {
                        ^^SMBS.M181 = 0x02
                        If ((PWST == Zero))
                        {
                            Notify (^^PB6.XPDV, 0x03) // Eject Request
                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.PB5O = One
                            ^^SMBS.PB5E = Zero
                            Sleep (0xC8)
                            Local0 = ^^SMBS.MS01 /* \_SB_.PCI0.SMBS.MS01 */
                            Local0 |= 0xF0
                            ^^SMBS.MS01 = Local0
                            Local0 = ^^SMBS.PO3F /* \_SB_.PCI0.SMBS.PO3F */
                            Local1 = (Local0 & 0xF7)
                            Local0 = (Local1 | 0x05)
                            ^^SMBS.PO3F = Local0
                            Sleep (0xC8)
                            FUCC = Zero
                            DEVV = 0x05
                            BUSS = Zero
                            HPST = One
                            ALIB
                            0x06
                            CALB
                            Sleep (0x28)
                            Notify (^^PB5.XPDV, One) // Device Check
                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            FLAG = ^^SMBS.PB5O /* \_SB_.PCI0.SMBS.PB5O */
                        }
                    }

                    If ((DIND == 0x08))
                    {
                        ^^SMBS.M180 = One
                        Local0 = ^^PB6.DVID /* \_SB_.PCI0.PB6_.DVID */
                        Local0 &= 0xFFFF
                        If ((Local0 == 0xFFFF))
                        {
                            Notify (^^PB6.XPDV, 0x03) // Eject Request
                            Local0 = ^^SMBS.PB4O /* \_SB_.PCI0.SMBS.PB4O */
                            Local0 &= One
                            Local0 ^= One
                            FLAG = Local0
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        If ((PWST == Zero))
                        {
                            Notify (^^PB6.XPDV, 0x03) // Eject Request
                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.PB4O = Zero
                            ^^SMBS.PB4E = Zero
                            Sleep (0xC8)
                            Local0 = ^^SMBS.MS00 /* \_SB_.PCI0.SMBS.MS00 */
                            Local0 |= 0xF0
                            ^^SMBS.MS00 = Local0
                            Local0 = ^^SMBS.PO3D /* \_SB_.PCI0.SMBS.PO3D */
                            Local1 = (Local0 & 0xF7)
                            Local0 = (Local1 | 0x05)
                            ^^SMBS.PO3D = Local0
                            Sleep (0xC8)
                            FUCC = Zero
                            DEVV = 0x06
                            BUSS = Zero
                            HPST = One
                            ALIB
                            0x06
                            CALB
                            Sleep (0x28)
                            Notify (^^PB7.XPDV, One) // Device Check
                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            Local0 = ^^SMBS.PB4O /* \_SB_.PCI0.SMBS.PB4O */
                            Local0 &= One
                            Local0 ^= One
                            FLAG = Local0
                        }
                    }

                    If ((DIND == 0x09))
                    {
                        If ((FU3E == 0x80000000))
                        {
                            Notify (^^SPB1.XPDV, 0x03) // Eject Request
                            FLAG = ^^SMBS.P66O /* \_SB_.PCI0.SMBS.P66O */
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        If ((PWST == Zero))
                        {
                            Notify (^^SPB1.XPDV, 0x03) // Eject Request
                            FLAG = Zero
                            P80H = 0xAE70
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.P6CO = One
                            ^^SMBS.P6CE = Zero
                            Sleep (0x28)
                            Local0 = ^^SMBS.MS03 /* \_SB_.PCI0.SMBS.MS03 */
                            Local0 |= 0xF0
                            ^^SMBS.MS03 = Local0
                            Sleep (0x28)
                            Local0 = ^^SMBS.PO2E /* \_SB_.PCI0.SMBS.PO2E */
                            Local1 = (Local0 & 0xF7)
                            Local0 = (Local1 | 0x05)
                            ^^SMBS.PO2E = Local0
                            Sleep (0x28)
                            ^^SPB0.GHPS (Zero, One)
                            Notify (^^SPB1.XPDV, One) // Device Check
                            FLAG = One
                            P80H = 0xAE71
                        }

                        If ((PWST == 0xFF))
                        {
                            FLAG = ^^SMBS.P6CO /* \_SB_.PCI0.SMBS.P6CO */
                        }
                    }

                    If ((DIND == 0x0A))
                    {
                        ^^SMBS.M199 = 0x02
                        Local0 = ^^SPB2.DVID /* \_SB_.PCI0.SPB2.DVID */
                        Local0 &= 0xFFFF
                        If ((Local0 == 0xFFFF))
                        {
                            Notify (^^SPB2.XPDV, 0x03) // Eject Request
                            Local0 = ^^SMBS.PC7O /* \_SB_.PCI0.SMBS.PC7O */
                            Local0 &= One
                            Local0 ^= One
                            FLAG = Local0
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        If ((PWST == Zero))
                        {
                            Notify (^^SPB2.XPDV, 0x03) // Eject Request
                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.PC7O = Zero
                            ^^SMBS.PC7E = Zero
                            Sleep (0xC8)
                            Local0 = ^^SMBS.MS01 /* \_SB_.PCI0.SMBS.MS01 */
                            Local0 |= 0x0F
                            ^^SMBS.MS01 = Local0
                            Sleep (0x28)
                            Local0 = ^^SMBS.PO3E /* \_SB_.PCI0.SMBS.PO3E */
                            Local1 = (Local0 & 0xF7)
                            Local0 = (Local1 | 0x05)
                            ^^SMBS.PO3E = Local0
                            Sleep (0x28)
                            ^^SPB0.GHPS (Zero, 0x02)
                            Sleep (0x28)
                            Notify (^^SPB2.XPDV, One) // Device Check
                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            Local0 = ^^SMBS.PC7O /* \_SB_.PCI0.SMBS.PC7O */
                            Local0 &= One
                            Local0 ^= One
                            FLAG = Local0
                        }
                    }

                    If ((DIND == 0x0B))
                    {
                        ^^SMBS.MX01 = One
                        Local0 = ^^SPB3.DVID /* \_SB_.PCI0.SPB3.DVID */
                        Local0 &= 0xFFFF
                        If ((Local0 == 0xFFFF))
                        {
                            Notify (^^SPB3.XPDV, 0x03) // Eject Request
                            Local0 = ^^SMBS.P01O /* \_SB_.PCI0.SMBS.P01O */
                            Local0 &= One
                            Local0 ^= One
                            FLAG = Local0
                            FLAG |= 0x80
                            Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                        }

                        If ((PWST == Zero))
                        {
                            Notify (^^SPB3.XPDV, 0x03) // Eject Request
                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.P01O = Zero
                            ^^SMBS.P01E = Zero
                            Sleep (0xC8)
                            Local0 = ^^SMBS.MS02 /* \_SB_.PCI0.SMBS.MS02 */
                            Local0 |= 0x0F
                            ^^SMBS.MS02 = Local0
                            Sleep (0x28)
                            Local0 = ^^SMBS.PO40 /* \_SB_.PCI0.SMBS.PO40 */
                            Local1 = (Local0 & 0xF7)
                            Local0 = (Local1 | 0x05)
                            ^^SMBS.PO40 = Local0
                            Sleep (0x28)
                            ^^SPB0.GHPS (Zero, 0x03)
                            Sleep (0x28)
                            Notify (^^SPB3.XPDV, One) // Device Check
                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            Local0 = ^^SMBS.P01O /* \_SB_.PCI0.SMBS.P01O */
                            Local0 &= One
                            Local0 ^= One
                            FLAG = Local0
                        }
                    }

                    If ((DIND == 0x0C))
                    {
                        ^^SMBS.MX33 = One
                        If ((PWST == Zero))
                        {
                            ^^SMBS.P21O = Zero
                            ^^SMBS.P21E = Zero
                            FLAG = Zero
                        }

                        If ((PWST == One))
                        {
                            ^^SMBS.P21O = One
                            ^^SMBS.P21E = Zero
                            Sleep (0xC8)
                            FLAG = One
                        }

                        If ((PWST == 0xFF))
                        {
                            FLAG = ^^SMBS.P21O /* \_SB_.PCI0.SMBS.P21O */
                        }
                    }

                    P80H = 0xAE02
                    Return (FLAG) /* \_SB_.PCI0.AFD_.AFC2.FLAG */
                }
            }

            Scope (SATA.PRID)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^SMBS.PAAO = Zero
                    ^^^SMBS.PAAE = Zero
                    If ((^^^AFD.HDD0 == One))
                    {
                        ^^^SMBS.P0FO = Zero
                        ^^^SMBS.P0FE = Zero
                    }
                    Else
                    {
                        ^^^SMBS.P2CO = Zero
                        ^^^SMBS.P2CE = Zero
                    }

                    Sleep (0x28)
                }
            }

            Scope (SATA.PRID.P_D0)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^^SMBS.P39O = Zero
                    ^^^^SMBS.P39E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SATA.PRT1)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^SMBS.PAAO = Zero
                    ^^^SMBS.PAAE = Zero
                    ^^^SMBS.P35O = Zero
                    ^^^SMBS.P35E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SATA.PRT1.ODD)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^^SMBS.PAAO = Zero
                    ^^^^SMBS.PAAE = Zero
                    ^^^^SMBS.P35O = Zero
                    ^^^^SMBS.P35E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SATA.SECD)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^SMBS.PAAO = Zero
                    ^^^SMBS.PAAE = Zero
                    ^^^SMBS.P10O = Zero
                    ^^^SMBS.P10E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SATA.PRID.P_D1)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^^SMBS.PAAO = Zero
                    ^^^^SMBS.PAAE = Zero
                    ^^^^SMBS.P10O = Zero
                    ^^^^SMBS.P10E = Zero
                    Sleep (0x28)
                }
            }

            Scope (PB4.VGA)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    Sleep (0x28)
                    ^^^VGA.PX02 (Zero)
                    Sleep (0x28)
                }
            }

            Scope (PB5.XPDV)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    CreateWordField (CALB, Zero, SZZE)
                    CreateField (CALB, 0x10, 0x03, FUCC)
                    CreateField (CALB, 0x13, 0x05, DEVV)
                    CreateField (CALB, 0x18, 0x08, BUSS)
                    CreateByteField (CALB, 0x04, HPST)
                    SZZE = 0x05
                    FUCC = Zero
                    DEVV = 0x05
                    BUSS = Zero
                    HPST = Zero
                    ALIB
                    0x06
                    CALB
                    Sleep (0x28)
                    Local0 = ^^^SMBS.MS01 /* \_SB_.PCI0.SMBS.MS01 */
                    Local0 &= 0x0F
                    ^^^SMBS.MS01 = Local0
                    Sleep (0x28)
                    Local0 = ^^^SMBS.PO3F /* \_SB_.PCI0.SMBS.PO3F */
                    Local0 |= 0x0E
                    ^^^SMBS.PO3F = Local0
                    Sleep (0x28)
                    ^^^SMBS.PB5O = Zero
                    ^^^SMBS.PB5E = Zero
                    Sleep (0x28)
                }
            }

            Scope (PB6.XPDV)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    CreateWordField (CALB, Zero, SZZE)
                    CreateField (CALB, 0x10, 0x03, FUCC)
                    CreateField (CALB, 0x13, 0x05, DEVV)
                    CreateField (CALB, 0x18, 0x08, BUSS)
                    CreateByteField (CALB, 0x04, HPST)
                    SZZE = 0x05
                    FUCC = Zero
                    DEVV = 0x06
                    BUSS = Zero
                    HPST = Zero
                    ALIB
                    0x06
                    CALB
                    Sleep (0x28)
                    Local0 = ^^^SMBS.MS00 /* \_SB_.PCI0.SMBS.MS00 */
                    Local0 &= 0x0F
                    ^^^SMBS.MS00 = Local0
                    Sleep (0x28)
                    Local0 = ^^^SMBS.PO3D /* \_SB_.PCI0.SMBS.PO3D */
                    Local0 |= 0x0E
                    ^^^SMBS.PO3D = Local0
                    Sleep (0x28)
                    ^^^SMBS.PB4O = One
                    ^^^SMBS.PB4E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SPB1.XPDV)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    ^^^SPB0.GHPS (One, One)
                    Local0 = ^^^SMBS.MS03 /* \_SB_.PCI0.SMBS.MS03 */
                    Local0 &= 0x0F
                    ^^^SMBS.MS03 = Local0
                    Local0 = ^^^SMBS.PO2E /* \_SB_.PCI0.SMBS.PO2E */
                    Local0 |= 0x0E
                    ^^^SMBS.PO2E = Local0
                    Sleep (0x28)
                    ^^^SMBS.P6CO = Zero
                    ^^^SMBS.P6CE = Zero
                    Sleep (0x28)
                }
            }

            Scope (SPB2.XPDV)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    ^^^SPB0.GHPS (One, 0x02)
                    Sleep (0x28)
                    Local0 = ^^^SMBS.MS01 /* \_SB_.PCI0.SMBS.MS01 */
                    Local0 &= 0xF0
                    ^^^SMBS.MS01 = Local0
                    Sleep (0x28)
                    Local0 = ^^^SMBS.PO3E /* \_SB_.PCI0.SMBS.PO3E */
                    Local0 |= 0x0E
                    ^^^SMBS.PO3E = Local0
                    Sleep (0x28)
                    ^^^SMBS.PC7O = One
                    ^^^SMBS.PC7E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SPB3.XPDV)
            {
                Method (XEJX, 1, NotSerialized)
                {
                    ^^^SPB0.GHPS (One, 0x03)
                    Sleep (0x28)
                    Local0 = ^^^SMBS.MS02 /* \_SB_.PCI0.SMBS.MS02 */
                    Local0 &= 0xF0
                    ^^^SMBS.MS02 = Local0
                    Sleep (0x28)
                    Local0 = ^^^SMBS.PO40 /* \_SB_.PCI0.SMBS.PO40 */
                    Local0 |= 0x0E
                    ^^^SMBS.PO40 = Local0
                    Sleep (0x28)
                    ^^^SMBS.P01O = One
                    ^^^SMBS.P01E = Zero
                    Sleep (0x28)
                }
            }

            Scope (SATA)
            {
                Device (ODDZ)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (ODPS, Zero)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((^^^AFD.ODZP () == 0x80000000))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        P80H = 0xDF00
                        If ((^^^AFD.ODZP () == 0x80000001))
                        {
                            If ((VIDI == 0x43941002))
                            {
                                Sleep (0x28)
                                ^^^SMBS.P35O = One
                                ^^^SMBS.P35E = Zero
                                Sleep (0x28)
                            }
                        }

                        ODPS = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        P80H = 0xDF03
                        If ((^^^AFD.ODZP () == 0x80000001))
                        {
                            If ((VIDI == 0x43941002))
                            {
                                Sleep (0x28)
                                ^^^SMBS.P35O = Zero
                                ^^^SMBS.P35E = Zero
                                Sleep (0x28)
                            }
                        }

                        ODPS = 0x03
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (ODPS) /* \_SB_.PCI0.SATA.ODDZ.ODPS */
                    }

                    Device (ODD)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }

                        Method (XEJX, 1, NotSerialized)
                        {
                            Sleep (0x28)
                            ^^^^SMBS.PAAO = Zero
                            ^^^^SMBS.PAAE = Zero
                            ^^^^SMBS.P35O = Zero
                            ^^^^SMBS.P35E = Zero
                            Sleep (0x28)
                        }
                    }
                }
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            INTE (0x1F)
            INTF (0x1F)
            INTG (0x1F)
            INTH (0x1F)
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
            GEC = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            USB2 = Arg0
            USB4 = Arg0
            USB6 = Arg0
            IDE = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
            USB5 = Arg0
            USB7 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Method (INTE, 1, NotSerialized)
        {
            PIRE = Arg0
            GPP0 = Arg0
        }

        Method (INTF, 1, NotSerialized)
        {
            PIRF = Arg0
            GPP1 = Arg0
        }

        Method (INTG, 1, NotSerialized)
        {
            PIRG = Arg0
            GPP2 = Arg0
        }

        Method (INTH, 1, NotSerialized)
        {
            PIRH = Arg0
            GPP3 = Arg0
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,7,10,11,12,14,15}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTE (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTF (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTG (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTH (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (S80H, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE5
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Stall (0xFF)
        }
    }

    Scope (_SB)
    {
        Device (WMID)
        {
            Name (WCDS, Package (0x38)
            {
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                0x0C, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x08, 
                Zero, 
                Zero, 
                Zero, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x04, 
                Zero, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x80, 
                0x80, 
                0x04
            })
            Name (CPDS, Package (0x03)
            {
                Zero, 
                0x04, 
                0x04
            })
            Method (HWCD, 2, NotSerialized)
            {
                CreateDWordField (Arg1, Zero, SGNT)
                CreateDWordField (Arg1, 0x04, CMND)
                CreateDWordField (Arg1, 0x08, CMDT)
                CreateDWordField (Arg1, 0x0C, DSIN)
                CreateDWordField (Arg1, 0x10, CMPK)
                If ((Arg0 == One))
                {
                    Local0 = Zero
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)) {}
                CreateDWordField (Local1, Zero, SOUT)
                CreateDWordField (Local1, 0x04, RTCD)
                Local5 = DSIN /* \_SB_.WMID.HWCD.DSIN */
                If ((DSIN > 0x1000))
                {
                    Local5 = 0x1000
                }

                CreateField (Arg1, Zero, ((Local5 + 0x10) * 0x08), DATI)
                SOUT = 0x4C494146
                RTCD = 0x02
                RTCD = 0x03
                If ((CMND == One))
                {
                    Debug = "Read BIOS config command----"
                    RTCD = 0x04
                    If ((CMDT == 0x07))
                    {
                        If (DSIN)
                        {
                            P80H = 0x67
                            Local3 = DerefOf (Arg1 [0x10])
                            Local2 = GBAT (Local3)
                            RTCD = Zero
                        }
                        Else
                        {
                            RTCD = 0x05
                        }
                    }

                    If ((CMDT == 0x08))
                    {
                        P80H = 0x68
                        Local2 = GBBT ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x09))
                    {
                        P80H = 0x69
                        Local2 = GHKS ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x0A))
                    {
                        P80H = 0x6A
                        Local2 = GHKF ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x0C))
                    {
                        P80H = 0x6C
                        Local2 = GLBB ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x0D))
                    {
                        P80H = 0x6D
                        Local2 = GFRT ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x0F))
                    {
                        P80H = 0x6F
                        Local2 = GSAS ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x10))
                    {
                        P80H = 0x70
                        Local2 = GWSD ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x1B))
                    {
                        P80H = 0x7B
                        Local2 = GWDI ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x1D))
                    {
                        P80H = 0x7D
                        Local2 = GSDC ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x1E))
                    {
                        P80H = 0x7E
                        Local2 = GBUS ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x1F))
                    {
                        P80H = 0x7F
                        Local2 = GBCC ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x28))
                    {
                        P80H = 0x88
                        Local2 = GTDC (CMPK)
                        P80H = 0x93
                        RTCD = Zero
                    }

                    If ((CMDT == 0x29))
                    {
                        P80H = 0x89
                        Local2 = GFCC ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x2A))
                    {
                        P80H = 0x8A
                        Local2 = GPCS ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x2B))
                    {
                        P80H = 0x8B
                        Local2 = GBCO ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x2C))
                    {
                        P80H = 0x8C
                        Local2 = GTCS ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x36))
                    {
                        Local2 = GPST ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x37))
                    {
                        Local2 = GBCT ()
                        RTCD = Zero
                    }

                    If ((CMDT == 0x38))
                    {
                        Local2 = GBST ()
                        RTCD = Zero
                    }
                }

                If ((CMND == 0x02))
                {
                    Debug = "Write BIOS config command start------"
                    RTCD = 0x04
                    If (((CMDT > Zero) && (CMDT <= 0x40)))
                    {
                        If ((DSIN < DerefOf (WCDS [(CMDT - One)])))
                        {
                            RTCD = 0x05
                        }
                        Else
                        {
                            CreateDWordField (Arg1, 0x10, DWRD)
                            CreateField (Arg1, 0x80, 0x0400, B128)
                            If ((CMDT == 0x09))
                            {
                                P80H = 0x89
                                Local2 = SHKS (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x0A))
                            {
                                P80H = 0x8A
                                Local2 = SHKF (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x10))
                            {
                                P80H = 0x90
                                CreateDWordField (Arg1, 0x10, HSD3)
                                CreateWordField (Arg1, 0x14, HSD4)
                                CreateWordField (Arg1, 0x16, HSD5)
                                Local2 = SWSD (HSD3, HSD4, HSD5)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x1B))
                            {
                                P80H = 0x9B
                                Local2 = SWDS (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x1D))
                            {
                                P80H = 0x9D
                                Local2 = SDLC (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x1E))
                            {
                                P80H = 0x9E
                                Local2 = SBUS (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x1F))
                            {
                                P80H = 0x9F
                                Local2 = SBCC (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x28))
                            {
                                P80H = 0xA8
                                Local2 = STDC (B128)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x29))
                            {
                                P80H = 0xA9
                                Local2 = SFCC (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x2A))
                            {
                                P80H = 0xAA
                                Local2 = SPCS (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x2B))
                            {
                                P80H = 0xAB
                                Local2 = SBCO (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x2C))
                            {
                                P80H = 0xAC
                                Local2 = STCS (DWRD)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x36))
                            {
                                Local2 = SPST (B128)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x37))
                            {
                                Local2 = SBCT (B128)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x38))
                            {
                                Local2 = SBST (DWRD)
                                RTCD = Zero
                            }
                        }
                    }
                }

                If ((CMND == 0x00020002))
                {
                    Debug = "Computrace - Command 20002h start------"
                    RTCD = 0x04
                    If (((CMDT > Zero) && (CMDT <= 0x06)))
                    {
                        If ((DSIN < DerefOf (CPDS [(CMDT - One)])))
                        {
                            RTCD = 0x05
                        }
                        Else
                        {
                            If ((CMDT == One))
                            {
                                P80H = 0xA1
                                Local2 = CSTA ()
                                RTCD = Zero
                            }

                            If ((CMDT == 0x02))
                            {
                                P80H = 0xA2
                                Local2 = CACT (CMPK)
                                RTCD = Zero
                            }

                            If ((CMDT == 0x03))
                            {
                                P80H = 0xA3
                                Local2 = CDAC (CMPK)
                                RTCD = Zero
                            }
                        }
                    }
                }

                If ((RTCD == Zero))
                {
                    RTCD = DerefOf (Local2 [Zero])
                    If ((RTCD == Zero))
                    {
                        If ((DerefOf (Local2 [One]) <= Local0))
                        {
                            Local0 = Zero
                            While ((Local0 < DerefOf (Local2 [One])))
                            {
                                Local1 [(Local0 + 0x08)] = DerefOf (DerefOf (
                                    Local2 [0x02]) [Local0])
                                Local0++
                            }

                            SOUT = 0x53534150
                        }
                        Else
                        {
                            RTCD = 0x05
                        }
                    }
                }

                Return (Local1)
            }

            Method (CSTA, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                IAOR = One
                SMB0 = 0xC1
                If ((IAOR == One))
                {
                    Local0 [Zero] = 0x1C
                }
                Else
                {
                    Local0 [Zero] = IAOR /* \IAOR */
                    DerefOf (Local0 [0x02]) [Zero] = (CDAT & 0xFF
                        )
                }

                Return (Local0)
            }

            Method (CACT, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                IAOR = 0x02
                CDAT = Arg0
                SMB0 = 0xC1
                If ((IAOR == 0x02))
                {
                    Local0 [Zero] = 0x1C
                }
                Else
                {
                    Local0 [Zero] = IAOR /* \IAOR */
                }

                CDAT = Zero
                Return (Local0)
            }

            Method (CDAC, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                IAOR = 0x03
                CDAT = Arg0
                SMB0 = 0xC1
                If ((IAOR == 0x03))
                {
                    Local0 [Zero] = 0x1C
                }
                Else
                {
                    Local0 [Zero] = IAOR /* \IAOR */
                }

                CDAT = Zero
                Return (Local0)
            }

            Method (GBAT, 1, NotSerialized)
            {
                If ((Arg0 != Zero))
                {
                    Local0 = Package (0x02)
                        {
                            0x06, 
                            Zero
                        }
                }
                ElseIf (ECON)
                {
                    If (!^^PCI0.LPC0.EC0.BAIN)
                    {
                        Local0 = Package (0x02)
                            {
                                0x34, 
                                Zero
                            }
                        Return (Local0)
                    }

                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80) {}
                        }
                    DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.BDCL /* \_SB_.PCI0.LPC0.EC0_.BDCL */
                    DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.BDCH /* \_SB_.PCI0.LPC0.EC0_.BDCH */
                    DerefOf (Local0 [0x02]) [0x02] = ^^PCI0.LPC0.EC0.FCCL /* \_SB_.PCI0.LPC0.EC0_.FCCL */
                    DerefOf (Local0 [0x02]) [0x03] = ^^PCI0.LPC0.EC0.FCCH /* \_SB_.PCI0.LPC0.EC0_.FCCH */
                    DerefOf (Local0 [0x02]) [0x04] = ^^PCI0.LPC0.EC0.BRCL /* \_SB_.PCI0.LPC0.EC0_.BRCL */
                    DerefOf (Local0 [0x02]) [0x05] = ^^PCI0.LPC0.EC0.BRCH /* \_SB_.PCI0.LPC0.EC0_.BRCH */
                    DerefOf (Local0 [0x02]) [0x06] = ^^PCI0.LPC0.EC0.BMEL /* \_SB_.PCI0.LPC0.EC0_.BMEL */
                    DerefOf (Local0 [0x02]) [0x07] = ^^PCI0.LPC0.EC0.BMEH /* \_SB_.PCI0.LPC0.EC0_.BMEH */
                    DerefOf (Local0 [0x02]) [0x08] = ^^PCI0.LPC0.EC0.BCTL /* \_SB_.PCI0.LPC0.EC0_.BCTL */
                    DerefOf (Local0 [0x02]) [0x09] = ^^PCI0.LPC0.EC0.BCTH /* \_SB_.PCI0.LPC0.EC0_.BCTH */
                    DerefOf (Local0 [0x02]) [0x0A] = ^^PCI0.LPC0.EC0.BTPL /* \_SB_.PCI0.LPC0.EC0_.BTPL */
                    DerefOf (Local0 [0x02]) [0x0B] = ^^PCI0.LPC0.EC0.BTPH /* \_SB_.PCI0.LPC0.EC0_.BTPH */
                    DerefOf (Local0 [0x02]) [0x0C] = ^^PCI0.LPC0.EC0.BAVL /* \_SB_.PCI0.LPC0.EC0_.BAVL */
                    DerefOf (Local0 [0x02]) [0x0D] = ^^PCI0.LPC0.EC0.BAVH /* \_SB_.PCI0.LPC0.EC0_.BAVH */
                    DerefOf (Local0 [0x02]) [0x0E] = ^^PCI0.LPC0.EC0.BACL /* \_SB_.PCI0.LPC0.EC0_.BACL */
                    DerefOf (Local0 [0x02]) [0x0F] = ^^PCI0.LPC0.EC0.BACH /* \_SB_.PCI0.LPC0.EC0_.BACH */
                    DerefOf (Local0 [0x02]) [0x10] = ^^PCI0.LPC0.EC0.BDVL /* \_SB_.PCI0.LPC0.EC0_.BDVL */
                    DerefOf (Local0 [0x02]) [0x11] = ^^PCI0.LPC0.EC0.BDVH /* \_SB_.PCI0.LPC0.EC0_.BDVH */
                    DerefOf (Local0 [0x02]) [0x12] = ^^PCI0.LPC0.EC0.BSLB /* \_SB_.PCI0.LPC0.EC0_.BSLB */
                    DerefOf (Local0 [0x02]) [0x13] = ^^PCI0.LPC0.EC0.BSHB /* \_SB_.PCI0.LPC0.EC0_.BSHB */
                    DerefOf (Local0 [0x02]) [0x14] = ^^PCI0.LPC0.EC0.C1VL /* \_SB_.PCI0.LPC0.EC0_.C1VL */
                    DerefOf (Local0 [0x02]) [0x15] = ^^PCI0.LPC0.EC0.C1VH /* \_SB_.PCI0.LPC0.EC0_.C1VH */
                    DerefOf (Local0 [0x02]) [0x16] = ^^PCI0.LPC0.EC0.C2VL /* \_SB_.PCI0.LPC0.EC0_.C2VL */
                    DerefOf (Local0 [0x02]) [0x17] = ^^PCI0.LPC0.EC0.C2VH /* \_SB_.PCI0.LPC0.EC0_.C2VH */
                    DerefOf (Local0 [0x02]) [0x18] = ^^PCI0.LPC0.EC0.C3VL /* \_SB_.PCI0.LPC0.EC0_.C3VL */
                    DerefOf (Local0 [0x02]) [0x19] = ^^PCI0.LPC0.EC0.C3VH /* \_SB_.PCI0.LPC0.EC0_.C3VH */
                    DerefOf (Local0 [0x02]) [0x1A] = ^^PCI0.LPC0.EC0.C4VL /* \_SB_.PCI0.LPC0.EC0_.C4VL */
                    DerefOf (Local0 [0x02]) [0x1B] = ^^PCI0.LPC0.EC0.C4VH /* \_SB_.PCI0.LPC0.EC0_.C4VH */
                    Local7 = (^^PCI0.LPC0.EC0.BSNH << 0x08)
                    Local7 += ^^PCI0.LPC0.EC0.BSNL /* \_SB_.PCI0.LPC0.EC0_.BSNL */
                    Name (SERN, Buffer (0x06)
                    {
                         0x30, 0x30, 0x30, 0x30, 0x30, 0x20               // 00000 
                    })
                    Local6 = 0x04
                    While (Local7)
                    {
                        Divide (Local7, 0x0A, Local5, Local7)
                        SERN [Local6] = (Local5 + 0x30)
                        Local6--
                    }

                    CreateField (DerefOf (Local0 [0x02]), 0xE0, (SizeOf (SERN) * 0x08), 
                        BSNO)
                    BSNO = SERN /* \_SB_.WMID.GBAT.SERN */
                    Local7 = (^^PCI0.LPC0.EC0.BMDH << 0x08)
                    Local7 += ^^PCI0.LPC0.EC0.BMDL /* \_SB_.PCI0.LPC0.EC0_.BMDL */
                    Name (BMDN, Buffer (0x0A)
                    {
                        /* 0000 */  0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30,  // 00/00/00
                        /* 0008 */  0x30, 0x30                                       // 00
                    })
                    Local4 = ((Local7 >> 0x05) & 0x0F)
                    Local6 = One
                    While (Local4)
                    {
                        Divide (Local4, 0x0A, Local5, Local4)
                        BMDN [Local6] = (Local5 + 0x30)
                        Local6--
                    }

                    Local4 = (Local7 & 0x1F)
                    Local6 = 0x04
                    While (Local4)
                    {
                        Divide (Local4, 0x0A, Local5, Local4)
                        BMDN [Local6] = (Local5 + 0x30)
                        Local6--
                    }

                    Local4 = (Local7 >> 0x09)
                    Local4 += 0x07BC
                    Local6 = 0x09
                    While (Local4)
                    {
                        Divide (Local4, 0x0A, Local5, Local4)
                        BMDN [Local6] = (Local5 + 0x30)
                        Local6--
                    }

                    CreateField (DerefOf (Local0 [0x02]), 0x0110, (SizeOf (BMDN) * 0x08), 
                        BMNO)
                    BMNO = BMDN /* \_SB_.WMID.GBAT.BMDN */
                    DerefOf (Local0 [0x02]) [0x2C] = ^^PCI0.LPC0.EC0.MAN0 /* \_SB_.PCI0.LPC0.EC0_.MAN0 */
                    DerefOf (Local0 [0x02]) [0x2D] = ^^PCI0.LPC0.EC0.MAN1 /* \_SB_.PCI0.LPC0.EC0_.MAN1 */
                    DerefOf (Local0 [0x02]) [0x2E] = ^^PCI0.LPC0.EC0.MAN2 /* \_SB_.PCI0.LPC0.EC0_.MAN2 */
                    DerefOf (Local0 [0x02]) [0x2F] = ^^PCI0.LPC0.EC0.MAN3 /* \_SB_.PCI0.LPC0.EC0_.MAN3 */
                    DerefOf (Local0 [0x02]) [0x30] = ^^PCI0.LPC0.EC0.MAN4 /* \_SB_.PCI0.LPC0.EC0_.MAN4 */
                    DerefOf (Local0 [0x02]) [0x31] = ^^PCI0.LPC0.EC0.MAN5 /* \_SB_.PCI0.LPC0.EC0_.MAN5 */
                    DerefOf (Local0 [0x02]) [0x32] = ^^PCI0.LPC0.EC0.MAN6 /* \_SB_.PCI0.LPC0.EC0_.MAN6 */
                    DerefOf (Local0 [0x02]) [0x33] = ^^PCI0.LPC0.EC0.MAN7 /* \_SB_.PCI0.LPC0.EC0_.MAN7 */
                    DerefOf (Local0 [0x02]) [0x34] = ^^PCI0.LPC0.EC0.MAN8 /* \_SB_.PCI0.LPC0.EC0_.MAN8 */
                    DerefOf (Local0 [0x02]) [0x35] = ^^PCI0.LPC0.EC0.MAN9 /* \_SB_.PCI0.LPC0.EC0_.MAN9 */
                    DerefOf (Local0 [0x02]) [0x36] = ^^PCI0.LPC0.EC0.MANA /* \_SB_.PCI0.LPC0.EC0_.MANA */
                    DerefOf (Local0 [0x02]) [0x37] = ^^PCI0.LPC0.EC0.MANB /* \_SB_.PCI0.LPC0.EC0_.MANB */
                    CreateField (DerefOf (Local0 [0x02]), 0x01F0, 0x80, BCTN)
                    BCTN = ^^PCI0.LPC0.EC0.CTLB /* \_SB_.PCI0.LPC0.EC0_.CTLB */
                    DerefOf (Local0 [0x02]) [0x4F] = ^^PCI0.LPC0.EC0.BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                    DerefOf (Local0 [0x02]) [0x50] = ^^PCI0.LPC0.EC0.BDN1 /* \_SB_.PCI0.LPC0.EC0_.BDN1 */
                    DerefOf (Local0 [0x02]) [0x51] = ^^PCI0.LPC0.EC0.BDN2 /* \_SB_.PCI0.LPC0.EC0_.BDN2 */
                    DerefOf (Local0 [0x02]) [0x52] = ^^PCI0.LPC0.EC0.BDN3 /* \_SB_.PCI0.LPC0.EC0_.BDN3 */
                    DerefOf (Local0 [0x02]) [0x53] = ^^PCI0.LPC0.EC0.BDN4 /* \_SB_.PCI0.LPC0.EC0_.BDN4 */
                    DerefOf (Local0 [0x02]) [0x54] = ^^PCI0.LPC0.EC0.BDN5 /* \_SB_.PCI0.LPC0.EC0_.BDN5 */
                    DerefOf (Local0 [0x02]) [0x55] = ^^PCI0.LPC0.EC0.BDN6 /* \_SB_.PCI0.LPC0.EC0_.BDN6 */
                    DerefOf (Local0 [0x02]) [0x56] = ^^PCI0.LPC0.EC0.BDC0 /* \_SB_.PCI0.LPC0.EC0_.BDC0 */
                    DerefOf (Local0 [0x02]) [0x57] = ^^PCI0.LPC0.EC0.BDC1 /* \_SB_.PCI0.LPC0.EC0_.BDC1 */
                    DerefOf (Local0 [0x02]) [0x58] = ^^PCI0.LPC0.EC0.BDC2 /* \_SB_.PCI0.LPC0.EC0_.BDC2 */
                    DerefOf (Local0 [0x02]) [0x59] = ^^PCI0.LPC0.EC0.BDC3 /* \_SB_.PCI0.LPC0.EC0_.BDC3 */
                    DerefOf (Local0 [0x02]) [0x5A] = ^^PCI0.LPC0.EC0.BMAL /* \_SB_.PCI0.LPC0.EC0_.BMAL */
                    DerefOf (Local0 [0x02]) [0x5B] = ^^PCI0.LPC0.EC0.BMAH /* \_SB_.PCI0.LPC0.EC0_.BMAH */
                    DerefOf (Local0 [0x02]) [0x5C] = ^^PCI0.LPC0.EC0.BMDL /* \_SB_.PCI0.LPC0.EC0_.BMDL */
                    DerefOf (Local0 [0x02]) [0x5D] = ^^PCI0.LPC0.EC0.BMDH /* \_SB_.PCI0.LPC0.EC0_.BMDH */
                    DerefOf (Local0 [0x02]) [0x5E] = ^^PCI0.LPC0.EC0.BCCL /* \_SB_.PCI0.LPC0.EC0_.BCCL */
                    DerefOf (Local0 [0x02]) [0x5F] = ^^PCI0.LPC0.EC0.BCCH /* \_SB_.PCI0.LPC0.EC0_.BCCH */
                    DerefOf (Local0 [0x02]) [0x60] = ^^PCI0.LPC0.EC0.BCVL /* \_SB_.PCI0.LPC0.EC0_.BCVL */
                    DerefOf (Local0 [0x02]) [0x61] = ^^PCI0.LPC0.EC0.BCVH /* \_SB_.PCI0.LPC0.EC0_.BCVH */
                    DerefOf (Local0 [0x02]) [0x62] = ^^PCI0.LPC0.EC0.BVCL /* \_SB_.PCI0.LPC0.EC0_.BVCL */
                    DerefOf (Local0 [0x02]) [0x63] = ^^PCI0.LPC0.EC0.BVCH /* \_SB_.PCI0.LPC0.EC0_.BVCH */
                    DerefOf (Local0 [0x02]) [0x64] = ^^PCI0.LPC0.EC0.RTEL /* \_SB_.PCI0.LPC0.EC0_.RTEL */
                    DerefOf (Local0 [0x02]) [0x65] = ^^PCI0.LPC0.EC0.RTEH /* \_SB_.PCI0.LPC0.EC0_.RTEH */
                    DerefOf (Local0 [0x02]) [0x66] = ^^PCI0.LPC0.EC0.ATEL /* \_SB_.PCI0.LPC0.EC0_.ATEL */
                    DerefOf (Local0 [0x02]) [0x67] = ^^PCI0.LPC0.EC0.ATEH /* \_SB_.PCI0.LPC0.EC0_.ATEH */
                    DerefOf (Local0 [0x02]) [0x68] = ^^PCI0.LPC0.EC0.ATFL /* \_SB_.PCI0.LPC0.EC0_.ATFL */
                    DerefOf (Local0 [0x02]) [0x69] = ^^PCI0.LPC0.EC0.ATFH /* \_SB_.PCI0.LPC0.EC0_.ATFH */
                    DerefOf (Local0 [0x02]) [0x6A] = One
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                }

                Return (Local0)
            }

            Method (GBBT, 0, NotSerialized)
            {
                Debug = "Get Bezel Button and Hotkey Table ----"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80)
                        {
                            /* 0000 */  0x31, 0x01, 0x9B, 0x01, 0xB6, 0x01, 0xB7, 0x01,  // 1.......
                            /* 0008 */  0xAE, 0x01, 0x67, 0x02, 0x65, 0x02, 0x66, 0x02,  // ..g.e.f.
                            /* 0010 */  0x68, 0x02, 0x6B, 0x02, 0x6C, 0x02, 0x6A, 0x02,  // h.k.l.j.
                            /* 0018 */  0x9D, 0x01, 0x63, 0x02, 0xFF, 0x01, 0xFF, 0xFF,  // ..c.....
                            /* 0020 */  0x41, 0x21, 0x00, 0x00                           // A!..
                        }
                    }
                Return (Local0)
            }

            Method (GHKS, 0, NotSerialized)
            {
                Debug = "Get Hotkey State ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.SHKM /* \_SB_.PCI0.LPC0.EC0_.SHKM */
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                }

                Return (Local0)
            }

            Method (SHKS, 1, NotSerialized)
            {
                Debug = "Set Hotkey State ---"
                If (ECON)
                {
                    ^^PCI0.LPC0.EC0.SHKM = Arg0
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GHKF, 0, NotSerialized)
            {
                Debug = "Get Hotkey Function ---"
                If (ECON)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           // ....
                            }
                        }
                    DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.HKIL /* \_SB_.PCI0.LPC0.EC0_.HKIL */
                    DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.HKIH /* \_SB_.PCI0.LPC0.EC0_.HKIH */
                    Local1 = ^^PCI0.LPC0.EC0.HKIH /* \_SB_.PCI0.LPC0.EC0_.HKIH */
                    Local2 = ^^PCI0.LPC0.EC0.HKIL /* \_SB_.PCI0.LPC0.EC0_.HKIL */
                    ^^PCI0.LPC0.EC0.HKIH = Zero
                    ^^PCI0.LPC0.EC0.HKIL = Zero
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                }

                Return (Local0)
            }

            Method (SHKF, 1, NotSerialized)
            {
                Debug = "Set Hotkey Function ----"
                If (ECON)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           // ....
                            }
                        }
                    Local1 = Arg0
                    DerefOf (Local0 [0x02]) [Zero] = Local1
                    DerefOf (Local0 [0x02]) [One] = (Local1 >> 0x08
                        )
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                }

                Return (Local0)
            }

            Method (GLBB, 0, NotSerialized)
            {
                Debug = "Get Last Bezel Button ---"
                If (ECON)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           // ....
                            }
                        }
                    DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.HKIL /* \_SB_.PCI0.LPC0.EC0_.HKIL */
                    DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.HKIH /* \_SB_.PCI0.LPC0.EC0_.HKIH */
                    Local1 = ^^PCI0.LPC0.EC0.HKIH /* \_SB_.PCI0.LPC0.EC0_.HKIH */
                    Local2 = ^^PCI0.LPC0.EC0.HKIL /* \_SB_.PCI0.LPC0.EC0_.HKIL */
                    ^^PCI0.LPC0.EC0.HKIH = Zero
                    ^^PCI0.LPC0.EC0.HKIL = Zero
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                }

                Return (Local0)
            }

            Method (GFRT, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = Zero
                Local2 = Zero
                Local3 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                Local4 = Zero
                Local0 |= 0x02
                Local0 |= 0x10
                Local0 |= 0x20
                If ((FTSP & One))
                {
                    Local0 |= 0x80
                }

                If ((FTSP & 0x02))
                {
                    Local1 |= One
                }

                Local1 |= 0x08
                Local1 |= 0x10
                Local1 |= 0x40
                Local4 = (PREV & 0xFFFF)
                If ((Local4 != 0x3031))
                {
                    Local2 |= 0x04
                }

                Local2 |= 0x08
                DerefOf (Local3 [0x02]) [Zero] = Local0
                DerefOf (Local3 [0x02]) [One] = Local1
                DerefOf (Local3 [0x02]) [0x02] = Local2
                Return (Local3)
            }

            Method (GSAS, 0, NotSerialized)
            {
                Debug = "Get Smart Adaptor Status ----"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPC0.EC0.SADS /* \_SB_.PCI0.LPC0.EC0_.SADS */
                    DerefOf (Local0 [0x02]) [Zero] = Local1
                }

                Return (Local0)
            }

            Method (GWSD, 0, NotSerialized)
            {
                Debug = "Get HP Warranty Start Date ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x08, 
                        Buffer (0x08)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }
                DerefOf (Local0 [0x02]) [Zero] = WSDY /* \WSDY */
                DerefOf (Local0 [0x02]) [One] = (WSDY >> 0x08
                    )
                DerefOf (Local0 [0x02]) [0x02] = (WSDY >> 0x10
                    )
                DerefOf (Local0 [0x02]) [0x03] = (WSDY >> 0x18
                    )
                DerefOf (Local0 [0x02]) [0x04] = WSDM /* \WSDM */
                DerefOf (Local0 [0x02]) [0x05] = (WSDM >> 0x08
                    )
                DerefOf (Local0 [0x02]) [0x06] = WSDD /* \WSDD */
                DerefOf (Local0 [0x02]) [0x07] = (WSDD >> 0x08
                    )
                Return (Local0)
            }

            Method (SWSD, 3, NotSerialized)
            {
                Debug = "Set HP Warranty Start Date ---"
                WSDY = Arg0
                WSDM = Arg1
                WSDD = Arg2
                SSMP = 0xD4
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GWDI, 0, NotSerialized)
            {
                Debug = "Get Wireless Device Info ---"
                If ((BTLS && (WIRE == Zero)))
                {
                    ^^PCI0.LPC0.EC0.WANE = WLAN /* \WLAN */
                    ^^PCI0.LPC0.EC0.BUTE = BTTH /* \BTTH */
                }

                WIRE = One
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                DerefOf (Local0 [0x02]) [Zero] = One
                DerefOf (Local0 [0x02]) [One] = Zero
                DerefOf (Local0 [0x02]) [0x02] = Zero
                DerefOf (Local0 [0x02]) [0x03] = Zero
                DerefOf (Local0 [0x02]) [0x04] = Zero
                DerefOf (Local0 [0x02]) [0x05] = Zero
                Local1 = 0x0F
                Local3 = Zero
                If (((WLVD != Zero) && (WLDD != Zero)))
                {
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    Local2 = (WLVD & 0xFF)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLVD >> 0x08)
                    Local2 &= 0xFF
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLDD & 0xFF)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLDD >> 0x08)
                    Local2 &= 0xFF
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLSV & 0xFF)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLSV >> 0x08)
                    Local2 &= 0xFF
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLSS & 0xFF)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (WLSS >> 0x08)
                    Local2 &= 0xFF
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    Local2 = Zero
                    Local2 = ^^PCI0.LPC0.EC0.WANE /* \_SB_.PCI0.LPC0.EC0_.WANE */
                    Local2 |= (WLAN << One)
                    Local2 |= 0x04
                    Local2 |= (BTLS << 0x03)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    Local3++
                }

                If (((BTVD != Zero) && (BTDD != Zero)))
                {
                    DerefOf (Local0 [0x02]) [Local1 += One] = One
                    DerefOf (Local0 [0x02]) [Local1 += One] = One
                    Local2 = (BTVD & 0xFF)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (BTVD >> 0x08)
                    Local2 &= 0xFF
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (BTDD & 0xFF)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    Local2 = (BTDD >> 0x08)
                    Local2 &= 0xFF
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    If (COMB)
                    {
                        DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Local1 += One] = One
                    }

                    Local2 = Zero
                    Local2 = ^^PCI0.LPC0.EC0.BUTE /* \_SB_.PCI0.LPC0.EC0_.BUTE */
                    Local2 |= (BTTH << One)
                    Local2 |= 0x04
                    Local2 |= (BTLS << 0x03)
                    DerefOf (Local0 [0x02]) [Local1 += One] = Local2
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    DerefOf (Local0 [0x02]) [Local1 += One] = Zero
                    Local3++
                }

                DerefOf (Local0 [0x02]) [0x06] = Local3
                DerefOf (Local0 [0x02]) [0x07] = Local3
                Return (Local0)
            }

            Method (SWDS, 1, NotSerialized)
            {
                Debug = "Set Wirless Device State----"
                WIRE = One
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (!BTLS)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Zero
                        }
                    Return (Local0)
                }

                Local1 = Arg0
                Local2 = (Local1 >> 0x10)
                Local2 &= 0xFF
                Local3 = (Local1 >> 0x18)
                Local3 &= 0xFF
                If ((Local2 == Zero))
                {
                    WLAN = Local3
                    ^^PCI0.LPC0.EC0.WANE = Local3
                    If (COMB)
                    {
                        BTTH = Local3
                        ^^PCI0.LPC0.EC0.BUTE = Local3
                    }
                }

                If ((Local2 == One))
                {
                    BTTH = Local3
                    ^^PCI0.LPC0.EC0.BUTE = Local3
                }

                If ((Local2 == 0xFE))
                {
                    WLAN = Local3
                    BTTH = Local3
                    ^^PCI0.LPC0.EC0.WANE = Local3
                    ^^PCI0.LPC0.EC0.BUTE = Local3
                }

                If ((Local2 == 0xFF))
                {
                    WLAN = Local3
                    BTTH = Local3
                    ^^PCI0.LPC0.EC0.WANE = Local3
                    ^^PCI0.LPC0.EC0.BUTE = Local3
                    BTLS = Local3
                }

                WEID = 0x05
                WMED = Zero
                Notify (WMID, 0x80) // Status Change
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Return (Local0)
            }

            Method (GSDC, 0, NotSerialized)
            {
                Debug = "Get System Diagnostic launch command ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x1D, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80) {}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GSDC.HWD1 */
                Return (Local0)
            }

            Method (SDLC, 1, NotSerialized)
            {
                Debug = "Set System Diagnostic launch command ---"
                Local0 = Buffer (0x80) {}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x1D, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBUS, 0, NotSerialized)
            {
                Local2 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If ((HBUC && One))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Zero
                }

                Local1 = HBUS /* \HBUS */
                DerefOf (Local2 [0x02]) [Zero] = Local0
                DerefOf (Local2 [0x02]) [One] = Local1
                Return (Local2)
            }

            Method (SBUS, 1, NotSerialized)
            {
                HBUC = Arg0
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBCC, 0, NotSerialized)
            {
                Debug = "Get Battery Charge Control ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.BAIN)
                    {
                        If ((^^PCI0.LPC0.EC0.BCC1 == One))
                        {
                            DerefOf (Local0 [0x02]) [Zero] = Zero
                        }
                        ElseIf ((^^PCI0.LPC0.EC0.BCC1 == 0x02))
                        {
                            DerefOf (Local0 [0x02]) [Zero] = One
                        }
                        Else
                        {
                            DerefOf (Local0 [0x02]) [Zero] = 0x02
                        }
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Zero] = 0xFF
                    }

                    DerefOf (Local0 [0x02]) [One] = 0xFF
                }
                Else
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (SBCC, 1, NotSerialized)
            {
                Debug = "Set Battery Charge Control ---"
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local1 = (Arg0 & 0xFF)
                Local2 = ((Arg0 >> 0x08) & 0xFF)
                If (ECON)
                {
                    If ((Local1 == Zero))
                    {
                        If (^^PCI0.LPC0.EC0.BAIN)
                        {
                            If ((Local2 == Zero))
                            {
                                ^^PCI0.LPC0.EC0.BCC1 = One
                            }
                            ElseIf ((Local2 == One))
                            {
                                ^^PCI0.LPC0.EC0.BCC1 = 0x02
                            }
                            Else
                            {
                                ^^PCI0.LPC0.EC0.BCC1 = 0x04
                            }

                            Local0 [Zero] = Zero
                        }
                        Else
                        {
                            Local0 [Zero] = 0x34
                        }
                    }
                    ElseIf ((Local1 == 0x63))
                    {
                        If ((Local2 == Zero))
                        {
                            ^^PCI0.LPC0.EC0.BCC1 = One
                        }
                        ElseIf ((Local2 == One))
                        {
                            ^^PCI0.LPC0.EC0.BCC1 = 0x04
                        }
                        Else
                        {
                            ^^PCI0.LPC0.EC0.BCC1 = 0x02
                        }

                        Local0 [Zero] = Zero
                    }
                    Else
                    {
                        Local0 [Zero] = 0x34
                    }
                }
                Else
                {
                    Local0 [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (GTDC, 1, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                Local1 = (Arg0 & 0xFF)
                SGWC = One
                SMB0 = 0xCA
                If (ECON)
                {
                    If ((Local1 == Zero))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.CTMP /* \_SB_.PCI0.LPC0.EC0_.CTMP */
                    }
                    ElseIf ((Local1 == One))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.GTMP /* \_SB_.PCI0.LPC0.EC0_.GTMP */
                    }
                    ElseIf ((Local1 == 0x02)) {}
                    ElseIf ((Local1 == 0x03))
                    {
                        Local2 = Zero
                        Local2 = ^^PCI0.LPC0.EC0.FSDH /* \_SB_.PCI0.LPC0.EC0_.FSDH */
                        Local2 <<= 0x08
                        Local2 |= ^^PCI0.LPC0.EC0.FSDL /* \_SB_.PCI0.LPC0.EC0_.FSDL */
                        Local2 *= 0x64
                        Local2 = (Local2 / 0x12C0)
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = Local2
                    }
                    ElseIf ((Local1 == 0x04))
                    {
                        Local2 = Zero
                        Local2 = ^^PCI0.LPC0.EC0.BTPH /* \_SB_.PCI0.LPC0.EC0_.BTPH */
                        Local2 <<= 0x08
                        Local2 |= ^^PCI0.LPC0.EC0.BTPL /* \_SB_.PCI0.LPC0.EC0_.BTPL */
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = Local2
                    }
                    ElseIf ((Local1 == 0x06))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        If ((^^PCI0.LPC0.EC0.CPUT != Zero))
                        {
                            DerefOf (Local0 [0x02]) [One] = One
                        }
                        Else
                        {
                            DerefOf (Local0 [0x02]) [One] = Zero
                        }
                    }
                    ElseIf ((Local1 == 0x10))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = CTP1 /* \CTP1 */
                        DerefOf (Local0 [0x02]) [0x02] = CTP2 /* \CTP2 */
                        DerefOf (Local0 [0x02]) [0x03] = CTP3 /* \CTP3 */
                    }
                    ElseIf ((Local1 == 0x11))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = GTP1 /* \GTP1 */
                        DerefOf (Local0 [0x02]) [0x02] = GTP2 /* \GTP2 */
                    }
                    ElseIf ((Local1 == 0x12)) {}
                    ElseIf ((Local1 == 0x13))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = FTP1 /* \FTP1 */
                        DerefOf (Local0 [0x02]) [0x02] = FTP2 /* \FTP2 */
                        DerefOf (Local0 [0x02]) [0x03] = FTP3 /* \FTP3 */
                        DerefOf (Local0 [0x02]) [0x04] = FTP4 /* \FTP4 */
                        DerefOf (Local0 [0x02]) [0x05] = FTP5 /* \FTP5 */
                    }
                    ElseIf ((Local1 == 0x14))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = BTP1 /* \BTP1 */
                        DerefOf (Local0 [0x02]) [0x02] = BTP2 /* \BTP2 */
                    }
                    ElseIf ((Local1 == 0x15)) {}
                    ElseIf ((Local1 == 0x20))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = CPTV /* \CPTV */
                    }
                    ElseIf ((Local1 == 0x21))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = GPTV /* \GPTV */
                    }
                    ElseIf ((Local1 == 0x22)) {}
                    ElseIf ((Local1 == 0x23))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = FNTV /* \FNTV */
                    }
                    ElseIf ((Local1 == 0x24))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = One
                        DerefOf (Local0 [0x02]) [One] = BTTV /* \BTTV */
                    }
                    ElseIf ((Local1 == 0xAA))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = TMTS /* \TMTS */
                    }
                }

                Return (Local0)
            }

            Method (STDC, 1, NotSerialized)
            {
                CreateByteField (Arg0, Zero, HWD0)
                CreateByteField (Arg0, One, HWD1)
                CreateByteField (Arg0, 0x02, HWD2)
                CreateByteField (Arg0, 0x03, HWD3)
                CreateByteField (Arg0, 0x04, HWD4)
                CreateByteField (Arg0, 0x05, HWD5)
                CreateByteField (Arg0, 0x06, HWD6)
                Name (SUCC, Zero)
                Local0 = Zero
                If (ECON)
                {
                    If ((HWD0 == 0x10))
                    {
                        CTP1 = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        CTP2 = HWD3 /* \_SB_.WMID.STDC.HWD3 */
                        CTP3 = HWD4 /* \_SB_.WMID.STDC.HWD4 */
                        If ((HWD1 >= 0x05))
                        {
                            SUCC = Zero
                        }
                        Else
                        {
                            SUCC = One
                        }
                    }
                    ElseIf ((HWD0 == 0x11))
                    {
                        GTP1 = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        GTP2 = HWD3 /* \_SB_.WMID.STDC.HWD3 */
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x12))
                    {
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x13))
                    {
                        FTP1 = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        FTP2 = HWD3 /* \_SB_.WMID.STDC.HWD3 */
                        FTP3 = HWD4 /* \_SB_.WMID.STDC.HWD4 */
                        FTP4 = HWD5 /* \_SB_.WMID.STDC.HWD5 */
                        FTP5 = HWD6 /* \_SB_.WMID.STDC.HWD6 */
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x14))
                    {
                        BTP1 = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        BTP2 = HWD3 /* \_SB_.WMID.STDC.HWD3 */
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x15))
                    {
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x20))
                    {
                        CPTV = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        TMTS = One
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x21))
                    {
                        GPTV = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        TMTS = One
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x22))
                    {
                        If ((HWD1 >= 0x05))
                        {
                            SUCC = Zero
                        }
                        Else
                        {
                            SUCC = One
                        }
                    }
                    ElseIf ((HWD0 == 0x23))
                    {
                        FNTV = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        TMTS = One
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0x24))
                    {
                        BTTV = HWD2 /* \_SB_.WMID.STDC.HWD2 */
                        TMTS = One
                        SUCC = One
                    }
                    ElseIf ((HWD0 == 0xAA))
                    {
                        TMTS = Zero
                        CPTV = 0xFF
                        GPTV = 0xFF
                        FNTV = 0xFF
                        BTTV = 0xFF
                        SUCC = One
                    }
                }

                If (SUCC)
                {
                    SGWC = 0x02
                    SMB0 = 0xCA
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x06, 
                        Zero
                    })
                }
            }

            Method (GFCC, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x29, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80) {}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GFCC.HWD1 */
                Return (Local0)
            }

            Method (SFCC, 1, NotSerialized)
            {
                Local0 = Buffer (0x80) {}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x29, 0x02)
                ^^PCI0.LPC0.EC0.ACLS = Zero
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GPCS, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x2A, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80) {}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GPCS.HWD1 */
                Return (Local0)
            }

            Method (SPCS, 1, NotSerialized)
            {
                Local0 = Buffer (0x80) {}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x2A, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBCO, 0, NotSerialized)
            {
                Debug = "Get the Battery charge control Override ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    ^^PCI0.LPC0.EC0.SCMD = One
                    ^^PCI0.LPC0.EC0.MCMD = 0x2B
                    Sleep (0xC8)
                    If (((^^PCI0.LPC0.EC0.MCMD == Zero) && (^^PCI0.LPC0.EC0.SCMD == Zero)))
                    {
                        If (((^^PCI0.LPC0.EC0.BCD0 == 0x37) || (^^PCI0.LPC0.EC0.BCD1 == 0x37)))
                        {
                            Local0 [Zero] = 0x37
                        }
                        Else
                        {
                            DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.BCD0 /* \_SB_.PCI0.LPC0.EC0_.BCD0 */
                            DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.BCD1 /* \_SB_.PCI0.LPC0.EC0_.BCD1 */
                        }
                    }
                    Else
                    {
                        Local0 [Zero] = 0x36
                    }
                }
                Else
                {
                    Local0 [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (SBCO, 1, NotSerialized)
            {
                Debug = "Set Battery charge control override ---"
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local1 = (Arg0 & 0xFF)
                Local2 = ((Arg0 >> 0x08) & 0xFF)
                If (ECON)
                {
                    If ((Local1 == Zero))
                    {
                        If (^^PCI0.LPC0.EC0.BAIN)
                        {
                            If (((^^PCI0.LPC0.EC0.MCMD == Zero) && (^^PCI0.LPC0.EC0.SCMD == Zero)))
                            {
                                ^^PCI0.LPC0.EC0.BCD0 = Local1
                                ^^PCI0.LPC0.EC0.BCD1 = Local2
                                ^^PCI0.LPC0.EC0.SCMD = 0x02
                                ^^PCI0.LPC0.EC0.MCMD = 0x2B
                                Local0 [Zero] = Zero
                            }
                            Else
                            {
                                Local0 [Zero] = 0x36
                            }
                        }
                        Else
                        {
                            Local0 [Zero] = 0x34
                        }
                    }
                    Else
                    {
                        Local0 [Zero] = 0x34
                    }
                }
                Else
                {
                    Local0 [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (GTCS, 0, NotSerialized)
            {
                Debug = "Get Thermal Control Status ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    ^^PCI0.LPC0.EC0.SCMD = One
                    ^^PCI0.LPC0.EC0.MCMD = 0x2C
                    Sleep (0xC8)
                    If (((^^PCI0.LPC0.EC0.MCMD == Zero) && (^^PCI0.LPC0.EC0.SCMD == Zero)))
                    {
                        If (((^^PCI0.LPC0.EC0.BCD0 == 0x37) || (^^PCI0.LPC0.EC0.BCD1 == 0x37)))
                        {
                            Local0 [Zero] = 0x37
                        }
                        Else
                        {
                            DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.BCD0 /* \_SB_.PCI0.LPC0.EC0_.BCD0 */
                            DerefOf (Local0 [0x02]) [One] = ^^PCI0.LPC0.EC0.BCD1 /* \_SB_.PCI0.LPC0.EC0_.BCD1 */
                            DerefOf (Local0 [0x02]) [0x02] = ^^PCI0.LPC0.EC0.BCD2 /* \_SB_.PCI0.LPC0.EC0_.BCD2 */
                        }
                    }
                    Else
                    {
                        Local0 [Zero] = 0x36
                    }
                }
                Else
                {
                    Local0 [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (STCS, 1, NotSerialized)
            {
                Debug = "Set Thermal Control State ---"
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local1 = ((Arg0 >> 0x08) & 0xFF)
                Local2 = ((Arg0 >> 0x10) & 0xFF)
                If (ECON)
                {
                    If (((^^PCI0.LPC0.EC0.MCMD == Zero) && (^^PCI0.LPC0.EC0.SCMD == Zero)))
                    {
                        ^^PCI0.LPC0.EC0.BCD1 = Local1
                        ^^PCI0.LPC0.EC0.BCD2 = Local2
                        ^^PCI0.LPC0.EC0.SCMD = 0x02
                        ^^PCI0.LPC0.EC0.MCMD = 0x2C
                        Local0 [Zero] = Zero
                    }
                    Else
                    {
                        Local0 [Zero] = 0x36
                    }
                }
                Else
                {
                    Local0 [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (GPST, 0, NotSerialized)
            {
                SGWC = 0x03
                SSMP = 0xCB
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                DerefOf (Local0 [0x02]) [Zero] = 0x1D
                DerefOf (Local0 [0x02]) [One] = TBCD (PSH7)
                DerefOf (Local0 [0x02]) [0x02] = TBCD (PSM7)
                DerefOf (Local0 [0x02]) [0x03] = TBCD (PEH7)
                DerefOf (Local0 [0x02]) [0x04] = TBCD (PEM7)
                DerefOf (Local0 [0x02]) [0x05] = TBCD (PSH1)
                DerefOf (Local0 [0x02]) [0x06] = TBCD (PSM1)
                DerefOf (Local0 [0x02]) [0x07] = TBCD (PEH1)
                DerefOf (Local0 [0x02]) [0x08] = TBCD (PEM1)
                DerefOf (Local0 [0x02]) [0x09] = TBCD (PSH2)
                DerefOf (Local0 [0x02]) [0x0A] = TBCD (PSM2)
                DerefOf (Local0 [0x02]) [0x0B] = TBCD (PEH2)
                DerefOf (Local0 [0x02]) [0x0C] = TBCD (PEM2)
                DerefOf (Local0 [0x02]) [0x0D] = TBCD (PSH3)
                DerefOf (Local0 [0x02]) [0x0E] = TBCD (PSM3)
                DerefOf (Local0 [0x02]) [0x0F] = TBCD (PEH3)
                DerefOf (Local0 [0x02]) [0x10] = TBCD (PEM3)
                DerefOf (Local0 [0x02]) [0x11] = TBCD (PSH4)
                DerefOf (Local0 [0x02]) [0x12] = TBCD (PSM4)
                DerefOf (Local0 [0x02]) [0x13] = TBCD (PEH4)
                DerefOf (Local0 [0x02]) [0x14] = TBCD (PEM4)
                DerefOf (Local0 [0x02]) [0x15] = TBCD (PSH5)
                DerefOf (Local0 [0x02]) [0x16] = TBCD (PSM5)
                DerefOf (Local0 [0x02]) [0x17] = TBCD (PEH5)
                DerefOf (Local0 [0x02]) [0x18] = TBCD (PEM5)
                DerefOf (Local0 [0x02]) [0x19] = TBCD (PSH6)
                DerefOf (Local0 [0x02]) [0x1A] = TBCD (PSM6)
                DerefOf (Local0 [0x02]) [0x1B] = TBCD (PEH6)
                DerefOf (Local0 [0x02]) [0x1C] = TBCD (PEM6)
                Return (Local0)
            }

            Method (SPST, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                CreateByteField (Arg0, Zero, NBTE)
                If ((NBTE != 0x1D))
                {
                    Local0 [Zero] = 0x06
                    Return (Local0)
                }

                CreateByteField (Arg0, One, DA01)
                CreateByteField (Arg0, 0x02, DA02)
                CreateByteField (Arg0, 0x03, DA03)
                CreateByteField (Arg0, 0x04, DA04)
                CreateByteField (Arg0, 0x05, DA05)
                CreateByteField (Arg0, 0x06, DA06)
                CreateByteField (Arg0, 0x07, DA07)
                CreateByteField (Arg0, 0x08, DA08)
                CreateByteField (Arg0, 0x09, DA09)
                CreateByteField (Arg0, 0x0A, DA10)
                CreateByteField (Arg0, 0x0B, DA11)
                CreateByteField (Arg0, 0x0C, DA12)
                CreateByteField (Arg0, 0x0D, DA13)
                CreateByteField (Arg0, 0x0E, DA14)
                CreateByteField (Arg0, 0x0F, DA15)
                CreateByteField (Arg0, 0x10, DA16)
                CreateByteField (Arg0, 0x11, DA17)
                CreateByteField (Arg0, 0x12, DA18)
                CreateByteField (Arg0, 0x13, DA19)
                CreateByteField (Arg0, 0x14, DA20)
                CreateByteField (Arg0, 0x15, DA21)
                CreateByteField (Arg0, 0x16, DA22)
                CreateByteField (Arg0, 0x17, DA23)
                CreateByteField (Arg0, 0x18, DA24)
                CreateByteField (Arg0, 0x19, DA25)
                CreateByteField (Arg0, 0x1A, DA26)
                CreateByteField (Arg0, 0x1B, DA27)
                CreateByteField (Arg0, 0x1C, DA28)
                Local6 = Zero
                Local7 = Zero
                Local1 = HTOM (FBCD (DA05), FBCD (DA06))
                Local2 = HTOM (FBCD (DA07), FBCD (DA08))
                Local3 = HTOM (BSH1, BSM1)
                Local4 = HTOM (BEH1, BEM1)
                Local6 |= TMCK (FBCD (DA05), FBCD (DA06), FBCD (DA07), FBCD (DA08))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA09), FBCD (DA10))
                Local2 = HTOM (FBCD (DA11), FBCD (DA12))
                Local3 = HTOM (BSH2, BSM2)
                Local4 = HTOM (BEH2, BEM2)
                Local6 |= TMCK (FBCD (DA09), FBCD (DA10), FBCD (DA11), FBCD (DA12))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA13), FBCD (DA14))
                Local2 = HTOM (FBCD (DA15), FBCD (DA16))
                Local3 = HTOM (BSH3, BSM3)
                Local4 = HTOM (BEH3, BEM3)
                Local6 |= TMCK (FBCD (DA13), FBCD (DA14), FBCD (DA15), FBCD (DA16))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA17), FBCD (DA18))
                Local2 = HTOM (FBCD (DA19), FBCD (DA20))
                Local3 = HTOM (BSH4, BSM4)
                Local4 = HTOM (BEH4, BEM4)
                Local6 |= TMCK (FBCD (DA17), FBCD (DA18), FBCD (DA19), FBCD (DA20))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA21), FBCD (DA22))
                Local2 = HTOM (FBCD (DA23), FBCD (DA24))
                Local3 = HTOM (BSH5, BSM5)
                Local4 = HTOM (BEH5, BEM5)
                Local6 |= TMCK (FBCD (DA21), FBCD (DA22), FBCD (DA23), FBCD (DA24))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA25), FBCD (DA26))
                Local2 = HTOM (FBCD (DA27), FBCD (DA28))
                Local3 = HTOM (BSH6, BSM6)
                Local4 = HTOM (BEH6, BEM6)
                Local6 |= TMCK (FBCD (DA25), FBCD (DA26), FBCD (DA27), FBCD (DA28))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA01), FBCD (DA02))
                Local2 = HTOM (FBCD (DA03), FBCD (DA04))
                Local3 = HTOM (BSH7, BSM7)
                Local4 = HTOM (BEH7, BEM7)
                Local6 |= TMCK (FBCD (DA01), FBCD (DA02), FBCD (DA03), FBCD (DA04))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                If ((Local6 != Zero))
                {
                    Local0 [Zero] = 0x06
                    Return (Local0)
                }

                If ((Local7 != Zero))
                {
                    Local0 [Zero] = 0x39
                    Return (Local0)
                }

                PSH7 = FBCD (DA01)
                PSM7 = FBCD (DA02)
                PEH7 = FBCD (DA03)
                PEM7 = FBCD (DA04)
                PSH1 = FBCD (DA05)
                PSM1 = FBCD (DA06)
                PEH1 = FBCD (DA07)
                PEM1 = FBCD (DA08)
                PSH2 = FBCD (DA09)
                PSM2 = FBCD (DA10)
                PEH2 = FBCD (DA11)
                PEM2 = FBCD (DA12)
                PSH3 = FBCD (DA13)
                PSM3 = FBCD (DA14)
                PEH3 = FBCD (DA15)
                PEM3 = FBCD (DA16)
                PSH4 = FBCD (DA17)
                PSM4 = FBCD (DA18)
                PEH4 = FBCD (DA19)
                PEM4 = FBCD (DA20)
                PSH5 = FBCD (DA21)
                PSM5 = FBCD (DA22)
                PEH5 = FBCD (DA23)
                PEM5 = FBCD (DA24)
                PSH6 = FBCD (DA25)
                PSM6 = FBCD (DA26)
                PEH6 = FBCD (DA27)
                PEM6 = FBCD (DA28)
                If (ECON)
                {
                    SPTE (0x07, PSH7, PSM7, PEH7, PEM7)
                    SPTE (One, PSH1, PSM1, PEH1, PEM1)
                    SPTE (0x02, PSH2, PSM2, PEH2, PEM2)
                    SPTE (0x03, PSH3, PSM3, PEH3, PEM3)
                    SPTE (0x04, PSH4, PSM4, PEH4, PEM4)
                    SPTE (0x05, PSH5, PSM5, PEH5, PEM5)
                    SPTE (0x06, PSH6, PSM6, PEH6, PEM6)
                }

                SGWC = 0x04
                SSMP = 0xCB
                Return (Local0)
            }

            Method (SPTE, 5, NotSerialized)
            {
                Local1 = Zero
                Local1 = Arg0
                Local1 <<= 0x04
                Local1 |= 0x02
                If ((Arg1 != 0xFF))
                {
                    Local1 |= 0x80
                }

                ^^PCI0.LPC0.EC0.SCMD = Local1
                ^^PCI0.LPC0.EC0.BCD0 = Arg1
                ^^PCI0.LPC0.EC0.BCD1 = Arg2
                ^^PCI0.LPC0.EC0.BCD2 = Arg3
                ^^PCI0.LPC0.EC0.BCD3 = Arg4
                ^^PCI0.LPC0.EC0.MCMD = 0x36
                While (^^PCI0.LPC0.EC0.MCMD)
                {
                    Sleep (One)
                }
            }

            Method (TBCD, 1, NotSerialized)
            {
                If ((Arg0 == 0xFF))
                {
                    Return (0xFF)
                }
                Else
                {
                    Return (ToBCD (Arg0))
                }
            }

            Method (FBCD, 1, NotSerialized)
            {
                If ((Arg0 == 0xFF))
                {
                    Return (0xFF)
                }
                Else
                {
                    Return (FromBCD (Arg0))
                }
            }

            Method (TCMP, 4, NotSerialized)
            {
                Local0 = Zero
                If (((Arg0 == 0xFFFF) || (Arg1 == 0xFFFF)))
                {
                    Return (Local0)
                }

                If (((Arg2 == 0xFFFF) || (Arg3 == 0xFFFF)))
                {
                    Return (Local0)
                }

                If ((Arg1 < Arg2))
                {
                    Local0 = Zero
                }

                If ((Arg3 < Arg0))
                {
                    Local0 = Zero
                }

                If (((Arg0 <= Arg2) && (Arg2 <= Arg1)))
                {
                    Local0 = One
                }

                If (((Arg2 <= Arg0) && (Arg0 <= Arg3)))
                {
                    Local0 = One
                }

                Return (Local0)
            }

            Method (HTOM, 2, NotSerialized)
            {
                If (((Arg0 == 0xFF) || (Arg1 == 0xFF)))
                {
                    Return (0xFFFF)
                }

                Local1 = (Arg0 * 0x3C)
                Local0 = (Local1 + Arg1)
                Return (Local0)
            }

            Method (TMCK, 4, NotSerialized)
            {
                Local0 = Zero
                If (((Arg0 == 0xFF) && (Arg1 == 0xFF)))
                {
                    If (((Arg2 == 0xFF) && (Arg3 == 0xFF)))
                    {
                        Return (Local0)
                    }
                }

                If ((Arg0 > 0x17))
                {
                    Local0 = One
                }

                If ((Arg1 > 0x3B))
                {
                    Local0 = One
                }

                If ((Arg2 > 0x17))
                {
                    Local0 = One
                }

                If ((Arg3 > 0x3B))
                {
                    Local0 = One
                }

                If ((HTOM (Arg2, Arg3) < HTOM (Arg0, Arg1)))
                {
                    Local0 = One
                }

                Return (Local0)
            }

            Method (RPTE, 0, NotSerialized)
            {
                SGWC = 0x03
                SSMP = 0xCB
                If (ECON)
                {
                    SPTE (0x07, PSH7, PSM7, PEH7, PEM7)
                    SPTE (One, PSH1, PSM1, PEH1, PEM1)
                    SPTE (0x02, PSH2, PSM2, PEH2, PEM2)
                    SPTE (0x03, PSH3, PSM3, PEH3, PEM3)
                    SPTE (0x04, PSH4, PSM4, PEH4, PEM4)
                    SPTE (0x05, PSH5, PSM5, PEH5, PEM5)
                    SPTE (0x06, PSH6, PSM6, PEH6, PEM6)
                }

                SGWC = 0x05
                SSMP = 0xCB
                If (ECON)
                {
                    SBTE (0x07, BSH7, BSM7, BEH7, BEM7)
                    SBTE (One, BSH1, BSM1, BEH1, BEM1)
                    SBTE (0x02, BSH2, BSM2, BEH2, BEM2)
                    SBTE (0x03, BSH3, BSM3, BEH3, BEM3)
                    SBTE (0x04, BSH4, BSM4, BEH4, BEM4)
                    SBTE (0x05, BSH5, BSM5, BEH5, BEM5)
                    SBTE (0x06, BSH6, BSM6, BEH6, BEM6)
                }

                SGWC = 0x08
                SSMP = 0xCB
            }

            Method (GBCT, 0, NotSerialized)
            {
                SGWC = 0x05
                SSMP = 0xCB
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                DerefOf (Local0 [0x02]) [Zero] = 0x1D
                DerefOf (Local0 [0x02]) [One] = TBCD (BSH7)
                DerefOf (Local0 [0x02]) [0x02] = TBCD (BSM7)
                DerefOf (Local0 [0x02]) [0x03] = TBCD (BEH7)
                DerefOf (Local0 [0x02]) [0x04] = TBCD (BEM7)
                DerefOf (Local0 [0x02]) [0x05] = TBCD (BSH1)
                DerefOf (Local0 [0x02]) [0x06] = TBCD (BSM1)
                DerefOf (Local0 [0x02]) [0x07] = TBCD (BEH1)
                DerefOf (Local0 [0x02]) [0x08] = TBCD (BEM1)
                DerefOf (Local0 [0x02]) [0x09] = TBCD (BSH2)
                DerefOf (Local0 [0x02]) [0x0A] = TBCD (BSM2)
                DerefOf (Local0 [0x02]) [0x0B] = TBCD (BEH2)
                DerefOf (Local0 [0x02]) [0x0C] = TBCD (BEM2)
                DerefOf (Local0 [0x02]) [0x0D] = TBCD (BSH3)
                DerefOf (Local0 [0x02]) [0x0E] = TBCD (BSM3)
                DerefOf (Local0 [0x02]) [0x0F] = TBCD (BEH3)
                DerefOf (Local0 [0x02]) [0x10] = TBCD (BEM3)
                DerefOf (Local0 [0x02]) [0x11] = TBCD (BSH4)
                DerefOf (Local0 [0x02]) [0x12] = TBCD (BSM4)
                DerefOf (Local0 [0x02]) [0x13] = TBCD (BEH4)
                DerefOf (Local0 [0x02]) [0x14] = TBCD (BEM4)
                DerefOf (Local0 [0x02]) [0x15] = TBCD (BSH5)
                DerefOf (Local0 [0x02]) [0x16] = TBCD (BSM5)
                DerefOf (Local0 [0x02]) [0x17] = TBCD (BEH5)
                DerefOf (Local0 [0x02]) [0x18] = TBCD (BEM5)
                DerefOf (Local0 [0x02]) [0x19] = TBCD (BSH6)
                DerefOf (Local0 [0x02]) [0x1A] = TBCD (BSM6)
                DerefOf (Local0 [0x02]) [0x1B] = TBCD (BEH6)
                DerefOf (Local0 [0x02]) [0x1C] = TBCD (BEM6)
                Return (Local0)
            }

            Method (SBCT, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                CreateByteField (Arg0, Zero, NBTE)
                If ((NBTE != 0x1D))
                {
                    Local0 [Zero] = 0x06
                    Return (Local0)
                }

                CreateByteField (Arg0, One, DA01)
                CreateByteField (Arg0, 0x02, DA02)
                CreateByteField (Arg0, 0x03, DA03)
                CreateByteField (Arg0, 0x04, DA04)
                CreateByteField (Arg0, 0x05, DA05)
                CreateByteField (Arg0, 0x06, DA06)
                CreateByteField (Arg0, 0x07, DA07)
                CreateByteField (Arg0, 0x08, DA08)
                CreateByteField (Arg0, 0x09, DA09)
                CreateByteField (Arg0, 0x0A, DA10)
                CreateByteField (Arg0, 0x0B, DA11)
                CreateByteField (Arg0, 0x0C, DA12)
                CreateByteField (Arg0, 0x0D, DA13)
                CreateByteField (Arg0, 0x0E, DA14)
                CreateByteField (Arg0, 0x0F, DA15)
                CreateByteField (Arg0, 0x10, DA16)
                CreateByteField (Arg0, 0x11, DA17)
                CreateByteField (Arg0, 0x12, DA18)
                CreateByteField (Arg0, 0x13, DA19)
                CreateByteField (Arg0, 0x14, DA20)
                CreateByteField (Arg0, 0x15, DA21)
                CreateByteField (Arg0, 0x16, DA22)
                CreateByteField (Arg0, 0x17, DA23)
                CreateByteField (Arg0, 0x18, DA24)
                CreateByteField (Arg0, 0x19, DA25)
                CreateByteField (Arg0, 0x1A, DA26)
                CreateByteField (Arg0, 0x1B, DA27)
                CreateByteField (Arg0, 0x1C, DA28)
                Local6 = Zero
                Local7 = Zero
                Local1 = HTOM (FBCD (DA05), FBCD (DA06))
                Local2 = HTOM (FBCD (DA07), FBCD (DA08))
                Local3 = HTOM (PSH1, PSM1)
                Local4 = HTOM (PEH1, PEM1)
                Local6 |= TMCK (FBCD (DA05), FBCD (DA06), FBCD (DA07), FBCD (DA08))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA09), FBCD (DA10))
                Local2 = HTOM (FBCD (DA11), FBCD (DA12))
                Local3 = HTOM (PSH2, PSM2)
                Local4 = HTOM (PEH2, PEM2)
                Local6 |= TMCK (FBCD (DA09), FBCD (DA10), FBCD (DA11), FBCD (DA12))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA13), FBCD (DA14))
                Local2 = HTOM (FBCD (DA15), FBCD (DA16))
                Local3 = HTOM (PSH3, PSM3)
                Local4 = HTOM (PEH3, PEM3)
                Local6 |= TMCK (FBCD (DA13), FBCD (DA14), FBCD (DA15), FBCD (DA16))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA17), FBCD (DA18))
                Local2 = HTOM (FBCD (DA19), FBCD (DA20))
                Local3 = HTOM (PSH4, PSM4)
                Local4 = HTOM (PEH4, PEM4)
                Local6 |= TMCK (FBCD (DA17), FBCD (DA18), FBCD (DA19), FBCD (DA20))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA21), FBCD (DA22))
                Local2 = HTOM (FBCD (DA23), FBCD (DA24))
                Local3 = HTOM (PSH5, PSM5)
                Local4 = HTOM (PEH5, PEM5)
                Local6 |= TMCK (FBCD (DA21), FBCD (DA22), FBCD (DA23), FBCD (DA24))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA25), FBCD (DA26))
                Local2 = HTOM (FBCD (DA27), FBCD (DA28))
                Local3 = HTOM (PSH6, PSM6)
                Local4 = HTOM (PEH6, PEM6)
                Local6 |= TMCK (FBCD (DA25), FBCD (DA26), FBCD (DA27), FBCD (DA28))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                Local1 = HTOM (FBCD (DA01), FBCD (DA02))
                Local2 = HTOM (FBCD (DA03), FBCD (DA04))
                Local3 = HTOM (PSH7, PSM7)
                Local4 = HTOM (PEH7, PEM7)
                Local6 |= TMCK (FBCD (DA01), FBCD (DA02), FBCD (DA03), FBCD (DA04))
                Local7 |= TCMP (Local1, Local2, Local3, Local4)
                If ((Local6 != Zero))
                {
                    Local0 [Zero] = 0x06
                    Return (Local0)
                }

                If ((Local7 != Zero))
                {
                    Local0 [Zero] = 0x39
                    Return (Local0)
                }

                BSH7 = FBCD (DA01)
                BSM7 = FBCD (DA02)
                BEH7 = FBCD (DA03)
                BEM7 = FBCD (DA04)
                BSH1 = FBCD (DA05)
                BSM1 = FBCD (DA06)
                BEH1 = FBCD (DA07)
                BEM1 = FBCD (DA08)
                BSH2 = FBCD (DA09)
                BSM2 = FBCD (DA10)
                BEH2 = FBCD (DA11)
                BEM2 = FBCD (DA12)
                BSH3 = FBCD (DA13)
                BSM3 = FBCD (DA14)
                BEH3 = FBCD (DA15)
                BEM3 = FBCD (DA16)
                BSH4 = FBCD (DA17)
                BSM4 = FBCD (DA18)
                BEH4 = FBCD (DA19)
                BEM4 = FBCD (DA20)
                BSH5 = FBCD (DA21)
                BSM5 = FBCD (DA22)
                BEH5 = FBCD (DA23)
                BEM5 = FBCD (DA24)
                BSH6 = FBCD (DA25)
                BSM6 = FBCD (DA26)
                BEH6 = FBCD (DA27)
                BEM6 = FBCD (DA28)
                If (ECON)
                {
                    SBTE (0x07, BSH7, BSM7, BEH7, BEM7)
                    SBTE (One, BSH1, BSM1, BEH1, BEM1)
                    SBTE (0x02, BSH2, BSM2, BEH2, BEM2)
                    SBTE (0x03, BSH3, BSM3, BEH3, BEM3)
                    SBTE (0x04, BSH4, BSM4, BEH4, BEM4)
                    SBTE (0x05, BSH5, BSM5, BEH5, BEM5)
                    SBTE (0x06, BSH6, BSM6, BEH6, BEM6)
                }

                SGWC = 0x06
                SSMP = 0xCB
                Return (Local0)
            }

            Method (SBTE, 5, NotSerialized)
            {
                Local1 = Zero
                Local1 = Arg0
                Local1 <<= 0x04
                Local1 |= 0x02
                If ((Arg1 != 0xFF))
                {
                    Local1 |= 0x80
                }

                ^^PCI0.LPC0.EC0.SCMD = Local1
                ^^PCI0.LPC0.EC0.BCD0 = Arg1
                ^^PCI0.LPC0.EC0.BCD1 = Arg2
                ^^PCI0.LPC0.EC0.BCD2 = Arg3
                ^^PCI0.LPC0.EC0.BCD3 = Arg4
                ^^PCI0.LPC0.EC0.MCMD = 0x37
                While (^^PCI0.LPC0.EC0.MCMD)
                {
                    Sleep (One)
                }
            }

            Method (GBST, 0, NotSerialized)
            {
                SGWC = 0x08
                SSMP = 0xCB
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                If (ECON)
                {
                    If ((^^PCI0.LPC0.EC0.BAST != Zero))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.BAST /* \_SB_.PCI0.LPC0.EC0_.BAST */
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Zero] = 0xFF
                    }
                }

                Return (Local0)
            }

            Method (SBST, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local1 = (Arg0 & 0xFF)
                If (((Arg0 < 0x0A) || (Arg0 > 0x63)))
                {
                    If ((Arg0 != 0xFF))
                    {
                        Local0 [Zero] = 0x06
                        Return (Local0)
                    }
                }

                If (ECON)
                {
                    ^^PCI0.LPC0.EC0.BAST = Local1
                }

                SGWC = 0x09
                SSMP = 0xCB
                Return (Local0)
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WEID, Zero)
            Name (WMED, Zero)
            Mutex (MWMI, 0x00)
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
                /* 0010 */  0x41, 0x44, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // AD..yB..
                /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
                /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x80, 0x00, 0x01, 0x08,  // .~......
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x41, 0x45, 0x01, 0x00, 0xD4, 0x2B, 0x99, 0xD0,  // AE...+..
                /* 0040 */  0x7C, 0xA4, 0xFE, 0x4E, 0xB0, 0x72, 0x32, 0x4A,  // |..N.r2J
                /* 0048 */  0xEC, 0x92, 0x29, 0x6C, 0x42, 0x43, 0x01, 0x00   // ..)lBC..
            })
            Method (WMAD, 3, NotSerialized)
            {
                Return (HWCD (Arg1, Arg2))
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                Acquire (MWMI, 0x0005)
                Concatenate (WEID, WMED, Local0)
                WEID = Zero
                WMED = Zero
                Release (MWMI)
                Return (Local0)
            }

            Name (WQAE, Buffer (0x08A9)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x99, 0x08, 0x00, 0x00, 0x8A, 0x3A, 0x00, 0x00,  // .....:..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0x4B, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  // .K.....B
                /* 0020 */  0x10, 0x13, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x88, 0x59, 0x50, 0x08, 0x21,  // ..@.YP.!
                /* 0038 */  0x10, 0xEA, 0x4F, 0x20, 0xBF, 0x02, 0x10, 0x3A,  // ..O ...:
                /* 0040 */  0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E, 0x11,  // . S.A.N.
                /* 0048 */  0x44, 0xD0, 0xAB, 0x00, 0x9B, 0x02, 0x4C, 0x0A,  // D.....L.
                /* 0050 */  0xB0, 0x28, 0x40, 0xBB, 0x00, 0xCB, 0x02, 0x74,  // .(@....t
                /* 0058 */  0x0B, 0x90, 0x0E, 0x4B, 0x44, 0x82, 0xA3, 0xC4,  // ...KD...
                /* 0060 */  0x80, 0xA3, 0x74, 0x62, 0x0B, 0x37, 0x6C, 0xF0,  // ..tb.7l.
                /* 0068 */  0x42, 0x51, 0x34, 0x83, 0x28, 0x09, 0x2A, 0x17,  // BQ4.(.*.
                /* 0070 */  0xE0, 0x1B, 0x41, 0xE0, 0xE5, 0x0A, 0x90, 0x3C,  // ..A....<
                /* 0078 */  0x01, 0x69, 0x16, 0x60, 0x58, 0x80, 0x75, 0x01,  // .i.`X.u.
                /* 0080 */  0xB2, 0x87, 0x40, 0xA5, 0x0E, 0x01, 0x25, 0x67,  // ..@...%g
                /* 0088 */  0x08, 0xA8, 0x01, 0xB4, 0x3A, 0x01, 0xE1, 0x57,  // ....:..W
                /* 0090 */  0x3A, 0x25, 0x24, 0x41, 0x38, 0x63, 0x15, 0x8F,  // :%$A8c..
                /* 0098 */  0xAF, 0x59, 0x34, 0x3D, 0x27, 0x39, 0xC7, 0x90,  // .Y4='9..
                /* 00A0 */  0xE3, 0x71, 0xA1, 0x07, 0xC1, 0x05, 0x78, 0x18,  // .q....x.
                /* 00A8 */  0x06, 0x1D, 0xB2, 0x22, 0x6B, 0x80, 0xC1, 0x58,  // ..."k..X
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  // ..u1j.H.
                /* 00B8 */  0x80, 0x0C, 0x51, 0x12, 0x1C, 0x6A, 0xD4, 0x96,  // ..Q..j..
                /* 00C0 */  0x28, 0xC0, 0xFC, 0x38, 0x34, 0xBB, 0xB6, 0xC7,  // (..84...
                /* 00C8 */  0x42, 0x20, 0x99, 0xB4, 0xA1, 0xA0, 0xA4, 0x40,  // B .....@
                /* 00D0 */  0x68, 0x6C, 0x67, 0xEA, 0x19, 0x45, 0x3C, 0x52,  // hlg..E<R
                /* 00D8 */  0xC3, 0x24, 0xF0, 0x28, 0x22, 0x1B, 0x8D, 0x43,  // .$.("..C
                /* 00E0 */  0x63, 0x87, 0xE1, 0x61, 0x06, 0x3B, 0x88, 0xC3,  // c..a.;..
                /* 00E8 */  0x38, 0xE6, 0xC8, 0x09, 0x3C, 0xA1, 0x23, 0x3D,  // 8...<.#=
                /* 00F0 */  0xF2, 0xC2, 0xE6, 0x29, 0xD4, 0x18, 0xCD, 0x41,  // ...)...A
                /* 00F8 */  0x11, 0xB8, 0xD0, 0x18, 0x19, 0x10, 0xF2, 0x3C,  // .......<
                /* 0100 */  0x7E, 0x8D, 0xC4, 0x04, 0x76, 0x2F, 0xC0, 0x1A,  // ~...v/..
                /* 0108 */  0xA6, 0x60, 0x1B, 0x9B, 0x98, 0xFE, 0xFF, 0x10,  // .`......
                /* 0110 */  0x47, 0x1E, 0xA3, 0xAD, 0xB9, 0x0B, 0x29, 0x4C,  // G.....)L
                /* 0118 */  0x8C, 0x28, 0xC1, 0xE2, 0x55, 0x3C, 0x0D, 0xA1,  // .(..U<..
                /* 0120 */  0x3C, 0x29, 0x84, 0x8A, 0x54, 0x19, 0x8A, 0x86,  // <)..T...
                /* 0128 */  0x1E, 0xA5, 0x42, 0x01, 0xCE, 0xE6, 0x21, 0xDC,  // ..B...!.
                /* 0130 */  0x1A, 0x41, 0x85, 0x10, 0x2B, 0x52, 0xAC, 0xF6,  // .A..+R..
                /* 0138 */  0x07, 0x41, 0x42, 0x2E, 0x5B, 0xC7, 0x07, 0x47,  // .AB.[..G
                /* 0140 */  0x1A, 0x0D, 0xEA, 0x50, 0xE0, 0xB1, 0x7B, 0xDC,  // ...P..{.
                /* 0148 */  0xCF, 0x02, 0x3E, 0x08, 0x9C, 0x5B, 0x90, 0xA3,  // ..>..[..
                /* 0150 */  0x3B, 0x8B, 0x47, 0x85, 0x83, 0xF6, 0xF0, 0xD8,  // ;.G.....
                /* 0158 */  0x6D, 0xC0, 0x67, 0x08, 0x9F, 0x02, 0xF0, 0xAE,  // m.g.....
                /* 0160 */  0x01, 0x35, 0xFD, 0x83, 0x67, 0x82, 0xE0, 0x50,  // .5..g..P
                /* 0168 */  0x43, 0xF4, 0xA8, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  // C.....!2
                /* 0170 */  0x40, 0x4F, 0xEA, 0xB8, 0xB1, 0x83, 0x3B, 0x99,  // @O....;.
                /* 0178 */  0x83, 0x7E, 0x6F, 0x68, 0xF6, 0xC6, 0x40, 0x08,  // .~oh..@.
                /* 0180 */  0x8E, 0xC7, 0x97, 0x05, 0x36, 0xE1, 0x04, 0x96,  // ....6...
                /* 0188 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x51, 0x9E,  // ?.....Q.
                /* 0190 */  0x56, 0xCC, 0x90, 0xCF, 0x0C, 0x26, 0xB0, 0x58,  // V....&.X
                /* 0198 */  0x08, 0x29, 0x80, 0xD0, 0x78, 0xC0, 0x7F, 0x03,  // .)..x...
                /* 01A0 */  0x78, 0xC0, 0xF0, 0xCD, 0xC0, 0xF3, 0x35, 0xC1,  // x.....5.
                /* 01A8 */  0xB0, 0x10, 0x32, 0xB2, 0x0A, 0x8F, 0x87, 0x8E,  // ..2.....
                /* 01B0 */  0xC2, 0xD7, 0x83, 0xC3, 0x39, 0xAD, 0x78, 0x26,  // ....9.x&
                /* 01B8 */  0x18, 0x0E, 0x42, 0x27, 0x09, 0x8B, 0x1A, 0x36,  // ..B'...6
                /* 01C0 */  0x3D, 0x39, 0xF0, 0x43, 0x03, 0xBB, 0x19, 0x9C,  // =9.C....
                /* 01C8 */  0xC1, 0x23, 0x80, 0x47, 0x72, 0x42, 0xFE, 0x98,  // .#.GrB..
                /* 01D0 */  0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE, 0xA7, 0x4C,  // x`.....L
                /* 01D8 */  0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71, 0xC0, 0xFF,  // Fp...q..
                /* 01E0 */  0xFF, 0xA1, 0xF0, 0x21, 0x7A, 0x7C, 0xA7, 0x7C,  // ...!z|.|
                /* 01E8 */  0xBC, 0x96, 0x00, 0x21, 0x59, 0xE3, 0x84, 0x7E,  // ...!Y..~
                /* 01F0 */  0x87, 0xF0, 0xF1, 0xC3, 0x47, 0x16, 0x47, 0x84,  // ....G.G.
                /* 01F8 */  0x90, 0x93, 0x53, 0x00, 0x1A, 0xF8, 0x74, 0xCF,  // ..S...t.
                /* 0200 */  0x2E, 0xC2, 0xE9, 0x7A, 0x52, 0x0E, 0x34, 0x0C,  // ...zR.4.
                /* 0208 */  0x3A, 0x4E, 0x70, 0x9C, 0x07, 0xC0, 0x31, 0x4E,  // :Np...1N
                /* 0210 */  0xF8, 0xE7, 0x02, 0xF8, 0x03, 0xE4, 0xA7, 0x8C,  // ........
                /* 0218 */  0x57, 0x8C, 0x04, 0x8E, 0x39, 0x42, 0xF4, 0xB9,  // W...9B..
                /* 0220 */  0xC6, 0x23, 0xC4, 0xC2, 0x3F, 0x55, 0x14, 0x3E,  // .#..?U.>
                /* 0228 */  0x10, 0x32, 0x46, 0x70, 0x01, 0x7A, 0x8C, 0xC0,  // .2Fp.z..
                /* 0230 */  0x37, 0xE0, 0x18, 0xD1, 0x47, 0x09, 0xAE, 0xFE,  // 7...G...
                /* 0238 */  0xA0, 0x41, 0x07, 0x88, 0xFB, 0xFF, 0x0F, 0x10,  // .A......
                /* 0240 */  0x3E, 0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D,  // >...|..=
                /* 0248 */  0xD0, 0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F,  // ........
                /* 0250 */  0x68, 0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F,  // h4/~:...
                /* 0258 */  0xF0, 0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4,  // ..zH8P..
                /* 0260 */  0x39, 0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B,  // 9....c..
                /* 0268 */  0xFE, 0x13, 0x08, 0xB8, 0xE4, 0x1D, 0xC2, 0x40,  // .......@
                /* 0270 */  0x31, 0x62, 0xFC, 0x39, 0xC8, 0xA7, 0x30, 0xF0,  // 1b.9..0.
                /* 0278 */  0xFF, 0xFF, 0x4F, 0x61, 0xB8, 0x11, 0xF0, 0x20,  // ..Oa... 
                /* 0280 */  0xAF, 0x05, 0x9F, 0xB6, 0xA8, 0x74, 0x18, 0xD4,  // .....t..
                /* 0288 */  0x81, 0x0B, 0x30, 0x09, 0x1A, 0xE1, 0x59, 0xA2,  // ..0...Y.
                /* 0290 */  0x36, 0x08, 0x01, 0xBF, 0x4D, 0xBC, 0x6D, 0xF9,  // 6...M.m.
                /* 0298 */  0x16, 0x10, 0xE7, 0xC8, 0x7B, 0x3B, 0x70, 0x11,  // ....{;p.
                /* 02A0 */  0x8C, 0x08, 0xA7, 0x1D, 0xCA, 0x63, 0x88, 0x18,  // .....c..
                /* 02A8 */  0x23, 0xCA, 0xE3, 0x96, 0x51, 0xDE, 0xB6, 0x5E,  // #...Q..^
                /* 02B0 */  0x00, 0xE2, 0x9D, 0xE5, 0xF3, 0x96, 0x31, 0x82,  // ......1.
                /* 02B8 */  0x47, 0x7E, 0xE0, 0x62, 0x62, 0xDF, 0x13, 0xFA,  // G~.bb...
                /* 02C0 */  0xB9, 0xF9, 0xC0, 0x05, 0x38, 0xFB, 0xFF, 0x1F,  // ....8...
                /* 02C8 */  0xB8, 0x00, 0x0E, 0x05, 0x3D, 0x0C, 0xA1, 0x87,  // ....=...
                /* 02D0 */  0xE1, 0xA9, 0x9C, 0xCB, 0x13, 0xE5, 0xA9, 0x44,  // .......D
                /* 02D8 */  0x8C, 0x1A, 0x26, 0xEA, 0x33, 0x94, 0x2F, 0x1A,  // ..&.3./.
                /* 02E0 */  0x3E, 0x10, 0x81, 0xEF, 0xCC, 0x05, 0xFC, 0xFE,  // >.......
                /* 02E8 */  0xFF, 0x07, 0x22, 0x38, 0x02, 0xCF, 0x34, 0xA0,  // .."8..4.
                /* 02F0 */  0xF4, 0x39, 0x03, 0x81, 0x9C, 0x8A, 0x0F, 0x35,  // .9.....5
                /* 02F8 */  0xC0, 0x48, 0xF4, 0xAB, 0xC1, 0x27, 0x1A, 0x2A,  // .H...'.*
                /* 0300 */  0x13, 0x06, 0x75, 0xA8, 0x01, 0x4C, 0x5E, 0x61,  // ..u..L^a
                /* 0308 */  0x9E, 0x46, 0xCF, 0xF9, 0x59, 0xC6, 0xA7, 0x1A,  // .F..Y...
                /* 0310 */  0x1F, 0x4A, 0x8D, 0x63, 0x88, 0x97, 0x99, 0x87,  // .J.c....
                /* 0318 */  0x1A, 0x1F, 0x0B, 0x5E, 0x49, 0x7D, 0xA8, 0x31,  // ...^I}.1
                /* 0320 */  0x54, 0x9C, 0x87, 0x1A, 0x9F, 0x48, 0x03, 0x45,  // T....H.E
                /* 0328 */  0x7D, 0xB3, 0x79, 0xB6, 0x31, 0x7A, 0x7C, 0xDF,  // }.y.1z|.
                /* 0330 */  0x50, 0x0D, 0xF1, 0x50, 0xC3, 0x84, 0xBD, 0x23,  // P..P...#
                /* 0338 */  0xF4, 0xC1, 0xF5, 0xA1, 0x06, 0x1C, 0xFF, 0xFF,  // ........
                /* 0340 */  0x43, 0x0D, 0xC0, 0xFF, 0xFF, 0xFF, 0xA1, 0x06,  // C.......
                /* 0348 */  0x70, 0x74, 0x34, 0x80, 0x73, 0x64, 0xC4, 0x1D,  // pt4.sd..
                /* 0350 */  0x0D, 0xC0, 0x75, 0x28, 0x05, 0x0E, 0x47, 0x03,  // ..u(..G.
                /* 0358 */  0xE0, 0x71, 0x14, 0x02, 0xF3, 0x85, 0xC6, 0x47,  // .q.....G
                /* 0360 */  0x21, 0x60, 0xF1, 0xFF, 0x3F, 0x0A, 0xE1, 0x64,  // !`..?..d
                /* 0368 */  0x9F, 0x83, 0x50, 0x42, 0x8F, 0x42, 0x80, 0x54,  // ..PB.B.T
                /* 0370 */  0xC8, 0xA7, 0x88, 0x67, 0x1F, 0x5F, 0x7E, 0x1E,  // ...g._~.
                /* 0378 */  0x08, 0x22, 0xBC, 0xE6, 0xFB, 0x14, 0xE4, 0x43,  // .".....C
                /* 0380 */  0xBE, 0x8F, 0x42, 0x0C, 0xC6, 0x50, 0xBE, 0x06,  // ..B..P..
                /* 0388 */  0xF9, 0x28, 0xC4, 0xA0, 0x5E, 0x83, 0x7C, 0xDF,  // .(..^.|.
                /* 0390 */  0x37, 0xC8, 0x91, 0x18, 0xFB, 0x99, 0xC0, 0x47,  // 7......G
                /* 0398 */  0x21, 0x26, 0xED, 0x28, 0x04, 0x28, 0xFC, 0xFF,  // !&.(.(..
                /* 03A0 */  0x1F, 0x85, 0x00, 0xFE, 0xFF, 0xFF, 0x8F, 0x42,  // .......B
                /* 03A8 */  0x80, 0xB3, 0x00, 0x47, 0x03, 0xD0, 0x4D, 0xEB,  // ...G..M.
                /* 03B0 */  0x51, 0x08, 0xBC, 0x77, 0x96, 0xD3, 0x3E, 0x01,  // Q..w..>.
                /* 03B8 */  0x9F, 0x85, 0x00, 0xB3, 0xFF, 0xFF, 0xB3, 0x10,  // ........
                /* 03C0 */  0x30, 0x3B, 0x0A, 0x45, 0x3D, 0xE8, 0x57, 0xA1,  // 0;.E=.W.
                /* 03C8 */  0x27, 0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81,  // '....a..
                /* 03D0 */  0x5E, 0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E,  // ^2.].8O.
                /* 03D8 */  0xA7, 0x6D, 0x94, 0x97, 0x20, 0x1F, 0x28, 0x9E,  // .m.. .(.
                /* 03E0 */  0x85, 0x0C, 0xF5, 0x2E, 0x14, 0xF4, 0x8D, 0xDC,  // ........
                /* 03E8 */  0xA3, 0x8C, 0x19, 0x3F, 0xC4, 0xF3, 0x90, 0x21,  // ...?...!
                /* 03F0 */  0x9E, 0x85, 0x00, 0x76, 0xFD, 0xFF, 0xCF, 0x42,  // ...v...B
                /* 03F8 */  0x00, 0xFF, 0xFF, 0xFF, 0x47, 0x03, 0xF8, 0x2F,  // ....G../
                /* 0400 */  0x00, 0x9F, 0x85, 0x80, 0xE7, 0x09, 0xE0, 0x41,  // .......A
                /* 0408 */  0xDB, 0x67, 0x21, 0x80, 0x33, 0x87, 0xCB, 0xF3,  // .g!.3...
                /* 0410 */  0x0F, 0x7A, 0x60, 0xEF, 0x11, 0x9E, 0xF5, 0x71,  // .z`....q
                /* 0418 */  0xBF, 0x5E, 0x7A, 0xE0, 0x0F, 0x05, 0xCF, 0x42,  // .^z....B
                /* 0420 */  0x0C, 0xEB, 0x98, 0x7C, 0x16, 0x62, 0x10, 0x2F,  // ...|.b./
                /* 0428 */  0x9A, 0x86, 0x78, 0xE1, 0xF4, 0x61, 0xC0, 0xFF,  // ..x..a..
                /* 0430 */  0x7F, 0xBC, 0xC0, 0xAF, 0x9C, 0x06, 0x0A, 0x12,  // ........
                /* 0438 */  0xE8, 0x59, 0x08, 0x60, 0xFC, 0xFF, 0xFF, 0x2C,  // .Y.`...,
                /* 0440 */  0x04, 0x90, 0x71, 0x8D, 0x3A, 0x0B, 0x01, 0xCB,  // ..q.:...
                /* 0448 */  0x63, 0x0C, 0x3B, 0xAD, 0x24, 0xF8, 0xFF, 0x3F,  // c.;.$..?
                /* 0450 */  0x0B, 0x01, 0x9F, 0x5C, 0x46, 0x0E, 0x42, 0x98,  // ...\F.B.
                /* 0458 */  0x88, 0x6F, 0x05, 0x1F, 0x33, 0x01, 0xA5, 0xE7,  // .o..3...
                /* 0460 */  0xA0, 0x17, 0x77, 0x63, 0x04, 0x7E, 0x91, 0x78,  // ..wc.~.x
                /* 0468 */  0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C, 0x0B, 0x19,  // .dGM.<..
                /* 0470 */  0xEF, 0x30, 0xCE, 0xE0, 0x09, 0xDE, 0x93, 0x7F,  // .0......
                /* 0478 */  0x16, 0x62, 0x60, 0xC7, 0x18, 0xEC, 0x51, 0xC8,  // .b`...Q.
                /* 0480 */  0xA0, 0x06, 0x8F, 0x1D, 0x22, 0x4C, 0xA0, 0x67,  // ...."L.g
                /* 0488 */  0x21, 0x16, 0x6A, 0xDC, 0x3A, 0x7F, 0xF8, 0x2C,  // !.j.:..,
                /* 0490 */  0x04, 0xBC, 0xFF, 0xFF, 0x67, 0x21, 0xC0, 0xD3,  // ....g!..
                /* 0498 */  0x61, 0xC3, 0x67, 0x0D, 0xF0, 0x0C, 0xDF, 0xA3,  // a.g.....
                /* 04A0 */  0x3A, 0x87, 0xC7, 0x63, 0xE0, 0x92, 0x55, 0xC7,  // :..c..U.
                /* 04A8 */  0x09, 0x83, 0xE5, 0x5E, 0xA7, 0x6C, 0x9C, 0x61,  // ...^.l.a
                /* 04B0 */  0xE8, 0x20, 0xAC, 0x0E, 0x48, 0xC3, 0xC1, 0xDC,  // . ..H...
                /* 04B8 */  0x43, 0x0E, 0xE2, 0x7C, 0xD8, 0x40, 0xAD, 0x08,  // C..|.@..
                /* 04C0 */  0x4E, 0xC7, 0x24, 0x0F, 0xDA, 0x5A, 0x28, 0xA4,  // N.$..Z(.
                /* 04C8 */  0x80, 0x46, 0x03, 0x32, 0xBC, 0x33, 0x9F, 0x96,  // .F.2.3..
                /* 04D0 */  0x28, 0x88, 0x01, 0x7D, 0x02, 0xB2, 0x8D, 0x73,  // (..}...s
                /* 04D8 */  0x00, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xDA, 0x60,  // .j/..9.`
                /* 04E0 */  0xF4, 0x5F, 0x16, 0xE8, 0x6C, 0x7C, 0x0D, 0xE0,  // ._..l|..
                /* 04E8 */  0x1A, 0x20, 0x74, 0x30, 0x30, 0xB4, 0xD5, 0xDC,  // . t00...
                /* 04F0 */  0x62, 0x50, 0x60, 0xC6, 0x7F, 0x70, 0x31, 0x81,  // bP`..p1.
                /* 04F8 */  0x8F, 0x2E, 0xF8, 0xB3, 0x00, 0xEE, 0xFF, 0x3F,  // .......?
                /* 0500 */  0x5C, 0x8F, 0xF6, 0x5D, 0xA0, 0xEA, 0xC9, 0xEA,  // \..]....
                /* 0508 */  0x8A, 0x60, 0x75, 0x97, 0x17, 0x08, 0x33, 0x32,  // .`u...32
                /* 0510 */  0x41, 0x7D, 0x07, 0x02, 0x50, 0x00, 0xF9, 0x0E,  // A}..P...
                /* 0518 */  0xE0, 0xA3, 0xD3, 0x73, 0x00, 0x9B, 0x48, 0x88,  // ...s..H.
                /* 0520 */  0x30, 0xD1, 0x8C, 0x8E, 0x98, 0x30, 0x2A, 0xFA,  // 0....0*.
                /* 0528 */  0x84, 0x29, 0x88, 0x27, 0xEC, 0x58, 0x13, 0x46,  // .).'.X.F
                /* 0530 */  0xCF, 0xC4, 0x77, 0x1B, 0x36, 0x62, 0x4C, 0x88,  // ..w.6bL.
                /* 0538 */  0xDB, 0x06, 0xB4, 0x09, 0x06, 0xF5, 0x3D, 0x08,  // ......=.
                /* 0540 */  0xD6, 0x90, 0xF9, 0x58, 0x7C, 0x67, 0xC0, 0x4D,  // ...X|g.M
                /* 0548 */  0x19, 0x8C, 0x73, 0x62, 0xD7, 0x04, 0x0B, 0x9C,  // ..sb....
                /* 0550 */  0x33, 0xC8, 0xE1, 0x31, 0xD7, 0x2F, 0x7E, 0x5B,  // 3..1./~[
                /* 0558 */  0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37, 0x1C, 0x86,  // ...A.7..
                /* 0560 */  0xFD, 0x30, 0xE6, 0x19, 0xBD, 0x8A, 0xF9, 0xE6,  // .0......
                /* 0568 */  0x86, 0x81, 0xF5, 0x78, 0x39, 0xAC, 0xD1, 0xC2,  // ...x9...
                /* 0570 */  0x1E, 0xDA, 0xAB, 0x87, 0xCF, 0x2D, 0x3E, 0x4F,  // .....->O
                /* 0578 */  0x18, 0x23, 0xAC, 0x2F, 0x2C, 0xE0, 0x00, 0xFC,  // .#./,...
                /* 0580 */  0xFF, 0xBF, 0x5A, 0xC1, 0xBE, 0x6B, 0x80, 0xE7,  // ..Z..k..
                /* 0588 */  0x26, 0xE4, 0xBB, 0x06, 0xC0, 0xDA, 0xFF, 0xFF,  // &.......
                /* 0590 */  0x5D, 0x03, 0xFE, 0x35, 0xC1, 0x77, 0x0D, 0xE0,  // ]..5.w..
                /* 0598 */  0x3D, 0x74, 0xDF, 0x35, 0x80, 0x6B, 0xF6, 0xBB,  // =t.5.k..
                /* 05A0 */  0x06, 0xEA, 0x18, 0x60, 0x85, 0x77, 0x0D, 0x68,  // ...`.w.h
                /* 05A8 */  0xB7, 0xB4, 0x57, 0xB4, 0x87, 0x2A, 0x6B, 0xBA,  // ..W..*k.
                /* 05B0 */  0x6C, 0xA0, 0xD4, 0x5C, 0x36, 0x00, 0x6D, 0xFF,  // l..\6.m.
                /* 05B8 */  0xFF, 0xCB, 0x06, 0xB0, 0x91, 0x32, 0x61, 0x54,  // .....2aT
                /* 05C0 */  0xF8, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xC1, 0x2E,  // ..S.O...
                /* 05C8 */  0x1B, 0xA0, 0x88, 0x71, 0xD9, 0x00, 0xFD, 0xD8,  // ...q....
                /* 05D0 */  0x5E, 0x36, 0x80, 0xC1, 0x3D, 0x81, 0xDF, 0x36,  // ^6..=..6
                /* 05D8 */  0x80, 0x37, 0xA4, 0x6F, 0x1B, 0xC0, 0xF4, 0xFF,  // .7.o....
                /* 05E0 */  0x0F, 0x31, 0xFF, 0x6D, 0x03, 0xC5, 0x61, 0x95,  // .1.m..a.
                /* 05E8 */  0xB7, 0x0D, 0x88, 0x87, 0x77, 0x46, 0x60, 0x55,  // ....wF`U
                /* 05F0 */  0xD7, 0x0D, 0x94, 0x9E, 0xEB, 0x06, 0x40, 0x02,  // ......@.
                /* 05F8 */  0x31, 0x13, 0x46, 0xC5, 0x9F, 0x30, 0x05, 0xF1,  // 1.F..0..
                /* 0600 */  0x84, 0x1D, 0xED, 0xBA, 0x01, 0x8A, 0x20, 0xD7,  // ...... .
                /* 0608 */  0x0D, 0xD0, 0xCF, 0xEB, 0x94, 0xC1, 0xFA, 0xFF,  // ........
                /* 0610 */  0xBF, 0x6E, 0x60, 0x2F, 0x0A, 0x98, 0xFB, 0x06,  // .n`/....
                /* 0618 */  0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xC0, 0xC7, 0xE5,  // ........
                /* 0620 */  0x1B, 0x73, 0xDF, 0x00, 0x6C, 0xFE, 0xFF, 0xEF,  // .s..l...
                /* 0628 */  0x1B, 0x00, 0x13, 0x2E, 0x0A, 0xB8, 0xFB, 0x06,  // ........
                /* 0630 */  0xF0, 0xBE, 0x48, 0xFB, 0xBE, 0x01, 0x5C, 0x83,  // ..H...\.
                /* 0638 */  0x49, 0xF8, 0xFF, 0xDF, 0xF5, 0xE8, 0x0B, 0x40,  // I......@
                /* 0640 */  0x51, 0x60, 0x50, 0x43, 0xF2, 0x99, 0x00, 0x3F,  // Q`PC...?
                /* 0648 */  0xBA, 0x83, 0x3B, 0xA6, 0xE0, 0x4C, 0x12, 0x1C,  // ..;..L..
                /* 0650 */  0x6A, 0xE0, 0xBE, 0x02, 0x3C, 0xCD, 0x9F, 0xD6,  // j...<...
                /* 0658 */  0x7B, 0xBD, 0xE7, 0xF1, 0x24, 0x10, 0x92, 0x1D,  // {...$...
                /* 0660 */  0x61, 0x7C, 0x6C, 0x43, 0x9C, 0x0C, 0xC8, 0x41,  // a|lC...A
                /* 0668 */  0xDC, 0x47, 0xF7, 0x88, 0xEF, 0xE1, 0x86, 0x49,  // .G.....I
                /* 0670 */  0xE0, 0x21, 0x33, 0x34, 0x0E, 0x8D, 0x1D, 0x86,  // .!34....
                /* 0678 */  0xEF, 0x02, 0xC1, 0x0E, 0xE2, 0x30, 0xCE, 0xD7,  // .....0..
                /* 0680 */  0x04, 0x9E, 0xD0, 0x83, 0xC0, 0x7B, 0xF9, 0xA3,  // .....{..
                /* 0688 */  0x41, 0xF1, 0x77, 0x03, 0x4A, 0x60, 0xB8, 0xD0,  // A.w.J`..
                /* 0690 */  0x98, 0x91, 0xFA, 0x6C, 0xFF, 0x8E, 0x70, 0x24,  // ...l..p$
                /* 0698 */  0x26, 0xB0, 0x7B, 0x48, 0x59, 0x13, 0xA0, 0xF1,  // &.{HY...
                /* 06A0 */  0x96, 0x43, 0x20, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  // .C z..-.
                /* 06A8 */  0xCD, 0x2D, 0xCA, 0xFB, 0x42, 0x14, 0x3B, 0x43,  // .-..B.;C
                /* 06B0 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x9E, 0xD6, 0x62,  // .F.`A..b
                /* 06B8 */  0x45, 0x79, 0x66, 0x37, 0x42, 0xC4, 0x10, 0xAF,  // Eyf7B...
                /* 06C0 */  0x0C, 0x81, 0x5E, 0x12, 0xC2, 0x07, 0x79, 0xEC,  // ..^...y.
                /* 06C8 */  0x89, 0xD3, 0xFE, 0x20, 0x88, 0xF8, 0x17, 0x82,  // ... ....
                /* 06D0 */  0x3C, 0x80, 0x28, 0xD2, 0x68, 0x50, 0xE7, 0x06,  // <.(.hP..
                /* 06D8 */  0x8F, 0xDD, 0x87, 0x10, 0x5F, 0xFE, 0x7D, 0xB8,  // ...._.}.
                /* 06E0 */  0xF7, 0xE8, 0x0E, 0xEE, 0x45, 0xFE, 0xA0, 0x3D,  // ....E..=
                /* 06E8 */  0x3C, 0x76, 0xC2, 0xF0, 0x41, 0x03, 0x8E, 0x6B,  // <v..A..k
                /* 06F0 */  0x40, 0x4D, 0xFF, 0x19, 0x01, 0x2C, 0x97, 0x7F,  // @M...,..
                /* 06F8 */  0xF8, 0xE3, 0xF1, 0x3D, 0xC1, 0xF3, 0x39, 0xE1,  // ...=..9.
                /* 0700 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0x71, 0x84, 0xCF,  // ..?..q..
                /* 0708 */  0xF3, 0x85, 0xC3, 0x90, 0xCF, 0x02, 0x87, 0xC5,  // ........
                /* 0710 */  0xC4, 0x0A, 0xF8, 0xFF, 0x9F, 0x4C, 0xD8, 0x78,  // .....L.x
                /* 0718 */  0xC0, 0x7F, 0x0F, 0x79, 0xFD, 0xF7, 0xCD, 0xC0,  // ...y....
                /* 0720 */  0xF3, 0x35, 0xC1, 0x88, 0x10, 0x72, 0x32, 0x1E,  // .5...r2.
                /* 0728 */  0x34, 0xE8, 0xD9, 0xF8, 0x80, 0xE1, 0xEB, 0x09,  // 4.......
                /* 0730 */  0x3B, 0x77, 0x70, 0x51, 0xE7, 0x0E, 0xD4, 0xD1,  // ;wpQ....
                /* 0738 */  0xC1, 0xA7, 0x06, 0x76, 0xB3, 0xC1, 0x1C, 0xB7,  // ...v....
                /* 0740 */  0xF9, 0x59, 0x03, 0xFC, 0x23, 0x84, 0x7F, 0x7B,  // .Y..#..{
                /* 0748 */  0xF0, 0xBC, 0x7C, 0x65, 0x78, 0x75, 0x48, 0xE0,  // ..|exuH.
                /* 0750 */  0x90, 0x23, 0x44, 0x8F, 0xCB, 0x23, 0xC4, 0x9C,  // .#D..#..
                /* 0758 */  0x6F, 0x30, 0x43, 0x04, 0xD7, 0x59, 0x00, 0x1C,  // o0C..Y..
                /* 0760 */  0x43, 0x04, 0x3E, 0x67, 0x4C, 0x9F, 0x71, 0x60,  // C.>gL.q`
                /* 0768 */  0xFE, 0xFF, 0xCF, 0x38, 0xEC, 0xD2, 0xC3, 0x07,  // ...8....
                /* 0770 */  0x6A, 0x78, 0x13, 0xF8, 0xFE, 0x8C, 0x3B, 0xD2,  // jx....;.
                /* 0778 */  0x18, 0x9C, 0x1F, 0x33, 0x1E, 0x76, 0x18, 0xF8,  // ...3.v..
                /* 0780 */  0xFB, 0x8E, 0x67, 0x70, 0x34, 0x3E, 0xA0, 0x18,  // ..gp4>..
                /* 0788 */  0x21, 0xF8, 0x73, 0xC9, 0x73, 0x8A, 0x35, 0x0F,  // !.s.s.5.
                /* 0790 */  0x52, 0x33, 0x7A, 0x67, 0x38, 0x04, 0x76, 0xB3,  // R3zg8.v.
                /* 0798 */  0xC2, 0x1D, 0x38, 0x3C, 0x04, 0x3E, 0x80, 0x56,  // ..8<.>.V
                /* 07A0 */  0x27, 0x47, 0x4E, 0x3F, 0xA7, 0x84, 0x1B, 0x3E,  // 'GN?...>
                /* 07A8 */  0xBF, 0x0A, 0x60, 0x0E, 0x41, 0x38, 0x85, 0x36,  // ..`.A8.6
                /* 07B0 */  0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D,  // }j4j..L.
                /* 07B8 */  0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1,  // 2.j.....
                /* 07C0 */  0x0B, 0x8B, 0x03, 0xBE, 0x02, 0x74, 0x1C, 0xB0,  // .....t..
                /* 07C8 */  0x3C, 0x0A, 0x1D, 0xC1, 0xC8, 0x9B, 0x40, 0x20,  // <.....@ 
                /* 07D0 */  0x0E, 0x0B, 0x42, 0x23, 0xBD, 0x71, 0x04, 0x62,  // ..B#.q.b
                /* 07D8 */  0xC9, 0xEF, 0x2F, 0x81, 0x58, 0xEE, 0x03, 0x45,  // ../.X..E
                /* 07E0 */  0x20, 0x0E, 0x68, 0x02, 0x9C, 0xAA, 0x00, 0xA7,  //  .h.....
                /* 07E8 */  0xAF, 0x01, 0x81, 0x38, 0x32, 0x08, 0x15, 0xFA,  // ...82...
                /* 07F0 */  0x35, 0x13, 0x88, 0x63, 0x82, 0xD0, 0x50, 0x3E,  // 5..c..P>
                /* 07F8 */  0x40, 0x98, 0xF4, 0x17, 0x80, 0x00, 0x89, 0x11,  // @.......
                /* 0800 */  0x10, 0x16, 0xEE, 0xE5, 0x20, 0x10, 0x4B, 0x7B,  // .... .K{
                /* 0808 */  0x2D, 0x08, 0xC4, 0x42, 0xAC, 0x80, 0xB0, 0xB8,  // -..B....
                /* 0810 */  0x20, 0x34, 0x9C, 0x16, 0x10, 0x26, 0xC9, 0x0C,  //  4...&..
                /* 0818 */  0x08, 0x0B, 0x04, 0x42, 0xE5, 0x3F, 0xD3, 0x04,  // ...B.?..
                /* 0820 */  0x62, 0x91, 0x6E, 0x00, 0xE9, 0xBA, 0x05, 0xE2,  // b.n.....
                /* 0828 */  0x20, 0x7A, 0x40, 0x98, 0x0C, 0x3F, 0x20, 0x2C,  //  z@..? ,
                /* 0830 */  0x34, 0x08, 0x8D, 0xF6, 0x6C, 0x10, 0x20, 0x31,  // 4...l. 1
                /* 0838 */  0x04, 0xC2, 0xE2, 0x3B, 0x02, 0x61, 0xE2, 0xDF,  // ...;.a..
                /* 0840 */  0x44, 0x02, 0x71, 0x4A, 0x4B, 0x10, 0x37, 0xA5,  // D.qJK.7.
                /* 0848 */  0x01, 0x06, 0x11, 0x90, 0x93, 0x6A, 0x02, 0x62,  // .....j.b
                /* 0850 */  0xB9, 0x41, 0x34, 0x24, 0xF2, 0xB0, 0x10, 0x90,  // .A4$....
                /* 0858 */  0x93, 0x82, 0x68, 0xC0, 0xC4, 0x14, 0x90, 0xFF,  // ..h.....
                /* 0860 */  0xFF, 0x43, 0x13, 0x88, 0x80, 0x9C, 0xCA, 0x15,  // .C......
                /* 0868 */  0x10, 0x8B, 0x08, 0x22, 0x20, 0x27, 0x7B, 0x52,  // ..." '{R
                /* 0870 */  0x09, 0xC8, 0x39, 0x41, 0x74, 0x04, 0x20, 0xBA,  // ..9At. .
                /* 0878 */  0x80, 0x58, 0x3E, 0x10, 0x01, 0x39, 0x96, 0x2F,  // .X>..9./
                /* 0880 */  0x20, 0x16, 0x12, 0x44, 0x40, 0x4E, 0xF4, 0xF3,  //  ..D@N..
                /* 0888 */  0x09, 0x44, 0xE2, 0x81, 0x68, 0x10, 0xE4, 0x3F,  // .D..h..?
                /* 0890 */  0x21, 0x20, 0x67, 0x04, 0x11, 0x10, 0x79, 0x12,  // ! g...y.
                /* 0898 */  0x05, 0x21, 0x9A, 0x3E, 0x62, 0x02, 0x71, 0x6A,  // .!.>b.qj
                /* 08A0 */  0x10, 0x9A, 0xEC, 0x27, 0x14, 0x84, 0xFC, 0xFF,  // ...'....
                /* 08A8 */  0x01                                             // .
            })
        }
    }

    Scope (_SB.PCI0.LPC0)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_GPE, 0x03)  // _GPE: General Purpose Events
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Mutex (MECR, 0x00)
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BFFR, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0066,             // Range Minimum
                        0x0066,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                })
                Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x03) && (Arg1 == One)))
                {
                    ECON = One
                    WOLE = Zero
                    W7CF = WIN7 /* \WIN7 */
                    PWRS = ADIN /* \_SB_.PCI0.LPC0.EC0_.ADIN */
                    Notify (AC, 0x80) // Status Change
                    Notify (BAT0, 0x80) // Status Change
                    Notify (BAT0, 0x81) // Information Change
                    LIDS = CLID /* \_SB_.PCI0.LPC0.EC0_.CLID */
                    Notify (LID, 0x80) // Status Change
                    If (((TPOS >= 0x50) && (LINX != One)))
                    {
                        OSVD = One
                    }
                    Else
                    {
                        OSVD = 0x02
                        If ((BRTL == Zero))
                        {
                            BRTL = 0x64
                        }
                    }

                    If (((WLVD != Zero) && (WLDD != Zero)))
                    {
                        WANP = One
                    }
                    Else
                    {
                        WANP = Zero
                    }

                    If (((BTVD != Zero) && (BTDD != Zero)))
                    {
                        BUTP = One
                    }
                    Else
                    {
                        BUTP = Zero
                    }

                    If (QWKY)
                    {
                        If (((WLVD != Zero) && (WLDD != Zero)))
                        {
                            WANE = One
                        }
                        Else
                        {
                            WANE = Zero
                        }

                        BUTE = Zero
                        WDSS = One
                    }
                    Else
                    {
                        SWDS ()
                    }

                    Local0 = BDCH /* \_SB_.PCI0.LPC0.EC0_.BDCH */
                    Local0 = ((Local0 << 0x08) | BDCL) /* \_SB_.PCI0.LPC0.EC0_.BDCL */
                    If ((Local0 <= 0x1194))
                    {
                        BLTP = 0x0E
                        BCTP = 0x09
                    }
                    ElseIf (SMA4)
                    {
                        BLTP = 0x0C
                        BCTP = 0x07
                    }
                    Else
                    {
                        BLTP = 0x0A
                        BCTP = 0x05
                    }

                    RS28 ()
                    T2EC (One)
                    If ((POWK == Zero))
                    {
                        POWK = One
                        ^^^^WMID.RPTE ()
                    }
                }
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                ADIN,   1, 
                ADIS,   1, 
                BAIN,   1, 
                BASM,   1, 
                B2IN,   1, 
                B2SM,   1, 
                Offset (0x01), 
                CLID,   1, 
                    ,   5, 
                LDWP,   1, 
                Offset (0x02), 
                BCSD,   1, 
                BCSC,   1, 
                Offset (0x03), 
                VRID,   8, 
                SKID,   8, 
                OSVD,   8, 
                W7CF,   8, 
                Offset (0x08), 
                BCLL,   1, 
                Offset (0x09), 
                Offset (0x0A), 
                SADS,   8, 
                ACTP,   8, 
                BCC1,   8, 
                Offset (0x0E), 
                BCTP,   8, 
                BLTP,   8, 
                BMAL,   8, 
                BMAH,   8, 
                BMLB,   8, 
                BMHB,   8, 
                BSLB,   8, 
                BSHB,   8, 
                BAVL,   8, 
                BAVH,   8, 
                BACL,   8, 
                BACH,   8, 
                RSCL,   8, 
                RSCH,   8, 
                BRCL,   8, 
                BRCH,   8, 
                BTPL,   8, 
                BTPH,   8, 
                BCCL,   8, 
                BCCH,   8, 
                BCVL,   8, 
                BCVH,   8, 
                BMEL,   8, 
                BMEH,   8, 
                FCCL,   8, 
                FCCH,   8, 
                BDCL,   8, 
                BDCH,   8, 
                BDVL,   8, 
                BDVH,   8, 
                BMDL,   8, 
                BMDH,   8, 
                BSNL,   8, 
                BSNH,   8, 
                MAN0,   8, 
                MAN1,   8, 
                MAN2,   8, 
                MAN3,   8, 
                MAN4,   8, 
                MAN5,   8, 
                MAN6,   8, 
                MAN7,   8, 
                MAN8,   8, 
                MAN9,   8, 
                MANA,   8, 
                MANB,   8, 
                BCTL,   8, 
                BCTH,   8, 
                BSIL,   8, 
                BSIH,   8, 
                CTMP,   8, 
                Offset (0x42), 
                GTMP,   8, 
                Offset (0x45), 
                DTMP,   8, 
                Offset (0x50), 
                CTJX,   8, 
                CS4P,   8, 
                CTEP,   8, 
                CTDP,   8, 
                GTEP,   8, 
                GTDP,   8, 
                AP00,   8, 
                AP01,   8, 
                AP02,   8, 
                AP03,   8, 
                AP04,   8, 
                AP05,   8, 
                AP06,   8, 
                AP07,   8, 
                AP08,   8, 
                APFG,   8, 
                CPUT,   8, 
                WDSS,   1, 
                VGAM,   1, 
                QWKY,   1, 
                    ,   2, 
                POWK,   1, 
                ACLS,   1, 
                Offset (0x64), 
                WOLE,   1, 
                RTCE,   1, 
                Offset (0x65), 
                WANP,   1, 
                BUTP,   1, 
                WWAP,   1, 
                USBP,   1, 
                WANE,   1, 
                BUTE,   1, 
                WWAE,   1, 
                USBE,   1, 
                SHKM,   8, 
                HKIL,   8, 
                HKIH,   8, 
                MCMD,   8, 
                SCMD,   8, 
                BCD0,   8, 
                BCD1,   8, 
                BCD2,   8, 
                BCD3,   8, 
                Offset (0x70), 
                    ,   6, 
                PSB6,   1, 
                PSB7,   1, 
                ECDY,   8, 
                ECHR,   8, 
                ECMN,   8, 
                ECSC,   8, 
                BAST,   8, 
                Offset (0x8D), 
                BDN0,   8, 
                BDN1,   8, 
                BDN2,   8, 
                BDN3,   8, 
                BDN4,   8, 
                BDN5,   8, 
                BDN6,   8, 
                BDC0,   8, 
                BDC1,   8, 
                BDC2,   8, 
                BDC3,   8, 
                BVCL,   8, 
                BVCH,   8, 
                RTEL,   8, 
                RTEH,   8, 
                ATEL,   8, 
                ATEH,   8, 
                ATFL,   8, 
                ATFH,   8, 
                C1VL,   8, 
                C1VH,   8, 
                C2VL,   8, 
                C2VH,   8, 
                C3VL,   8, 
                C3VH,   8, 
                C4VL,   8, 
                C4VH,   8, 
                CTLB,   128, 
                RCS1,   8, 
                RCS2,   8, 
                RCRC,   8, 
                WCBS,   8, 
                WCSC,   8, 
                WCRC,   8, 
                Offset (0xCB), 
                CTYP,   8, 
                FSDL,   8, 
                FSDH,   8, 
                STFL,   8, 
                STFH,   8, 
                Offset (0xD5), 
                LPWN,   8, 
                LCDT,   8, 
                FNON,   1, 
                Offset (0xD8), 
                FPNL,   8, 
                FPNH,   8, 
                FPAL,   8, 
                FPAH,   8, 
                Offset (0xF0), 
                BLST,   8, 
                FMAC,   8
            }

            Method (D80H, 1, NotSerialized)
            {
                S80H (Arg0)
            }

            Method (TPCM, 0, Serialized)
            {
                If (CPUT)
                {
                    PSCM (PSMV)
                }
                Else
                {
                    PSCM (Zero)
                }
            }

            Name (TSTS, Zero)
            Method (PSCM, 1, Serialized)
            {
                TSTS = Arg0
                Switch (ToInteger (CCNO))
                {
                    Case (0x02)
                    {
                        \_PR.C000._PPC = Arg0
                        \_PR.C001._PPC = Arg0
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                    }
                    Case (0x03)
                    {
                        \_PR.C000._PPC = Arg0
                        \_PR.C001._PPC = Arg0
                        \_PR.C002._PPC = Arg0
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                        Notify (\_PR.C002, 0x80) // Performance Capability Change
                    }
                    Case (0x04)
                    {
                        \_PR.C000._PPC = Arg0
                        \_PR.C001._PPC = Arg0
                        \_PR.C002._PPC = Arg0
                        \_PR.C003._PPC = Arg0
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                        Notify (\_PR.C002, 0x80) // Performance Capability Change
                        Notify (\_PR.C003, 0x80) // Performance Capability Change
                    }
                    Default
                    {
                        \_PR.C000._PPC = Arg0
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                    }

                }
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (One)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x02)
                Local0 = One
                Local1 = Zero
                Local2 = LPWN /* \_SB_.PCI0.LPC0.EC0_.LPWN */
                While (Local0)
                {
                    If ((LPWN == BGTB (PBCM, (Local1 << One))))
                    {
                        Local0 = Zero
                        If ((Zero != Local1))
                        {
                            Local1--
                        }
                    }
                    ElseIf ((LPWN < BGTB (PBCM, (Local1 << One))))
                    {
                        Local0 = Zero
                        If ((Zero != Local1))
                        {
                            Local1--
                        }

                        If ((Zero != Local1))
                        {
                            Local1--
                        }
                    }
                    ElseIf ((LPWN > BGTB (PBCM, (Local1 << One))))
                    {
                        Local1++
                        If ((0x0A == Local1))
                        {
                            Local0 = Zero
                            Local1--
                        }
                    }
                }

                LPWN = BGTB (PBCM, (Local1 << One))
                Notify (^^^VGA.LCD, 0x87) // Device-Specific
                Notify (^^^PB4.VGA.LCD, 0x87) // Device-Specific
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x03)
                Local0 = One
                Local1 = Zero
                Local2 = LPWN /* \_SB_.PCI0.LPC0.EC0_.LPWN */
                While (Local0)
                {
                    If ((LPWN == BGTB (PBCM, (Local1 << One))))
                    {
                        Local0 = Zero
                        If ((0x0A != Local1))
                        {
                            Local1++
                        }
                    }
                    ElseIf ((LPWN < BGTB (PBCM, (Local1 << One))))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((LPWN > BGTB (PBCM, (Local1 << One))))
                    {
                        Local1++
                        If ((0x0A == Local1))
                        {
                            Local0 = Zero
                        }
                    }
                }

                LPWN = BGTB (PBCM, (Local1 << One))
                Notify (^^^VGA.LCD, 0x86) // Device-Specific
                Notify (^^^PB4.VGA.LCD, 0x86) // Device-Specific
            }

            Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x04)
                If ((OSVD == 0x02))
                {
                    ^^^VGA.AFN0 ()
                    ^^^PB4.VGA.AFN0 ()
                }
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x05)
            }

            Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x06)
            }

            Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x07)
            }

            Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x08)
            }

            Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x09)
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x0A)
                PWRS = ADIN /* \_SB_.PCI0.LPC0.EC0_.ADIN */
                Notify (AC, 0x80) // Status Change
                Notify (BAT0, 0x80) // Status Change
                Notify (BAT0, 0x81) // Information Change
                ^^^^WMID.WEID = 0x03
                ^^^^WMID.WMED = Zero
                Notify (WMID, 0x80) // Status Change
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x0B)
                Notify (BAT0, 0x80) // Status Change
                Notify (BAT0, 0x81) // Information Change
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x0C)
                LIDS = CLID /* \_SB_.PCI0.LPC0.EC0_.CLID */
                Notify (LID, 0x80) // Status Change
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x0D)
                LIDS = CLID /* \_SB_.PCI0.LPC0.EC0_.CLID */
                Notify (LID, 0x80) // Status Change
            }

            Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x0E)
            }

            Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x0F)
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x10)
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x11)
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x12)
                If ((TPOS >= 0x60))
                {
                    Notify (WLBD, 0x80) // Status Change
                    Return (Zero)
                }

                If (QWKY)
                {
                    If (WANE)
                    {
                        WANE = Zero
                    }
                    Else
                    {
                        WANE = One
                    }

                    Return (Zero)
                }

                If (((TPOS >= 0x50) && (LINX != One)))
                {
                    If (BTLS)
                    {
                        BTLS = Zero
                        If (WIRE)
                        {
                            If (WANP)
                            {
                                WANE = Zero
                            }

                            If (BUTP)
                            {
                                BUTE = Zero
                            }

                            ^^^^WMID.WEID = 0x05
                            ^^^^WMID.WMED = Zero
                            Notify (WMID, 0x80) // Status Change
                        }
                        Else
                        {
                            If (WANP)
                            {
                                WANE = Zero
                            }

                            If (BUTP)
                            {
                                BUTE = Zero
                            }
                        }
                    }
                    Else
                    {
                        BTLS = One
                        If (WIRE)
                        {
                            If ((WLAN && ((WLVD != Zero) && (WLDD != Zero))))
                            {
                                WANE = One
                            }
                            Else
                            {
                                WANE = Zero
                            }

                            If ((BTTH && ((BTVD != Zero) && (BTDD != Zero))))
                            {
                                BUTE = One
                            }
                            Else
                            {
                                BUTE = Zero
                            }

                            ^^^^WMID.WEID = 0x05
                            ^^^^WMID.WMED = Zero
                            Notify (WMID, 0x80) // Status Change
                        }
                        Else
                        {
                            If (WANP)
                            {
                                WANE = One
                            }

                            If (BUTP)
                            {
                                BUTE = One
                            }
                        }
                    }
                }
                ElseIf (BTLS)
                {
                    BTLS = Zero
                    WLAN = Zero
                    BTTH = Zero
                    WANE = Zero
                    BUTE = Zero
                }
                Else
                {
                    BTLS = One
                    WLAN = One
                    BTTH = One
                    WANE = One
                    BUTE = One
                }
            }

            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x14)
                ^^^^WMID.WEID = 0x04
                ^^^^WMID.WMED = Zero
                Notify (WMID, 0x80) // Status Change
            }

            Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x16)
            }

            Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x17)
            }

            Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x18)
            }

            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x19)
            }

            Method (_Q1A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x1A)
            }

            Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x1B)
            }

            Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x1C)
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x1D)
            }

            Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x1E)
            }

            Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x1F)
            }

            Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x20)
                TPCM ()
            }

            Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x21)
            }

            Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x22)
            }

            Method (_Q23, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x23)
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x24)
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x25)
            }

            Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x26)
            }

            Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x27)
            }

            Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x28)
            }

            Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x29)
                Notify (\_TZ.TSZ0, 0x80) // Thermal Status Change
                Sleep (0x05DC)
                Notify (\_TZ.TSZ0, 0x81) // Thermal Trip Point Change
            }

            Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x40)
                BCLL = Zero
                If ((Zero == ADIN))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
            }

            Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x41)
                BTLS = One
                WLAN = One
                BTTH = One
                WANE = One
                BUTE = One
            }

            Method (_Q42, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0x42)
                BTLS = Zero
                WLAN = Zero
                BTTH = Zero
                WANE = Zero
                BUTE = Zero
            }

            Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                T2EC (One)
            }

            Method (T2EC, 1, NotSerialized)
            {
                ECSC = FromBCD (^^^SMBS.RTC0)
                ECMN = FromBCD (^^^SMBS.RTC2)
                ECHR = FromBCD (^^^SMBS.RTC4)
                ECDY = FromBCD (^^^SMBS.RTC6)
                If ((Arg0 == One))
                {
                    PSB7 = One
                }
                ElseIf ((Arg0 == Zero))
                {
                    PSB6 = One
                }
            }

            Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                T2EC (Zero)
            }

            Name (B_BK, Zero)
            Name (B_ST, Zero)
            Method (_QC0, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                D80H (0xC0)
                If ((AP00 == 0x0B))
                {
                    Local0 = Zero
                    Switch (ToInteger (AP01))
                    {
                        Case (0x69)
                        {
                            B_BK = LPWN /* \_SB_.PCI0.LPC0.EC0_.LPWN */
                            LPWN = AP02 /* \_SB_.PCI0.LPC0.EC0_.AP02 */
                            Local0 = LPWN /* \_SB_.PCI0.LPC0.EC0_.LPWN */
                        }
                        Case (0x73)
                        {
                            LPWN = AP02 /* \_SB_.PCI0.LPC0.EC0_.AP02 */
                            Local0 = LPWN /* \_SB_.PCI0.LPC0.EC0_.LPWN */
                        }
                        Case (0x65)
                        {
                            LPWN = B_BK /* \_SB_.PCI0.LPC0.EC0_.B_BK */
                            Local0 = LPWN /* \_SB_.PCI0.LPC0.EC0_.LPWN */
                        }

                    }

                    AP00 = Local0
                }
                Else
                {
                    OG00 = AP00 /* \_SB_.PCI0.LPC0.EC0_.AP00 */
                    OG01 = AP01 /* \_SB_.PCI0.LPC0.EC0_.AP01 */
                    OG02 = AP02 /* \_SB_.PCI0.LPC0.EC0_.AP02 */
                    OG03 = AP03 /* \_SB_.PCI0.LPC0.EC0_.AP03 */
                    OG04 = AP04 /* \_SB_.PCI0.LPC0.EC0_.AP04 */
                    OG05 = AP05 /* \_SB_.PCI0.LPC0.EC0_.AP05 */
                    OG06 = AP06 /* \_SB_.PCI0.LPC0.EC0_.AP06 */
                    OG07 = AP07 /* \_SB_.PCI0.LPC0.EC0_.AP07 */
                    OG08 = AP08 /* \_SB_.PCI0.LPC0.EC0_.AP08 */
                    SSMP = 0xC9
                    AP00 = OG00 /* \OG00 */
                    AP01 = OG01 /* \OG01 */
                    AP02 = OG02 /* \OG02 */
                    AP03 = OG03 /* \OG03 */
                }

                APFG = Zero
            }

            Method (VGAD, 1, NotSerialized)
            {
                VGAM = Arg0
            }

            Method (SWDS, 0, NotSerialized)
            {
                If (BTLS)
                {
                    If ((WLLS && ((WLVD != Zero) && (WLDD != Zero))))
                    {
                        WANE = One
                    }
                    Else
                    {
                        WANE = Zero
                    }

                    If ((BELS && ((BTVD != Zero) && (BTDD != Zero))))
                    {
                        BUTE = One
                    }
                    Else
                    {
                        BUTE = Zero
                    }
                }
                Else
                {
                    WANE = Zero
                    BUTE = Zero
                }

                WDSS = One
            }

            Method (RS28, 0, NotSerialized)
            {
                CTP1 = 0xFF
                CTP2 = 0xFF
                CTP3 = 0xFF
                GTP1 = 0xFF
                GTP2 = 0xFF
                FTP1 = 0xFF
                FTP2 = 0xFF
                FTP3 = 0xFF
                FTP4 = 0xFF
                FTP5 = 0xFF
                BTP1 = 0xFF
                BTP2 = 0xFF
                CPTV = 0xFF
                GPTV = 0xFF
                FNTV = 0xFF
                BTTV = 0xFF
                TMTS = Zero
            }

            Method (_Q50, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \_TZ.TSZ0.S3FF = One
                Notify (\_TZ.TSZ0, 0x80) // Thermal Status Change
                Sleep (0x05DC)
                Notify (\_TZ.TSZ0, 0x81) // Thermal Trip Point Change
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Sleep (0x05)
                    If (ECON)
                    {
                        Acquire (MECR, 0xFFFF)
                        Sleep (0x05)
                        Local0 = BAIN /* \_SB_.PCI0.LPC0.EC0_.BAIN */
                        Release (MECR)
                        If ((Local0 == One))
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                {
                    Return (_SB) /* \_SB_ */
                }

                Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                {
                    Name (BATI, Package (0x0D)
                    {
                        One, 
                        0x2710, 
                        0x2710, 
                        Zero, 
                        Ones, 
                        0x03E8, 
                        0x0190, 
                        0x64, 
                        0x64, 
                        "", 
                        "", 
                        "LiOn", 
                        "HP"
                    })
                    Sleep (0x05)
                    If (ECON)
                    {
                        Acquire (MECR, 0xFFFF)
                        Local0 = BDCH /* \_SB_.PCI0.LPC0.EC0_.BDCH */
                        Local0 = ((Local0 << 0x08) | BDCL) /* \_SB_.PCI0.LPC0.EC0_.BDCL */
                        Local0 = FCCH /* \_SB_.PCI0.LPC0.EC0_.FCCH */
                        Local0 = ((Local0 << 0x08) | FCCL) /* \_SB_.PCI0.LPC0.EC0_.FCCL */
                        BATI [One] = Local0
                        BATI [0x02] = Local0
                        Local3 = (Local0 * BLTP) /* \_SB_.PCI0.LPC0.EC0_.BLTP */
                        Divide (Local3, 0x64, Local1, Local2)
                        If (Local1)
                        {
                            Local2 += One
                        }

                        BATI [0x05] = Local2
                        Local3 = (Local0 * BCTP) /* \_SB_.PCI0.LPC0.EC0_.BCTP */
                        Divide (Local3, 0x64, Local1, Local2)
                        If (Local1)
                        {
                            Local2 += One
                        }

                        BATI [0x06] = Local2
                        Local0 = BDVH /* \_SB_.PCI0.LPC0.EC0_.BDVH */
                        Local0 = ((Local0 << 0x08) | BDVL) /* \_SB_.PCI0.LPC0.EC0_.BDVL */
                        BATI [0x04] = Local0
                        Release (MECR)
                    }

                    Return (BATI) /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.BATI */
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Name (PBST, Package (0x04)
                    {
                        0x02, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    Sleep (0x05)
                    If (ECON)
                    {
                        Acquire (MECR, 0xFFFF)
                        If (ADIN)
                        {
                            Local0 = RSCL /* \_SB_.PCI0.LPC0.EC0_.RSCL */
                            If (((BSLB & 0x20) && (Local0 == 0x64)))
                            {
                                PBST [Zero] = Zero
                            }
                            ElseIf (BCSC)
                            {
                                PBST [Zero] = 0x02
                            }
                            Else
                            {
                                PBST [Zero] = Zero
                            }
                        }
                        ElseIf (BCLL)
                        {
                            PBST [Zero] = 0x05
                        }
                        Else
                        {
                            Local1 = RSCL /* \_SB_.PCI0.LPC0.EC0_.RSCL */
                            If ((Local1 > 0x07))
                            {
                                PBST [Zero] = One
                            }
                            Else
                            {
                                PBST [Zero] = 0x05
                            }
                        }

                        Local0 = BVCH /* \_SB_.PCI0.LPC0.EC0_.BVCH */
                        Local0 = ((Local0 << 0x08) | BVCL) /* \_SB_.PCI0.LPC0.EC0_.BVCL */
                        PBST [One] = Local0
                        Local0 = FCCH /* \_SB_.PCI0.LPC0.EC0_.FCCH */
                        Local0 = ((Local0 << 0x08) | FCCL) /* \_SB_.PCI0.LPC0.EC0_.FCCL */
                        If (BCLL)
                        {
                            Local1 = BCTP /* \_SB_.PCI0.LPC0.EC0_.BCTP */
                            Local1++
                        }
                        Else
                        {
                            Local1 = RSCH /* \_SB_.PCI0.LPC0.EC0_.RSCH */
                            Local1 = ((Local1 << 0x08) | RSCL) /* \_SB_.PCI0.LPC0.EC0_.RSCL */
                        }

                        PBST [0x02] = ((Local0 * Local1) / 0x64)
                        Local0 = BAVH /* \_SB_.PCI0.LPC0.EC0_.BAVH */
                        Local0 = ((Local0 << 0x08) | BAVL) /* \_SB_.PCI0.LPC0.EC0_.BAVL */
                        PBST [0x03] = Local0
                        Release (MECR)
                    }

                    Return (PBST) /* \_SB_.PCI0.LPC0.EC0_.BAT0._BST.PBST */
                }
            }
        }
    }

    Mutex (MSMI, 0x07)
    OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
    Field (SMIO, ByteAcc, NoLock, Preserve)
    {
        SMB0,   8, 
        SMB1,   8
    }

    Method (OSMI, 1, NotSerialized)
    {
        Acquire (MSMI, 0xFFFF)
        SMB0 = 0xB2
        Release (MSMI)
    }

    Name (RTCC, Zero)
    Method (GHWI, 2, NotSerialized)
    {
        Acquire (MSMI, 0xFFFF)
        HWCT = Arg0
        HWBC = Arg1
        SSMP = 0xC3
        If ((HWRC != Zero))
        {
            RTCC = HWRC /* \HWRC */
        }

        Release (MSMI)
        Return (Zero)
    }

    Scope (_TZ)
    {
        ThermalZone (TSZ0)
        {
            Name (REGN, "Processor Thermal Zone")
            Method (CTOK, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0xFF)
                If ((Local0 >= 0x7D))
                {
                    Local0 = 0x1E
                }

                If ((Local0 <= 0x05))
                {
                    Local0 = 0x1E
                }

                Local0 *= 0x0A
                Local0 += 0x0AAC
                Return (Local0)
            }

            Method (KTOC, 1, NotSerialized)
            {
                Local0 = (Arg0 - 0x0AAC)
                Divide (Local0, 0x0A, Local1, Local0)
                Return (Local0)
            }

            Method (FMAX, 0, NotSerialized)
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.FPAH
                    Local0 <<= 0x08
                    Local0 &= \_SB.PCI0.LPC0.EC0.FPAL
                }
                Else
                {
                    Local0 = 0x11F8
                }

                Return (Local0)
            }

            Method (FMIN, 0, NotSerialized)
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.FPNH
                    Local0 <<= 0x08
                    Local0 &= \_SB.PCI0.LPC0.EC0.FPNL
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (FRSP, 0, NotSerialized)
            {
                Local0 = Zero
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.FSDH
                    Local0 <<= 0x08
                    Local0 &= \_SB.PCI0.LPC0.EC0.FSDL
                }

                Return (Local0)
            }

            Method (FSSP, 1, NotSerialized)
            {
                If (ECON)
                {
                    \_SB.PCI0.LPC0.EC0.FNON = Arg0
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                If (ECON)
                {
                    Local1 = 0x78
                }
                Else
                {
                    Local1 = 0x78
                }

                Local0 = CTOK (Local1)
                Return (Local0)
            }

            Method (_HOT, 0, NotSerialized)  // _HOT: Hot Temperature
            {
                If (ECON)
                {
                    Local1 = \_SB.PCI0.LPC0.EC0.CS4P
                    If (((Local1 >= 0x7D) || (Local1 < 0x05)))
                    {
                        Local1 = 0x60
                    }
                }
                Else
                {
                    Local1 = 0x60
                }

                Local0 = CTOK (Local1)
                Return (Local0)
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Switch (ToInteger (CCNO))
                {
                    Case (0x02)
                    {
                        Return (Package (0x02)
                        {
                            \_PR.C000, 
                            \_PR.C001
                        })
                    }
                    Case (0x03)
                    {
                        Return (Package (0x03)
                        {
                            \_PR.C000, 
                            \_PR.C001, 
                            \_PR.C002
                        })
                    }
                    Case (0x04)
                    {
                        Return (Package (0x04)
                        {
                            \_PR.C000, 
                            \_PR.C001, 
                            \_PR.C002, 
                            \_PR.C003
                        })
                    }
                    Default
                    {
                        Return (\_PR.C000)
                    }

                }
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                If (ECON)
                {
                    Local1 = \_SB.PCI0.LPC0.EC0.CTEP
                }
                Else
                {
                    Local1 = 0x5D
                }

                Local0 = CTOK (Local1)
                Return (Local0)
            }

            Name (S3FF, Zero)
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If (S3FF)
                {
                    S3FF = Zero
                    Local0 = \_SB.PCI0.LPC0.EC0.CS4P
                    Local0 += 0x05
                    Local0 *= 0x0A
                    Local0 += 0x0AAC
                    Return (Local0)
                }

                If (ECON)
                {
                    Local1 = \_SB.PCI0.LPC0.EC0.CTMP
                }
                Else
                {
                    Local1 = 0x50
                }

                Local0 = CTOK (Local1)
                Return (Local0)
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (0x03)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x04)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (0x64)
            }
        }
    }

    Scope (_SB)
    {
        Device (AC)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = One
                If (ECON)
                {
                    Acquire (^^PCI0.LPC0.EC0.MECR, 0xFFFF)
                    Local0 = ^^PCI0.LPC0.EC0.ADIN /* \_SB_.PCI0.LPC0.EC0_.ADIN */
                    Release (^^PCI0.LPC0.EC0.MECR)
                }

                If (Local0)
                {
                    ^^PCI0.VGA.AFN4 (One)
                }
                Else
                {
                    ^^PCI0.VGA.AFN4 (0x02)
                }

                Return (Local0)
            }

            Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
            {
                Return (_SB) /* \_SB_ */
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (ECON)
                {
                    Local0 = ^^PCI0.LPC0.EC0.CLID /* \_SB_.PCI0.LPC0.EC0_.CLID */
                    Return (Local0)
                }
                Else
                {
                    Return (One)
                }
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (WLBD)
        {
            Name (_HID, "HPQ6001")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPOS >= 0x60))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.LPC0)
    {
        Device (KBC0)
        {
            Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
        }

        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Local0 = (PSID >> 0x04)
                If ((Local0 == 0x05))
                {
                    Return ("SYN1E4B")
                }
                ElseIf ((Local0 == 0x04))
                {
                    Return ("SYN1E4A")
                }
                Else
                {
                    Return ("SYN1E4B")
                }
            }

            Name (_CID, Package (0x03)  // _CID: Compatible ID
            {
                EisaId ("SYN1E00"), 
                EisaId ("SYN0002"), 
                EisaId ("PNP0F13") /* PS/2 Mouse */
            })
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQNoFlags ()
                    {12}
            })
        }
    }

    Method (OWAK, 1, NotSerialized)
    {
        \_SB.PCI0.LPC0.EC0.W7CF = WIN7 /* \WIN7 */
        If (((TPOS >= 0x50) && (LINX != One)))
        {
            \_SB.PCI0.LPC0.EC0.OSVD = One
        }
        Else
        {
            \_SB.PCI0.LPC0.EC0.OSVD = 0x02
            If ((BRTL == Zero))
            {
                BRTL = 0x64
            }
        }

        Local0 = \_SB.PCI0.LPC0.EC0.BDCH
        Local0 = ((Local0 << 0x08) | \_SB.PCI0.LPC0.EC0.BDCL)
        If ((Local0 <= 0x1194))
        {
            \_SB.PCI0.LPC0.EC0.BLTP = 0x0E
            \_SB.PCI0.LPC0.EC0.BCTP = 0x09
        }
        ElseIf (SMA4)
        {
            \_SB.PCI0.LPC0.EC0.BLTP = 0x0C
            \_SB.PCI0.LPC0.EC0.BCTP = 0x07
        }
        Else
        {
            \_SB.PCI0.LPC0.EC0.BLTP = 0x0A
            \_SB.PCI0.LPC0.EC0.BCTP = 0x05
        }

        If (((WLVD != Zero) && (WLDD != Zero)))
        {
            \_SB.PCI0.LPC0.EC0.WANP = One
        }
        Else
        {
            \_SB.PCI0.LPC0.EC0.WANP = Zero
        }

        If (((BTVD != Zero) && (BTDD != Zero)))
        {
            \_SB.PCI0.LPC0.EC0.BUTP = One
        }
        Else
        {
            \_SB.PCI0.LPC0.EC0.BUTP = Zero
        }

        If (\_SB.PCI0.LPC0.EC0.QWKY)
        {
            \_SB.PCI0.LPC0.EC0.WDSS = One
        }
        Else
        {
            \_SB.PCI0.LPC0.EC0.SWDS ()
        }

        If ((Arg0 == 0x03))
        {
            If ((\_SB.PCI0.SPB1.WKST & 0x00010000)) {}
            Else
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
                LIDS = \_SB.PCI0.LPC0.EC0.CLID
                Notify (\_SB.LID, 0x80) // Status Change
            }
        }

        If ((Arg0 == 0x04))
        {
            If (\_SB.PCI0.LPC0.EC0.TSTS)
            {
                \_SB.PCI0.LPC0.EC0.PSCM (Zero)
            }

            LIDS = \_SB.PCI0.LPC0.EC0.CLID
            Notify (\_SB.LID, 0x80) // Status Change
        }

        Notify (\_SB.PCI0.LPC0.EC0.BAT0, 0x80) // Status Change
        \_SB.PCI0.LPC0.EC0.T2EC (One)
        If ((\_SB.PCI0.LPC0.EC0.POWK == Zero))
        {
            \_SB.PCI0.LPC0.EC0.POWK = One
            \_SB.WMID.RPTE ()
        }
    }

    Method (OPTS, 1, NotSerialized)
    {
        \_SB.PCI0.LPC0.EC0.T2EC (0x02)
        If ((\_SB.PCI0.LPC0.EC0.QWKY == Zero))
        {
            WLLS = \_SB.PCI0.LPC0.EC0.WANE
            BELS = \_SB.PCI0.LPC0.EC0.BUTE
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : CD
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                 FACS Address : DFC96000
[028h 0040   4]                 DSDT Address : DFEDE000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000085A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B0

[080h 0128   1]         Value to cause reset : FB
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000DFC96000
[08Ch 0140   8]                 DSDT Address : 00000000DFEDE000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 CD 48 50 51 4F 45 4D  // FACP......HPQOEM
    0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 41 43 50 49  // SLIC-MPC....ACPI
    0020: 00 00 04 00 00 60 C9 DF 00 E0 ED DF 00 02 09 00  // .....`..........
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 00 13 00 00  // e...............
    0070: A5 85 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 60 C9 DF 00 00 00 00 00 E0 ED DF  // .....`..........
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DA
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]            Hardware Block ID : 43538210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 DA 48 50 20 20 20 20  // HPET8.....HP    
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 41 43 50 49  // INSYDE  ....ACPI
    0020: 00 00 04 00 10 82 53 43 00 00 00 00 00 00 D0 FE  // ......SC........
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 29
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 29 48 50 20 20 20 20  // MCFG<....)HP    
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 41 43 50 49  // INSYDE  ....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 39
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 39 48 50 51 4F 45 4D  // SLICv....9HPQOEM
    0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 41 43 50 49  // SLIC-MPC....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00                                // ......


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "HP    ", "INSYDE  ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD01, 0xF8000000)
        Alias (AD01, A086)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x07, 0x04, 0x07, 0x01, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }
        })
        Alias (AD07, A087)
        Name (A088, Buffer (0x0100) {})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A026 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A030 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A041 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A066 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A089 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A069 (Arg1))
            }

            Return (0x00)
        }

        Method (A089, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A007, 2, Serialized)
        {
            Local0 = (A086 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A090, SystemMemory, Local0, 0x04)
            Field (A090, DWordAcc, NoLock, Preserve)
            {
                A091,   32
            }

            Return (A091) /* \_SB_.A007.A091 */
        }

        Method (A008, 3, Serialized)
        {
            Local0 = (A086 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A090, SystemMemory, Local0, 0x04)
            Field (A090, DWordAcc, NoLock, Preserve)
            {
                A091,   32
            }

            A091 = Arg2
        }

        Method (A052, 4, Serialized)
        {
            Local0 = A007 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A008 (Arg0, Arg1, Local0)
        }

        Mutex (A092, 0x00)
        Method (A053, 2, NotSerialized)
        {
            Acquire (A092, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A008 (Local0, 0xE0, Arg1)
            Local0 = A007 (Local0, 0xE4)
            Release (A092)
            Return (Local0)
        }

        Method (A093, 3, NotSerialized)
        {
            Acquire (A092, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A008 (Local0, 0xE0, Arg1)
            A008 (Local0, 0xE4, Arg2)
            Release (A092)
        }

        Method (A050, 4, NotSerialized)
        {
            Local0 = A053 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A093 (Arg0, Arg1, Local0)
        }

        Mutex (A094, 0x00)
        Method (A042, 3, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            A008 (Arg0, Arg1, Arg2)
            Local0 = A007 (Arg0, (Arg1 + 0x04))
            Release (A094)
            Return (Local0)
        }

        Method (A043, 4, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            A008 (Arg0, Arg1, Arg2)
            A008 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A094)
        }

        Method (A028, 5, NotSerialized)
        {
            Local0 = A042 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A043 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A073, 1, NotSerialized)
        {
            Return (DerefOf (A087 [Arg0]))
        }

        Method (A059, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A007 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A007 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A007 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A058, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A058.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A058.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Method (A081, 1, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Arg0++
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD00FFFF) | (Arg0 << 0x10))
            A043 (0x00, 0x60, 0xCD, Local0)
            Local0 = A042 (0x00, 0x60, 0xCE)
            Return (Local0)
        }

        Method (A082, 3, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Local1 = (Arg1 & 0xFFFF)
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD000000) | (Arg0 << 0x10))
            Local0 |= 0x02000000
            Local0 |= Local1
            A043 (0x00, 0x60, 0xCD, Local0)
            If ((Arg2 == 0x01))
            {
                Local1 = (Arg1 >> 0x10)
                Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                     & 0x01000000))
                Local0 = ((Local0 & 0xFF000000) | ((Arg0 + 0x01) << 0x10
                    ))
                Local0 |= Local1
                A043 (0x00, 0x60, 0xCD, Local0)
            }
        }

        Method (A083, 2, NotSerialized)
        {
            Local0 = ((Arg0 << 0x03) | 0x01)
            A082 (0x03, Local0, 0x01)
            If ((Arg1 && 0x01))
            {
                While (((A081 (0x03) & 0x02) != 0x02)) {}
            }

            If ((Arg1 && 0x02))
            {
                While (((A081 (0x03) & 0x04) != 0x04)) {}
            }

            A082 (0x03, 0x00, 0x01)
        }

        Method (A004, 2, NotSerialized)
        {
            A082 (0x0B, Arg0, 0x00)
            A082 (0x05, Arg1, 0x01)
        }

        Method (A003, 1, NotSerialized)
        {
            A082 (0x0B, Arg0, 0x00)
            Local0 = A081 (0x05)
            Return (Local0)
        }

        Method (A084, 1, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            A004 (0x8600, Local0)
            A004 (0x8604, Local1)
            A004 (0x8608, Local2)
            If (((Arg0 >> 0x10) == 0xFE00))
            {
                A083 (0x0D, 0x03)
            }

            If (((Arg0 >> 0x10) == 0xFE30))
            {
                A083 (0x0B, 0x03)
            }

            Return (A003 (0x8650))
        }

        Method (A085, 2, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            Local2 |= (0x01 << 0x10)
            A004 (0x8600, Local0)
            A004 (0x8604, Local1)
            A004 (0x8608, Local2)
            A004 (0x8650, Arg1)
            A083 (0x0B, 0x03)
        }

        Name (AD02, 0x00)
        Alias (AD02, A009)
        Name (AD03, 0x03)
        Alias (AD03, A010)
        Name (AD04, 0x00)
        Alias (AD04, A011)
        Name (AD05, 0x01)
        Alias (AD05, A012)
        Name (AD06, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x02, 
            0x00
        })
        Alias (AD06, A013)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A014)
        Name (A015, 0x00)
        Name (A016, 0x00)
        Name (A017, 0x01)
        Name (A018, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A019, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A020, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A021)
        Name (A022, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A023, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A025, 0x00)
        Method (A026, 1, Serialized)
        {
            Local1 = DerefOf (Arg0 [0x02])
            Local0 = A027 ()
            A016 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A016 << 0x05) | (A017 << 0x06))
            A028 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A006 (A016)
            If ((A009 == 0x04))
            {
                A002 (0x01, A027 ())
            }

            If (((A009 <= 0x01) || (A009 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A015 == 0x00))
            {
                Return (0x00)
            }

            A029 ()
            Return (0x00)
        }

        Method (A030, 1, NotSerialized)
        {
            Local7 = A031 (Arg0)
            Local0 = DerefOf (Local7 [0x02])
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A029 ()
            Return (Local7)
        }

        Method (A031, 1, NotSerialized)
        {
            Name (A032, 0x00)
            A025 = 0x00
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A033)
            A033 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If (((A009 <= 0x01) || (A009 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A015 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A035)
            CreateWordField (Arg0, 0x04, A036)
            CreateWordField (Arg0, 0x06, A037)
            CreateByteField (Arg0, 0x08, A038)
            CreateByteField (Arg0, 0x09, A039)
            A032 = ((A035 >> 0x08) & 0xFF)
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x01))
                {
                    Local1 = A007 (((A025 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A032 >= Local1) && (A032 <= Local2)))
                    {
                        Break
                    }
                }

                A025++
            }

            If ((A025 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (A018 [A025]) == 0x00))
            {
                A018 [A025] = A035 /* \_SB_.A031.A035 */
            }
            ElseIf ((DerefOf (A018 [A025]) != A035))
            {
                Return (Local7)
            }

            A023 [A025] = 0x00
            If ((A039 == 0x00))
            {
                A018 [A025] = 0x00
            }

            If ((A039 == 0x01))
            {
                A023 [A025] = 0x01
            }

            If ((A039 == 0x02))
            {
                A020 [A025] = 0x01
            }

            If ((A039 == 0x03))
            {
                A020 [A025] = 0x02
            }

            If (((A036 & A037) == 0x01))
            {
                A020 [A025] = DerefOf (A013 [A025])
            }

            A034 = 0x02
            Return (Local7)
        }

        Method (A040, 1, Serialized)
        {
            If ((DerefOf (A013 [Arg0]) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A041, 1, Serialized)
        {
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            A015 = DerefOf (Arg0 [0x02])
            Local0 = A042 (0x00, 0x60, 0xF4)
            If ((A015 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A015 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A009 << 0x01)
            A043 (0x00, 0x60, 0xF4, Local0)
            A044 (RefOf (A019), RefOf (A018))
            A006 (A016)
            If ((A009 == 0x04))
            {
                A002 (0x01, A027 ())
            }

            If (((A009 > 0x01) && (A009 < 0x04)))
            {
                If ((A009 == 0x02))
                {
                    A044 (RefOf (A013), RefOf (A021))
                    A025 = 0x00
                    While ((A025 <= A001))
                    {
                        If ((DerefOf (A014 [A025]) != 0x00))
                        {
                            A021 [A025] = DerefOf (A014 [A025])
                        }

                        A025++
                    }
                }
                Else
                {
                    A044 (RefOf (A022), RefOf (A021))
                }

                A029 ()
            }

            Return (Local7)
        }

        Name (A045, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A029, 0, Serialized)
        {
            A025 = 0x00
            A044 (RefOf (A022), RefOf (A045))
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x01))
                {
                    A045 [A025] = A046 (A025)
                }

                A025++
            }

            If ((Match (A023, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A044 (RefOf (A022), RefOf (A045))
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A047 (A010, 0x01)
                A005 (0x02)
                A002 (0x02, A027 ())
            }

            A025 = 0x00
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x00))
                {
                    A025++
                    Continue
                }

                Local0 = DerefOf (A021 [A025])
                Local2 = DerefOf (A045 [A025])
                If ((Local0 == Local2))
                {
                    A025++
                    Continue
                }

                A021 [A025] = Local2
                A048 (A025, Local2)
                A025++
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A002 (0x01, A027 ())
                A005 (0x01)
                A047 (A011, 0x00)
            }
        }

        Method (A046, 1, NotSerialized)
        {
            Local0 = 0x02
            If ((DerefOf (A018 [Arg0]) == 0x00))
            {
                If (((A027 () == 0x01) || (A009 == 0x03)))
                {
                    Local0 = 0x01
                }

                If ((DerefOf (A014 [Arg0]) != 0x00))
                {
                    Local0 = DerefOf (A014 [Arg0])
                }
            }
            Else
            {
                Local0 = DerefOf (A020 [Arg0])
            }

            Return (Local0)
        }

        Method (A048, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A049 (Arg0, Arg1)
            If ((DerefOf (A018 [Arg0]) != 0x00))
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A007 (Local1, 0x70) & 0x00400000)
            If ((Local3 != 0x00))
            {
                A051 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A052 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A007 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        Local4 = A053 (Arg0, 0xA4)
                        If (((Local4 & 0x0800) != 0x00))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A054 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A055, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A056, 0x00)
        Name (A057, 0x00)
        Method (A051, 1, Serialized)
        {
            A056 = 0x00
            A057 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                A055 [0x00] = A058 (0x00, 0x00)
                A058 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A007 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A007 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A056 = A059 ((Local2 + Local4), 0x10)
                If ((A056 == 0x00))
                {
                    Local4++
                    Continue
                }

                A056 += 0x10
                A057 = A007 ((Local2 + Local4), A056)
                A055 [Local4] = (A057 & 0x03)
                A052 ((Local2 + Local4), A056, ~0x03, 0x00)
                Local4++
            }
        }

        Method (A054, 1, Serialized)
        {
            A056 = 0x00
            A057 = 0x00
            If ((Arg0 == 0x06))
            {
                A058 (DerefOf (A055 [0x00]), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A007 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A007 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A056 = A059 ((Local2 + Local4), 0x10)
                If ((A056 == 0x00))
                {
                    Local4++
                    Continue
                }

                A056 += 0x10
                A008 ((Local2 + Local4), A056, DerefOf (A055 [Local4]))
                Local4++
            }
        }

        Method (A049, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A052 (Local0, 0x88, ~0x2F, 0x21)
                A050 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A052 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A047, 2, Serialized)
        {
            Local1 = A042 (0x00, 0x60, 0xEA)
            Local1 |= 0x02
            A043 (0x00, 0x60, 0xEA, Local1)
            Local1 &= ~(0x03 << 0x03)
            Local1 |= (Arg0 << 0x03)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A043 (0x00, 0x60, 0xEA, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A042 (0x00, 0x60, 0xEB) & 0x01)
                }
            }
        }

        Method (A044, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                DerefOf (Arg1) [Local0] = DerefOf (DerefOf (Arg0) [Local0])
                Local0++
            }
        }

        Method (A027, 0, NotSerialized)
        {
            Return ((A016 & A017))
        }

        Name (A060, 0x00)
        Name (A061, 0x00)
        Name (A062, 0x00)
        Name (A063, 0x00)
        Name (A064, 0x00)
        Name (A065, 0x00)
        Method (A066, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A033)
            CreateWordField (Local7, 0x02, A067)
            CreateByteField (Arg0, 0x02, A068)
            A033 = 0x03
            A067 = A068 /* \_SB_.A066.A068 */
            Return (Local7)
        }

        Method (A069, 1, Serialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            Local1 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local0 = A070 (Local1, Local2)
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A033)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A071)
            A033 = 0x04
            A034 = 0x00
            A071 = Local0
            Return (Local7)
        }

        Name (A072, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00                                       // ..
        })
        Method (A070, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A073 (Arg0)
            Local1 = DerefOf (Local7 [0x07])
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                If ((Local2 == 0x06))
                {
                    A014 [Arg0] = 0x00
                    A050 (Arg0, 0xA2, ~0x2000, 0x00)
                    A017 = 0x00
                    A029 ()
                    A074 (Arg0, 0x01)
                    A075 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A053 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                    }
                    Else
                    {
                        Local2 = 0x04
                    }
                }

                If ((Local2 == 0x02))
                {
                    Local1 = A053 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If ((Local1 == 0x10))
                    {
                        Local2 = 0x05
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                        Continue
                    }

                    Local2 = 0x04
                    If ((DerefOf (A014 [Arg0]) == 0x01))
                    {
                        Continue
                    }

                    If ((A076 (Arg0) == 0x01))
                    {
                        A050 (Arg0, 0xA2, ~0x2000, 0x2000)
                        A014 [Arg0] = 0x01
                        A049 (Arg0, 0x01)
                        Local2 = 0x07
                    }
                }

                If ((Local2 == 0x04))
                {
                    A075 (Arg0, 0x01)
                    A074 (Arg0, 0x00)
                    A014 [Arg0] = 0x01
                    Local2 = 0x00
                }

                If ((Local2 == 0x07))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00)
                        Sleep (0x02)
                        \_SB.ALIC (Local1, 0x01)
                        Local3 = 0x00
                        Local2 = 0x01
                        Continue
                    }

                    Local2 = 0x04
                }

                If ((Local2 == 0x05))
                {
                    Local4 = 0x01
                    Local2 = 0x00
                    A074 (Arg0, 0x02)
                }

                If ((Local2 == 0x00))
                {
                    A017 = 0x01
                    A029 ()
                    Local2 = 0x08
                }
            }

            Return (Local4)
        }

        Method (A074, 2, Serialized)
        {
            Local7 = A073 (Arg0)
            A062 = DerefOf (Local7 [0x02])
            A063 = DerefOf (Local7 [0x03])
            If ((Arg1 == 0x00))
            {
                A077 (Arg0, A062, A063, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A077 (Arg0, A062, A063, 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            Local2 = A078 (Arg0, 0x00)
            If ((A078 (Arg0, 0x01) <= Local2))
            {
                Return (0x00)
            }

            Local1 = A079 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A062 + Local2)
                Local4 = A063 /* \_SB_.A063 */
            }
            Else
            {
                Local4 = (A063 - Local2)
                Local3 = A062 /* \_SB_.A062 */
            }

            A077 (Arg0, Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A076, 1, NotSerialized)
        {
            Local1 = Buffer (0x10) {}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A053 (Arg0, (Local0 + 0xA5))
                Local1 [(Local0 * 0x04)] = Local2
                Local1 [((Local0 * 0x04) + 0x01)] = (
                    Local2 >> 0x08)
                Local1 [((Local0 * 0x04) + 0x02)] = (
                    Local2 >> 0x10)
                Local1 [((Local0 * 0x04) + 0x03)] = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Local1 [Local0]) == 0x2A) && (DerefOf (
                    Local1 [(Local0 + 0x01)]) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A079, 1, Serialized)
        {
            Local7 = A073 (Arg0)
            A060 = DerefOf (Local7 [0x00])
            A061 = DerefOf (Local7 [0x01])
            Local0 = 0x00
            If ((A060 > A061))
            {
                Local0 = 0x01
            }

            Local1 = (A053 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A075, 2, NotSerialized)
        {
            Local7 = A073 (Arg0)
            A065 = DerefOf (Local7 [0x04])
            A064 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            A028 (0x00, 0xE0, ((A064 << 0x10) | (0x0800 + (0x0100 * 
                A065))), ~0x01, Arg1)
        }

        Name (A080, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         // .......
        })
        Method (A078, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A053 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (A080 [Local0])
            }
            Else
            {
                Local7 = A073 (Arg0)
                A060 = DerefOf (Local7 [0x00])
                A061 = DerefOf (Local7 [0x01])
                If ((A060 > A061))
                {
                    Local1 = (A060 - A061) /* \_SB_.A061 */
                }
                Else
                {
                    Local1 = (A061 - A060) /* \_SB_.A060 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A077, 4, Serialized)
        {
            Local7 = A073 (Arg0)
            A062 = Arg1
            A063 = Arg2
            A064 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            If ((A062 > A063))
            {
                Local1 = (A062 - A063) /* \_SB_.A063 */
                Local2 = A063 /* \_SB_.A063 */
            }
            Else
            {
                Local1 = (A063 - A062) /* \_SB_.A062 */
                Local2 = A062 /* \_SB_.A062 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A028 (0x00, 0xE0, ((A064 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Method (A002, 2, NotSerialized)
        {
            Local0 = A003 (0x8490)
            If (((Local0 & 0xF0) != 0x00))
            {
                If ((Arg0 == 0x02))
                {
                    Local0 &= 0xFFFFFFA0
                    Local0 |= 0xA0
                }
                ElseIf ((Arg1 == 0x00))
                {
                    Local0 &= 0xFFFFFF60
                    Local0 |= 0x60
                }
                Else
                {
                    Local0 &= 0xFFFFFF20
                    Local0 |= 0x20
                }

                A004 (0x8490, Local0)
            }
        }

        Method (A005, 1, NotSerialized)
        {
        }

        Name (AD0B, 0x00)
        Method (A006, 1, NotSerialized)
        {
            If ((AD0B == 0x01))
            {
                Local1 = ((0x18 << 0x03) | 0x04)
                Local2 = A007 (Local1, 0x015C)
                If ((Arg0 == 0x00))
                {
                    Local2 |= 0x01
                }
                Else
                {
                    Local2 &= 0xFFFFFFFC
                }

                A008 (Local1, 0x015C, Local2)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "INSYDE  ", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000514, 
                0x000016AD, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x0000045A, 
                0x00000DCF, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000030C, 
                0x0000069B, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000514, 
                0x000016AD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000045A, 
                0x00000DCF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000030C, 
                0x0000069B, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000F800, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000514, 
                0x000016AD, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x0000045A, 
                0x00000DCF, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000030C, 
                0x0000069B, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000514, 
                0x000016AD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000045A, 
                0x00000DCF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000030C, 
                0x0000069B, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000F800, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }
}



